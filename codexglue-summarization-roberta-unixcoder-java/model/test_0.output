0	Emits an element in the queue .
1	Wrap an observable source .
2	Returns an Observable with the specified comparator .
3	Adapts a Connectable observable to a Connectable observable .
4	Creates a new instance of the multicast processor .
5	Factory method .
6	Try to create a subscriber from the source
7	Convert a value to a scalar
8	Resets all handlers .
9	Creates a Maybe from a CompletableSource .
10	Creates a Maybe from a single source .
11	Retries the given number of times .
12	Ensures that the given object is not null .
13	Returns the identity function .
14	Returns a callable for the given value .
15	Returns a function that returns a function .
16	Returns a function that casts to the given class .
17	Creates a new multicast subject .
18	Creates a new multicast subject .
19	Creates a new multicast subject .
20	Creates a new multicast subject .
21	Gets the error .
22	Gets the error .
23	Blocks until the queue is complete .
24	Drains the maximum value from the queue .
25	Request a subscription .
26	Performs the post completion .
27	Completes the given value .
28	Returns the value of the notification .
29	Get the error message .
30	Validates the next observable .
31	Atomically updates the current AtomicReference with the given observer .
32	Validates that the next subscriber has been cancelled .
33	Atomically updates the upstream reference to the upstream reference .
34	Add cap .
35	Multiply two long .
36	Atomically adds the specified value to the specified count .
37	Convert an exception to a NullPointerException .
38	Adds an object to the tail .
39	Shuts down the pool .
40	Creates a scheduled executor service .
41	Sets the subscription .
42	Starts the loop .
43	Wraps the given exception into a RuntimeException .
44	Flatten a Throwable into a list .
45	Throw an exception .
46	Removes all resources .
47	Returns the number of resources in this set .
48	Try to execute a scalar x map on an observable source .
49	Create an Observable that maps each value to a scalar value .
50	Accepts a subscriber .
51	Accepts a notification .
52	Starts the queue .
53	Start unbounded queue .
54	Inserts an object into the queue .
55	Gets the resource .
56	Completes the given value .
57	Called when an error occurs .
58	Completes this consumer .
59	Concatenates the Publisher using the provided Publisher function .
60	Concatenates a sequence of elements into a Stream .
61	Returns a stream with the specified comparator .
62	Waits for the given number of items to complete .
63	Requests the given number of requests to the upstream .
64	Associates the given publisher to this set .
65	Removes a publisher from this set .
66	Observes a Flowable Flow .
67	Parse annotations from annotations .
68	Sets the delay .
69	Creates an error response .
70	Calculates the delay .
71	Creates data for the document dao .
72	Returns the HttpMethod object corresponding to the given string .
73	Search for a user .
74	Encode the raw password .
75	Returns true if the raw password matches the encoded password .
76	Performs the version checks on the Spring Security Core .
77	Check if spring version is enabled
78	Gets the Spring security version .
79	Configure a attribute exchange .
80	Get OAuth2 client .
81	Configure an OAuth2 resource server .
82	Returns a registry that requires a channel request matcher .
83	Returns true if the specified attribute value matches the specified value .
84	Retrieve an entry from the specified dn .
85	Search for multiple attribute values .
86	Search for multiple attribute values .
87	Search for a single entry .
88	Build the search controls .
89	Looks up the primary keys of acls .
90	Build details for authentication web authentication .
91	Create an embedded server definition .
92	Create servlet API filter .
93	Creates the jaas api filter .
94	Whitelisted type resolver .
95	Creates a new spring security filter chain .
96	Returns the token for the given series id .
97	Get all authorities from a collection of attributes .
98	Creates a new cipher .
99	Ensure that the authentication manager is set .
100	Check if the request requires authentication .
101	Checks if the pre - authenticated principal has changed .
102	Performs authentication .
103	Check the content length of the response .
104	Maps an authorities to a mapping .
105	Sets the login processing URL .
106	Updates the default settings .
107	Update access defaults .
108	Map password to string .
109	Extracts the rememberMe cookie value from the request .
110	Encodes cookie tokens .
111	Adds a cookie to the response .
112	Resolves an argument .
113	Extracts the query string from the request .
114	Extract service port .
115	Returns the principal of the authentication object .
116	Logout the user .
117	Attempt to authenticate a user .
118	Builds a provider URL from a list of URLs .
119	Sets the environment properties .
120	Gets the redirect URL .
121	Render the security suffix .
122	Initialize the service service .
123	Gets the UserDetailsService .
124	Adds the Pkce parameters .
125	Determines if the request requires authentication .
126	Checks if the request requires authentication .
127	Determine if the proxy ticket request is required .
128	Is authenticated?
129	Check if proxy receptor request matches the specified request .
130	Create the security expression root .
131	Gets the jWK set .
132	Encodes the given string .
133	This method returns a collection of granted authorities based on the current user .
134	Load user by assertion .
135	Get the pre - authenticated principal .
136	Concatenate an array of byte arrays .
137	Returns a copy of a byte array .
138	Get the granted authorities for the given attributes .
139	Pre - process the map .
140	Gets a collection of granted authority objects .
141	Adds a granted authority collection to the result .
142	Get pre - authenticated principal
143	Gets the shared object .
144	Builds the redirect URL for the given request .
145	Invoke the interceptor
146	Checks the given role .
147	Checks if any of the given roles has any role .
148	Process the auto login cookie .
149	On login success .
150	Attempt to switch to a user .
151	Attempt to exit the current user .
152	Sets the exit user URL .
153	Display public contact index
154	Build the web security filter chain .
155	Decodes the given token .
156	Attempt to authorize the access expression using the access expression .
157	Attempt to authorize the URL using the given URL .
158	Returns a list of granted roles from the JWT .
159	Generate a CSRF token .
160	Display admin page
161	Display the add permission page
162	Add permission .
163	Method to delete a permission
164	Gets the role with the default prefix .
165	Creates a UserDetailsFactoryBean from a string .
166	Returns the values for the specified attribute .
167	Get the first attribute value .
168	Encodes a CharSequence .
169	Decodes a byte array .
170	Looks up the parameter names of the specified annotation .
171	Add a contact
172	Returns the attributes specified by the given method .
173	Add a secure method .
174	Get all config attributes
175	Check if the method is a match .
176	Specifies that any request matches any requests .
177	Handle bind exception .
178	Get a random contact
179	Clear authentication attributes .
180	Returns the field with the given name .
181	Create service url .
182	Create redirect url .
183	Extract the SHA prefix .
184	Authence method .
185	Check the filter stack .
186	Returns an array of registered types .
187	Extracts the cause cause .
188	Registers an access manager .
189	Converts a collection of user authorities to a set .
190	Compares two byte arrays .
191	Sets the default failure URL .
192	Sets the input function to resolve hidden inputs .
193	Build the request URL .
194	Checks if the given URL is an absolute URL .
195	Returns an empty list for the given identifier .
196	Convert result set identifier into a long type
197	Insert entries in an ACL .
198	Creates an object identity .
199	Updates an object identity .
200	Saves the request .
201	Create a matcher that matches all of the given patterns .
202	Returns a matcher that matches any exchange .
203	Create a Deluxor with a salt .
204	Create a text encryptor with the given password and salt .
205	Creates encryptor for queryable text .
206	Writes the X frame options .
207	Determines the target URL .
208	Determine the target URL .
209	Sets the target URL parameter .
210	Retrieves a directory with the immediate parent .
211	Build a DistinguishedName for the username .
212	Creates the shared objects .
213	Configures the jaas . jas . properties .
214	Gets the current date .
215	Internal method to parse a date value .
216	Update cache .
217	Sets authentication details .
218	Determines the websphere security name .
219	Get the groups for a user .
220	Change password for current user .
221	Builds the distinguished name for the group .
222	Verifies that the given sessions exceeded the maximum number of sessions exceeded .
223	Copy details from authentication token to destination .
224	Returns the filters associated with the specified request .
225	Get all filters
226	Gets the context for the given page context .
227	Appends the full DN to the base DN .
228	Set session attributes .
229	Create a BasicAuthScheme .
230	Add filters .
231	Add custom filters .
232	Create a BasicAuthScheme .
233	Create a NTLM authentication scheme .
234	Create a form auth scheme .
235	Sets a proxy for the given URI .
236	Print response body .
237	Returns a new rest assured configuration .
238	Sets the default encoding .
239	Sets the default object mapper .
240	Set the default object mapper .
241	Configures the given log configuration .
242	Configures the given session configuration .
243	Sets the given object mapper configuration .
244	Configures the given JSON configuration .
245	Configures the given xml configuration .
246	Sets the encoder configuration .
247	Configures the given header config with the given header config .
248	Sets the configuration for the given async configuration .
249	Sets a mockMvc config .
250	Configures the given multi - part configuration .
251	Sets the parameter configuration .
252	Configures the given matcher configuration .
253	Allow all hostnames .
254	Declares the given namespaces .
255	Sets the declared namespace .
256	Performs a HTTP request .
257	Sets the request headers .
258	Set default proxy .
259	Sets the control name .
260	Sets a header value .
261	Performs basic authentication .
262	Create a new NTLM credentials .
263	Create headers with additional headers .
264	Resets the context .
265	Sets the response header .
266	Builds the rest assured response .
267	Matches a cookie value matching the given matcher .
268	Matches a Detailed cookie matcher that matches the given comment matcher .
269	Matches an expiration date matcher .
270	Matches a cookie matcher that matches the given domain matcher .
271	Matches a cookie matching the given path matcher .
272	Returns a Detailed cookie matcher that matches the specified matcher .
273	Matches an HTTP cookie matcher .
274	Matches cookie version .
275	Matches a cookie matcher that matches the max age .
276	Expect a header with the given matcher .
277	Expect the given header with the given value .
278	Sets a cookie with the given name .
279	Specify the host to use .
280	Set the number return return type .
281	Set the default parser .
282	Creates a default log configuration with the specified print stream .
283	Enable logging of request and response .
284	Create an HTTP request .
285	Set default boundary .
286	Add attribute .
287	Add a header to the request .
288	Add multi part .
289	Add result handlers .
290	Sets the given parameter .
291	Creates a new HttpClientConfig instance with the given parameters .
292	Set HTTP client configuration .
293	Configures the HTTP request with a multipart mode .
294	Performs a GET request .
295	Returns the value as an integer .
296	Returns the value of the property as a byte .
297	Returns the value as a Short .
298	Returns the property value as a float .
299	Gets the double value .
300	Returns the value as a long .
301	Get a list from json .
302	Get map .
303	Get object from path .
304	Sets the object body .
305	Add a cookie .
306	Add a parameter .
307	Add a parameter .
308	Set the form params update strategy .
309	Returns a filter that logs response to a stream that matches the given matcher .
310	Creates a new Cookies instance with additional cookies .
311	Cleans up for collected state .
312	Adds explicit bindings .
313	Get the binding for the given key .
314	Attempts to convert a string binding to a string binding .
315	Checks if a binding has been resolved .
316	Removes a jit binding .
317	Gets the internal dependencies of a binding .
318	Creates an uninitialized binding .
319	Returns an array of parameters .
320	Binds an injector .
321	Binds a logger instance .
322	Checks if the given member is misplaced binding .
323	Returns true if the method overrides the given method .
324	Initializes the delegate .
325	Gets the provider type .
326	Resolve all types .
327	Canonicalize the given type .
328	Configure type converters .
329	Canonicalize the given class loader .
330	Returns true if this class has the same version of the given class loader .
331	Checks if the given member is publicly callable .
332	Fix annotation .
333	Request a member injection .
334	Validates all injections .
335	Creates a new instance of the constructor .
336	Returns a servlet request wrapper for the servlet request .
337	Creates a new factory .
338	Make a scope binding .
339	Normalizes the path .
340	Generate an annotation .
341	Checks if the annotation is retained at runtime .
342	Find scope annotation .
343	Returns the key for the given type .
344	Returns the name of the given key .
345	Initializes the delegate .
346	Adds a direct type binding to the binder .
347	Gets the injector for the given injection point .
348	Checks if the interceptor has a scope .
349	New real map binder .
350	Returns a new key for the new key .
351	Provisions the given context .
352	Replace the source .
353	Returns a module that installs the given module .
354	Gets assisted methods .
355	Checks if the given type is not part of the configuration exception .
356	Returns true if the constructor has a matching parameters .
357	Returns the set of dependencies for the given implementation .
358	Removes dependencies from the given set .
359	Helper method to check if the dependencies of an assisted provider is optimized .
360	Creates a binding for the given method .
361	Invokes a method .
362	An implementation with hint .
363	New real multibinder .
364	Gets the key for a new item .
365	Find the next filter that matches the given request .
366	Returns true if the constructor is present .
367	Returns the internal constructor .
368	Returns the set of internal dependencies .
369	Creates a Module for the given module
370	Returns the annotation for the given method .
371	Returns the line number for the given member .
372	Processes lookups .
373	Wraps a callable with a seed map .
374	Transfer a callable to a callable .
375	Validates that the given object is compatible with the given key .
376	Returns the injector with the given key .
377	Creates an injector for the given type .
378	Returns a list of injectors .
379	Returns a key for the given type .
380	Returns an instance strategy for the given annotation .
381	Returns an annotation type strategy for the given annotation type .
382	Prune stacktrace .
383	Get the source string .
384	Formats a collection of error messages .
385	Creates a new message with the given message format and arguments .
386	Creates a new message with the specified detail message and arguments .
387	Create a new message with the given message format and cause .
388	Convert object to ElementSource
389	Returns whether the class should be skipped or not .
390	Returns the stack trace element for the given module class names .
391	Main entry point .
392	Pushes a dependency to the context .
393	Adds a new state .
394	Creates an Initializable instance .
395	Provisions the given provider .
396	Handles a connection event .
397	Add a new connection event processor .
398	Get future task result .
399	Ensures that the given Throwable is a RuntimeException .
400	Register a remoting processor
401	Registers the default processor .
402	Get processor by command code
403	Get url .
404	Decodes the protocol code .
405	Get all connections
406	Scan pool tasks .
407	Get a connection .
408	Create a connection .
409	Remove a connection pool .
410	Heal task if necessary
411	Create connection .
412	Closes a connection .
413	On close .
414	Close the connection
415	Sets the value associated with the given key .
416	Register a user processor
417	Register user processor
418	Dispatch request to user processor
419	Deserialize request command
420	Pre - process the remoting context
421	Log timeout log .
422	Debug log .
423	Process the message .
424	Invokes a remoting command .
425	Send request .
426	Converts a bit set to a byte .
427	Convert an integer value to a BitSet .
428	Add a reconnect task .
429	Stops this thread .
430	Converts request object to remoting command
431	Filters the connections
432	Monitor connection pools
433	Closes fresh select connections
434	Get system property .
435	Log info log .
436	Is request timeout?
437	Get user processor by class name .
438	Returns a random connection .
439	Get a value from the context .
440	Get a property .
441	Resolve response object .
442	Converts a response command to an object .
443	Converts a response command to a throwable .
444	Detail error message .
445	Create a new server server server .
446	Print connection trace log
447	Creates a new EventLoopGroup based on the specified thread factory .
448	Parse the remote address .
449	Parse local address from channel .
450	Get remote address from channel .
451	Get the remote host name from the channel .
452	Parse local address from channel .
453	Parse the remote port .
454	Parse the local address of a channel .
455	Parse socket address .
456	Add a connection .
457	Remove a connection
458	Get access .
459	Register a custom serializer
460	Get a custom serializer .
461	Register a custom serializer for the given command code .
462	Get custom serializer
463	Start connection monitor .
464	Check if the remote address is connected .
465	Initialize the write buffer water mark .
466	Returns a frame for the given opcode .
467	Write out to the socket .
468	Sets the error code .
469	Validate UTF8 .
470	Updates the payload .
471	Checks if the requested protocol contains the requested protocol .
472	Translates single frame size limit .
473	Translate single frame check .
474	Generate a final key .
475	Process a continuous frame .
476	Process a binary frame .
477	Logs a runtime exception .
478	Process a text frame .
479	Process frame is fin .
480	Process the current continuous frame .
481	Process a close frame .
482	Check the buffer limit .
483	Get the payload of the buffer
484	Returns the total number of bytes in this buffer .
485	Translate the HTTP request from the HTTP server .
486	Translates the HTTP client response from the server .
487	Decodes the handshake data .
488	Close the connection .
489	Sends a connection to the server .
490	Generate the HTTP response message .
491	Sends text to the WebSocket .
492	Resets the websocket .
493	Starts the connection .
494	Returns the port number .
495	Send handshake .
496	Sets the connection lost timeout .
497	Stop the connection lost timer .
498	Start connection lost timer .
499	Restart the connection lost timer
500	Executes the connection lost detection .
501	Cancels the connection lost timer .
502	On web socket handshake .
503	Sends a ping frame .
504	Stops the websocket .
505	Returns the port of the server .
506	Do additional read .
507	Accept the connection .
508	Performs a read .
509	Handle write operations
510	Start the selector thread
511	Ensure that the selector is active .
512	Closes the server .
513	Gets the socket .
514	Broadcast data to all clients .
515	Broadcast the given text to all registered clients .
516	Broadcast the given data to all clients .
517	Fills the frames of the given draft .
518	Transfer bytes from source to destination .
519	Starts the persistence .
520	Get an entity manager .
521	Creates a new transaction .
522	Convert arguments to a scala buffer .
523	Wraps the argument array if it is a List .
524	Gets a message .
525	Gets a localized message .
526	Checks if the message is defined at the specified language .
527	Returns the preferred language of the given locales .
528	Returns the preferred language of the request .
529	Sets the language of the result .
530	Adds bindings for the given modules .
531	Add bindings for the given modules .
532	Set bindings .
533	Add overrides to the delegate
534	Add overrides for the given modules .
535	Sets the overrides for the given bindings .
536	Disables given module classes .
537	Call this method .
538	Call the current request .
539	Gets an existing file .
540	Sets the binding for the given type .
541	Create a new tuple .
542	Creates a Tuple5 value .
543	Converts an executor to an executor .
544	Returns a new JPAConfig instance with the given name and unit name .
545	Creates a new JPAConfig instance .
546	Creates a new JPAConfig instance from the given map .
547	Creates a string flow from string code .
548	Creates a Flow of JSON nodes .
549	Adds a new constraint validator .
550	Creates a new instance of the given key .
551	Search a method by name and parameter types .
552	Handles the client error .
553	Handles a bad request .
554	Handles a forbidden request .
555	Called when the request is not found .
556	Handles an error .
557	Logs an internal error .
558	Gets the throwable to useful exception .
559	Renders a dev error .
560	Called when an error occurs .
561	Builds a documentation handler from a list of files .
562	Builds a documentation handler from a directory .
563	Builds a doc handler from a directory .
564	Build a documentation handler from a directory and jar file .
565	Builds a documentation handler from a jar file .
566	Consume data .
567	Creates a strict HttpEntity from the given content .
568	Create a strict entity from string .
569	Create a chunked entity .
570	Creates a Result with the given status code .
571	Sends a status message .
572	Creates a result with the given status code .
573	Sends a status response .
574	Sends a status message .
575	Find a user by id .
576	Returns a new language with the preferred language .
577	Returns a unique call .
578	Sets the fragment of this request .
579	Returns an absolute URL for the given request .
580	Returns the web socket URL for the given request .
581	Returns a function that executes a connection .
582	Convert connection callable to callable
583	Creates a new server for the given router .
584	Convert an object to a JsonNode .
585	Converts a JsonNode to an object .
586	Parse a string from a string .
587	Parse an input stream .
588	Returns the relative path between startPath and targetPath .
589	Returns the canonical path .
590	Returns a list of constraints for display .
591	Returns the displayable constraint .
592	Timeouts the given stage .
593	Checks if the given array is assignable to the given array .
594	Parse cron expression
595	Returns the interval between the given date
596	Create a new client with the given configuration .
597	Create a new application builder .
598	This method is called when a request is implemented .
599	Store a session value .
600	Add a value to the flash .
601	The binding key with the given instance .
602	Sets the binding key .
603	Converts the underlying stream to Java .
604	Converts the underlying stream to Java Java .
605	Creates a binding from the given supplier
606	Converts the binding key to a Java value .
607	Converts a provider to a Java provider .
608	Returns the available languages .
609	Returns the preferred language .
610	Creates a new reader from a map .
611	Creates a reader for the specified evolutions .
612	Resets the database evolutions .
613	Apply a configuration loader to the application .
614	Apply a module loader to the application .
615	Loads the application with the given modules .
616	Loads the given modules .
617	Loads the Guice application with the given modules .
618	Loads the Guice application .
619	Create a new Guice application .
620	Encodes a cookie .
621	Returns the EntityManager .
622	Gets the entity manager stack .
623	Removes an EntityManager from the stack .
624	Allows you to bypass a flow with a given function .
625	Performs a bypassing of the given flow .
626	Create an actor flow .
627	Convert arguments to an unmodifiable list .
628	Creates a new form with the specified value .
629	Returns an unmodifiable list of all errors .
630	Get the errors as JSON .
631	Returns the value with the given key .
632	Fills the form with the given value .
633	Parse the given string to the given class .
634	Converts the given text into an object .
635	Converts an object to a string .
636	Print a field .
637	Convert a type to string .
638	Register optional converter .
639	Registers a formatter for the given type .
640	Register an annotation formatter .
641	Encodes a cookie .
642	Returns a list of nodes matching the given path .
643	Convert a Java List to a Seq .
644	Convert an array to a Seq
645	Create an immutable sequence from an array .
646	Creates a mapped websocket acceptor .
647	Create an accept or result .
648	Check if the object is accessible .
649	Returns the cost for the primitive class .
650	Gets the total transformation cost .
651	Get the cost for an object transformation .
652	Get a message by key
653	Get a message by keys
654	Creates a new database from the given configuration .
655	Create a parallel sorter .
656	Performs quick sort .
657	Sorts the specified index using the specified comparator .
658	Invoke this method .
659	cast a numeric type to a type
660	Load a local argument .
661	Generates a field instruction .
662	Write zero or null .
663	Unbox a primitive type .
664	Process an array .
665	Generate code to compare two null values .
666	Resolves all bridges .
667	Get the methods for the given superclass and interfaces .
668	Filters constructors .
669	Sets the superclass of this class .
670	Get field names .
671	Add a method .
672	Returns the cardinality of this value .
673	Sets the naming policy .
674	Find methods in the given array .
675	Resolve a path .
676	Read string .
677	Sets the host .
678	Create an HTTP request .
679	Create an HTTP CONNECT request
680	Create an HTTP GET request
681	Create an HTTP POST request
682	Create an HTTP PUT request
683	Create an HTTP PATCH request .
684	Create an HTTP DELETE request
685	Create an HTTP HEAD request
686	Create a HTTP TRACE request
687	Create an HTTP OPTIONS request
688	Set the path .
689	Adds cookies to the response .
690	Set query parameters .
691	Add query map .
692	Set the query string .
693	Get the query string .
694	Get the host URL .
695	Sets the basic authentication .
696	Sets the host header .
697	Builds the request .
698	Send the response and receive the response .
699	Remove a range from the given range .
700	Returns the length of the exception table .
701	Collect all action interceptors .
702	Collect all action filters .
703	Collect all action results .
704	Collect all action runtimes .
705	Set simple property .
706	Resolves a property .
707	Extracts the property name .
708	Returns the writer .
709	Sets an object reference .
710	Get object reference .
711	Lookup object reference .
712	Returns the table descriptor for the given table ref .
713	Find the table descriptor by column ref .
714	Gets the table alias .
715	Registers a table reference .
716	Lookup the table reference .
717	Registers a hint .
718	Serializes the given value to the given JsonContext .
719	Inject attributes from servlet request .
720	Inject parameters from request .
721	Inject uploaded files .
722	Convert property name to column name .
723	Convert column name to property name .
724	Apply to column name .
725	Stores the value in the PreparedStatement .
726	Prepare value .
727	Get all wrappers .
728	Resolves a wrapper class .
729	Creates a wrapper object .
730	Converts a path to system separators .
731	Get file path .
732	Split the filename into a base name .
733	Returns the relative path of the target path .
734	Register a component
735	Register an action config .
736	Start the application .
737	Configure default values .
738	Register Madvoc components .
739	Exclude jar files .
740	Includes the given jar files .
741	Includes the given entries .
742	Exclude entries from the scanner .
743	Scans a jar file .
744	Scan class files .
745	Returns the bytecode signature of the given type .
746	Add files to be scanned .
747	Start the files .
748	Create a new transaction
749	Get the default scope .
750	Gets or initializes a scope .
751	Executes the given consumer for the given scope type .
752	Decodes a string into a byte array .
753	Prepare a CSRF token .
754	Assure the size of the token set .
755	Check if a CSRF token is present in the session .
756	Create a new BeanCopy from the given object .
757	Creates a copy of this bean .
758	Visit property .
759	Registers the entity reference .
760	Resolves a scope .
761	Registers a new bean definition .
762	Registers a bean with the given name .
763	Remove bean by type .
764	Resolve bean names for the given type .
765	Registers a constructor .
766	Registers a Petite property injection point .
767	Registers a Petite set injection point .
768	Registers a method injection point .
769	Register init methods .
770	Registers Petite destroy methods .
771	Registers a Petite provider .
772	Registers a Petite provider .
773	Iterate over bean type .
774	Define parameters .
775	Intercept the request .
776	Resolve java version .
777	Pushes an int onto the stack .
778	Check that the given argument index is valid .
779	Returns the field name .
780	Returns advice method name .
781	Generates the load instruction for a method .
782	Load the arguments of a static method .
783	Load the arguments of a method .
784	Generates the LOAD instruction for a method argument .
785	Store an argument at the given index .
786	Prepare a return value .
787	Create a key for method signatures .
788	Generates instructions for a new array instruction .
789	Store an array into an array .
790	Extract encoding from content type
791	Returns true if the flags are empty .
792	Resolve thearer token .
793	Require authentication .
794	Prepare the response .
795	Prepare the response .
796	Get all cookies with the given name .
797	Read request body from request .
798	Read request body from request .
799	Stores the context path in the given page context variable .
800	Stores the context path .
801	Check if the request is a GET parameter .
802	Prepares an array of parameters .
803	Copy parameters from servlet request .
804	Invoke the body .
805	Render the body .
806	Render the body of the given fragment .
807	Invoke init methods .
808	Calls the destroy methods .
809	New bean instance .
810	Inject parameters .
811	Rewrites the request .
812	Add a header to the response .
813	Add a property value to the map .
814	Adds a base property .
815	Adds a profile property .
816	Get a property from a profile .
817	Resolves the given value using the specified profiles .
818	Extracts a map from the specified profiles .
819	Converts a byte array to an integer .
820	Hashes a password .
821	Checks if the plaintext password matches the specified hashed password .
822	Copies all bytes from the stream to the output stream .
823	Copies the next byte to the output stream .
824	Parses an action method .
825	Resolve the action configuration .
826	Detect and register alias .
827	Read action interceptors .
828	Read action filters .
829	Reads the action path from the action class .
830	Read method action path .
831	Parse method alias .
832	Create an action runtime .
833	Commit the response .
834	Creates an advice .
835	Inject target into proxy object .
836	Visit an annotation .
837	Resolve real name .
838	Resolve JSON name .
839	Looks up the type data for the given type .
840	Looks up type data .
841	Find the type data for a class .
842	Resolves a JSON name for the given type .
843	Resolve real name .
844	Gets the content of the file .
845	Copy the bootstrap methods from the class .
846	Sets the major version and class name .
847	Puts the constant pool .
848	Writes the bootstrap methods .
849	Add a constant constant fieldref .
850	Add a constant methodref .
851	Adds a reference to the constant pool .
852	Adds a reference to the constant pool .
853	Adds a constant value to the constant pool .
854	Adds an integer or float constant .
855	Adds a constant pool entry to the constant pool .
856	Adds a constant long or double value .
857	Adds a constant name and descriptor .
858	Adds a constant name and type .
859	Adds a string to the constant pool .
860	Adds a UTF8 constant .
861	Adds a constant method handle .
862	Adds a constant method handle .
863	Adds a constant reference to the constant pool .
864	Adds a constant invoke method .
865	Adds a dynamic reference to the constant pool .
866	Adds a dynamic reference .
867	Adds a constant reference to the constant pool .
868	Adds a constant reference to the constant pool .
869	Adds a bootstrap method .
870	Adds a merged type .
871	Generate a hash for a given name .
872	Clears the map .
873	Returns all values with the given name .
874	Returns an iterator over the elements in this iterator .
875	Returns all entries in the map .
876	Grows the buffer .
877	Appends a sequence of characters to the buffer .
878	Visit an annotation .
879	Create proxy methods .
880	Create the first chain .
881	Generate the first chain delegate .
882	Parse a path string .
883	Pushes a field onto the stack .
884	Configures the servlet context .
885	Execute the target method
886	Returns an array of FieldDescriptors .
887	Override this to create a bean definition for a proxy .
888	Converts JtTransactionMode to DBTransactionMode .
889	Reads a property from the source .
890	Adds all entries in the given map to this map .
891	Append a buffer to the end of the list .
892	Write to writer .
893	Write all objects to the output stream .
894	Write to the output stream .
895	Get a string value .
896	Gets an integer value .
897	Get a long value .
898	Gets a double value .
899	Get a float value .
900	Gets a value .
901	Adds a string value .
902	Connects to the specified folder .
903	Receives messages from the folder .
904	Updates the flags of an email .
905	Close a folder if it is open .
906	Look up named parameter by name .
907	Create a string alias .
908	Performs validation action .
909	Adds a violation to the validator .
910	Sets the mime data .
911	Set downloadable file .
912	Sets the target .
913	Sets the target .
914	Sets the target class .
915	Process the target class .
916	Create proxy .
917	Execute the proxy .
918	Create a new instance of the Proxetta class
919	Dump proxy class to debug folder
920	Sets the from address .
921	Add a recipient address .
922	Adds a to address .
923	Sets the reply to .
924	Add a cc cc address .
925	Create a text message with the given text .
926	Create an HTML message .
927	Sets a header .
928	Get system property .
929	Gets a boolean value .
930	Get integer value .
931	Get long value .
932	Returns the resolved parameters .
933	Serialize a key value
934	Lookup an alias .
935	Resolve alias .
936	Resolve result path .
937	Resolves a result path string .
938	Get the index of the last dot in a string
939	Returns the index of the last dot after a slash .
940	Gets the index of a dot after a slash .
941	Strip the last camel word from a name .
942	Resolve schema name .
943	Resolve column descriptors .
944	Initializes this threefish key .
945	Compute the mix of x and d .
946	Demix x .
947	Add a new key schedule .
948	Initializes the key message with the given key message .
949	Encrypt a block .
950	Converts a byte array to long array .
951	Removes a bounding box from a string .
952	Get the path of this method .
953	Get zlib file .
954	Gzip file .
955	Ungzip a file .
956	List a zip file .
957	Unzip a zip file .
958	Adds a file to the ZIP output stream .
959	Adds content to a ZIP output stream .
960	Gets a field descriptor .
961	Returns the property descriptor for the given name or null if not found .
962	Sets the request bundle name .
963	Sets the locale for the given locale .
964	Returns the locale of the session .
965	Filters the parameters for a bean name .
966	Add profiles to the list of profiles .
967	Read long from buffer .
968	Read input stream .
969	Returns the label for the given bytecode offset .
970	Read type annotation offset .
971	Read element values .
972	Read verification type information .
973	Read the bootstrap methods attribute .
974	Inspect the class s constructors .
975	Find the constructor descriptor .
976	Gets the request map .
977	Creates the request map .
978	Convert array to array .
979	Initializes the Decora .
980	Registers a file consumer .
981	Add file to search path
982	Add file to search path .
983	Includes the given patterns .
984	Excludes the given patterns .
985	Add a file path .
986	Finds all files .
987	Initialize the list of files .
988	Returns an iterator over all files .
989	Resolves the bean wiring mode .
990	Resolve bean name .
991	Gets the writer .
992	Returns the servlet output stream .
993	Returns the class name for this type .
994	Returns the constructor descriptor for the given constructor .
995	Returns the method descriptor .
996	Returns the method descriptor .
997	Append descriptor .
998	Returns the size of the sort .
999	Returns the number of arguments and sizes .
1000	Mark this transaction as rollback only
1001	Commit or rollback or rollback .
1002	Rollback all resources .
1003	Requests a resource from the transaction .
1004	Pop a name .
1005	Write string .
1006	Writes a unicode character .
1007	Write a character sequence .
1008	Set parsing error log level
1009	Start the region .
1010	Check if the value is contained in this string .
1011	Registers a pseudo function .
1012	Lookup a pseudo function by its name .
1013	Visit the destination class .
1014	Visits an annotation .
1015	Generates the static init block .
1016	Creates the proxy constructor .
1017	Process super methods .
1018	Find the index in the range .
1019	On .
1020	Replaces the ASM instructions in the given class file .
1021	Get attribute prototypes .
1022	Registers default values .
1023	Register a SQL type .
1024	Looks up the SQL type for the given class .
1025	Lookup SQL type .
1026	Creates a SOCKS4 proxy .
1027	Creates a SOCKS5 proxy .
1028	Creates a HTTP proxy .
1029	Returns the total number of transactions associated with this thread .
1030	Count the number of transactions that have the given status .
1031	Associate a transaction
1032	Continue processing the transaction .
1033	Lookup a resource manager for the given resource type .
1034	Creates a proxy object .
1035	Append method name .
1036	Aligns the text left with the specified size .
1037	Pretty string .
1038	Converts a string to a camel case .
1039	Formats a paragraph .
1040	Converts tabs to spaces .
1041	Escape the given string .
1042	Unescapes the given string .
1043	Resolves a bean by its name .
1044	Lookup a bean by its name .
1045	Initialize the bean definition .
1046	Invokes the provider method .
1047	Registers a bean with the given name .
1048	Set bean property .
1049	Get bean property .
1050	Shuts down this container .
1051	Resolves the parameters of a method .
1052	Populate the form .
1053	Get the value of the property .
1054	Ends the tag .
1055	Create an element node .
1056	Adds a tag .
1057	Removes the last child node if it is empty .
1058	Gets the query string .
1059	Get action class name .
1060	Calculates the number of items to be added .
1061	Iterate over a collection .
1062	Iterate over an array .
1063	Replaces all occurrences of a string with another .
1064	Replaces the specified character with the given string .
1065	Replaces all characters in string with the given string .
1066	Replaces the first occurrence of a string with the given string .
1067	Replaces the first character in the string with the given string .
1068	Replaces the last occurrence of a string in s .
1069	Replaces the last character in the string with the given string .
1070	Removes all occurrences of a string from a string .
1071	Remove char from string
1072	Returns true if all of the given strings are empty .
1073	Returns true if all of the given strings are empty .
1074	Converts an object to a string array .
1075	Change the first character of the given string .
1076	Converts a string to a title .
1077	Compresses the specified character .
1078	Checks if the substring starts with the given index ignoring case .
1079	Returns true if the string ends with the given character .
1080	Count the number of occurrences of the source string ignoring case .
1081	Test if an array of strings are equal ignoring case .
1082	Returns the index of the first whitespace in the specified string .
1083	Strip leading character from string .
1084	Removes the trailing character from the string .
1085	Removes the given character from the string .
1086	Removes the specified character from the string .
1087	Removes a character from the string .
1088	Crop all strings .
1089	Removes all whitespace characters from the source string .
1090	Removes all whitespace characters from the source string .
1091	Returns the index of the first part of the string starting at the specified offset .
1092	Join a collection of Strings .
1093	Join an array of objects with a given separator .
1094	Convert charset to string .
1095	Checks if the character at the given index is equal .
1096	Surround string .
1097	Adds a prefix to a string .
1098	Adds a suffix to the string .
1099	Cuts a string and returns it .
1100	Cut the given substring from the end of the string .
1101	Cut a prefix .
1102	Cuts a suffix .
1103	Cut the string surrounding the given prefix .
1104	Inserts a string into a string .
1105	Repeats a string
1106	Reverses a string .
1107	Returns the maximum common prefix between two strings .
1108	Find common prefix .
1109	Shorten a string .
1110	Converts a string to upper case .
1111	Remove quotes from a string .
1112	Converts a byte array to a hex string .
1113	Gets the bytes of a string .
1114	Detect quote character .
1115	Visit an attribute .
1116	Visit an enum .
1117	Visit an annotation .
1118	Register an entity type .
1119	Returns the entity descriptor for the given type .
1120	Remove an entity descriptor .
1121	Create entity instance .
1122	Sets the target interface .
1123	Inject target into wrapper
1124	Lookup all annotated properties of the given type .
1125	Detect database and configure it .
1126	Closes the output stream .
1127	Writes a byte to the output stream .
1128	Removes the session from the URL .
1129	Get the encoded name .
1130	Returns the contents of this buffer as a byte array .
1131	Writes the message to the given file .
1132	Write the data to the output stream .
1133	Append an argument .
1134	Prepend argument .
1135	Change the return type .
1136	Sets the text .
1137	Register a type converter .
1138	Lookup a type converter .
1139	Returns a list of nodes matching the given query .
1140	Process a collection of selectors
1141	Process selectors .
1142	Selects the first node .
1143	Walk all descendants of the given list .
1144	Recursively walk the tree .
1145	Selects a node and adds it to the result list .
1146	Filter a node .
1147	Unpack c map .
1148	Refill the buffer
1149	Returns a page of objects .
1150	Remove select from SQL .
1151	remove from from sql
1152	Removes the last order by clause .
1153	Decodes an HTML string .
1154	Detects name .
1155	Builds the SQL for the SQL statement .
1156	Build the SQL statement for a page .
1157	Resolve column mappings .
1158	Find by column name .
1159	Find by property name .
1160	Returns the property name for the given column name .
1161	Returns the column name .
1162	Gets the id value of an object .
1163	Sets the id value of an object .
1164	Get the key value for an object
1165	Appends a string to the buffer .
1166	Sets the new index .
1167	Expand the capacity .
1168	Calculates the length of this array .
1169	Create mixing message .
1170	Creates a scoped proxy bean .
1171	Iterate over the body .
1172	Initialize the map .
1173	Accepts a file .
1174	Use the watch file to use .
1175	Starts the watch .
1176	Called when a file has changed .
1177	Adds an enumeration .
1178	Returns the size of the field .
1179	Compute the information about the access_flags field .
1180	Create a target instance .
1181	Writes a property value to the injection point .
1182	Decora with decora content .
1183	Parse a page .
1184	Writes the decorator content .
1185	Writes the content of the decora tag .
1186	Starts the server .
1187	Run a process .
1188	Get the SSL store .
1189	Create output stream .
1190	Initialize the template .
1191	Append alias .
1192	Append column name .
1193	Adds a rule .
1194	Applies the given value to the flag .
1195	Process include .
1196	Process excludes .
1197	Gets the pseudo class name .
1198	Adds all elements in the specified collection to this set .
1199	Find the insertion point .
1200	Bind an annotation type to an action configuration .
1201	Register a new action configuration .
1202	Looks up an action configuration .
1203	Register an action config with the given type .
1204	Sets system properties .
1205	Validates the given value .
1206	Find the last table element .
1207	Fixes all the elements in the fosterElement .
1208	Register session beans .
1209	Get session map .
1210	Initialize the proxy class .
1211	Adds a method .
1212	Ends the action .
1213	Adds properties to a section .
1214	Extracts a profile and adds it to the list of profiles .
1215	Add a property value to the properties map
1216	Convert a type description to a class name .
1217	Convert a type reference description to a name .
1218	Converts a type description into a signature .
1219	Convert a type to a signature .
1220	Add multiple consumers .
1221	Creates a collection .
1222	Converts an object to a single element collection .
1223	Convert the given value to a collection .
1224	Convert collection to collection .
1225	Convert a primitive array to a collection .
1226	Adds the line number .
1227	Visits the current line number line number .
1228	Puts the instruction into the bytecode .
1229	Adds a reference to the stack .
1230	Resolves this instruction .
1231	Marks this basic block as belonging to the given subroutine .
1232	Add an edge of a subroutine to be processed by the caller .
1233	Compare two strings .
1234	Get the accent character .
1235	Puts a byte vector .
1236	Puts an 8 - byte vector .
1237	Puts a short value into the vector .
1238	Puts an int vector into the buffer .
1239	Puts a 2 - byte vector into the vector .
1240	Puts an int into the buffer .
1241	Puts a byte vector into the vector .
1242	Puts a long value into the vector .
1243	Puts a byte array into this vector .
1244	Enlarges the given size .
1245	Authenticate user via http session .
1246	Authenticate user by token .
1247	Authenticate user using basic auth .
1248	Find the default message for the specified key .
1249	Get a resource bundle .
1250	Get the value at the given index .
1251	Sets the entity id .
1252	Saves the given entity .
1253	Updates the given entity .
1254	Updates the property of the specified entity .
1255	Updates the property of the specified entity .
1256	Finds an entity by its id .
1257	Find an entity by property value .
1258	Find one entity .
1259	Delete an entity by its id .
1260	Deletes an entity from the database .
1261	Counts the number of entities for the given entity type .
1262	Increase a property by its name
1263	Decrease a property by its name
1264	Find related objects .
1265	Lists all entities in the database .
1266	Clears all attributes .
1267	Returns a set of entries .
1268	Sets the value associated with the given key .
1269	Removes the value associated with the given key .
1270	Get the current stack trace .
1271	Get stack trace .
1272	Get stack trace .
1273	Gets the exception chain .
1274	Convert an exception stack trace to a string .
1275	Converts an exception chain to a string .
1276	Builds a message with the given message and cause .
1277	Unwrap a Throwable .
1278	Registers an entry from the classpath .
1279	Add a component class .
1280	Returns the system class loader .
1281	Gets the resource as an InputStream .
1282	Gets the resource as an input stream .
1283	Gets the class as stream .
1284	Gets the class as stream .
1285	Add a new route chunk .
1286	Find or create a child node .
1287	Parses the request .
1288	Convert value to collection .
1289	Invoke setter .
1290	Force set for array .
1291	Create a bean property .
1292	Extract the type of the property .
1293	Stops the authentication cookie .
1294	Start authentication token .
1295	Converts a local date to a date .
1296	Convert LocalDateTime to Calendar .
1297	Define proxy .
1298	Adds a check to the list .
1299	Creates a validation context for the given class .
1300	Adds annotations to the class .
1301	Collects the annotations of a property .
1302	Collects annotation checks .
1303	Copy the default check properties from an annotation .
1304	Encodes the given source string using the given encoding .
1305	Encodes the given string with the given encoding .
1306	Encodes the URI scheme .
1307	Encodes the host with the given encoding .
1308	Encodes the port with the given encoding .
1309	Encodes the given path .
1310	Encodes the given URI query .
1311	Encodes the given URI query parameter with the given encoding .
1312	Encodes the given URI fragment .
1313	Get a map of property names and setters
1314	Gets all property descriptors .
1315	Returns the set - cookie headers .
1316	Unzip response body .
1317	Closes this HTTP connection .
1318	Accepts a scope .
1319	Prints the routes in the webapp .
1320	Encrypt a byte array
1321	Decrypt a byte array
1322	Converts map to target type .
1323	generates all elements in the given list
1324	Sets the value of the given property .
1325	Generate a new map .
1326	Compares the given object to the given object .
1327	Sets the default header .
1328	Send a request .
1329	Send an HTTP request to the client .
1330	Adds default headers to http request .
1331	Read cookies from http response .
1332	Add cookies to http request .
1333	Send an email .
1334	Sets the subject s subject .
1335	Sets the sent date .
1336	Sets the email headers .
1337	Sets the people from the email .
1338	Sets the recipients .
1339	Adds the body data to the message .
1340	Sets the content of an email message .
1341	Create attachment body part .
1342	Get the Content - Type header .
1343	Saves a result set .
1344	Closes all ResultSets .
1345	Closes the query .
1346	Closes the query .
1347	Sets the fetch size .
1348	Sets the maximum number of rows for this statement .
1349	Execute an update .
1350	Execute count query .
1351	Returns all generated columns .
1352	Returns the query string .
1353	Creates a proxy instance of the specified aspect class .
1354	Returns a collection of objects .
1355	Creates a stream from an iterator .
1356	Compares two objects .
1357	Sets the default wiring mode .
1358	Prints a message and a throwable .
1359	Gets the caller class name .
1360	Shorten the class name .
1361	Excludes the given types .
1362	Serializes the given object to the given appendable .
1363	Serializes an object to a String .
1364	Clones an object using serialization .
1365	Writes an object to a file .
1366	Reads an object from a file .
1367	Serializes an object to a byte array .
1368	Converts a byte array to an object .
1369	Resolve mapped types .
1370	Creates the table names for the given types .
1371	Read column value .
1372	Caches the entities in the cache .
1373	Resolve providers for a given class .
1374	Apply to table name .
1375	Check if connection is valid .
1376	Render view .
1377	Locate target .
1378	Returns a writer for the response .
1379	Gets the output stream .
1380	Writes the content to the response .
1381	Sets the content type .
1382	Prints a string to the output stream .
1383	Login with basic authentication .
1384	Get the token as JSON .
1385	Login via basic auth
1386	Logout user .
1387	Converts a URL to a container file .
1388	Create a directory if it exists .
1389	Creates a new directory .
1390	Copy a file
1391	Copy a directory .
1392	Move file to destination directory .
1393	Moves a directory to another .
1394	Deletes a directory .
1395	Reads the unicode characters of a file .
1396	Reads the contents of a file with the specified encoding .
1397	Writes a char array to the file .
1398	Writes a string to a file .
1399	Append a string to the output file .
1400	Read a number of bytes from a file .
1401	Writes a byte array to the output file .
1402	Append bytes to the output file .
1403	Copy a file to the destination
1404	Deletes a directory .
1405	Creates a temporary directory .
1406	Checks if the given file is binary .
1407	Check if srcDir is equal .
1408	Check file copy .
1409	Print usage .
1410	Resolves an action method .
1411	Registers an action .
1412	Registers a path alias .
1413	Moves to the next iteration .
1414	Creates a new char array from the given array .
1415	Executes the target method .
1416	Checks if the input string matches the target string .
1417	Returns a sequence of characters in the input stream .
1418	Returns an array of URLs for a class .
1419	Add a bcc recipient address .
1420	Register a type .
1421	Lookup a serializer .
1422	Parses the input stream and parses the input stream .
1423	Get the value of a request parameter .
1424	Get the values for the given parameter name .
1425	Get a file by name .
1426	Gets an array of uploaded files .
1427	Initialize the filter .
1428	Parse template .
1429	Find the end of a macro .
1430	Count the number of escapes in the template .
1431	Build query string .
1432	Parse query string .
1433	Prepare the parameter name for the given header name .
1434	Extract the mime type from the content type .
1435	Converts the given node to HTML .
1436	Creates an HTML representation of the given node .
1437	Configures the parameters in the webapp .
1438	Resets the state .
1439	Sets lazy parsing .
1440	Replace the mapped type with the mapped type .
1441	Parses the string as list .
1442	Parse json as map .
1443	Resolves a lazy value .
1444	Skip object .
1445	Parse a string .
1446	Parse string content .
1447	Parse a unicode character .
1448	Parse quoted string content .
1449	Parse a number .
1450	Parse array content .
1451	Creates an empty constructor .
1452	Create a method wrapper for a method signature .
1453	Resolve raw type name .
1454	Resolve a property value .
1455	Resolve references from a method or constructor .
1456	Read all references from a method or constructor .
1457	Builds the default references for the given method or constructor .
1458	Builds a bean reference .
1459	Remove duplicate names .
1460	Converts an array of references to BeanReferences .
1461	Convert value to BeanReferences array .
1462	Run the jeven joy .
1463	Find a method in a class .
1464	Find the constructor of the given class .
1465	Resolve all interfaces of the given type .
1466	Compare parameters .
1467	Force access .
1468	Creates a new instance of the given class .
1469	Get all superclasses of a class .
1470	Returns the child class of the given class .
1471	Returns the JarFile of the given class .
1472	Sleeps for the given number of milliseconds .
1473	Sleeps for the current thread
1474	Wait for an object to be interrupted .
1475	Returns a thread factory that creates a thread factory for daemon threads .
1476	Get the value .
1477	Visit a parameter .
1478	Visit an annotation .
1479	Visit a type annotation .
1480	Visit a parameter annotation .
1481	Visits a field instruction .
1482	Visits a method instruction .
1483	Visits an invoke dynamic instruction .
1484	Visits a jump instruction .
1485	Visit a multi -ew array instruction .
1486	Visit a try catch block .
1487	Visit a local variable annotation .
1488	Write properties to the specified writer .
1489	Processes the input stream .
1490	Moves to the next element .
1491	Moves to the next element .
1492	Join arrays .
1493	Joins the given arrays into a new array .
1494	Resizes the given buffer to a new size .
1495	Append an element to the buffer .
1496	Removes the specified length from the array .
1497	Gets the first occurrence of the specified character in the array .
1498	Get the index of the given value in the array .
1499	Returns the index of the first occurrence of the sub - array starting at the specified startIndex .
1500	Enables XHTML mode .
1501	Parses the given content into a Document .
1502	Performs the parsing of the tag .
1503	Compute the maximum stack and local block of exceptions .
1504	End the current BasicBlock with no successor .
1505	Collect attribute prototypes .
1506	Inject context .
1507	Registers a pseudo class .
1508	Lookup a pseudo class by its name .
1509	Invokes the given action request .
1510	Returns an array of property names for the given class .
1511	Visit properties .
1512	Returns true if the property name matches the specified rule .
1513	Resolve method injection points .
1514	Read parameter parameters .
1515	Send bundle file .
1516	Lookup a bundle file .
1517	Looks up a gzip bundle file .
1518	Registers a bundle .
1519	Creates a digest .
1520	Creates a bundle .
1521	Clears all resources .
1522	Fix CSS URLs .
1523	Update column .
1524	Create table ref name .
1525	Request the current transaction
1526	Convert value to single element array .
1527	Parses the signature for the signature .
1528	Resolves a set injection point .
1529	Check if the given property type matches the given property type .
1530	Opens the connection for query .
1531	Open transaction .
1532	Closes the transaction .
1533	Commits the transaction .
1534	Rolls back the transaction .
1535	Loads properties from a file .
1536	Create a Properties object from a String .
1537	Loads a properties from a String .
1538	Returns a subset of the specified properties .
1539	Creates a new properties from the classpath .
1540	Get a property .
1541	Resolve all variables in the given properties .
1542	Resolves a property .
1543	Resolve scope .
1544	Gets the transaction mode .
1545	Registers the given annotations .
1546	Read transaction annotation values .
1547	Accepts a node .
1548	Check if node is an element
1549	Accepts a node .
1550	Unescapes the string .
1551	Build JRE packages .
1552	Clone this node .
1553	Detach from parent node .
1554	Add child nodes .
1555	Inserts a child node at the specified index .
1556	Inserts a new node before this ref .
1557	Inserts a new node into the parent .
1558	Inserts a child node after the ref child .
1559	Inserts new child nodes into the parent .
1560	Removes all child nodes .
1561	Find child node with given name .
1562	Returns an array of nodes that match the given predicate .
1563	Check if this node is a child node
1564	Initializes the child element nodes .
1565	Initialize sibling names .
1566	Initialize child nodes .
1567	Changes the owner document of the given node .
1568	Get the previous sibling name .
1569	Returns the text content of this node .
1570	Returns the HTML representation of this element .
1571	Returns the inner HTML of this element .
1572	Visits all children of this node .
1573	Get the CSS path .
1574	On decora tag .
1575	On id attribute start .
1576	Define the decora tag .
1577	Add a proxy aspect
1578	Adds a root package mapping .
1579	Add the root package of an action class .
1580	Find the root package for the given action path .
1581	Resolves a validation violation .
1582	Returns a copy of this BeanReferences .
1583	Add properties file .
1584	Iterate over all targets .
1585	Iterate over target and injection points .
1586	Iterate over target and out .
1587	Extract parameter values .
1588	Make target .
1589	Create an action method argument .
1590	Handles session creation .
1591	Notify all listeners that a session was destroyed .
1592	Adds an object to the array .
1593	Adds all of the given array to this array .
1594	Remove the element at the specified position .
1595	Resolve target .
1596	Send target not found response .
1597	Convert value to string .
1598	Register action filter .
1599	Returns the pseudo function name .
1600	Resolve property injection points .
1601	Creates a SOCKS4 proxy socket .
1602	Returns the number of attributes in this list .
1603	Gets all action results .
1604	Checks if the specified character is equal .
1605	Find the first character in the source sequence that matches the given index .
1606	Find the first match in the given array .
1607	Add command line arguments .
1608	Adds an environment variable .
1609	Starts the process .
1610	Invokes the given listener type .
1611	Copy the given frame .
1612	Gets the abstract type from an API format .
1613	Gets the abstract type from the buffer .
1614	Set the input frame from an API frame .
1615	Returns a local type for the given local block .
1616	Sets the abstract type .
1617	Pushes an abstract type onto the output stack .
1618	Pushes the abstract type from the symbol table .
1619	Pop the specified number of elements from the output stack .
1620	Pop the stack .
1621	Adds an initialized type .
1622	Gets the initialized type .
1623	Puts an abstract type into the given byte vector .
1624	Removes all expired entries from the cache .
1625	Schedules a timer for pruning .
1626	Visit a module .
1627	Visit a nest host .
1628	Visit an outer class .
1629	Visit an annotation .
1630	Visit a nest member .
1631	Visit an inner class .
1632	Visit a field .
1633	Get the current thread session
1634	Close the current thread
1635	Creates the execution array .
1636	Invokes the action method .
1637	Read the request body .
1638	Calculates the index of the first item on a page .
1639	Calculates the index of the first item in the page request .
1640	Returns true if the specified value matches the specified value .
1641	Convert a char array to a byte array .
1642	Find the first difference in the source array .
1643	Resolve node name .
1644	Resolve attribute name .
1645	Renders an attribute .
1646	Loads properties from a file .
1647	Load properties from a file .
1648	Load properties from an input stream .
1649	Load properties from a map .
1650	Load properties .
1651	Load properties from classpath .
1652	Gets the value of the specified key .
1653	Sets a value .
1654	Extract properties from the target map .
1655	Extract properties from target .
1656	Extract properties from target .
1657	Get the inner map .
1658	Add inner map .
1659	Resolves the active profiles .
1660	Get all profiles
1661	Get the list of profiles for the specified property name .
1662	Adds a property injection point .
1663	Adds a set injection point .
1664	Adds a method injection point .
1665	Adds the init method points .
1666	Add the method points to the destroy method .
1667	Resolve target class .
1668	Inject target into wrapper object .
1669	Gets target wrapper type .
1670	Find a field .
1671	Returns the raw type of the field .
1672	Returns the key type for the field .
1673	Returns the raw component type .
1674	Creates a JsonResult from an object .
1675	Returns an error result .
1676	Resolve the HTTP method name .
1677	Check if a pattern matches the pattern .
1678	Resolve class loading .
1679	Resolve resource loading .
1680	Load a class .
1681	Resolves a resource .
1682	Wait for the current thread to finish .
1683	Detect annotation type .
1684	Builds an injection point .
1685	Visit the class .
1686	Returns an array of URLs for the given class .
1687	Sets the bean .
1688	Updates the bean .
1689	Loads the property descriptor .
1690	Returns the getter for the property .
1691	Returns the setter .
1692	Connects to the database .
1693	Adds an iterator to the list .
1694	Print logo .
1695	Stops the joy .
1696	Creates a socket .
1697	Create an SSLSocket .
1698	Returns the default SSL socket factory .
1699	Get socket factory .
1700	Creates a random string from the specified chars array .
1701	Generate a random string .
1702	Generate random ranges .
1703	Creates a new array instance .
1704	Injects the given value into the target object .
1705	Convert value to target type .
1706	Visit a provide .
1707	Creates a default cache .
1708	Adds a new value to the map .
1709	Get all methods .
1710	Resolve IP address .
1711	Get ip address as integer .
1712	Validate the againt IP adress format .
1713	Resolve the hostname of an address .
1714	Download bytes from a URL .
1715	Download string from URL .
1716	Downloads a file .
1717	Inject targets .
1718	Inject action request .
1719	Connects to the given hostname and port .
1720	Connects to the given hostname and port .
1721	Returns the index of the primitive class .
1722	Load a class .
1723	Load an array class .
1724	Shutdown all beans .
1725	Creates a binary search for the given array .
1726	Creates a binary search for the given array .
1727	Excludes the rule .
1728	Adds a list of rules to be included .
1729	Includes the given template .
1730	Start this tag .
1731	Register a component .
1732	Resolves the SQL type of the column descriptor .
1733	Process SQL string .
1734	Create a ResultSetMapper .
1735	Find generated key by type .
1736	Populate the generated keys .
1737	Creates an action interceptor .
1738	Sets the bean .
1739	Set map .
1740	Sets an array of objects .
1741	Inserts a chunk after the previous chunk .
1742	Lookup the entity type .
1743	Returns the entity descriptor for the given column reference .
1744	Resolves the table name .
1745	Resolve class .
1746	Appends missing spaces to the StringBuilder .
1747	Returns enumeration of file parameter names .
1748	Includes the given page .
1749	Returns the URL of the given request .
1750	Gets the request URI .
1751	Resolve parameter names .
1752	Main entry point .
1753	Stop the container .
1754	Filter by subject .
1755	Filter by message id .
1756	Add a from address filter .
1757	Method allow to filter a recipient .
1758	Filter by cc address .
1759	Add a bcc address .
1760	Add flags .
1761	Create a filter for a given flag
1762	Method allow to filter received dates .
1763	Add a sent date filter .
1764	Filter by size .
1765	Add an AND filter .
1766	Add an OR filter .
1767	Add an email filter .
1768	Concatenate the given search term .
1769	Encodes a byte array .
1770	Convert value to array .
1771	Is gzip eligible
1772	Validates the target object .
1773	Validate the given value against the target .
1774	Use the specified profile .
1775	Use the specified profiles .
1776	Checks if the list of profiles are enabled .
1777	Parse the body of the given string .
1778	Converts this fraction to milliseconds .
1779	Adds this date to this date .
1780	Subtracts this date from this date .
1781	Set the fraction .
1782	Initializes the parsed tag .
1783	Emits a comment .
1784	Report an error message .
1785	Create a Pkdf2 hash .
1786	Calculate a PBKDF2 key .
1787	Converts hex string to byte array .
1788	Resolve provider definitions .
1789	Sets the name of the attachment .
1790	Sets the content id for the attachment .
1791	Resolve the content type .
1792	Parses a Java type signature .
1793	Returns the size of the module attributes .
1794	Writes the attributes of this module .
1795	Decodes a string using the given encoding .
1796	Decodes query string .
1797	Start database .
1798	Check connection to database .
1799	Visit a method .
1800	Visit the end of the class .
1801	Create method signature .
1802	Convert a list of elements to a CSV string .
1803	Convert a String to a String array
1804	Resolves a class .
1805	Create an advice class reader .
1806	Gets an advice class reader .
1807	Encrypt a string
1808	Decrypt a string
1809	Get a logger .
1810	Sets the cookie name .
1811	Create an action request .
1812	Creates an action filter .
1813	Destroy bean .
1814	Shutdown all beans .
1815	Gets all emails .
1816	Starts the ClusteredServiceContainer .
1817	Runs the report .
1818	Prints an error message .
1819	Print rate .
1820	Maps an existing file into a MappedByteBuffer .
1821	Closes the archive .
1822	Do the work .
1823	Returns the position of the current term .
1824	Offers a message .
1825	Appends padding .
1826	Closes the session .
1827	Poll for a control response message .
1828	Stop replay session .
1829	Event a new image .
1830	Event an inactive image .
1831	Read channel status .
1832	Receive channel status .
1833	Sets the limit .
1834	Appends length to the buffer .
1835	Polls the subscription .
1836	Maps a loss report to a file .
1837	Returns a snapshot of the composite key .
1838	Creates the default header .
1839	Set key buffer .
1840	Sets the label header .
1841	Connects to the Aeron archive .
1842	Attempt to connect to theeron archive .
1843	Sends a close session .
1844	Starts a recording request .
1845	Stop recording request .
1846	Creates a replay request .
1847	Stop replay session .
1848	Sends a list recordings request .
1849	Adds recordings for a URI .
1850	List recording .
1851	Extend recording request .
1852	Gets the recording position .
1853	Gets the stop position request .
1854	List recording subscriptions .
1855	Checks if the udp channel matches the tag .
1856	Returns the address of the given channel .
1857	Returns the description of this channel .
1858	Adds a datagram destination .
1859	Handles a packet .
1860	Find the control toggle .
1861	Adds a parameter to the request .
1862	Returns the channel tag .
1863	Returns entity tag .
1864	Adds the session id to the given channel .
1865	Returns the tag associated with the given parameter value .
1866	Appends the padding for the term .
1867	Update publisher limit .
1868	Allocates an UnsafeBuffer .
1869	Returns the name of a channel .
1870	Scans the term buffer .
1871	Resets this instance .
1872	Validates the context .
1873	Prefix prefix .
1874	Sets the media .
1875	Sets the control mode .
1876	Sets the term length .
1877	Sets the term offset .
1878	Sets the linger value .
1879	Open datagram channel .
1880	Closes this transport .
1881	Checks to see if a frame is valid .
1882	Receives the given buffer .
1883	On nak .
1884	Process timeout .
1885	Returns a human readable string representation of the given status .
1886	Allocate a counter .
1887	Resets this vector .
1888	Validates this vector .
1889	Validates the message length .
1890	Compute the producer window length .
1891	Validate socket buffers .
1892	Validates the given page size .
1893	Validates the reserved session id range .
1894	Validate the unblock timeout .
1895	Sets the error code .
1896	Resets the receiver state .
1897	Returns a string representation of the cluster members .
1898	Add members to aeron cluster .
1899	Close all publications .
1900	Checks if a quorum has active quorum .
1901	Get the position of the quorum position .
1902	Reset log positions .
1903	Checks to see if the given position is reached or not .
1904	Checks if there is a won vote on full count .
1905	Checks if a member has a majority vote .
1906	Determine the member from the cluster members .
1907	Check if the cluster members are equal
1908	Checks if two members are the same .
1909	Checks if a candidate is unanimous candidate .
1910	Checks if a candidate is a quorum candidate .
1911	Checks if the given endpoints are duplicate .
1912	Find the index of the given member .
1913	Removes a member from the given array .
1914	Returns the high member id of the cluster members .
1915	Map an existing CNC file to a new one
1916	Check if the driver is active
1917	Check if driver is active
1918	Check if a driver is active .
1919	Request a driver termination .
1920	Reads the frame length from the buffer .
1921	Puts the frame length in order into the buffer .
1922	Writes the type of the frame .
1923	Write the flags of the frame .
1924	Encodes the term offset .
1925	Encodes a term .
1926	Find counter id by recording id .
1927	Find counter id by session id .
1928	Gets the recording id for the given counter id .
1929	Check if a counter is active .
1930	Sets the application specific feedback field .
1931	Reload entries from the file .
1932	Returns the last term .
1933	Create a recovery plan .
1934	Creates a recovery plan .
1935	Append term .
1936	Appends a snapshot to the cluster .
1937	Commits a log position .
1938	Write a tombstone entry .
1939	Close aeron client .
1940	Add a vector of vectors to the publication .
1941	Unblock a term .
1942	Gets the channel .
1943	Sets the channel .
1944	Checks the given term length .
1945	Checks the given page size .
1946	CAS the active term count .
1947	Compute the position of a term .
1948	Compute the log length .
1949	Store default frame header
1950	Applies the default frame header .
1951	Rotate the log .
1952	Initialise the tail with the given term id .
1953	Compute the offset of the raw tail .
1954	Get the raw tail of the metadata buffer .
1955	CAS the raw tail .
1956	Set token buffer .
1957	Allocate a counter .
1958	Find the counter id .
1959	Checks if a counter has replay state .
1960	Get snapshot recording id .
1961	Convert the flags to a char array .
1962	Sets the channel .
1963	Offers a buffer .
1964	Wrap the given buffer .
1965	Commit the frame .
1966	Aborts the header .
1967	Starts the media driver .
1968	Close resources .
1969	Returns the position of the frame .
1970	Allocate a new service counter
1971	Find the counter id for the given service id .
1972	Returns a snapshot of the stream backlog .
1973	Allocate a counter .
1974	Close the connection .
1975	Dispatch a descriptor descriptor .
1976	Adds a new slab .
1977	Set a byte value at the given index .
1978	Adds a statistics object .
1979	Calculate the row ranges .
1980	Convert array type .
1981	Convert a StructType to a GroupType .
1982	Annotate a message at position position .
1983	End the previous run .
1984	Reads a single field .
1985	Read the footers .
1986	Read the footer from a file .
1987	Read the footer of a file .
1988	Read the next row group .
1989	Read the next filtered row group .
1990	Read a dictionary page .
1991	Adds a writer to the memory manager .
1992	Removes a writer .
1993	Updates the allocation of the writer .
1994	Registers a scale callback .
1995	Starts the magic .
1996	Start a block .
1997	Marks the column s column .
1998	Write a dictionary page .
1999	Write a data page .
2000	Write a column chunk .
2001	End a block .
2002	Copies bytes from an input stream to the given position .
2003	End the file .
2004	Merges a list of metadata files into ParquetMetadata
2005	Merge a list of ParquetMetadata files into a single file .
2006	Write the job summary file .
2007	Merges the global metadata into the global metadata .
2008	Read value .
2009	Checks if a schema is null .
2010	Coalesce an array of objects .
2011	Create a value from the given schema .
2012	Create a ThriftMetaData from the extra metadata .
2013	Converts a thrift class to a ThriftMetaData object .
2014	Returns the extra meta data .
2015	Write null value .
2016	Write a single page .
2017	Read values from the input stream
2018	Allocate the values buffer .
2019	Check an enum .
2020	Calculate the bit widths for the delta block buffer
2021	Throws an exception if the given exception is an exception of the given class .
2022	Get statistics based on primitive type .
2023	Get a builder for a primitive type .
2024	Merge statistics .
2025	Returns the first non - null schema of the given schema .
2026	Create a new TaskAttemptContext .
2027	Invoke a method .
2028	Appends the fields to the string buffer .
2029	Merges the fields of this group .
2030	Initialize counter from reporter .
2031	Get an unbound record filter
2032	Read all the footers from a collection of files .
2033	Generates a list of ParquetInputSplits from a list of row groups .
2034	Writes the given object to the message writer .
2035	Validates that the given mapping is validated .
2036	Serialize a message descriptor .
2037	Creates a direct codec factory for the given configuration .
2038	A helper method to add missing fields .
2039	Check set .
2040	Read the file meta data from an input stream .
2041	Closes the record writer .
2042	Set the schema for the group .
2043	Adds a primitive type .
2044	Assert that the given primitive type is valid .
2045	Check that the given long is overflow .
2046	Creates a parquet schema from an arrow schema .
2047	Creates a schema mapping from a parquet schema .
2048	Maps an arrow schema to a parquet schema .
2049	Writes the data page to the stream .
2050	Skip to the next record .
2051	Writes an object as Base64 encoded string .
2052	Removes the entry from the cache .
2053	Put a new value into the cache .
2054	Get the current value .
2055	Write value .
2056	Write value without conversion .
2057	Sets the regular expression .
2058	Outputs a string to the specified console .
2059	Open a file .
2060	Applies a filter to a column path .
2061	Convert a struct type to a message type .
2062	Create a wrapper for a list type .
2063	Creates a new list element type .
2064	Gets the merged value metadata .
2065	Get the ParquetInputSplit from the given old split .
2066	Get a map of fields by name .
2067	Resolve the field access to the requested schema .
2068	Parses a list of input files from a list of input files .
2069	Check that the parquet files are valid .
2070	Get input files from a directory
2071	Returns a filter that filters records using the specified positions .
2072	Gets a list consumer from the given class .
2073	Initialize the map .
2074	Merge the given tuple into the summary data .
2075	Sum up a tuple
2076	Read a struct .
2077	Read map entry .
2078	Writes an integer .
2079	Read a little - endian integer from the input stream .
2080	Set the schema for the job .
2081	Creates a new stream topic if it exists
2082	Duplicate a pipeline stage .
2083	Create a bean .
2084	Creates interceptors .
2085	Create interceptor .
2086	Parse Avro schema .
2087	Converts milliseconds to days .
2088	Extract Avro schema from a record .
2089	Upgrades a list of configurations to a new service .
2090	Returns the length of the stream .
2091	Copy blobstore resources
2092	Resets the internal state .
2093	Reports the health of a thread .
2094	Register a thread health report gauge
2095	Stores a set of configuration configs to disk .
2096	Check if the current user is authenticated .
2097	Upgrades the pipeline configuration if necessary .
2098	Upgrades the configuration if necessary .
2099	Upgrade the configuration if necessary .
2100	Upgrades services if necessary .
2101	Upgrades a stage .
2102	Gets the fields to null .
2103	Checks if the given name is a system class .
2104	Adds an element to the delegate list .
2105	Adds the specified element to the delegate .
2106	Returns the value associated with the given key if not present .
2107	Returns the list of snapshots of all stages that have been reported .
2108	Gets the descriptor for the given message type .
2109	Gets all file descriptors from the given set .
2110	Populates the defaults for all fields of the given file descriptor .
2111	Get the descriptor for the given message type .
2112	Converts a proto message to a SDC field .
2113	Converts a field into a protobuf message .
2114	Converts a field to a protobuf message .
2115	Upgrade to jersey config bean .
2116	Check connection .
2117	Converts KuduType to field type .
2118	Creates a field from the result .
2119	Intercept all records .
2120	Gets the text .
2121	Adds missing configurations to a stage .
2122	Parses the response .
2123	Adds the response headers to the record .
2124	Writes the response header to the field .
2125	Write the response header to the record .
2126	Saves metadata .
2127	Configure client .
2128	Add headers only .
2129	Increments the source offset
2130	Parse paginated result .
2131	Add the response headers .
2132	Resolve headers .
2133	Processes the response .
2134	Check if the given property is defined
2135	Convert an exception to a DataParserException .
2136	Converts an exception to a DataGeneratorException .
2137	Gets the credentials from the given path .
2138	Get a preview of the specified stage output
2139	Copy to buffer .
2140	Removes redundant duplicates .
2141	Empty batch .
2142	Find the next main line .
2143	Resolves a file chunk .
2144	Closes the connection .
2145	Escape quoted string .
2146	Get flow control settings .
2147	Get the channel provider .
2148	Puts a batch .
2149	Compiles the given expression into a Grok expression .
2150	Digests the expressions in the original line .
2151	Read dictionary from input stream .
2152	Adds a dictionary to the dictionary .
2153	Stops the aggregator .
2154	Roll the data window .
2155	Serialize an object
2156	Deserialize JSON string .
2157	Deserializes the given file into an object .
2158	Write a record to the output destination .
2159	Evaluates a string using the given variables .
2160	Generate the inner field from the list of fields .
2161	Gets the table name .
2162	Gets the name of the database .
2163	Get the internal field as boolean .
2164	Extracts the location of a metadata record .
2165	Returns whether or not the given metadata record is custom .
2166	Extracts the Avro schema from the given metadata record .
2167	Extracts the data format from a metadata record .
2168	New schema metadata field builder .
2169	Validate partition information .
2170	Generate the path for the given partitions .
2171	Serialize Avro schema to HDFS .
2172	Sets the parameters for the query .
2173	Get system configuration .
2174	Parses the given string as a long .
2175	Formats a template with the specified arguments .
2176	Start batch .
2177	Checks if the record contains the specified solr fields .
2178	Filters the given field names from the generated field names .
2179	Send on record error to handler handler .
2180	Parses the name of the jar .
2181	Parses the jar file .
2182	Gets the instance of the CouchbaseConnector .
2183	Shuts down the pipeline .
2184	Validates the configuration .
2185	Gets the label from a string .
2186	Verifies that a dependency exists .
2187	Read a secret .
2188	Gets the operation type from the header .
2189	Writes a document to the cache .
2190	Build a subdoc mutation .
2191	Generate SQL string for alter table .
2192	Configures the SASL configuration .
2193	Takes a batch of messages and returns it .
2194	Commits the given offset .
2195	Called when an error occurs .
2196	Injects a stage .
2197	Get definitions .
2198	Gets the lineage publisher definition .
2199	Format column name .
2200	Format value .
2201	Get information about a pipeline
2202	Create a draft pipeline fragment
2203	Get pipeline details
2204	Imports a pipeline fragment .
2205	Gets the directory path for a record .
2206	Gets the operation code from a record .
2207	Get the path for the column
2208	Poll queue .
2209	Gets a runner from the queue .
2210	Returns the next runner for the given idle time .
2211	Return a runner .
2212	Destroys this thread pool .
2213	Validates that the queue is not destroyed .
2214	Checks if the stream exists .
2215	Gets the last shard id .
2216	Process the queue of records .
2217	Handle SQL exception .
2218	Calculate the hash code for the given record .
2219	Compare two files
2220	Retrieve the PID of the given process .
2221	Validate and extract a set of fields to hash .
2222	Get proxy user information .
2223	Roll the active stats .
2224	Creates a snapshot of the active stats .
2225	Ensures that the directory exists .
2226	Write batch records .
2227	Write a batch of records .
2228	Write records .
2229	Trigger no more data event .
2230	Detect a new partition .
2231	Updates the record s header in HDFS .
2232	Processes the specified group .
2233	Checks if two stages have the same version .
2234	Main entry point .
2235	Configure the auth token .
2236	Resolve the headers
2237	Get the HTTP method
2238	Fills the bindings for null types .
2239	Get the null value for a field .
2240	Loads the subject from the registry .
2241	Registers a schema .
2242	Loads the schema from the registry .
2243	Gets the schema ID from the registry .
2244	Loads a schema from the registry .
2245	Writes the schema id
2246	Detects the schema ID .
2247	Get default values from schema
2248	Parses all records .
2249	Log details about this artifact .
2250	Get bad records from error sink .
2251	Initializes the schema generator .
2252	Returns the outward edge vertices for the given vertex .
2253	Returns the set of inward edge vertices for the given vertex .
2254	Serialize an offset map
2255	Deserializes the last source offset string .
2256	Add a report to the queue .
2257	Gets a report by id
2258	Check point file .
2259	Writes the offsets to the main offset file .
2260	Deletes the given blob .
2261	Handle an error .
2262	Handle an archive .
2263	Gets a reader .
2264	Releases the reader .
2265	Sets the base URL for the DPM client .
2266	Add default header
2267	Parse a date .
2268	Escape a string .
2269	Gets the client .
2270	Init connection .
2271	Get table metadata .
2272	Create bulk inserter
2273	Create a builder for an event .
2274	Build the Avro schema .
2275	Converts an Oracle operation code to an SDC code .
2276	Add jars to the job .
2277	Add jar files to the job .
2278	Check a field by name
2279	Check condition expressions
2280	Gets the offset lag for the file offset
2281	Entry point for premain
2282	Get origin parallelism .
2283	Runs a BigQuery .
2284	Converts a list of schema to a map of field names .
2285	Get the table description
2286	Checks that the table contains inserts .
2287	Get the column type
2288	Check if type is nullable
2289	Get the schema for a table
2290	Get column properties
2291	Get the class for the given type name
2292	Initialize the Aerospike bean .
2293	Get the topic
2294	Upgrades a list of configs to a new service .
2295	Gets an input stream .
2296	Gets the output stream .
2297	Returns true if the file exists .
2298	Parse a system permission string .
2299	Validates that all services are available .
2300	Creates a simple aggregator .
2301	Gets the aggregator unit .
2302	Creates a new aggregator data .
2303	Creates a new Aggregator instance .
2304	Starts the data provider .
2305	Stops the aggregator .
2306	Roll up the data provider .
2307	Acquires a login manager .
2308	Releases the login manager .
2309	Convert a glob string to a regular expression .
2310	List objects lexicographically .
2311	Stops the pipeline .
2312	Produces empty batches for all active runners .
2313	Create a failure snapshot .
2314	Convert a record to a bound statement .
2315	Replaces the given configuration with the given values .
2316	Generate lookup key .
2317	Handles partitioning turned on the last partition mode .
2318	Reads a line from the reader .
2319	Roll the usage timer .
2320	Enables DPM .
2321	Disables a DPM user .
2322	Normalizes a base URL .
2323	Retrieve user auth token .
2324	Logout the user .
2325	Updates the app token file .
2326	Update DPM properties
2327	Builds the Avro schema for the given field .
2328	Builds a complex schema for an Avro field .
2329	Get the decimal scale or precision .
2330	Returns the default value for the given schema .
2331	Initialize the gauge if necessary .
2332	Compare two files .
2333	Returns the index of the specified group .
2334	Returns a list of group names .
2335	Returns true if the string is an escaped character .
2336	Returns whether the specified character at the given position is escaped .
2337	Check if a character is inside a character class .
2338	Counts the number of parens in a string .
2339	Extract group information from a named pattern .
2340	Replaces the pattern with the given replacement .
2341	Handles GET request .
2342	Refresh the table s schema .
2343	Is this entry expired?
2344	Returns the offset of the file .
2345	Fast forward .
2346	Create empty stage envelope
2347	Converts a string value to an appropriate number .
2348	Parse a part .
2349	Parse the values .
2350	Gets the primary keys .
2351	Creates the custom field mappings .
2352	Returns the SQL type name for a field .
2353	Gets the table name .
2354	Sets the primary keys of the record .
2355	Format SQL exception .
2356	Processes the current stage with the given offsets .
2357	Prepare the batch context .
2358	Finishes batch context .
2359	Flatten the entire record into a map .
2360	Factory method .
2361	Executes the action .
2362	Get columns to parameters .
2363	Returns the condition for the given partition column .
2364	Validate the stored columns .
2365	Returns the requested generator definitions .
2366	Returns an array of strings that are not empty .
2367	Gets the operation .
2368	Convert bytes to human readable format .
2369	Scans a live file .
2370	Get the number of pending files
2371	Checks if a name is whitelisted .
2372	Checks if the versions match the expected versions .
2373	Main entry point .
2374	Propagate the runtime configuration of the pipeline .
2375	Validates the report description .
2376	Create a JdbcRecordWriter .
2377	Create a JdbcRecordWriter .
2378	Upgrades the configuration to the given config .
2379	Extracts named groups .
2380	Queues a consumer commit message .
2381	Creates an EmbeddedSDC instance .
2382	Set the fields in the record .
2383	Returns a list of all pipelines that have changed .
2384	Creates a remote data collector result .
2385	Creates a gauge .
2386	Returns the parameters for the given operation .
2387	Generate header attributes .
2388	Validate the record .
2389	Delete temporary files .
2390	Get Avro input stream .
2391	Create a stream from an input stream .
2392	Write parquet .
2393	Checks the input field .
2394	Checks the input field .
2395	Checks the input field .
2396	Checks the input field .
2397	Prepare encrypted field .
2398	Sets the pattern to use .
2399	Appends the replacement of this matcher .
2400	Returns a map containing all of the named groups .
2401	Replaces all properties with the given replacement .
2402	Ensure that avro schema exists .
2403	Get the value of a global variable .
2404	Creates the start event record .
2405	Create a stop event record .
2406	Fixes the offset field .
2407	Extracts the value as a runtime type .
2408	Executes alter table add partition query .
2409	Execute alter table properties query .
2410	Describe database .
2411	Execute query .
2412	Execute a query .
2413	Executes a batch .
2414	Iterate over all pipe pipes .
2415	Returns the offset commit trigger .
2416	Checks if there is an error .
2417	Accepts a pipe .
2418	Gets the insert id for a record .
2419	Get value from field path
2420	Sets a fragment in a record .
2421	Sets a document in the given record .
2422	Sets the N1QL row in the given record .
2423	Handle partial data format .
2424	Returns true if all incomplete transactions contain the given sequence number
2425	Wrap the given exception supplier with the given class loader .
2426	Sets the state creator .
2427	Logout the subject .
2428	Sets the exceptions .
2429	Replace variables in the path
2430	Ensures that the path can be allowed to access a directory .
2431	Main entry point .
2432	Returns the directory path for the job .
2433	Rename a temporary path to a final name .
2434	Checks if the record should be roll .
2435	Matches the given string against the URI template variables .
2436	Gets the offsets .
2437	Gets the remaining wait time .
2438	Get the offsets for the given offsets
2439	Creates and initializes the runtime .
2440	Creates an instance of the delegate .
2441	Create an instance of the delegator .
2442	Gets the metric value .
2443	Find the end of the header .
2444	Gets the body size .
2445	Save bytes to a temporary file
2446	Creates an SSLSocketFactory for the given key and trust store .
2447	Returns the mime type for the given URI .
2448	Handle a session .
2449	Stops the server .
2450	Add mappings to the router .
2451	Sends the response to the given output stream .
2452	Send body .
2453	Creates a fixed - length response .
2454	Returns true if the mime type should be accepted .
2455	Sets a cookie value .
2456	Unload the cookie .
2457	Decodes a cookie value .
2458	Encodes the given cookie value .
2459	Sets the table name .
2460	Returns the name of the given principal .
2461	Insert session repository filter .
2462	Resolves the principal name from the session .
2463	Get session from cache .
2464	Resolves the JNDI name from the model .
2465	Returns the canonical parameter types of the given method .
2466	Registers a synchronization in the context .
2467	Invoke before completion .
2468	Get the current transaction .
2469	Deploys the kernel deployment .
2470	Identifies whether the given persistence unit name identifies a scoped persistence unit .
2471	Returns the list of service names related to the server .
2472	Decreases the read lock count .
2473	Increments the read lock count .
2474	Add a service to the deployment archive .
2475	This method is called when the restoration calculation is done .
2476	Deploys the JPA deployment .
2477	Add top bdas from the root bean deployment module
2478	Create a JSEAR meta data for a POJO webservice deployment .
2479	Sets the config name and file .
2480	Gets the JSESecurityMetaData from a list of security constraints .
2481	Gets the servlet url patterns mapping .
2482	Gets the servlet class mappings .
2483	Resolves the binding .
2484	Gets the available connectors .
2485	Parses the core environment element .
2486	Parse the process id attribute .
2487	Extracts the address from the operation .
2488	Sets the operation address .
2489	Returns the value of the given operation .
2490	Checks if the given operation is include defaults .
2491	Creates the composite operation .
2492	Creates an add operation .
2493	Creates an add operation .
2494	Creates a read - attribute operation .
2495	Creates a write - attribute operation .
2496	Creates an undefine - attribute operation .
2497	Get the context value .
2498	Add a new URL context factory .
2499	Removes a URL context factory .
2500	Load providers .
2501	Configure the JBossWebMetaData
2502	Configure the endpoints
2503	Modify the context root of the deployment .
2504	Gets the transport class name .
2505	Sets the runAs identity .
2506	Pop the runAs identity from the security context .
2507	Adds all servlets to the deployment .
2508	Injects the specified property into the specified object .
2509	Checks if the argument type matches the argument type .
2510	Find a method .
2511	Find field .
2512	Initialize options .
2513	Derives information from the http request .
2514	Runs a standalone report .
2515	Collects JDR report .
2516	Registers a new resource adapter deployment .
2517	Unregisters a resource adapter deployment .
2518	Register the transformers .
2519	Write the parameters .
2520	Read an exception from an input stream .
2521	Gets the lock owner .
2522	Releases the lock .
2523	Add a log to sos log
2524	Adds context parameters to war .
2525	Gets the component view .
2526	Invoke an endpoint .
2527	Gets the component view method .
2528	Checks if the source method matches the target method .
2529	Creates a resource for the statistics .
2530	Get the EJB SecurityMetaData
2531	Get the domain .
2532	Ensure that two security domains are detected .
2533	Sets the idl name for this class .
2534	Gets the local name .
2535	Creates a JNDIName from the given string .
2536	Process the IronJacamar deployment .
2537	Handle a request .
2538	Returns true if the transaction is in a transaction .
2539	Returns the transaction synchronization registry .
2540	Get the connection factory .
2541	Get the last component of a name .
2542	Returns true if the name is empty .
2543	Creates a nameNotFoundException .
2544	Creates a naming exception with the specified message and cause .
2545	Creates a naming exception with the specified message and cause .
2546	Creates an exception .
2547	Returns a naming enumeration for the given collection .
2548	Binds the given value to the given context .
2549	Gets the activeMQ component control .
2550	Parse connection attributes .
2551	Creates a component instance .
2552	Returns the resource root for the resteasy integration .
2553	Resolves the runtime name .
2554	Create listener builder .
2555	Analyze a class .
2556	Shuts down this component .
2557	Returns a list of URL patterns with the given URL pattern .
2558	Gets the servletsMetaData .
2559	Gets the servlet mappings .
2560	Gets the security constraints .
2561	Gets the login config metadata .
2562	Gets the context params metadata .
2563	Gets the web resource collections .
2564	Gets the init param metadata .
2565	New security constraint metadata .
2566	Creates a new web resource collection .
2567	Creates a new servlet metadata .
2568	Creates a new servlet mapping .
2569	New AuthConstraintMetaData .
2570	Creates a new UserDataConstraint with the specified security guards .
2571	New param value metadata .
2572	New param value meta data .
2573	Register interceptors for session bean .
2574	Process injection targets .
2575	Stops the deployment .
2576	Resolves the JNDI name from the model node .
2577	Resolve an attribute .
2578	Gets the pattern type .
2579	Returns true if a pooled connection factory should be created .
2580	Returns true if the external pooled connection factory should be created .
2581	Gets the activeMQ server name .
2582	Get the default persistence unit name .
2583	Start the activity .
2584	Stop the activity .
2585	Suspension request .
2586	Resume the server .
2587	Called when an invocation has completed .
2588	Registers a synchronization .
2589	Start the resource .
2590	Stop the resource .
2591	Returns the service name for a capability name .
2592	Create a list of resources from the deployment unit .
2593	Returns all class loaders in the deployment unit .
2594	Checks if the given persistence unit has class file transformer .
2595	Returns whether or not the given persistence unit should be enabled .
2596	Returns true if default data source use for the given persistence unit .
2597	Returns true if the entity manager should be skipped .
2598	Get an ORB instance from the system properties .
2599	Initializes the ORB with the given applicationlet .
2600	Initialize the method definitions
2601	Sets the active naming store .
2602	Validate default values .
2603	Check the parameter type .
2604	Looks for a DefaultValue annotation
2605	Validate base method
2606	Get deferred entity managers .
2607	Convert transaction status to string .
2608	Adds a cache dependencies to the event listeners .
2609	Extract database dialects .
2610	Detect database dialect .
2611	Identify dialect name .
2612	Checks if database exists .
2613	Convert a date string to a scheduler date .
2614	Set the node name .
2615	Marks a deployment unit .
2616	Reads parameters from an input stream .
2617	Write result value .
2618	Writes an exception .
2619	Looks up an object for a given lookup .
2620	begin SFSB creation
2621	End SFSB creation .
2622	Gets the invocation stack .
2623	Pushes the entity manager to the current session .
2624	Pop the current call .
2625	Gets the current call .
2626	Adds beans to the deployment .
2627	Process all managed beans in the deployment unit .
2628	Process phase listeners .
2629	Get the type ID for a class
2630	Insert a primitive into an Any object .
2631	Converts a Java name to an ID .
2632	Returns true if the given string is a reserved ID keyword .
2633	Returns the signature of a class .
2634	Returns the signature of the given method .
2635	Returns the name of a primitive type .
2636	Returns the BatchPermission for the given name .
2637	Get the transaction scoped entity manager .
2638	Inserts a value into the cache .
2639	Converts a security role definition into a model .
2640	Returns the most recent entity version .
2641	Get timers for a given object .
2642	Gets the directory for the specified timed object .
2643	Add a naming listener .
2644	Remove a listener .
2645	Fire an event .
2646	Creates a consumer that closes an AutoCloseable instance .
2647	Adds a private credential .
2648	Get an object reference .
2649	Adds a transaction management interceptor for a view .
2650	Subroutine for substitution .
2651	Creates the InVM transport configuration .
2652	Helper method to add the EJB resource adapter name to the deployment unit .
2653	Gets the root deployment unit .
2654	Returns the service name for the view .
2655	Create a view configuration .
2656	Create the injection source .
2657	Get the view interceptors for a given method .
2658	Adds the given interceptor to the view factory .
2659	Adds an interceptor to the view .
2660	Get all client interceptors .
2661	Adds a client interceptor to the proxy factory .
2662	Add a client interceptor to the registry .
2663	Put private data .
2664	Throw an unexpected XML element .
2665	Returns the list of EJBEndpoints associated with the deployment .
2666	Gets the list of POJO endpoints associated with the deployment .
2667	Extract the endpoint name from the servlet metadata .
2668	Gets the endpoint class name .
2669	Get servlet metadata by name .
2670	Gets the required attachment .
2671	Gets an optional attachment .
2672	Gets the JBossWebMetaData for the deployment .
2673	Gets the JBossPortComponentMetaData with the specified name .
2674	Get the WebserviceMetadata EJBEndpoint
2675	Get the context root of the deployment
2676	Loads the class for the given name .
2677	Returns the resource URL .
2678	Returns the URLs of the specified resource .
2679	List all resources under the specified path .
2680	Pops out the stack of entity manager managed by the caller .
2681	Get the entity manager associated with the persistence context .
2682	This method is used to register after completion listener .
2683	Deploys a War deployment .
2684	Update the server configuration .
2685	Check if all the fields are public .
2686	Creates a new HTTP endpoint .
2687	Creates a new WS deployment model .
2688	Returns true if the deployment unit is a JCR deployment .
2689	Set the next timeout .
2690	Set timer state .
2691	Merge the deployment data .
2692	Deploys the module specification
2693	Adds a dependency to the local transaction service .
2694	Gets all container interceptors .
2695	Check if a method is a method level level .
2696	Check that only required elements are required .
2697	Gets the type of the given class .
2698	Returns the component type at the given index .
2699	Returns the resource definition for the key store .
2700	Returns the resource definition for the key manager .
2701	Returns the resource definition for the Elytron trust manager .
2702	Parse the given name into a compound name .
2703	Converts a string into a vector of components .
2704	Parse a name component .
2705	Shuts down the image .
2706	Convert a servant object to a reference .
2707	Authenticate with the given username and password .
2708	Checks if the given class can be matched .
2709	Lookup a context .
2710	Unbinds a JNDI name .
2711	Instantiate a bean .
2712	Configure the bean .
2713	Dispatches a joinpoint .
2714	Get the current selector .
2715	Converts bean name to bean name .
2716	Returns the service name for the given class .
2717	Get the class description by name
2718	Process annotations for metadata .
2719	Post parse the persistence unit .
2720	Validates the descriptor .
2721	Add JBossWebMetaData to the deployment
2722	Create the web application descriptor .
2723	Find the auth method in the deployment .
2724	Deploys the service xml .
2725	Handles a stateless session bean .
2726	Creates the stub class .
2727	Generate an anonymous object id .
2728	Get the persistence providers associated with the application .
2729	Clear cached deployment specific providers
2730	Add a persistence provider for the specified deployment class loaders .
2731	Find the parent module
2732	Deploys the JBoss module .
2733	Add the persistence unit metadata .
2734	Sets the annotation indexes for the deployment .
2735	Get the persistence provider adaptor
2736	Saves the persistence provider adaptor .
2737	Lookup the persistence provider
2738	Get annotated classes .
2739	Create the EBoss archive meta data for the deployment .
2740	Build ESBMetaData .
2741	Adds the refresh handler .
2742	Get the analysis .
2743	Looks up the given class .
2744	Create a work progress .
2745	Returns the idl module name for this class .
2746	Converts an integer to a hex string .
2747	Converts a long to a hex string .
2748	Checks if the given method is an accessor method .
2749	Checks if the method is a mutator .
2750	Returns true if the method has no app exceptions
2751	Get attribute read name
2752	Get attribute name
2753	Fixes overloaded operations .
2754	Fixes case names to upper case .
2755	Escapes an IR name .
2756	Parse an XML XML environment element .
2757	Parses the default context propagation element .
2758	Process attributes .
2759	Load persistence providers by name .
2760	Creates an add operation handler
2761	Adds the system dependencies to the deployment .
2762	Write an attribute .
2763	Get the MethodIntf .
2764	Creates a session ID from the container .
2765	Infers the destination name from the given address .
2766	Registers an endpoint handler .
2767	Get the XML names for the given job .
2768	Initialize the job .
2769	Returns the URI of the request .
2770	Create a lookup result from a URL .
2771	Lookup object by name .
2772	Binds the given object to the given object .
2773	Call the unbind method .
2774	Returns a list of bindings for the specified name .
2775	Call the destroy method .
2776	Destroy a subcontext .
2777	Bind a new context .
2778	Create a new context with the given name .
2779	Looks up a link by name .
2780	Add a property to the environment .
2781	Remove a property from the environment .
2782	Adds transformations to the resource transformation description .
2783	Parse a credential .
2784	Remove security domain .
2785	Look up JNDI object .
2786	Create a modular reference .
2787	Create a modular reference .
2788	Create a modular reference .
2789	Looks up a primitive type .
2790	Waits for the specified service .
2791	Compute the masked password .
2792	Initializes the security vault .
2793	Initialize the vault .
2794	Displays a display of a vault attribute creation .
2795	Display the vault configuration .
2796	Returns the vault configuration .
2797	Checks if the given value is not null .
2798	Get the service name for the deployment .
2799	Insert a string value into an Any object .
2800	Returns true if the given permission implies permission .
2801	Gets the actions .
2802	Get log name .
2803	Send a state change notification .
2804	Get the state to bind .
2805	Returns the value of the given type .
2806	Returns the context name of the context .
2807	Returns all interceptors .
2808	Add a method interceptor
2809	Adds a dependency to this component .
2810	Get all interceptor interceptors .
2811	Get the around timeout interceptors .
2812	Register a timeout view interceptor .
2813	Adds an interceptor to the around construct .
2814	Add a post construct interceptor .
2815	Add a preDestroy interceptor .
2816	Add a pre passivate interceptor .
2817	Add a post - activate interceptor .
2818	Sets the component create service factory .
2819	Remove JNDI aliases from the list of entries
2820	Adds transport providers to the builder .
2821	Gets the context service name of a component .
2822	Gets the context service name of a module .
2823	Find bind info for an environment entry .
2824	Returns the bind info for a JNDI name .
2825	Gets cache .
2826	Returns an array of ValueMembers .
2827	Returns an array of ValueMembers for a type .
2828	Creates the subsystem root .
2829	Parse the configuration .
2830	Start the service .
2831	Adds a WeldInstantiator to the target .
2832	Gets the service name for the job operator .
2833	Add a component .
2834	Add a message destination .
2835	Get the view description for the given view type .
2836	Get the components for a given component .
2837	Get the view description for a component .
2838	Resolve message destination .
2839	Build the HORnetQ server description .
2840	Rejects defined attribute with default value .
2841	Rename an attribute .
2842	Pop the identity from the connection cache .
2843	Load the ids .
2844	Check the version and add it to the active versions
2845	Returns the default slot for the given JF version
2846	Gets the type code for a constant .
2847	Adds a type code .
2848	Ensure the package exists .
2849	Add interfaces from a container
2850	Get the abstract value definition for all abstract base values
2851	Add a class .
2852	Add an interface .
2853	Add a value definition .
2854	Add an exception definition .
2855	Gets the class level injection type .
2856	Checks if jts are enabled .
2857	Start the naming store .
2858	Stops the context .
2859	Check permission .
2860	Check the transaction sync .
2861	Returns a set of all component classes .
2862	Returns a map of timers associated with this transaction .
2863	Remove extra keys .
2864	Extract the parameters from the configuration .
2865	Converts the given type to a Class .
2866	Convert a value to an object .
2867	Get parameter types .
2868	Checks if the given types are simple .
2869	Returns the next object .
2870	Gets next binding list .
2871	Maps a binding_name to an object
2872	Observes the health check .
2873	Close all health checks .
2874	Create a reference for an EJB locator .
2875	Create a handle object for an EJB locator .
2876	Returns the value of the model node as an enum .
2877	Skips the specified amount of bytes .
2878	Check that two elements are not null .
2879	Adds a component .
2880	Add all class loaders in the specified top level .
2881	Unbinds a name .
2882	Lookup a name .
2883	List the given name .
2884	List bindings for a given name .
2885	Adds a factory .
2886	Saves a context handle .
2887	Adds the subsystem to the migration operations .
2888	Adds the welcome content handler .
2889	Gets the bean instance from the pool .
2890	Calculate the operation analysis map .
2891	Collect metrics for a resource .
2892	Prepares the deployment unit .
2893	Do the deployment .
2894	Publishes the webapp .
2895	Stops the deployment .
2896	Start the deployment .
2897	Registers an endpoint configuration .
2898	Retry timeout .
2899	Post processing of a timer .
2900	Get the declared methods .
2901	Get the declared fields .
2902	Get a constructor
2903	Get a method .
2904	Adds the Messaging ActiveMQ extension .
2905	Returns true if the parameter is allowed for the given resource type .
2906	Method to migrate the generic transport class .
2907	Cancels the task .
2908	Run the task if not cancelled .
2909	Sets the type of the property .
2910	Returns true if the given function can execute an indexed function without index .
2911	Estimate the number of indexed conditions .
2912	Find all classes in the given directory .
2913	Gets all classes of the given package .
2914	Get generic type .
2915	Evaluates a record .
2916	Derives the type of the specified field .
2917	Update record .
2918	Find record by id .
2919	Get the minimal set of nodes for a sharded query
2920	Moves the flatteded clause left to the left of the first clause .
2921	Add ORDER BY clause to the query .
2922	Extract sub queries .
2923	Checks if is from clusters .
2924	Handle class with index .
2925	Checks if a class is a diamond hierarchy .
2926	Get order direction .
2927	Returns true if key is multiple index lookups .
2928	Find the best index for the given indexes .
2929	Build index search descriptor .
2930	Compute common factor .
2931	Create a new ODocumentField handling strategy .
2932	Get the role for the given operation
2933	Check if a rule is defined
2934	Get the compact server status .
2935	Initializes the system database .
2936	Load local storage .
2937	Remove the membership event .
2938	Elects a new server .
2939	Find the lock manager from cluster .
2940	Commits the micro transaction .
2941	Rolls back the micro transaction .
2942	Updates the identity after a record commit .
2943	Update record cache after rollback .
2944	Prepare for file creation or replacement .
2945	 atomic move .
2946	Returns a list of patterns that are disjoint .
2947	Executes the given command on the cluster .
2948	Emit characters .
2949	Check if the socket is connected .
2950	Merges two byte buffers together .
2951	Splits a short into two .
2952	Execute the command .
2953	Adds a single value to the index .
2954	Removes the specified key and value .
2955	Run command .
2956	Execute the first query .
2957	Creates the OFile .
2958	Check the size of the file
2959	Replaces the contents of the file .
2960	Execute a command .
2961	End the request .
2962	Add host .
2963	Begin a request .
2964	Get database .
2965	Returns a connection with the specified protocol
2966	Kill the connection .
2967	Interrupt the channel .
2968	Disconnects a connection .
2969	Pushes the data to the client .
2970	Swap the entries at the specified index .
2971	Closes all locks .
2972	Synchronized .
2973	Update the metadata .
2974	Returns the last record .
2975	Get the next character .
2976	Execute the command .
2977	Callback .
2978	Register a compression algorithm .
2979	Get limit of open files .
2980	Checks if the given expression can be indexed by the given target .
2981	Move the buffer to the specified position .
2982	Fill the buffer with the specified length .
2983	Execute until return .
2984	Execute the full step .
2985	Evaluates the record .
2986	Execute the update .
2987	Load configuration .
2988	Parse a command request
2989	Execute this request .
2990	Updates the schedule starting at the given start node .
2991	Add an index definition .
2992	Split for aggregation .
2993	Determines the type of the document .
2994	Returns the collate for the given document .
2995	Returns the string value .
2996	Advances a probe .
2997	Execute the command .
2998	Builds an ODocument from a file .
2999	Check password .
3000	Creates a hash using the specified algorithm .
3001	Check if the algorithm is supported .
3002	Creates a new index .
3003	Returns all vertices in the graph .
3004	Returns an iterable of edges of this graph .
3005	Gets the partition key .
3006	Returns the distributed timeout .
3007	Gets the feature features .
3008	Checks if changes have been filled up to the given page index .
3009	Parses the timeout .
3010	Parses the lock strategy .
3011	Creates a cluster .
3012	Free cluster .
3013	Start the cache .
3014	Shuts down the underlying database .
3015	Create an OScriptResultSet from a single entity .
3016	Grant access to a role .
3017	Revoke a resource .
3018	Result result .
3019	Bind parameters .
3020	Resets the hash table .
3021	Returns the index of a given item .
3022	Spread a random integer .
3023	Create an index .
3024	Drop all related indexes .
3025	Returns the index associated with this reference .
3026	Get the linked class
3027	Converts the index into a stream .
3028	Remove a listener .
3029	Register a database .
3030	Timeout a request
3031	Creates a copy of this instance .
3032	Try to merge the tree .
3033	Replaces the delegate object with the given pointer .
3034	Transform result .
3035	Execute the cluster .
3036	Closes the database .
3037	Unregister a storage .
3038	Returns a set of function names .
3039	Get the names of all of the collate factories .
3040	Get command names .
3041	Get the field size from the current position .
3042	Write status .
3043	Write the headers to the response .
3044	Write records .
3045	Write a record to the response .
3046	Sends the response .
3047	Send stream .
3048	Open a database .
3049	Closes database .
3050	Listen for changes .
3051	Completes the operation .
3052	Push all the counters in the snapshot .
3053	Pushes a counter holder to the snapshot .
3054	Push storage counters .
3055	Pushes the WAL counters to the snapshot .
3056	Push a component s counters .
3057	Stops the write cache flush timer .
3058	Stops the fuzzy checkpoint timer .
3059	Stops the full checkpoint timer .
3060	Stop commit timer .
3061	Stops the wal record timer .
3062	Stops the wal flush timer .
3063	Parse SQL statement .
3064	Initialize the receive messages .
3065	Init disconnect task .
3066	Deletes the current record .
3067	Sets a property on this graph element .
3068	Removes a property from this vertex .
3069	Check if class exists in schema
3070	Wrap cursor .
3071	Define a new vertex attribute strategy
3072	Define an edge attribute strategy
3073	Get new record entries by class name .
3074	Get new record entries by cluster id .
3075	Add an index entry .
3076	Merge set .
3077	Updates the record .
3078	Checks if is indexed function without index .
3079	Prepare keys .
3080	Adds a page to the cache .
3081	Reads a page .
3082	Truncate the segment .
3083	Initializes the file .
3084	Is replication active?
3085	Gets the new node strategy .
3086	Checks if the cluster is synchronous .
3087	Returns whether or not the given cluster is read from the distributed - config .
3088	Get a map of all servers in the cluster .
3089	Get the set of servers .
3090	Checks if a server contains all clusters .
3091	Checks if the given server is contained in the cluster .
3092	Get the list of master servers .
3093	Get all configured servers .
3094	Get all clusters on a node
3095	Get all the clusters owned by this node .
3096	Get the cluster owner .
3097	Get the owner of the configured cluster .
3098	Get the list of configured servers .
3099	Returns all registered servers .
3100	Returns the set of data centers .
3101	Get write quorum .
3102	Checks if the cluster is sharded .
3103	Get the list of servers in the distributed database configuration .
3104	Returns the data center of the given server .
3105	Gets the global read quorum .
3106	Gets the write quorum .
3107	Get the cluster configuration .
3108	Gets the data center field .
3109	Clears the initialization stack .
3110	Gets an index .
3111	Drops an index .
3112	Creates a new vertex with the given id .
3113	Adds an edge to the graph .
3114	Get a vertex by id
3115	Returns all vertices of the given class .
3116	Get all edges of a class .
3117	Gets an edge .
3118	Reuse this graph .
3119	Shuts down the context .
3120	Returns the base type of this vertex .
3121	Get vertex type by name .
3122	Creates a new vertex type .
3123	Drop a vertex type .
3124	Get an edge type by name .
3125	Creates an edge type .
3126	Gets an element .
3127	Drops an element index .
3128	Create a key index .
3129	Remove an exception listener .
3130	Fire an exception event .
3131	Stop monitoring monitoring .
3132	Registers the profiling MBean with the given storage name
3133	Unregister profiling MBean
3134	Fetch write cache counters .
3135	Fetch system counters .
3136	Fetch the statistics for the specified component .
3137	Compress the JSON string .
3138	Get the value of the named property .
3139	Detach from iPojo .
3140	Get the version of the IPojo object
3141	Execute a command .
3142	Set the dirty state of the IPojo .
3143	Unsets the dirty data .
3144	Get the types of all index factories .
3145	Returns all index engines .
3146	Get the list of missing nodes .
3147	Get a list of conflict responses .
3148	Find the best response group .
3149	Compute the quorum response .
3150	Gets the received responses .
3151	Get execution plan .
3152	Checks if the given expression should be used for indexed functions .
3153	Gets the library definition for the given database .
3154	Releases a database engine .
3155	Get the position of the file .
3156	Update the size .
3157	Returns the value at the given index .
3158	Checks if an index is used by an index after the order of an index after the order .
3159	Returns the index of the first character within the specified text .
3160	Jump to white spaces .
3161	Find the next position in the text .
3162	Sets the fetch plan .
3163	Enqueue a record .
3164	Cancel a record .
3165	Enqueue a repair cluster .
3166	Get the dependencies of a pattern
3167	Creates a pojo object .
3168	Register entity classes .
3169	Registers entity classes .
3170	Set the class handler .
3171	Acquires a database .
3172	Get a list of available connections .
3173	Acquires a database .
3174	Executes the OrientDB .
3175	Lookup provider with class loader
3176	Check the memory configuration .
3177	Create a vertex from json .
3178	Create Edge from json .
3179	Convert a GraphSON to a JSONObject .
3180	Creates an object node from an element .
3181	Execute an import
3182	Returns the status of the current job .
3183	Get active data center map .
3184	Extracts the algorithm from a string .
3185	Creates a new OSymmetric key from the configuration .
3186	Creates an OSymmetric key from a file .
3187	Create a new OSymmetric key from a stream
3188	Encrypts the given bytes using the given transform .
3189	Save this key to an output stream .
3190	Save a key to an OutputStream .
3191	Set the child .
3192	Add an object to the unique result .
3193	Get value as map .
3194	Authenticate the database .
3195	Get a map value from a map .
3196	Gets the record .
3197	Read current record .
3198	Get a transaction .
3199	Get a no - tx .
3200	Setup database pool .
3201	Get a property by name .
3202	Stops the transaction .
3203	parse a statement
3204	Returns the next token .
3205	Returns the next token
3206	Generate a parse exception .
3207	Get vertices .
3208	Removes this vertex from the graph .
3209	Adds an edge to the graph .
3210	Adds an edge to a vertex .
3211	Gets the connection class name .
3212	Get the connection class for the given direction
3213	Process broken RIDs .
3214	Returns a map of console methods .
3215	Execute task on local node .
3216	Get the number of nodes with the given status .
3217	Backup file .
3218	Wait for next retry
3219	Get the argument at the index .
3220	Check if any of the parameters are present .
3221	Connects to the server .
3222	List the databases .
3223	Get server information .
3224	Check if database exists .
3225	Drop a database .
3226	Freeze the database .
3227	Releases a database .
3228	Get the cluster status
3229	Execute the index .
3230	Get the current graph .
3231	Parses the retry .
3232	Save the record .
3233	Delete the record .
3234	Gets the authentication header .
3235	Authenticate user .
3236	Check if user is authorized
3237	Run the server .
3238	Adjust the position of the beginning of the token .
3239	Set the bucket pointer .
3240	Gets the bucket pointer .
3241	End an atomic operation .
3242	Acquires an exclusive lock until operation complete .
3243	Change the maximum amount of memory used by the disk cache .
3244	Start listening to a host .
3245	Read parameters .
3246	Shuts down the log manager .
3247	Add an item to the map
3248	Remove the key from the map .
3249	Acquires an entry from the map .
3250	Get the value associated with the given key .
3251	Clears the cache .
3252	Closes the file .
3253	Empty read buffers .
3254	Called after write .
3255	Called after an entry is read .
3256	Put entry in read buffers .
3257	Returns the closest power of two value .
3258	On event .
3259	Convert iKey to enum value
3260	Convert all of the underlying data into the underlying map .
3261	Get the object serializer for the given type
3262	Initialize the shutdown queue .
3263	Get engine by name .
3264	Execute simple query .
3265	Executes the query
3266	Creates a new reader entry .
3267	Authenticate an OUser .
3268	Creates the metadata .
3269	Attempt to acquire a read lock .
3270	Returns the vertex with the given direction .
3271	Returns the ID of the graph .
3272	Sets property .
3273	Removes a property .
3274	Clears the tree .
3275	Deletes the root bucket .
3276	End the database .
3277	Creates a vertex .
3278	Parse strategy .
3279	Get the position of the embedded collection .
3280	Execute the index .
3281	Fix link .
3282	Fill the record .
3283	Set the version of the record .
3284	Get the type of the record .
3285	Initialize database instance .
3286	Print the stack trace of an exception .
3287	Execute index query .
3288	Convert link to record .
3289	Register command .
3290	Create server user configuration object .
3291	Analyze condition .
3292	Create indexed property .
3293	Attaches the object to the object .
3294	Get index class .
3295	get next work
3296	Truncate this class .
3297	Adds a subclass to this class .
3298	Add cluster ids to index .
3299	Serialize a link to a buffer
3300	Release a pointer .
3301	Check if a direct memory pointer is detected .
3302	Clear memory .
3303	Convert a byte array to an int .
3304	On open server .
3305	Installs all the clusters of the given class .
3306	Dumps the server status .
3307	Search for an object in the array .
3308	Search for an object in the array .
3309	Gets the cluster names .
3310	Add a record to the search .
3311	Get the counter for a temporary id
3312	Reports a tip .
3313	Parses the fetch plan .
3314	Parses the no cache .
3315	Optimize sort .
3316	Returns the status of this batch .
3317	Execute command .
3318	Handle JVM error .
3319	Validates an index value .
3320	Rollback the given micro transaction .
3321	Execute a command .
3322	Registers a cluster .
3323	Set a property .
3324	Execute the class .
3325	Executes the OrientDB command .
3326	Delete the database .
3327	Callback hooks .
3328	Delete the database document .
3329	Counts the number of views in the database .
3330	Count the number of classes in the database .
3331	Activates document on current thread .
3332	Register storage encryption algorithm .
3333	Returns the index of the first byte of the given position .
3334	Parses the next word .
3335	Parses the next word .
3336	Parse the next word .
3337	Parses an optional keyword .
3338	Check if a character is a separator .
3339	Execute the DROP class .
3340	Clear configuration files .
3341	Gets the offset of the buffer .
3342	Extract token type .
3343	Acquires an access token .
3344	Copy the token from the security context
3345	Checks if there is no more characters .
3346	Read a line from a byte array .
3347	Reads a line from the buffer .
3348	Skips the specified number of bytes .
3349	Skip n bytes .
3350	Ensures that the given offset is within the given array length .
3351	Performs a merge sort on the specified values .
3352	Swaps two elements
3353	Performs quick sort .
3354	MurmurHash3 .
3355	MurmurHash3 function .
3356	Writes the contents of the given ByteBuffer to the underlying file .
3357	Truncate this file .
3358	Sets the position of this byte stream .
3359	Helper method that reports the end metrics reporting that failed .
3360	Awaits completion of all pending tasks .
3361	Find matches .
3362	Find all compaction targets that are dependent on the given schema .
3363	Deletes the snapshot files .
3364	Returns the hash code for the given field position .
3365	Checks if two fields are equal .
3366	Removes all references that are referenced in the hollow schema .
3367	Called when an announcement is completed .
3368	Called when a cycle is completed .
3369	Read header tags .
3370	Extracts the primary key from an object .
3371	Clear all the segments .
3372	Reads all ordinals from the given stream .
3373	Returns the size of the sparseBitSet .
3374	Returns a string representation of the field value .
3375	Copy the contents of the given byte array to the given destination .
3376	Copies data from srcPos to destination position .
3377	Compare two byte arrays .
3378	Creates an ordered copy of the specified byte array .
3379	Copies bytes from srcPos to destination position .
3380	Reads segments from an input stream .
3381	Writes len bytes to an output stream .
3382	Ensures that the segment at the given index is empty .
3383	Returns the position of the field .
3384	Calculate total size and total number of select buckets and total number of select buckets .
3385	Returns true if the given Hollow dataset contains all collections .
3386	Generate the Hollow schema files .
3387	Generate files for hollow schemas .
3388	Returns true if the key matches the given ordinal field .
3389	Returns the record key for the given ordinal .
3390	Create a FieldPath for a primary key .
3391	Creates a field path for a hash index .
3392	Creates a field path for a prefix index .
3393	Associates the given object with the given ordinal .
3394	Initialize the prefix index .
3395	Returns true if the key contains the given key .
3396	Gets the percentage of the current card .
3397	Add an object field .
3398	Returns a list of all the schemas in the given collection .
3399	Initialize with the default version default defaults .
3400	Gets the segment at the given index .
3401	Find all matching records that match the given field value .
3402	Find all matching records that match the given field value .
3403	Sets element match paths .
3404	Set the key paths .
3405	Calculates the value .
3406	Restores the data model from the last state .
3407	Runs the cycle .
3408	Exclude the given key .
3409	Exclude references from the HollowRead state .
3410	Write the HollowBlob header .
3411	Computes the metrics for the hollow read .
3412	Write the data to the given buffer
3413	Write fixed length int .
3414	Write fixed length long .
3415	Return an ordinal to the pool .
3416	Sort the free ordinals .
3417	Generates a hash code for the given key and field type .
3418	Generates a hash code for a given key .
3419	Resize storage .
3420	Returns the free ordinal .
3421	Prepare the bucket for write .
3422	Compare the given representation with the given key
3423	Grows the key array .
3424	Rehash previous data .
3425	Create an empty key array .
3426	Checks if the given match index is equal .
3427	Find a matching key .
3428	Swaps the current state .
3429	Calculates the hash table size for the given number of elements .
3430	Runs the compaction cycle .
3431	Write the snapshot .
3432	Writes the delta to the given output stream .
3433	Adds the given schema names to the given set .
3434	Normalizes a field path .
3435	Reindex the hash index .
3436	Find matches .
3437	Trigger a random refresh .
3438	Trigger an async refresh .
3439	Adds a type diff to this graph .
3440	Calculates the differences .
3441	Writes a long value .
3442	Writes an integer to the output stream .
3443	Writes an integer to the byte array at the specified position .
3444	Reads a VInt from the stream .
3445	Reads a long value from the stream .
3446	Add a child view .
3447	Refresh the loading views .
3448	Update the loading views .
3449	Pull a scroll event .
3450	Performs an OverScroll by over - refresh .
3451	Create a new Fact .
3452	Add facts to the rule .
3453	Creates a builder for a rule class .
3454	Create a new builder .
3455	Returns a new rule builder with the given type .
3456	Returns a new rule builder with the specified result type .
3457	Creates a new rule builder with the given name and value .
3458	Create a new rule builder .
3459	Creates a new rule builder .
3460	Gets the instance of the given class .
3461	Gets the first field of the given class .
3462	Returns the first method annotated with the given annotation .
3463	Gets annotation .
3464	Registers an auditable rule .
3465	Updates the status of a rule .
3466	Returns the audit status map .
3467	Sets the result type .
3468	Adds an action to the rule .
3469	Adds an action to the rule .
3470	Resets the value .
3471	Creates a new rule .
3472	Returns a list of the rules defined by this package .
3473	Read an empty line or end line of a table .
3474	Convert a list of services to an array .
3475	Extract ports from the build configuration .
3476	Extracts the port mappings from the config .
3477	Parse port mapping .
3478	Add port if not null
3479	Shift the port list and return it .
3480	Add missing parts .
3481	Appends an imagestream resource to the target file .
3482	Checks if the given servicePort matches the specified port .
3483	Returns the port value for the given service name .
3484	Gets the host and port .
3485	Puts a value into the map if not already present .
3486	Merge the given map if present .
3487	Merge two maps .
3488	Puts all values in the map if not null .
3489	Waits until a pod is ready .
3490	Validate kubernetes name .
3491	Converts entity to list items .
3492	Gets the resource version .
3493	Checks if a pod is ready .
3494	Gets the current context .
3495	Checks if the list has a route with the given name .
3496	Check if the resource has a resource .
3497	Read and enrich a fragment .
3498	Converts a map of environment variables to a list of environment variables .
3499	Merges two resources .
3500	Merges the map with empty strings .
3501	Check if the pod spec is local
3502	Read configuration from file .
3503	Add port if valid
3504	Returns the docker json configuration string .
3505	Get the configuration of a plugin .
3506	Get the configuration for a secret .
3507	Download a URL to a file .
3508	Compare two versions .
3509	Merges the specified profile with the specified profile .
3510	Looks up a profile with the specified name .
3511	Read profiles from classpath .
3512	Read all profiles from classpath .
3513	Finds the yaml file in the given directory .
3514	Returns a list of all the paths defined by the given extension .
3515	Load profiles from yaml
3516	Get image pull policy .
3517	Check if the configuration is open shift mode
3518	Gets the replica count .
3519	Get the first child element with the given name .
3520	Installs a template
3521	Remove a tag by name .
3522	Apply namespace .
3523	Apply project .
3524	Apply a project request .
3525	Get the namespace for the entity
3526	On apply error .
3527	Adds the list items to the builder .
3528	Adds namespace annotations to the builder .
3529	Gets the environment variable .
3530	Convert duration string to seconds
3531	Convert a string to a duration .
3532	Scans a list of files that match the given patterns .
3533	Disables OpenShift client features .
3534	Checks if a service has anIngress rule .
3535	Parse a mapping from an input stream .
3536	Build a generator context .
3537	Extracts the generator configuration .
3538	Creates the enricher context .
3539	Extract the enricher configuration .
3540	Gets the default icon reference .
3541	Copies the app config files to the app config directory .
3542	Load properties from a resource .
3543	Gets the spring boot version .
3544	Creates a list of service objects .
3545	Enrich a list builder .
3546	Gets raw configuration map .
3547	Flatten a map into a flat map .
3548	Extracts the watcher config .
3549	Gets the singleton template from a list of resources .
3550	Get the build date from the build date .
3551	Gets a configuration property .
3552	Get a configuration map .
3553	Prepare processors for a list of type .
3554	Adds from configuration to the builder .
3555	Get from mode default
3556	Get image name .
3557	Gets the registry .
3558	Returns true if fabric8 is enabled .
3559	Get the URL for a service .
3560	Returns the value of the given property as a boolean .
3561	Creates a JestClient .
3562	Creates the internal node .
3563	Scan plugins .
3564	Parses a JSON object from a JSON string .
3565	Performs a GET request .
3566	Creates a PayPalPaymentResource from a JSON string .
3567	Makes a GET request .
3568	Sends a request to the client .
3569	Parses a JSON object from a JSON object .
3570	Collect device data .
3571	Collects device data .
3572	Collects payPal device data .
3573	Gets the payPal client metadata id .
3574	Check if the package is valid .
3575	Get a property as a string .
3576	Parse a list of payment method nonces
3577	Get the checkout recipe from browser .
3578	Returns the billing ag recipe for the browser .
3579	Makes a GET request .
3580	Performs a POST request .
3581	Perform a POST request .
3582	Start payment .
3583	Approve a local payment request .
3584	Register a listener .
3585	Removes a listener .
3586	Request a Billing Agreement flow .
3587	On activity result .
3588	Parses the paypal account .
3589	Adds noun words to dictionary .
3590	Removes a word from a dictionary .
3591	Convert a sequence of tokens to a list of strings .
3592	Extract phrases from a string .
3593	De tokenized string .
3594	Fetches a buffer from a channel .
3595	Join a list of nal units into a ByteBuffer .
3596	Add a list of nal units to the output buffer .
3597	Returns the profile for the specified integer .
3598	Normalizes a fixed precision array .
3599	Reads the next marker .
3600	Read the next marker buffer and return it .
3601	Find the maximum available frame .
3602	Modify the edit file .
3603	Copy the contents of the src file to dst
3604	Returns the duration of all edits in the track .
3605	Returns the time value for a given frame number .
3606	Convert a time value to a frame .
3607	Convert media media to edited media
3608	Returns the media time of edited movie .
3609	Convert video frame number to player number .
3610	Returns the duration of a movie in milliseconds .
3611	Convert a timecode frame to a timecode frame .
3612	Formats a timecode sample
3613	Create a 4 - bit integer .
3614	Set an integer to a new value .
3615	Returns true if this color space matches the input color space
3616	Returns the size of a given size .
3617	Create an MP4Demuxer from the input stream .
3618	Reads an entry from the AAC .
3619	Creates a WavHeader for the specified audio format
3620	Create a WavHeader with multiple channels .
3621	Parses the FLAC decoder specific information .
3622	Encode symbol .
3623	Read the pic mark marking .
3624	Splits a movie into a pair of edits
3625	Decode a frame .
3626	Sets the contents of this byte array to the given boolean value .
3627	Deblock a M .
3628	Encodes a video frame .
3629	Encode a long value into a byte array .
3630	Returns the length of the given long value .
3631	Adds a packet to the stream
3632	Repositions the file .
3633	Decode bin .
3634	Decode a bit .
3635	Returns the position of the marker in the buffer .
3636	Returns the sample frequency for the given integer .
3637	Predict a plane .
3638	Start the given int array .
3639	Computes the coefficient of the specified level .
3640	Finalize the block .
3641	Concatenates bits .
3642	Rewinds a value in reverse order .
3643	Rewind 64 bits .
3644	Seek to the current frame
3645	Get the pixel pixel buffer .
3646	Get the gain change point ID for the gain change .
3647	Converts a byte array into an int array .
3648	Converts an integer array into a byte array .
3649	To float buffer .
3650	Read from float buffer .
3651	Interleave the input buffer .
3652	Deinterleave the given buffer .
3653	Returns the size of a video track
3654	Build box out map .
3655	Build the wipe map for the specified upper left group .
3656	Read an array of UL objects .
3657	Read a 32 - bit int array .
3658	Calculates the median value of a vector
3659	Encodes a picture .
3660	Encodes a picture .
3661	Encodes a picture .
3662	Returns a list of all supported codecs .
3663	Returns a list of supported tags .
3664	Adds a reference to the library .
3665	Deletes all JNI references .
3666	Flushes all references to the cache .
3667	Load a library .
3668	Unpack a library .
3669	Delete temporary files .
3670	Returns the default layout for the audio channel .
3671	Returns the audio channel at the specified index .
3672	Create a media packet .
3673	Get the version information .
3674	Returns the default time base .
3675	Create a Demuxer .
3676	Plays a video file .
3677	Displays a video frame at the given time .
3678	Make a codec descriptor .
3679	Print an option .
3680	Registers a factory for the given protocol prefix .
3681	Generate a unique name .
3682	Create a new media resampler .
3683	Gets the list of supported video frame rates .
3684	Gets a list of supported video pixel formats .
3685	Gets the list of supported audio sample rates .
3686	Gets the list of supported audio formats .
3687	Gets a list of the supported audio channel layouts .
3688	Set the flag .
3689	Set the flags of the packet .
3690	Returns a decoder for this video stream .
3691	Returns the Demuxer for this stream .
3692	Get a collection of all the formats associated with this stream .
3693	Make a filter graph .
3694	Returns the type of the bit stream filter .
3695	Get a ByteBuffer
3696	Make an audio frame .
3697	Resample a picture .
3698	Validates that the passed image is the correct type .
3699	Validates the given media picture .
3700	Returns the filter graph .
3701	Get the metadata for this media .
3702	Gets the CPU arch from the given string .
3703	Returns the CPU arch of the given string
3704	Get the operating system family
3705	Get the operating system family from a GNU string .
3706	Plays a sound file .
3707	Load a library .
3708	Add a library to the library .
3709	Tries to load a candidate library .
3710	Initializes the search paths .
3711	Attempt to load a specific library .
3712	Record screenshots of the desktop .
3713	Deletes this object .
3714	Returns a stream with the given position .
3715	Get the Muxer for this stream .
3716	Creates a set script transaction .
3717	Decodes a base58 string .
3718	Generate a random seed .
3719	Get a transaction
3720	Get transactions for a given address
3721	Returns a list of transactions associated with an address .
3722	Returns the list of blocks in the given range .
3723	Get a block .
3724	Sends the response to the given transaction .
3725	Creates a script from a private key account .
3726	Compiles the given script .
3727	Write a primitive array .
3728	Flush buffer .
3729	Writes object to memory .
3730	Read a class .
3731	Writes an object to a byte array .
3732	setMMF data
3733	Returns the specificity of the given class .
3734	Resizes the store to the required number of bytes .
3735	Removes an entry from the cache .
3736	Write ASCII string .
3737	Set the FST output stream
3738	Creates a FST configuration object .
3739	Creates a struct configuration .
3740	Calculates the size of the object in bytes of the given object
3741	Clears the cache .
3742	Returns an FSTObjectInput object .
3743	Returns a new FSTObjectInput object
3744	Returns an FSTObjectInput from the given byte array .
3745	Returns a new FSTObjectOutput .
3746	Registers the cross - platform class mapping .
3747	Returns the cp name of a class .
3748	Write int .
3749	Write raw int .
3750	Write long .
3751	Write array .
3752	Write byte array .
3753	Get a cached FSTFieldInfo object .
3754	Called when object has been written .
3755	Notifies the listener that an object has been written .
3756	Get the FSTClazzInfo for a given class
3757	Write an array .
3758	Sets the string .
3759	Write a primitive array .
3760	Finishes tracking changes .
3761	Creates a snapshot of the changes .
3762	Register an object to write
3763	Writes the given object to the output stream .
3764	Reads an object from the input stream .
3765	Read a byte array .
3766	Reads an integer from the buffer .
3767	Reverses the queue .
3768	Enables or disables the thread pool .
3769	Starts the Cassandra .
3770	Clean up embedded data .
3771	Copy a resource to a directory
3772	Prints the current thread info .
3773	Returns whether the remote port is taken from the given node .
3774	Creates an empty subscriber state .
3775	Read onnx operations .
3776	Calculates the output shape
3777	Returns true if the given condition is true .
3778	Compares an ndarray with the given condition
3779	Compares a condition with a given dimension
3780	Return true if condition is true
3781	Apply a condition to an ndarray
3782	Get the first index of an array
3783	Convert this object to a FlatProperties
3784	Create a FunctionProperties from a FlatProperties
3785	Serialize a collection of function properties into a flat buffer .
3786	Sets the exception .
3787	Set the exception if it exists .
3788	Merges the coordinates of two coordinates .
3789	Partition variable set .
3790	Convert an onnx type to an nd4j type
3791	Shuts down the transport .
3792	Get the device architecture
3793	Col2im
3794	Pooling two images
3795	Create a CompressionDescriptor object
3796	Splits the given list into batches .
3797	Checks that all arrays have the same dimensions
3798	Set the data type
3799	Returns a linespace with a given number
3800	Flatten a collection of matrices
3801	Calculate the bilinear products of the input tensor
3802	Creates a complex ndarray from a double array .
3803	Creates a complex array with the given value
3804	Create a complex array with the specified shape
3805	Returns true if the last sync time is replicated
3806	Subtracts two complex numbers .
3807	Returns the inverse of the complex number
3808	Floor a complex number .
3809	Negates a complex number
3810	Returns the absolute value of a complex number .
3811	Returns the power of a complex number .
3812	Get a context for aeron driver .
3813	Binarize the feature matrix
3814	Generate a sample of examples .
3815	Get the memory footprint of this dataset
3816	Convert an exception to a string .
3817	Returns the simple hostname of a full hostname .
3818	Convert a string array to a string
3819	Convert a byte array to a hex string .
3820	Returns an array of strings with the given delimiter .
3821	Splits the given string using the given escape character .
3822	Splits the given string using the given separator .
3823	Find the next character in the string .
3824	Escape the given string .
3825	Joins the given strings using the given separator .
3826	Converts a string to camelize .
3827	Replaces all tokens in a string with the given replacements .
3828	Get stack trace .
3829	Returns the inverse of the matrix
3830	Get the nth n .
3831	Is on host side?
3832	Is actual on device side?
3833	Create shape information
3834	Create shape information
3835	Check if a DataBuffer is a vector
3836	Get the order of the ndarray
3837	Get the offset for an ndarray
3838	Converts an array of indices to an array of indices .
3839	Get a short from the index .
3840	Reallocate data buffer
3841	Copies the given buffer at the given stride
3842	get constant buffer
3843	Returns the Kafka URI .
3844	Multiply an ndarray
3845	Log an ndarray
3846	Max vector .
3847	Max arrays .
3848	Computes the minimum of a ndarray
3849	Calculate min .
3850	Stabilize an ndarray
3851	Expm1 function
3852	Log 1 p
3853	Prepare bounds for a vector
3854	Adjust scheme to bounds
3855	Returns the next data set .
3856	Execute Qrf
3857	Build allocation shape
3858	Checks if the given name exists in the environment variable .
3859	Reads the data from the given stream
3860	Iterates over the tail of all events .
3861	Create an ndarray from a float pointer
3862	Creates an ndarray from a file
3863	This method is used to allocate data .
3864	Attaches an object to the lock .
3865	Returns true if the master is started .
3866	Execute the given op
3867	Blocking flush queue
3868	Returns an input stream for this resource .
3869	Get device for given thread id
3870	Attach a thread to the device .
3871	Returns the next device for the given thread id
3872	Returns the name of the operating system .
3873	Calculates the current architecture of the system .
3874	Publish an ndarray
3875	Starts the instrumentation application .
3876	Create data buffer .
3877	Ensures that the data type of the ndarray has a data type
3878	Adds a complex number to the result .
3879	Assigns message to storage
3880	Average pooling 3d operation .
3881	 depthwise convolution .
3882	Resets the state .
3883	Returns the class of the given op
3884	Store a new array
3885	Get the shape of the variable .
3886	Evaluate the output
3887	Compress a double array
3888	Returns the exppi of a complex array
3889	Center the given shape
3890	Truncate an ndarray
3891	Pad an ndarray to a complex array with zeros .
3892	Returns the index of the elements in the array .
3893	Broadcast an ndarray to the device
3894	Sends a vector aggregation message .
3895	Returns the gamma value .
3896	Returns the square root of the given value .
3897	Compute the brt of a BigDecimal .
3898	Returns the root of the given number of n .
3899	Returns the exponent of a number .
3900	Returns the exponent of the given MathContext .
3901	Returns the power of x .
3902	Round a number to a power of x .
3903	Returns the cos of a number .
3904	Returns the tan function .
3905	Returns the cosine of a number .
3906	Returns the cosh of the given number .
3907	Returns the tangent of the given number .
3908	Returns the suminh of the given number .
3909	Returns the arch of the given number .
3910	Gamma function .
3911	Calculates the broadh burst for a given number of terms .
3912	Scale a BigDecimal with the given precision .
3913	Scale a BigDecimal with precision .
3914	Returns the precision of an error .
3915	Put a function by id
3916	Get the input inputs for the given function
3917	Update an ndarray
3918	Sets the shape for the given variable name .
3919	Associates an ndarray with the given variable
3920	Gets property for function .
3921	Add a property for the given function
3922	Add an outgoing function .
3923	Add a function for the given variables
3924	Check if the given function has arguments
3925	This method is used to execute the function
3926	Creates a new variable with the given shape
3927	Creates a non - empty variable with the given name
3928	Creates a zero array with zeros like input
3929	Remove an argument from the function .
3930	Set the gradient for the given SDVariable
3931	Average pooling 3d operation .
3932	Returns the gru cell for the given configuration .
3933	Execute the given operation
3934	Create a While statement
3935	Execute the given function name
3936	Execute the given function
3937	Execute backward and end result
3938	Add a variable to the place holder .
3939	Allocate bytes in memory
3940	Returns the length for the given data type
3941	Convert allocation mode to string
3942	Get data type
3943	get the op number
3944	Destroy all workspaces
3945	Prints memory allocation statistics for current thread
3946	Performs a trmv matrix
3947	Receives an ndarray
3948	Execute the accumulation
3949	Decodes encoded ndarray into target .
3950	Returns the name of the name of the given tensor name .
3951	Invoke a scalar operation .
3952	Assert that no workspaces are open
3953	Calculate negative log likelihood
3954	Sends a tick to the request .
3955	Tries to request to the current state .
3956	Release the object .
3957	Get the current state .
3958	Build environment .
3959	Sends a message to the clipboard .
3960	Initialize current data set from list of examples
3961	Initialize garbage collectors
3962	Get device pointer
3963	This method is used to synchronize data
3964	Applies an updater to the view .
3965	Waits for the given allocation point to the host .
3966	Creates an array of indices from the given ndarray
3967	Gets properties for function .
3968	Checks if any of the arguments have a place holder .
3969	Get the difference between the input variables
3970	Format an ndarray
3971	Imports a graph .
3972	Convert an ndarray to a Blob
3973	Load a complex array from a blob
3974	Save an ndarray .
3975	Copies the real value of this vector to the given ndarray
3976	Copies the imaginary array to the given ndarray
3977	Computes the EPS of this number
3978	Assigns the given array to this complex array .
3979	Get the rows of the matrix
3980	Put a row into the array
3981	Put a column in the matrix
3982	Subroutine for subtraction
3983	Add another ndarray to the result
3984	Subroutine for subtraction
3985	Adds the result to the result .
3986	Assigns a number to this matrix
3987	Returns the linear view of this vector
3988	Returns the eigenvalues of a matrix .
3989	Returns the generalized eigenvalues of A and B
3990	Returns the index of a complex array .
3991	Copies two complex arrays .
3992	Multiply a complex number by a complex number .
3993	This method calculates the dot for each row .
3994	Returns the number of non - zero counts
3995	Perform a reduce operation
3996	Returns the no - arg constructor .
3997	Gets the constructor for the given class .
3998	Invoke a method handle .
3999	Returns the first annotation of the given type .
4000	Gets the declared annotation of the given class .
4001	Returns true if the given annotation is present .
4002	Creates a proxy for the given result .
4003	Load entity .
4004	Save a pojo .
4005	Creates a proxy instance .
4006	Get the metadata for the given entity type .
4007	Query for keys only .
4008	Perform a hybrid query .
4009	Performs a normal query .
4010	Query a projection query .
4011	Returns the number of keys in the datastore .
4012	Partitions an iterator into an iterator .
4013	Loads all keys from the given keys .
4014	Append a message to the path .
4015	Create a key for a POJO .
4016	Compare two keys .
4017	Converts raw key into a Key .
4018	Convert a typed Key to a Key .
4019	Gets the kind of the entity .
4020	Returns true if the type is missing .
4021	Returns true if the given type is a super type .
4022	Returns the exact direct super types of the given type .
4023	Capture a type .
4024	Get a translator for the given type key .
4025	Returns the populator for the given class and path .
4026	Returns whether or not an index instruction or not .
4027	Checks if the method is of an annotation .
4028	Returns a list of all properties of the given class
4029	Gets the metadata for this entity .
4030	Gets the value for the given key .
4031	Executes this round .
4032	Fetches pending entities .
4033	Add indexed discriminators .
4034	Register a subclass .
4035	Gets the component type parameter .
4036	Returns the key type of the given map type .
4037	Creates a new forward path
4038	Get the final path .
4039	Returns a string representation of this node .
4040	Returns the depth of this path .
4041	Puts all updates in the cache .
4042	Removes all keys from the cache .
4043	Cache put .
4044	Get all values from the cache .
4045	Returns the keys of the given buckets .
4046	Finds the key fields for the given class .
4047	Sets the key for the given pojo .
4048	Sets the id of a pojo .
4049	Gets the raw parent key .
4050	Registers a subclass for the given superclass .
4051	Checks if two types are common .
4052	Transform the given owner type to the given class .
4053	Get the annotation for the given type .
4054	Adds all values from another session to this session .
4055	Loads a key .
4056	Executes the next round .
4057	Translate the raw result .
4058	Fetches a set of entities .
4059	Loads an entity from the datastore .
4060	Create an arbitrary key with the given key .
4061	Returns raw key .
4062	Returns the id value for the given key .
4063	Converts an URL - safe key to a key .
4064	Returns a new object that is a transactionless transaction .
4065	Transacts a new object .
4066	Transacts a single work .
4067	Checks if is value
4068	Get the objectify associated with this object .
4069	Creates an async datastore .
4070	Get the metadata for the given entity .
4071	Allocate a range of keys .
4072	Open an objectify .
4073	Closes the given object .
4074	Homogize indexes .
4075	Create a reference
4076	Safely throw an exception .
4077	Add a new value to the map .
4078	Returns true if this task has finished .
4079	Generates if conditions .
4080	Execute the engine .
4081	Get the container for the given type .
4082	Gets the stat for the given kind .
4083	Unwraps the given exception .
4084	Get a translator for a type key .
4085	Gets the root translator for the given class .
4086	Create a translator for the given type key .
4087	Loads the value from the container .
4088	Get property value from container
4089	Sets value .
4090	Saves the property value .
4091	Gets the property value .
4092	Write extensions .
4093	Writes the content category .
4094	Writes a list of content categories .
4095	Processes the given snippet .
4096	Returns an iterable containing all bids in the response .
4097	Get a bid by id .
4098	Updates the bid builder with the given updater .
4099	Removes all bids from the response .
4100	Returns an iterable containing all imps that match the given filter .
4101	Read extensions .
4102	Checks if the current token is empty .
4103	Register an open RtbJsonFactory .
4104	Register a writer for a given writer .
4105	Populates the bid data for the embed .
4106	Process the fields of the snippet .
4107	Updates the given objects using the given updater function .
4108	Returns a list of objects filtered by the given predicate .
4109	Returns the current name of the current token .
4110	Expect that the next token is an object .
4111	Expect that the next token is an array .
4112	Peeks the next token from the current token .
4113	Write a boolean field .
4114	Writes a list of strings .
4115	Writes the given list of ints to the generator .
4116	Writes the given list of long values to the JSON generator .
4117	Writes a list of enums .
4118	Resolves a URL .
4119	Fixes the target URL if necessary .
4120	Get host segments .
4121	Get host .
4122	Returns the page of the given URL .
4123	load list from storm conf
4124	Extract config element from conf
4125	Returns the protocol for the given URL .
4126	Generates a WARC info from a map of fields .
4127	Extracts the refresh URL .
4128	Get metadata for an outlink .
4129	Filters the given metadata .
4130	Adds a new URL to the queue .
4131	Cleans a field name
4132	Gets the charset name from the BOM .
4133	Determines the charset from the given content .
4134	Get the charset from the HTML header .
4135	Scans the given content .
4136	Sets the value of the given key .
4137	Returns the first value in the given metadata .
4138	Gets cookies from a list of cookies .
4139	Checks if the cookie domain matches the cookie domain .
4140	Returns the cache key for the URL .
4141	Get the robot rules set .
4142	Extracts the meta tags from the document
4143	Acks the given tuple .
4144	Check if the URL matches the metadata .
4145	Filter rules .
4146	Read the configuration file .
4147	Process query elements
4148	load the navigation filters
4149	Add a record format .
4150	Returns the number of queries allowed to be sent .
4151	Check whether or not the max delay between the max delay between the max delay .
4152	Create parse filters from storm conf
4153	Append a new node to the current node .
4154	Ignorable whitespace .
4155	Add a processing instruction .
4156	Append a comment .
4157	CDATA section .
4158	This method is called when an XML document is encountered .
4159	Start prefix mapping .
4160	Returns the canonical value for the given tuple .
4161	Trims text .
4162	Check for a custom interval .
4163	Create the URLFilters from storm conf
4164	Sets the count of items in the wheel .
4165	Helper method to resolve size and state .
4166	Sets the drawable for the empty item .
4167	Sets the angle of the wheel .
4168	Updates the selected position .
4169	Invalidate the wheel item at the specified position .
4170	Convert a raw position to a wheel position .
4171	Updates the angular velocity .
4172	Get the contrast color .
4173	Clamp the given value to the upper limit .
4174	Write the coverage report data .
4175	Gets the data as a ByteBuffer .
4176	Sets a string in the array
4177	Creates an array of strings from the index
4178	Construct an ArrayChar from a String .
4179	Construct an ArrayCharacter from a String array
4180	Create a char array from a String array
4181	Returns the time interval offset for a given record .
4182	Show this frame .
4183	Show the frame if not already iconified
4184	Make the size estimate of a grid dataset .
4185	Main entry point .
4186	Create a new unit name from a plural string .
4187	Create a new unit name .
4188	Make plural .
4189	Checks if the given date is included .
4190	Returns a range that intersect the specified date range .
4191	Extend this date range .
4192	Extend this date .
4193	Sets the start date .
4194	Sets the end date .
4195	Sets the duration .
4196	Recalculates the duration .
4197	Add a new map bean
4198	Log error .
4199	Returns the name of the file .
4200	Returns a string representation of the parameters .
4201	Load the raw data .
4202	Computes the bounds of all edges .
4203	Called when the slider changes .
4204	Compute an unlimited chunking .
4205	Register a directory .
4206	Process events .
4207	Sets the reference date .
4208	Open a feature dataset .
4209	Wrap a NetCDF dataset
4210	Check if a feature type is ok .
4211	Find the feature type from the netCDF file
4212	Writes the catalog to the response .
4213	Returns HTML for a catalog .
4214	Get the page CSS .
4215	Get user head .
4216	Create a catalog from the specified path .
4217	Add global services to the catalog .
4218	Initialize the HTTP session
4219	Perform an HTTP GET request .
4220	Perform an HTTP PUT request
4221	Get the front page .
4222	Build the catalog for the given match
4223	Extract the geospatial coverage from a group
4224	Get single dataset by type name .
4225	Returns true if two VertCoord values are nearly equal .
4226	Creates a unit ID .
4227	Parse an attribute .
4228	Reads the top level .
4229	Converts two shorts into an int .
4230	Convert a byte array to an int .
4231	Returns a java . util . Date object .
4232	Makes sure that the given name is valid .
4233	Returns true if the given name is a NetCDF3 object name .
4234	Open a NetCDF file .
4235	Read record data from a structure .
4236	Read a subset of the data set .
4237	Fills all non record variables .
4238	Creates a TimeStruct from the given index .
4239	Make a GradsTimeStruct object from the given calendar .
4240	Checks if the given string contains a time template .
4241	Add a function .
4242	Get boolean function .
4243	Get BFunction by name
4244	Loads a new function .
4245	Get the level name of a grid record .
4246	Get the description of the specified record .
4247	Get the level of a grid .
4248	Returns the type of the projection .
4249	Check if a grid record is vertical .
4250	Check if a record is a layer layer .
4251	Create a coordinate transform from a NetCDF dataset .
4252	Creates a dummy transform variable .
4253	Create a projection from a coverage transform .
4254	Starts the Thredds dataset chooser .
4255	Save state .
4256	Returns a new Chronology with the specified time zone .
4257	Write count .
4258	Write an atomic array .
4259	Write bytes .
4260	Dump a number of bytes .
4261	Initialize the widget
4262	Creates a CalendarDateRange from a DateRange .
4263	Factory method .
4264	Parses the given text into an dd sparse format
4265	Parses the given text into a DAS object .
4266	Swap grid header
4267	Read the grid data .
4268	Example of testing
4269	Writes a constraint .
4270	Write WFS_ capabilities .
4271	Writes the operations to the file .
4272	Reads all files from the given directory and returns the results .
4273	Scans a log file using the given closure .
4274	Returns the value of the grid packing .
4275	Find a grid .
4276	Pack the data packing type
4277	Unpack data .
4278	Get the data points from the given buffer .
4279	Unpack Grib1 data
4280	Unpacks Grib2 record .
4281	Prints a list of grid records .
4282	Gets the next byte .
4283	Obtains a Calendar object from a calendar .
4284	Create a CalendarDate from a java . util . util . Date
4285	Obtains a Calendar object from milliseconds .
4286	Creates a CalendarDate from the specified milliseconds .
4287	Parses audunits string into a CalendarDate object .
4288	Gets the difference between the specified date .
4289	Create an atomic var .
4290	Sets up the download request .
4291	Escape a string .
4292	Create a list of slices .
4293	Unwrap a NetcdfFile .
4294	Check if a list contains a variable length
4295	Computes the effective shape of the given dimension set .
4296	Add the second to the second
4297	Multiply this unit by another unit .
4298	This method returns a ScaledUnit that can be used to divide the given unit .
4299	This method calculates the division of this unit .
4300	Raises this unit to the specified power .
4301	Converts the specified amount to a derived unit .
4302	Converts the input float array to a derived unit .
4303	Converts the given amount to a derived unit .
4304	Returns a canonical string representation of this unit .
4305	Read data from a collection of sections
4306	Read data from the vindex2 .
4307	Flattens a list of station names .
4308	Find a service by its name .
4309	Gets the size of the gate .
4310	Gets the start of the gate .
4311	Returns the number of gates for the specified datatype .
4312	Write an XML document to an output stream .
4313	Returns the preferred layout size of the target container .
4314	Verify that the given dataset path is a descendant of the given path .
4315	Generate a proxy catalog .
4316	Returns a CalendarDateUnit with the given name and unit string .
4317	Returns a new CalendarUnit with the specified date units .
4318	Returns a calendar unit for the given period field .
4319	Calculate the offset from a reference date .
4320	Make a calendar date .
4321	Returns the quantity dimension .
4322	Returns true if the file is valid .
4323	Read the header information from the file .
4324	Read data from a variable
4325	Read int data from an index
4326	Reads the data into a byte channel
4327	calculates the elevated angle
4328	Calculates the step value .
4329	Calculates the angle in degrees
4330	Calculate the data .
4331	Calyquist function
4332	Returns a vertical transformation for a given time dimension
4333	Set the debug flags
4334	Enable or disable index mode
4335	Reads a single index from the specified index .
4336	Returns true if this variable is missing .
4337	Get the bounding box of this axis
4338	Finalize the structure .
4339	Adds tabs to a StringBuffer .
4340	Pads a string to a specified width .
4341	Returns a string representation of an integer .
4342	Format a long value .
4343	Formats the given size as a string .
4344	Prints a double to stdout .
4345	Print a double value .
4346	Get the shape as a string .
4347	Finishes the slice .
4348	Returns a string representation of this descriptor .
4349	Compose target slice
4350	Compose a slice of a slice .
4351	Dumps bytes in a byte buffer .
4352	dump a byte buffer
4353	Returns the Earth ellipsoid associated with the given name .
4354	Get the type of the ellipsoid with the given epsg id .
4355	Decodes the variable length data .
4356	Decode vlen arrays
4357	Extract the URL from the URL
4358	Get the text content of the URL
4359	Filter the meta tags .
4360	Reads data into a byte channel .
4361	Adds all attributes from the specified collection .
4362	Remove an attribute .
4363	Remove an attribute .
4364	Gets the offsets of the runtimes in milliseconds .
4365	Adds an action source listener for this event type .
4366	get standard date
4367	Returns the standard date or ISO date .
4368	Get the origin of this time scale .
4369	Gets the date .
4370	Convert a double value to a date .
4371	Make the time unit .
4372	Converts a double value into a standard date string .
4373	Returns the spacing in the grid .
4374	Adds dimensions to the NetCDF file .
4375	Add a coordinate axis .
4376	Make a projection .
4377	Add all of the gds parameters to a variable .
4378	Add a coordinate system variable .
4379	Make a local location .
4380	Make the stereographic projection
4381	Create a Mercator projection .
4382	Create the messagegeostationary from the grid definition .
4383	Set the dimensions of the grid .
4384	Read a dataset .
4385	Read a dataset scan .
4386	Read the metadata from a URL .
4387	get level type 1
4388	Checks if the file is valid .
4389	Writes an array of bytes .
4390	Sets the clear name .
4391	Returns the coordinate name for the given axis .
4392	Get the coordinate name for a given axis
4393	Returns the XML representation of the error .
4394	Build an exception .
4395	Break up the levels .
4396	Make a z coordinate axis .
4397	Creates new variables .
4398	Make a time coordinate axis from a reference variable .
4399	Returns a bit shave value .
4400	Entry point for Grib2 .
4401	Wrap a NetCDF dataset .
4402	Open a NetCDF file .
4403	Clear the coordinate systems
4404	Find a coordinate axis by type .
4405	Find a coordinate axis by name .
4406	Find the coordinate system with the given name .
4407	Find a coordinate transform by name .
4408	Checks if enhance is needed
4409	Sets the values of a variable .
4410	Sets the values of the given variable
4411	Create an array with the given string values .
4412	Returns the offset of this dataset .
4413	Gets an existing file .
4414	Returns a list of features that intersect the specified bounding box .
4415	Discretize a matrix .
4416	Adds the Thredds metadata .
4417	Adds a documentation for a given type .
4418	Remove documentation for given type
4419	Returns the maximum number of bytes starting at start .
4420	Check if the NetCDF file is valid
4421	Gets the MFile from the given dataset .
4422	Returns a list of names to be used by a convention
4423	Returns a comma separated list of convention attributes .
4424	Builds the coordinate systems from a NetCDF dataset .
4425	Find all coordinate axes in the dataset .
4426	Look for coordinate system references .
4427	Make all coordinate systems .
4428	Builds the coordinate system maximum of all variables in the dataset .
4429	Returns true if the given variable is a coordinate axis for the given variable .
4430	Add a coordinate variable .
4431	Creates a subset of the specified dataset .
4432	Marks the given dataset filter .
4433	Recursive method to mark a dataset .
4434	Recursively delete all inv datasets .
4435	Initialize the request .
4436	Count a counter .
4437	Adds a symbol .
4438	Compares two table values .
4439	Compare two boolean values .
4440	Get the group scope .
4441	Add reserved attribute values to the node
4442	Checks to see if a date is valid
4443	Returns true if there are more items .
4444	Register a class .
4445	Register a DSP .
4446	Check if a DSP class is registered .
4447	Unregister a DSP class
4448	Create a new instance of the customizer
4449	Get the time interval in hours
4450	Gets the forecast time interval offset .
4451	Gets the Vert coordinate type .
4452	Finishes the rendering .
4453	Sort the node list .
4454	Get the Raf file for a given part .
4455	Find a variable with the given attribute name .
4456	Finds a variable with the given attribute value .
4457	Finds the variable with the given attribute value .
4458	Finds a variable with the given attribute name .
4459	Find a nested structure
4460	Returns true if the dataset has a NetCDF3 record structure
4461	Get literal value .
4462	Get the FeatureType from a NetCDF dataset
4463	Get the variable name from the dataset
4464	Returns the value of a coordinate .
4465	Get the distance between two longitude values
4466	Returns the coordinate values of this coordinate axis .
4467	Creates a new coordinate axis with two ranges .
4468	Finds the closest point in the specified bounds
4469	Returns the name of this type .
4470	Adds an action to the menu .
4471	Match a path
4472	Starts the projection manager .
4473	returns the index of a pattern
4474	Adds a picture to the cache .
4475	This method is used to report picture cache contents
4476	Stop background loading .
4477	Stop loading of the picture .
4478	A GET method
4479	Create an HTTPMethod object from a session .
4480	Generate a random number of the specified type .
4481	Generate a random number .
4482	Reads data for a given variable .
4483	Get the FileSystemProvider for the given URI .
4484	Read station table .
4485	Returns the index of the specified column .
4486	Remove a data variable
4487	Convert cloud hgt2 height to string
4488	This method is called when a section has been read .
4489	Set the number of colors .
4490	Calculates the transform for the given screen and world .
4491	Create an AuthScope from a URI .
4492	Finishes the end of the grid .
4493	Returns true if this factor is reciprocal of the given factor .
4494	Get the catalog for a directory .
4495	Find the index of the given integer .
4496	Read the metadata from the URL
4497	Read the metadata content of the specified dataset .
4498	Adds the content of the given content object to the given element .
4499	Validate the metadata content
4500	Read catalog gen config element .
4501	Read a dataset source element .
4502	Read dataset namer element .
4503	Read dataset filter element .
4504	Read a result service element .
4505	Create the catalog gen config element .
4506	Create dataset source element .
4507	Create a DatasetNamer element .
4508	Create a dataset filter element .
4509	Create XML element from ResultService .
4510	Get a boolean value .
4511	Construct a new menu
4512	Add preferences to the given menu .
4513	Add parameters from the specified table .
4514	Make a parameter from an array of words .
4515	Get a parameter .
4516	Reads contents from the input stream .
4517	Read bytes from an input stream .
4518	Replaces the file template with the given index .
4519	Set the station id attribute
4520	Validates the current value .
4521	Show the format information for a given text field
4522	Read bit map .
4523	Set the netcdf file .
4524	Set the debug flags
4525	Parse name .
4526	Checks if a D structure is a group .
4527	Get the length of the netcdf variable
4528	Get the shared dimension
4529	Construct a list of dimensions .
4530	Check if the data type is unsigned
4531	Read DDS data from the server
4532	Get an ImageIcon
4533	Get an image
4534	Create a custom cursor
4535	Read an array of primitive values from the specified index .
4536	Read a data fill from a layout
4537	read data fill
4538	Create a primitive array for the given size
4539	Convert byte array to UTF - 8 encoding .
4540	Convert char array to byte array .
4541	Convert a byte array to a char array
4542	Reads a section .
4543	Creates a structure from a child section .
4544	Get a scalar string from a member .
4545	Returns the structure data of an atomic field .
4546	Returns the array of the members of a member .
4547	Create a structure members from a DAP variable .
4548	Add a group to the NetCDF file .
4549	Creates a Crawlable dataset .
4550	Normalizes a path .
4551	Add an explicit dataset .
4552	Add a dataset scan .
4553	Scans the dataset .
4554	Make all the datasets .
4555	Get the Typical dataset .
4556	Make a dataset .
4557	Put resource control .
4558	Add a point
4559	Get the bounding box upper
4560	Get the lower bounding box of this polygon .
4561	Appends the filter to the given string buffer .
4562	Checks if this dataset matches the given dataset .
4563	Add all features from a dataset .
4564	Parse a constraint
4565	Evaluates the clause .
4566	Print the constraint .
4567	Method to amend from the given group
4568	Set shared dimensions .
4569	Check if the given dimension is an empty dimension
4570	Find the group with the given name .
4571	Reads the content of a link .
4572	Get the standard URI for this dataset .
4573	Sets the projection class .
4574	Add a component to the container
4575	Invalidates the specified layout .
4576	Remove a layout component from the map .
4577	Returns the minimum layout size of the specified container .
4578	Layout the target container .
4579	Checks if the given coordinate system is a radial coordinate system .
4580	Get the maximum radial value
4581	Opens a connection to a URL .
4582	Convert the earth from a geographic geographic latitude to the Satographic degrees .
4583	Convert the given coordinate to the earth distance .
4584	Convert GOes to geos
4585	Converts a scan geometry to sweep angle axis
4586	Convert sweep angle axis to scan geometry .
4587	Generate coordinates for a given runtimes .
4588	Writes a point observation dataset .
4589	Rewrite a feature dataset in a NetCDF dataset
4590	Returns the array sequence for the given member .
4591	Returns the full name .
4592	Get the unique ID .
4593	Returns the access for a given service type .
4594	Find a dataset by its name .
4595	Returns the parent catalog .
4596	Returns a list of all metadata in the catalog
4597	Find a service by its name .
4598	Get variables for a given vocabulary .
4599	Find all catalog references in a dataset tree .
4600	Escape a path .
4601	Add a stagger array to the given dimension
4602	Intertrapolation function
4603	Compute the radius of a latitude
4604	Gets the detail info .
4605	Creates a structure from the given part name .
4606	Creates a missing variable .
4607	Make a param variable .
4608	Add global attributes .
4609	Returns the size of the stn variable .
4610	Get 1D array
4611	get goto state .
4612	Report an error .
4613	print the symbols being reduced .
4614	Reads a DMR data buffer from the input stream .
4615	Reads an error message .
4616	Read len bytes from the input stream .
4617	Read header from input stream
4618	Converts ISO 8601 string to Date
4619	Read a table from a URL .
4620	Transfer a group from another group .
4621	Gets the stn file .
4622	Open the station file .
4623	Returns the beginning of the given index .
4624	Returns the end index of the given index .
4625	Create all runtime collections .
4626	Set the edit value
4627	Returns the DataType for the given format .
4628	Convert ECF to LCF .
4629	Clean up a unit .
4630	Clean up a name .
4631	Returns true if the given unit is unitless .
4632	Create a note .
4633	Returns the variable id for the given variable .
4634	Adds the DAS attribute tables .
4635	Find the dods with the given name .
4636	Find a data frame with the given data .
4637	Find child by index
4638	Get the parent group of this group .
4639	Get the dimension at the specified index .
4640	Returns the index of the specified dimension .
4641	Get the units string
4642	Get the shape as a section
4643	Returns a slice of this variable .
4644	Sets the enum type definition
4645	Read a list of ranges .
4646	Read scalar string .
4647	Read data from the proxy .
4648	Read a section
4649	Writes the CDL to the output .
4650	Returns a string representation of this variable .
4651	Set the data type
4652	Sets the dimensions of this shape
4653	Reset the shape
4654	Set the dimensions of this variable .
4655	Reset dimensions .
4656	Set a dimension
4657	Sets the cached data .
4658	Returns a list of all dimensions .
4659	Initializes the bounding box .
4660	Finalize the grid variables .
4661	Returns a list of all datasets in this dataset .
4662	Checks if the given path ends with the specified extension .
4663	Open a DMR dataset .
4664	Build the DDM dataset .
4665	Recursively build sequence types .
4666	Looks for dimensions associated with the specified dimensions .
4667	Returns a list of enum types that match the given value .
4668	Get the core dimension set .
4669	Scans a Bufr file .
4670	Process Bufri message as dataset .
4671	Handle a POST request
4672	Get the transform
4673	Returns true if the map area should be rotated .
4674	Get the map area .
4675	Converts world to a point in world space .
4676	 pans the map .
4677	Perform a new zoom operation .
4678	Calculate the location of the navigation from the bounding box
4679	Add a listener .
4680	Remove a listener
4681	Send an event to all listeners .
4682	Send an event to all listeners of the specified source .
4683	Print the command to the output stream
4684	Prints the command to the given output stream .
4685	Print a variable s data .
4686	Prints a data section of a variable
4687	Prints a structure data structure data .
4688	Print an array .
4689	Print an array .
4690	Write a NcML element to a writer .
4691	Read a double attribute .
4692	Add a coordinate transformation .
4693	Prints the access log .
4694	Read an atom variable .
4695	Checks if a grid record is positive up .
4696	Checks if the given unit is compatible with this unit .
4697	Converts a quantity ID into a label .
4698	Set the bit offset
4699	Read bits from next byte .
4700	Convert bits to an unsigned int
4701	Opens a connection .
4702	Gets the das .
4703	Get the DDS data .
4704	Returns the complete CE for the given CE
4705	Convert a projection point into a LatLonPoint .
4706	Returns the idv dataset catalog .
4707	Convert a date range to an idv compatible range .
4708	Read data from a file .
4709	Handles the spacecraftId attributes .
4710	Read sensor information .
4711	Read the root element .
4712	Cleans all XML characters in the text .
4713	Unescape a string
4714	Escapes a URL query string .
4715	Unescapes the URL query string .
4716	Decode backslashes .
4717	Escape a string .
4718	Add lightning global attributes .
4719	Swap a two byte array at the specified offset
4720	Swap an int at the specified offset
4721	Swap a double from a byte array
4722	Swaps a float .
4723	Swaps a double .
4724	Converts a short to a byte array .
4725	Converts an int to a byte array .
4726	Converts a long to a byte array .
4727	Creates a subset of this transformation .
4728	Writes the last modified date .
4729	Creates a c - c .
4730	Start XML file .
4731	Write the feature list .
4732	Sorts the levels .
4733	Adds a dimension to the NetCDF file .
4734	Create a NetCDF file .
4735	Adds a coordinate transform to a grid level .
4736	Get the index of the given record .
4737	Exit the timer .
4738	Gets the cache file .
4739	Returns the file or null if not found
4740	Prints the cache files .
4741	Recursively deletes a directory .
4742	Calculates the bearing of the specified point .
4743	Calculate bearing from two points .
4744	The main method .
4745	Returns a point with the given distance from the given point .
4746	Finds a point in the given result .
4747	Finds a point in a given result .
4748	Load picture in thread
4749	Load picture .
4750	Load the picture
4751	Stop loading .
4752	Stop loading of the picture .
4753	Get the size of the image
4754	Set the source buffered image
4755	Get the standard URI for this dataset .
4756	Make an association field .
4757	Transfer information from a proto message
4758	Count the number of bits .
4759	Compare two DataDescriptor objects
4760	Load the header .
4761	Loads the data from the data stream .
4762	Returns the field with the given name .
4763	Returns a list of double values for the specified field name .
4764	Returns an array of strings with the given name .
4765	Returns an array of boolean values for the given field name .
4766	Returns the name of the specified field .
4767	Returns the names of the field names .
4768	Prints the dump of the Dbase file .
4769	Get the attributes .
4770	Set an attribute .
4771	Remove an attribute .
4772	Find the group .
4773	Returns the parent of this node .
4774	Returns the escaped short name .
4775	Returns the path of this node .
4776	Returns the path of the group .
4777	Compute the fully qualified FQN .
4778	Returns true if this node is a top level level .
4779	Build the data buffer .
4780	Associates the value with the given key .
4781	Get list .
4782	Get an object by key name .
4783	Read data from a file .
4784	Prints all variables in this dataset .
4785	Prints a single instance .
4786	Write the element to a string .
4787	Write an element to a file .
4788	Write XML element to stream .
4789	Write an element to a writer .
4790	Create a dimension element
4791	Make a coordinate transform from an attribute container .
4792	Get an int array of an attribute .
4793	Create a new unit .
4794	Create a new unit .
4795	Returns a base unit database .
4796	Create a unitDB instance .
4797	Get the singleton instance .
4798	Find a coordinate element .
4799	Finds the closest coordinate
4800	Returns a subset of the values in the specified range .
4801	Opens a feature dataset .
4802	Open a dataset
4803	Annotate a dataset .
4804	Read Grib1 data from the specified position .
4805	Assembles the URI .
4806	Canonicalizes a string .
4807	Normalizes a string .
4808	Compiles the DAP dataset .
4809	Read the metadata .
4810	Returns the element associated with the specified key .
4811	Inserts the specified value into the map .
4812	Gets the date .
4813	Prints the attributes of a DAP node .
4814	Print an XML attribute .
4815	Determine if the attribute is a special attribute .
4816	Prints all dimensions of a given dimension .
4817	Check if a file is valid
4818	Sets the area directory attributes .
4819	set navigation block attributes
4820	Gets the calendar type .
4821	Sets the attributes of the given cal type .
4822	Find coordinates in a NetCDF dataset .
4823	Returns the name of the coordinate axis of the given dataset .
4824	Find a coordinate axis by the given type .
4825	Find a coordinate axis by its type .
4826	Find the dimension of a given dataset type .
4827	Find the best coordinate system with the highest rank .
4828	Find the dependent axis
4829	Get variable by name
4830	Deserialize a single object from a stream .
4831	Reads a marker from the input stream .
4832	Write a marker
4833	Emit a fatal error .
4834	Create a dataset .
4835	Example for testing
4836	Gets the Java array string representation of a member .
4837	Get the list of parameters
4838	Sets the list of stations associated with the panel .
4839	Sets the selected station .
4840	Redraw the panel
4841	Reads the rectangle from the stream .
4842	Writes the bounding box .
4843	Add a unit database to this instance .
4844	Add a unit .
4845	Adds a symbol .
4846	Returns the unit with the given id .
4847	Adds a unit .
4848	Add a unit by symbol .
4849	Adds a new unit to the map .
4850	Add a JMenu to the menu
4851	Find record by drs position .
4852	Reads a scalar variable from the dataset .
4853	This method serializes a dataset
4854	Get the value of the parameter values .
4855	Returns a copy of the view .
4856	Open a feature dataset
4857	Open a feature dataset
4858	Open a NetCDF dataset .
4859	Annotate a NetCDF dataset .
4860	Removes duplicate dups .
4861	Adds a new partition to this collection .
4862	Create a new GribCollection from the index .
4863	Returns an instance of match on dataset name .
4864	Returns an instance of match on dataset path .
4865	Write the query capability .
4866	Read structure data from a Structure object .
4867	Load a picture from a file .
4868	Set a buffered image
4869	Zooms the picture to a scaled picture .
4870	Paints the component .
4871	Convert a string of FTOI into a TTOI array .
4872	Decodes the forecast information into a string .
4873	Converts an integer array of integer values to a numeric integer representation .
4874	Get the number of days for a given day .
4875	Convert a vertical coordinate value to a vertical coordinate .
4876	Swp4
4877	Gets the grid packing name .
4878	Returns the data type for the specified type .
4879	Read data from an input stream
4880	Externalize DODS data .
4881	Returns the tag with the given code .
4882	Get next image
4883	Returns the serial size of the given DapType .
4884	Returns the sum of all values in the given array .
4885	Set the grid size
4886	Set overlap .
4887	Clear all used values
4888	Mark an object in the grid
4889	Finds the intersection of the given rectangle
4890	Find the intersection of the given point
4891	Find the closest object to the grid
4892	Returns the squared distance between the specified point
4893	Get or create a new base unit .
4894	Search for ServiceType .
4895	Returns the ServiceType for the given URL .
4896	Decodes the path extension
4897	Check if the location is a DOD .
4898	Check if the location is a DAP4 format
4899	Write data to output stream .
4900	Returns the suffix of the given fqn .
4901	Returns the prefix of the given fqn .
4902	Locates a file .
4903	Locates a relative path relative to a relative path .
4904	Extracts the contents of a ByteBuffer .
4905	Returns the structure path of a given variable .
4906	Returns null if empty .
4907	Joins an array into a single string .
4908	Checks if the path contains a drive letter .
4909	Returns a list of protocol protocols .
4910	Convert a template index into a list of slices .
4911	Convert a template offset into a list of slices .
4912	Checks if a list of slices are contiguous
4913	Checks if a list of slices is a single point
4914	Convert a list of slices to an index .
4915	Read data from an input stream .
4916	Sets the station information .
4917	Sets the short names .
4918	Read a feature collection configuration from a catalog .
4919	Add a declaration to this group .
4920	Update groups .
4921	Find a variable by its name .
4922	Get the AxisType for a given variable
4923	Get stat type .
4924	Returns a subset of the lon axis that intersect the region
4925	Returns a list of range iterators for this axis .
4926	Set defaults .
4927	Gets the sessionid .
4928	Sets the maximum number of redirects for this session .
4929	Sets whether or not sessions should be used .
4930	Closes this HTTP method .
4931	Set the authentication and proxy credentials .
4932	Track a session
4933	Sets the credentials provider for the given scope .
4934	check the catalog
4935	Create a new index for the given shape
4936	Compute strides .
4937	Converts a list of ranges into a new index .
4938	Returns the index of this index .
4939	Returns a new index for the given dimension
4940	Returns a copy of this index .
4941	Make a clone of this index .
4942	Get index iterator .
4943	Get the current element .
4944	Sets an array at the specified index .
4945	Set a dimension
4946	Sets the values of this matrix .
4947	Returns the name of the time interval .
4948	Returns the date range of the given calendar .
4949	Returns the date list for the file .
4950	Creates a list of parameters .
4951	Gets the station list .
4952	Creates a station from the header .
4953	Get the names of the station keys .
4954	Gets the dates .
4955	Find a station index .
4956	Get the file type .
4957	Add an indentation .
4958	Set the indent level .
4959	Read or create an index from a single file .
4960	Add a directory scan .
4961	Check if the scan is needed .
4962	Scans the dataset .
4963	Set the debug flags
4964	Adds a new variable .
4965	Create a netcdf file .
4966	Validates an XML object .
4967	Returns a string representation of this shape .
4968	Set the original variable
4969	This method is used to read the data .
4970	Reads data from the given section .
4971	Check if a variable is needed .
4972	Convert an array structure
4973	Convert the member information from a structure members
4974	Find the first variable in the list of variables .
4975	Checks if a variable has data .
4976	Enhanced mode .
4977	Check if the resource control is allowed
4978	Creates an empty sequence
4979	Make an array sequence .
4980	Make a sequence of parameters .
4981	Adds the vertical coordinate attribute .
4982	Read catalog asynchronously .
4983	Read XML from XML .
4984	Read an InvCatalog from a Reader .
4985	Write the catalog to an output stream .
4986	Get metadata converter .
4987	Returns a unit name .
4988	This method is used to create another unit .
4989	Returns a unit that represents this unit .
4990	Converts the input array into a derived unit .
4991	Returns true if this unit is compatible with the given unit .
4992	Write a feature
4993	Write a point .
4994	Write a line .
4995	Write a polygon .
4996	Returns the value of the named attribute .
4997	Get the subnodes of a parent node
4998	Parse response data .
4999	Pass all reserved attributes in the DAP node to the DAP node .
5000	Get a subset of a variable .
5001	Create an ArrayStructureMA from an array structure .
5002	Sets the data for the given member .
5003	Create an array structure from a structure .
5004	Returns the geometry type of the given name .
5005	Make a station feature .
5006	Compiles the given CEAST .
5007	Compiles a filter expression .
5008	Adds a dimension definition .
5009	Creates a view of the given index .
5010	Returns true if the bounding rectangle contains the specified rectangle .
5011	Extend the bounding box
5012	Extend this rectangle .
5013	Returns null if the bounding box intersect .
5014	Adds two arrays .
5015	Compares two arrays
5016	Test if two arrays are conformable
5017	Convert an array to a given type
5018	Copies the specified array to the specified array .
5019	Copies the elements of the array to the result .
5020	Copy objects from array to result
5021	Returns the minimum value of an array .
5022	Sets a double value .
5023	Make a catalog builder for this catalog .
5024	Create a projection
5025	Unescapes a DAP identifier .
5026	URL - decode a string
5027	Unescapes the URL .
5028	Escape a string for backslash characters
5029	Unescape backslash
5030	Tokenizes a escaped name .
5031	Search for a character in the escaped name .
5032	Convert backslash to DAP .
5033	Read atomic scalar data .
5034	Get the path of a cursor .
5035	Get the default value for a given property
5036	Returns the JClass of the given component .
5037	Compiles all variables in the dataset .
5038	Compiles a structure array .
5039	Compiles a structure into a structure .
5040	Compiles a sequence array .
5041	Compile a sequence .
5042	Reads a long from the stream .
5043	Get a field .
5044	Returns the value of the field .
5045	Sets the value of a field .
5046	Adds a field to the cursor row .
5047	Add a check box field .
5048	Add a date field .
5049	Add a double field .
5050	Add an int field .
5051	Add a password field .
5052	Add a text field .
5053	Add a text combo field .
5054	Add a text field .
5055	Adds a heading .
5056	Adds a component to the layout .
5057	Adds an empty row to the layout .
5058	Find the active frame .
5059	Get the cell spacing .
5060	Returns an array of factors .
5061	Returns a copy of this dimension .
5062	Returns an array with the specified power .
5063	Returns true if this dimension is a reciprocal of this dimension .
5064	Returns true if all factors are dimensionless .
5065	Create a Grib1 param table .
5066	Factory method for Grib1ParamTables .
5067	Add a parameter table lookup .
5068	Add a parameter table .
5069	Raises this unit .
5070	Converts a float array into a derived unit .
5071	Initialize the unit table
5072	Creates a vertical variable .
5073	Peeks the name of the file .
5074	Read a short from the byte array .
5075	Read an int from a byte array .
5076	Read a float from a byte array .
5077	Read a double from the byte array .
5078	Register a unit .
5079	Adds a symbol .
5080	Creates a converter .
5081	Sets the structure data .
5082	Sets the feature data .
5083	Draws all the shapes in the given graphics context
5084	Get a list of all the shapes in the map
5085	Process the input stream .
5086	Read a buffer from an input stream .
5087	Reads more bytes .
5088	Read a number of bytes from the stream .
5089	Skip n bytes .
5090	Adds the dimensions to the NetCDF file .
5091	Returns the level index of the specified record .
5092	Returns true if the file is valid .
5093	Opens the NetCDF file .
5094	Read data from a section .
5095	Read one row data .
5096	Create a DDF from a NetCDF dataset .
5097	Creates a base type from the given variable .
5098	Fires a map area event
5099	Set the map area .
5100	Set the map area .
5101	Set the map area of the map
5102	Set the projection .
5103	Add actions to a menu
5104	Start redraw timer .
5105	Change the screen size
5106	Set the selected variable .
5107	Get a double value at the specified offset .
5108	Read double .
5109	Read an object from the data .
5110	Returns the name of the specified ent_id .
5111	Read a scaled integer .
5112	Find the parameter with the given name ignoring case .
5113	Returns true if there are more than one odometer
5114	Swaps the big endian order .
5115	Returns the number of time steps per file .
5116	Gets the file name of the template .
5117	Get file names .
5118	Gets the path of the ddF file .
5119	Gets the full path .
5120	Adds a new chsub .
5121	Convert a reference date to a time coordinate unit .
5122	Reads the NMO product header .
5123	Get the uncompdata from the given offset
5124	Standard graphic symbol .
5125	Generate circle packet
5126	Reads the nids product header .
5127	This method is used to generate vector arrow .
5128	This method is used to store the code in a sequence of text - 1 . 0 - 1 - 1 .
5129	Write an unlinked vector .
5130	Extract levels from a short array .
5131	Get the dualpol levels .
5132	Add a variable .
5133	Create a variable .
5134	Uncompresses the buffer .
5135	Get unsigned integer value from byte array
5136	Convert a byte array into an integer value .
5137	Convert a byte array to a byte array
5138	Handles a DMR request .
5139	Get the current request state .
5140	Sends an error message .
5141	Sets the anchor point .
5142	Stretch the component .
5143	Returns the bounds of the anchor .
5144	Returns the bounds of the last point in the anchor .
5145	Parse a date only .
5146	Replace all data variables in a structure member
5147	Ensure that the size of the array is ok
5148	Reads a 2 - byte integer from the file .
5149	Reads a 32 - bit unsigned integer from the file .
5150	Read 3 - byte int .
5151	Reads a 32 - bit unsigned integer from the file .
5152	Read a 32 - bit integer from the file
5153	Read 4 bytes from a 4 - byte array
5154	Returns a 4 - bit 4 .
5155	Read an int 8 .
5156	Count the number of bits in a bitmap .
5157	Returns a copy of this projection .
5158	Returns the WGS representation of this object .
5159	Escape a string .
5160	Unescapes a string .
5161	Splits a string into a path .
5162	Generates an inventory for a file .
5163	Gets the service special name .
5164	Returns the number of components in the array .
5165	Gets the reference time .
5166	Creates a new array structure .
5167	Main entry point .
5168	Read a record .
5169	Returns true if the given netfile is valid .
5170	Construct a UTM projection from a dataset .
5171	Reallocate area file .
5172	Returns true if the specified date is before the specified date .
5173	Returns true if the specified date is before the specified date .
5174	Returns true if the specified date is after the specified date .
5175	Set a value at the given index .
5176	Add a coordinate system
5177	Sets the units of this variable .
5178	Get the units string .
5179	Initialize the context .
5180	read catalog from catalog
5181	Track all datasets .
5182	read all catalogs in a directory
5183	Return true if the lon is between the start and end
5184	Converts a latitude to a string .
5185	Converts a longitude to a string .
5186	Compares this quantity with the specified quantity .
5187	Returns the selected dataset .
5188	Sets the selected dataset .
5189	Create a tree path from a node
5190	Opens the catalog .
5191	Sets the catalog .
5192	Set the catalog .
5193	Returns the alias of a variable .
5194	Write a vint .
5195	Write characters in a string .
5196	Read characters from the stream .
5197	Set debug flags
5198	Adds a member to the list .
5199	Hides a member .
5200	Returns a list of member names .
5201	Find a member by its name .
5202	Get a bitmap from the config file .
5203	Restore the state of the table .
5204	Get the set of selected rows .
5205	Returns the index of the index of the model .
5206	Returns the value of the specified member .
5207	Returns the scalar double value for the given member .
5208	Get the Java array representation of a member .
5209	Returns the scalar float value for the given member .
5210	Get a float array from a member .
5211	Returns the scalar byte value for the given member .
5212	Returns the byte array of the given member .
5213	Get a scalar integer from a member .
5214	Get the int array from a member .
5215	Returns the short value for the given member .
5216	Returns the short array of the given member .
5217	Returns the long value for the given member .
5218	Get the long array value for the given member .
5219	Returns the scalar char of the given member .
5220	Get the char array from a member .
5221	Write one dataset .
5222	Check if a dataset is used .
5223	Creates a copy of a dataset .
5224	Transfers metadata from another dataset .
5225	Get the Thredds metadata .
5226	Adds a product to the list .
5227	Print missing values .
5228	Show the summary of missing records .
5229	Find record .
5230	Dump the grids .
5231	Returns a human readable name for the first record .
5232	Apply a list of intervals to a list of intervals
5233	Compares two byte arrays .
5234	Parse a DMR document
5235	Process the attributes .
5236	Add a list of coordinates to the partition .
5237	Sets the Gaussian latitudes .
5238	Parse a variable selector .
5239	Returns a string representation of a section .
5240	returns true if the box contains the specified region
5241	Closes this connection .
5242	Execute HTTP method .
5243	Identify the location of the station
5244	Match an axis type and dimension
5245	Set stream .
5246	Reads the next character .
5247	Start a progress monitor
5248	Parse a string into a URI .
5249	Exclude the given URI .
5250	Returns null if the string is null or empty .
5251	Join a prefix and suffix .
5252	Checks if the given dataset is accepted .
5253	Merges all fields from this collection .
5254	Returns a list of all file names .
5255	Set index file name .
5256	Get the index file path in the cache .
5257	Closes the index .
5258	Returns the number of counters in this set .
5259	Adds a global attribute .
5260	Adds a global attribute .
5261	Deletes a global attribute .
5262	Rename a global attribute .
5263	Adds an attribute to the variable variable .
5264	Adds an attribute to the variable .
5265	Deletes an attribute .
5266	Renames an attribute .
5267	Determines the file type of the file .
5268	Write the headers to the file .
5269	Write all geometries .
5270	Returns the XML representation of the station observation dataset .
5271	Returns a string representation of the station collection .
5272	Write a DSR .
5273	Write a DSR R
5274	Write an error response .
5275	Closes the output stream .
5276	Flushes the DMR file .
5277	Returns a copy of this projection .
5278	Returns true if the specified element contains the specified number .
5279	Returns the element at the specified index .
5280	Shifts the specified origin .
5281	read data from layout
5282	Reads data from the given layout
5283	Returns a subset of this vector with the specified stride .
5284	Returns a list of all Catalogs .
5285	Cleans up the database files before a tracker .
5286	Sets the parameters
5287	Get a data chunk iterator for the specified section .
5288	Make a new double array .
5289	Get the dataset boundaries .
5290	Check that the requested variables are contained in the grid .
5291	Get data source structure by name .
5292	Get the resource path from the request .
5293	Sets the vertical dimensions .
5294	Read the gini file .
5295	Finishes the iterator .
5296	Transfer inherited metadata from parent dataset .
5297	Transfer metadata from another dataset .
5298	Transfer inherited metadata from a dataset
5299	Sets the contributors .
5300	Adds a dataset .
5301	Removes a dataset from the catalog .
5302	Replace a dataset in the catalog .
5303	Add a new service
5304	Remove a service
5305	Sets the list of services local .
5306	Removes a local metadata .
5307	Returns user property value .
5308	Checks if the name is valid .
5309	Returns a list of descriptor names .
5310	Construct the path for the server .
5311	Print the capabilities
5312	Get a feature .
5313	Check the parameters for an error .
5314	Handle http request
5315	Get capabilities from a URL .
5316	Returns the size of the S3 object .
5317	Returns the last modified date of the s3 object .
5318	Set all variables in the given dataset .
5319	Returns a file from the given content path .
5320	Sends a string to the response .
5321	Sets the content length of the response .
5322	Get the URI of the request .
5323	Gets the request path .
5324	Gets the request string .
5325	Get the parameter with the given name ignoring case .
5326	Saves the preferences .
5327	Writes a directory to the response .
5328	Set the bit offset .
5329	Create a bit counter for a sub key
5330	Count the number of bits .
5331	Append a new line to the text pane .
5332	Create a document from a point collection
5333	Get the XML document for the capabilities .
5334	Returns the record at the given coordinates .
5335	Get the coordinate at the specified index
5336	Adds an item to the list
5337	Handle exception .
5338	Returns a slice of this rank .
5339	Step 1 .
5340	Get the NCEP table
5341	Check if the endpoint is a CDMrf endpoint
5342	This method is called when the set has changed .
5343	Create a Grib1 GDS
5344	Copy bytes from input stream to output stream .
5345	Reads the contents of an InputStream into a String .
5346	Read the contents of an InputStream to a byte array .
5347	Writes the given string to the output stream .
5348	Copies the given file to the output stream .
5349	Copies a buffer into the output stream .
5350	Copies a directory recursively .
5351	Reads the contents of a file into a byte array .
5352	Reads a string from a file .
5353	Writes a string to a file .
5354	Writes the given string to the given file .
5355	Write the input stream to a file .
5356	This method is used to parse the exception handler .
5357	Convert an exception to an HTTP response
5358	Send a bad URL page
5359	Get the DOD catalog .
5360	Print the catalog .
5361	Prints the status of the server .
5362	Print a bad URL page .
5363	Gets the reference date .
5364	Read variable length data .
5365	Read an NcmlCollection from a string .
5366	Open an NML collection reader .
5367	Replace all characters in the given string with a replace character
5368	Cleans a byte array
5369	Removes all letters from a string
5370	Filter 7 bits .
5371	Makes sure that the given name is valid
5372	Match two characters .
5373	Pads the specified string to the left of the desired length .
5374	Returns a string padded with the specified desired length .
5375	Remove a substring from a string
5376	Removes a character from a string
5377	Removes a character from the end of the string .
5378	Collapse all whitespace in a string .
5379	Replaces all occurrences of the string with the specified character .
5380	Replaces all occurrences of a string with a common case
5381	Replaces all occurrences of the pattern with the given value .
5382	Substitutes a string .
5383	Replaces all occurrences of match with a string
5384	Removes all characters from StringBuilder
5385	Replaces the string with the given character .
5386	Replaces all characters in a string with a string .
5387	Subroutine for substitution
5388	Trims the beginning of a string .
5389	Update event .
5390	Checks the state .
5391	Update the state .
5392	Show unique templates .
5393	Gets the datasets .
5394	Releases this dataset .
5395	Create a deep copy of the structure data
5396	Copy an array structure into an array .
5397	Copy an array structure .
5398	Create a copy of an array
5399	Make a copy of an array
5400	Returns the time interval in hours
5401	Creates a new coordinate axis with the specified range .
5402	Create a TableAnalyzer .
5403	Returns the first feature type of this tree .
5404	Analyze the structure of the data .
5405	Read the data from the mc grid reader .
5406	Returns a array of latitudes for the specified type .
5407	Swaps the specified byte array at the specified offset .
5408	Swap a float from a byte array
5409	Swaps a character in a byte array .
5410	Sets the coordinate axes .
5411	Add a parameter .
5412	Returns the common parent group of this group .
5413	Returns true if this group is a parent of this group .
5414	Sets the parent group .
5415	Adds a new dimension to this group .
5416	Adds a new dimension to this group .
5417	Add a group to this group
5418	Adds an enumeration type definition .
5419	Add a variable to this group
5420	Remove a dimension .
5421	Create a group relative to this group .
5422	Convert an attribute name into an AttributeTable .
5423	Print the DAS object to the specified PrintWriter .
5424	Get a variable by its name .
5425	Write a grid .
5426	Replace missing values .
5427	Replace missing values .
5428	Get the xstart offset of the longitude
5429	Write the grid data
5430	Write the exception response .
5431	Returns a list of library versions .
5432	Create the top index file from the configuration .
5433	Gets the type of the collection .
5434	Update the collection configuration .
5435	Update leaf collection .
5436	Open GribCollection .
5437	Open GribCollection from a file .
5438	Open a GribCollection .
5439	Check if url matches pattern
5440	Adds a triple .
5441	Looks up a key and url .
5442	Looks for known URLs that have no url .
5443	Loads the CDM file .
5444	Insert a triple into the store .
5445	Returns a list of Datasets
5446	Find a dataset by its name .
5447	Set the projection
5448	Get the shapes
5449	Make the map shapes .
5450	Compare string .
5451	Start the progress monitor task
5452	Checks if the given collection index has already been updated .
5453	Normalizes the specified coordinates .
5454	Set an object at the given index .
5455	Returns the structure data at the specified index .
5456	Copy a structure members from a record .
5457	Gets the scalar object .
5458	Convert a scalar to a double .
5459	Convert a scalar field to a scalar value .
5460	Get a scalar float from a member .
5461	Get the first byte of a member of a member .
5462	Get a scalar value from a member .
5463	Get a scalar char from a member .
5464	Get a scalar string from a member .
5465	Get an array structure for a record
5466	Get an ArraySequence object from a StructureMember .
5467	Get an ArrayObject from a member
5468	Get min and max .
5469	Evaluate the expression .
5470	Returns a string representation of this constraint .
5471	Check if a node is referenced by a given node .
5472	Determines whether the given data cursor matches the given data cursor .
5473	Returns the number of expansion counts .
5474	Compute the enum types .
5475	Compute groups .
5476	Compiles a CE constraint .
5477	Check if a file is valid .
5478	Make the actions system .
5479	Gets the byte order for a file .
5480	Sets the size of this file .
5481	Find a key by name .
5482	Find file header by name .
5483	Get file header .
5484	Prints the list of parts .
5485	Returns the data pointer for the specified part .
5486	Reads a float from the file .
5487	Reads a string from the file .
5488	Process a MPM message .
5489	Returns a string representation of a bit .
5490	Write a N3channel to a channel .
5491	Parse a BaseType element .
5492	Parse a grid element .
5493	Parse the Alias elements
5494	Decodes a list of DataDescriptors .
5495	Replicates a list of keys .
5496	Get the filename of the dataset .
5497	Gets the CFFature type .
5498	Returns true if two float values are nearly equal .
5499	Returns true if the given node is references .
5500	Parses a unit .
5501	Dump an object .
5502	Check if a variable is tiled .
5503	Make the best time from complete .
5504	Convert a LatLonRect into a projection rectangle .
5505	Show the time series
5506	Make a map of attributes .
5507	Gets the values of this field .
5508	Get a numeric value .
5509	Write the CDL
5510	Sets the value of this attribute .
5511	Sets the values of this attribute .
5512	Sets the values of an array
5513	Performs the scan .
5514	Generate the catalog for a proxy dataset .
5515	Add message to queue .
5516	Set the data type for the given dataset
5517	Open the thredds datatype .
5518	Selects the feature data .
5519	Open the dataset .
5520	Prepare the GUI .
5521	Creates a JFrame that shows the Tools .
5522	Returns the name of the given axes .
5523	Returns the rank of two coordinate axis
5524	Find the coordinate axis of the given type .
5525	Get the projection t .
5526	Returns true if this geometry is a GeoYZ projection
5527	Returns true if axis is regular
5528	Checks if the set is a subset of the set .
5529	Returns true if the given list contains the axes
5530	Checks if the given axis name contains the given axis name .
5531	Check if the list contains the domain
5532	Check if the given list contains the axis types
5533	Check if the axis type contains the specified axis type .
5534	Clone this DAG .
5535	Get the currently selected bean .
5536	Get all selected beans
5537	Gets the selected cells .
5538	Sets the selected bean .
5539	Restore the state of the hidable column .
5540	Create an unknown unit .
5541	Closes the stream .
5542	Returns true if the given variable is an extra .
5543	Returns true if the given variable is a coordinate .
5544	Find a coordinate axis .
5545	add all data variables
5546	Fill the parent join data
5547	Make a station from a structure data .
5548	Creates and initializes the node map .
5549	Factory method for parsing .
5550	Create a unit with the given name .
5551	Create a unit by name .
5552	Checks if two units are compatible .
5553	Returns true if the given unit is compatible .
5554	Returns true if the given string is a unit .
5555	Returns the conversion factor between two units .
5556	Converts the given value to the given unit .
5557	Returns true if this unit is an unknown unit .
5558	Returns the scale value .
5559	Factory method .
5560	Create a new BooleanLevel clause .
5561	Create a new constraint clause .
5562	Make a gray scale image .
5563	Crawl a catalog .
5564	Crawl a dataset .
5565	Crawl direct datasets .
5566	Gets the file or cache .
5567	Get an existing file or cache file .
5568	Enable debug leak .
5569	Get all files .
5570	Closes this file .
5571	Seeks to the specified position .
5572	Flush buffer .
5573	Reads a byte from the file .
5574	Reads a short value from the stream .
5575	Reads an int from the stream .
5576	Reads an integer into an array .
5577	Reads a long value from the stream .
5578	Read a float from the stream .
5579	Read a double from the stream .
5580	Read a string .
5581	Read maximum number of bytes .
5582	Write a boolean array into the output stream .
5583	Write a short array .
5584	Write char array .
5585	Write an int array into the output stream .
5586	Write a long array into the stream .
5587	Write a float array .
5588	Write double array .
5589	Write a string to the output stream .
5590	Writes a byte array to the output stream .
5591	Performs a forward search on the byte buffer .
5592	Append query string
5593	Create a collection .
5594	Finds the index .
5595	Check if the partition is a leaf .
5596	Construct the children .
5597	Scan for children .
5598	Read files from index reader .
5599	Get a list of gridsets .
5600	Acquires a cacheable file .
5601	Remove a cache file .
5602	Remove a cache from the cache .
5603	Release a ncfile .
5604	Returns a 4 - bit 4 .
5605	Update an element in the shadow cache .
5606	Clears the cache .
5607	Make the vertical transform
5608	Returns true if the axis is a global longitude .
5609	Returns true if axis is positive .
5610	Find the index of a coordinate in the grid
5611	This method returns the index of the specified coordinates in the grid axis .
5612	returns the index of a point in the map
5613	Find the index of a point in the map
5614	Returns the position of the item to be displayed
5615	Get the item at the specified pixel .
5616	Iterate over all mFile collections .
5617	Download the logs from the server .
5618	Gets the name of the subcenter .
5619	Get CalendarPeriod from unit string
5620	Creates a CalendarPeriod from the specified value .
5621	Create a CalendarPeriod instance from a unit string
5622	Subtracts the difference between two dates .
5623	Get convert factor .
5624	Returns the value of the period in milliseconds .
5625	Gets the offset for the given date .
5626	Synchronizes the file .
5627	Initialize tables .
5628	Add a data root extension .
5629	Find the longest path match .
5630	Find the data root for the request path .
5631	Convert data root to data root .
5632	Returns the date range for the given calendar .
5633	Reindex a list of coordinates .
5634	Create a new NetcdfWriter .
5635	Create a new group with the specified parent .
5636	Add enum type definition .
5637	Delete a group attribute .
5638	Rename a group attribute .
5639	Add a record structure
5640	Abort the IO .
5641	Writes the properties of the object .
5642	Extracts the Thredds metadata
5643	This method is used to divide a unit into another unit .
5644	Converts this object to a derived unit .
5645	Converts the given amount to a derived unit .
5646	Convert a nested variable
5647	Convert a variable to an array .
5648	Convert a DOD object to an array
5649	Close all databases .
5650	Opens a database .
5651	Convert an integer value to a Period
5652	Ensure that the array has capacity .
5653	Gets the element at the specified index .
5654	Create a catalog .
5655	Creates a proxy dataset catalog .
5656	Returns the coordinate type of this dataset
5657	Factory method .
5658	Calculates the time at the specified index .
5659	Convert a scale value to a given value .
5660	Parses a local concept .
5661	Parses a local concept .
5662	Clean line .
5663	Store a concept .
5664	Write grib1 tables .
5665	Writes the lookup table file .
5666	Display the local concepts .
5667	Main entry point .
5668	Get data source type by name .
5669	Expand the access point dataset .
5670	Expand the catalog .
5671	name datasets
5672	Name the named dataset list .
5673	Name a dataset .
5674	Load picture .
5675	Stop loading .
5676	Handle status change .
5677	Notifies all listeners that a picture has been loaded .
5678	Create a scaled picture in thread .
5679	Get scaled picture size .
5680	Get scaled size string
5681	Get merged parts .
5682	Creates the header for the station .
5683	Return a list of all valid groups
5684	Checks if a part is valid .
5685	Sets the cache directory .
5686	Creates the root directory .
5687	Gets the cache file .
5688	Delete all files before cutoff date
5689	Delete the disk cache .
5690	Returns true if the given file is a Bufr table
5691	Create a new coordinate axis based on the variableDS .
5692	Create a copy of this coordinate axis .
5693	Returns true if the data type is numeric
5694	Prints the information about this axis
5695	Get Calendar from attribute .
5696	Set the list of rows
5697	Get the selected row .
5698	Increments the selected row .
5699	Get the index of the current column
5700	Sets the selected slider index .
5701	quick sort .
5702	Swaps two strings
5703	Gets an existing file .
5704	Rotate an array of longitudes .
5705	Create an XML store from a file .
5706	Create an XMLStore from an input stream .
5707	Create an XML store from a resource
5708	Creates the standard file name for the given app .
5709	Saves the preferences .
5710	Saves the preferences to the given output stream .
5711	Write an atomic variable .
5712	Writes the given data cursor to the serial writer .
5713	Helper method to write a data cursor .
5714	Writes a sequence to the serial writer .
5715	Write a record .
5716	Checks to see if a Bufr indicator file is valid .
5717	Gets the WMO ID .
5718	Read a single row .
5719	Get data .
5720	Get data .
5721	Get the data point .
5722	Reads a list of slices .
5723	Make a CFGrid file .
5724	Make a grid size estimate for a grid dataset .
5725	Create a NetCDF file .
5726	Sets the stations .
5727	Sets the selected station .
5728	Selects a station from a point .
5729	Selects the closest station from the given point .
5730	Gets the selected station .
5731	Returns the project name .
5732	Get a list of stations for a bounding box .
5733	Returns the station with the given name .
5734	Get a data iterator for a station .
5735	Create a data iterator for a station .
5736	Reads data from the ray .
5737	Computes the dot product of the vector .
5738	Returns the norm .
5739	Normalizes all elements in this vector .
5740	Add all services from a dataset iterator
5741	Get a parameter .
5742	Get a local parameter .
5743	Add a prefix .
5744	Adds a symbol .
5745	Returns the prefix of the given string .
5746	Returns true if the email is valid
5747	Get a parameter .
5748	Calculates the CRC32 of this grid
5749	Returns true if this packet is thin .
5750	Returns the field index for the given field name .
5751	Returns a string representation of the time type .
5752	Gets the time coordinate .
5753	Set the next polygon .
5754	Sets the previous polygon .
5755	Find a property by name .
5756	Set the current projection
5757	Returns a subset of the specified time axis .
5758	Register an IOProvider for the given class name .
5759	Register an IOProvider
5760	Registers an IOProvider for the specified class .
5761	Checks if the given class is registered .
5762	De - register an IOProvider .
5763	Returns true if the file can open .
5764	Open a netcdf file .
5765	Open a netcdf file .
5766	Open a NetCDF file in memory .
5767	Open a NetCDF file in memory .
5768	Find global attribute by name ignoring case .
5769	Convert this dataset to a NcML string .
5770	Writes the CDL to the given output stream .
5771	Writes the CDL to the specified PrintWriter .
5772	Writes a CDL object .
5773	Adds an attribute to a group .
5774	Adds an attribute to a group .
5775	Adds a group to the group .
5776	Adds a dimension to a group .
5777	Removes a dimension from a group .
5778	Adds a variable to the group .
5779	Add a variable to a group
5780	Add a string variable .
5781	Removes a variable from the given group .
5782	Send a message
5783	Send a record structure message
5784	Finalize the group .
5785	Read a variable section .
5786	read data from a section
5787	Reads a list of arrays .
5788	Reads a variable section from a file .
5789	Returns the full name of the given node .
5790	Converts a group name into a full name .
5791	Returns true if the given file should be included .
5792	Returns true if the given MFile should be excluded .
5793	Returns true if the given MFile matches the filter
5794	Append a string value .
5795	Dispatch check value .
5796	Force the value of the given type .
5797	Check if string is a byte .
5798	Check if the string is a short .
5799	Check if a string is an integer .
5800	Check if string is an unsigned integer .
5801	Check if a string is a float
5802	Check if the string is a double .
5803	Get attribute data type .
5804	Checks if a dataset is viewable .
5805	Returns true if the given string is a boolean .
5806	Returns true if the given string is a valid alphanumeric string .
5807	Returns true if the given alphanumeric string is valid .
5808	Recursively descend to a path .
5809	Converts a unicode code point to a hexadecimal string .
5810	Get the value of a parameter .
5811	Compare two grid definitions
5812	Process the input stream .
5813	Process a BUFR message .
5814	Remove quotes from string .
5815	Reverses the stack .
5816	Create a NCML file .
5817	Get the value of the Thredds config
5818	Writes the CDL to the output .
5819	Creates a StationHelper from the remote server .
5820	Validate the result service .
5821	Returns the angle of the angle .
5822	Get the elevation of the message .
5823	Get the latitudes of the bays
5824	Returns an array of longitudes of longitudes
5825	Returns an array of all the altitudes for this b
5826	Returns the azimuths of this Rays .
5827	Returns an array of all the elevations associated with this RRYB
5828	Selects a structure with the specified members .
5829	Returns a copy of the given variable .
5830	Adds a member variable to this tree .
5831	Sets the member variables .
5832	Sets the parent group .
5833	Calculates the total size of this variable .
5834	Reads a structure data at the specified index
5835	Read a vector structure from the array .
5836	Create a new structure iterator .
5837	Get data category .
5838	Gets the class name .
5839	Add a parameter .
5840	Get header .
5841	Convert LatLonRect into a projection point .
5842	Returns the version number or - 1 if not found
5843	Get the z axis positive value
5844	Deletes the file .
5845	Set the color scale parameters
5846	Render the plan view
5847	Returns true if this group is a child of this group
5848	Returns the MessageType for the given name .
5849	Installs all cell renderers in the given table .
5850	Sets the API key .
5851	Creates a new label .
5852	Creates a label with the specified lines .
5853	Creates a label with the specified value .
5854	Connects to CloudSQL instance .
5855	List IP types
5856	Connect to MySQL .
5857	Removes a logger .
5858	Compiles the source code .
5859	Compiles source code .
5860	Adds a source code to the compiler .
5861	Read graphic control extension .
5862	Returns the next frame .
5863	Gets the selectable persons property .
5864	Initialize the list listener .
5865	Returns the person with the given id .
5866	Adds a list of validation messages to the internal map .
5867	Sets the welcome string .
5868	Creates and injects the given view .
5869	Instantiates a view .
5870	Loads the available countries .
5871	Get the list of subdivisions
5872	Returns a property that has been changed .
5873	Adds an immutable property that has been changed .
5874	Start a Java view step .
5875	Step 1 .
5876	Clears the map .
5877	Creates the index events .
5878	Access the given member .
5879	Load a view from a FXML view
5880	Create the fxml path .
5881	Query for a style row
5882	Get the pixel value of a pixel
5883	Get the pixel values of an image
5884	Validate the image type
5885	Create a PNG image
5886	Set the tile data .
5887	Perform a raw query .
5888	Creates a cursor result for the given query .
5889	Queries the user .
5890	Executes a user query .
5891	Handle a cursor .
5892	Get a feature row
5893	Register a new cursor wrapper
5894	Get the tile row .
5895	Get the coverage data
5896	Get the coverage data for the tile table
5897	Get the coverage data for the tile database
5898	Get the coverage data tile matrix from the requested zoom level
5899	Get the zoom level of the coverage data tile matrix
5900	Get the coverage tile results from the tile matrix
5901	Get the coverage tile results from the tile matrix zoom level
5902	Get the tile matrix for the coverage data bounding box
5903	Get the value of the tile
5904	Set the icon for the geometry type
5905	Get the icon for the geometry type
5906	Open the bindings database .
5907	Converts a byte array into a bitmap .
5908	Compress bitmap .
5909	Create the table metadata
5910	Delete the table metadata
5911	Get or create a table metadata
5912	Get the GeoPackage ID
5913	Create the table metadata
5914	Create the extension .
5915	Get a feature row from the cursor
5916	Execute a raw query
5917	Query for features in the bounding box
5918	Query for the query
5919	Count the number of points in a geometry envelope .
5920	Query for bounding box
5921	Build the query string
5922	Query for features in the bounding box
5923	Count feature count
5924	Query for feature query results
5925	Query for features
5926	Returns the count of points in the bounding box
5927	Set data for a bitmap
5928	Set data for a bitmap
5929	Sets the bitmap compression configuration .
5930	Get the number of tiles in the bounding box
5931	Adjust the bounding box bounds
5932	Adjust the tile bounds
5933	Adjust the bounding box and height
5934	Adjust the bounding box and height
5935	Get the bounding box for the zoom level
5936	Get the tile grid for the given zoom level
5937	Query for a tile row
5938	Query for tiles by zoom level
5939	Get the closest zoom level of the specified length
5940	Get the approximate zoom level for the specified length
5941	Query for tile grid
5942	Delete tile by zoom level
5943	Get the number of tiles in the zoom level
5944	Check if the tile is a google tile
5945	Get the pixel value from the image bytes .
5946	Get the pixel values of the TIFF image .
5947	Validate the image type
5948	Create an image .
5949	Sets the pixel value .
5950	Get the GeoPackage or open the GeoPackage
5951	Gets the current row .
5952	Move the cursor to the invalid position
5953	Query by base feature id
5954	Delete a base id from the geometry type .
5955	Get a rectangle from the bounding box section
5956	Get a rounded float rectangle
5957	Delete missing databases
5958	Create the GeoPackage
5959	Check if the database is valid
5960	Validates a database .
5961	Validates the database .
5962	Validate database .
5963	Validate the database header
5964	Check the database header
5965	Add internal databases .
5966	Add the external databases
5967	Import a GeoPackage from the stream
5968	Get the GeoPackageMetadata
5969	Get the GeoPackageMetadata at the external path
5970	Create a new geometry .
5971	Populate the geometry metadata .
5972	Delete the GeoPackage
5973	Creates or updates the geometry metadata .
5974	Update the geometry metadata
5975	Get the count of the bounding box
5976	Create a new GeometryMetadata object
5977	Update table values .
5978	Draw a tile .
5979	Get simple attributes rows
5980	Check if the cursor is OK or not
5981	Get a UserMapping DAO
5982	Get a SimpleAttributesDao
5983	Get mappings for an extended relation
5984	Get the mappings for a related relation
5985	Check if a user mapping exists
5986	Get the count of a user custom cursor .
5987	Register a cursor wrapper for the table
5988	Read a table
5989	Get the tile from the request bounding box
5990	Draw a tile from the tile results
5991	Reproject a tile from the request bounding box
5992	Retrieve the tile results
5993	Calculates the width and height of the feature table
5994	Sets the density of the circle
5995	Sets the stroke paint
5996	Sets the paint of the polygon
5997	Draw a tile .
5998	Draw a tile .
5999	Draw a tile bitmap from the tile index
6000	Query for feature count
6001	Query for features in the bounding box
6002	Query for features
6003	Query for features matching the bounding box
6004	Draw a tile bitmap for all features
6005	Simplify points .
6006	Get the paint for the feature style .
6007	Get the line paint for the feature style
6008	Get the polygon paint for the feature style
6009	Get the paint for polygon style
6010	Get the paint for the feature style
6011	Get the style paint
6012	Get the paint for the style row
6013	Get the paint for the given style id
6014	Put an icon row .
6015	Create an icon from an icon row .
6016	Quote values .
6017	Create a bitmap of the layered bitmap .
6018	Recycle the bitmap .
6019	Get the bitmap for the layer .
6020	Get the canvas for the layer .
6021	Creates the bitmap and canvas .
6022	Get a style mapping DAO
6023	Get a style DAO
6024	Get an icon DAO
6025	Get the style for the feature table
6026	Get the styles for the feature table .
6027	Get the style for the feature table
6028	Get the icons for the feature table
6029	Get the icon for the feature table
6030	Get the style for the feature row
6031	Get the style for the feature table
6032	Get the styles for the feature row
6033	Get the icons for the feature row
6034	Get the styles for a feature
6035	Get the icons for a feature
6036	Set the style for a feature table
6037	Set the style for a feature table .
6038	Set the icons for a feature table
6039	Sets the feature styles for the given feature row .
6040	Set the style for the feature table
6041	Sets the styles for the given feature row .
6042	Set the style for the feature table .
6043	Set the style for the feature row
6044	Set the default style for the feature row .
6045	Set the default style for the feature table .
6046	Set the icons for the feature row
6047	Set the icons for the feature table .
6048	Set the icon for the feature row
6049	Set the icon for the feature row .
6050	Sets the icon for the feature table .
6051	Get a style id or create it if it doesn t exist .
6052	Gets an icon .
6053	Insert a style mapping .
6054	Delete the table style for a feature table
6055	Delete the icon for a feature table
6056	Delete the table mappings
6057	Delete the table mapping
6058	Delete a style mapping
6059	Get all table style ids
6060	Get all icon ids for the feature table
6061	Get all style ids
6062	Get all icon ids
6063	Gets the image bytes .
6064	Flush the output stream
6065	Get the pixel value
6066	Read pixels .
6067	Draw the feature in the tile
6068	Draw a line path .
6069	Draw a polygon path
6070	Add a linestring to the path .
6071	Add a polygon to the path
6072	Get the cache for the specified table name .
6073	Remove a feature row from the table .
6074	Clears all caches .
6075	Get the cached style for the table style .
6076	Get the icons for the table style .
6077	Get a RTree Index Table DAO
6078	Set the width
6079	Set the height
6080	Get derived dimensions .
6081	Returns the tile density of the specified density .
6082	Read blob value .
6083	Read the custom table
6084	Returns the color of the color .
6085	Validate the color
6086	Create a color .
6087	Get a GeoPackageManager
6088	Set the progress
6089	Index a list of features .
6090	Index a feature row .
6091	Delete the index for the given types .
6092	Delete the index for the given row .
6093	Delete the index for the given geometries .
6094	Delete the feature index
6095	Returns true if index is indexed .
6096	Get the list of indexed types .
6097	Query for feature index results
6098	Count the number of features
6099	Get the bounding box
6100	Query for feature index results
6101	Get the feature index type .
6102	Gets the internal file .
6103	Gets the internal file path .
6104	Gets the geometry type .
6105	Set the geometry type .
6106	Check if url has bounding box
6107	Replaces the X and Y coordinates in the URL .
6108	Checks if the URL has XYZ .
6109	Replace the bounding box in the URL
6110	Replace the bounding box
6111	Get the geometry data
6112	Index a feature row
6113	Update the last indexed time
6114	Delete the feature index
6115	Delete a feature index
6116	Check if the feature is indexed
6117	Query for features
6118	Query for features
6119	Count the number of features in the table
6120	Query for features in the table
6121	Count the number of features in the table
6122	Query for features in the bounding box
6123	Count the bounding box count
6124	Get the bounding box
6125	Get the metadata for the geometry .
6126	Get a feature row from a cursor
6127	Get a feature row
6128	Get the tile DAO for the feature table
6129	Get the feature DAO for the tile table
6130	Get the bounding box
6131	Query by base id .
6132	Get the unique base ids
6133	Get all related ids
6134	Delete by base id
6135	Delete user by id
6136	Delete by base id
6137	Build the where ids for the base id
6138	Create the metadata
6139	Delete the table metadata
6140	Rename the metadata
6141	Rename the name
6142	Get all metadata
6143	Get the metadata metadata
6144	Get the metadata
6145	Get the GeoPackageMetadata
6146	Check if the database is external
6147	Get the external path
6148	Get metadata by name
6149	Get metadata where name notLike
6150	Get the metadata name where the name
6151	Create a GeoPackageMetadata instance
6152	Called when a view is created .
6153	Add a parallax view to the list of parallax views .
6154	Inflates the view .
6155	Creates a custom view .
6156	Subscribes the logging event .
6157	Find the logback config file .
6158	Get a resource URL
6159	Auto config .
6160	Add information about a resource .
6161	Convert socket address to string
6162	Creates a new executor service .
6163	Start the converter .
6164	Submits a rollover event .
6165	Add a substitution property .
6166	Get a property from the context
6167	Compiles a tree .
6168	Parse t .
6169	Parses a string representation .
6170	Escape characters .
6171	Returns a regular expression for a fixed date .
6172	Initializes an event evaluator context .
6173	End the evaluator .
6174	Initializes the context selector .
6175	Load a context selector .
6176	Setup properties .
6177	Gets the absolute path of external storage directory .
6178	Gets database directory path .
6179	Converts a file name to an absolute path .
6180	Evaluates a logging event .
6181	Get the value of the discriminating event .
6182	Updates the mask if necessary .
6183	Determines the decision decision for an event .
6184	Creates the key managers .
6185	Creates the trust manager .
6186	Creates a key store factory bean from system properties .
6187	Gets the system property name .
6188	Returns the URL for the given location .
6189	Returns true if the chain has a Throwable handling converter .
6190	Stops the logback context .
6191	Prints the status of a given context .
6192	Print a context if errors occur .
6193	Prints the status manager for a given context .
6194	Write throwable first line .
6195	Gets the entry from the map .
6196	Removes the entry associated with the given key .
6197	Create a FormatInfo object from the given string
6198	Rename a file .
6199	Checks if srcFileStore is on the same volume .
6200	Get the value of an environment variable .
6201	Gets the system property .
6202	Sets the MDCPropertyMap .
6203	Output MDC property map
6204	Extracts the caller data from the stack frame .
6205	Checks if the current class is in the framework space list
6206	Add a new status .
6207	Adds a listener to the status listener list .
6208	Lookup an implicit action .
6209	Get the applicable action list .
6210	Sets the system properties .
6211	Get the value of a system property .
6212	Get a boolean value .
6213	Decapitalize the given name .
6214	Returns an array of MethodDescriptors for the given class .
6215	Returns an array of PropertyDescriptors for the given class .
6216	Starts the appender .
6217	Add an onConsoleStatusListener instance to the application .
6218	Ends the object .
6219	Returns the value of the discriminating event .
6220	Checks if the logging event is discardable .
6221	Initializes the shutdown hook .
6222	Registers a shutdown hook .
6223	Determine the enabled protocols .
6224	Determine the enabled cipher suites .
6225	Returns an array of strings that match the included values .
6226	Converts a string to a Scope
6227	Sets properties .
6228	Adds an appender to the list .
6229	Detaches an appender .
6230	Detach appender .
6231	Handles a parent level change .
6232	Calls the appenders for the given logging event .
6233	Detaches the specified appender .
6234	Create a child logger .
6235	Call the trace filter chain .
6236	Logs an event .
6237	Starts the socket .
6238	Creates the missing parent directories .
6239	Get the log level .
6240	Convert an integer to a level .
6241	Returns a set of URLs of the specified resource .
6242	Get a resource URL .
6243	Gets the class loader of an object .
6244	Get class loader as private
6245	Get the class loader of the given class .
6246	Start appender .
6247	Returns the tag for logging event .
6248	Called by the parser context .
6249	Returns the index of the separator within the given index .
6250	Evaluates the logging event .
6251	Returns the name of the client thread .
6252	Checks if two files are on the same file store .
6253	Starts the session .
6254	Append an event object to the sender .
6255	Sends the buffered buffer .
6256	Add a MDCValueLevel pair .
6257	Create a converter .
6258	Create a composite converter .
6259	Determines the compression mode .
6260	Configure the given URL .
6261	Configure a file .
6262	Configure an input stream .
6263	Build the interpreter .
6264	Do the configuration .
6265	Do configuration .
6266	Get the value for the given key .
6267	Sets the name of this context .
6268	Check if a context has status listener
6269	Get the time of the last reset message .
6270	Compile the parser .
6271	Get the effective converter map .
6272	Returns the file header .
6273	Returns the file footer
6274	Initializes appender .
6275	End the appender .
6276	Creates a copy of the clients .
6277	Adds a client .
6278	Removes a client from the pool .
6279	Gets a copy of the context map .
6280	Get the value of a class .
6281	Returns the decision of the chain .
6282	Check if Android OS is running .
6283	Initialize the default logger context .
6284	Returns all files in a folder that match the given stem regex .
6285	Prints the retrospective status .
6286	Convert a syslog facility string to an integer .
6287	Get the database file .
6288	Clear expired logs .
6289	Determines if the last time is expired or not .
6290	Sub - append event .
6291	Append the logging event .
6292	Binds logging event .
6293	Converts an object to a truncated string .
6294	Computes the mask for the logging event .
6295	Merges the event properties from the logging event .
6296	Insert an exception .
6297	Returns the length of the prefix match .
6298	Get the effective level of this status .
6299	Sets the property to the specified value .
6300	Returns true if the given class is an interface or not .
6301	Gets the child value .
6302	Process an include file .
6303	Opens a stream for the given URL .
6304	Remove head and tail elements from the recorder .
6305	Start the server .
6306	Checks if this exception is transient .
6307	Set default hosts .
6308	Creates a local index .
6309	Sync all data selection queries .
6310	Checks if the last sync date has been modified .
6311	Wait for a task
6312	List indexes for offline data
6313	Reads the contents of an input stream into a char array .
6314	Reads the input stream into a byte array
6315	Consume and close the connection .
6316	Get the list of hosts that are up .
6317	Sets the type of the Places query .
6318	Starts the request .
6319	Puts a value into the LRU cache .
6320	Get the value associated with the given key .
6321	Wait for all threads to finish .
6322	Compare two strings
6323	Reports a failure .
6324	Copy a directory to a target
6325	Initializes the properties file .
6326	Gets static field value .
6327	Get a method by name .
6328	Formats a percentage value .
6329	Formats a double .
6330	Formats a long .
6331	Read JSON syntax character .
6332	Parses a hex value .
6333	Write an array of bytes
6334	Write JSON integer .
6335	Write double .
6336	Read JSON string .
6337	Read JSON numeric characters .
6338	Reads a JSON integer .
6339	Reads a double .
6340	Read JSON string .
6341	Executes the given method call .
6342	Invokes a method call .
6343	Enqueue a method call .
6344	Gets the resource from the filesystem .
6345	Updates the decorator .
6346	Refresh the repository view .
6347	Returns the repository history view .
6348	Opens an editor .
6349	Reports an authentication failure .
6350	Prompts for authentication .
6351	Create the default page .
6352	Start the animation thread .
6353	Sets whether this node should be kept alive .
6354	Sets whether this element is omitted .
6355	Sets the owner of this element .
6356	Adds a new condition factor .
6357	Creates a new condition term from the stream .
6358	Returns true if this condition matches the given condition term .
6359	Returns the content of the given rule source
6360	Loads the configuration from the given file .
6361	Parses the configuration file .
6362	Gets the menu .
6363	Adds a response .
6364	Adds an href .
6365	Inserts an href before this ref .
6366	Remove an href .
6367	Add a prop stat .
6368	Returns the href of this element .
6369	Get the status of this element .
6370	Get the stack frame for the given value .
6371	Returns true if the given class is a subtype of the given class .
6372	Checks if a collection of proposals contains a specific proposal .
6373	Clones a node .
6374	Resets the stream .
6375	Creates the actions for the editor .
6376	Adds a connection to this connection .
6377	Returns the value of the specified property .
6378	Remove a connection
6379	Sets the location of the property .
6380	Sets the value of the specified property .
6381	Sets the size of the property .
6382	Dump a list of constraints .
6383	Create a new lock entry .
6384	Adds a child vertex to this graph .
6385	Removes a child vertex .
6386	This method is used to set the property change in the preference store
6387	Stops the plugin .
6388	Get a resource string from the default resource bundle
6389	Get the resource bundle
6390	Get the form colors .
6391	Sets the date as a date .
6392	Sets the date date .
6393	Create an error status .
6394	Log an error .
6395	Adds a field to the list of fields .
6396	Adjusts the layout of the fields .
6397	Apply the font
6398	Calculates the number of columns in this field
6399	Initialize this page .
6400	Notifies all registered listeners that a property change has been changed .
6401	Sets the active editor .
6402	Add the zoom button contribution .
6403	Determine the dialect for the back text .
6404	Creates a new context from the given userContext .
6405	Save the input file .
6406	Add listeners to the table .
6407	Creates the table .
6408	Add value to the given URL .
6409	Puts a value into the table .
6410	Adds a new token to this node .
6411	Add a node to this node .
6412	Sets the contents of the file .
6413	Adds a new condition .
6414	Adds a state token condition .
6415	Returns true if all conditions match the given condition .
6416	Gets the property .
6417	Returns the status of this element .
6418	Sets the property .
6419	Get the last line of the backText
6420	Get the last non - dash line
6421	Binds a binding to the given id .
6422	Binds two strings .
6423	Returns the message with the given id and bindings .
6424	Creates the process .
6425	Create the package for the process .
6426	Returns the value of the runtime version .
6427	Visits a Rete vertex .
6428	Visits a node .
6429	Generate dot id .
6430	Adds a remove element .
6431	Creates a set element .
6432	Creates a new locator .
6433	Create a presentation reconciler .
6434	Checks if this object is the same as the given object .
6435	Returns true if this term contains the given term .
6436	Create a condition factor from stream tokenizer .
6437	Add a page to the Rete tree .
6438	Performs a DELETE request .
6439	Performs a POST request .
6440	Get the status of a job .
6441	Execute the PullOperation
6442	Handle pull results .
6443	Sets the value at the given index .
6444	Creates a new active lock element .
6445	Filter the proposals on the given prefix .
6446	Reads the prefix of the given document .
6447	Calculates the rete rows .
6448	Paint this component .
6449	Get the part for the given model element
6450	Get image descriptor by path .
6451	Declare an image .
6452	Adds a new vertex to the graph .
6453	Returns the row index for the given vertex .
6454	Get the width of all rows .
6455	Dumps all vertices in the graph .
6456	Optimize the matrix .
6457	Load the Rette graph .
6458	Initialize the graphical viewer .
6459	Draws a new graph .
6460	Gets the drools line breakpoint for a given source .
6461	Sets the href .
6462	Returns true ifDAV can talk toDAV .
6463	Performs a copy of the specified locator .
6464	Examines a multi - status response .
6465	Extract properties from a multiStatus object .
6466	Get the response content .
6467	Returns all active locks .
6468	Get a property by name .
6469	Perform a HEAD request .
6470	Acquires a lock .
6471	Move a directory .
6472	Perform check in .
6473	Refresh the lock .
6474	Removes the specified properties .
6475	Remove a property .
6476	Sets the content type .
6477	Sets a collection of properties .
6478	Sets a property .
6479	Releases a lock .
6480	Update a version .
6481	Request version control .
6482	Delete a resource .
6483	Examines the status code .
6484	Returns true if the specified property has a child .
6485	Writes the request body .
6486	Convert a byte array to a hex string
6487	Convert an array to a hex string
6488	Sets whether the property is all property .
6489	Sets whether the property is property name .
6490	Gets the property .
6491	Strip the last word from a prefix .
6492	Initializes the tree tree .
6493	Writes the contents of this stream to the given output stream .
6494	Step over the current thread
6495	Helper method to mark parse errors
6496	Skip all whitespace characters .
6497	Add a resource to gudav server .
6498	Commits the file changes .
6499	Gets the age .
6500	Gets the content length .
6501	Returns the maximum forwards value .
6502	Returns true if overwrite is enabled .
6503	Replies if the passsthrough value is passed in .
6504	Returns the timeout value .
6505	Set a context property .
6506	Sets the timeout .
6507	Open a DSL file
6508	Parse a file from a file .
6509	Gets the object metadata .
6510	Strip object metadata .
6511	Adds the given tokens to the tree
6512	Get the children of a condition
6513	Get the children of the given object .
6514	Add a child node to a list .
6515	Print tree .
6516	Prints a node .
6517	Print tabs .
6518	Reads a JSON value from a string .
6519	Returns the image descriptor with the given id .
6520	Invokes the resource .
6521	Sets the request header value .
6522	Create the source file for rule launcher
6523	Create rule .
6524	Create the rule flow .
6525	Create a java file for rule flow launcher
6526	Returns the currently selected IUTTree units
6527	Writes an image to the output stream .
6528	Gets the field name .
6529	Returns the evaluator for this node .
6530	Gets the field value .
6531	Adds a resource properties to the resource properties .
6532	Creates the baseline control element .
6533	Binds a member to a member .
6534	Gets the member .
6535	Optimize the graph .
6536	Initialize the controls .
6537	Validate the page .
6538	Generate an entity tag .
6539	Gets the opposite edge of this connection .
6540	Validate the given list of OTPs
6541	Check if the user belongs to a right user
6542	Gets the username from the file .
6543	Appends yubi key to user .
6544	Verify an OATH OTP .
6545	Clear the password .
6546	Returns the public ID of the given YubiKey .
6547	Check if the given string is a validOTP format .
6548	Creates a new node with the given source .
6549	Creates an Evaluation object .
6550	Clears the cache .
6551	Returns true if this is a JDK 1 .
6552	Returns the package name of the given object .
6553	Get the package name of a class
6554	Returns a unique descriptor for the given object .
6555	Get the class of an argument .
6556	Checks if two classes are more specific .
6557	Finds the appropriate method for the given name and arguments .
6558	Get the value of the given property .
6559	Returns a map of property descriptors for the specified class .
6560	Get a property descriptor from the target class .
6561	Get read method by name
6562	Reads a single character .
6563	Build a projection
6564	Select all values from a SELECT statement .
6565	Converts value to long .
6566	Returns the value as a double .
6567	Converts value to BigInteger .
6568	Converts a value to a BigDecimal .
6569	Returns the value of the given value .
6570	Gets the numeric type .
6571	Convert value to given type .
6572	Convert value to integer .
6573	Get the numeric type of two types .
6574	Returns the numeric type of two values .
6575	Creates an integer from the given value .
6576	Pop the current evaluation .
6577	Generate the OGNL getter code .
6578	Generate the OGNL setter method .
6579	Flatten the tree .
6580	Initializes this node .
6581	Returns the escaped character .
6582	Sets the root context .
6583	Returns the value for the given expression .
6584	Sets an object value .
6585	Sets the value for the given tree .
6586	Returns true if the given expression is a constant .
6587	Returns the default watch service id .
6588	Waits for the server to start .
6589	Reads the source file as string .
6590	Reload the current build link
6591	Get an archiver by name .
6592	Check the archiver for problems .
6593	Read file as string .
6594	Creates the ant project .
6595	Add a system property to Java .
6596	Add a system property to Java .
6597	Open a new folder dialog .
6598	Changes the directory .
6599	Refresh the button state .
6600	Creates a file observer .
6601	Return the selected directory .
6602	Create a folder
6603	Checks if the given file is a valid file .
6604	Start a background job .
6605	Start a list .
6606	Ends a list .
6607	Move the motion to the image .
6608	Get the crop rectangle .
6609	Compute the layout .
6610	Set edit text listener .
6611	Add span watcher .
6612	Override this method to override the view s title .
6613	This method is used to get a drop down view
6614	Convert text into HTML
6615	Checks if the given text is within a paragraph .
6616	Creates a unique file in the target folder .
6617	Determine the original file path .
6618	Returns the namespace URI for the given schema name .
6619	Returns local name .
6620	Set an attribute .
6621	Sets an attribute .
6622	Get the font name from a file .
6623	Get the font name from a file .
6624	Add new buffer to the buffer
6625	Writes an array of bytes .
6626	Writes a byte to the buffer .
6627	Writes the contents of an input stream to the current buffer .
6628	Writes the contents of this buffer to the given output stream .
6629	Returns the contents of this buffer as a byte array .
6630	Sets the font size .
6631	Replaces the separators in the path with the Unix separator .
6632	Recompute the focus of the highlight .
6633	Ensures that the view is visible .
6634	Center the highlight
6635	Reset document locator .
6636	Validates the given string .
6637	Add an element type .
6638	Sets an attribute on the specified element .
6639	Sets the parent element .
6640	Get an element type by name .
6641	Gets the value of an entity .
6642	Removes all paragraphs that have been removed from the editor .
6643	Applies the given value to the given editor .
6644	Checks if the given string is a valid domain .
6645	Pushes the given operation .
6646	Performs the undo operation .
6647	Replace all occurrences of the given search string with replacement .
6648	Gets the thread status .
6649	Set the decoding options .
6650	Returns true if the specified thread can be decoded .
6651	Decodes a file descriptor .
6652	Get a list of typeface fonts .
6653	Get the font names for the assets .
6654	Get system font names .
6655	Setup the schema .
6656	Get the reader for the given input source .
6657	Returns an input stream to the URL .
6658	Sets the attribute value .
6659	Expand entities .
6660	Lookup entity .
6661	Restart the given element .
6662	Pop an element .
6663	Remove all elements from the stack .
6664	Returns the prefix of the given name .
6665	Returns true if prefix is foreign .
6666	Remove quotes from a string .
6667	Split a string .
6668	Rectify an element .
6669	Make a name from the buffer .
6670	Saves the state of the toolbar state .
6671	Unregister this editor .
6672	Called when a media event is active .
6673	Handle link event .
6674	Get the base matrix for the bitmap .
6675	Returns the maximum zoom level of the bitmap displayed .
6676	Returns true if the given selection exists .
6677	Finds spans that have been removed .
6678	Encodes the given URL .
6679	Decodes query string .
6680	Tries to pick a directory .
6681	Rotate an image .
6682	Sets the output writer .
6683	Writes a character .
6684	Writes a string to the output .
6685	Process a boolean attribute .
6686	Escape string .
6687	Write namespace declarations .
6688	Write name .
6689	Creates a stream if it doesn t exist .
6690	Wait for stream activation .
6691	Complete the store snapshot with missing instances .
6692	Wait to execute the minimal provisioning request .
6693	Get records .
6694	Perform an action with retries .
6695	Try to get an action between two GetShardIterator requests .
6696	Checks if the bucket is accessible .
6697	Load an entity store from the current snapshot .
6698	Applies the wildcard expansion handler .
6699	Replaces a string with a new pattern .
6700	Delete all characters from the string .
6701	Adds a report to the report .
6702	Update properties with configuration .
6703	Gets the config properties .
6704	Try to load the wro file .
6705	To post processors .
6706	Compiles the given content .
6707	Reload the cache with new value .
6708	Reloads the model with a new value .
6709	Wrap this request into a HttpServletRequest .
6710	Returns a transformer that transforms a file name to a suffix .
6711	Called when an error occurs .
6712	Sends a redirect to the given location .
6713	Process a resource .
6714	Creates an expansion handler for a resource .
6715	Locates an input stream .
6716	Create the configuration .
6717	Register change listeners .
6718	Process the request .
6719	Set the configuration .
6720	Identify duplicate group names .
6721	Merges the given model into this one .
6722	Locates a URI .
6723	Apply post processors .
6724	Decorates a resource post processor .
6725	Process a resource .
6726	Split options .
6727	Load properties from an input stream .
6728	Parse properties .
6729	Create a custom WroManagerFactory
6730	Persist resource fingerprints of all resources .
6731	Check if the given group is a target group .
6732	Extend the classpath .
6733	Gets the current model resource as a stream .
6734	Initialize the manager factory .
6735	Sets the model transformers .
6736	Compiles a handlebars template .
6737	Process a list of resources .
6738	Process and merge resources .
6739	Run pre - processing in parallel .
6740	Apply pre processors .
6741	Decorates a resource pre - processor .
6742	Persist fallback storage .
6743	Gets all fields of an object .
6744	Rewrite a CSS URL .
6745	Compute the new image location .
6746	Adds a model transformer .
6747	Process processed bundle .
6748	Initialize aggregated folder path .
6749	Extract variables from a variable body
6750	Parse the variables .
6751	Replaces all variables in the string with the given variables .
6752	Wrap a resource post processor .
6753	Checks if the type is eligible for the given type .
6754	Apply gzip on the given resource .
6755	Add a processor to be included in the given processor .
6756	Returns a decorator to exclude a pattern .
6757	Create a ResourceChangeHandler .
6758	Remember the hash of a resource .
6759	Iterate over a CSS import .
6760	Returns null free list .
6761	Checks if the request is minimized .
6762	Find imported resources .
6763	Computes the absolute URL for a resource URI .
6764	Creates a string representation of the given items .
6765	Gets the alias list .
6766	Creates the context .
6767	Evaluates the given reader and closes it .
6768	Evaluates a JavaScript script .
6769	Process the resource bundle .
6770	Determine if the request is a handler request .
6771	Create handler request path .
6772	Rename the input stream .
6773	Computes the destination folder for the given resource type .
6774	Process group .
6775	Check if a group has changed
6776	Locates a resource in the standalone context folder .
6777	Create a new object pool .
6778	Returns stream for given URI .
6779	Opens a JAR file .
6780	Extract the path from the URI .
6781	Check if group extractor is minimized .
6782	Add uri locator .
6783	Decorates a WroModelFactory .
6784	Add a Require .
6785	Process the given content .
6786	Log summary .
6787	Process a resource .
6788	Returns the lock for the given key .
6789	Creates a process from a file .
6790	Parse properties .
6791	Get the task info .
6792	Returns the compilation command
6793	Parses the header .
6794	Add no cache headers .
6795	Gets the path info from a location .
6796	Gets the servlet path from the given location .
6797	Checks if the request URI matches the given path .
6798	Load regexp with key .
6799	Copies the reader to the given writer .
6800	Creates a temporary file .
6801	Clean an image URL .
6802	Sets an attribute .
6803	Generates a URI from an input stream .
6804	Generate data URI .
6805	Set context .
6806	Unregisters this context .
6807	Check for changes in the cache .
6808	Called when an exception occurs .
6809	Check resource change .
6810	Update hash for group
6811	Checks if all of the resources of the given type is of the given type .
6812	Creates a Gobbler process .
6813	Encodes a serializable object .
6814	Process group tags .
6815	Parse a group .
6816	Create a group .
6817	Parse a resource element .
6818	Get the resources for a group .
6819	Log measurements .
6820	Stops a named timer .
6821	Get a timer with the given name .
6822	Gets a timer .
6823	Prints the saturation statistics .
6824	Wake up workers .
6825	Updates the counters of processed jobs .
6826	Updates the counters of the completed jobs .
6827	Updates the counter if it is smaller than the given value .
6828	Visit a rule .
6829	Instertates the given property .
6830	Ensure that the axiom loading is complete .
6831	Restores the saturation phase .
6832	Returns true if the class is inconsistent .
6833	Restores the taxonomy .
6834	Restores the instance taxonomy .
6835	Gets the evailment inference .
6836	Initializes the worker .
6837	Invalidate this reason .
6838	Get the list of individuals to add .
6839	Returns an empty collection of individuals that have been removed .
6840	Creates an exception for an unsupported OWL API reasoner method .
6841	Removes the element at the specified position .
6842	Removes the element at the specified position .
6843	Find the position of the moved element .
6844	Checks if an object contains an object .
6845	Adds an element to the list .
6846	Checks if the index is valid .
6847	Adds the timer .
6848	Add timer timer .
6849	Put a key value into the map .
6850	Remove an entry from the map .
6851	Enlarges the map .
6852	Shrink the map .
6853	Saves the given configuration .
6854	Prints the declarations of a class .
6855	Returns all the direct instance nodes of a given node .
6856	Clears the cache .
6857	Combine a multiset into a single set .
6858	Combine a list of integers .
6859	Copies the contents of the input stream to the output stream .
6860	Gets the reasoner reasoner monitor .
6861	Processes the given taxonomy .
6862	Submit an input to the buffer .
6863	Appends an Ek object to the given appender .
6864	Marks the node as computed .
6865	Adds a direct type - node .
6866	Checks that the chain matches the given start position .
6867	Returns a set of elements that satisfy the given condition .
6868	Creates a new set that contains all elements in the set .
6869	Adds an element to the set .
6870	Removes an object from the set .
6871	Add a counter .
6872	Logs the memory usage .
6873	Sets the configuration options .
6874	Shuts down the reasoner .
6875	Prints the header .
6876	Print values .
6877	Returns a string representation of a character
6878	Add the given counter .
6879	Writes a resource .
6880	Gets the action input parameter .
6881	Get the property descriptor for a given property path .
6882	Gets required parameters .
6883	Checks if the given class is a single value .
6884	Adds the rel parameter .
6885	Sets the type of this link .
6886	Adds the href language parameter .
6887	Adds a revision to the link .
6888	Adds a link parameter .
6889	Expand the affordance with the given arguments .
6890	Returns the list of rels .
6891	Returns the list of revers .
6892	Returns true if all required variables are unsatisfied .
6893	Returns the value as a string .
6894	Checks if the parameter is hidden .
6895	Checks whether the property is included in the annotation .
6896	Returns true if the input annotation has an explicit property include value .
6897	Returns true if this request is required .
6898	Returns the default value .
6899	Returns the name of the request parameter .
6900	Gets the exposed property or name .
6901	Determine the vocabulary for the given bean .
6902	Returns the query string .
6903	Append the form .
6904	Writes an input button .
6905	Append input or select .
6906	Add an affordance builder .
6907	Returns the URI template components .
6908	Returns a URI template component with optional arguments .
6909	Gets the first node with the given name .
6910	Get first node by rel
6911	Returns an iterator over the elements in this node .
6912	Creates a persistent map from the given equator .
6913	Creates a persistent tree map .
6914	Returns an empty tree map .
6915	Returns a sorted set of entries .
6916	Returns the last key in the map .
6917	Creates a Xform provider for the given Iterable .
6918	Perform a fold operation .
6919	Drop until a predicate is satisfied .
6920	Perform a fold operation .
6921	Convert a MapEntry to a Tuple2 .
6922	Perform a match .
6923	Registers an array of classes .
6924	Get the element at the given index .
6925	Append a value to the tail .
6926	Concatenates a list of items .
6927	Creates a new MutableSet containing the specified items .
6928	Create a new mutable list
6929	Create a set from an array of items .
6930	Create a vector from an array of items .
6931	Creates an Xform iterable for the given items .
6932	Returns a new string representation of the specified length .
6933	A string representation of an array .
6934	Construct a LazyRef from a function
6935	Returns the value associated with this producer .
6936	Inserts an item into the array at the specified index .
6937	Creates a copy of the given array .
6938	Suspends the transaction if it is associated with this thread .
6939	This method is called before the transaction is initialized .
6940	Build the components from the deployment .
6941	Validates a directory
6942	Creates the inheritance link .
6943	Copy methods from source class to destination class .
6944	Copies the given methods .
6945	Recursively walk the tree .
6946	Remove an sbb entity with the current class loader .
6947	Returns whether notifications should be enabled or not .
6948	Get the set of resources related to the resource adapter
6949	Installs a service .
6950	Uninstalls a service .
6951	Returns true if the resource adapter is referenced by the given name .
6952	Returns an array of the usage parameters for a given SBB .
6953	Reset all usage parameters .
6954	Returns a list of profiles for the specified profile table .
6955	Get the activity for a profile table .
6956	Retrieves a list of profiles by attribute value .
6957	Display result .
6958	Unfold array .
6959	Fire an event .
6960	Binds a name to the cache .
6961	Unbinds a name .
6962	Looks up a node by name .
6963	Get the name bindings for this node .
6964	Get the highest priority entity for the SbbEntity associated with the current event .
6965	Returns true if this trace level is higher than another trace level .
6966	Extracts the contents of a jar file .
6967	Writes the input stream to the output stream .
6968	Sets an object value .
6969	Attaches an existing SbbEntity to the node .
6970	Detaches the specified SbbEntity from the attached SBB .
6971	Returns true if the sbb entities are attached to this Sbbs node .
6972	Get the names of the sbb entities attached to this Sbbs node .
6973	Attach a timer .
6974	Detaches the specified timer .
6975	Returns true if no timers are attached .
6976	Get the names of the timers attached to this node .
6977	Add a name bound .
6978	Remove a named name .
6979	Returns true if this node has no names bound .
6980	Get the names bound by this node .
6981	Sets the value of a cmp attribute .
6982	Get the cmp attribute value .
6983	Returns a copy of the cmp attributes map .
6984	Initialize MBean NotificationInfo .
6985	Send a usage notification
6986	Download a remote DDU from a remote URL .
6987	Update the names of the components in the repository
6988	Installs a deployable unit
6989	Uninstalls a deployable unit .
6990	Process an uninstalled unit .
6991	Display the status of this unit .
6992	Checks if a log record is logable .
6993	Gets the logger .
6994	Gets the referring components of the given component .
6995	Returns the set of SbbEntityIDs associated with this node .
6996	Get permissions .
6997	Get the css source .
6998	Checks if the specified profile exists in the table .
6999	remove profile profiles
7000	Update the configuration properties
7001	This method is called when the slee container is active
7002	Slee stopping
7003	Activate the resource adapter .
7004	Deactivate this entity
7005	Schedule the end of all activities
7006	Remove this entity .
7007	Returns the ResourceAdaptorInterface for the given resource type .
7008	Called when service is active
7009	Derives an activity handle .
7010	Called when an activity is ended
7011	Update configuration properties .
7012	Verify config properties .
7013	Mark this object as stopping
7014	Called when the resource adapter is inactive
7015	Unconfigure the resource adapter object .
7016	Unconfigures the resource adapter context .
7017	Method to unset the FaultTolerantResourceAdaptor context
7018	Build profile attribute map .
7019	Resume the event context .
7020	Replies the set of activity context handles .
7021	Removes all usage parameters .
7022	Gets the usage MBean for the given parameter set .
7023	Decorates an abstract class
7024	Fire an event .
7025	Fire an event .
7026	Gets the getProfile CMP method .
7027	Gets the usage parameter set .
7028	Gets all abstract methods from a class .
7029	Gets the interface methods from the given interface .
7030	Create the object pool .
7031	Remove the object pool for the profile table
7032	Check if the given notification source is owner of the alarm .
7033	Throws an alarm .
7034	Gets the usage parameter set .
7035	Get the spec descriptor for the event type
7036	Determines whether the given URL accepts the given URL .
7037	Initialize the deployment
7038	Installs the specified deployable unit .
7039	Stop the given deployable unit .
7040	Display the status of the deployment .
7041	Executes after commit actions .
7042	Executes after commit priority actions .
7043	Execute after rollback actions .
7044	Executes before commit actions .
7045	Executes before commit priority actions .
7046	Returns an array of all registered tracer names .
7047	Create a new tracer .
7048	Remove replicated data .
7049	Register all registered components .
7050	Process the usage parameters interface .
7051	Get the object pool for the given service ID .
7052	Create the object pool for the sbb component .
7053	Resume an activity .
7054	Start an activity
7055	End an activity
7056	Checks the validity of a fire event .
7057	Fire an event .
7058	Generates the class for sbbLocal object interface .
7059	Make the getter method name .
7060	Convert the given string to a new object .
7061	Sets the profile table name .
7062	Extracts the message from the result .
7063	Returns true if the given object contains the given object .
7064	Checks if a collection contains all of its children .
7065	Removes all elements from the specified collection .
7066	Returns true if this level is higher than the given level .
7067	Return the value of the current level .
7068	Detach all classes from the class pool
7069	Add a call to the profile .
7070	Get a profile object
7071	Passivate profile object on transaction end
7072	Sets the component ID .
7073	Generates the class of the activity context interface .
7074	generate concrete methods from interface methods
7075	Set data attribute .
7076	Add a name binding .
7077	This method is used to unbind the names of an ActivityContext
7078	Removes a binding from the cache .
7079	Attach a timer to the cache .
7080	Remove all attached timers from the cache .
7081	Attaches an entity to the cache .
7082	Detach a Sbb entity from the cache .
7083	Get a set of sbb entities that are attached to the given set .
7084	End the activity context
7085	Adds a component to the deployment .
7086	Returns a collection of all component IDs that are contained in this component .
7087	Checks if the dependencies are satisfied .
7088	Returns true if this unit has already been deployed .
7089	Gets the install actions related to this component .
7090	Gets the uninstall actions related to this component .
7091	Checks to see if there is a referringDU
7092	Closes the profile table .
7093	Returns the MBean for the profile table name
7094	Change the profile s profile .
7095	This method is called before the field is set
7096	On set field .
7097	Prepares the field of the profile
7098	This method is called after the field has been set .
7099	Before management method invocation .
7100	Invoked after management method invocation .
7101	Recursively delete a path .
7102	Creates the default constructor .
7103	Creates the default usage parameter getter .
7104	Creates the getter method for SbbEntity and setter .
7105	Create the fire event methods .
7106	Method to create the GetSBActivityContextInterface method .
7107	Adds an expression to the list .
7108	Bind a key to the name map .
7109	Binds a name to the specified target .
7110	Decorates the abstract Sbb class .
7111	Invokes the method with the given name and arguments .
7112	Gets the real field name .
7113	Sets the value of the given field .
7114	Gets the value of the field .
7115	Set the profile context
7116	Initialize the profile
7117	Unsets the profile context
7118	Returns the profile local object .
7119	Fires a profile add or updated event if it exists
7120	Gets the profile cmp10 wrapper .
7121	Creates a class with the given name and interfaces .
7122	Creates the inheritance link .
7123	Adds an annotation .
7124	Adds the member values to the annotation .
7125	Get the ActivityContext interface for the given activity object
7126	Get the class pool
7127	Sets the deployable unit .
7128	Undeployed resources .
7129	Suspends an activity .
7130	Check the interfaces of a class or interface
7131	Get all abstract methods for the given interface .
7132	Resolve an entity by its publicId and systemId .
7133	Check that a tracer name is valid
7134	Retrieves a collection of profiles for a specific query .
7135	Checks the dependencies of the slee component .
7136	Create a temporary directory for the deployment .
7137	Gets the entity manager .
7138	Start the SleeContainer
7139	Switch the class loader to the given profile object .
7140	Make a proxy call
7141	Checks the current transaction .
7142	Converts the last access string to a TTL string .
7143	Check if profile is visible
7144	Get the profile object from the current transaction
7145	Returns a list of all logger names matching the regular expression
7146	Reset the logger levels
7147	Clear loggers
7148	Add a logger .
7149	Add socket handler
7150	Remove a handler
7151	Convert tracer name to log4j logger name .
7152	Assigns the log4j level to the root level .
7153	Assigns the log4j level .
7154	Reset the flags .
7155	Send a trace notification .
7156	Checks that a tracer name is valid .
7157	Serialize an object .
7158	Read an object from the stream .
7159	Adds a domain dependency
7160	Returns a list of all URLClassLoaders .
7161	Find class by name .
7162	Finds the resource with the given name .
7163	Find resources locally .
7164	Create a profile MBean
7165	Resume a transaction
7166	Build a set of SbbID objects .
7167	Returns a set of all ResourceAdaptor entity bindings for the given SBB component .
7168	Init slee .
7169	Shutdowns the slee .
7170	Validate state transition .
7171	Generate the usage parameter getter method .
7172	Set field value .
7173	Build a polyjdbc .
7174	Set a field value .
7175	Executes the given transaction .
7176	Creates a new region request instance .
7177	Get the region
7178	Resolves the image dimensions .
7179	Get the on type
7180	Sets the viewing hints .
7181	Adds a new viewing hint .
7182	Sets the renderings for this builder .
7183	Add a renderings to be rendered .
7184	Merge a list of profiles .
7185	Merges this profile into a new one .
7186	Creates a rotation request from a string .
7187	Create a size request from a string .
7188	Initialize the device bridge .
7189	This method is used to generate XML .
7190	Handle pop box
7191	Pushes the handlePopator jar to the device .
7192	Deletes the temp file .
7193	Pull the dump of the device .
7194	Gets the crash log .
7195	Replaces all tabs with the specified width .
7196	Creates a new indent with the specified number of spaces .
7197	Tokenizes the text .
7198	Renders the given text .
7199	Escape special characters within tag attributes .
7200	Adds an exception to the database .
7201	Closes the cache .
7202	Find the parent class name of a type element .
7203	Generate the code for the target class .
7204	Write a bit vector 1 divider .
7205	Appends a bit string to a BitVector .
7206	Reads the first element from the input stream .
7207	Gets a JSON object from a path .
7208	Get list from path
7209	Set the klov report object
7210	Add screen capture .
7211	Set system info .
7212	Creates a Selector that selects the specified property .
7213	Creates a selector that uses the given alias .
7214	Extract validation annotation data .
7215	Find all annotations for a property
7216	Find the annotations of a property .
7217	Get the property descriptor for the given property name .
7218	Lookup object expression .
7219	Deserialize a map from a map .
7220	Creates a new object from a map .
7221	Convert a map of String values to a type .
7222	Converts an object to a map .
7223	Convert object to map .
7224	Get the values for the annotation .
7225	Creates a validator for the given field metadata list .
7226	Looks up a list of ValidatorMetaData objects and initializes them .
7227	Looks up a Validator in the registry .
7228	Apply metadata properties to validator .
7229	If the property is null remove it from the map .
7230	Sets the current time .
7231	Returns the number of entries in the cache .
7232	Hashes the given object .
7233	Returns default options .
7234	Opens a database .
7235	Puts all values in the database .
7236	Removes all keys from the database .
7237	Search for the given start key .
7238	Load by keys .
7239	Closes the database .
7240	Reduces an object to a double array .
7241	Reduces a double array .
7242	Returns the variance of a set of values
7243	Returns the mean of the given values .
7244	Invoke a method from an object .
7245	Reduce by reduceBy
7246	Converts a timestamp to an Euro UTC date .
7247	Returns true if the given object matches the criteria .
7248	Creates a criterion that matches all of the specified values .
7249	Create a Criteria from a List
7250	Create a Criteria from a JSON string
7251	Add an array to the array .
7252	Returns the first element in the array .
7253	Returns the first of the specified list .
7254	Returns the last element of the list
7255	Returns the last items in the list
7256	Returns the least element of the list .
7257	Returns the first element in the list .
7258	Returns the first element of the array
7259	Process array of maps .
7260	Handles a collection of maps .
7261	Creates an object from a map .
7262	Returns the value associated with the given key .
7263	Create a tool tip for a field name .
7264	Generates a label value .
7265	Adds a hex value to the buffer .
7266	Process the read queue .
7267	Process the write queue .
7268	Start the thread
7269	Returns the given character at the given index
7270	Returns a substring of a string
7271	Checks if a string is in a char array
7272	Add character to string
7273	Returns a string containing the given objects .
7274	Compact a string .
7275	Split the given string .
7276	Split a string by space .
7277	Split by pipe .
7278	Converts a char array to a string array .
7279	Converts a string to camel case
7280	Check if start string is within end
7281	Returns a string with upper bar case
7282	Convert number to string .
7283	Create a sort of sorts
7284	Sorts the given list .
7285	Returns a comparator for the given fields .
7286	Returns the child comparators .
7287	Returns true if the given value is contained in the given map .
7288	Checks if two integers are equal .
7289	Checks if two ints are equal .
7290	Computes the sum of an array of values .
7291	Rounds a number to a power of 2 .
7292	Sorts the given list using the specified fields .
7293	Sorts the given list using the specified fields .
7294	Sets the value of a field from a map .
7295	Converts an object to a list .
7296	Create the SQL for loadAll version data .
7297	Copy a list .
7298	Checks if the given object has a String field with the given name .
7299	Checks if class has string field with given name
7300	Checks if a class has a field with the given name
7301	get first comparable or primitive
7302	Gets the sortable field .
7303	Compares this entry .
7304	Compare two cache entry
7305	Sorts a list .
7306	Sorts the given list .
7307	Sorts the given map by the given component type .
7308	Sorts the values of the given map using the given component type .
7309	Sorts the keys in the given map using the given sort by name .
7310	Sorts the specified array by the specified field name .
7311	Returns a comparator for the given field .
7312	Returns a comparator that compares the given values .
7313	Get a value from the cache .
7314	Gets the value for the given key .
7315	Get the order .
7316	Evicts the cache .
7317	Initialize the class if necessary .
7318	Allocate buffer .
7319	Determines if the processing loop should be stopped .
7320	Method to manage the input writer channel .
7321	Queue an empty message if it has already been flushed .
7322	Start monitor .
7323	Start the monitor
7324	Gets the value associated with the given key .
7325	Main query plan .
7326	Performs the filter .
7327	Updates the file timer .
7328	Flush the output stream to disk .
7329	Closes the output stream .
7330	Add the next buffer to the output stream .
7331	Writes the given buffer to disk .
7332	Initialize the output stream
7333	Adds all of the given values to the store .
7334	Convert key to byte array .
7335	Read the metadata for a given property .
7336	Extracts a list of validators from a given string .
7337	Read the meta data for the given class .
7338	Extract the meta data for the given property .
7339	Extract the meta data from a collection of annotations .
7340	Convert annotation data to ValidatorMetaData
7341	Split string .
7342	Split a string by whitespace .
7343	Split a string by delimiters .
7344	Removes all characters from a string .
7345	Split a string by delimiters .
7346	Parse double .
7347	Parse int from buffer .
7348	Parse long .
7349	Get property by path .
7350	Extract fields from an object .
7351	Get the type of a property .
7352	Injects a property value into an object .
7353	Set a property in a property path
7354	Returns the property value for the specified property .
7355	Get the property value .
7356	Get an int value from a root object
7357	Initialize the message keys .
7358	Creates a message .
7359	Creates a message .
7360	Returns the message values for the given key .
7361	Gets the subject .
7362	Parse JSON text .
7363	Sends an HTTP request .
7364	Delete a database .
7365	Creates a database .
7366	Returns a list of UUIDs .
7367	List resources in the classpath .
7368	Triggers a replication operation .
7369	Queries the query for a single result .
7370	Sets whether the request should be descending or not .
7371	Synchronize all design documents in the database .
7372	Retrieves a design document from the database .
7373	Get all design documents from dek .
7374	Retrieves a design document from the designk .
7375	Saves the replicator document .
7376	Find the replicator document .
7377	Find all replicator documents .
7378	Removes the document .
7379	Gets an object with the given id .
7380	Returns a list of documents matching the given JSON query .
7381	Checks if the document exists .
7382	Bulk bulk .
7383	Update an object .
7384	Performs a PUT request .
7385	Performs a POST request .
7386	Execute a DELETE request .
7387	Validates the response .
7388	Sets the entity to the http request .
7389	Adds an attachment .
7390	Returns the changes .
7391	Reads the next row from the stream .
7392	Convert a money to a number .
7393	Shuts down all active locks .
7394	Write data to the output stream .
7395	Add tags to metric
7396	Verify that the temp tables have been created .
7397	Get the project id for a given namespace .
7398	Checks if the request is a query .
7399	Sends the authentication request .
7400	Get the verb for the request .
7401	Generate a subject permission .
7402	Handles a request result .
7403	Handles a request failure .
7404	Initializes the configuration .
7405	Find all scheduled jobs .
7406	Converts a point map into a list .
7407	Sets the response status code and reason phrase .
7408	Fetch all data from bucket .
7409	Returns a new bucket with the specified step .
7410	Send message .
7411	Send message to producer
7412	Send message to producer
7413	Scan a cursor .
7414	Sets the value for the given property .
7415	Adds a file to the archive .
7416	Replaces the file with the given text .
7417	Builds the import configuration .
7418	Generate a single instance of the given component .
7419	Fetch content .
7420	Fetch order content .
7421	Upload transformation .
7422	Generate file generation metrics .
7423	Creates a random file in the given parent directory .
7424	End the object .
7425	Register a model adaptor for the given type .
7426	Register a renderer for the given type .
7427	Prepare a template .
7428	Adds a domain to the assembler .
7429	Sets a property .
7430	Adds a child object .
7431	Creates a new file from a directory .
7432	Copies the contents of the input stream to the output stream .
7433	Parse the given file .
7434	Parse an XML document .
7435	Returns the elements in the given parent .
7436	Returns stream of nodes in parent .
7437	Gets the first child element of the given parent element .
7438	Returns a stream of named elements in the given parent element .
7439	Validate XML .
7440	Main entry point .
7441	Returns the builder as a String .
7442	Creates a builder from a resource .
7443	Processes the given entry using the given function .
7444	Encodes the passed in string .
7445	Set the signature
7446	Removes all whitespace characters from the array .
7447	Sign the request
7448	Set the data associated with the objectKey
7449	Complete the multipart upload .
7450	Sets the notification for the notification .
7451	Sets the notification state .
7452	Returns true if there are expired .
7453	Get notification
7454	Get list of addressees
7455	Get the list of addressees
7456	Get events for notification
7457	Get a specific event
7458	Get the URL for a single notification .
7459	Returns the entry with the given id .
7460	Gets the authentication token .
7461	Returns the number of notifications .
7462	Adds new categories to the list of categories .
7463	Fetches the SSP notification for the given portlet request .
7464	Creates a notification response .
7465	Maps the response to a notification response .
7466	Reads a notification entry from the row .
7467	Attaches the actions to the notification entry .
7468	Normalizes a link .
7469	Gets the notification category .
7470	Returns the default notification source .
7471	Clears the notification .
7472	Read a notification file .
7473	Obtains the student id from the request .
7474	Extracts the user id from the response .
7475	Hides the notification .
7476	Returns a map of all the attributes for this notification .
7477	Normalize a point in a GeoTuple .
7478	Returns true if boxA is contained inside boxB
7479	Finds the closest point in the plane
7480	Returns the sign of a point
7481	Sets the data from a Se3F image .
7482	Sets the euler rotation matrix .
7483	Converts a polygon into a polygon
7484	Converts a polygon into a quadrilateral image .
7485	Computes the bounding rectangle of the quad .
7486	Computes the bounding box of a polygon
7487	Returns the center of the quad .
7488	Computes the average point of a polygon
7489	Computes the convex hull
7490	Removes all vertices at the given tolerance
7491	Returns the average of points on the target .
7492	Computes the area of a polygon
7493	Returns true if the triangle contains a point .
7494	Checks if a triangle contains a triangle .
7495	Computes the intersection of two points .
7496	Computes the intersection of two line segments .
7497	Computes the intersection between two lines
7498	Computes the intersection between two line segments
7499	Computes the intersection between two polygons
7500	Checks if the given ellipse contains the specified ellipse .
7501	Returns the intersection between two rectangles
7502	Gets the element at the specified index .
7503	Converts a matrix to a quaternion .
7504	Sets the rotation matrix .
7505	Sets the rotation of the R matrix .
7506	Rotates the rotation matrix .
7507	Rotates the rotation matrix .
7508	Sets the rotation of the rotation matrix .
7509	Converts an euler to a matrix .
7510	Computes the rotation of the specified axis
7511	Sets the angle of the slope
7512	Creates a twist coordinate from the specified motion
7513	Sets the initial transformations .
7514	Interpolates the translation matrix .
7515	Solves a list of points
7516	Solves a point on the plane
7517	Returns the side length of the side
7518	Checks if a point is inside the polygon
7519	Converts the src into a D matrix .
7520	Converts a DMatrix to a DMatrix3 .
7521	Converts a Parabola into an image .
7522	Converts a Parabola image into another .
7523	Divides a point by v .
7524	Converts a Geo tuple into a matrix .
7525	Converts an input matrix into a GeoTuple3D object .
7526	Sets the parameter vector .
7527	Returns the distance between two angles
7528	Returns true if the line intersects the line .
7529	Checks if a plane is inside a plane .
7530	Checks if a line is intersect .
7531	Interpolates the rotation between two angles .
7532	Extract the quaternion from the quaternion
7533	Computes the hull of a polygon
7534	Sets image to no motion
7535	Converts a homogeneous matrix into a homogeneous matrix .
7536	Converts a homogeneous image into homogeneous matrix .
7537	Creates a vector of XYZ vectors .
7538	Returns true if the two matrices are identical .
7539	Creates a unit vector from the latitude and longitude coordinates .
7540	Calculates the circle s slope between two lines
7541	Returns the squared radius of the circle
7542	Returns the closest point between two points .
7543	Returns the closest point in the line parametric
7544	Returns the location of the closest point in the plane .
7545	Returns the closest point in the line segment
7546	Returns the distance between two points .
7547	Transform a point into a point .
7548	Transforms a point in a set of points
7549	Returns true if the quad is equal to tolerance .
7550	Computes the acute angle between two lines
7551	Converts a line polar to a line parametric2 .
7552	Converts a line general to a line .
7553	Converts a line segment from a line segment .
7554	Converts a line segment into an image .
7555	Converts two points into a line .
7556	Converts a point to a line parametric2 .
7557	Converts a line parametric to a polar 2D line
7558	Converts a line parameteretric from a parametric object .
7559	Creates a line parameteretric from the source line .
7560	Converts a plane to a general plane .
7561	Converts a plane to a plane .
7562	Converts a plane to a plane .
7563	Computes the 3D coordinate of a point .
7564	Converts a plane to a plane .
7565	Returns true if t are identical .
7566	Returns a copy of this vector
7567	Returns the squared norm .
7568	Computes the t value of a point on the line
7569	Checks if there is uncountable .
7570	Returns true if parabola is equal to tolerance .
7571	Compute the center of this point .
7572	Calculates the acute angle between two segments .
7573	Checks to see if the point is in infinite .
7574	Generates a list of points using a random distribution
7575	Converts a point in H to E .
7576	Computes the subtraction of two points .
7577	Checks if two points are identical .
7578	Sets the dimensions of the image .
7579	Converts an ellipse to an ellipse .
7580	Computes the point in the ellipse
7581	Computes the angle of a point in the ellipse
7582	Computes the tangent of the ellipse .
7583	Computes the tangent of a line
7584	Gets the corner at the specified index .
7585	Computes the distance between two lines .
7586	Computes the Euclidean distance between a point and p
7587	Computes the distance between a line segment and a point
7588	Computes the distance between a point and a point .
7589	Calculates the distance between a point .
7590	Returns the Euclidean distance between two segments .
7591	Returns the squared distance between two lines
7592	Returns the Euclidean distance between the quad .
7593	Returns the squared distance from the quad .
7594	Returns the Euclidean distance between poly and p
7595	Computes the squared distance between a point and a line segment .
7596	Returns the origin of the line
7597	Returns the distance between the ellipse and p
7598	Computes the distance between a point in the ellipse
7599	Add a transform to the path .
7600	Computes the closest point in the line segment
7601	Returns the closest point in the ellipse
7602	Computes the polynomial curve
7603	Creates a random vector from the specified range .
7604	Computes the perpendicular vector for a vector .
7605	Checks if two vectors are identical .
7606	Normalizes a vector .
7607	Creates a new matrix from a vector of vectors .
7608	Converts a matrix matrix into a 3D matrix .
7609	Calculates the Euclidean distance between a given point .
7610	Sets the ellipse
7611	Normalizes this quaternion .
7612	Calculate the inner triangle
7613	Calculate the quadrilateral .
7614	Computes the distance between a polygon
7615	Computes the mean value of a list
7616	Orders a list of points in clockwise order
7617	Computes the normal covariance matrix
7618	Checks if the polygon is convex .
7619	Multiply this vector by a scalar .
7620	Returns the maximum value of this quaternion .
7621	Returns the distance between two points .
7622	Returns the squared Euclidean distance from the given point .
7623	Returns a list of points in the plane .
7624	Creates a list of points in the mean
7625	Generates a list of points in the mean
7626	Computes the mean of a list of points
7627	Computes the mean of a list of points
7628	Invalidates all the given credentials .
7629	Invalidates all cached JwtContext objects .
7630	Combines the given collection into a set of strings .
7631	Get all features from the server . xml
7632	Get the configuration dropins features .
7633	Get the features from the server . xml file
7634	Parse an include node .
7635	Parse feature manager node .
7636	Download json files .
7637	Get the set of open liberty features .
7638	Check if the list of features are installed
7639	Checks if target string contains all of the target strings ignoring case .
7640	Gets the next product version .
7641	Extracts the bundle name from the given jar file .
7642	Returns the jar file for the map based kernel .
7643	Checks if the jar is a replacement jar .
7644	Extract version from file name .
7645	Compare two strings
7646	Executes a product info command .
7647	Checks if the given artifact is a Spring - boot - Uber jar file .
7648	Get an arquillian property .
7649	Determines if the file is working in the current environment .
7650	Moves the back to the center .
7651	Compares two objects .
7652	Load integer .
7653	This method is used to create a pizza party .
7654	Verify the TURTO image .
7655	Swap blank cells at target position
7656	Gets the distance to the goal .
7657	Prints a formatted string to the output stream .
7658	Prints a formatted string to the output stream .
7659	Makes a fishy decision .
7660	Prints a variable .
7661	Returns a uniform uniform number of values
7662	Returns a uniform uniform uniform value .
7663	Returns the probability of a poisson distribution .
7664	Returns the index of the given double array .
7665	Prints a random distribution .
7666	Capitalize first character .
7667	UnCapitalize first character .
7668	Fix a path .
7669	Convert CriteriaJoin to String
7670	Returns token sentence string .
7671	Sets the authentication token .
7672	Extract token auth token from cookie list
7673	Registers a Jersey environment .
7674	Get all permissions for a role .
7675	Add a projection to the list
7676	Convert JobInfo to JobDetail .
7677	Converts a trigger to a trigger .
7678	Set the count interval values for the given trigger info
7679	Set the start end and end time .
7680	Send mail to queue
7681	Writes the buffered data to the output stream .
7682	Initialize the scheduler .
7683	Get all fields in the given class .
7684	Gets the field map .
7685	Converts an exception to a response .
7686	Configure token based authentication configuration .
7687	Generate attributes hash .
7688	Generate token string .
7689	Send mail message .
7690	Generate strong password .
7691	Change the password of a user .
7692	Get user by name .
7693	Hash password .
7694	Verifies that the account name is a valid account name .
7695	Verifies the strength of the given user .
7696	Provide the search model .
7697	Commits a new transaction .
7698	Rolls an error .
7699	Starts the transaction .
7700	Configure field by name .
7701	Check if the service is authorized by the given token .
7702	Parses the given object as a date .
7703	Returns the response .
7704	Create an equals restriction .
7705	Create a non - equals constraint .
7706	Create a less than constraint .
7707	Create a less than or equal to the specified value .
7708	Create a greater than constraint .
7709	Create a greater than or equal to the specified value .
7710	Creates a restriction that contains the specified value .
7711	Creates an IN restriction .
7712	Creates a new representation manager .
7713	Returns a resource representation with the given content .
7714	Adds a rel to this resource .
7715	Returns a new resource representation with the new value .
7716	Returns a resource with the given namespace .
7717	Check if the input can be decoded .
7718	Encodes a string into a byte array .
7719	Checks if two readers are equal .
7720	Moves a file to another .
7721	Creates a new file if it exists .
7722	Gets the basename of a file .
7723	Adds padding .
7724	Returns the fully qualified name of a class .
7725	Returns all super types of the given class .
7726	Verifies the given password against the given password .
7727	Read a string from the system .
7728	Append a byte to the buffer .
7729	Append bytes to the buffer .
7730	Creates a copy of an array .
7731	Returns a new fraction of this fraction .
7732	Returns a new fraction minus this fraction .
7733	Returns a new fraction of this fraction .
7734	Returns a new fraction of this fraction .
7735	Returns the maximum of the given values .
7736	Returns the minimum of the given values .
7737	Throws an IllegalArgumentException if the given condition is true .
7738	Fetches the location forecast .
7739	Fetches the sun set content .
7740	Fetches the sunrise data .
7741	Find point forecasts from now .
7742	Find the nearest forecast .
7743	Fetches the forecast data .
7744	Get long term forecast
7745	Creates long termForecast .
7746	Create a Location object from a string
7747	Fetches the available data .
7748	Create the name of the wind symbol .
7749	Find beaufort level .
7750	Creates a URI from the given URI string .
7751	Returns true if the given date is a sun .
7752	Get point forecast by time .
7753	Returns the best forecasts for the given date and time values
7754	Fetches theWeather data for a given longitude and latitude
7755	Get the meteo data .
7756	Performs a database update .
7757	Invoke a string method .
7758	Acquires an object from the source .
7759	Gets the referenced object .
7760	Creates a reference to the wrapped object .
7761	Returns the configuration object for the given class .
7762	Returns whether the given bootstrap configuration is enabled or not .
7763	Creates an iterator for the given service .
7764	Retrieves a decoder from the given bootstrap configuration .
7765	Get all services for the given interface .
7766	Gets the instance of the given interface .
7767	Acquires an input stream .
7768	Returns the size of the data source .
7769	Wrap data .
7770	Gets the component at the given index .
7771	Returns a new name with the specified upper index .
7772	Returns true if the compiler should be rendered .
7773	Initializes the regex .
7774	Performs the search loop .
7775	Adds a subexpression to the match list .
7776	Combines a subexpression .
7777	Combines a subexpression .
7778	Clones the out chain .
7779	Given a subre tree return the optre .
7780	Mark a subre .
7781	Optimize nfa node .
7782	Parse a pattern .
7783	Drains a state .
7784	generate a non - word
7785	Match word .
7786	Reads the reference number .
7787	Matches a bracket
7788	scan a plain string .
7789	Add a new lacon .
7790	Matches one character .
7791	Performs a vector .
7792	Get a color .
7793	Generate a new color .
7794	Handle a range of characters .
7795	Change the color chain .
7796	Set a color chain
7797	Set a color chain .
7798	Dump the colors .
7799	Start the next token .
7800	Parse the regex .
7801	Nest the pattern .
7802	Get a color .
7803	Initialize state sets .
7804	Returns the last seen state set .
7805	Returns a set containing the UnicodeSet of the given character .
7806	Returns a UnicodeSet object .
7807	Sorts carcs .
7808	Return a string representation of this opcode .
7809	Set state .
7810	Frees an arc from old state .
7811	Free an arc .
7812	Update in chain .
7813	Update out chains .
7814	Free arc .
7815	Reset state .
7816	Add an arc .
7817	Traverse out chain .
7818	Set the pseudo color color .
7819	Dump nfa .
7820	Log a state .
7821	Prints the arcs of a state .
7822	Generate aumprarcs .
7823	Append ar part .
7824	Analyze the regular expression .
7825	Return the flags if any .
7826	Compares two Arcs
7827	Mark all reachable states .
7828	Mark a state as reachable .
7829	Try to reach a state .
7830	Find empties .
7831	Free an empty arc .
7832	Gets the rule parameters .
7833	Gets rule interpreter plugins .
7834	Gets the report plugins .
7835	Get the rule selection .
7836	Runs the task .
7837	Gets the error message .
7838	Gather the standard options .
7839	Gather the options from the task factory .
7840	Gather task names .
7841	Interprets the command line .
7842	Parses the command line .
7843	Executes the given task .
7844	Read properties .
7845	Prints usage information .
7846	Gets the home directory .
7847	Creates a plugin class loader .
7848	Get the ids of all cells in the bounding box
7849	Get all ids that are intersecting .
7850	Get the URI for the specified method .
7851	Add a route to this router
7852	Returns the number of routes .
7853	Add a route to the first route .
7854	Add a route to this router
7855	Add a route to the last route .
7856	Returns true if any of the matched tokens are matched .
7857	Convenience method to create a constraint for equality .
7858	Gets the file name .
7859	Compare two folders .
7860	Compare two entries .
7861	Compare two bookmarks .
7862	Set the last modified time .
7863	Returns the list of all the dependants .
7864	Load a class by name .
7865	Parse Authorization header .
7866	Get an instance of the protected function mapper .
7867	Map a method .
7868	Get a mapping for a method .
7869	Resolve a function .
7870	Sets the values of this object .
7871	Resolves a variable by name .
7872	Parse a tag file .
7873	Parse the contents of a file .
7874	Parse tag file directives .
7875	Do the parse .
7876	Create the compiler .
7877	Gets a resource as a stream .
7878	Calculates the last modification timestamp .
7879	Find all class loaders .
7880	Check if this classloader is a parent .
7881	Start loading .
7882	Read the stream header .
7883	Paginate data set .
7884	Parses the given string into a MetaKey object .
7885	Fill the RPM dependencies .
7886	Returns the tag info for the given short name .
7887	Parse an implicit TLD file .
7888	Returns the checksum for the given file name .
7889	Get the size of a file .
7890	Validates the channel name .
7891	Seeks to the given block number .
7892	Locates the block at the given position .
7893	Fetches Maven artifact information from the given collection .
7894	Updates the state of the current option .
7895	Calculates the price of one byte .
7896	Calculates the price for the longest rep price .
7897	Calculates the price of the normal match .
7898	Throw an expected byte exception .
7899	Thrown when a byte is invalid .
7900	Scans the TLDs .
7901	Scan a tag library descriptor .
7902	Add a new JspServletWrapper .
7903	Returns the parent class loader .
7904	Sets the bytecode .
7905	Returns the bytecode birth time for the given name .
7906	Saves the bytecode of the given class .
7907	Check if the cache has been compiled .
7908	Initializes the class path .
7909	Starts the background thread .
7910	Stop the thread .
7911	Run this method .
7912	Find channels by name
7913	Returns the channel instance .
7914	Update the deploy group cache .
7915	Returns a list of deploy groups .
7916	Copies the contents of the input stream to the output stream .
7917	Parse a Jasper parser .
7918	Parse the Jasper attributes .
7919	Parse quoted string .
7920	Adds an include directive .
7921	Parse the attribute and body .
7922	Adds an attribute .
7923	Adds a child node .
7924	Returns an iterator of all attributes .
7925	Find all children .
7926	Find all children with the given name .
7927	Returns the Maven coordinates .
7928	Returns the variable name for the given variable name .
7929	Set thread .
7930	Unregisters thread .
7931	Find a PrintStream .
7932	Write optional value .
7933	Writes a string to a writer .
7934	Adds an element to the parent element .
7935	Adds an element to the parent .
7936	Writes this stream to the given writer .
7937	Sets the writer .
7938	Allocates buffer .
7939	Converts a JS page to a static declaration .
7940	Get the current state with the given key .
7941	Registers a new model registration .
7942	Stream an input stream to the data path
7943	Display the monitor of a job .
7944	Checks if the channel is authenticated .
7945	Finish the output stream .
7946	Create a Gson instance .
7947	Encodes the symbol for LZMA2 .
7948	Returns an unmodifiable union of the provided meta keys .
7949	Gets the error .
7950	Check checksum extension .
7951	Completes the output stream .
7952	Get the exception .
7953	Evaluate an expression
7954	Creates a prefix from the OSGi properties .
7955	Check if the path is an XML file .
7956	Parse the tag file directives in the tag library .
7957	Load a tag file .
7958	Remove proto type files .
7959	Main entry point .
7960	Set the URI root .
7961	Scan all files in the given directory .
7962	Locates the URI root of the given file .
7963	Initializes the system class loader .
7964	Moves the position of the lz file .
7965	Reads the next character from the string .
7966	Checks if the given string matches the given string .
7967	Consumes the next character until it matches .
7968	Find the next character from the cursor and return it .
7969	Skips characters until the ETag is found .
7970	Reads the next token from the input stream .
7971	Pop the current file .
7972	Makes a copy of this object as unclassified .
7973	Filters the AspectInformation with the given predicate .
7974	Get the missing ids for this factory .
7975	Sets the schema resource prefix .
7976	Sets the DTD resource prefix .
7977	URL - encode a prefix
7978	Converts a node into a tree .
7979	Merge errors .
7980	Initialize the binder .
7981	Scans a channel aspect factory .
7982	Unqualifies a path .
7983	Invokes a custom tag .
7984	Get a byte array from the cache .
7985	Returns an int array containing the specified size .
7986	Converts a collection of artifacts to a AetherResult .
7987	Gets the resource as a stream .
7988	Validate tag library .
7989	Push an input stream .
7990	Get the encoding of a jar file .
7991	Scans an XML declaration .
7992	Report a fatal error .
7993	Get the real path of the resource
7994	Get a resource from the URL .
7995	Gets the resource as a stream .
7996	Get the paths of a resource .
7997	Log a message .
7998	Adds a filter .
7999	Returns the size of the buffer size .
8000	Returns the memory usage for the given fingerprint .
8001	Sets the preset dictionary .
8002	Moves the window to the right position .
8003	Fills the given input array into the dictionary .
8004	Process pending bytes .
8005	Get the length of the buffer
8006	Get the length of the buffer
8007	Verifies that the matches match .
8008	Returns the number of available bytes .
8009	Flushes the output stream .
8010	Flushes the buffer .
8011	Clears the buffer .
8012	Flushes the response .
8013	Closes this response .
8014	Writes a string to the output stream .
8015	Allocate a char buffer .
8016	Throw an error .
8017	Returns the key for the given meta key .
8018	Generate the java class .
8019	Compiles the JSP page .
8020	Delete generated files .
8021	Initialize the java compiler .
8022	Returns true if the given path contains the system jar .
8023	Quote a character .
8024	Generates the declarations for the translation unit .
8025	Compiles the list of tag handlers for the given page .
8026	Generate XML prolog .
8027	Generate common postamble .
8028	Generate postamble .
8029	Generate the Jasper page .
8030	Generate the attributes for the tag .
8031	Read properties .
8032	Export a channel .
8033	Validate XML view .
8034	Returns a new tag handler instance .
8035	Parse an EL expression .
8036	Determines if two property groups match .
8037	Determines if the given URI is a JSP page .
8038	Prints a comment .
8039	Print a string .
8040	Print a string .
8041	Prints a single line .
8042	Returns the expression in XML .
8043	Check that the scope is valid
8044	Escape a string .
8045	Validate the given expressions .
8046	Returns the class name of the tag handler .
8047	Converts a path to a java package name .
8048	Split a path into a string .
8049	Make a valid Java identifier .
8050	Mangles a character .
8051	Checks if the given key is a Java keyword .
8052	Adds a property to the given map .
8053	Returns modifier .
8054	Get a set of metadata from a metadata map .
8055	Update users .
8056	Returns the basename of the given name .
8057	Puts a value into the cache .
8058	Load data from the database .
8059	Build the metrics collection
8060	Resolve a number .
8061	Write object to output stream .
8062	Get the TTL for the given rollup type
8063	Create prepared statements .
8064	Track delayed metrics
8065	Track delayed metrics
8066	Read a versioned double or long .
8067	Write a versioned double or long .
8068	Get all properties .
8069	Creates the container .
8070	Get slot eligible for rollup .
8071	Remove the slot from running slots .
8072	Adds a callback to the event .
8073	Add a listener to be called when the event is already registered .
8074	Unregister an event .
8075	Emit an event .
8076	Returns the listeners for the given event .
8077	Get the name of the remote file
8078	Appends a rollup event .
8079	Returns the timestamp of the file .
8080	Starts the server .
8081	Returns the rollup for the given type .
8082	Creates an IOContainer from the configuration .
8083	Adds a TTL value to the TTL map .
8084	Compute maximum lengths .
8085	Formats the header with gaps .
8086	Formats the outputs of the given outputs into a string array .
8087	Register metrics .
8088	Sets the pool name .
8089	Adds a metric index .
8090	Get complete metric names .
8091	Get tokens .
8092	Puts the datast up to the datastandra server .
8093	Returns a granularity for the specified points .
8094	Returns the granularity of the requested duration .
8095	Sets the server time .
8096	Get the list of unique hosts .
8097	Returns the maximum number of connections per host .
8098	Returns an iterable of the metric column families .
8099	Insert metrics into the database .
8100	Insert metrics .
8101	Returns a set of locators for this slot .
8102	Fetch the metric names from Elasticsearch query
8103	Gets the regex for the given query string .
8104	Starts the uploader .
8105	Stops the uploader .
8106	Returns true if locator is currently in batch layer .
8107	Returns true if locator is currently in the discovery layer .
8108	Checks if the specified locator is currently in the token discovery layer .
8109	Returns true if the specified locator exists for the given slot .
8110	Set a new locator for the given slot .
8111	Map a range of intervals to a finer range .
8112	Returns an iterable of ranges for the given granularity .
8113	Insert metrics into the keyspace .
8114	Insert metrics .
8115	Checks if the given metric is delayed .
8116	Get the bound statement for the given metric .
8117	Gets metadata values .
8118	Returns a serializer for the given type .
8119	Checks if the Content - Type header is valid
8120	Check if the accept header is valid
8121	Bulk insert discovery .
8122	Returns true if all metrics are present .
8123	Do the check .
8124	Returns a new extractor instance .
8125	Check if the OS name prefix matches the prefix .
8126	Starts the download process .
8127	Stops the rabbitMq process .
8128	Returns default parameters .
8129	Add the list of ICE servers .
8130	Add the ICEServer to the peer .
8131	 transmit a message
8132	Send a message to all peers .
8133	Gets the value of the weitereAdse property .
8134	Gets the value of the userDefinedField property .
8135	Gets the value of the userDefinedField property .
8136	Sets the value of the APIFindingElement property .
8137	Gets the value of the multimediaAhang property .
8138	Gets the value of the statusVBM property .
8139	Gets the value of the statusType property .
8140	Gets the value of the statusType property .
8141	Gets the value of the importmodus property .
8142	Gets the value of the adressdruckuck property .
8143	Gets the value of the waehrung property .
8144	Gets the value of the bodenbelag property .
8145	Sets the value of the region property .
8146	Sets the area property .
8147	Sets the value of the address property .
8148	Sets the value of the description property .
8149	Sets the value of the RentalPeriod property .
8150	Sets the value of the furnishedAd property .
8151	Sets the value of the phone1 property .
8152	Sets the value of the phone2 property .
8153	Sets the value of the contactName property .
8154	Sets the value of the phoneInfo property .
8155	Sets the value of the mainEmail property .
8156	Sets the value of the ccEmail property .
8157	Sets the value of the externalId property .
8158	Sets the agentId property .
8159	Sets the value of the epart property .
8160	Sets the value of the jahrgang parameter .
8161	Sets the value of the gebaeudeart property .
8162	Sets the value of the BueroProp property .
8163	Check if the value is numeric .
8164	Sets the value of the gebiete property .
8165	Sets the value of the gruppe property .
8166	Sets the value of the agent property .
8167	Gets the value of the property property .
8168	Sets the value of the Verkaufstatus property .
8169	Gets the value of the userDefinedExtend property .
8170	Sets the value of the zeiteinheit property .
8171	Gets the value of the zimmer property .
8172	Gets the value of the haus property .
8173	Gets the value of the BueroPraxen property .
8174	Gets the value of the gastwerbe property .
8175	Gets the value of the landUndirtschaft event .
8176	Gets the value of the Sonstige property .
8177	Gets the value of the zinshausRenditeobjectekt .
8178	Gets the value of the terrain property .
8179	Sets the value of the umfangung property .
8180	Sets the value of the wohnungtype property .
8181	Get the ISO 2 code for a given country .
8182	Get country 2 code from ISO 3 code .
8183	Returns the ISO 3 code for a given country .
8184	Get the country code from ISO 2 code .
8185	Gets the country name .
8186	Translate a country name .
8187	Gets the value of theaneter property .
8188	Sets the value of the category property .
8189	Gets the value of the pdf property .
8190	Sets the value of the AktionArt property .
8191	Sets the value of the realestateitems property .
8192	Sets the value of the pacht property .
8193	Downgrades the document to the previous version .
8194	Upgrade from previous version .
8195	Gets the value of the content property .
8196	Get the names of the field names .
8197	Sets the value of the blick property .
8198	Sets the value of the pausalmalmiete .
8199	Sets the value of the monatsmiete property .
8200	Gets the value of the parkplatz property .
8201	Sets the value of the lastenauzuge property .
8202	Sets the value of the zustand art property .
8203	Gets the value of the feld property .
8204	Handle validation event .
8205	Dumps this record to the specified writer .
8206	Get the value at the specified position .
8207	Generate a list of strings .
8208	Set the value at the given position .
8209	Sets the value of the check property .
8210	Sets the value of the haustyp property .
8211	Gets the value of the energiepass property .
8212	Sets the value of the kellerter property .
8213	Sets the value of the grundstType property .
8214	Sets the value of the geschl tag attribute .
8215	Sets the value of the hallenType property .
8216	Gets the value of the wiederholungsterminion property .
8217	Gets the value of the teilgsversteigerungungungungungue .
8218	Upgrades the document from the previous version .
8219	Gets the value of the bevorzugt property .
8220	Gets the value of the wunschent property .
8221	Sets the value of the art property .
8222	Sets the modus value .
8223	Gets the value of the emailOnstige property .
8224	Gets the value of the telonstige property .
8225	Sets the value of the hinzelhandelType property .
8226	Downgrades the document to the previous version .
8227	Sets the value of the APIFinding1 property .
8228	Sets the value of the APISuchfeld2 property .
8229	Sets the value of the APIFinding3 property .
8230	Gets the value of the row property .
8231	Sets the value of the distport property .
8232	Gets the value of theanhang property .
8233	Gets the value of the objectekt KaragtRule2 .
8234	Gets the value of the value of the objektzustkey .
8235	Gets the value of the HaCategoryType property .
8236	Gets the value of the Ausstatqualitaet property .
8237	Gets the value of the vermarktungsart property .
8238	Gets the value of the Interessent property .
8239	Sets the value of the werten property .
8240	Sets the value of the ackerland property .
8241	Sets the value of the bauerwungland property .
8242	Sets the value of the bootstade property .
8243	Sets the value of the buero element .
8244	Sets the value of the camping property .
8245	Sets the value of the doppelhaus property .
8246	Sets the value of the einfamilamilianhaus property .
8247	Sets the value of the einhandel gross property .
8248	Sets the value of the eelhandel key .
8249	Sets the value of the garagen property .
8250	Sets the value of the garten property .
8251	Sets the value of the gstronomie property .
8252	Sets the value of the gewerbe property .
8253	Sets the value of the hotel property .
8254	Sets the value of the industrie property .
8255	Sets the value of the keebauung property .
8256	Sets the value of the kleingewerewerewerbe property .
8257	Sets the value of the lager element .
8258	Sets the value of the mehrfamilienhaus property .
8259	Sets the value of the obstpflanzung property .
8260	Sets the value of the parkhaus property .
8261	Sets the value of the produktion property .
8262	Sets the value of the reihenhaus property .
8263	Sets the value of the stellplaetzezezeze property .
8264	Sets the value of the villa property .
8265	Sets the value of the wald property .
8266	Sets the arbieter property .
8267	Gets the value of the wohnung property .
8268	Gets the value of the grundueck property .
8269	Gets the value of the einzelhandel property .
8270	Gets the value of the hallenLager product property .
8271	Gets the value of the parken property .
8272	Gets the value of the freewimmobilies property .
8273	Gets the value of the objektartz property .
8274	Gets the value of the stellplatzart property .
8275	Sets the value of the maxDauer property .
8276	Gets the value of the feature property .
8277	Sets the value of the zimmertyp property .
8278	Upgrades the XML document from the previous version .
8279	Sets the value of the keineAngabe property .
8280	Sets the value of the erdwerme property .
8281	Sets the value of the solarizung property .
8282	Sets the value of the pelleizung property .
8283	Sets the value of the gas property .
8284	Sets the value of the oel property .
8285	Sets the value of the fernwaerme property .
8286	Sets the value of the strom property .
8287	Sets the value of the kohle property .
8288	Generates a random string .
8289	Generates random letters .
8290	Generates a random numeric string .
8291	Gets the value of the WohnUnhnungK .
8292	Sets the value of the benutZER property .
8293	Sets the value of the objectekte property .
8294	Gets the value of the feed property .
8295	Sets the value of the moebert property .
8296	Gets the value of the serviceleistungen property .
8297	Sets the value of the subistrativeArea property .
8298	Sets the value of the city property .
8299	Sets the locality value .
8300	Downgrades the document to the previous version .
8301	Upgrades the XML document from the previous version .
8302	Sets the value of the landUnders property .
8303	Gets the value of the field property .
8304	Upgrades the document from the previous version .
8305	Gets the value of the ad property .
8306	Sets the value of the gastgewType property .
8307	Sets the value of the platzart property .
8308	Gets the value of the datenabelungung property .
8309	Gets the value of the klimaanaanage property .
8310	Gets the value of the image property .
8311	Sets the value of the priceType property .
8312	Sets the value of the new development availability property .
8313	Sets the value of the directions property .
8314	Sets the value of the co2Rating property .
8315	Sets the value of the energy rating property .
8316	Sets the value of the viewingDetails property .
8317	Sets the value of the propertyStatus property .
8318	Sets the value of the pictures property .
8319	Sets the value of the bbaubar attribute .
8320	Upgrade the document from the previous version .
8321	Sets the value of the ParkenType property .
8322	Sets the value of the alterAttribute property .
8323	Sets the freizeitType value for this Driver .
8324	Sets the value of the telefonart property .
8325	Sets the value of the emailart property .
8326	Sets the value of the overseasSales property .
8327	Sets the value of the overseal property .
8328	Creates a new simplefield node .
8329	Gets the value of the fehler property .
8330	Sets the value of the erbpaektft property .
8331	Gets the value of the stipige property .
8332	Gets the valueList property .
8333	Sets the minimum dauer value .
8334	Sets the value of the zinsType property .
8335	Gets the value of the photo property .
8336	Sets the value of the metadata property .
8337	Sets the value of the projects property .
8338	Sets the property value for this Feed .
8339	Downgrades the document to the previous version .
8340	Updates the version of the KyeroDocument .
8341	Gets the value of the immobilie property .
8342	Gets the value of the objekt property .
8343	Gets the value of the fehlerliste property .
8344	Gets the value of the status property .
8345	Sets the value of the SonstigeType property .
8346	Sets the value of the distanz value .
8347	Gets the value of the distanzenzen property .
8348	Gets the value of the distanzenSport property .
8349	Checks if the given exception is compatible with the given exception type .
8350	Sets the bindings .
8351	Bind a prefix to a namespace .
8352	Remove a binding .
8353	Returns true if the given content has an open tag .
8354	Consumes the tokens of a comment .
8355	Consumes a comment .
8356	Find the index of a comment .
8357	Initialize logging .
8358	Start prefix mapping .
8359	Adds an iterator to the composite iterator .
8360	Add an option .
8361	Adds a string option .
8362	Adds an integer option .
8363	Add a long - form option .
8364	Adds a double option .
8365	Adds a boolean option .
8366	Parse the command line arguments .
8367	Returns an instance of the given class .
8368	Called after access .
8369	Sets the target object .
8370	Prepare the class .
8371	Find the matching method .
8372	Converts an integer value to an unsigned string .
8373	Serializes an object to a byte array .
8374	Deserializes a byte array .
8375	Get a child element by name
8376	Get the value of the child element with the given name .
8377	Get the child elements of the given element .
8378	Check if the node name matches the desired name .
8379	Check if the node name matches the desired names .
8380	Set size .
8381	Monitor a handle .
8382	Add a new release listener .
8383	Returns true if the reference monitor thread is alive .
8384	Calculates the mobile country
8385	Start a prefix mapping .
8386	End a prefix mapping .
8387	Adds a new callback .
8388	Parse the jar file .
8389	Get the text color of a specific item
8390	Sets the given values .
8391	Get the color of the item
8392	Set the text size .
8393	Gets the X coordinate of the item .
8394	Gets the intro .
8395	Get the names of the keywords available in the test library .
8396	Get arguments for a keyword .
8397	Get documentation for a keyword .
8398	Starts a remote server .
8399	Stop the server
8400	Starts the remote server .
8401	Convert properties from a file to JSON format .
8402	Convert properties from a file to JSON .
8403	Converts input stream to JSON .
8404	Converts properties into JSON .
8405	Converts a map of properties to JSON .
8406	Converts a map of properties to JSON .
8407	Converts a map of properties into a Map of Object
8408	Convert properties to JSON .
8409	Get the radius of the shadow .
8410	Create a new OcspFetcher .
8411	Find an intermediate certificate .
8412	Executes the given directory .
8413	Process markdown files in the given directory .
8414	Substitute variables in a pattern string .
8415	Get the title for a list of text .
8416	Adds the title to the HTML file .
8417	Replace variables in the given content .
8418	Update relative paths in HTML .
8419	Copies all files from one directory to another .
8420	Check the path .
8421	helper method to wrap a slider content
8422	Fade up the size of the view up .
8423	Fade down the container
8424	Calculates the percentage of the specified width .
8425	Check if the views overlap
8426	Gets the launch intent .
8427	Launch an activity
8428	Get list of DTO list
8429	Get fact sheet list
8430	Download file from response .
8431	Build http client .
8432	Create access control entity
8433	Update data model
8434	Create full export
8435	Get list of export files
8436	Set the token provider host .
8437	Sets the client credentials .
8438	Process graphQL request
8439	Get bookmark list .
8440	Merge the given graph s permissions .
8441	Writes the given graph permissions .
8442	Add rulesets .
8443	Closes the client .
8444	Execute a select .
8445	create dataset graph
8446	Limit the number of threads per process .
8447	Resample the geometry
8448	Update the command
8449	Set the gravity value
8450	Removes all profiles from the server .
8451	Set the font for this text .
8452	Adds an image to the image .
8453	Adds an image to the command .
8454	Parses the arguments of the given object .
8455	Prints usage information about target object .
8456	Extract a TimeUnit from a string
8457	Parses the target object .
8458	Executes a slide .
8459	Executes the slide .
8460	Interprets a PPTX file .
8461	Sort a list of rectangles by size .
8462	Renders the given template .
8463	Gets the relationships for a slide .
8464	Returns true if the given mouse event is within the screen .
8465	Excludes the given slide with the given element vertically .
8466	Execute an outbound operation .
8467	Execute an outbound operation .
8468	Resolves a resource by name .
8469	Get a temporary directory
8470	Returns a new log value .
8471	Log a message at the TRACE level .
8472	Log a trace event .
8473	Log a message at DEBUG level .
8474	Log a debug event .
8475	Log a message at INFO level .
8476	Log an INFO event .
8477	Logs an info message .
8478	Log a message with a WARN level .
8479	Log a WARN event .
8480	Log an error message .
8481	Log an error .
8482	Add a context line and method to the log .
8483	Write steno event .
8484	Writes the keys and values to the JSONGenerator .
8485	Serialize a throwable .
8486	Returns a log value .
8487	Get the caller data .
8488	Encodes the given value to the given encoder .
8489	Create a database .
8490	Check if mapping exists .
8491	Parse save attribute .
8492	Save data in context .
8493	Refresh the sheet row .
8494	Parse the save attribute string .
8495	Gets the save attribute list from a row .
8496	Get save attributes from column name .
8497	Sets the save objects in the hidden column .
8498	Sets save attributes for a sheet .
8499	Sets the save attributes for a row .
8500	Prepare the context and attributes for a cell
8501	Formats a number .
8502	Put shift attributes .
8503	Set the Workbook
8504	Get the wb wrapper .
8505	Returns the formula evaluator .
8506	Calculate max col counts .
8507	Load web sheet .
8508	Load the web sheet .
8509	Load work sheet by name
8510	Create the export file .
8511	Handle save .
8512	Handle submit .
8513	Populate component .
8514	Gets the current sheet configuration .
8515	Read object from serial workbook .
8516	Get the locale for the component .
8517	Gets the picture .
8518	Gets the cell helper .
8519	Gets the PicturesHelper .
8520	Gets the validation handler .
8521	Get the chart helper .
8522	Convert shared formulas .
8523	Convert a ptg object to an array of ptg .
8524	get ptg for watch list
8525	Get a new ptg .
8526	Gets the serial row list .
8527	Assemble the serial row list from the rows mapping .
8528	Fixup the ref - relative row and row relative .
8529	Build a dynamic row for a RefPtgBase object
8530	Build a dynamic row for an area pg .
8531	Get the background color .
8532	Get the color from the sppr .
8533	Determine the automatic fill color .
8534	Get XColor from scheme color .
8535	Convert RGB color to XColor
8536	Get the XColor with an automatic fill .
8537	Convert an XssfColor to a color .
8538	Get triplet from Xssf color .
8539	Gets the background color from a cell .
8540	Find the name of a component .
8541	Populates the attributes for the given component
8542	Match attribute method .
8543	Set property on object
8544	Gets the value of the property on an object .
8545	Setup control attributes .
8546	Find cell validate attributes .
8547	Sets up the picture charts for a cell .
8548	Set the chart id for the cell
8549	Set the picture picture of a cell .
8550	Initialize the chart map .
8551	Get the title of a pie chart .
8552	Set the style for a series .
8553	Create a pie chart
8554	Setup bar style .
8555	Initializes the chart map .
8556	Gets the chart id from the parent chart .
8557	Initialize the anchor map map .
8558	Generate a single chart .
8559	Transforms a collection expression into a Collection object .
8560	Gets the full name from a row .
8561	Rebuild the upper - level formula .
8562	Setup upper level for a cell .
8563	Build cell formula for shifted rows .
8564	Get rows mapping by full name .
8565	Change index number in change map
8566	Update the upper - level final length of the given full name .
8567	Change index number in the hidden column
8568	Sets the full name in the hidden column .
8569	Get the original row number in the hidden column .
8570	Sets the original row number in the hidden column .
8571	Find parent rows mapping from shift map .
8572	Find child rows mapping from shift map
8573	Find an item in a collection .
8574	Builds the current configuration range .
8575	Checks if a config range is static .
8576	Checks if a config range is static .
8577	Replace expression with cell address
8578	Get the index of all merged regions
8579	Get the list of skipped region cells .
8580	Add skip cell list to list .
8581	Build the comment from a sheet .
8582	Builds the cell comment from the alias list .
8583	Build the sheet configuration .
8584	Gets the sheet configuration .
8585	Build form command from sheet configuration .
8586	Verify the last cell in the row .
8587	Build a sheet .
8588	Check if last row has been inserted .
8589	Build command list from sheet comments .
8590	Set the parent command for a command
8591	Checks if the given command type has each command
8592	Add command to a sheet command .
8593	Copy template for tie commands .
8594	Build the command list .
8595	Process method line .
8596	Process a command line .
8597	Move comment to new map .
8598	Create a config command .
8599	Build attribute map .
8600	Extracts the sheet configuration from a sheet .
8601	Set the footer of sheet configuration .
8602	Set body of sheet configuration .
8603	Set header of sheet configuration .
8604	Delete row .
8605	Remove ranges from shift map .
8606	Find remove full name list .
8607	Get the Each command from a variable name .
8608	Insert empty object in data context .
8609	Delete object from list .
8610	Prepare collection data .
8611	Index a config range .
8612	Is row allow add .
8613	Insert each template in the configuration range
8614	Evaluate the normal cell .
8615	Evaluates the user formula .
8616	Checks if the string is a user formula .
8617	Create cell comment .
8618	Evaluate a boolean expression
8619	Removes all rows in the specified sheet .
8620	Remove single row from sheet .
8621	Remove cached cell for a row .
8622	Remove rows in the body .
8623	Loads a picture .
8624	Loads the chart .
8625	Assemble new value .
8626	Get the cell value from a POI cell .
8627	Gets the cell value without formatting .
8628	Gets cell value with cell type .
8629	Get cell string value with number type
8630	Set the value of a cell
8631	Sets a string value of a cell .
8632	Sets the value of a cell as a boolean .
8633	Sets a date value as a date .
8634	Sets the cell value of a cell .
8635	Copy rows from source sheet to destination row .
8636	Copy a single row .
8637	Copy a cell from source row .
8638	Copy the value of the source cell to another cell .
8639	Copy the style of a cell to a new cell
8640	Clone a comment
8641	Create a comment anchor .
8642	Create or insert a comment
8643	Match comment settings .
8644	Get a VML drawing from a cell .
8645	Get the shape of a VML cell
8646	Get the cell style from the source cell .
8647	Convert a cell to a cell .
8648	Get row and column index .
8649	Gets initial rows from configuration .
8650	Get the FacesRow from the body row .
8651	Get the FacesCell from the body row .
8652	Gets the pi cell from a sheet .
8653	Gets the skey for a poi cell .
8654	Gets the tie cell or creates it if it does not exist .
8655	Gets the context context name .
8656	Evaluates the given expression .
8657	Evaluates the expression .
8658	Serialize this object to an object .
8659	Remove a row from the map
8660	Merge rows mapping .
8661	Recovers the serial row .
8662	Get the chart type
8663	Converts a string to a stroke .
8664	Initializes the chart data from a chart .
8665	Sets the chart data .
8666	Initializes the map of chart anchors .
8667	Initialize the map for a sheet .
8668	Gets the chart id associated with a two cell anchor .
8669	Get the chart id from node attributes .
8670	Iterate over all objects in the collection .
8671	Save data in the cell .
8672	Recalculates the formula values .
8673	Gets the pi cell with the specified row index .
8674	Gets the FacesCell with the specified row index .
8675	Restore collection data data .
8676	Gets the last collect object .
8677	Check if we need restore context .
8678	Start restore data context .
8679	Shift a new row reference .
8680	set first row ref
8681	Sets the last row of the last row .
8682	Build cells for row .
8683	Build single cell .
8684	Read object from serial workbook .
8685	Build the category list .
8686	Build the series list
8687	Build chart series .
8688	Gets the color list .
8689	Get a DDPt from a list of DPTs .
8690	Set the command index map .
8691	Get picture map .
8692	Fill the picture map .
8693	Index picture .
8694	Generate picture style .
8695	Generate chart style .
8696	Get the size of an anchor .
8697	Gets the pattern .
8698	Get the chart picture from the browser .
8699	Recovers the cell .
8700	Get the row style for a given POI cell .
8701	Gets the cell style of a cell .
8702	Get the cell font color .
8703	Gets the cell font decoration .
8704	Gets the cell style for a cell .
8705	Get column style .
8706	Gets the alignment from the given POI cell style
8707	Gets the vertical alignment from the cell style .
8708	Calculates total height .
8709	Sets the style for a cell .
8710	Gets the input type from the cell type .
8711	Returns a set of resource paths .
8712	Gets a resource as an input stream .
8713	Removes the prefix from the resource .
8714	Evaluates the type of the input .
8715	Find a bean by name .
8716	Join an array of shorts
8717	Round a double value .
8718	Returns the tab type .
8719	Returns the style of the tab .
8720	Gets the default date pattern .
8721	Gets the decimal separator .
8722	Gets the thousand separator .
8723	Sets the tie command alias list .
8724	Build the watch list .
8725	Build the watch list for a cell .
8726	Adds a new row to the watch list .
8727	Checks if the given string is a command string .
8728	Parse widget attributes .
8729	Gets attribute key in map .
8730	Parse validate attributes .
8731	Find the index of a pair bracket .
8732	Parse attributes string .
8733	Parse input attributes .
8734	Parse validation attributes .
8735	Split attribute data by eual sign .
8736	Parse special attributes .
8737	Process calendar attributes .
8738	Process the special item attributes .
8739	Gather special attributes .
8740	Parse comment to map .
8741	Find the first non - cell name position in the input string
8742	Removes all characters from a string .
8743	Get the column name for a given number
8744	Convert column name to integer .
8745	Get cell by cell reference
8746	Convert height units to pixels .
8747	Check if a string is a date .
8748	Parse a date string .
8749	Checks if the given string is a numeric .
8750	Determines if the character should be processed .
8751	Sets a property on an object
8752	Compare two cells .
8753	Checks if the child range is inside the parent .
8754	Removes all hidden columns in a sheet .
8755	Delete the hidden columns from a row .
8756	Delete a cell from a row .
8757	Process event .
8758	Refresh after status changed .
8759	Validate with the given row col .
8760	Validate by tie web sheet validation bean .
8761	Check the error message for an object from the context
8762	Validate all rules for a single cell .
8763	Do validation .
8764	Validate the target cell .
8765	Validate the current page .
8766	Validate the row in the current tab .
8767	Validate row .
8768	Refresh the cached cells in the current page .
8769	Refresh the cached cells in the row .
8770	set the submit mode in the view map
8771	Validates the current sheet .
8772	Clear the map .
8773	Load the header rows .
8774	Load header row without configuration .
8775	Fills a list of header cells .
8776	Get the style for a cell .
8777	Get the width and total width .
8778	Load header row with configuration .
8779	Get the column width .
8780	Clears the workbook .
8781	Initialize the tabs .
8782	Load data .
8783	Refresh the data .
8784	Refresh the data for the given row .
8785	Refresh the data for cell
8786	Returns the index of the tab with the given name .
8787	Load a work sheet .
8788	Prepare the active tab .
8789	Sets the first page of the page .
8790	Saves the objects in viewMap to the viewMap
8791	Setup row info .
8792	Load body rows .
8793	Assemble the body row .
8794	refresh cached cell
8795	Process a refresh cell .
8796	Creates the columns for a tab .
8797	Add a repeat row .
8798	Refresh the body rows in the sheet .
8799	Set unsaved state .
8800	Returns true if the current state has been saved .
8801	Returns the common constructor for the given type .
8802	Write input stream to output stream .
8803	Writes a long value .
8804	Write a string to the writer .
8805	Sets traffic stats tag .
8806	Add a bitmap to the result .
8807	Add a file descriptor to the result .
8808	Remove a parameter .
8809	Add a header to the request .
8810	Clear the result .
8811	Starts playback .
8812	Call stop .
8813	Binds the service to the streaming service .
8814	Unbind the radio .
8815	Drop listener .
8816	Store image to disk .
8817	Transfer stream to string .
8818	Convert stream to string .
8819	Send data to the output stream .
8820	Returns the number of bytes available in this stream .
8821	Closes the input stream .
8822	Reads from the input stream .
8823	Resets the mark .
8824	Sends the start of this request .
8825	Send the disposition header .
8826	Sends the content type header .
8827	Sends the transfer encoding header .
8828	Send the end of the header .
8829	Send the end of the stream .
8830	Sends the given parts to the given output stream .
8831	Calculates the length of the parts .
8832	Check if the URI is a redirect .
8833	Sends a 304 response .
8834	Sets the date header .
8835	Sets the date and cache headers .
8836	Sets the content type header .
8837	Closes the given channel .
8838	Send disposition header .
8839	Sends data to the output stream .
8840	Installs the cache .
8841	Create the working directory .
8842	Gets the cache response .
8843	Creates a new filter input stream for the given snapshot .
8844	Reset the bitmap .
8845	Get an instance of the SSL context
8846	Validates a keystore .
8847	Replace the scale type with the specified type .
8848	Stop listening .
8849	Get a pending intent .
8850	Disconnects a connection .
8851	Bind to service object .
8852	Unbind this service .
8853	Notifies that the view has changed .
8854	Closes the proxy connection .
8855	On accept data .
8856	Reset the data .
8857	Waits for the loader to complete .
8858	Sets the text or hide it
8859	Hides the soft input .
8860	Show soft input .
8861	Toggles soft input from a TextView .
8862	Get pixels width .
8863	Cancels an exception .
8864	Clears the cache .
8865	Populate an image .
8866	Cancel the image loading .
8867	Create image consumer .
8868	Sets image image .
8869	Sets the loading image .
8870	Starts an image loader task .
8871	Add a bitmap to the cache .
8872	Release a byte array .
8873	On URL connection .
8874	Adds a parameter to the request .
8875	Connects to the core .
8876	Calculates the MD5 hash of a string .
8877	Returns the String identifying the given integer
8878	Returns the String identifying the given CUBLAS status
8879	Checks the given result .
8880	Checks the result bLAS status .
8881	Add a lexeme .
8882	Adds a ending .
8883	Returns the estimated estimate of the given word form .
8884	Prints the description of this token
8885	Verify and set KAMols attribute .
8886	Generate Kamols markup .
8887	Verify AVS attribute .
8888	Removes the kamols markup formatting .
8889	Get metric data .
8890	Returns the query string .
8891	Process a JSON node .
8892	Parse json string .
8893	Returns the connection configuration .
8894	Performs a metric request .
8895	Factory method to create a code list reader .
8896	Create a new CodeListSetReader
8897	Factory method for GC column set document .
8898	Create a reader for GC10 code list .
8899	Create a reader for GC code list set .
8900	Create a reader for GC column set .
8901	Get the column element ID .
8902	Get the value of the passed column .
8903	Get the column with the passed ID .
8904	Get all key IDs from the passed column set .
8905	Get the key with the passed ID .
8906	Check if the passed column is a key column .
8907	Create a new column .
8908	Create a new key .
8909	Set the number of lines to be skipped .
8910	Add a column at the specified index .
8911	Create a new code list .
8912	Create a new CodeListSet
8913	Create a writer for column set .
8914	Create new code list .
8915	Create a new code list set .
8916	Create a GC column set document .
8917	New code list .
8918	New code list set .
8919	Validator for column set .
8920	New code list .
8921	New code list set .
8922	Validator for column set .
8923	Send the saved logs to the server .
8924	Set the context .
8925	Get the log level .
8926	Get the capture .
8927	Set the max log store size .
8928	Prepends metadata to a message .
8929	Appends the stack metadata .
8930	Create a JSON object .
8931	Log location information
8932	Set user identity .
8933	Gets the contents of a file .
8934	Request the location updates .
8935	Size of the specified region .
8936	Size of a partition .
8937	Counts the number of entries in the given region .
8938	Reads a snapshot record .
8939	Prints the statistics .
8940	Get the time values of a given index .
8941	Convert file to GfStats
8942	Get the pool for the server
8943	Get the pool for a given locator .
8944	Check if a region is already existing
8945	Get a member .
8946	List all the host names in the given JMX object
8947	Looks up the host name in the properties file .
8948	Checks if data is an error and send it .
8949	Execute function with result collector
8950	Flatten a collection of objects into a collection
8951	Execute query .
8952	Creates a bridge that will be invoked when a put event is received .
8953	Creates a bridge that will be invoked when an entry is deleted .
8954	Handle exception .
8955	Gets the onregion filter keyFacts .
8956	Export data from a region .
8957	list of host names
8958	This method is used to perform a paging operation .
8959	Get the name of the cache .
8960	Construct security properties .
8961	Get a region from the cache .
8962	Get a region from the client cache .
8963	Construct the comparison comparison .
8964	Returns true if the timestamp is inserted at the given index .
8965	Close the underlying resources .
8966	to cv files
8967	Dump the archive stats .
8968	Reconnects the JMX instance
8969	Stop members on a host
8970	Shuts down member
8971	Shuts down the system .
8972	Shut down redundancy zone
8973	Store pagination map .
8974	Read results by page criteria
8975	Imports a region .
8976	Compare remote Locators and locators
8977	Executes the function context .
8978	Builds the check sum map .
8979	Gets the value of the given column .
8980	Returns true if typeMirror is an integer .
8981	Serializes an object to byte array .
8982	Deserializes a byte array .
8983	Creates an instance of the given class .
8984	Check for table id .
8985	Check if a column is a column type
8986	Checks if the given type is a super type .
8987	Returns the schema for this table
8988	Generate Java code .
8989	Generate get method .
8990	Converts the query to an Observable
8991	Checks that the given column name exists in the table .
8992	Returns the value of a string or the default .
8993	Capitalizes the first character of the given string .
8994	Checks if the given type is a type mirror .
8995	Create a query that can be used to sort the table .
8996	Read the temperature .
8997	Returns supported cursor methods .
8998	Prints a note message .
8999	Print error message .
9000	Gets the icon fonts .
9001	Gets the icons .
9002	Creates the layout of the editor .
9003	Gets the background decoration for the tab .
9004	Raises a power of x .
9005	Sets the values of this matrix .
9006	Compute the power of an exponent .
9007	Returns the integer root of an integer .
9008	Expands the power of x .
9009	Returns the natural value of the given value .
9010	Newton function .
9011	Returns the arcan with the given value .
9012	Returns the aracor tivergence of x .
9013	Returns the sqrt of x .
9014	Prints a pi string .
9015	Generate a timestamp .
9016	Set the limits .
9017	Put a float value .
9018	Print the bar .
9019	Add a complex number .
9020	Subtract a complex number .
9021	Multiply this complex .
9022	Divide this complex .
9023	Sets the values of this matrix .
9024	Gets a row of this matrix .
9025	Get a column of this matrix .
9026	Sets the matrix values .
9027	Returns the transpose of this matrix .
9028	Adds this matrix to this matrix .
9029	Subtract a matrix from this matrix .
9030	Multiply this matrix by k .
9031	Multiply this matrix .
9032	Print this matrix to the specified output stream .
9033	Sets the image resource .
9034	Validate the coefficients .
9035	Compute the next position .
9036	Clear the internal state .
9037	Parse a styled layer descriptor info .
9038	Parse a layer descriptor info .
9039	Validate a layer descriptor .
9040	Validate XML .
9041	Returns the area of the region
9042	Sets the values of this matrix .
9043	Sets the values of this matrix .
9044	Computes the inverse of this matrix .
9045	Returns the determinant .
9046	Returns the norm of this matrix .
9047	Solves a matrix .
9048	Prints the decomposition .
9049	Performs forward elimination .
9050	Performs forward substitution .
9051	Performs back substitution on the matrix .
9052	Re - improve the matrix .
9053	Converts the matrix to 1 .
9054	Generates a random random value .
9055	Implement iteration procedure .
9056	Compute the next position .
9057	Check position .
9058	Compute the next position
9059	Checks if the given interval is valid .
9060	Add an addend value .
9061	Multiplies two integers .
9062	Raises the power of pbase to m .
9063	Implement iteration procedure .
9064	Get the sld manager .
9065	Convert a long value to a char array .
9066	Decompose the bits .
9067	Prints the current value to a PrintStream .
9068	Validates the bi -ased exponent value .
9069	Validates that the unbiased exponent value is valid .
9070	Validates the bi -ased exponent value .
9071	Validates the unbiased exponent value .
9072	Create SWT service asynchronously .
9073	Returns the next random value .
9074	Generate the next random value .
9075	Compute the next random value .
9076	Creates a new sieve array .
9077	Returns the distinct prime factors of a given number of primes .
9078	Implementation of iteration procedure .
9079	Compute the next position .
9080	Check the position of the element .
9081	Sets the JavaFX application .
9082	Set the configuration file
9083	Set the default configuration
9084	Initialize the fxml loader .
9085	Add a geo lng .
9086	Extracts the host and port .
9087	Returns the applicable attribute definition with the given uuid .
9088	Evaluates the given attribute definition .
9089	Sanitize tag .
9090	Sets the address .
9091	Sets the components .
9092	Query the names of all registered services .
9093	Query the ServiceInstance by name .
9094	Returns a list of collaboration objects for a user .
9095	Get the metadata for a decimal parameter .
9096	Change password for login .
9097	Get all users .
9098	Gets the Gravatar for an email .
9099	Gets the Gravatar for a user .
9100	Populate from JSON parameter
9101	Gets the Elasticsearch field type .
9102	Create a flow step .
9103	Update a flow step .
9104	Get a flow step by id .
9105	Get flow step by step .
9106	Gets all steps for a flow .
9107	Deletes a flow step .
9108	Force a flow step .
9109	This method is used to populate the table fields .
9110	Closes the connection
9111	Handle a message .
9112	Called when the connection is closed .
9113	Get the echo message from the return value
9114	Gets the PersonalInventory items .
9115	Create a table record .
9116	Deletes a form container .
9117	Retrieves a list of flow data for a form .
9118	Retrieves a list of form historical data .
9119	Retrieves the most recent form data for the given form parameter .
9120	Lock the form parameter .
9121	Unlock the form param .
9122	UnLocks a form .
9123	Map form container to form container .
9124	Convert a string to a list of roles
9125	Create a form definition .
9126	Updates a form definition parameter .
9127	Retrieve a form definition by id .
9128	Get a form definition by name .
9129	Get all by user .
9130	Deletes a form definition .
9131	Get storage key from form definition .
9132	Initializes the memcached client .
9133	Shuts down the cache .
9134	Parses the given string to a long .
9135	Converts a document to a PDF file .
9136	Get the field values for a given form .
9137	Create a flow step entry rule entry .
9138	Create a flow step exit rule .
9139	Create a flow step rule view .
9140	Update flow step entry rule .
9141	Update flow step rule .
9142	Update flow step rule .
9143	Moves the flow step entry rule up .
9144	Move the flow step entry rule .
9145	Deletes a flow step entry rule .
9146	Deletes the exit rule .
9147	Deletes a flow step rule .
9148	Initialize the session .
9149	Get all user queries .
9150	Get all roles .
9151	Returns the service ticket as hex string .
9152	Create a field text field .
9153	Create a field with a barcode type .
9154	Create a decimal spinner parameter .
9155	Create a decimal slider parameter .
9156	Create a Table field .
9157	Updates a field in a form field .
9158	Updates a field s barcode .
9159	Updates a decimal field .
9160	Updates a decimal slider parameter .
9161	Updates a field .
9162	Retrieve a field by name .
9163	Returns a list of fields matching the given form name .
9164	Returns a list of all fields matching the given form type .
9165	Deletes a field .
9166	Force a field to delete .
9167	Gets the metadata for a table field .
9168	Update a field value .
9169	Get or create a new index
9170	Create a flow .
9171	Update a flow .
9172	Get flow by id .
9173	Get flow by name .
9174	Delete a flow .
9175	Force a flow .
9176	Update the field value .
9177	Get all global field values .
9178	Get the form definition id and title .
9179	Decrypt an init packet .
9180	Closes the connection .
9181	Initialize a new request .
9182	Get exception message .
9183	Creates a new admin user .
9184	Gets an access token .
9185	Retrieves a user profile information .
9186	Executes a JSON request .
9187	Execute a form .
9188	Gets the response handler for the given response parameter .
9189	Check if the connection is valid .
9190	Get the closeable client .
9191	Returns the path to the trusted trust store .
9192	Closes the underlying connection .
9193	Get the Fluid items for a single view .
9194	Sends a form to a flow .
9195	Handle close .
9196	Handles a message request .
9197	Sends a JSON object to the server .
9198	Sends a message to the remote server .
9199	Closes the user session .
9200	Executes a native SQL query .
9201	Request a license .
9202	Apply a license
9203	Create a text field .
9204	Create a paragraph text field .
9205	Create a paragraph text field .
9206	Create a multi - choice field .
9207	Create a DateTime field .
9208	Update field text .
9209	Update a paragraph text field .
9210	Update field date time .
9211	Update a decimal field .
9212	Update field value .
9213	Create a field value .
9214	Get configuration by key .
9215	Gets all configurations .
9216	Create an attachment .
9217	Get attachment by id .
9218	Delete an attachment .
9219	Force the attachment to be deleted .
9220	Parse jar file .
9221	Set the class loader for a jar file .
9222	Rule2 element .
9223	Validate this element .
9224	Rule 3 .
9225	Get schema node .
9226	Validate the parent element .
9227	Rule 3 .
9228	Converts the given value to the appropriate type .
9229	Create a CLI instance .
9230	Create a CLI instance .
9231	Parses the given arguments .
9232	Parses the given arguments .
9233	Creates the builder for the given path .
9234	Remove a footer view
9235	Returns the value of the floating point .
9236	Generate a gradient gradient for a given point .
9237	Generate a 3D value .
9238	Computes a 3D value of 3D noise .
9239	Returns the cubic interpolation
9240	Returns the S curve 5 .
9241	Sets the bounds of the range .
9242	Process an event .
9243	Process event .
9244	Gets the account ID of the specified event .
9245	Method to trim the viiolation entity .
9246	Get event serializer .
9247	Creates the file with the given name .
9248	Creates the directory with the given name .
9249	Restores the original system properties .
9250	Creates a map implementation .
9251	Adds an object to the collection .
9252	Set a string property .
9253	Get an array property .
9254	Returns the next transition for the given action name .
9255	Removes the garbage collection from the cache .
9256	Get the object for the given type .
9257	Get a parameterized type .
9258	Get the type variable for the given type .
9259	Print stack trace .
9260	Print stack trace .
9261	Replace the object in the serialization layer .
9262	Run the task .
9263	Sets the task .
9264	Called when the task is accepted .
9265	Called when a task is rejected .
9266	Called when a task started .
9267	Called when the task completed .
9268	Stop the task .
9269	Get the next job .
9270	Add a job to the queue .
9271	Convert name to blocking mode .
9272	Resolve the instance type .
9273	Adds a reader to the catalog .
9274	Add a catalog reader .
9275	Copy readers from a catalog .
9276	Creates a new catalog .
9277	Load the system catalogs .
9278	Parse a catalog
9279	Parse the local catalog files .
9280	Parse the catalog file .
9281	Process an unknown entry .
9282	Parse all the subordinate catalogs .
9283	Resolve the given entity name and system identifier .
9284	Resolves a Document .
9285	Resolves the system with the given system ID .
9286	Resolves a URI from the catalog .
9287	Resolve the subordinate catalogs .
9288	Make a system identifier absolute .
9289	Normalizes a URI .
9290	Encodes a byte .
9291	Add a delegate entry .
9292	Create a value value .
9293	Fire an event to all registered listeners .
9294	Adds a throwable to this class .
9295	Creates a delegate implementation .
9296	Compare two timer tasks
9297	Returns the IP address as an InetAddress .
9298	Returns the object at the given index .
9299	Set an object at the specified index .
9300	Maintains the list of objects .
9301	Adds a new entry type .
9302	Get the type of an entry .
9303	Get the number of arguments for a given type .
9304	Returns an entry argument .
9305	Set the context class loader
9306	Swap two queues
9307	Remove a node from the queue .
9308	Cleans up the target object .
9309	Loads a class .
9310	Load all protocol URLs .
9311	Create a URL stream handler .
9312	Check the JBoss protocol handler packages .
9313	Gets the type .
9314	Creates the delegate implementation .
9315	Make synchronized .
9316	Make a counter as directional .
9317	Returns true if the namespace is in extension namespace
9318	Check a notification for a given result .
9319	Binds a name to the specified target object .
9320	Get the wrapper object instance .
9321	Substitute a string in a string
9322	Splits the string using the specified delimiter .
9323	Join a byte array .
9324	Convert an object to a string .
9325	Returns the value of the property .
9326	Creates a new map .
9327	Get the value associated with the given key .
9328	Returns the value associated with the given key .
9329	Removes the specified entry from the map .
9330	Flushes the statistics .
9331	Returns a list of all the currently active keys .
9332	Sets the resolution .
9333	Returns the entry at the given key .
9334	Get children by tag name
9335	Get the unique child of an element
9336	Gets an optional child with the given tagName .
9337	Get the content of an element
9338	Get the unique child content of an element .
9339	Gets the content of a child element .
9340	Sets the maximum size of the pool .
9341	Sets blocking mode .
9342	Sets blocking mode name .
9343	Executes the task .
9344	Resolves the system identifier .
9345	Resolves an external public key .
9346	Resolves an external system .
9347	Resolves an external public key .
9348	Queries a resolver .
9349	Appends a vector to a vector
9350	Resolves all system entries in the catalog .
9351	Resolves a system id in reverse order .
9352	Resolves all system entries in the catalog .
9353	Find all local system entries in the catalog .
9354	Resolves all subordinate catalogs .
9355	Read a catalog from a file .
9356	Reads a catalog from an input stream .
9357	Connects the file .
9358	Returns an output stream for writing .
9359	Atomically sets the next node .
9360	Atomically deletes a node .
9361	Returns the value of this header .
9362	Creates a snapshot entry .
9363	CAS the right value .
9364	Create the logger .
9365	Append a collection of objects
9366	Gets the class name .
9367	Returns a string representation of this implementation .
9368	Returns an iterator over the properties .
9369	Returns the property group by name .
9370	Tries to find a compatible constructor with the given argument type .
9371	Creates a copy of an object .
9372	Dereference an object .
9373	Initialize the context .
9374	Update JNDI cache .
9375	Returns a set of the keys in this configuration .
9376	Returns a set of entry entries .
9377	Removes a property listener .
9378	Fire a property added event
9379	Fire a property removed event .
9380	Fire a property change event
9381	Fire a property event .
9382	Returns a property name with the given prefix .
9383	Loads properties from the specified property reader .
9384	Loads the specified class .
9385	Returns the property group for the given basename or index .
9386	Gets the entity resolved .
9387	Resolve the system ID from the classpath .
9388	Resolve system id as a URL .
9389	Resolve a classpath resource .
9390	Sets this value as a Document .
9391	Normalizes a public id .
9392	Encodes an URN .
9393	Decode an URN .
9394	Replaces a string with a new string .
9395	Start the thread .
9396	Stop stopwatch .
9397	Make a stopwatch .
9398	Compares two HashCodes .
9399	Generates a hashcode from a byte array .
9400	Generates a hashcode for an array .
9401	Create the map .
9402	Sets the value of the field .
9403	Get the next token from the file .
9404	Initialize the date formats .
9405	Add a vertex .
9406	Sets the root vertex .
9407	Removes a vertex from this graph .
9408	Depth - first search .
9409	Iterates over all edges of a given vertex .
9410	Find vertex by data .
9411	Finds cycles in the graph .
9412	Normalize a string .
9413	Parse an XML string .
9414	Parse the given XML stream .
9415	Parse the given input source .
9416	Create an Element
9417	Resolve a qualified name .
9418	Copy attributes from srcElement to destElement .
9419	Check if a node has child elements
9420	Returns an iterator over all child elements .
9421	Get the text content of a node .
9422	Returns an iterator over all child elements of the given node .
9423	Gets the parent element of the given node .
9424	Add a resource to the waiting list .
9425	Reads a catalog from an input stream .
9426	Read a catalog from the specified URL .
9427	Get the host address .
9428	Resolve an entity .
9429	Sets the system property value .
9430	Prints information about a class .
9431	Description of the given class .
9432	Strip the package name from a class name .
9433	Gets the package name .
9434	Attempts to load a class .
9435	Returns the primitive wrapper class for the given primitive type .
9436	Adds all the interfaces of the specified class to the list .
9437	Get all the unique interfaces of the given class
9438	Checks if the given class is a primitive wrapper type .
9439	Instantiates an instance of the specified property .
9440	Get attribute getter .
9441	Get attribute setter .
9442	Converts a class name into a Java class .
9443	Get system property .
9444	Get file names .
9445	Removes all weak objects from the set .
9446	Returns an iterator over this set .
9447	Creates a URLLister instance .
9448	Returns a set of entries in this group .
9449	Adds a bound property listener .
9450	Remove a bound property listener .
9451	Returns true if the given string is null or empty .
9452	Find a property editor for the given type name .
9453	Register an editor for the specified type name .
9454	Convert the text value to an object .
9455	Gets the context class loader .
9456	Returns true if the Throwable is a deadlock exception .
9457	Schedules a timeout .
9458	Do the work .
9459	Creates a new context with the given name .
9460	Lookup an object using the given name .
9461	Checks that an object is an instance of the given class .
9462	Appends information about the given class .
9463	Get a transition by name
9464	Read the properties .
9465	Query the verbosity .
9466	Query the relative catalogs .
9467	Query the catalog files
9468	Query the catalog files
9469	Returns whether or not the system property is public or not .
9470	Query the default static catalog .
9471	Resolve an input source .
9472	Resolve a href .
9473	Make a URI absolute .
9474	Resolves a class .
9475	Invokes the setter method .
9476	Gets the local name of an element .
9477	Get the namespace URI of a node .
9478	Returns the namespace URI of the given element .
9479	Returns a list from an enumeration .
9480	Returns an input stream for the given filename .
9481	Loads properties from a file .
9482	Read the properties file .
9483	Adds an edge to the graph
9484	Adds an outgoing edge .
9485	Adds an incoming edge .
9486	Returns true if the given edge has the given edge .
9487	Removes the given edge from this graph .
9488	Find the edge for the given destination .
9489	Find an edge .
9490	Returns the cost of this vertex
9491	Creates a jar file .
9492	Checks to see if there are more elements .
9493	Fire an event .
9494	Installs the JVM type provider .
9495	Clean a folder .
9496	Dispatch an action on the application thread .
9497	Gets an event stream for the given action type .
9498	Create the fxml path .
9499	Perform one - to - to - to - many records .
9500	Bind a collection of rights to a collection of rights .
9501	Binds a collection of rights to a list of rights .
9502	Binds a collection of rights to a stream .
9503	Returns true if the specified page can be included in the page .
9504	Checks if the instruction generated is generated
9505	Entry point for the analyzer .
9506	Main entry point .
9507	Gets sum degree .
9508	Get superclass arguments .
9509	Adds a resource loader .
9510	Checks if data source is configured .
9511	Creates an iterable for the specified instance .
9512	Generates an array of the given type .
9513	Generates a list from a class .
9514	Construct a collection of objects .
9515	Creates a list from an Any object .
9516	Creates a left instance with the specified type .
9517	Creates a right value .
9518	Fails if the given type is invalid .
9519	Validates that the given type is a parameter type .
9520	Creates a new Try with the specified type .
9521	Open Jdbc with URL and driver and username and password
9522	Run an SQL in the database .
9523	Query in with a single SQL command .
9524	Returns the array as boolean array .
9525	Filter by example .
9526	On upgrade .
9527	Backup this table .
9528	Restores a csv file .
9529	Set the empty text .
9530	Dump the table to a csv file .
9531	Unescapes the specified string .
9532	Get the values from a CSV row
9533	Converts a comma - separated string into a map .
9534	Convert a map to CSV
9535	Join a list of strings .
9536	Join a list of strings .
9537	Read a database from a file .
9538	Write database info
9539	Inspects the id field .
9540	Get the base dao class
9541	Gets the bind type .
9542	Imports a CSV file .
9543	Backup all tables .
9544	Restores all tables from CSV file .
9545	Write the index to index .
9546	Creates a query .
9547	Creates a typed query .
9548	Render the query .
9549	Delete the table with the given id
9550	Save the object into the database .
9551	Updates the specified object in the database .
9552	Add a not in array
9553	Add a subquery .
9554	Get the next active stack .
9555	Returns an empty intention stack .
9556	Adds a binding for the given plan .
9557	Selects a plan .
9558	Selects a plan at the given index .
9559	Sets the plan variables to the plan instance .
9560	Returns the belief at the given index .
9561	Gets the parents .
9562	Gets the children .
9563	Grows a byte array by an increment .
9564	Creates a new logger .
9565	Step 1 .
9566	Set Goals .
9567	Pause for user input .
9568	Initialize the intention selection pools
9569	Initialize IntentionSelector threads .
9570	Starts threads which are used to start an intention selection .
9571	Shuts down the pool threads .
9572	Registers an extension .
9573	Resets the analysis .
9574	Load an agent .
9575	Processes the plan for a goal .
9576	Creates a new instance of agents .
9577	Loads a class from the given name .
9578	Loads an extension .
9579	Compares two AObject names .
9580	Returns the usage message .
9581	Parses the command line arguments .
9582	Parses the argument with the given option .
9583	Evaluates an agent .
9584	Returns the object at the specified index .
9585	Find object by name .
9586	Adds an object to the list .
9587	Returns the object at the specified index .
9588	Adds an object to the queue .
9589	Removes an object from the queue .
9590	Get the type of an object .
9591	Check if a query matches a query
9592	Main entry point .
9593	Converts the specified string to a byte array .
9594	Post a goal to the agent .
9595	Sends a message to the agent .
9596	Sends a message to the agent .
9597	Get Goals .
9598	Creates a beliefset .
9599	Adds a belief to this belief .
9600	Evaluates a query
9601	Suspend the agent .
9602	Returns the BeliefSetField with the given name .
9603	Registers neighbours in the beliefset .
9604	Generate a random name .
9605	Run the agent .
9606	Check if the stack is valid
9607	Remove all active agents .
9608	Manage a goal .
9609	Shuts down the pool .
9610	Sets whether the given agent is idle .
9611	Moves a pin between two pins .
9612	Initializes the global state .
9613	Wait until all pools are idle .
9614	Closes all agents .
9615	Returns true if all pools are idle .
9616	Get the pool id for an agent
9617	Picks the expression .
9618	Sets the expression .
9619	Returns the path for the given attribute .
9620	Find a join recursively .
9621	Find or create a join for a given property .
9622	Is end reached?
9623	Gets the upload stream .
9624	Handles the request .
9625	Check if the parameter has the specified value .
9626	Get parameter value .
9627	Parse parameters .
9628	Configures the configuration .
9629	Get the target file for the given artifact name .
9630	Writes an artifact to the generated file .
9631	Sets the instance field on the instance .
9632	Gets the declared constructor .
9633	Builds a string representation of the configuration .
9634	Gets the interface method .
9635	Returns the type of the field .
9636	Gets the dependency value of the given type .
9637	Updates the temporary file .
9638	Set the default link for a given rel .
9639	Set the default link template .
9640	Handles links from the response .
9641	Handles header links .
9642	Adds links to the body .
9643	Parses a link object .
9644	Get or create a map .
9645	Sets the allowed methods .
9646	Check if the method is allowed .
9647	Registers the processor .
9648	Register an instance factory .
9649	Registers an instance processor .
9650	Register a class processor
9651	Get an instance of the specified interface .
9652	Adds an argument .
9653	Create target file list .
9654	Marshals this object into an XML string .
9655	Initializes the template .
9656	Returns true if the template file has a reference to the given directory .
9657	Create a parameterized template model from a reader .
9658	Creates a parameterized template model from a file .
9659	Sets the request path .
9660	Gets an observable from the given index .
9661	Converts a string into an instance scope .
9662	Sets field .
9663	Add a capture appender to a logger .
9664	Remove the specified appender .
9665	Clears the specified appender .
9666	Read file items from request .
9667	Parse the EMF model files .
9668	Resolve all proxies .
9669	Returns an array of files in the directory .
9670	Parse all files in a directory .
9671	Check if the model is complete .
9672	Find all EObjects in the given resource set .
9673	Set the model directories .
9674	Sets the file extensions .
9675	Sets the model resources .
9676	Reads the next record .
9677	Sets the value of an array parameter .
9678	Set a boolean value .
9679	Execute a large update .
9680	Convert string to instance type
9681	Merges the velocity template .
9682	Returns the directory of the model .
9683	Gets the template directory .
9684	Writes the given value to the response .
9685	Starts the web ui .
9686	Configures the web window .
9687	Print the view .
9688	Writes the contents of the input stream to the output stream .
9689	Invokes a method on the proxy .
9690	Attach this request to this request .
9691	Detaches the object .
9692	Returns the cookies associated with this request .
9693	Dump the request context .
9694	Gets the meters .
9695	Sets the event stream configuration .
9696	Sets the remote host .
9697	Get parameter value .
9698	Remove prefix from path .
9699	Gets the common directory .
9700	Convert absolute path to relative path .
9701	Convert a relative path to absolute path .
9702	Returns directory depth .
9703	Dumps error information .
9704	Send JSON object .
9705	Adds a template .
9706	Adds the parameter templates .
9707	Initialize the parameters .
9708	Returns a list of template objects that match the given template file .
9709	Enable or disable the save button .
9710	Displays a confirmation dialog .
9711	On delete .
9712	Create a new instance of the given managed class .
9713	Returns a sorted array of files .
9714	Returns the sum of all files .
9715	Get summary row .
9716	Generate a summary row for a file .
9717	Create a new instance of the given managed class .
9718	Gets the class .
9719	Replies the model directories .
9720	Replies the resources of the model .
9721	Sets the list of candidates to use .
9722	Load configuration document from input stream .
9723	Display an error notification .
9724	Returns true if the parameter is an object type .
9725	Reads the JSON from the request .
9726	Reads JSON from input stream .
9727	Extracts the parameter of a cell .
9728	Gets the value of the hints property .
9729	Returns true if the request is an X_REQUEST header .
9730	Checks if the given request is Android .
9731	Refreshes the entity .
9732	Get all properties that have an annotation of the given type .
9733	Gets the annotation on the property .
9734	Logs the given message and arguments .
9735	Lookup the whois result .
9736	Returns true if there is a parser for the given user .
9737	Gets the managed class .
9738	Gets the managed method .
9739	Process the message with an exception .
9740	Processes the event with the given parameters .
9741	Get a boolean value as a boolean .
9742	Returns true if the parameter is a wrapper for the given class .
9743	Serializes this response to an output stream .
9744	Get cookie value .
9745	Add a cookie to the response .
9746	Remove cookie with given name .
9747	Returns an iterator over the cookies .
9748	Gets the target list producer .
9749	Adds a field .
9750	Compiles the class .
9751	Verifies if the given token has the specified token .
9752	Returns the value of the file .
9753	Ensures that the given URI has a trailing slash .
9754	Logs in the request .
9755	Gets the http request .
9756	Invoke method .
9757	Executes mutable transaction .
9758	Execute an immutable transaction .
9759	Gets the files .
9760	Gets the last file .
9761	Get the concrete configuration .
9762	Checks if the given path starts with the given path component .
9763	Returns all factories of the given type .
9764	Gets the HTTP session .
9765	Serializes the file to the response .
9766	Reads meta data .
9767	Handle the request .
9768	Closes the statement .
9769	Close all event streams .
9770	Handle the allowed methods .
9771	Start upload .
9772	Performs a confirmation on the server .
9773	Extract column parameters from a given row .
9774	Returns the argument names .
9775	Schedule a periodic task .
9776	Cancel a timeout task .
9777	Load view manager configuration .
9778	Get the next file .
9779	Configures the application .
9780	Prints welcome banner .
9781	Prints stopped banner .
9782	Create a Chameleon instance .
9783	Registers a shutdown hook .
9784	Triggers the trigger .
9785	Triggers the trigger .
9786	Insert and replace rows in the table .
9787	Returns the counts of all files .
9788	setter for score - sets
9789	getter for variants - gets
9790	setter for variants - sets
9791	getter for questionType - gets
9792	setter for questionType - sets
9793	getter for token - gets
9794	getter for depLabel - gets
9795	setter for depLabel - sets
9796	getter for semanticType - gets
9797	setter for semanticType - sets
9798	getter for sections - gets
9799	setter for sections - sets
9800	indexed getter for sections - gets an indexed value -
9801	indexed setter for sections - sets an indexed value -
9802	getter for URIs - gets
9803	setter for URIs - sets
9804	getter for types - gets
9805	setter for types - sets
9806	getter for targetType - gets
9807	setter for target - sets
9808	getter for rank - gets
9809	setter for rank - sets
9810	getter for query - gets
9811	setter for query - sets
9812	getter for candidateAnswers - gets
9813	setter for candidateAnswers - sets
9814	indexed getter for candidateAnswers - gets an indexed value -
9815	indexed setter for candidateAnswers - sets an indexed value -
9816	getter for query - gets
9817	setter for query - sets
9818	getter for hitList - gets
9819	setter for hitList - sets
9820	indexed getter for hitList - gets an indexed value -
9821	indexed setter for hitList - sets an indexed value -
9822	getter for abstractQuery - gets
9823	setter for abstractQuery - sets
9824	getter for searchId - gets
9825	setter for searchId - sets
9826	setter for docId - sets
9827	getter for offsetInBeginSection - gets
9828	setter for offsetInBeginSection - sets
9829	getter for offsetInEndSection - gets
9830	setter for offsetInEndSection - sets
9831	getter for beginSection - gets
9832	setter for beginSection - sets
9833	getter for endSection - gets
9834	setter for endSection - sets
9835	getter for aspects - gets
9836	setter for aspects - sets
9837	getter for triple - gets
9838	setter for triple - sets
9839	getter for sourceRelation - gets
9840	setter for sourceRelation - sets
9841	getter for subject - gets
9842	setter for subject - sets
9843	getter for predicate - gets
9844	setter for predicate - sets
9845	getter for isObjUri - gets
9846	setter for isObjUri - sets
9847	getter for operator - gets
9848	setter for operator - sets
9849	getter for operatorArgs - gets
9850	setter for operatorArgs - sets
9851	getter for concept - gets
9852	getter for score - gets
9853	getter for text - gets
9854	setter for text - sets
9855	getter for id - gets
9856	setter for id - sets
9857	getter for name - gets
9858	getter for abbreviation - gets
9859	setter for abbreviation - sets
9860	setter for concept - sets
9861	getter for variants - gets
9862	setter for variants - sets
9863	getter for namedEntityTypes - gets
9864	setter for namedEntityTypes - sets
9865	getter for conceptType - gets
9866	setter for conceptType - sets
9867	getter for occurrences - gets
9868	setter for occurrences - sets
9869	getter for concepts - gets
9870	setter for concepts - sets
9871	getter for originalText - gets
9872	setter for originalText - sets
9873	getter for args - gets
9874	setter for args - sets
9875	getter for label - gets
9876	setter for label - sets
9877	Returns the index of the next clear bit .
9878	Sets the bit at the specified index .
9879	Free the mapped buffer .
9880	Returns a new instance of the given file name .
9881	Rehash values .
9882	Convert the MonomerNotation to HELM2 format
9883	Check brackets .
9884	Method to add parameters to the MonomerUnit
9885	Generate the HELM2 HELM2 format .
9886	method to add a MonomerNotation
9887	main method for testing
9888	check if the given polymerId is valid
9889	method to check if the polymerID is valid
9890	Check the connection details .
9891	Validate group ID .
9892	Checks if the given string is repeating
9893	Checks if the polymer element is peptide or rna
9894	Returns the JSON representation of the input
9895	method to get the simple polymers of the given string
9896	get the current groupingNotation
9897	Generates a HELLM 2 string representation of this molecule .
9898	Converts a list of polymers to HELM2
9899	Converts the connection to HELM2 string .
9900	Converts the grouping to HELM2 string
9901	Converts the annotation to HELM2 string .
9902	method to get all polymer and grouping ids
9903	method to get the PolymerNotation with the given id
9904	Sets the polymer element
9905	Convert the HELM string to HELM2 .
9906	Set the annotation .
9907	set the count
9908	method to get the MonomerNotation
9909	method to determine if the MonomerNotationElement is in the group
9910	Determine the HELM entity based on the id
9911	Gets the number value .
9912	Parse the HELM2 HELM2 standard
9913	method to set the nucleotide
9914	Define ambiguity .
9915	Get statistics for the worker thread .
9916	Creates an ADiGraph from a collection of edges .
9917	Creates a new ADiGraph .
9918	Initializes the incoming paths internal .
9919	Returns an iterable of nodes sorted by reachability .
9920	Subscribes a pattern .
9921	Get the number of subscribe_count matching the pattern .
9922	Unsubscribe a pattern .
9923	Execute a request .
9924	Send a request to the server .
9925	Polls until the specified timeout expires .
9926	Send a shutdown to the server .
9927	Throws an exception if the given exception is not local .
9928	Unlock the steal counter .
9929	Creates a worker .
9930	Try to add a worker .
9931	Register a worker .
9932	Cancels a worker .
9933	Signal that a worker is active .
9934	Run a worker .
9935	Waits for a work queue .
9936	Returns the number of queued task counts .
9937	Returns the common work queue .
9938	Performs an external help completion .
9939	Submit a ForkJoinTask .
9940	Make common pool .
9941	Waits for this task to complete .
9942	Build a string from a statement .
9943	Returns a thread pool statistics .
9944	Creates an AList with the given elements .
9945	Returns a list containing all elements in this list .
9946	Returns true if all elements of the iterable satisfy the predicate .
9947	Applies a function to a collection of elements .
9948	Applies a function to the list .
9949	Adds a new task to the queue .
9950	Converts nullable value into an AOption
9951	Creates a new LongHashMap from keys and values .
9952	Returns an empty list map .
9953	Creates a list map from keys and values .
9954	Creates a list map from keys and values .
9955	Returns a set of keys in this map .
9956	Normalize the resource name .
9957	Marshals a bound value .
9958	Returns a sub sequence of the specified range .
9959	Creates a binary search for the given list .
9960	Creates a binary search for the given list .
9961	Sends an email .
9962	Sends an email .
9963	Bind a route binding .
9964	Bind a filter binding .
9965	Show the tag body of the user .
9966	Gets an int value from a long .
9967	Remove duplicate strings .
9968	Returns a string representation of the specified string .
9969	Do not work .
9970	Check if the given user is valid .
9971	get user from cookie
9972	Gets the login user .
9973	Check password .
9974	Saves a user in the cookie .
9975	Generate the login key .
9976	Create a cookie from a cookie
9977	Forwards to a web context .
9978	Append file separator .
9979	Returns the given parameter as a long .
9980	Log a debug message .
9981	Get the caller info for the specified level
9982	Convert char array to simple byte array .
9983	Convert char sequence to simple byte array .
9984	Convert byte array to simple char array .
9985	Converts char sequence to ASCII byte array .
9986	Lookup a locale data .
9987	Schedules a new job .
9988	Crop the given image .
9989	Executes the given invocation .
9990	Invokes a direct invocation .
9991	Gets the rest operations .
9992	Render an AJAX error .
9993	Render a forbidden message .
9994	Converts a string into a template .
9995	Parse path .
9996	Render data tables .
9997	Render empty data tables
9998	Sets the list of items .
9999	Sends a redirect to the web context .
10000	Returns all providers of the given type .
10001	get the method name
10002	Compact memory .
10003	Propagate metrics .
10004	Encodes the given string .
10005	Read charset .
10006	Copies the input stream to the output stream .
10007	Copies the specified number of bytes from the input stream to the output stream .
10008	Copies the contents of the input stream to the specified writer .
10009	Copy the contents of the reader to the output writer .
10010	Copies the specified character count to the given writer .
10011	Copies the contents of the reader to the output stream .
10012	Copies the contents of the specified reader to the output stream .
10013	Compare two streams .
10014	Compare two readers .
10015	Apply the given IO to the pipeline .
10016	Get SQL .
10017	Convert a string to an object .
10018	Unzip a zip file .
10019	Construct a PermissionDialogFragment from a bean
10020	Resume the dialog .
10021	Register a value type converter .
10022	Returns true if the value matches the regular expression .
10023	Checks if value is mobile .
10024	Checks if is a phone number .
10025	Check if the given value is a birth day .
10026	Checks if the given string is a valid URL .
10027	Checks if a string is a date .
10028	Process the HTTP request .
10029	Encodes the given String to Base64 .
10030	Decode a Base64 string
10031	Converts a hex string to a byte array .
10032	Reads a UTF - 8 string from an input stream .
10033	Read the content of the stream and close it .
10034	Reads the content of a file into a String .
10035	Writes a byte array to a file .
10036	Copies a directory into the target directory .
10037	Serializes a Document to a String .
10038	Builds a Document from the given XML file .
10039	Parses the given XML string .
10040	Builds a Document from an input stream .
10041	Check if an XML signature is valid
10042	Sign a Document
10043	Checks if the given class is cache safe .
10044	Checks if the given class is a primitive array .
10045	Returns true if the given class is a primitive wrapper array .
10046	Resolves a primitive class .
10047	Returns true if the left - hand side type is assignable to the rhs type .
10048	Returns true if the given value is assignable to the given type .
10049	Get all interfaces implemented by the given instance .
10050	Gets all interfaces of an instance .
10051	Write properties to a temporary file .
10052	Extract variables from URI .
10053	Add permission .
10054	Creates a DruidPlugin .
10055	Bind an extension point .
10056	Returns the context for the given type .
10057	Get primitive type .
10058	Convert object to given type .
10059	Convert a user - defined value to a type .
10060	Create a query parameter .
10061	Set cookie value .
10062	Applies a session parameter to the session .
10063	Initialize DruidDataSource .
10064	Sets the shared variable .
10065	Adds a parameter to the query .
10066	Add a parameter to the given field .
10067	Show a permission dialog .
10068	Returns true if all values are granted .
10069	Returns true if any of the values in the values are denied .
10070	Find records by SQL select
10071	Find first record .
10072	Returns true if the primary key is a valid number .
10073	Checks if the given method declares an exception .
10074	Removes all items from the queue .
10075	Puts a value into the map .
10076	Returns true if the given string matches the given pattern .
10077	Reads arguments from the given arguments .
10078	Gets the protobuf entity .
10079	Checks if is protobuf entity .
10080	Returns all of the protobuf attributes of the given class .
10081	Returns the getter for proto field .
10082	Returns the setter for the given field .
10083	Gets the object mapper .
10084	Get a new instance of JsonFactory .
10085	Converts an object to a JSON string .
10086	Sets the borders .
10087	Retrieves a user record from the database .
10088	Copy all attributes from the object to the target object
10089	Copy out attributes of an object .
10090	Get a property .
10091	Set a property .
10092	Add this application to the given frame .
10093	Saves the token .
10094	Gets the access token .
10095	Gets the default class loader .
10096	Get the URL of a resource .
10097	Gets the resource as a stream .
10098	Gets the class as stream .
10099	Initialize this URI .
10100	Initialize the scheme .
10101	Initialize the path .
10102	Set the scheme .
10103	Set the userinfo string .
10104	Set the host .
10105	Set the port .
10106	Appends the path to the path .
10107	Set the query string .
10108	Set the fragment .
10109	Get the URI string .
10110	Creates a prepared statement from an iterator .
10111	Initialize this applet .
10112	Get the muffin value .
10113	Set the muffin parameter .
10114	Get the clipboard contents of the system clipboard
10115	Sets the clipboard contents
10116	Open a file .
10117	Load services by type
10118	Sets the service params .
10119	Gets the service parameters from the operation .
10120	Find a parametrized operation .
10121	Find service by class .
10122	Parse query response .
10123	Returns an iterator over this buffer .
10124	Get the encoding of the XML
10125	Returns the parent logger .
10126	Creates a proxy instance for a connection .
10127	Get authorization code .
10128	Visit a package declaration .
10129	Visit a ClassDeclaration .
10130	Visit an executable declaration .
10131	Get an option from a map .
10132	Returns a filter that matches the given modifiers .
10133	Returns a FilterFilter that matches the given Declaration .
10134	Returns a filter that matches the given filter .
10135	Returns a filter that matches the given filter .
10136	Returns the map as a map .
10137	Make accessible .
10138	Prepare an object query .
10139	Replaces all slashes with a single hyphen .
10140	Convert a byte array to a hex string
10141	Returns the index of a parameter .
10142	Parses a SQL statement .
10143	Convert collection of non - protobuf entities to protobuf entity
10144	Sets field value .
10145	Sets the value of a POJO field .
10146	Accept this file .
10147	Wrap a ResultSet object .
10148	Maps a list of labels to a map .
10149	Extract values from a set of values .
10150	Returns the component type at the given index .
10151	Polls the connection .
10152	Polls all objects in the pool .
10153	Gets the declared field .
10154	Gets the declared methods .
10155	Gets the declared method .
10156	Get all methods annotated with the given annotation .
10157	Returns all constructors annotated with the given annotation .
10158	Dumps a byte to stdout .
10159	Returns the index of the first occurrence of substring ignoring case .
10160	Removes all characters from a string .
10161	Clean up the state .
10162	Initialize the audit .
10163	Initialize the message queue .
10164	Initializes the password validator .
10165	Initializes the password authenticator .
10166	Resolve locale code .
10167	Lookup the locale info .
10168	Creates a proxy for a statement .
10169	Clears the list .
10170	Adds an element to the list .
10171	Pop an element from the stack .
10172	Get the input stream .
10173	Parse the arguments
10174	Match tokens .
10175	Move the coordinates .
10176	Returns true if this rectangle is enclosed by another .
10177	Check if the specified point is inside this rectangle
10178	Returns the intersection of the specified rectangle .
10179	Returns the union of the specified rectangle .
10180	Returns a new rectangleangular with the same x1 and the other .
10181	Returns a new rectangleangular with the same y coordinates .
10182	Returns the column offset of the specified column .
10183	Returns the offset of the specified row .
10184	Get the bounds of a cell relative to this cell .
10185	Calculates the number of columns .
10186	Calculates the height of the area .
10187	Unwrap the given throwable .
10188	Main entry point .
10189	Called when a code is updated .
10190	Copy and resize instructions to the new code buffer .
10191	Renders the given instructions .
10192	Initializes the servlet context .
10193	Creates a copy of this QueryParameter .
10194	Adds a child to the collection .
10195	Clears all children of this node .
10196	Returns the next solution .
10197	Adds instructions to this method .
10198	Adds instructions to the parent .
10199	Handle a property change .
10200	Registers a work panel .
10201	Updates the flags for the present component .
10202	Creates a new BigDecimal type .
10203	Evaluates the given term .
10204	Optimize the given instructions .
10205	Compares two collections .
10206	Serves the request .
10207	Renders the paging event .
10208	Renders a button .
10209	Resets the state .
10210	Validates the training data set .
10211	Returns the value associated with the specified key .
10212	Returns the index of the specified key .
10213	Sets the value at the specified index .
10214	Removes the object from the map .
10215	Removes the element at the specified index .
10216	Returns true if the property has the specified property .
10217	Sets the property for the given property .
10218	Fetch the value of the specified property .
10219	Checks if the primitive type is assignable .
10220	Initialize the property getters and setters .
10221	Determines the decision tree for the given state .
10222	Initializes the lookup table for a decision tree .
10223	Returns the unified unifier for the given query and statement .
10224	Unify two terms .
10225	Unify a variable .
10226	Compiles a query .
10227	Find the maximum number of arguments in a clause .
10228	Allocates the local variable registers for a query .
10229	Gather the position and occurrence information from the given clause .
10230	Display the compiled predicate .
10231	Display the given query .
10232	Writes a 32 - bit integer value into the buffer .
10233	Convert buffer to string .
10234	Returns the string value of this attribute class .
10235	Sets the value of this attribute .
10236	Process a term
10237	Checks if the given class exists and is loadable .
10238	Checks if the given class is a subclass of the given name .
10239	Check if parent is a subclass of class name
10240	Check if parentClass is a sub - type
10241	Loads a class .
10242	Creates a new instance of the given class .
10243	Creates a new instance of the given constructor .
10244	Calls the method overriden by the given method .
10245	Calls a method on an object .
10246	Call a static method .
10247	Get the constructor for the given class
10248	Find all setters that match the given property name .
10249	Gets a transactional queue .
10250	Helper method to create a new transaction queue
10251	Get the java type from the given object .
10252	Resets the state .
10253	Find the state of the goal .
10254	Creates a new int range type .
10255	Add a time zone .
10256	Add alternate dimension table .
10257	Add a dimension table .
10258	Returns a set of free variables .
10259	Returns a set of free non - anonymous variables .
10260	Compare two search nodes .
10261	Write the object to a file .
10262	Reads a stream into a String .
10263	Creates a search node .
10264	Generate trace indentation .
10265	Allocates the argument registers for the given function .
10266	Returns true if the given body is the last body of the given function .
10267	Returns the majority classification for a given property .
10268	Returns true if all examples have the same classification .
10269	Choose the best property to be used for each output property .
10270	Creates a new Functor with the given name and arguments .
10271	Creates a new variable .
10272	This method is used to perform an error handling .
10273	Returns the sub - list at the specified index .
10274	Set the texture .
10275	Paints this sprite asynchronously .
10276	Creates a buffered image
10277	Creates a graphics2D .
10278	Create a binary image
10279	Create a surface .
10280	Sets the queue search algorithm .
10281	Performs a depth bounded search .
10282	Performs a search .
10283	Main entry point .
10284	Converts a term into a clause .
10285	Parses a list of terms .
10286	Parses a functor
10287	Parses a list of functors .
10288	Returns the argument list as an array of arguments .
10289	Reads a variable .
10290	Reads an integer literal
10291	Parses a double literal
10292	Parses a string literal
10293	Peek and consume a directive
10294	Interns an operator .
10295	Initializes the built - in table .
10296	Consumes a token from the stream .
10297	Peek and consume the next token .
10298	Binds this session to the current thread .
10299	Rollback the transaction .
10300	Collects iterator into target collection .
10301	Reserve a call point .
10302	Converts the time of hour to milliseconds .
10303	Returns the number of years to years .
10304	Returns the tick with the given hours .
10305	Returns the tick with the given minutes .
10306	Returns the number of tick with the given seconds .
10307	Returns the number of tick with the given year .
10308	Returns the number of tick with the given month .
10309	Returns the number of tick with the given date .
10310	Returns the millis start of the given year .
10311	Returns the month of the year .
10312	Reads a byte block from the source stream .
10313	Applies an entry to the table with the given key .
10314	Returns the entry for the given key .
10315	Places an entry in the hash table .
10316	Tries to rehash all entries .
10317	Called when an action is pressed .
10318	Sets the next available state .
10319	Set the previous available state .
10320	Sets the finished state .
10321	Returns an instance of the WAM resolution machine .
10322	Returns an iterator over the elements in the sequence .
10323	Returns the expected value of the given probabilities .
10324	Returns the probability for the given counts .
10325	Sets the tick values .
10326	This method is used to perform the action .
10327	Creates a new URL .
10328	Returns information about the request .
10329	Returns a table containing all the headers
10330	Gets all cookies in the request .
10331	Returns a table of the request parameters .
10332	Returns a table of the request scope attribute .
10333	Returns a table containing all the values of the page scope .
10334	Returns a table of the session scope .
10335	Returns the application scope attribute .
10336	Gets the user principal .
10337	Render the debug table .
10338	Generates a HTML table for the specified property name .
10339	Performs a search .
10340	Sets the current screen state .
10341	Traverses a term .
10342	Compare two search nodes .
10343	Updates the given registers .
10344	Notifies all registered property changes .
10345	Leave a clause .
10346	Returns true if the given context is a top - level function .
10347	Returns an array containing all of the elements in this sequence .
10348	Sets the arguments for this operator .
10349	Gets the fixity .
10350	Returns true if this association is infix .
10351	Compare priority .
10352	Called when a property change is changed .
10353	Register a work flow controller .
10354	Returns an enum attribute factory for the given class .
10355	Creates a component factory .
10356	Returns the storage cell of the given variable .
10357	Returns true if this variable can be bound .
10358	Set a column s attributes .
10359	Set row attributes .
10360	Get column attributes or null if not found .
10361	Get the row attributes for a particular row .
10362	Internal insert .
10363	Creates a new time range type .
10364	Creates a new type instance .
10365	Returns true if the given value is an instance of the given string .
10366	Creates the initial context .
10367	Updates the registers .
10368	Returns the value of this expression group .
10369	Finds the path for a goal .
10370	Joins the given forward path join algorithm .
10371	Cache a block .
10372	Get the properties for a named resource .
10373	Sets the batch rate .
10374	Read data from the source block .
10375	Skips the specified number of bytes .
10376	gather disjunctions .
10377	Read an int from a byte array .
10378	Write an int to a byte array .
10379	Write a 24 - bit integer into a byte array .
10380	Reads a 24 - bit int from a byte array .
10381	Reads a short from a byte array .
10382	Write a short to the buffer .
10383	Returns a new TreeSearchState for the given Operator .
10384	Returns an iterator over all the operators in this tree .
10385	Returns the id of this attribute .
10386	Returns the value of the attribute .
10387	Sets the value of this attribute .
10388	Convert a list of strings to an array of strings .
10389	Convert an array to a string list
10390	Converts a name to a camel case name .
10391	Convert case to upper case .
10392	Prints the current logging configuration
10393	List handlers .
10394	Resolve a call point .
10395	Create a call point .
10396	Returns true if this attribute is a sub category of this attribute .
10397	Returns the ID of this attribute value .
10398	Returns the value at the given level .
10399	Gets the last value .
10400	Serialize this hierarchy attribute .
10401	Deserialize the hierarchy attribute .
10402	Compute the manhattan distance .
10403	Modifies a value in a bucket .
10404	Adds an error message .
10405	Adds an exception to the ActionErrors .
10406	Writes a string to the output stream .
10407	Classify a decision tree .
10408	Compares two objects .
10409	Returns an iterator over this list .
10410	Compute the log2 value .
10411	Compute the log2 value .
10412	Convert an integer value to an integer .
10413	Convert an integer value to an integer .
10414	Returns the int value for the given value .
10415	Returns the int value for the given value .
10416	Returns the number of characters in an integer .
10417	Returns the number of characters in the given long value .
10418	Returns the number of digits in the given integer value .
10419	Set the head of the function .
10420	Emits the instructions to the given machine .
10421	Set the current work flow screen .
10422	Evaluates the candidate .
10423	Get a property by key .
10424	Returns an array of properties for the specified key .
10425	Returns an iterator that iterates over the specified base and modifier .
10426	Creates array properties .
10427	Sets the throttle rate .
10428	Evaluates the given numeric type .
10429	Try to load the properties .
10430	Gets the properties from the system property file .
10431	Get the properties from the classpath
10432	Get the properties from the current working directory .
10433	Leave a functor .
10434	Returns the value of this variable .
10435	Sets the substitution .
10436	Creates a priority queue .
10437	Closes the connector .
10438	Append a logging event .
10439	Starts the connector thread .
10440	Initialize the printers .
10441	Commits the transaction .
10442	Rolls back the transaction .
10443	Request a write operation asynchronously .
10444	Adds a cached operation to the cache .
10445	Acquires the global write lock .
10446	Releases the global write lock .
10447	Enlisted this resource .
10448	implements the visitor to enter media query nodes .
10449	Inserts the specified element into the queue .
10450	Returns the first element in the queue or null if the queue is empty .
10451	Put an element into the queue .
10452	Inserts an element into the buffer .
10453	Returns the next object .
10454	Get the property as a boolean .
10455	Get the property as Integer .
10456	Get the property as long .
10457	Creates a new mixin .
10458	Sets the addition visitor .
10459	Backtracking operator .
10460	Retrieve code code from WAM .
10461	Execute the given query and extract the result set .
10462	Decodes a heap .
10463	Captures all fields in the current class .
10464	Restores all fields from the given object .
10465	Returns the value for the specified attribute .
10466	Set the value for a given class .
10467	Returns all the fields for a given class .
10468	Execute the tests .
10469	Adds an element to the queue .
10470	Polls all items in the queue .
10471	Creates a new search node .
10472	Creates a priority queue .
10473	Creates a new TermWalker using the given visitor .
10474	Creates a new goal walker .
10475	Create a term walker for a positional term .
10476	Create a term walker for a positional goal .
10477	Create a term walker for positional terms .
10478	Load properties from an input stream
10479	Returns a Properties object from a file
10480	Get the properties from the given URL .
10481	Returns a Properties object from the given pathname .
10482	Compute the grid size .
10483	Initialize the font metrics .
10484	Add a new property change listener
10485	Add a new property change listener .
10486	Removes a property change listener .
10487	Fire a property change event .
10488	Creates a new type instance .
10489	Perform a fade action .
10490	Show the left vertical bar .
10491	Show the left vertical bar .
10492	Show the right vertical bar .
10493	Sanitize radio controls .
10494	Waits until the specified thread is interrupted .
10495	Waits until the specified timeout expires .
10496	Execute the command line .
10497	Append classpath elements .
10498	Creates a new date range type .
10499	Prints the introduction .
10500	Initializes the console reader .
10501	Evaluates a sentence .
10502	Evaluate the query .
10503	Returns a MultiTypeData object for the given boolean value .
10504	Converts a byte value into a MultiTypeData object .
10505	Returns a MultiTypeData object for the given character .
10506	Returns a MultiTypeData for the given short value .
10507	Returns a MultiTypeData for the given integer value .
10508	Returns a MultiTypeData for the given long value .
10509	Returns a multi - type representation of a float .
10510	Converts a double value into a MultiTypeData object .
10511	Create a MultiTypeData object from a string
10512	Returns a MultiTypeData object for the given object .
10513	Convert a MultiTypeData object to an object .
10514	Sets an attribute .
10515	Clears the map up to the specified key .
10516	Expand the size of the array with the given key .
10517	Internal method .
10518	Compare two search nodes .
10519	Parse operators .
10520	Get operators matching a fixity name
10521	Checks if a candidate operator is valid for a given fixity
10522	Creates a new search node .
10523	Right pad a string to a given size
10524	Returns the parsing errors .
10525	Returns a string representation of the options in force .
10526	Gets the usage on the command line .
10527	Adds trailing pairs to the properties .
10528	Add options to the given properties .
10529	Adds an option to the map .
10530	Takes a number of free arguments from a properties .
10531	Checks that the given argument matches the required format .
10532	Compares the iterators and returns a String with the expected mappings .
10533	Returns a list of the options .
10534	Gets the command line options .
10535	Set the current stemmer .
10536	Get the actual stemmer .
10537	Returns the stem of the specified word .
10538	Main entry point .
10539	Creates a new float type .
10540	Resets the state of this instruction .
10541	Trace the environment frame .
10542	Trace a choice frame
10543	Internal call .
10544	Get the next stack frame .
10545	backtrack method
10546	Track a point
10547	Unwinds the tail of two addresses .
10548	Traverses the trail .
10549	Unify two instructions .
10550	Unifies a constant .
10551	Print a slot .
10552	Returns a random start state .
10553	Checks if the given puzzle isSolvable .
10554	Returns a new board state with the given operator .
10555	Returns a list of valid operators .
10556	Pretty print the board .
10557	Swaps the tile at the specified location .
10558	Swaps the two tiles .
10559	Convert the goal state to a list of characters .
10560	Converts a list of characters to an empty state .
10561	Convert a log4j message to a log .
10562	Convert a log4j level to a log4j level .
10563	Add an element to the queue .
10564	Adds an element to the queue .
10565	Increment the size of an element .
10566	Decrement the size of an element .
10567	Signal on size threshold crossing .
10568	Returns an enumeration with the given name .
10569	List all bindings for a given context .
10570	Add a property to the environment .
10571	Remove a property from the environment .
10572	Runs the garbage collection .
10573	A simple node
10574	Adds a mixin reference to the stack .
10575	Creates a variable reference .
10576	Set the maximum row height .
10577	Updates the maximum column s width .
10578	Executes the action .
10579	Creates a new heuristic search node .
10580	Executes the Struts ActionForward
10581	Substitute the builtIns table .
10582	Initializes the symbol table .
10583	Returns the top level check .
10584	Prints a list of arguments .
10585	Compares two numeric types .
10586	Marks this instance as running .
10587	Marks the shutdown .
10588	Marks the shutdown .
10589	Inserts an element into the heap .
10590	Ceiling n .
10591	Updates the minimum element .
10592	Compare two nodes .
10593	Inserts a new node into the root .
10594	Starts the cache .
10595	Returns a set of objects that match the given method .
10596	Returns a collection of objects that match the given method .
10597	Finds all solutions of a given method .
10598	Returns the next element in the sequence .
10599	Restores the stored values from the given object .
10600	Gets the value of a property .
10601	Put a multi - typed data .
10602	Sets the value for the given property .
10603	Captures the object s value .
10604	Removes an element from the queue .
10605	Convert modifiers to string .
10606	Converts a string to an integer .
10607	Convert a string to a Date
10608	Checks if string is a date .
10609	Checks if string is a time .
10610	Checks if string is a DateTime object
10611	Get a PrologParser for a given string
10612	Creates a token source for the Prolog parser .
10613	Get the Prolog parser for the given input stream .
10614	Returns true if the instruction is constant .
10615	Returns true if the given instruction is a void variable .
10616	Returns true if the given instruction is non - arg .
10617	Returns the children of this node .
10618	Returns the argument at the given index .
10619	Returns an iterator over the children of this node .
10620	Returns a string representation of the arguments .
10621	Retrieve measure appender .
10622	Retrieve the MeasureAppender
10623	Execute the SQL query
10624	Emits code .
10625	Sets the basic type .
10626	Consult the given input stream .
10627	Print a variable binding .
10628	Expands the results into a map .
10629	Start the component .
10630	Read the stream .
10631	Returns the current time in milliseconds .
10632	Returns the current time in milliseconds .
10633	Update track info .
10634	Update the playlist information .
10635	Render the final output .
10636	Handle music usage .
10637	Handles an event request .
10638	Fire music request .
10639	Initialize the parser .
10640	Start the reader .
10641	Shuts down the connection .
10642	Reset parser .
10643	Parse packet packets .
10644	Process packet .
10645	Sets the option .
10646	Creates a new chat .
10647	Initialize this object .
10648	Resets the content .
10649	Sets a property .
10650	Adds a new filter to the array .
10651	Process the request .
10652	Clears all properties .
10653	Initialize the writer .
10654	Sends a packet to the server .
10655	Gets the next packet from the queue .
10656	Write stream .
10657	Returns a list of informations for this type .
10658	Returns true if the given descriptor contains the given descriptor .
10659	Adds a listener to be notified of event life cycle events .
10660	Shuts down the executor .
10661	Compares two files .
10662	Clean up a byte buffer .
10663	Checks if the given entry is valid .
10664	Mask null .
10665	Compare two objects
10666	Returns the entry associated with the specified key .
10667	Resize the table .
10668	Adds the specified map to this map .
10669	Removes the value associated with the specified key .
10670	Removes the entry for the given key .
10671	Removes a mapping from the map .
10672	Adds an entry to the table .
10673	Helper method to create a delegate map .
10674	Encode binary value .
10675	Encodes a byte array into a hex string .
10676	Encodes a string into base64 .
10677	Encodes a byte array .
10678	Iterate over the collection .
10679	Set a controller to select a track .
10680	Sets the next progress controller
10681	Set playback changeable controller
10682	Set the controller of the volume change
10683	Broadcast the available playlists
10684	Handle command resources
10685	Handle volume .
10686	Handle jump .
10687	Select a track .
10688	Gets the thread cache .
10689	Gets the request cache .
10690	Returns alternate field name .
10691	Get a filtered map from the source map .
10692	Returns the path for the shard .
10693	Adapts the given object to a Session .
10694	Invoke a method on the target object .
10695	Deletes a tree .
10696	Update one entity .
10697	Sets the ping interval .
10698	Schedules a new ping task .
10699	Adds all options from an array of options .
10700	Checks if option is used .
10701	Parses the command line arguments
10702	Prints usage information .
10703	Parse the command line .
10704	Initialize the connection .
10705	Called when TLS is received from server .
10706	Returns the compression handler for the compression method .
10707	Request stream compression .
10708	Opens the stream compression .
10709	Notifies all listeners that an error occurs .
10710	Notifies all registered connection listeners .
10711	Register a SASLMechanism .
10712	Returns a list of SASL mechanisms .
10713	Gets the output plugin behaviour .
10714	Log a message at INFO level .
10715	Log an error message .
10716	Log a message .
10717	Creates a start event .
10718	Creates a start event .
10719	Notifies all registered writer listeners .
10720	Returns true if the given resource exists .
10721	Returns whether or not the given source exists in the given source .
10722	Returns true if there are any resource with the given IDs
10723	Provide all the resources that match the given IDs .
10724	Get a map from a key
10725	Gets the cache key .
10726	Remove the given key from the cache .
10727	Puts an item in the cache .
10728	Returns a map containing all files in the classpath .
10729	Includes the given file .
10730	Includes a jar file .
10731	Adds a sasl mech .
10732	Adds a collection of authentication mechs .
10733	Creates a thread that allows debugging .
10734	Activate the safe post processor .
10735	Registers standard events .
10736	Register an event listener .
10737	Register an event ID
10738	Tries to acquire a file lock .
10739	Unregisters an event ID .
10740	Checks if the event can be executed .
10741	Creates a new DSE session .
10742	Create a player error .
10743	Start playing the player
10744	Stop playing music
10745	Add a player command to the player .
10746	Create a new playlist request .
10747	Create a playlist answer .
10748	Append post fix .
10749	Adds a query parameter .
10750	Adds a query parameter .
10751	Add a query parameter .
10752	Adds a query parameter .
10753	Get a playlist .
10754	Launch the Nakamura button .
10755	Start the nakamura .
10756	Check if URL exists
10757	Called when a browser button is pressed .
10758	Create an ImageIcon from a resource
10759	Main entry point .
10760	Adds the specified values to this array .
10761	Export this object to a map .
10762	Get the value at the specified index .
10763	Get value by key
10764	Get value as int
10765	Get value as double .
10766	Get value as a string
10767	Creates a new command resource .
10768	Verifies that the given command is valid .
10769	Verifies the capabilities of a command .
10770	Verifies the given command .
10771	Execute batch asynchronously .
10772	Returns all subclasses of the given class .
10773	Gets the subclasses of a class .
10774	Search for classes .
10775	Search for classes in a directory .
10776	Searches a jar file and returns a map of classes found in the jar .
10777	Returns a list of resources
10778	Returns the number of inner maps .
10779	Processes a packet .
10780	Get volume from event model
10781	Sends a RSM error message .
10782	Create an error response .
10783	Checks if the identifiable is target .
10784	Enables the login .
10785	Decorates a set .
10786	Sets the name of this user .
10787	Sets the state of this request .
10788	Returns a collection of all the groups that contain this entry .
10789	Appends the RME element to the query element .
10790	Parse a RSM element
10791	Filters a list of objects .
10792	Creates a stop event .
10793	Reloads the roster .
10794	Create a roster entry .
10795	Get all entries in the roster group .
10796	Get the presence of a user .
10797	Set offline presences .
10798	Fire the roster listeners .
10799	Sets the digest for the given connection ID and password .
10800	Generates a music resource .
10801	Create a player request .
10802	Get the time passed in parameter
10803	Registers an update listener .
10804	Initialize the properties file .
10805	Reload the properties .
10806	Parse a stream error .
10807	Parse the mechanisms element .
10808	Parse the compression methods .
10809	Parses a packet extension .
10810	Decodes a string value .
10811	Verify the capabilities .
10812	Get the playback state of a resource
10813	Returns the secret key for the given subdomain .
10814	Check if multiple domains are allowed .
10815	Replaces the specified value with the specified key .
10816	Gets the key set .
10817	Returns a reference values .
10818	Removes the specified reference .
10819	Returns the entry associated with the given key .
10820	Generate a hash for the given entry .
10821	Creates a new entry .
10822	Controls the presence indicator .
10823	Sets the presence .
10824	Updates the most vague .
10825	Process a message .
10826	Generate a script
10827	Checks if the output directory exists
10828	Load properties from a file .
10829	Write a file to a file .
10830	Get the progress of the resource
10831	Decorates a collection .
10832	Discover service resolver .
10833	Get the configuration .
10834	Gets the thread pool .
10835	Stop music .
10836	Verify if the player is a target .
10837	Get a cluster by name .
10838	Adds a connection listener .
10839	Add a packet listener .
10840	Add a packet sending listener .
10841	Notifies all registered listeners of a packet .
10842	Adds a new packet interceptor .
10843	Notify all interceptors of a packet .
10844	Converts a property name into an object .
10845	Called when a connection was lost .
10846	Gets the current thread id .
10847	Validates a node .
10848	Returns the key for the given value .
10849	Gets the value at the given index .
10850	Looks up the next entry in the cache .
10851	Lookup a node in the tree .
10852	Compare two objects .
10853	Returns the least node at the given index .
10854	Returns the most node at the given index .
10855	Find the next node in the tree .
10856	Returns the most valid node at the given index .
10857	Returns the least valid node at the given index .
10858	Copies the color from the node to the node .
10859	Check if node is red .
10860	Check if node is black .
10861	Get grand parent node .
10862	Returns the parent of the given node .
10863	Returns the right child of the given node .
10864	Returns the left child of the given node .
10865	Rotate the left node at the given index .
10866	Rotate right node .
10867	Perform red - black insertion .
10868	Performs red - black delete .
10869	Checks that the given object is not Comparable .
10870	Inserts a new value into the map .
10871	Returns true if the key contains the given key .
10872	Returns true if the value contains the given value .
10873	Returns the value associated with the given key .
10874	Removes the specified key from the cache .
10875	Clears the map .
10876	Returns a set of keys in this map .
10877	Returns the values of this map .
10878	Returns a filterable set of entries .
10879	Copies entries from the map to another map .
10880	Deletes all entries in the cache .
10881	Culls the cache .
10882	Activate the trusted hostname .
10883	Get a player request
10884	Initialize the roster store .
10885	Opens the roster store .
10886	Scan a range of addresses .
10887	Get subnet 0 .
10888	Export this object to a map .
10889	Import track info from a map .
10890	Adds all applications from the given set .
10891	Executes application .
10892	Prints the list of classes .
10893	Prints usage information .
10894	Runs the command .
10895	Create a mute event
10896	Create a mute event
10897	Get a schema by name .
10898	Write lines to file .
10899	Checks if the JAR is in a jar .
10900	Adds an application option .
10901	Get the schema of the thrift items .
10902	Gets a field by its name .
10903	Gets the package name from a jar entry .
10904	Map content to values .
10905	Create listener .
10906	Sets the iteration state .
10907	Iterate over the collection .
10908	Performs an iteration of the iterator .
10909	Get the track info for the given event model .
10910	Export the known information .
10911	Import a resource .
10912	Create an error image
10913	Get image from URL .
10914	Perform a GET request .
10915	Reverse the source map .
10916	Performs a cartesian multiplication .
10917	Starts the daemon .
10918	Return this object to the pool .
10919	Create an ended event
10920	Get the current track info .
10921	Updates a track with new track info .
10922	Randomly shuffle the track list .
10923	Verifies that the capabilities can be used .
10924	Export this message as a map .
10925	Escape a string .
10926	Called when a challenge is received .
10927	Convert this object to JSON .
10928	Process the event .
10929	Handle event .
10930	Join all queues .
10931	Set property .
10932	Removes a property .
10933	Adds a principal .
10934	Removes a principal .
10935	Called when a root window is closing .
10936	This method is called when a user was encountered .
10937	Invoked when a presence event is fired .
10938	Check if the resource is permanent
10939	Sets the name of this group .
10940	Returns true if the map contains the given key .
10941	Returns true if the set contains the specified value .
10942	Inserts the specified value into the map .
10943	Clears the cache .
10944	Hash a key .
10945	Checks if two keys are equal .
10946	Checks if two values are equal .
10947	Ensure that the capacity is greater than the specified capacity .
10948	Calculate the new capacity .
10949	Creates an iterator over the entries in this map .
10950	Load a map from a binary stream
10951	Registers the module .
10952	Initialize the addOn .
10953	Notifies all listeners that a reconnection failed .
10954	Notifies the listeners that an attempt to reconnect in .
