0	Fast path emit a value .
1	Return an observable from an observable source .
2	Returns an Observable with the specified sort function .
3	Turns an observable into an observable .
4	Create an unicast processor .
5	Create a new unicast processor .
6	Return True if the source is a scalar map .
7	Returns a new flowable with a scalar map .
8	Reset the state .
9	Returns a Maybe from a completable .
10	Returns a Maybe from a single source .
11	Retry a given number of times .
12	Raises an exception if the object is not None .
13	Returns a function that returns an identity .
14	Returns a callable that is a callable .
15	Returns a function that returns a new value .
16	Creates a Cast to a class .
17	Create an unicast subject .
18	Create an unicast subject .
19	Create an unicast subject .
20	Create an unicast subject .
21	Waits until there is no error .
22	Wait for the result of a non - blocking error .
23	Block until the current timeout is reached .
24	Drain a queue .
25	Request a subscription .
26	Post - complete post - completion .
27	Complete the value .
28	Returns the value of the notification .
29	Return the error associated with the notification .
30	Validate the upstream and next .
31	Sets the next observable .
32	Validate upstream and next subscription .
33	Sets the next subscription .
34	Return the maximum of a and b .
35	Multiply a and b .
36	Add n to the given number .
37	Given an exception and an exception return a NullTypeError .
38	Add an object to the list .
39	Shutdown the pool .
40	Creates a scheduled executor .
41	Set the final subscription .
42	Emit a loop in a loop .
43	Convert an error into a RuntimeError .
44	Flatten an exception into a list .
45	Raises an exception if the exception fails .
46	Clear the set of resources .
47	Return the number of resources in this set .
48	Return True if the source is a scalar map .
49	Returns an observable that maps a value to a scalar value .
50	Check if a subscriber is available .
51	Check if a notification is available .
52	Start the subscription .
53	Start an empty subscription .
54	Return True if t is available .
55	Get a disposable resource .
56	Complete the given value .
57	Handle an error .
58	Complete the future .
59	Returns a new Flowable with the concatenation of the given mapper .
60	Concatenate an iterable .
61	Returns a new Flowable with the given sort function .
62	Wait for the given number of events to be available .
63	Request n times .
64	Add a new PublishDisposable .
65	Remove a PublishDisposable .
66	Turns a ConnectableFlowable into an observable .
67	Parse HTTPServiceMethod annotations .
68	Sets the delay for the given amount .
69	Creates an error response .
70	Calculate the number of delays for the given unit .
71	Creates sample data
72	Get HTTP HTTP method from a string .
73	Search for a single user .
74	Encode raw password using salt generator
75	Returns True if the raw password matches the encoded password .
76	This function is used to check if the current version is running .
77	Returns whether or not the disable checks are enabled .
78	Get the version of the spring - core .
79	Add an attribute exchange configuration .
80	Creates a new OAuth2 client .
81	Gets the OAuth2 resource server configurer .
82	Returns the registry that requires the given channel .
83	Compares an attribute with the given attribute .
84	Retrieve an entry for a given dn .
85	Returns a set of values that match the given filter .
86	Search for multiple attribute values .
87	Search for a single entry using a single entry .
88	Build a SearchControls object from the original object .
89	Lookup the primary keys in the database .
90	Build details for preauthenticated authorities .
91	Creates an embedded server definition .
92	Creates the servlet API filter
93	Creates a JaasApiFilter if it is present
94	Creates a whitelisted default type resolver .
95	Insert a spring security filter chain into the context .
96	Returns the persistentRememberMe token for a series ID .
97	Given a collection of attributes return a list of granted authority objects .
98	Creates a new Cipher object .
99	Sets up the authentication manager .
100	This method is called when the request is authenticated
101	Check if the principal has changed
102	Handle the authentication request .
103	Check the content length of the response .
104	Given a collection of authorities return a set of all of the given authorities
105	Sets the login processing URL .
106	Update the default settings for the login page .
107	Set all permissions and failure URLs to be allowed .
108	Map password value to a string .
109	Extracts the value of the cookie from the request .
110	Encodes a list of cookie tokens
111	Set a cookie .
112	Resolve an argument using the security context .
113	Extracts the query parameter from the request .
114	Get service port
115	Returns the principal of the authentication object
116	Logout from the request .
117	Attempts to authenticate the given authentication .
118	Build the provider URL from a list of URLs .
119	Sets the context environment properties .
120	Returns the URL to redirect to .
121	Do the end of the tag .
122	Initialize the user details service .
123	Returns the UserDetailsService instance .
124	Adds the parameters to the attributes dictionary .
125	Returns True if the request has authentication .
126	Check if authentication request is required
127	Check if a request is authenticated .
128	Returns True if the current authentication is authenticated .
129	Returns True if the request is valid or not .
130	Creates a method security expression root .
131	Gets the JWKSet from the web server .
132	Encodes a string to UTF - 8 .
133	Returns a list of granted authorities
134	Returns the user details for the given assertion .
135	Returns the pre - authenticated principal
136	Concatenate multiple byte arrays together .
137	Returns a copy of a byte array .
138	Returns a list of granted authorities .
139	Preprocess a map of Grants .
140	Converts a value into a list of granted authority objects .
141	Adds the given value to the result list .
142	Get the principal from a request .
143	Returns a shared object .
144	Returns the URL to redirect to HTTPS .
145	Invoke an object .
146	Returns a string with the given role name .
147	Ensure that all roles have any role .
148	This method is used to process the auto - login cookie .
149	Called when a login is successful .
150	Attempts to switch to a user .
151	Try to switch the current user to another user .
152	Sets the exit user URL .
153	Display a public contact .
154	Returns the WSGI filter chain .
155	Decodes a JWT and validates it .
156	Returns True if the access token is valid .
157	Returns True if the URL is allowed for the current user .
158	Convert a JWT to a list of Grants .
159	Generate a CsrfToken for the request .
160	Show admin permissions for a contact
161	View for adding permissions for a contact
162	Route to addPermission
163	Delete permission .
164	Return role with default prefix .
165	Creates a new user details resource factory .
166	Returns a list of attribute values .
167	Returns the first attribute with the given name .
168	Encodes a string into a byte array .
169	Decodes the given bytes into a string .
170	Returns the names of all parameter annotations in a given object .
171	Register a new contact .
172	Returns a collection of configuration attributes for the specified class .
173	Adds a secure method .
174	Returns all config attributes
175	Returns true if the given name matches the mapped name .
176	Create a matcher for any request .
177	Handle a bind exception .
178	Returns a random contact
179	Clear authentication attributes .
180	Retrieves a field by its name .
181	Returns the URL for the service .
182	Creates a redirect URL for the given service URL .
183	Extract the SHA prefix from a string .
184	Respond to an authentication request .
185	Checks the stack for duplicates
186	Returns a list of registered exceptions .
187	Extracts the cause of the given exception .
188	Registers a service to suppress warnings .
189	Converts a list of user authorities to a set .
190	Check if two bytes are equal .
191	Sets the default failure URL .
192	Sets the resolve hidden inputs .
193	Build the request URL .
194	Checks if the given URL is absolute .
195	Returns list of OpenIDAttribute objects for the given identifier .
196	Tries to convert the ID of a ResultSet to long .
197	Creates the entries for the given ACL .
198	Create an object identity for the given object .
199	Updates the object identity in the database .
200	Save the HTTP request to the response .
201	Create a new ServerWebExchangeMatcher that matches the given patterns .
202	Returns an instance of this server .
203	Create a text encryptor .
204	Encrypt a password and salt .
205	Encrypt a password and salt .
206	Write headers to the response .
207	Determines the target URL for the request .
208	Determine the target URL .
209	Sets the target URL parameter .
210	Get the directory with the given id .
211	Build a DistinguishedName object from a username .
212	Creates the shared objects
213	Sets up the login property in the login config file .
214	Returns a human readable date .
215	Internal helper to parse a date string into a long number .
216	Update the cache with the given value .
217	Sets the authentication details to the request .
218	Returns the security name for the given subject .
219	Returns the list of groups for the given security name
220	Changes the password of the current user .
221	Build a DistinguishedName object for a group .
222	Verifies that the maximum number of sessions is exceeded .
223	Copies credentials from source to dest .
224	Returns the filters for the given request .
225	Get all filters
226	Returns the application context
227	Returns the full Distinguished Name of the given dn .
228	Set session attributes .
229	Create a preemptive basic authentication scheme .
230	Adds the specified filters to the RestAssured API .
231	Register a new filter .
232	Create a basic authentication scheme .
233	Return an NTLM authentication scheme .
234	Create an authentication scheme .
235	Set proxy specification .
236	Print the response options to a stream .
237	Create a redirect configuration .
238	Create a default encoder for a query charset .
239	Create a new object mapper with a default object mapper type .
240	Create a new objectMapperConfig with a Jaxb object mapper .
241	Returns a RestAssuredConfig with the given log configuration .
242	Creates a new REST endpoint configuration with the given session configuration .
243	Creates a new RestAssuredEndpointConfig with the given object mapper config .
244	Create a new REST endpoint configuration with the specified configuration .
245	Returns a RestAssuredConfig with the given configuration .
246	Returns a RestAssuredEndpointConfig with the given configuration .
247	Create a new REST endpoint configuration with default configuration .
248	Create a new REST endpoint configuration .
249	Creates a new Rest_MvcConfig with configuration settings .
250	Return a RestAssuredMockConfig with the given configuration .
251	Creates a new REST endpoint configuration with the specified parameters .
252	Creates a new RestAssuredMockConfig with a default configuration .
253	Create a new SSLAuthSettings for all hostnames .
254	Create a new XmlPathConfig with a set of namespaces .
255	Create a new XmlPathConfig with the given prefix and namespace URI .
256	Perform a HTTP request .
257	Set request headers .
258	Sets the default proxy parameter
259	Sets the control name for a multiPart specification .
260	Sets a MultiPart Specification builder .
261	Set credentials for the client .
262	Create a new NTLM client .
263	Creates a new headers with additional headers .
264	Reset the context
265	Sets a response header
266	Build the response .
267	Creates a Detailed cookie matcher for the given value .
268	Create a Detailed cookie matcher for a comment .
269	Creates a Detailed cookie matcher for the expiry date .
270	Creates a Detailed cookie matcher for the given domain .
271	Creates a Detailed cookie matcher for the given path .
272	Creates a Detailed cookie matcher with secured property .
273	Creates a Detailed cookie matcher .
274	Creates a Detailed cookie matcher that matches version property .
275	Creates a Detailed cookie matcher for the max age property .
276	Expects a header with the expected value .
277	Expects a header with the expected value .
278	Expects a cookie .
279	Creates a proxy specification for the given host .
280	Build a JSONPathConfig with a number return value .
281	Create a new JsonPathConfig with a default parser type .
282	Create a default log config object .
283	Create a new log config with logging if validation fails .
284	Creates HTTP request base .
285	Create a new MultiPartConfig with default boundary .
286	Add an attribute to the request spec .
287	Add a header to the request spec .
288	Add a multi part to the request spec .
289	Add result handlers to the request spec .
290	Creates a new HTTPClientConfig with a given parameter value .
291	Returns a new HTTPClientConfig with the given params .
292	Create a new HTTPClientConfig object .
293	Create a new HTTPClientConfig for HTTP multipart mode .
294	Get a JSON object from a path .
295	Converts a value into an integer .
296	Converts a value into a byte object .
297	Gets a short value from a value .
298	Converts a value into a float .
299	Gets a double value from a path .
300	Gets a long value from a value .
301	Get a list from a JSON representation .
302	Get a map from a path .
303	Gets an object from a path .
304	Sets the body for the given object .
305	Add a cookie .
306	Adds a parameter to the spec .
307	Adds a parameter to the spec .
308	Creates a mock param config .
309	Create a logging filter that logs the given stream .
310	Creates a new Cookies .
311	Clean up a set of keys and sources .
312	Index all explicit bindings .
313	Get the binding for the given key .
314	Tries to convert a constant string binding .
315	Check if a dependency has been bound .
316	Remove failed jit binding .
317	Returns the dependencies of the given binding .
318	Create an uninitialized binding .
319	Injects all parameters into a single object .
320	Bind an injector to the state .
321	Bind the logger to the injector .
322	Check if a member is misplaced binding .
323	Return True if two methods are overridden .
324	Initializes the delegate .
325	Return the type of the provider .
326	Resolves all type literals .
327	Canonicalize a type literal .
328	Prepares type conversioners .
329	Canonicalize a class loader .
330	Returns True if the class has the same version of cglib
331	Returns True if the given member is publicly callable .
332	Convert annotations to key .
333	Request an instance of member injections .
334	Validate the injections .
335	Creates a new instance of the constructor .
336	Wraps the HTTP servlet request with the specified dispatcher .
337	Creates an internal factory .
338	Make sure the scope annotation is injectable .
339	Normalizes the path .
340	Generates an annotation for the given type .
341	Returns True if the annotation is retained at runtime .
342	Find the scope annotation for the given annotations .
343	Gets the key for the given member .
344	Get the name of a key
345	Initializes the delegate .
346	Adds the direct key binding to the binder .
347	Get a constructor injector .
348	Checks if the given interceptor class has a scope annotation .
349	Returns a real map binder .
350	Returns the value key for a new key .
351	Provisions an internal context .
352	Create a message for writing .
353	Creates a checked provider methods module .
354	Returns the list of assisted methods
355	Returns True if the given type is not specified .
356	Verify that the constructor has the given parameters .
357	Returns the dependencies of the given implementation .
358	Remove assisted dependencies .
359	Returns True if the given factory has an assisted injector or not .
360	Returns an assist module for the given method .
361	Invoke a method on the proxy .
362	Return an error message for missing implementations .
363	Creates a real set binding .
364	Returns the key for the new item
365	Finds the next filter matching the request .
366	Returns true if the given constructor has an annotation .
367	Returns the internal constructor .
368	Returns the dependency dependencies for this factory .
369	Create a module for annotated methods .
370	Get the annotation for a given method .
371	Get the line number for a member .
372	Initialize the injector .
373	Wraps the given callable with the given seedMap .
374	Wrap a callable with a transfer request .
375	Validate and canonicalize the object .
376	Returns an instance of members injector .
377	Creates a member injector for the given type .
378	Returns a list of injectors .
379	Returns a Key instance for the given type .
380	Returns a strategy for a given annotation .
381	Returns a strategy for the given annotation type .
382	Prune the stacktrace .
383	Returns the string representation of the source of the source
384	Format a collection of error messages .
385	Creates a new message .
386	Create a new message with the given message format .
387	Create a new message with the given message format .
388	Convert an element source to an ElementSource .
389	Returns True if class name is skipped .
390	Given a list of module class names return a StackTraceElement .
391	Manage JMX remote module .
392	Pushes a dependency onto the stack .
393	Pushes the given source into the stack .
394	Returns an initializable instance .
395	Provisions an instance of provider .
396	Called when a connection event is received .
397	Add a connection event processor .
398	Gets the result of a future task .
399	Raises an exception if the given exception is not unchecked .
400	Register a RemotingProcessor for the given command code .
401	Registers the default processor .
402	Returns the processor for the given command code .
403	Get a URL from a URL .
404	Decodes a protocol code from the stream .
405	Returns all connections .
406	Scan for connections .
407	Get and create a connection .
408	Creates a connection pool and heal if necessary .
409	Remove a task from the pool .
410	Attempts to heal the connection pool if needed .
411	create connection in pool
412	Closes a connection
413	Called when the connection is closed .
414	Closes the connection
415	Adds an attribute to the object if it exists .
416	Register user processor .
417	Register a user processor to the RPC server .
418	Dispatch an RPC request to the user processor .
419	Deserialize request command
420	Preprocess a RemotingContext
421	Log a timeout .
422	Log an RPC request .
423	Process message .
424	Invoke a Remoting command .
425	Send a Remoting command .
426	Convert a bit set to a byte .
427	Convert an integer to a bit set .
428	Add a reconnect task to tasks .
429	Stop this connection .
430	Creates RemotingCommand
431	Filter connections by service status
432	Monitor the connection pools .
433	Closes the last select connections
434	Get a boolean value from a system environment variable .
435	Log an info message .
436	Check if the request is timeout
437	Returns the user processor with the given classname
438	Get a random connection from a list of connections .
439	Get a value from the context .
440	Get the value of a property .
441	Resolve the response command to an object
442	Convert a RpcResponseCommand to a native object .
443	Convert an RpcResponseCommand to a RuntimeError .
444	Returns a string describing the error message .
445	Creates and returns a RpcServerException object .
446	Print the connection trace log
447	Creates an event loop group .
448	Parse the remote address from a Channel .
449	Parses the local address from the channel
450	Parse the remote IP from a remote address .
451	Parse remote hostname from remote address .
452	Parses the local IP address from the channel
453	Parse remote port from a remote address .
454	Parses the local address of a channel .
455	Parses a socket address into an IP address .
456	Add a connection to the pool .
457	Remove a connection
458	Get a single connection .
459	Registers a custom serializer .
460	Returns the custom serializer for the given class name .
461	Registers a custom serializer for the given command code .
462	Returns the custom serializer for the given command code .
463	Start connection monitor
464	Check if remote address is connected
465	Set the write buffer water mark on the socket .
466	Return a new frame with the given opcode .
467	Send a batch of messages to the socket .
468	Set the code of this frame .
469	Validate a UTF8 string .
470	Update the message payload .
471	Check if the given protocol contains the requested protocol .
472	Translates the length of a single frame check to a valid length .
473	Translate a single frame to the real packet size .
474	Generate a base64 - encoded key .
475	Process a continuous frame .
476	Process a WebSocket frame .
477	Log a runtime exception .
478	Process a WebSocket frame .
479	Process a continuous frame .
480	Called when a frame is closed .
481	Process a close frame .
482	Checks if the buffer limit is exceeded .
483	Takes a list of byte arrays and returns a new buffer .
484	Returns the total size of the buffer in bytes .
485	Translates the HTTP handshake to a client .
486	Translates the server handshake client to a ServerHandshakeBuilder .
487	Decode the socket .
488	This method is called when the exception is wrong .
489	Closes a connection to an error .
490	Generate an HTTP response based on an error .
491	Send text to the WebSocket .
492	Reset the connection .
493	Connect to the read thread
494	Get the port of this URI
495	Sends a handshake to the engine .
496	Set the connection lost timeout
497	Stop the connection lost timer .
498	Starts the connection lost timer .
499	Restart the connection lost detection .
500	Execute the connection lost detection .
501	Cancel the connection lost timer .
502	The server handshake is received as a server handshake .
503	Send a ping frame .
504	Stop all websockets .
505	Get the port .
506	Perform additional read operations .
507	Handle an accept request .
508	Perform a read of a SelectionKey .
509	Do write operations .
510	Setup the WebSocket selector and the server thread .
511	Check if a single thread is closed .
512	Shutdown the server .
513	Get the socket for the given connection
514	Broadcast data to clients .
515	Broadcast text to multiple clients .
516	Broadcast data to all clients .
517	Fills the draft frames with the given data .
518	Transfer buffer from source to dest .
519	Start all persistence units
520	Get an entity manager by name .
521	A context manager that creates an entity manager with the given block .
522	Convert arguments to scala buffer .
523	Returns a list of arguments if there is one .
524	Get a message by key .
525	Get a message from a list of strings .
526	Returns a boolean indicating if the key is defined at the given language .
527	Return a new message with the preferred language .
528	Return the preferred messages .
529	Set the language of the result .
530	Creates a new builder for the given modules .
531	Add modules to the module .
532	Add the given bindings to the playbook .
533	Creates a new builder that overrides the given modules .
534	Add modules to the modules .
535	Overrides the given bindings .
536	Disable the given modules .
537	Call context .
538	Takes a request and returns a result .
539	Get an existing file .
540	Binding of an annotation .
541	Create a new Tuple .
542	Return a new Tuple5 .
543	Converts an executor to an executor .
544	Create a new JPAConfig .
545	Create a new JPAConfig instance .
546	Creates a default JPAConfig from a map .
547	Creates a flow from a string .
548	Creates a new JSON flow .
549	Adds a constraint validator to the factory .
550	Returns an instance of the given key .
551	Returns the first available method that matches the given name and parameter
552	Handle a client error .
553	Render a bad request .
554	Render an unauthorized request .
555	Render a 404 response .
556	Handle an error .
557	Log an internal server error .
558	Returns a nicely exception for the given exception .
559	Render an internal error .
560	Render an error .
561	Build documentation handler .
562	Build a documentation handler from a directory .
563	Creates a build handler for the given directory and jar .
564	Build a documentation handler from a directory and jar .
565	Build a documentation handler from a jar .
566	Combines the data stream into a complete stream .
567	Create an HTTP entity from the content .
568	Create an HTTP entity from a string .
569	Return a chunked entity .
570	Return a response with the given status and content .
571	Send a JSON response .
572	Create a response with the given status and content .
573	Send an HTTP response to a response .
574	Return a status object with the given status and content .
575	Find a user by id .
576	Return a new language that is preferred .
577	Return a unique call .
578	Create a call with a fragment .
579	Returns the absolute URL of a request .
580	Returns the URL for the given request .
581	Returns a function that runs the given connection .
582	Create a connection function from a block .
583	Build a static server .
584	Converts the given object into a JSON representation .
585	Deserialize JSON from JSON node .
586	Parse a JSON string .
587	Parse a JSON object .
588	Return a relative path between start and target path .
589	Canonicalize a URL .
590	Given a set of constraints return a list of constraints that are available .
591	Returns a tuple containing a displayable constraint .
592	Timeouts a given stage .
593	Returns True if the two classes are assigned to the same type .
594	Parse a cron expression into a date .
595	Returns a long interval for a given cron pattern
596	Create a new AhcWSClient .
597	Builds an application builder .
598	Render a todo .
599	Set session key and value .
600	Adds a key to the flash .
601	Returns the binding key for the given instance .
602	Returns a binding key for the given annotation .
603	Convert the underlying object to a Java object .
604	Returns an instance of the given provider .
605	Returns a binding from the underlying source .
606	Converts the given key into a Java binding .
607	Returns a binding for the given provider .
608	Return a list of available languages .
609	Return a preferred language .
610	Create a reader from an evolution map .
611	Creates a reader for the default evolutions .
612	Cleanup evolutions for a given database .
613	Create a new application builder with a configuration loader .
614	Creates a new application builder with a given loader .
615	Load a Guice application builder .
616	Loads a Guice application builder .
617	Load a Guice application builder .
618	Load a GuiceApplication builder .
619	Creates a new GuiceApplicationBuilder .
620	Encodes a cookie .
621	Returns the entity manager .
622	Returns a stack of EntityManager instances from the context .
623	Pop an EntityManager from the stack .
624	Apply a function to a flow through a splitter .
625	Creates a flow with a merge strategy .
626	Create an actor flow .
627	Converts a list of arguments to an empty list .
628	Returns a form with the given value .
629	Returns all validation errors
630	Convert all errors to JSON .
631	Returns the value associated with the given key .
632	Return a new form with the given value .
633	Converts the given text into an object .
634	Converts the given field into a Python object .
635	Returns the string representation of the given object .
636	Returns a string representation of a field .
637	Converts a type descriptor into a string .
638	Registers an optional converter .
639	Registers a formatter for the given type .
640	Registers an annotation formatter .
641	Encodes a cookie .
642	Select nodes from a node .
643	Convert list to Seq .
644	Convert an array to a Seq .
645	Returns an iterable with the specified arguments .
646	Convert JSON message to JSON .
647	Returns a new WebSocket with the result of the given request .
648	Checks if the given object is accessible to the class
649	Calculate the cost of a primitive class .
650	Calculate the total transformation cost for an executable .
651	Calculate the cost of an object transformation .
652	Get a message by key .
653	Get messages at the specified keys
654	Create a new database from a given URL .
655	Create a Sorter from a list of arrays .
656	Quick sort function .
657	Merge two elements .
658	Invoke an object .
659	Cast a numeric type to another .
660	Load an argument .
661	Emit a field instruction .
662	Push a zero or null .
663	Unbox the given type .
664	Process an array .
665	Compare two null values .
666	Returns a map of signatures to their corresponding classes .
667	Get a list of methods from the given superclass .
668	Filter constructors that are not visible .
669	Set the superclass of the class .
670	Get a field .
671	Adds the signature and exception types for the given method .
672	Return the cardinality of the value .
673	Set the naming policy .
674	Given a list of names and a list of methods find the corresponding method .
675	Resolve a child path .
676	Reads a string from a file .
677	Set the host for the request .
678	Create a HTTP request .
679	Create a HTTP CONNECT request .
680	Create a GET request .
681	Create a POST request .
682	Create a HTTP POST request .
683	Create a PATCH request .
684	Create a HTTP POST request .
685	Creates a HTTP HTTP HTTP request .
686	Create a HTTP request to trace a destination .
687	Create a HTTP request to a destination .
688	Sets the path of the request
689	Sets the cookie header
690	Add a query to the query
691	Sets the request parameters .
692	Set the query string .
693	Return the query string .
694	Get host URL
695	Set HTTP Basic Authentication .
696	Sets the host header
697	Create a request object .
698	Send and receive response .
699	Remove a range from the first handler .
700	Get the length of the exception table .
701	Collects actions interceptors .
702	Collects all action filters
703	Collect the results of all actions .
704	Collects all actions runtimes .
705	Safely set a simple property .
706	Retrieves a property from a given property .
707	Extract a reference from a property name .
708	Override the default print writer .
709	Sets an object reference
710	Returns object references by name .
711	Lookup an object reference
712	Returns the descriptor for the given table ref .
713	Find the descriptor by column ref .
714	Returns the table alias for the given table ref .
715	Register a table reference
716	Returns the table descriptor for the given table reference
717	Register a hint .
718	Serialize a value into a JSONContext .
719	Injects attributes into targets .
720	Injects parameters into targets .
721	Injects uploaded files into targets .
722	Converts a property name to a column name .
723	Converts a column name to a property name .
724	Convert a column name to a column name .
725	Stores the given value into the sql statement .
726	Converts a value to a destination type .
727	Returns a set of all registered wrappers .
728	Resolve a wrapper class .
729	Creates a new Madvoc wrapper .
730	Converts a path to a system system path .
731	Get the path from a filename .
732	Split a filename into parts .
733	Returns relative path relative to target path .
734	Register a web application component .
735	Add action configuration to the application .
736	Start Madvoc .
737	Configure the default configuration
738	Register Madvoc components
739	Excludes a list of jars .
740	Include a list of jars .
741	Include one or more entries .
742	Excludes a list of entries .
743	Scan a jar file .
744	Scan the directory for classes in the given directory .
745	Returns the bytecode signature for a given class .
746	Add files to be scanned .
747	Starts scanning files .
748	Creates a new transaction .
749	Returns the default scope of the specified type .
750	Get or initialize a madvoc scope .
751	Creates a context manager for the given type .
752	Decode a char array into a byte string .
753	Prepares a CSRF token .
754	Ensures that the token set is greater than max_until .
755	Check if a CSRF token is expired .
756	Create a copy of a source .
757	Make a copy of the source
758	Visit a property on the destination .
759	Initialize the table reference
760	Resolve a Petite scope .
761	Register a new bean definition .
762	Register a new bean definition .
763	Removes all registered beans for a given type
764	Resolves the list of beans for a given type .
765	Registers a constructor injection point for a given bean .
766	Registers a property injection point for a given property
767	Registers a set injection point for a given property
768	Registers a method injection point for a given bean .
769	Register init methods for a given bean .
770	Register destroy methods for a Petite .
771	Registers a Petite provider .
772	Registers a Petite provider .
773	Iterates over the names of the given type .
774	Define parameters from a dictionary .
775	Invoke an ActionRequest .
776	Resolves the Java version .
777	Adds an integer to the mv instruction .
778	Checks that the argument index is valid .
779	Returns the name of an advice field .
780	Returns an advice method name .
781	Load the arguments for a special method .
782	Load static method arguments from a MethodVisitor .
783	Load the arguments for a virtual method .
784	Loads an argument at the given index .
785	Stores the value of an argument at the given index .
786	Prepare the return value for the given method .
787	Create a unique key for a method signatures .
788	Defines a new array instruction .
789	Stores an array into an array .
790	Extract the encoding from the content .
791	Returns True if flags are empty False otherwise .
792	Resolve a Bearer token from the request header .
793	Require authentication to the response .
794	Prepare response for download .
795	Prepare the response .
796	Get a list of cookies from the request .
797	Reads the request body from a request .
798	Reads the request body from the request .
799	Stores the context path
800	Stores the context path to the context path variable .
801	Check if a query parameter is a GET parameter .
802	Takes a list of strings and converts them to a single string
803	Copies parameters from request to attributes .
804	Invoke body .
805	Render the body of the body body and return it .
806	Render the body body as a string .
807	Invoke all init methods in the bean .
808	Calls all the destroy methods defined in the definition
809	Creates a new instance of the given constructor .
810	Injects the parameters into the bean
811	Method to rewrite warnings .
812	Add a header .
813	Add a property to the map .
814	Puts a base property into the dictionary .
815	Store a profile property .
816	Gets a PropsEntry from a profile .
817	Resolve macros from a string .
818	Extracts a map from profiles .
819	Convert a stream to an integer .
820	Hash a password using Bcrypt
821	Returns True if plaintext matches hashed password .
822	Copy all bytes to out .
823	Copy max bytes to out .
824	Build action runtime .
825	Resolve action configuration .
826	Detects and registers an alias if it exists .
827	Reads action interceptors from an annotation .
828	Reads the action filters from an annotation .
829	Reads the package action path from the action class .
830	Reads the method action path from the action configuration .
831	Parse method alias .
832	Create action runtime .
833	Pre - commit the response .
834	Applies an advice to target class .
835	Injects the target into the target object .
836	Visitor for annotation annotations .
837	Resolve a JSON name to its real name .
838	Resolve a JSON name .
839	Lookup the TypeData for the given type .
840	Lookup the type data for the given class .
841	Find subclass type data for a given type .
842	Resolve a JSON name to a JSON name .
843	Resolve the real name of a type .
844	Get the content of the file .
845	Copies the bootstrap methods to a byte array .
846	Set the major version and classname .
847	Put the constant pool into the constant pool .
848	Put the bootstrap methods into the buffer .
849	Add a constant field reference .
850	Adds a constant member to the symbol .
851	Add a constant member to the constant pool .
852	Add a constant member reference .
853	Adds a constant to the constant pool .
854	Add a constant integer to an integer .
855	Add a constant to the constant pool .
856	Add a constant integer to an entry .
857	Adds a constant name and descriptor to the constant pool .
858	Adds a constant name and descriptor to the symbol .
859	Adds a constant to the constant pool .
860	Adds a constant to the symbol .
861	Add a constant method handle to the constant pool .
862	Add a constant method handle to the symbol .
863	Add a constant dynamic reference .
864	Adds a constant call to a constant invoke method .
865	Adds a constant reference to the constant pool .
866	Adds a constant reference to a dynamic reference .
867	Add a constant reference to the constant pool .
868	Add a constant reference to a constant .
869	Adds a bootstrap method to the bootstrap methods table .
870	Returns the index of the common super class with the same type .
871	Returns the hash of the given name .
872	Clear all entries .
873	Returns a list of all entries with the given name .
874	Returns an iterator over the entries in the iterator .
875	Returns a list of all entries .
876	Grow the buffer .
877	Append characters to the buffer .
878	Creates an annotation visitor for the given description .
879	Create proxy methods .
880	Start the first chain delegate
881	visit the first chain delegate
882	Parse a path into a Path object .
883	Appends a field to the path .
884	Configure the servlet context
885	Execute the target method .
886	Returns all field descriptors sorted by name .
887	Returns a proxy definition for the given type .
888	Converts a JtxTransactionMode to a DBTransactionMode
889	Reads a property from the source .
890	Store all entries in a map .
891	Append a new buffer to the end of the buffer .
892	Writes the list of objects to a writer .
893	Write all the objects to the given stream .
894	Writes the contents of the given stream to out .
895	Gets a string from a string .
896	Gets an integer from a key .
897	Gets a long value from a key .
898	Gets a double value from a key .
899	Gets a float from a key .
900	Returns the value associated with the given key .
901	Add a key - value pair .
902	Use this method to use the specified folder .
903	Returns a list of received emails .
904	Updates the flags of the received email .
905	Closes the folder if it exists .
906	Lookup a named parameter by name .
907	Alias for target .
908	This method is used to validate the given profiles .
909	Add a violation to the validator .
910	Set the mime type as the mime type .
911	Sets the raw data to download .
912	Sets the target stream .
913	Sets the target class .
914	Sets the target class .
915	Process the target file .
916	Create a new proxy .
917	Create a DefineClass and return it .
918	Returns an instance of the Proxetta class .
919	Write a class to the debug folder
920	Creates a new email address
921	Sets the email address .
922	Creates a new email address .
923	Sets the reply to .
924	Sets the email address .
925	Creates an email message .
926	Creates an email message .
927	Sets a HTTP header
928	Get the value of a property .
929	Get a boolean value from a string .
930	Get an integer value from a string .
931	Get a long value from a string .
932	Returns the resolved parameters for this method .
933	Serialize a value to the JSON context .
934	Lookup an alias for a given alias .
935	Resolve alias .
936	Resolve result path .
937	Resolve a result path to a string .
938	Returns the index of the last slash in a string
939	Return the last dot after a slash .
940	Return the index of the dot after a slash .
941	Strip the last camel case from the name .
942	Resolves a schema name from a database type .
943	Gets the column descriptors for the given property .
944	Initialize the threefish keys
945	Turns a 32 - bit integer into a byte array .
946	Demixing a demixing of a given j .
947	Puts into the key schedule
948	Initialize key using key message
949	Encrypt block .
950	Convert bytes to long array .
951	Removes all elements of a string from a string .
952	Get the path of the target .
953	Compress a file using zlib .
954	Returns a gzipped file .
955	Ungzip a file .
956	Returns a list of all the entries in the zip file .
957	Unzip a file .
958	Adds a file to the zip stream .
959	Adds content to a ZIP file .
960	Returns the field descriptor for the given name .
961	Get a property descriptor by name .
962	Sets the bundle name for this request .
963	Sets the locale attribute of the session .
964	Returns the locale for the given session .
965	Returns a list of parameters for a given name
966	Adds a list of profiles
967	Get a 32 - bit 32 - bit integer .
968	Reads a stream of data from an input stream .
969	Get a Label object from the bytecode offset .
970	Get the offset of a TypeAnnotation .
971	Reads element values from an annotation buffer .
972	Reads the verificationTypeInfo from the frame .
973	Reads the bootstrap_methods attribute .
974	Returns a list of constructor descriptors .
975	Returns the constructor descriptor for the given arguments .
976	Returns the request s attributes as a map
977	Creates a map from a HTTP request .
978	Convert array to long array .
979	Initialize the Decora Manager
980	Registers a file consumer with the given file consumer .
981	Add a file to the search path .
982	Add a file to a container .
983	Include files .
984	Exclude files .
985	Adds a path to the list
986	Find all files .
987	Initialize the todo files
988	Returns an iterator over the iterator .
989	Resolve the wiring mode of a Petite .
990	Resolves the name of a Petite bean .
991	Get print writer .
992	Get the output stream .
993	Returns the class name for this element .
994	Returns a string describing the constructor .
995	Returns a string describing the method descriptor .
996	Returns a string describing a method .
997	Appends the descriptor to the string
998	Returns the size of the given sort .
999	Compute the number of arguments and return them .
1000	Sets the transaction to rollback only .
1001	Commit or rollback all resources .
1002	Rolls all the resources in this transaction .
1003	Request a resource for the given resource type .
1004	Pop the name from the stack .
1005	Write a string .
1006	Writes a Unicode character to a Unicode string .
1007	Write a string to the output stream .
1008	Configures the parsing error level
1009	Initialize the region .
1010	Returns True if the given include is contained in a string .
1011	Registers a pseudo function .
1012	Return the pseudo function associated with a pseudo function .
1013	visit the destination class
1014	Creates an annotation visitor for the given description .
1015	Make a static init block .
1016	Creates a proxy constructor
1017	Process all super methods of the class .
1018	Find the last element in a given range .
1019	Turn a string into a m .
1020	Replace the ASM instructions in the class file .
1021	Returns a list of attribute prototypes .
1022	Registers the default values for the SQLAlchemy class .
1023	Registers the specified SQL type .
1024	Returns the SQLType for the given class .
1025	Lookup the SQL type for the given class .
1026	Create a SOCKS4 proxy .
1027	Create a SOCKS5 proxy .
1028	Create a proxy object .
1029	Returns the number of thread transactions in the stack
1030	Count the number of transactions with the given status .
1031	Associate a transaction .
1032	Raises an exception if the transaction is not marked as read - only .
1033	Returns the resource manager associated with the given resource type .
1034	Create a proxy object .
1035	Append the given method to the path .
1036	Aligns the given text to the given size .
1037	Convert an object to a pretty string .
1038	Convert a string to CamelCase .
1039	Format a paragraph of text .
1040	Convert tabs to spaces
1041	Escape a Java string .
1042	Unescape Java code .
1043	Returns a single instance of the given class .
1044	Get a single bean by name .
1045	Resolves the given bean definition .
1046	Invoke provider method .
1047	Register a new petite .
1048	Sets the value of a given property .
1049	Get the property of a given property
1050	Shutdown all resources .
1051	Resolve method parameters .
1052	Return the body of the body .
1053	Returns the value of the given profiles .
1054	End the tree .
1055	Creates an element node for the given tag .
1056	Add a tag to the DOM .
1057	Removes the last child of the node if it is empty .
1058	Build a query string from a query string
1059	Returns the class name of the action .
1060	Calculate the number of elements from from from from to .
1061	Iterate a collection .
1062	Iterates over an array .
1063	Replace sub in a string with another .
1064	Replaces a character in a string with another .
1065	Replaces sub characters in a string with with the given sub .
1066	Replace the first element of a string with another .
1067	Replace the first character in a string with another .
1068	Replace the last element of a string with another .
1069	Replace the last character in a string .
1070	Remove sub from a string .
1071	Removes a character from a string .
1072	Check if all of the strings are empty .
1073	Check if all of the strings are empty .
1074	Converts a value to a string .
1075	Change the first character of a string .
1076	Convert a string to a title .
1077	Compress characters to a string .
1078	Returns True if src starts with subS .
1079	Returns True if the string ends with the given character .
1080	Count the number of occurrences of a substring in source .
1081	Returns True if two strings are equal .
1082	Returns the index of the whitespace in a string .
1083	Strip leading character from a string .
1084	Strips a trailing character from a string .
1085	Strip a character from a string .
1086	Strip a character from a string .
1087	Strip a string from a character .
1088	Crops all strings in a list of strings
1089	Trim whitespace from a string .
1090	Trim whitespace from a string .
1091	Returns the index of the first element in the string that contains the given offset .
1092	Join a collection with a separator .
1093	Join an array into a string .
1094	Converts source charName to newCharName
1095	Returns True if the character at the given index is equal to the given character .
1096	Surround a string .
1097	Returns a new string with the given prefix .
1098	Adds a suffix to the end of a string .
1099	Cuts a substring from a string and returns it .
1100	Cuts a substring from a string and returns it .
1101	Cuts a prefix from a string .
1102	Cuts a string if it ends with a suffix .
1103	Cuts a string from a prefix and suffix .
1104	Returns the string inserted at the given offset .
1105	Returns a string with the given number of occurrences of the specified number of characters .
1106	Reverse a string .
1107	Returns the maximum common prefix between two strings .
1108	Find common prefix of strings .
1109	Shorten a string by length .
1110	Convert a string to a uppercase case .
1111	Remove quotes from a string .
1112	Convert a byte array to a hex string .
1113	Convert a string into a byte array .
1114	Detects a single quote character .
1115	Visit name and value .
1116	Visit an enumeration .
1117	Visit an annotation .
1118	Registers the given entity type .
1119	Register an entity descriptor .
1120	Removes an entity from the database .
1121	Creates an entity instance .
1122	Sets the target interface .
1123	Injects the target field into the given wrapper object .
1124	Lookup annotated properties .
1125	Detects and configure the database .
1126	Close the output .
1127	Write a byte to the output stream .
1128	This method is used to remove the session id from the request .
1129	Returns the MIME name encoded .
1130	Convert to bytes .
1131	Writes data to a file .
1132	Write data to out stream .
1133	Append an argument to the description
1134	Prepends the given description to the given type .
1135	Change the return type of the description
1136	Strip whitespace from a string .
1137	Register a type converter .
1138	Lookup type converter .
1139	Select CSS selectors from a string .
1140	Returns a list of CSS selectors
1141	Process selectors .
1142	Select first node .
1143	Recursively walk descendant nodes recursively .
1144	Recursively walks all nodes in the tree .
1145	Add a new node to the results list .
1146	Apply a CSS selector to the current results .
1147	Unpack a packed string
1148	Return True if the buffer is empty False otherwise .
1149	Retrieve a single page of objects from the database .
1150	Remove select from sql .
1151	Remove from from from query .
1152	Removes the last order by name from the query
1153	Decode an HTML string
1154	Detect the name of a character .
1155	Build the order clause for the given column .
1156	Build the SQL for a page .
1157	Resolves the column mappings in the given entity .
1158	Finds a column descriptor by its name
1159	Finds a column descriptor by name
1160	Returns the name of the property of the given column name .
1161	Returns the name of the named column .
1162	Returns the ID value of an object .
1163	Sets the id value of an object .
1164	Returns the key for the given object
1165	Append a string to the array .
1166	Set the index of the array .
1167	Returns a new array with all the elements in the array .
1168	Calculate the length of the array
1169	Creates a message describing the mixing of scopes .
1170	Creates a proxied proxy class
1171	Loop through the body of the body .
1172	Initialize the map .
1173	Return whether the given file can be accepted .
1174	Set the last access time for a watch file .
1175	Start the timer .
1176	Called when a directory changes .
1177	Adds an enumeration .
1178	Computes the size of the fields .
1179	Put the attributes of the symbol table .
1180	Creates a Target for a given value .
1181	Writes the value of an injection point to the target name .
1182	Writes the given page content to the given writer .
1183	Parse the page content .
1184	Write the decorated page .
1185	Writes content of decoraTag to out .
1186	Starts the server .
1187	Run a process and wait for it to finish .
1188	Returns an IMAPSSLStore instance .
1189	Create a GZIP response stream
1190	Initialize template .
1191	Appends the alias to the query
1192	Appends the column name to the query
1193	Adds a rule definition to the rules list .
1194	Apply the rules to a boolean .
1195	Process include .
1196	Process exclude rules .
1197	Returns the pseudo class name .
1198	Returns True if all elements in the collection are added .
1199	Find the insertion point of o .
1200	Bind an annotation type to an action configuration .
1201	Registers a new action configuration .
1202	Returns the ActionConfig for the given action type or annotation type .
1203	Registers an action config with the given type .
1204	Setup system properties
1205	Validate a value within the context .
1206	Finds the last table of the given node
1207	Fix all table elements outside the table
1208	Returns a map of Sessions to use in the HTTP session
1209	Returns the SessionBeanData object associated with the session .
1210	Initialize this class .
1211	Add an advice initialization method .
1212	Called when the context is finished .
1213	Add a profile .
1214	Add a profile to the key .
1215	Add key and value to a map
1216	Convert a type description into a class name .
1217	Convert a typeref description to a name .
1218	Convert a type description to a signature .
1219	Convert a type to a string representation .
1220	Add all of the consumers to the list .
1221	Creates a collection .
1222	Converts a single value into a single element .
1223	Convert a value to a collection .
1224	Convert a collection to a collection .
1225	Convert primitive array to collection .
1226	Adds a line number to the current line number .
1227	Visit this label and visit it .
1228	Puts the bytecode into the code .
1229	Add a forward reference to the buffer .
1230	Determine whether this method has been resolved .
1231	Mark a subroutine as belonging to this subroutine .
1232	Helper method to add a basic block to the control flow graph .
1233	Compares two strings .
1234	Fix the accent of a character .
1235	Add a byte to the buffer .
1236	Add 11 bytes to the vector .
1237	Add a short value to the buffer .
1238	Add 2 byte values to the buffer .
1239	Add 2 byte values to the buffer .
1240	Add an integer to the buffer .
1241	Add two byte values to the byte vector .
1242	Add a long value to the buffer .
1243	Put a byte array into the buffer .
1244	Enlarge a byte array .
1245	Authenticates the user via HTTP authentication .
1246	Authenticates the user using the auth token .
1247	Authenticates the user using the username and password .
1248	Find the default message for a given locale .
1249	Returns a bundle for the given locale .
1250	Get an element from an array .
1251	Sets the entity id value for the given entity .
1252	Saves the given entity to the database .
1253	Update an entity .
1254	Update an entity s property .
1255	Updates the specified property of the given entity .
1256	Find an entity by id .
1257	Find one entity by name and value .
1258	Returns an entity with the given criteria .
1259	Delete an entity by id
1260	Delete an entity by ID
1261	Returns the number of entities in the given type
1262	Increase the value of a property .
1263	Decrease a property by a given value .
1264	Find related entities .
1265	List all entities in a target .
1266	Clears all attributes .
1267	Returns a set of all the attributes of the attribute .
1268	Set the value of a key .
1269	Remove an attribute from an object .
1270	Returns the stack trace of the exception .
1271	Get the stack trace elements from the exception .
1272	Get the stack trace of a given exception .
1273	Returns a list of the exception chain .
1274	Returns a string representation of the exception traceback .
1275	Returns a string representation of an exception chain .
1276	Build a message
1277	Given a wrapped exception return the wrapped exception .
1278	Registers an entry class as a consumer .
1279	Accept a Madvoc component class .
1280	Get the system s system loader .
1281	Get the stream of a resource .
1282	Get the stream of a resource .
1283	Gets the stream of the given class as a stream .
1284	Gets the stream of the given class as a stream .
1285	Creates a new route chunk with the given value .
1286	Find and return a child of the given value .
1287	Parses the request
1288	Converts a value to a collection type .
1289	Invoke setter .
1290	Force set a value to an array
1291	Creates a new instance of a property
1292	Extract the type of a getter property .
1293	Stop the authentication cookie .
1294	Start the authentication session .
1295	Converts a local date to a date .
1296	Converts a local datetime to a calendar object .
1297	Define a proxy class .
1298	Add a check to the list .
1299	Returns a ValidationContext for the given target .
1300	Returns the checks for the given class .
1301	Collects the annotation checks for a property .
1302	Given a list of annotation annotations collect warnings .
1303	Copies the default check properties to the destCheck object .
1304	Encodes a URI component into a string .
1305	Encodes a string using the given encoding .
1306	Encodes a scheme to a URI .
1307	Encodes a host component into a URI component .
1308	Encodes the port as a string .
1309	Encodes a path into a URI component .
1310	Encode a query string .
1311	Encode a query parameter .
1312	Encode a fragment as a string .
1313	Inspects the properties of the class
1314	Returns all property descriptors sorted by their name .
1315	Return a list of cookies from set - cookie headers .
1316	Unzip the response .
1317	Closes the http connection
1318	Checks if the reference scope is valid .
1319	Prints out the routes
1320	Encrypt a block of bytes .
1321	Decrypt encrypted content .
1322	Convert a map to a JSON object .
1323	generates a list of objects
1324	Sets the value of a property .
1325	generates a new map
1326	Compares the given object to the comparator .
1327	Sets the default HTTP browser header .
1328	Send HTTP request .
1329	Send a request to the http server .
1330	Add default headers
1331	Read cookies from http response .
1332	Add all cookies to request request
1333	Send an email .
1334	Sets the subject of an email .
1335	Sets the sent date
1336	Sets the headers of the email with the given data .
1337	Sets the recipients of the email with the given data .
1338	Sets the recipients from an email .
1339	Adds the body part of the email with the given data .
1340	Sets the content of an email message .
1341	Creates a MIME body part
1342	Extracts the Content - Type header from the data header .
1343	Save a ResultSet to a set
1344	Closes all the results in the database .
1345	Closes the query and closes it .
1346	Closes the database .
1347	Sets the number of rows in the database .
1348	Sets the maximum number of rows in the database .
1349	Executes an UPDATE query .
1350	Executes the SQL query and returns the result .
1351	Returns all the generated columns in the database .
1352	Get the query string for this query
1353	Returns a proxy instance for the given target .
1354	Create a collection from an iterator .
1355	Returns a stream of the given iterator .
1356	Compare two collections .
1357	Sets the default wiring mode .
1358	Print a message to stdout .
1359	Get the name of the caller .
1360	Shorten class name .
1361	Exclude given types .
1362	Serialize object to JSON .
1363	Serialize an object into a string .
1364	Clone an object via serialization .
1365	Writes an object to a file .
1366	Reads an object from a file .
1367	Serialize an object to a byte array .
1368	Converts a byte array into an object .
1369	Returns a list of table names for mapped entity types .
1370	Creates the table names for the given types
1371	Retrieve the value of a column .
1372	Cache the results of the database .
1373	Resolve provider definitions .
1374	Convert an entity name to a table name .
1375	Check if the connection is valid .
1376	Renders the view to the given target .
1377	Returns the path to the target path .
1378	Return the print writer for the response .
1379	Get the output stream
1380	Write content to response .
1381	Set the content for the given type .
1382	Print the given string .
1383	Login and return a JSON result
1384	Returns the JSON result of the given token .
1385	Login via HTTP Basic Authenticate .
1386	Logout the user
1387	Convert a URL to a container file .
1388	Create directory .
1389	Create a directory .
1390	copy file to destFile
1391	Copy a directory to a directory .
1392	Move srcFile to destDir
1393	Move a directory to the destination .
1394	Delete all files in destDir
1395	Read Unicode characters from a file .
1396	Read characters from a file .
1397	Write data to dest .
1398	Write a string to a file .
1399	Append a string to a file .
1400	Read count bytes from file .
1401	Write a byte array to a file .
1402	Append data to dest to dest .
1403	Copy src to dest .
1404	Delete a file or directory
1405	Create a temporary directory .
1406	Check if the file is binary .
1407	Checks that srcDir and destDir is equal .
1408	Checks if srcFile and destFile is identical .
1409	Print a usage message .
1410	Resolve action method by name .
1411	Registers an action for a given action class .
1412	Register a path alias .
1413	Returns True if the next iteration is reached .
1414	Create a new charArray from a character array .
1415	Executes the target method .
1416	Match uppercase target .
1417	Return a string representation of a sequence .
1418	Returns a list of URLs for the given class .
1419	Sets the email address of the email .
1420	Register a type json serializer .
1421	Lookup serializer for given type
1422	Parse multipart request stream .
1423	Gets a parameter from the request .
1424	Returns a list of parameter values .
1425	Retrieves a FileUpload object from the request files .
1426	Returns a list of files for a given param .
1427	Initialize the filter .
1428	Parse the given template
1429	Find the end of a macro in a template
1430	Count the number of escape characters in a template .
1431	Build a query string from a query map .
1432	Parse query string .
1433	Prepares the name of a header parameter .
1434	Extract the media type from the content type .
1435	Render node as HTML .
1436	Convert node to inner HTML .
1437	This method is called when the context is initialized .
1438	Reset the state of the object
1439	A lazy parser .
1440	Return the mapped type for the given target .
1441	Parse a JSON string into a list .
1442	Parse a JSON string as a map .
1443	Resolves a lazy value .
1444	Skip an object .
1445	Parse a string .
1446	Parse string content .
1447	Parse Unicode .
1448	Parse un quoted string content .
1449	Parse a number .
1450	Parse array content .
1451	Creates an empty constructor .
1452	Creates a method wrapper for the given method signature .
1453	Resolve raw type name .
1454	Resolve a reference from a property descriptor .
1455	Resolves reference values for a given method .
1456	Reads all references from the specified method or constructor .
1457	Build the default reference for a given method .
1458	Build the default reference for a property .
1459	Removes duplicate names .
1460	Convert a list of strings to a reference .
1461	Converts a string value to a list of BeanReferences .
1462	Start the Jodd joy runtime .
1463	Finds a method by name .
1464	Returns the constructor for a given class .
1465	Resolves all interfaces of the given type .
1466	Compare two parameters .
1467	Force access to an AccessibleObject .
1468	Returns a new instance of the given class .
1469	Get all superclasses of the given type .
1470	Returns the child class of the given class .
1471	Returns the JarFile of the given class
1472	Sleep the given number of milliseconds .
1473	Sleep the thread .
1474	Wait for an object to finish .
1475	Returns a daemon thread factory .
1476	Get a value from the cache .
1477	Visit a parameter .
1478	Returns the annotation for the given descriptor .
1479	Visit a type annotation .
1480	Visitor for a parameter annotation .
1481	Visit a field instruction .
1482	Visit an instruction .
1483	Visit a dynamic instruction .
1484	Visit a jump instruction .
1485	Visit a multi - array instruction .
1486	Visit a code catch block .
1487	Visit a local variable annotation .
1488	Writes the given properties to the specified writer .
1489	Process the input stream .
1490	Returns the next element .
1491	Move the next row to the next element
1492	Joins multiple arrays into a single array .
1493	Takes a list of arrays and returns them as a single array .
1494	Resize the buffer to new size
1495	Append new element to buffer
1496	Remove warnings from a buffer .
1497	Returns the index of the character in the array that matches the given value .
1498	Returns the index of the first element in an array that matches the given value .
1499	Returns the index of the substring in a byte array .
1500	Enables HTML mode in parsing .
1501	Parse Lagarto document .
1502	Do the Lagarto parser .
1503	Compute the maximum stack of exceptions and local exceptions .
1504	End the current BasicBlock without successors .
1505	Collect attribute prototypes .
1506	Injects context to target object .
1507	Registers a pseudo class .
1508	Return the pseudo class associated with a pseudo class .
1509	Invoke an action request .
1510	Returns a list of all property descriptors for a given type .
1511	Visit properties .
1512	Returns True if the given property matches the given rule .
1513	Returns a list of MethodInjectionPoints for the given type .
1514	Reads parameters from the specified filter config .
1515	Send a bundle file to the response .
1516	Lookup a bundle file for the given bundleId .
1517	Lookup a gzip bundle file if it exists .
1518	Register a bundle with the action source .
1519	Create a digest from a string .
1520	Creates a new bundle .
1521	Clear the current state of the bundle .
1522	Fix css relative URLs
1523	Updates the column with the given column reference
1524	Create a unique name for a table reference .
1525	Request the database session .
1526	Converts a value to a single element array .
1527	Parse a signature into a map
1528	Returns list of setInjectionPoints for the given type .
1529	Check if the given property type should be ignored .
1530	Open a connection to the database
1531	open a transaction
1532	Close the transaction .
1533	Commits the transaction .
1534	Rollback a transaction .
1535	Creates a new properties object from a file .
1536	Create a properties object from a string .
1537	Load properties from a string .
1538	Returns a copy of the properties with the given prefix .
1539	Create a new properties object from the specified root template .
1540	Get a string property from a map .
1541	Resolve all variables in a properties property
1542	Resolve a property .
1543	Resolves the scope for the given class and methodName .
1544	Get the transaction mode associated with the specified method .
1545	Registers the given annotations .
1546	Reads a transaction annotation from a method .
1547	Check if the given node is valid .
1548	Check if the node is an Element
1549	Return True if the selector matches the selector .
1550	Remove spaces from string .
1551	Return the list of package names for the given Java version number .
1552	Clone the contents of dest to dest .
1553	Remove sibling index from parent .
1554	Add child nodes to this node .
1555	Insert a child node .
1556	Insert a new child into the parent .
1557	Insert a new child into the parent .
1558	Insert a new child into a new child .
1559	Insert new new child to refChild .
1560	Removes all child nodes
1561	Find a child node by name .
1562	Returns the children of a given predicate .
1563	Check if all children are valid
1564	Initializes child element nodes .
1565	Internal method to initialize sibling names .
1566	Initialize child nodes .
1567	Change the owner document of a node .
1568	Get the previous sibling name .
1569	Get text content .
1570	Returns the HTML representation of the document .
1571	Returns the HTML representation of this document .
1572	Visit all child nodes .
1573	Get the css path of this node
1574	Called when a decora tag is defined .
1575	Called when the id attribute starts .
1576	Define the decora tag .
1577	Adds a proxy aspect to this object .
1578	Add a root package and mapping .
1579	Add a root package to the action class .
1580	Find the root package for the given action path .
1581	Resolve the validation message from the request .
1582	Returns a new object with duplicate names .
1583	Add a name pattern to the joy .
1584	Iterates over the targets of each target .
1585	Iterate over the targets in the scope and in - scope .
1586	Iterate over the targets and out the out of the scope .
1587	Extracts the values of the parameters .
1588	Create target targets based on action parameters .
1589	Creates an action method argument .
1590	Called when a session is created .
1591	Called when a session is destroyed .
1592	Add a JSON array .
1593	Adds all elements of the given array to the list .
1594	Remove an object from the list .
1595	Resolves target to target value .
1596	Handle a targetNotFound action .
1597	Returns a string representation of a value .
1598	Add action filter to the router .
1599	Returns the pseudo function name .
1600	Resolve property definitions for a given type .
1601	Create a SOCKS4 proxy socket .
1602	Returns the number of attributes in this node .
1603	Returns a set of all action results .
1604	Check if c is one of the same character .
1605	Find the first element in the source sequence that matches the given match .
1606	Find the first occurrence of a character in a source array .
1607	Sets the command line arguments .
1608	Add a key to the environment variable
1609	Runs the command and returns the result .
1610	Invoke a listener .
1611	Copy a frame from a frame .
1612	Get the abstract type from the API format .
1613	Get an abstract type from the buffer .
1614	Set the input frame from the API format .
1615	Get the local type of a local variable .
1616	Set the output local variable .
1617	Pushes an abstract type onto the output stack .
1618	Push an abstract type onto the symbol table .
1619	Removes the specified number of elements from the output stack .
1620	Pop the first descriptor from the descriptor descriptor .
1621	Add an initialized type .
1622	Get the initialized type of abstract type .
1623	Put an abstract type into the output buffer .
1624	Returns the number of expired entries .
1625	Schedule a prune task .
1626	Visitor for a module .
1627	Visit the nest host .
1628	Visit an outer class .
1629	Returns the annotation for the given descriptor .
1630	Visit a nest member .
1631	Visit an inner class .
1632	Visitor for a field .
1633	Get the db thread session .
1634	Closes the database session
1635	Creates a list of ActionWrapper objects
1636	Invoke the action class method .
1637	Reads the request body
1638	Calculate the index of the first item of a page .
1639	Calculates the first item of a page .
1640	Return True if the value is equal to the given value .
1641	Convert a char array to a raw byte array .
1642	Returns the index of the first difference between the source and match .
1643	Resolve node name
1644	Resolve attribute name
1645	Render an attribute .
1646	Load properties from file .
1647	Load from file .
1648	Load data from a stream .
1649	Load data from a dictionary .
1650	Load data from a map .
1651	Load properties from the default class path .
1652	Lookup a value from the active profiles .
1653	Set a value for a key .
1654	Extract properties from the given map .
1655	Extract properties from a set of profiles .
1656	Extracts all active properties from a dictionary .
1657	Returns a dictionary of active profiles .
1658	Adds the given map to the given prefix .
1659	Resolve the active profiles property
1660	Returns a list of all profiles
1661	Returns a list of profiles that match the specified property .
1662	Adds a property injection point to the list
1663	Adds a setInjectionPoint to the list of sets .
1664	Adds a MethodInjectionPoint to the list of methods .
1665	Adds initialization methods to the list of methods .
1666	Adds method points to a list of destroy methods .
1667	Returns the target class for the given proxy .
1668	Injects the target into the given wrapper object .
1669	Returns the target wrapper type .
1670	Returns the field descriptor for the given field name .
1671	Returns the type of the field .
1672	Returns the type of the key .
1673	Resolves the component type .
1674	Returns a JSONResult of the given object .
1675	Returns a JSONResult for the given exception .
1676	Resolves http method name from method name .
1677	Match pattern .
1678	Construct a loading object .
1679	Resolve a resource loading .
1680	Load a class by name .
1681	Returns the URL of the given resource .
1682	Wait for the lock to finish .
1683	Detect the annotation type .
1684	Build an injection point .
1685	Visit the class .
1686	Returns the list of URLs of the given class .
1687	Sets the value of the given object .
1688	Updates the value of the given object .
1689	loads the property
1690	Gets the getter for a property
1691	Returns the setter for this property .
1692	Connect to the database
1693	Adds an iterator to the iterator .
1694	Print the logo .
1695	Stop the job
1696	Creates a socket .
1697	Create and return an SSLSocket object .
1698	Returns the default SSL socket factory .
1699	Returns a socket factory based on the proxy type .
1700	Returns a random string .
1701	Returns a random string .
1702	Returns a random string .
1703	Returns a collection instance .
1704	Injects the given value into the given object .
1705	Converts value to target type .
1706	Visit a service .
1707	Returns the default type cache .
1708	Adds a new value to the map .
1709	Returns all method descriptors sorted by name .
1710	Resolves an IP address from a hostname .
1711	Converts an IP address into an integer .
1712	Validate Aagaintip adress v4 format
1713	Resolve the hostname of an IP address .
1714	Downloads a file from a URL .
1715	Download a file from a URL .
1716	Downloads a file from a URL .
1717	Injects all the targets into the context
1718	Outjects an action request into the target scope .
1719	Connect to a given hostname and port .
1720	Connect to a given hostname and port .
1721	Get the index of a primitive class .
1722	Try to load a class from a class .
1723	Loads an array class by its component type .
1724	Clean up all instances .
1725	Create a binary search for an array .
1726	Create a binary search for an array .
1727	Exclude a set of rules .
1728	Include the specified rules .
1729	Include the given template with the given template .
1730	Start the tag .
1731	Register a component with a consumer .
1732	Resolve the db_sqltype of a column .
1733	Preprocess SQL string .
1734	Create a default ResultSetMapper instance
1735	Finds the generated key for the given type
1736	Populates the generated columns of the given entity .
1737	Creates an action interceptor for the given class .
1738	Sets the value of a given property in the query
1739	Set query parameters .
1740	Set multiple objects .
1741	Insert a chunk after the previous chunk .
1742	Returns the descriptor for the given entity type
1743	Returns the descriptor for the given column reference
1744	Returns the table alias for the given table ref .
1745	Resolves the class of an object .
1746	Append missing space to out .
1747	Returns an iterator over the file parameter names .
1748	Include the page with the request dispatcher .
1749	Returns the url of the request .
1750	Get the request s request URI .
1751	Resolves the parameter names of the action class .
1752	Start petite .
1753	Stop the petite container
1754	Filter the search term
1755	Filter the search term
1756	Add an email filter to the filter
1757	Add email filter
1758	Add a CC filter
1759	Adds a BCCFilter to the search filter
1760	Add an email filter to the search term .
1761	Creates a Filter for an email filter .
1762	Add a received date filter .
1763	Add an email filter to a search term .
1764	Adds a search term to the query .
1765	Add an email filter to the search term .
1766	Add an OR filter to the query .
1767	Add an email filter to the search term .
1768	Concatenate a search term .
1769	Encodes a list of bytes into a base32 string .
1770	Converts the given value to a byte array .
1771	Check if a request is gzip eligible .
1772	Validates the given target .
1773	Validate a target against a target .
1774	Disable the specified profile .
1775	Set the set of enabled profiles .
1776	Check if a list of checkProfiles is enabled
1777	Parse the body of the request body .
1778	Convert fraction to milliseconds .
1779	Return a new Julian date .
1780	Return a new JulianDate .
1781	Set the fraction .
1782	Initialize the parser .
1783	Emit a comment .
1784	Log error message .
1785	Generate a password hash .
1786	Generate a PBKDF2 key .
1787	Convert a hex string to a byte array .
1788	Resolves a list of provider definitions .
1789	Sets the name of the email attachment builder .
1790	Sets the content id based on name .
1791	Returns the MIME type of a MIME type .
1792	Parse a Java type signature .
1793	Compute symbol size .
1794	Put module attributes into the output buffer .
1795	Decodes a string using the given encoding .
1796	Decode a query string .
1797	Start the database .
1798	Checks the connection provider
1799	visit a method .
1800	Visits all super methods in superclass .
1801	Creates a method signature visitor .
1802	Convert a list of fields to a CSV string .
1803	Convert a string to a list of strings
1804	Resolve a constructor injection point .
1805	Creates a class reader for the given advice .
1806	Return an advice reader for the given advice .
1807	Encrypt a string using Base64 .
1808	Decrypts and returns the decrypted string .
1809	Get a logger by name .
1810	Sets the cookie name .
1811	Creates a new ActionRequest object .
1812	Creates an action filter
1813	Destroy the given beanData
1814	Shutdown all the managed beans .
1815	Returns a list of emails
1816	Start the ClusteredServiceContainer .
1817	Run the reporting function .
1818	Print a warning message .
1819	Helper function to print the rate of a rate .
1820	Map an existing file in read - only mode .
1821	Close the session .
1822	Do the work .
1823	Return the position of the current term .
1824	Appends a message to the end of the term buffer .
1825	Append padding to the offset of the term offset .
1826	Closes the archive .
1827	Poll for an error response from the server .
1828	Stop the replay .
1829	Prints an event available for an image .
1830	Called when an image is unavailable .
1831	Get the status indicator from the counters reader .
1832	Read the status indicator from the counters reader .
1833	Set the limit of the buffer .
1834	Append a new buffer to the buffer .
1835	Poll the subscription .
1836	Create a new buffer for the loss report .
1837	Returns a map of streams and their positions .
1838	Create a default header for a session .
1839	Set the key buffer to the key buffer .
1840	Add a label to the buffer .
1841	Connect to an Aeron archive .
1842	Try to connect the given response channel .
1843	Closes a session .
1844	Start recording a message .
1845	Stop recording a channel .
1846	Sends a replay request .
1847	Stop the replay request .
1848	Opens a list of recordings .
1849	Gets a list of recordings for a URI .
1850	Opens a list recording request .
1851	Append a new recording to the buffer .
1852	Gets the recording position .
1853	Gets a stop position request .
1854	List recording subscriptions .
1855	Check if the given UDP channel matches the given tag .
1856	Get the destination address for a channel .
1857	Return a human readable description .
1858	Add a receive destination .
1859	Insert a packet into the buffer .
1860	Find the control toggle toggle state .
1861	Adds a key to the params .
1862	Get the channel tag .
1863	Returns the entity tag .
1864	Add a session ID to a channel .
1865	Get the tag of a tag .
1866	Add padding to the term buffer .
1867	Updates the publisher limit if necessary .
1868	Create a safe buffer position .
1869	Returns a string representing the label of a particular type .
1870	Scan the term buffer for availability .
1871	Clear the current channel URI string .
1872	Validates that the given term is valid .
1873	Set the prefix for this URI .
1874	Set the media string .
1875	Set the control mode .
1876	Set the term length .
1877	Set the term offset .
1878	Set the linger name .
1879	Open UDP channel .
1880	Close the socket .
1881	Check if the buffer is valid .
1882	Receive an address from the receive socket .
1883	Called when a new term is received .
1884	This method is called when the timeout has expired .
1885	Returns a string describing the status of a given status .
1886	Allocate a new counter .
1887	Reset the buffer .
1888	Validate that the buffer is valid .
1889	Validate the length of a vector .
1890	Returns the length of the producer window .
1891	Validate socket buffer lengths
1892	Validate that the page size is valid .
1893	Validate session id range .
1894	Validate that the unblock timeout is valid .
1895	Set the error response header .
1896	Reset the Aeron .
1897	Encodes cluster members into a string .
1898	Add member status publication to a stream .
1899	Closes all publications .
1900	Check if there is an active quorum .
1901	Given a list of members find the highest ranked position .
1902	Reset log positions .
1903	Returns True if the log position is less than the given position .
1904	Returns True if the member has a vote on the full count .
1905	Returns True if the cluster has a majority vote .
1906	Determines the member of a given member
1907	Validate that the member endpoints match the given memberEndpoints .
1908	Return True if two cluster members have the same endpoints .
1909	Returns True if the candidate is unanimous .
1910	Returns True if the candidate is a quorum candidate .
1911	Returns True if memberEndpoints is not duplicate
1912	Find the index of a member with the given memberId .
1913	Remove a member from a list .
1914	Calculate the high member id for the cluster members .
1915	If the CNC file exists in the CNC directory returns None .
1916	Returns True if the driver is active False otherwise .
1917	Returns True if the driver is active False otherwise .
1918	Check if the driver is active .
1919	Request driver termination
1920	Get the frame length from the volatile buffer .
1921	Sets the frame length ordered by term offset .
1922	Write frame type to buffer .
1923	Write frame flags to buffer .
1924	Set the term offset to the given buffer .
1925	Write a term ID to the buffer .
1926	Find the counter ID by recording ID .
1927	Find the counter id by session ID .
1928	Get the recording ID of a counter .
1929	Returns True if counter_id is active .
1930	Set the application specific feedback field .
1931	Load entries from the file .
1932	Finds the last term in the list .
1933	Create a recovery plan .
1934	Creates a recovery plan for a list of snapshots .
1935	Append a term to the log .
1936	Append a snapshot to the log .
1937	Change the log position to the given log position .
1938	Tombstone entry .
1939	Closes the connection
1940	Add a new buffer to the publication .
1941	Unblock the specified term .
1942	Returns the channel as a string .
1943	Set the channel on the wire .
1944	Checks that the given term length is valid .
1945	Checks that the given page size is valid .
1946	CAS_active_term_count method .
1947	Compute the position of a term .
1948	Compute the length of the log .
1949	Store the default header to the metadata buffer .
1950	Apply the default header to the term buffer .
1951	Rotate the log .
1952	Sets the tail counter for the given partition and termId .
1953	Return the offset to the offset of a term .
1954	Get the raw tail of the metadata buffer .
1955	CAS the expected tail value .
1956	Terminate the token buffer .
1957	Allocate a counter .
1958	Find the counter id of the meta data .
1959	Check if a counter has a replay state .
1960	Get the snapshot recording ID of a counter .
1961	Convert flags to characters .
1962	Set the channel s channel .
1963	Add a new buffer to the cluster .
1964	Wrap the given buffer .
1965	Commit the frame length .
1966	Abort the frame .
1967	The main function .
1968	Closes all resources .
1969	Return the position of the term .
1970	Allocate a counter .
1971	Find the counter id for a given serviceId .
1972	Returns a snapshot of the stream backlog .
1973	Creates a new AtomicCounter .
1974	Close the buffer .
1975	Dispatches a recording descriptor .
1976	Add a slab to the pool .
1977	Set a byte at the given index .
1978	Adds the given statistics to the collection .
1979	Calculate row ranges based on the given filter .
1980	Convert an array type to an array element
1981	Convert a StructTypeInfo into a GroupType
1982	Annotate the message at the given position .
1983	End the previous run .
1984	Read one struct from the stream .
1985	Deprecated .
1986	Read the footer from a summary file .
1987	Read the footer of a file .
1988	Reads the next row group from the page .
1989	Reads the next filtered row from the current block .
1990	Reads a DictionaryPage from the metadata file .
1991	Adds a writer to the memory manager .
1992	Removes a writer from the list .
1993	Updates the heap memory allocation .
1994	Register a scale callback .
1995	Start the magic state .
1996	Start a new block .
1997	Start a new column .
1998	Write a dictionary page .
1999	Write a single data page .
2000	Write a column chunk .
2001	End a block .
2002	Copy bytes from an input file to the destination .
2003	End the block .
2004	Merge a list of metadata files into a ParquetMetadata object .
2005	Deprecated .
2006	Deprecated .
2007	Merge global metadata into global metadata .
2008	Read the value in the column .
2009	Check if a schema is null .
2010	Coalesce multiple objects into a single object .
2011	Converts a string into an object .
2012	Create a ThriftMetaData object from the extra metadata .
2013	Converts a Thrift class to a ThriftMetaData object .
2014	Returns the metadata for the Thrift class
2015	Write a null value .
2016	Writes a single page .
2017	Initialize and load the values from a page .
2018	allocate the values buffer
2019	Raises an exception if an enum is not found
2020	Calculate the bit widths for the delta block buffer .
2021	Raises an exception if the given exception is not an exception .
2022	Returns statistics based on type .
2023	Returns a builder for the given primitive type .
2024	Merge statistics .
2025	Returns the union of the given schema .
2026	Creates a new TaskAttemptContext .
2027	Invokes the specified method .
2028	Generate a string representation of the members .
2029	Merges the same type into the group .
2030	Initialize counter loader .
2031	Get the filter for the given configuration .
2032	Read all footer files in parallel .
2033	Generates a list of ParquetInputSplits for each row group .
2034	Write a record to the message writer .
2035	Ensure that the fields in descriptor are valid .
2036	Returns a string representation of the descriptor .
2037	Create a direct codec factory .
2038	Add missing fields to all protocol types that are not present in the protocol type .
2039	Check that a set is valid .
2040	Read and return a FileMetaData object .
2041	Close the record writer .
2042	Sets the schema for the given job .
2043	Add a class to the parquet type .
2044	Raises an exception if the given column is not valid .
2045	Convert a long integer to an int .
2046	Create a schema mapping from a arrow schema .
2047	Create a SchemaMapping from a Parquet schema .
2048	Map arrow schema to parquet schema .
2049	Write a new data page header .
2050	Skip to the current state
2051	Writes an object to the conf .
2052	Remove an entry from the cache .
2053	Adds a new value to the cache .
2054	Get the current value for the given key .
2055	Writes the given value to the given type .
2056	Writes the given value to the record writer .
2057	set up glob
2058	Write content to a console .
2059	Open a file - like object .
2060	Creates an unbound record filter for a given column .
2061	Convert struct to message type .
2062	Create a group type wrapper .
2063	Create a group of list elements .
2064	Returns the merged key metadata
2065	Get a ParquetInputSplit from a file - like object .
2066	Returns a mapping of fields to their type .
2067	Resolves the requested schema access
2068	Parse input files .
2069	Check that all parquet files are valid .
2070	Get all input files in a directory .
2071	Create a paginated record filter .
2072	Create a new list consumer for the given class .
2073	Initialize the MapReduce work .
2074	Merge tuple summary data .
2075	Summarize a tuple of tuples .
2076	Read a struct from the wire .
2077	Read a key and value pair .
2078	Write an integer to the input buffer .
2079	Reads an integer from the endian endian order .
2080	Sets the schema for the given job .
2081	Create a topic if it doesn t exist .
2082	Creates a copy of the pipelineStageBeans and returns a new one .
2083	Creates a Stage bean for the given stage configuration .
2084	Create interceptors
2085	Creates an interceptor .
2086	Parse a schema .
2087	Convert milliseconds to days .
2088	Get the avro schema from a record .
2089	Upgrade v1 to v2 .
2090	Get the length of the stream .
2091	Copy blobstore resources to pipeline .
2092	Reset all columns .
2093	Report the health of a thread .
2094	Register threadHealthReport .
2095	Store the configuration of the control hub .
2096	Checks if the user is authenticated
2097	Upgrade the pipeline configuration if necessary .
2098	Attempt to upgrade the given configuration .
2099	Try to upgrade the given StageConfiguration if it exists .
2100	Upgrade service configuration if necessary
2101	Upgrades the given stage definition if necessary .
2102	Get fields to null .
2103	Determine if a class is a system class .
2104	Add an element to the delegate .
2105	Adds an element and returns it .
2106	Returns the value of the given key if not present .
2107	Return a list of snapshots that have reported errors .
2108	Gets the descriptor for the given message type .
2109	Gets all file descriptors in the given set .
2110	Populates the default values of all files in file descriptors .
2111	Returns the FileDescriptor for the specified message type .
2112	Create a SDC field from a protobuf message .
2113	Converts a record to a protobuf message .
2114	Converts a field to a protobuf message .
2115	Upgrade configs to jersey .
2116	Checks the connection to Kudu .
2117	Converts a Kudu type to a field type .
2118	Create field from a row .
2119	Apply interceptors to records .
2120	Get the text from the buffer .
2121	Helper function to add missing config values to the stage
2122	Parse the response .
2123	Add the response header to the response .
2124	Writes the response header to the record .
2125	Write response header to record header .
2126	Save metadata to a temporary file .
2127	Setup client and parser factory
2128	Parse headers only .
2129	Increment source offset by increment .
2130	Parse paginated results .
2131	Add response headers to the record .
2132	Resolves the headers for the request .
2133	Get the offset from the response
2134	Check if a property is defined in the configuration .
2135	Returns a DataParserException
2136	Returns a new DataGeneratorException
2137	Get service account credentials .
2138	This endpoint returns a preview of the stage output json for a given pipeline . The stage output can be either a list of stage output json or a list of stage output JSON . The stage output will be returned .
2139	Copy buffer to buffer .
2140	Remove logical duplicates .
2141	Empty the batch .
2142	Find the next main line in a live file .
2143	Resolve a single chunk to a single file .
2144	Closes the connection
2145	Escapes quoted characters .
2146	Get the flow control settings .
2147	Returns a gRPC channel provider .
2148	Put a batch .
2149	Compiles the given expression into a Grok object .
2150	Returns a digest of the original expression .
2151	Add a dictionary as a dictionary .
2152	Add a dictionary to a file .
2153	Stops all aggregators .
2154	Roll the data over all aggregators .
2155	Serialize an object into a string .
2156	Deserialize body into a JSON object .
2157	Deserialize a JSON object from a file .
2158	Writes the given record to the final destination .
2159	Resolves a string .
2160	Generates a field from a list of dicts .
2161	Get the table name from the metadata record .
2162	Get the database name from the metadata record .
2163	Returns the internal field from the metadata record .
2164	Get the location from the metadata record .
2165	Gets the custom location from the metadata record .
2166	Get the avro schema from the metadata record .
2167	Get the data format from the metadata record .
2168	Build a schema metadata field .
2169	Validate that partition information is valid .
2170	Generates the path to the partition file .
2171	Serialize a schema to HDFS .
2172	Sets the parameters for the given record .
2173	Get the configuration of the system .
2174	Parse a time string into a long time .
2175	Format a template with optional arguments .
2176	Start a new batch context .
2177	Checks that a record contains solr fields
2178	Returns a list of field names that are not autogenerated .
2179	Sends an OnRecordErrorException to the error record handler .
2180	Parse a jar name and return a dependency object .
2181	Parses a jar URL .
2182	Returns an instance of CouchbaseConnector .
2183	Closes the Couchbase pipeline .
2184	Validate the Couchbase config .
2185	Get label from integer code .
2186	Verifies that a config definition exists .
2187	Read a secret .
2188	Get the operation type from the record header .
2189	Writes a record to Couchbase .
2190	Build a sub - document fragment .
2191	Returns the SQL string used to alter a table .
2192	Configure the authentication context .
2193	Consume messages from the consumer .
2194	Commit the last committed offset .
2195	Sets the consumer error
2196	Injects a stage configuration into a stage .
2197	Returns the definitions JSON for a given hideStage .
2198	Get the definition of a lineage publisher .
2199	Format a column name .
2200	Formats a value as a string .
2201	Returns a JSON representation of a pipeline configuration .
2202	Create a draft pipeline fragment .
2203	This API endpoint returns a list of Pipelines .
2204	Imports a pipeline fragment .
2205	Get the path to a temporary file .
2206	Get the operation code from the record .
2207	Returns the path to the column with the given operator .
2208	Poll for an event from the queue .
2209	Get a runner from the queue .
2210	Get a runner from the queue if it is idle .
2211	Add a runner to the queue .
2212	Destroy the thread pool .
2213	Validate that the container is destroyed .
2214	Checks if the stream exists .
2215	Get the last shard id of the stream .
2216	Process a single batch of records .
2217	Handles the specified SQL SQL exception .
2218	Returns the hash code for the given record .
2219	Compare two files .
2220	Retrieves the PID from the process .
2221	Validate and extract fields to hash
2222	Returns the user group information for the given user .
2223	Returns a new active stats .
2224	Returns a snapshot of the active stats .
2225	Ensure the directory exists .
2226	Writes the given batch to disk .
2227	Writes the given batch to the specified table .
2228	Write the records to the record writer .
2229	Generates a NoMoreData event .
2230	Detect the new partition .
2231	Updates the record with the HDFS header .
2232	Process a group and value .
2233	Returns True if two stages have the same version .
2234	Run Mesos driver .
2235	Configure the authentication and build the client .
2236	Resolves the headers for the given request .
2237	Get HTTPMethod based on method expression .
2238	Add null types to bindings .
2239	Get the null value of a record .
2240	Load subject from registry .
2241	Register a schema in the registry .
2242	Returns the schema for the given subject .
2243	Get the schema id for the given subject .
2244	Load a schema by its id .
2245	Writes schemaId to stream .
2246	Detect schema ID .
2247	Returns the default values for the given schema .
2248	Parses and returns a list of records .
2249	Log the details of the package .
2250	Get bad records from error sink
2251	Initialize the schema generator .
2252	Returns the set of outward edges for the given vertex .
2253	Returns all inward edges in the given vertex .
2254	Serialize offsetMap to JSON string .
2255	Deserialize the last source offset as a dictionary .
2256	Queue the report in the queue .
2257	Get report by report ID
2258	Returns True if checkpointing exists on HDFS .
2259	Writes the partition to the main offset file
2260	Delete a blob .
2261	Handle error handling .
2262	Handle an archive .
2263	Get a reader from the file context .
2264	Release the reader .
2265	Sets the DPMBaseURL for this client .
2266	Adds a default header to the client .
2267	Parse a date string .
2268	Encodes a string in UTF - 8 .
2269	Get a client from the server
2270	Init a GPUDB connection
2271	get table metadata
2272	create bulk inserter
2273	Create an event builder .
2274	Build a schema from a set of fields .
2275	Convert ODBC code to DDLC code .
2276	Add jars to a job .
2277	Add jars to job .
2278	Check for a field order list .
2279	Check condition expressions
2280	Gets the offset between the file and the file .
2281	This function is called when the script is started .
2282	Get origin parallelism
2283	Execute a BigQuery query .
2284	Convert a list of field values to a map .
2285	Get table description .
2286	Checks that the table is valid
2287	Returns the column type for the given field .
2288	Checks if the JSON field is null .
2289	Get the schema for a table .
2290	Get column properties from showTableResponse
2291	Returns the class for the given type
2292	Connect to Aerospike .
2293	Get the topic of a record .
2294	Upgrade data format parser to v6 .
2295	Read the file and return the stream .
2296	Returns the output stream .
2297	Check if the file exists .
2298	Parse a file permissions string .
2299	Validates that all services are available
2300	Create an aggregator with the given name .
2301	Returns the aggregator unit .
2302	Creates an aggregatorData object .
2303	Creates a new GroupByAggregator .
2304	Start the data provider .
2305	Stops all aggregator data .
2306	Roll aggregation data .
2307	Acquire a login manager .
2308	Release the login manager .
2309	Convert a glob to a regular expression .
2310	List all objects in S3 .
2311	Stop the pipeline .
2312	Generate empty batches for all active runners .
2313	Create a failure batch .
2314	Convert a record to a BoundStatement object .
2315	Set the configuration from a dictionary .
2316	Generates a KuduLookupKey from a record .
2317	Check if partitioning is turned off or not .
2318	Reads a line from the reader .
2319	Creates a new usage timer .
2320	Enables DPM for the given DPMInfo .
2321	Disable a DPM user .
2322	Normalizes dpm base URL .
2323	Retrieve a user s authentication token .
2324	Log out to DPM .
2325	Update the token file .
2326	Update DPM properties
2327	Create a schema field for a given field .
2328	Create a complex schema for a given field .
2329	Get the decimal scale or precision of a field .
2330	Returns the default value for the given schema .
2331	Initialize file statistics if needed .
2332	Compares two files .
2333	Returns the index of a group .
2334	Returns a list of all group names .
2335	Return True if the character is escaped .
2336	Check if a slash is escaped .
2337	Return true if the character is inside a character class .
2338	Count the number of parentheses inside a string .
2339	Extract group info from namedPattern
2340	Replaces a string with a replacement string .
2341	Handle GET request .
2342	Update schema and table schema .
2343	Check if the transaction is expired .
2344	Return the offset of the file .
2345	Try to read the next line from the channel .
2346	Returns an empty envelope for the detached stage .
2347	Convert a string representation of a string to a number .
2348	Parse part .
2349	Parse values from a buffer .
2350	Lookup the primary keys in the database .
2351	Create custom field mappings .
2352	Returns the SQL type name for the given Field .
2353	Returns the table name .
2354	Sets the primary keys of the record .
2355	Converts a SQL SQL exception into a StageException .
2356	Execute the stage .
2357	Prepare the batch context to be used in the pipeline .
2358	Finish the batch context .
2359	Flatten the rootField into a dictionary .
2360	Creates a cached stage runtime .
2361	Executes the given record .
2362	Returns a mapping of column names to parameters .
2363	Gets the condition for a partition column .
2364	Validate the stored offset
2365	Returns a list of bundle content generator definitions .
2366	Returns a list of arguments that are not empty
2367	Get an operation based on the operation type .
2368	Convert bytes to human readable format .
2369	Scan for a live file .
2370	Returns the number of pending files that have been processed
2371	Check if a package is whitelisted .
2372	Returns True if versions match the given list of supported versions
2373	Entry point for the bootstrap clustering .
2374	Propagate the runtime configuration .
2375	Validate the report description
2376	Creates a new JdbcRecordWriter with the specified parameters .
2377	Create a new record writer .
2378	Remove explicit cache size from v1 to v2 .
2379	Extract named groups from raw data .
2380	Commit a message to the consumer queue .
2381	Create an embedded SDC .
2382	Sets the fields in a record in a record .
2383	Returns a list of Pipelines that have changed
2384	Create a new remote data collector result .
2385	Create a gauge .
2386	Returns a mapping of column names to parameters for the given operation .
2387	Generate header attributes for a file .
2388	Validate a record .
2389	Delete old parquet file .
2390	Get an avro stream from a record .
2391	Create a DataStream from an input stream .
2392	Write a parquet to a file .
2393	Check that the field is encrypted .
2394	Ensure the field is encrypted .
2395	Checks if the field is a byte array .
2396	Checks if the field is a byte array .
2397	Prepare a byte array field
2398	Set the parent pattern to use .
2399	Appends a replacement string to the pattern .
2400	Returns the named groups of the parent pattern .
2401	Replace all properties with replacement .
2402	Ensure avro schema exists .
2403	Get global variable from the database
2404	Create a record for the start event .
2405	Create an event record for a stop event .
2406	Fix the offset column
2407	Extracts a runtime value from a field .
2408	Builds an alter table addition query .
2409	Executes the SQLAlchemyAlchemyAlchemyAlchemyAlchemyAlchemyAlchemy SQLAlchemy command .
2410	Execute describe database query .
2411	Execute a query against the Hive server .
2412	Executes a query and returns the result .
2413	Execute a single batch .
2414	Apply a consumer to all the Pipes .
2415	Returns the offset commit trigger .
2416	Check if a record error is stopped
2417	Accept a consumer from a pipe .
2418	Gets the id of the record .
2419	Get the value of a field from a field .
2420	Set a fragment in a record .
2421	Set a JSON document in a record .
2422	Set N1QL row in record .
2423	Handles the whole file format .
2424	Check if the incomplete transaction contains the given sequence number .
2425	Sets the given class loader and returns it .
2426	Sets the stage creator .
2427	Logout from Kerberos .
2428	Load exceptions from a configuration
2429	Replaces the variables in the path
2430	Ensures that the directory is allowed to access the given path .
2431	Entry point for the bootstrap script .
2432	Returns the directory path for the given record .
2433	Renames a temporary path to a final name .
2434	Determine if the record should be roll .
2435	Returns True if the string matches the given pattern
2436	Returns the offsets associated with the file context .
2437	Returns the number of seconds remaining until the given time .
2438	Gets the offset lag for the given offset map .
2439	Create and initialize a StageLibraryDelegate .
2440	Creates a delegate for the given stage library .
2441	Creates an instance of the StageLibraryDelegate .
2442	Get the metric value for a given metric .
2443	Find the end of the header
2444	Returns the size of the response .
2445	Save bytes to a temporary file .
2446	Creates an SSL socket factory .
2447	Returns the mime type for a given URI .
2448	Handle a given HTTP session .
2449	Stop all connections
2450	Add mappings to the router .
2451	Send the response .
2452	Send data to the stream .
2453	Create a fixed - length response .
2454	Returns True if the mimetype is in gzip format .
2455	Add a cookie to the queue .
2456	Unload all cookies in the response .
2457	Decode a base64 string .
2458	Encode a cookie .
2459	Sets the table name .
2460	Returns the name of the given principal .
2461	Adds a session repository filter to the given servletContext .
2462	Returns the principal name for the given session
2463	Returns a RedisSession object for the given id .
2464	Returns the JNDI name for the given model .
2465	Returns the canonical name of a view method .
2466	registers a synchronization
2467	This method is called when all the threads are registered .
2468	Returns the current transaction .
2469	Deploys the dependencies of the BeanFactory .
2470	Returns True if the given persistence unit name identifies the given persistence unit name .
2471	Get the services dependencies of the server .
2472	Decrement the read lock count .
2473	Increment the read lock count .
2474	Add a service to a service .
2475	Called when a restoration calculation is reached
2476	Adds the search dependency .
2477	Visits the top bean deployment modules that are visible in the static modules
2478	Create JSEArchiveMetaData for the given deployment .
2479	Sets the config name and config file from the JSEWS Web WebDAV metadata
2480	Converts a list of security constraints into JSESecurityMetadata objects
2481	Get the servlet URLs and url patterns for each endpoint .
2482	Given a list of pojo endpoints and a list of pojo endpoints return a map of the servlets to the class name and the class name .
2483	Resolves all the injections of the view
2484	Get the list of available connectors .
2485	Parse the core environment element .
2486	Parse the process_id element from the reader .
2487	Get the path address from the operation .
2488	Set the operation s op_addr attribute .
2489	Get the value of an operation .
2490	Returns True if the operation is included in the model .
2491	Create a composite operation .
2492	Create an ADD operation .
2493	Create an ADD operation .
2494	Create a ReadAttribute operation for an attribute .
2495	Create an attribute write_attribute operation .
2496	Creates an undefine attribute operation .
2497	Returns the current context .
2498	Add a new URL context factory .
2499	Remove a URL context factory from a scheme .
2500	Load validation providers .
2501	Modify the endpoints of a deployment .
2502	Configure endpoints and servlets for the given deployment .
2503	Set the context root for the deployment .
2504	Returns the transport class from the given deployment property .
2505	Set the run as identity of the given principal .
2506	Pops the run as identity from the security context .
2507	Create the management view for the given unit .
2508	Injects a property into an object .
2509	Returns true if the given class type matches the given property type .
2510	Find a method by name and property type .
2511	Searches for a field by its name .
2512	Initialize the root logger .
2513	Derives information from a request .
2514	Run a standalone collect command .
2515	Collects the JDR reports .
2516	Register a resource adapter deployment .
2517	Remove a resource adapter deployment .
2518	Register the transformers for the given subsystem .
2519	Write params to out .
2520	Reads an exception from the stream and returns it .
2521	Returns the owner of the lock .
2522	Release the lock .
2523	Add a log to the log .
2524	Adds the context parameter to the Weld deployment .
2525	Get component view .
2526	Invoke an endpoint .
2527	Returns the view method that matches the given sei method .
2528	Returns True if the sei method matches the target method .
2529	Creates a static resource for monitoring .
2530	Returns the security metadata for an endpoint
2531	Returns the new security domain if it exists .
2532	Ensure that two security domains are present .
2533	Set theidl name of the given string .
2534	Get the absolute name of the entry .
2535	Return a new JndiName from a string .
2536	Deploys the Iron Jacamar XML .
2537	Handle a request .
2538	Returns True if the current transaction is active .
2539	Get the transaction synchronization registry .
2540	Returns the connection factory .
2541	Get the last component of a name .
2542	Return True if name is empty .
2543	Log a nameNotFound exception .
2544	Creates a naming exception .
2545	Creates a naming exception .
2546	Creates a CannotProceedException
2547	Creates a naming enumeration .
2548	Rebind a name to a value .
2549	Returns the activeMQ component control for the given operation .
2550	Parse connection attributes .
2551	Construct a component instance .
2552	Try to find a mountable mountable path .
2553	Resolve the runtime name to a string .
2554	Create listener XML builder .
2555	Returns an analysis for the given class .
2556	Shut down the component .
2557	Returns a linked list of URLs .
2558	Get the servlets metadata .
2559	Get the servlet mappings from the JbossWebMetaData .
2560	Get the security constraints from the JbossWebMetaData
2561	Get the login config from the JbossWebMetaData .
2562	Get the context parameters from the JbossWebMetaData .
2563	Gets a WebResourceCollectionMetaData from the securityConstraint metadata .
2564	Returns a list of initParams for the given servlet .
2565	Returns a new SecurityConstraintMetaData .
2566	Creates a new WebResourceCollectionMetaData .
2567	Returns a new JBOss servletMetaData .
2568	Creates a new servlet mapping .
2569	Returns a new AuthConstraintMeta instance with the specified role names .
2570	Returns a new UserDataConstraint .
2571	Creates a new ParamValueMetaData .
2572	Return a new ParamValueMetaData .
2573	Sets up the interceptors for the SessionBean component
2574	Processes a resource injection target .
2575	Stop the WeldContainer .
2576	Get the JNDI name from the model .
2577	Resolve an attribute definition .
2578	Get the type of a URL pattern .
2579	Returns true if the given resource adapter is a pooled connection factory .
2580	Checks if the given resource adapter is an external pooled connection factory
2581	Returns the activeMQ server name .
2582	Returns the default persistence unit name for the given persistence unit
2583	Start the activity .
2584	Stop the context .
2585	Suspends the server .
2586	Resume this session .
2587	Called when an invocation is complete .
2588	Called when a transaction is created .
2589	Bind the resource to the named naming store .
2590	Stop the controller .
2591	Returns the name of a capability name .
2592	Create a list of resources for the given deployment root .
2593	Returns a set of all the class loaders of the given deployment .
2594	Returns whether the class file transformer should be used .
2595	Returns a boolean indicating whether the given persistence unit can be used .
2596	Returns True if the default data source use property is set to True
2597	Returns True if the entity manager is not in the target manager .
2598	Create an ORB object .
2599	Initializes the ORB application with the given applet .
2600	This method is called to initialize all the methods that are connected to the remote server .
2601	Sets the active naming store .
2602	validate default values
2603	Checks if the parameter is a parameter type .
2604	Given a list of annotations return the defaultValue .
2605	Validate the type of the base method .
2606	Get all deferred EntityManagers
2607	Returns a string representation of a transaction status .
2608	Add cache dependencies .
2609	Extract database dialects .
2610	Determine if the database dialect is available .
2611	Identify the dialect of a dialect .
2612	Checks that the database exists .
2613	Returns the scheduler date as a datetime object .
2614	Sets the node name in the statement .
2615	Mark a deployment unit as a boolean .
2616	Read parameters from the stream .
2617	Writes the returned value to the output stream .
2618	Writes an exception to out .
2619	Generic lookup function .
2620	Start a new SFSB injectedXPCs
2621	End the SFSB creation thread
2622	Returns the caller s invocation stack .
2623	Adds entity manager to the stack .
2624	Remove the stack from the stack
2625	Returns the current entity for the current call stack
2626	Adds dependencies to the Weld module .
2627	Process all managed beans in the configuration file .
2628	Process phase listeners from the configuration files .
2629	Returns the type ID for the given class
2630	Insert any primitive into any object .
2631	Convert a Java identifier to an ID .
2632	Returns True if the string is a reservedIDL keyword .
2633	Returns the signature for the given class .
2634	Returns the signature of a method .
2635	Returns the string representation of a primitive type .
2636	Returns the batch permission for the given name .
2637	Returns an entity manager if it does not exist .
2638	Add a new value to the specified key .
2639	Convert a security role to a model
2640	Returns the most recent entity version
2641	Returns a list of timers for the specified object .
2642	Returns the directory for the given timedObjectId .
2643	Adds a listener to a target .
2644	Removes a naming listener .
2645	Fire an event .
2646	Returns a consumer that closes the value .
2647	Adds a private credential to the subject .
2648	Returns an object instance of the given object
2649	Adds the transaction management interceptor for a view
2650	Substitute from from_to to to to_to_to
2651	Creates an InVM transport configuration .
2652	Adds the specified name to an ear prefix if present .
2653	Returns the root deployment unit .
2654	Returns the name of the component .
2655	Creates a ViewConfiguration
2656	Create a view binding source .
2657	Returns the view interceptors for the specified method .
2658	Add a view interceptor to the proxy factory .
2659	Adds a view interceptor to the view interceptors .
2660	Returns the client interceptors for the given method .
2661	Add client interceptor to the proxy factory .
2662	Add client interceptors to the client interceptors .
2663	Store private data .
2664	Raise an exception when an unexpected element is encountered .
2665	Returns a list of all JAXWS endpoints for the given unit .
2666	Returns the list of POJOS endpoints in the JAXWS deployment .
2667	Get the endpoint name from the servlet metadata .
2668	Returns the class name of the endpoint class
2669	Returns the servlet metadata for the given servlet name
2670	Get the required attachment from a deployment .
2671	Get an optional attachment .
2672	Gets the JBOssWeb metadata for the given unit .
2673	Returns the PortComponentMetaData for the given name or None if not found .
2674	Returns the EJBEndpoint instance for the given class name
2675	Get the context root from the deployment .
2676	Returns the class for the given name .
2677	Returns the URL of the given resource .
2678	Get all the URLs of the given name .
2679	List all resources in the specified path
2680	Pop the stack of entity manager and close it .
2681	Get an entity manager by name
2682	Registers a listener for the clean up context .
2683	This method is used to process a WAR .
2684	Updates a server configuration attribute .
2685	Returns True if all fields are public .
2686	Creates a new HTTPEndpoint .
2687	Create a new ArchiveDeployment model for the given unit .
2688	Returns True if the deployment is a JJRS deployment .
2689	Set the next timeout .
2690	Sets the timer state .
2691	Merge a list of ResteasyDeploymentData objects into a list of ResteasyDeploymentData objects .
2692	Deploys the dependencies of the module .
2693	Adds the remote transaction service to the component configuration
2694	Returns all container interceptors
2695	Determine if a method is level level .
2696	Check that two elements are only one of the same name .
2697	Returns the class of the given class .
2698	Get the component type of a parameterized type .
2699	Returns a resource definition for the Elytron key store .
2700	Returns a resource definition for the Elytron key manager .
2701	Returns a resource definition for the Elytron trust manager .
2702	Parse a name into a CNCompoundName object .
2703	Convert string to Vector .
2704	Parse a name component .
2705	Deactivate the IRObject .
2706	Convert a CORBA servant to a reference .
2707	Authenticate the given username and password .
2708	Returns true if the given class is matched .
2709	Lookup a binder by its name .
2710	Unbinds the named Jndi name .
2711	Instantiates an instance of the given bean .
2712	Configures all the properties of the given bean
2713	Dispatches a joinpoint to the given configuration .
2714	Get the current namespace selector .
2715	Returns a service name .
2716	Returns the service name for the given class .
2717	Get a class description by its name .
2718	Process annotations from the Metadata Unit
2719	Post - parse the given persistence_xml .
2720	Validate descriptor .
2721	Create the JAR metadata for the given deployment .
2722	Create a web . xml descriptor .
2723	Returns the auth - method for the given deployment .
2724	Deploy the deployment to the server .
2725	Handles the stateless session bean description .
2726	Returns the stub class .
2727	Generate anonymous ObjectId .
2728	Returns a list of available persistence providers .
2729	Clear all cached providers .
2730	Add a deployment specific persistence provider to the list .
2731	Finds the parents of the given class .
2732	Deploys the JBOSS service xml descriptor
2733	This method is used to add a service to the deployment .
2734	Sets the annotation indexes for the given persistence unit .
2735	Get the persistence provider adaptor for the given persistence unit .
2736	Save a persistent persistence provider .
2737	Returns the persistence provider for the given deployment .
2738	Return a set of annotated classes .
2739	Creates the meta data for an EJB deployment .
2740	Creates a new SLSBMetaData object from the ejbs metadata .
2741	Refresh a participant .
2742	Get the analysis for the given class .
2743	Returns the container analysis for the given class .
2744	Creates a ContainerAnalysis for the given class .
2745	Returns the module s idl module name .
2746	Convert integer to hex
2747	Converts a long integer to a hex string .
2748	Returns true if the given method is an accessor .
2749	Checks if the given method is a mutator .
2750	Returns True if the given method has no exceptions .
2751	Parse attribute read name .
2752	Return the attribute write name .
2753	Fixes overloaded operation names .
2754	Make sure all case names in the analysis are in the same case .
2755	Escape IR name .
2756	Parse an XS environment element .
2757	Parse the default context propagation element .
2758	Process the attributes of an XML stream .
2759	Load a list of available persistence providers .
2760	Create a step handler that will add an operation to the specified model .
2761	Deploys all the dependencies of the module
2762	Write an XML attribute .
2763	Returns the MethodIntf for the given InterceptorContext .
2764	Create a session ID for a remote service .
2765	Infer the destination name from a string .
2766	Register the given endpoint class .
2767	Returns the list of XML names for the given job name .
2768	Load and load the job XML files .
2769	Return the URI of the request .
2770	Create a resolve result from a URL .
2771	Lookup an object by name .
2772	Binds an object to an object .
2773	Call the unbind method .
2774	Returns a NamingEnumeration for the given name .
2775	Called when the context is destroyed .
2776	Destroy a subcontext
2777	Create a new context and return a new context .
2778	Create a subcontext .
2779	Lookup a link by name .
2780	Adds a property to the environment
2781	Removes a property from the environment .
2782	Adds transformations to the given version .
2783	Parse a credential from a reader .
2784	Removes the specified security domain .
2785	Look up the JNDI for the given context name .
2786	Create a new modular reference .
2787	Create a modular reference .
2788	Create a new modular reference .
2789	Returns a LocalIDLType for the given TypeCode code .
2790	Wait for a service to complete .
2791	Compute the masked password .
2792	Initializes the security vault .
2793	Start a vault session .
2794	Displays an attribute created
2795	Display the vault configuration .
2796	Return the vault configuration .
2797	Check that the value is not None .
2798	Get the name of the deployment service .
2799	Insert value into any .
2800	Returns True if the given permission is implied by the given permission .
2801	Get the action string .
2802	Get the name of the log .
2803	Sends an attribute change notification .
2804	Get the state of a CORBA object .
2805	Returns the value of the given type .
2806	Returns the name of the context name
2807	Returns all interceptors
2808	Adds a method interceptor to the set of interceptor classes .
2809	Add a dependency to the dependency list .
2810	Returns a list of component interceptors
2811	Returns a list of interceptors for the given method .
2812	Add a timeout view interceptor .
2813	Adds an around construct interceptors to the specified factory .
2814	Adds a post - construction interceptors to the specified interceptor factory .
2815	Adds a pre - destroy interceptor to the given interceptor factory .
2816	Adds a pre passivate interceptors to the given interceptor factory .
2817	Register a post - activate interceptor factory .
2818	Sets the component create service factory .
2819	Remove aliases from a list of entries .
2820	Add transport providers to the client .
2821	Constructs a service name for a component .
2822	Constructs a service name for a given module .
2823	Returns the bind info for an environment .
2824	Returns the bind info for the given jndi name .
2825	Return a cached cache .
2826	Returns a list of ValueMember objects
2827	Returns a list of value members for the specified type .
2828	Create a new subsystem root .
2829	Parse a config element .
2830	Start the named naming store .
2831	Adds a WeldInstantiator to the target .
2832	Returns a service name for the job operator .
2833	Add a component description to the given deployment .
2834	Add a message destination .
2835	Returns a set of all components that match the given view type .
2836	Gets all components of a particular component .
2837	Returns a set of ViewDescription for the given component name .
2838	Resolves the specified message destination to the specified path .
2839	Add Hornetq server transformers .
2840	Rejects the defined attribute with the given builder .
2841	Rename an attribute .
2842	Pop the identity of the context .
2843	Load the module identifiers .
2844	Checks that the active versions are valid .
2845	Compute the slot associated with the jsf version .
2846	Return the TypeCode of a constant .
2847	Add a code to a type code map .
2848	Ensure that the given package exists .
2849	helper function to add interfaces to a container
2850	Returns the abstract base values for the given container .
2851	Adds the given class to RmiIII .
2852	Add an interface to the module .
2853	Adds a value definition to the module .
2854	Add an exception to an exception map .
2855	Returns the class level injection type for an annotation .
2856	Check if JTS is enabled .
2857	Start the store
2858	Stop the context .
2859	Check if the specified method is allowed to be allowed .
2860	Raise an exception if the transaction is not allowed .
2861	Returns a set of all component classes for this component .
2862	Get the waiting on transaction completion timers
2863	Get extra parameters from a dictionary .
2864	Extract the parameters from the configuration .
2865	Converts a type to a class .
2866	Converts the given value into an object .
2867	Get the type of the values from the values .
2868	Simple check for type names and types .
2869	Get the next element from the list .
2870	Returns True if any of the bindings are available .
2871	Map a binding to a new binding .
2872	Observe the health check procedure .
2873	Close all health checks
2874	Returns the reference for the given locator
2875	Returns a HandleImpl for the given locator .
2876	Converts a model node to an Enum .
2877	Skip amount of bytes from the stream .
2878	Check that two elements are not only one .
2879	Add a component to the module .
2880	Adds all class loaders to the deployment class loaders .
2881	Unbind the given name .
2882	Lookup an object by name .
2883	List the names of the given name .
2884	List all bindings of a named name .
2885	Adds a factory to the registry .
2886	Creates a new setupContextHandle for the given contextService .
2887	Create an IO subsystem with the given base address .
2888	Create the welcome content handler .
2889	Get an object from the pool .
2890	Calculates the operation analysis map .
2891	Returns a MetricRegistration for the given resource .
2892	Creates a WSGI endpoint deployment unit .
2893	Deploys the specified service .
2894	Publish a webapp to the given unit .
2895	Stop web application .
2896	Start the WeldContainer .
2897	Register an endpoint configuration .
2898	Attempts to retry a timer .
2899	Post timeout processing .
2900	Get the declared methods of a class .
2901	Get all the declared fields of a class .
2902	Returns the constructor for a given class .
2903	Gets a method from a given class .
2904	Adds the given MESSAGING_ACTIVE_MODULE to the model .
2905	Returns True if the parameter is allowed for the given resource type .
2906	Migrate the factory of a generic transport .
2907	Cancels the status of the Future .
2908	Checks if the job is cancelled .
2909	Changes the global property type
2910	Returns true if the query can execute indexed function without index .
2911	Estimate the number of indexes of the given OClass .
2912	Find all classes in a directory .
2913	Returns a list of classes that contain the given interface .
2914	Gets the generic value of a field
2915	Returns True if the record matches the filter condition
2916	Derives the requested field from the database .
2917	Update an existing record .
2918	Find a record by id .
2919	Returns the minimal set of nodes for a given cluster
2920	Move flatteded equalities to right
2921	Add order projections to the query .
2922	Extract sub queries from info .
2923	Returns True if id is in the filter clusters
2924	Handle sort only order only .
2925	Checks if the given class is a diamond hierarchy .
2926	Returns the order direction of the query
2927	Returns True if the key condition requires multiple index lookups .
2928	Find the best index for all indexes .
2929	Builds an index search descriptor for a fulltext index .
2930	Returns the common factor for each index
2931	Create a new ODocumentFieldHandlingStrategy instance .
2932	Check if the user has permission for the given resource .
2933	Returns True if the user has a specific rule
2934	Get the status of a distributed server .
2935	Initialize the system database .
2936	Loads the local databases from the server
2937	Called when a member is removed
2938	Obtain a new lock manager .
2939	Try to assign a lock manager from the current node .
2940	Commit the current transaction .
2941	Perform a rollback .
2942	Update the identity after a record .
2943	Updates the record cache after rollback .
2944	Prepares a file creation or replacement .
2945	Try to move a file to the specified target .
2946	Returns a list of patterns that are disjoint .
2947	Execute a command locally locally .
2948	Append characters to the builder .
2949	Returns True if the socket is connected .
2950	Merge two buffers together .
2951	Splits a short value into two buffers .
2952	Executes the specified property in the database .
2953	Insert a single value into the index .
2954	Removes the specified key from the cache .
2955	Runs the command on the database .
2956	Executes the first argument and returns the first result .
2957	Create the open channel .
2958	Returns the offset and length of the file .
2959	Replace the content file with the new content file .
2960	Executes a single command
2961	End request .
2962	Adds the host to the server
2963	Begin a request to the remote session .
2964	Get the current database .
2965	Get a connection by its channel
2966	Kills the given connection
2967	Internal method to interrupt the channel .
2968	Disconnect a connection from the server
2969	Push clients to distrib cfg2 .
2970	Tries to swap a value on an index .
2971	Release all locks .
2972	Synchronize all registered entities .
2973	Update the metadata dictionary .
2974	Returns the last record .
2975	Get the next character from the stream .
2976	Executes the SQL query .
2977	This method is called when an error occurs in an error message .
2978	Registers a storage compression algorithm
2979	Get the limit of open files
2980	Returns True if the query can be executed on the given target .
2981	Moves the buffer to the specified position .
2982	Fills the given length with the given length .
2983	Executes all the steps until the return statement is reached .
2984	Execute the entire script line .
2985	Returns True if the record is valid
2986	Execute the command
2987	Load the database configuration .
2988	Parses a command request and returns an OSQLQuery object
2989	Executes the request and returns the result .
2990	Update the schedule based on the given startNode .
2991	Adds an index definition .
2992	Split the aggregation split for aggregation .
2993	Try to determine the type of a document or map .
2994	Returns the collate for the given document .
2995	Returns the string representation of the value .
2996	Advance the probe .
2997	Removes all clusters from the database
2998	Build a JSON document from a JSON file .
2999	Returns True if the given password matches the given hash .
3000	Creates a hash using the specified algorithm
3001	Check if the given algorithm is supported .
3002	Creates an index .
3003	Returns an iterator over all vertices in the graph .
3004	Returns an iterator over the edges of the graph .
3005	Get the partition key of the inner task .
3006	Returns the number of tasks distributed in the database .
3007	Initialize the features .
3008	Checks if the changes have been filled up .
3009	Parse a timeout value .
3010	Parses the lock strategy .
3011	Creates a cluster with the given name and clusterName
3012	Free a cluster by its ID
3013	Start profiling .
3014	Shut down the underlying instance .
3015	Create a new OScriptResultSet from a collection of entities .
3016	Grant access to a resource .
3017	Revoke access for a resource .
3018	Returns True if the record is deleted otherwise False .
3019	Binds the parameters to the filter item
3020	Reset the table .
3021	Return the index of an item in a hash .
3022	Return a random integer .
3023	Creates an index for the given type
3024	Removes all indexes from the database
3025	Returns the index associated with the global index .
3026	Returns the linked class of the linked class .
3027	Return the document as a stream .
3028	Remove a listener .
3029	Returns an instance of the database with the given configuration .
3030	Timeout the requested request .
3031	Returns a copy of the database .
3032	Tries to merge two OSB trees .
3033	Replaces the observer with the given pointer .
3034	Transforms the result to a list of objects
3035	Adds a cluster to the database .
3036	Closes all pooled databases .
3037	Called when a storage is unregistered .
3038	Returns a set of all registered functions
3039	Returns a set of all collate factories
3040	Returns a set of all registered command factories
3041	Returns the field size and type from the given bytes .
3042	Wrapper around OHttpResponse wrapper .
3043	Wrapper around OHttpResponseWrapper .
3044	Wrapper for write_Records method
3045	Write a record to the response .
3046	Wrapper around OHttpResponse wrapper .
3047	Send a stream to the response .
3048	Open a database object .
3049	Closes the database .
3050	Called when a collection has changed .
3051	Complete the current operation .
3052	Push the counters to the snapshot .
3053	Push the written cache counters to the snapshot .
3054	Push storage counters to snapshot .
3055	Push the wal counters to the snapshot .
3056	Push the counters on the given component .
3057	Stop the write cache flush timer .
3058	Stops fuzzy checkpoint timer .
3059	Stops the full checkpoint timer .
3060	Stops the commit timer .
3061	Stops a wal record timer .
3062	Stops the wal flush timer .
3063	Parse SQL statement .
3064	Start receiving messages .
3065	Wait for the discovery server to disconnect .
3066	Removes the record from the database
3067	Sets the value of a property in the record
3068	Removes a property from the record .
3069	Checks if the given class exists in the schema
3070	Return a new OIndexCursor instance for the given cursor .
3071	Define a vertex attribute strategy .
3072	Define an edge attribute strategy .
3073	Returns a list of records that are created by the given class
3074	Returns a list of records that are created by a given cluster ID .
3075	Adds an index entry to the index .
3076	Merge two ORecord objects into a single set .
3077	Return True if the record is an instance of the record .
3078	Returns True if the query can execute an indexed function without index .
3079	Prepares the keys passed to the index .
3080	Write a page to the cache .
3081	Read a single page .
3082	Truncate the specified page .
3083	Open the WAL file .
3084	Returns True if the cluster is active .
3085	Get the new node strategy .
3086	Returns whether the execution_mode is synchronous or not .
3087	Returns True if the cluster is read or not
3088	Returns a map of server names to the given list of servers
3089	Returns the set of servers in the cluster configuration
3090	Check if a server contains all the specified clusters .
3091	Returns True if the server contains a server with the given cluster .
3092	Returns the master servers
3093	Returns a set of all the servers configured in the cluster .
3094	Returns a set of all the clusters on the server
3095	Returns a set of all the clusters owned by the server
3096	Get the owner of a cluster .
3097	Get the owner of the configured cluster .
3098	Returns the list of servers configured on the cluster .
3099	Returns the set of registered servers
3100	Returns a set of all data centers
3101	Get the write quorum of a datacenter .
3102	Returns True if all servers are sharded .
3103	Returns list of servers in distributed database configuration
3104	Returns the datacenter of a server .
3105	Gets the global read quorum value from the cluster configuration .
3106	Get the write quorum for a given cluster .
3107	Get the configuration of the specified cluster .
3108	Find the datacenter configuration in the distributed database .
3109	Clear the initialization stack .
3110	Get an index by name and index class .
3111	Drop an index .
3112	Add a vertex to the graph .
3113	Adds an edge to the outVertex .
3114	Get a vertex by id .
3115	Returns an iterator over the vertices of a given class .
3116	Returns an iterator over the edges of the given class .
3117	Returns an OrientEdge instance corresponding to the given id .
3118	Reuse the database .
3119	Shutdown the database .
3120	Returns the type of this vertex .
3121	Returns an OrientGraph instance for the given name .
3122	Creates a vertex type
3123	Drop a vertex type
3124	Returns an OrientEdgeType instance .
3125	Creates an edge type
3126	Returns an OrientElement instance corresponding to the given id .
3127	Drop an index from an element .
3128	Create a new key index .
3129	Removes a listener from the background exception listeners
3130	Fire an exception flushing exception
3131	Stops the monitoring .
3132	Registers a profiler .
3133	Unregisters a profiler .
3134	Fetches write cache counters .
3135	Collects performance counters from all threads .
3136	Collects the performance counters for each thread .
3137	Compress a JSON string
3138	Returns the value of a configuration property .
3139	Detach from an object .
3140	Returns the version of the object
3141	Wraps the specified command with the specified command .
3142	Sets the dirty state of the object
3143	Removes the dirty state of an object
3144	Returns the set of all registered index factories
3145	Returns a set of all available index engines
3146	Returns a list of nodes that are missing
3147	Returns a list of all the servers that are conflict .
3148	Get the highest coherent response group .
3149	Check if there is a quorum response
3150	Returns the received responses
3151	Gets the execution plan for the given statement .
3152	Returns True if the query can be executed on the target target .
3153	Get the code for the given database
3154	Releases the specified database engine .
3155	Returns the next page of page in the cache .
3156	Update the size of the RidBag .
3157	Returns the value at the given index .
3158	Returns True if the index can be used to sort order after the order of ordered fields
3159	Returns the index of the first character in iText that is outside of strings in iText .
3160	Jump to whitespace .
3161	Returns the index of the next jump in the given text .
3162	Sets the fetch plan for the query .
3163	Enqueue a record to rePAIR .
3164	Cancel a repair record .
3165	Enqueue a cluster to rePAIRS
3166	Get the dependencies of the given pattern
3167	Creates a pojo object with the given name
3168	Register entity classes .
3169	Register entity classes .
3170	Sets the class handler .
3171	Acquire a database .
3172	Get a list of connections to the database .
3173	Acquire a database .
3174	Execute the operation on the database .
3175	Helper function to lookup provider for a given class .
3176	Warn if the cache configuration is too large .
3177	Create a vertex from a JSON object .
3178	Creates an edge from a JSON object .
3179	Create a JSON object from an element .
3180	Create an object node from an element .
3181	Execute an import in the database .
3182	Return the status of the job .
3183	Returns the active datacenter of all servers .
3184	Separate algorithm from a string .
3185	Create an OSymmetricKey instance from a configuration .
3186	Creates an OSymmetricKey from a file .
3187	Create an OSymmetric key from a stream .
3188	Encrypts the given bytes using the given transform .
3189	Saves the base64 key to the stream .
3190	Saves a JCEKS key into the key store .
3191	Sets the child context
3192	Adds an object to the unique result list
3193	Returns the value of the given field as a dictionary .
3194	Authenticates the database with the given username and password
3195	Get the value of an entry from a map .
3196	Get a record from the database .
3197	Read current record from database .
3198	Returns an OrientGraph instance
3199	Returns an OrientGraphNoTx instance
3200	Setup the database pool .
3201	Returns the value of a property
3202	Stop a transaction .
3203	Parse an OSQL statement .
3204	Get next token .
3205	Get token by index .
3206	Generate a parsed parser .
3207	Returns an iterator over all connected vertices .
3208	Remove the document from the graph .
3209	Add an edge to the graph .
3210	Adds an edge to the graph .
3211	Returns the name of the connection class
3212	Returns the connection class for the given direction
3213	Process broken RIDs .
3214	Returns a map of all available console methods
3215	Execute a task on the local node .
3216	Returns the number of nodes with the given status .
3217	Backup a file with an output stream .
3218	Wait for next retry .
3219	Returns the argument at the given position .
3220	Returns the number of parameters in the request .
3221	Connect to the server .
3222	Returns the list of databases in the database .
3223	Get the server information .
3224	Checks if the database exists .
3225	Drop a database .
3226	Freezes the database .
3227	Release the database .
3228	Get the status of the cluster
3229	Suppress warnings about the index
3230	Returns an OrientBaseGraph instance .
3231	Parse the retry parameter .
3232	Saves the specified record to the database .
3233	Deletes a record from the database .
3234	Returns the WWW - Auth header for the database .
3235	Authenticates the user with the given password .
3236	Returns True if the user is authorized or not
3237	Start the server thread
3238	Adjust the position of the start of the beginning of the line .
3239	Set a bucket pointer .
3240	Returns a bucket pointer for the given offset .
3241	End an atomic operation .
3242	Acquire an exclusive lock until it is complete .
3243	Changes the maximum amount of memory used by the disk cache .
3244	Listen for connections .
3245	Read the parameters from the server .
3246	Shutdown the log manager .
3247	Add an item to the cache .
3248	Remove an entry by key .
3249	Acquire an open open entry .
3250	Get the value of a key .
3251	Clear the cache .
3252	Closes the open file .
3253	Empty read buffers .
3254	Add a task to the state buffer .
3255	Called when an entry is read .
3256	Put an entry into the read buffer .
3257	Returns the closest power of an integer .
3258	Process a push request .
3259	Converts an object into an enum .
3260	Convert all values in the underlying map to enum values .
3261	Returns the serializer for the given type
3262	Initialize the shutdown queue .
3263	Get an engine by name .
3264	Execute a simple query
3265	Execute the request .
3266	Returns a new readersEntry .
3267	Authenticates the authenticated user .
3268	Creates the metadata for the database
3269	Try to acquire a read lock .
3270	Returns the vertex for the given direction .
3271	Returns the ID of the graph .
3272	Set the value of a property .
3273	Remove a property from the graph .
3274	Clears all subtrees in the cache .
3275	Delete all subtrees in the root bucket .
3276	End the database .
3277	Create a vertex if it does not exist .
3278	Parse the strategy .
3279	Reads embedded collection fields from the embedded collection .
3280	Executes the given set of records
3281	Returns true if the field is connected to the database .
3282	Fills the given record with the given buffer .
3283	Sets the version of the record
3284	Get the type of the record
3285	Attempts to open the database .
3286	Print the stack trace of an exception .
3287	Execute an index query .
3288	Convert link to record .
3289	Registers a server command instance .
3290	Creates a server user configuration from a document .
3291	Returns a list of OIndexResults that match the condition .
3292	Creates an index search property
3293	Attaches the object to this object .
3294	Returns the index class
3295	Execute the next operation with the given value .
3296	Truncate the database .
3297	Add an instance of the subclasses to this class .
3298	Adds the clusters to the list of polymorphic clusters .
3299	Serialize a link to a stream .
3300	Release the pointer .
3301	Checks if the direct memory pointer is not released .
3302	Clear the pointer pool .
3303	Convert a byte array to an integer .
3304	Called when the server is open .
3305	Installs the cluster ownership of the given class .
3306	Dump the server status .
3307	Returns the index of the first element in an array
3308	Returns the index of the first element in an array .
3309	Returns the set of clusters that are involved in the target query .
3310	Handle results .
3311	Returns a unique ID counter based on the parent query
3312	Report the tooltip
3313	Parse the fetch plan .
3314	Parse no cache .
3315	Optimize the index for a given schema class .
3316	Return the status of the job
3317	Suppress warnings .
3318	Handle the JVM error
3319	Validate and validate an index value .
3320	Roll back the given micro - transaction .
3321	Executes the given command .
3322	Register a cluster in the database .
3323	Sets the property value .
3324	Executes the specified class in the database .
3325	Executes the sync database command .
3326	Delete a record from the database .
3327	Calls the callback hooks for the given id .
3328	Delete a document from the database .
3329	Returns the count of the given view .
3330	Count the number of classes in the database .
3331	Activate this document on the current thread .
3332	Registers a storage encryption algorithm .
3333	Get the relative position of a binary chunk .
3334	Parse optional word .
3335	Returns the next word in the parser
3336	Parse the next character in the parser .
3337	Parse an optional keyword .
3338	Check if a character is a separator .
3339	Removes a class from the database .
3340	Clears all configuration files .
3341	Get the offset of the offset of the buffer .
3342	Extract token type from OAuth2 access token
3343	Acquire an OAuth2 access token .
3344	Copies the current token to the current token .
3345	Check if there is no more characters .
3346	Read a line from a byte array .
3347	Read a line from the buffer .
3348	Skip the number of bytes from the stream .
3349	Skip n bytes from the stream .
3350	Ensures that the offset and length are within the specified length .
3351	Merge two arrays .
3352	Swaps two numbers .
3353	Quick sort function .
3354	MurmurHash 3 .
3355	MurmurHash3 hash .
3356	Writes the given byte buffer to the file .
3357	Truncate the file to the specified size .
3358	Change the position of the file .
3359	This function is called by the consumer_refresh_metrics .
3360	Wait for all the pending tasks to complete .
3361	Return a stream of matching matches .
3362	Find all possible compaction targets that can be used for compaction .
3363	Cleans up snapshot files .
3364	Returns the hash of the hash of the given field
3365	Determines if two HollowObject fields are equal .
3366	Recursively walks all references that are referenced outside closure .
3367	Called when an announcement is complete .
3368	Report the cycle completed .
3369	Reads header tags from the stream .
3370	Extract the primary key from an object .
3371	Clears all the bits in the memory .
3372	Read all the ordinals in the stream .
3373	Return the size of the sparse bitset .
3374	Gets the field value for a Hollow diff view row .
3375	Copy data from src to destPos .
3376	Copy data from source position to dest position .
3377	Check if two bytes are equal
3378	Copy bytes from src to destPos .
3379	Copy data from source position to dest position .
3380	Read data from an input stream .
3381	Writes bytes to the given stream .
3382	Ensures that the specified segment index is empty .
3383	Returns the index of a name field .
3384	Calculates the total number of select buckets and total number of select buckets .
3385	Checks if the dataset has collections in the dataset .
3386	Generate Hollow API classes .
3387	Generate files for hollow schemas .
3388	Returns True if the key matches the given ordinal .
3389	Get the record key corresponding to the given ordinal .
3390	Create a FieldPath for the primary key .
3391	Create a field path for a hash index .
3392	Create a field path for a prefix index .
3393	Puts an object into the cache .
3394	Initialize the prefix index .
3395	Returns True if the key contains the given key False otherwise .
3396	Returns the percentage of card to change .
3397	Add a field to the specified type .
3398	Returns an ordered list of hollow schemas .
3399	Initialize default values with default values .
3400	Get the value at the given index .
3401	Find all matching records in a given field .
3402	Find all matching records matching a given field .
3403	Set the elements matching paths .
3404	Set the set of element paths for the given paths .
3405	Perform the calculation of the HollowIndexer .
3406	Restore latest announcement from last state .
3407	Run an incremental cycle .
3408	Exclude the given key from the index .
3409	Exclude all referenced objects in the registry .
3410	Writes a HollowBlobHeader to the stream .
3411	Calculates the heap footprints for the given hollowReadStateEngine .
3412	Write data to buffer .
3413	Writes a fixed - length integer to the buffer .
3414	Writes a fixed - length integer to the buffer .
3415	Allocates a free ordinal to the pool .
3416	Sorts the free ordinals
3417	Returns the hash of the given key and type .
3418	Returns the hash for the given key .
3419	Resizes a fixed - length array .
3420	Finds the free ordinal .
3421	Internal helper to prepare pointers to write .
3422	Compares a serialized representation .
3423	Grow the key array .
3424	Rehash previous data .
3425	Return an array of empty keys .
3426	Returns True if two HollowIndex objects are equal .
3427	Find a matching key
3428	Returns a new ReadStateHelper .
3429	Calculate the hash table size .
3430	Run the compaction cycle .
3431	Writes the snapshot to the given stream .
3432	Write the delta to the stream .
3433	Adds schema names to the set if they are primitive .
3434	Normalizes field path .
3435	Rebuild the hash index .
3436	Returns the results that match the given query .
3437	Trigger an asynchronous refresh .
3438	Trigger an async refresh .
3439	Returns a new HollowTypeDiff with the given primary key paths .
3440	Calculate the differences between all hollow types .
3441	Writes a long value to the stream .
3442	Writes an integer to the output stream .
3443	Writes an integer to a byte .
3444	Read an integer from the stream .
3445	Reads a long value from the stream .
3446	Add a child view to the layout .
3447	Refresh the size of the loading view
3448	Update the UI for the current mode .
3449	Handle a pull event .
3450	Performs an over - scroll over - refresh .
3451	Creates a new fact .
3452	Add facts to the rule builder .
3453	Create a rule builder .
3454	Create a rule builder .
3455	Creates a new rule builder with the given fact type .
3456	Create a new RuleBuilder with the result type .
3457	Creates a new rule with the given name and value .
3458	Creates a new rule builder for the given facts .
3459	Creates a new rule with the given action .
3460	Returns an instance of the given rule .
3461	Get the first annotated field of a class .
3462	Get the first annotated method of a class .
3463	Returns the first annotation of the given class .
3464	Register a new auditable rule .
3465	Updates the status of a rule
3466	Returns a dictionary with the status of the current thread .
3467	Creates a new RuleBook with the result type .
3468	Add an action to the rule builder .
3469	Add an action to the rule builder .
3470	Reset the default value .
3471	Creates a rulebook with the given fact type .
3472	Returns a list of rule classes .
3473	Reads an empty line from the table .
3474	Returns a list of Service objects
3475	Get ports from the build configuration
3476	Extract ports from config
3477	Parse a port mapping specification .
3478	Adds port if not None
3479	Shifts a list of service ports
3480	Add missing parts to a service .
3481	Appends an image stream to a file .
3482	Returns true if the port matches the given port .
3483	Converts a service name into an environment variable .
3484	Retrieves the host and port from the service environment variable .
3485	Store a value if it does not exist .
3486	Merges the given dictionary into the given map .
3487	Merge two maps .
3488	Puts all the items in the ret into the ret .
3489	Wait until a pod is ready .
3490	Validate a Kubernetes identifier .
3491	Converts an entity to a list of HasMetadata objects .
3492	Get the resource version from the metadata .
3493	Check if a pod is ready
3494	Returns the current context
3495	Returns True if the given route has the given name .
3496	Check if the given project has a resource .
3497	Reads a resource file and enriches it .
3498	Converts a map of environment variables to a list of environment variables .
3499	Merges together Metadata objects .
3500	Merges the values in overrideMap and returns a new one .
3501	Returns True if podSpec is local image
3502	Read configuration from file .
3503	Adds port if valid
3504	Returns the docker json config string .
3505	Get plugin configuration .
3506	Returns the secret configuration for the given id .
3507	Download a file from a URL .
3508	Compare two versions
3509	Merges the specified profile with the specified profile .
3510	Lookup a profile by name .
3511	Read all profiles from classpath .
3512	Read all profiles from the class path .
3513	Tries to find a profile in the given directory .
3514	Return a list of paths to meta - inf profile files .
3515	Reads profiles from a YAML stream .
3516	Returns the image pull policy .
3517	Returns the OpenShift mode of the current environment
3518	Returns the replica count for the given builder .
3519	Finds the first child element with the given name .
3520	installs a template from an existing template
3521	Removes tags by name
3522	Apply a namespace to the given entity .
3523	Applies a project to a project .
3524	Creates a project request if it does not exist .
3525	Get the namespace of the given entity
3526	Called when an apply error occurs .
3527	Adds a project to the list
3528	Enrich a Kubernetes list builder .
3529	Returns the environment variables for the main class
3530	Returns the number of seconds in a duration
3531	Parse a string representing time units .
3532	Scans the build directory and returns the list of included files .
3533	Disable OpenShift features .
3534	Check if a service has an ingress rule .
3535	Parse a file - like mapping file - like object .
3536	Returns a generator context
3537	Extracts the generator configuration .
3538	Creates an enricher context
3539	Extract the enricher configuration .
3540	Returns the default icon reference
3541	Copies the app config files to the appBuildDir
3542	Get properties from a resource .
3543	Gets the Spring boot version of the project .
3544	Returns a list of service objects
3545	Enrich an enriched list builder .
3546	Returns the raw configuration as a dictionary .
3547	Flatten a dictionary into a flat map .
3548	Extracts the watcher configuration .
3549	Get a Template from a resource .
3550	Get the timestamp of the build
3551	Get a config value from the config .
3552	Returns the config map for the given name .
3553	Prepare a list of named processors .
3554	Add the from from to the builder
3555	Return the default name for a given runtime mode
3556	Get image name .
3557	Returns the registry .
3558	Returns whether or not the device is online .
3559	Get the URL for an external service .
3560	Converts a global property into a boolean .
3561	Creates a Jest client .
3562	Create an internal node
3563	Returns a list of registered plugins .
3564	Deserialize a JSON object from a JSON string .
3565	Get the rewards balance .
3566	Creates a PayPalPaymentResource from a JSON string .
3567	Perform a GET request .
3568	Custom POST method .
3569	Creates a VenmoConfiguration from a JSON object .
3570	Collect device data .
3571	Collect the device data from the configuration .
3572	Collect data from the PayPal fragment .
3573	Get client metadata ID .
3574	Check if the package is valid .
3575	Get a string from a JSON object .
3576	Parses the json body into a list of PaymentMethods nonces .
3577	Returns the checkout recipe for the browser .
3578	Returns the configuration for the browser .
3579	Perform a GET request .
3580	Post a POST request .
3581	HTTP POST method
3582	Start payment .
3583	Approve a local payment .
3584	Register a listener .
3585	Remove a listener .
3586	Request the billing agreement .
3587	Called when an activity result is received .
3588	Parse a PayPalAccountBuilder object from a PayPalRequest .
3589	Add noun to the dictionary .
3590	Remove words from a dictionary .
3591	Converts a sequence of tokens to a list of strings .
3592	Extract phrases from a sequence of tokens .
3593	Detokenize a list of tokens .
3594	Fetch a buffer from a channel .
3595	Given a list of nal units and a list of nalUnits return a new buffer .
3596	Join nal units into a buffer .
3597	Returns the profile for an integer .
3598	Normalize and generate fixed precision values .
3599	Read next marker .
3600	Read next marker from buffer .
3601	Find the maximum number of frames in the file .
3602	Perform fixing on the file .
3603	Copy a file from one file to another .
3604	Get the duration of the edited track .
3605	Get the time value for a given frame number .
3606	Convert time to frame value .
3607	Returns the number of edited edits .
3608	Convert edited tv to media time
3609	Get the video frame number from a movie .
3610	Returns a string representation of the player s time .
3611	Returns the value of the timecode frame
3612	Format a timecode sample .
3613	Create an unsigned integer .
3614	Set the given value to the specified value .
3615	Checks if the given color space matches this one .
3616	Return the size of the given size
3617	Create a MP4Demuxer from a stream .
3618	Read an integer from the buffer .
3619	Create WAVHeader
3620	Create a WAVHeader from a list of headers .
3621	Parses the MP4 decoder configuration and returns an AACDecoderConfig .
3622	Encodes a symbol by symbol
3623	Read the PICMarking parameter .
3624	Split track into edits .
3625	Decode a frame from the stream .
3626	Sets the big endian mode .
3627	Deblock blocks between left and top .
3628	Encodes a video frame into a video frame .
3629	Encode a long value into a byte array .
3630	Return the length of a byte integer .
3631	Add a packet to the stream .
3632	Reposition the file .
3633	decode CBC bit code
3634	This function is used to decode a binary code .
3635	Go to a marker in the buffer .
3636	Returns the sample frequency for an integer .
3637	Predict a plane
3638	Add DC and DC data to block .
3639	Add coefficients to block .
3640	Finalizes the block
3641	Concatenate bits together .
3642	Reverse a signed integer .
3643	Reverse reverse function .
3644	Seek to the current frame of the given frame .
3645	Get pixel buffer from video store .
3646	Returns the ID of the gain change point .
3647	Convert byte to int array .
3648	Convert an integer to a byte array .
3649	Write audio data to buffer .
3650	Convert a float buffer to a buffer .
3651	Interleave an audio format .
3652	Deinterleave an audio format .
3653	Returns the coded size of the video track
3654	Build a map for a box out map .
3655	Builds a map for the wipe map .
3656	Read a batch of UL objects from the buffer .
3657	Reads a batch of integers from the buffer .
3658	Calculate the median of two vectors .
3659	Encodes a frame into a frame .
3660	Encode an II frame .
3661	Encode a picture frame .
3662	Returns a collection of supported codec IDs .
3663	Returns a collection of supported codec tags .
3664	Add a reference to the pool .
3665	Internal method to delete all references .
3666	Flushes all the references .
3667	Load a Jilibrary library .
3668	Unpacks a shared library .
3669	Delete all temporary files .
3670	Get the default audio channel layout .
3671	Get the channel at the given index .
3672	Make MediaPacket object .
3673	Returns a string containing the version information .
3674	Returns the default time base .
3675	Make a Demuxer object .
3676	Plays a video from a file .
3677	Displays a video at the specified time .
3678	Make a codec descriptor .
3679	Print an option to stream .
3680	Register a new HumbleIO factory .
3681	Generate a unique name .
3682	Create a MediaAudioResampler from a layout and a layout .
3683	Returns a list of the supported video frame rates
3684	Returns a list of supported video pixel formats
3685	Returns the supported audio sample rates
3686	Returns a list of supported audio formats
3687	Returns a list of supported audio channels
3688	Sets the signal flag .
3689	Sets the flag of this video .
3690	Get the decoder for this stream .
3691	Get deuxer object for this stream .
3692	Returns a set of available formats .
3693	Make a filter graph .
3694	Returns the bit stream filter type .
3695	Get a buffer of bytes .
3696	Returns an AudioFrame with the given audio format .
3697	Resample a media picture .
3698	Validates the given image .
3699	Validate that the picture is valid .
3700	Get the filter graph for this video .
3701	Return the metadata for this video .
3702	Gets the CPU arch from a string .
3703	Get the CPU arch from a GNU string .
3704	Get OS family from a string .
3705	Get OS family from GNU string .
3706	Plays a sound from a file .
3707	Attempts to load a library into the cache .
3708	Sets the loaded library by its name
3709	Attempts to load a library .
3710	Initialize search paths .
3711	Attempts to load a library with the specified version
3712	Record the screen of the desktop .
3713	Delete the reference manager .
3714	Return a stream for the given position .
3715	Return a new Muxer object for this video stream .
3716	Creates a setScript transaction .
3717	Decode base58 encoded string .
3718	Generate seed string .
3719	Get a single transaction .
3720	Get a list of transactions for an address .
3721	Get a list of transactions from an address .
3722	Get a list of block headers .
3723	Gets a block by its signature .
3724	Send a transaction .
3725	Send a script to a private key account .
3726	Compiles a script into a string
3727	Write out a primitive array .
3728	Flush the buffer .
3729	Writes an object to memory .
3730	Return the class info for the last direct class .
3731	Convert an object to a byte array .
3732	Set the data for the MMF model .
3733	Get the specificity of a class
3734	Resizes the store .
3735	Remove an entry from the index .
3736	Write an ASCII string .
3737	Set the output stream .
3738	Create a new FSTConfiguration object .
3739	Create a new FSTConfiguration .
3740	Calculates the size of the object and returns the size of the object .
3741	Clear all cached objects .
3742	Returns a FSTObjectInput object .
3743	Get a FSTObjectInput object .
3744	Returns a FSTObjectInput object from an array of bytes .
3745	Return a new FSTObjectOutput object .
3746	Register cross - platform class mapping .
3747	Returns the canonical name of the given class .
3748	Write an integer to the specified type .
3749	Writes an integer to the specified type .
3750	Writes an 8 - bit integer .
3751	Write an array to the binary buffer .
3752	Write bytes to buffer .
3753	Return a new FSTInfo instance for the given possible classes .
3754	Called when an object was written .
3755	Called when an object was written .
3756	Returns the FSTInfo for the given class
3757	Write an array to the stream
3758	Set the length of a string .
3759	Writes an array to the output stream .
3760	Finishes a new FSTStructChange .
3761	Create a snapshot of the origin and the origin .
3762	Registers an object to be written to the registry .
3763	Write an object to a byte array .
3764	Reads an array and returns it .
3765	Read bytes from the storage .
3766	Read an integer .
3767	Back up to length length .
3768	Set the thread pool enabled .
3769	Start an embedded Cassandra Cassandra server
3770	Clean data using Cassandra .
3771	Copy resource to directory .
3772	Print process information to stream .
3773	Check if a remote port was taken
3774	Returns an empty subscriber state .
3775	Returns a map of onnx ops
3776	Calculate output shape
3777	Return True if n is true otherwise False .
3778	Returns True if n is true otherwise False .
3779	Returns a boolean array of boolean values for the given ndarray .
3780	Return a boolean array of boolean values of condition .
3781	Applies a condition to the given NDArray .
3782	Compute the first index of an NDArray .
3783	Convert the buffer to a flat properties
3784	Convert flat properties to FunctionProperties
3785	Convert a list of functions to a flat buffer .
3786	Set the underlying exception .
3787	Set the first state of the given exception .
3788	Merge two lists of coordinates .
3789	Partition variable by chunk
3790	Convert MXNet s DataType to NDArray type .
3791	Shutdown the transport
3792	Get the current architecture of the current device .
3793	Convert a col2im array to an NDArray .
3794	Wrapper around pooling .
3795	Creates a compression descriptor from a byte buffer .
3796	Split a list into batches .
3797	Ensure that the arrays have the same shape .
3798	Set the dtype of the buffer .
3799	Override the linspace of the data .
3800	Flatten a list of ndarrays into a flattened NDArray .
3801	Compute the bilinear products between two arrays .
3802	Create a complex array with real and imaginary components .
3803	Create a complex array with the given value .
3804	Create a complex array with a given value .
3805	Returns True if we should replicate the last sync time .
3806	Subtract real and imaginary components from a complex number .
3807	Return the angle of a complex number .
3808	ceil the complex number
3809	Return the negation of a complex number .
3810	Returns the absolute value of a complex number .
3811	Computes the power of a complex number .
3812	Create an Aeron context .
3813	Binarize the features .
3814	Returns a dataset containing examples and outcomes .
3815	Return the memory footprint of the data .
3816	returns a string representation of an exception
3817	Returns a fully qualified hostname .
3818	format a list of strings
3819	Convert a byte array to a hex string .
3820	Get a list of strings from a string
3821	Split a string into a list of strings
3822	Split a string into multiple strings .
3823	Find the next character in a string in a string .
3824	Escapes HTML characters .
3825	Join a sequence of strings into a single string .
3826	Converts a string to CamelCase
3827	Replace tokens in a template with the given replacements dictionary .
3828	Return a string representation of the stack trace .
3829	Invert an array .
3830	Returns the integer at n .
3831	Check if device side is on host side .
3832	Check if device side is on device side
3833	Create the shape information for a given shape
3834	Create a pair of shape information for a given shape
3835	Check if the given shapeInfo is a vector .
3836	Get the order of an NDArray
3837	Get the offset for an array
3838	Convert indices to NDArrayIndex
3839	Read a short value from the buffer .
3840	Reallocate the buffer .
3841	Copy data from one buffer to another .
3842	Get a constant buffer .
3843	Generate Kafka URI
3844	Computes the power of an array .
3845	Compute the log of an NDArray .
3846	Compute the max of the NDArray .
3847	Compute the maximum of two NDArray .
3848	Compute the min of an NDArray .
3849	Compute the minimum of two NDArray .
3850	Stabilize an NDArray .
3851	Create an Expm1 NDArray .
3852	Create a log1p array from an ndarray .
3853	Prepare ndarray of ndarray
3854	Adjust scheme to bounds
3855	Returns the next dataset .
3856	Implementation of sgeqrf .
3857	Build allocation shape .
3858	Check if a file exists in the environment .
3859	Read the data from the input stream .
3860	Sweeps the tail of the device .
3861	Creates a new NDArray from a pointer .
3862	Create NDArray from file .
3863	Allocates a new pointer .
3864	Attach an object to an object .
3865	Return whether the server is started .
3866	Execute an operation
3867	Synchronously flush the queue .
3868	Gets the stream of the resource .
3869	Returns the device associated with the given threadId
3870	Attach a thread to a device .
3871	Returns the next GPU device .
3872	Returns the name of the operating system .
3873	Determines the architecture type .
3874	Publish an array
3875	Starts the server .
3876	Create a new buffer .
3877	Raise an exception if the op does not contain INT data .
3878	Add two complex numbers to result .
3879	This method is called when a message is received .
3880	Average 3D variable .
3881	Create a depth - wise convolution variable .
3882	Reset all counters .
3883	Returns the class of the given op
3884	Stores the array and returns it .
3885	Get the shape of the array .
3886	Returns the NDArray of the given NDArray .
3887	Compress a double array
3888	Convert a complex array to a complex number .
3889	Returns the center of a complex array
3890	Truncates a complex array to the given dimension .
3891	Pads an array with zeros to the target shape .
3892	Returns the maximum integer value of an array .
3893	Broadcasts an array to the device .
3894	Process an aggregation message .
3895	Returns GAMMA decimal .
3896	Return the square root of x .
3897	Convert x to a BigFloat .
3898	Calculate the root of x .
3899	Returns the exponent of x .
3900	Return the exponent of the decimal .
3901	Returns the power of x and y .
3902	Round x to n .
3903	Return the sin of x .
3904	Returns the tangent of x .
3905	Returns the cosh of x .
3906	Return the sinh of x .
3907	Returns the tanh of x .
3908	Return the arcsinh of x .
3909	Calculates the coscosh of x .
3910	Gamma function .
3911	Broadhurst function .
3912	Scale a decimal .
3913	Scale x by precision .
3914	Return decimal precision
3915	Associates the function with the given id .
3916	Returns the list of inputs for a differential function
3917	Updates an array with the given variable name .
3918	Store the shape of a variable .
3919	Associates an NDArray with the given array .
3920	Gets a property from a differential function instance .
3921	Adds a new property to the given function .
3922	Adds an outgoing function to the output for the given variable names .
3923	Adds a new function to the incoming arguments list .
3924	Returns true if the given function has arguments .
3925	This function is used to execute the operation on the given inputs .
3926	Create a new SDVariable .
3927	Create a variable with one - like ones like .
3928	Creates an SDVariable with zeroslike .
3929	Removes an argument from a different function .
3930	Sets the gradient for a variable .
3931	Create an array containing an average pooling variable .
3932	Create a new SDVariable with a GRU cell .
3933	Execute a list of differential functions
3934	Creates a While statement
3935	Executes the given function with the given name .
3936	Executes two differential functions .
3937	Returns the result of the backward and end result
3938	Adds variable name to the shape of the variable
3939	Allocate a pointer for the given number of bytes .
3940	Returns the length of the given DataBuffer type .
3941	Returns the string corresponding to the allocation mode .
3942	Get the data type associated with the Nd4j context .
3943	Returns the operation number by name
3944	Destroy all memory workspaces .
3945	Prints statistics about current thread .
3946	Vectorized version of ndarray
3947	Returns an array of ndarrays from the consumer .
3948	Execute the computation of the accumulation .
3949	Apply threshold decoding .
3950	Get the name of a TensorFlow node .
3951	Invoke a scalar op .
3952	Raise an exception if no workspaces are open .
3953	Compute negative log likelihood .
3954	Requests a tick .
3955	Try to request to e .
3956	Release the current toe state .
3957	Get current state
3958	Build the environment
3959	Sends a message to the clipboard .
3960	Initialize the current dataset from a list of examples .
3961	Initialize host collectors
3962	Get the pointer for the given buffer .
3963	Synchronizes the buffer .
3964	Apply an updater to the gradients .
3965	Synchronously synchronize the given point to the specified point .
3966	Create NDArrayIndex from ndarray .
3967	Returns the properties of this function
3968	Returns True if any of the arguments have a place holder .
3969	Perform a diff between two variables .
3970	Format ndarray to string format .
3971	Import a graph from a graph .
3972	Convert to Blob object
3973	Load a complexNDArray from a blob .
3974	Save an array to disk .
3975	Copies real values to ndarray .
3976	Copies the imaginary values to the ndarray .
3977	Compute the difference between two complex numbers .
3978	Assigns an array to the linear view .
3979	Returns an NDArray of the given indices
3980	Put a row into a complex ndarray .
3981	Puts a column in the NdArray .
3982	Subscribes another NDArray .
3983	Add another NDArray to the result .
3984	Subscribes two NDArrays .
3985	Add another NDArray to the result .
3986	Assign a scalar value to this array .
3987	Return the inverse of the complex array .
3988	Compute the eigenvalues of an array .
3989	Performs symmetricized symmetricized eigenvalues .
3990	Compute the arithmetic maximum of an array .
3991	Copy x to y
3992	Scale an array with a double precision .
3993	Process DistributedGramRequestMessage
3994	Returns the number of non - zero elements in weights .
3995	Apply the reduction to the output .
3996	Returns the constructor for the given class .
3997	Gets the constructor for a given class .
3998	Invokes method handle with given parameters .
3999	Get an annotation from a list of annotations .
4000	Get the declared annotation of a class .
4001	Returns True if the given annotation is present in the given class .
4002	Creates a proxy for the given result .
4003	Load entity from datastore .
4004	Saves the given poo in the context .
4005	Creates a proxy for a given memcache service .
4006	Get the metadata for the given kind .
4007	Execute a key - only query .
4008	Perform a HybridQuery on the datastore .
4009	Run a single query on the datastore .
4010	Execute a projection query against the datastore .
4011	Returns the number of items in the datastore .
4012	Returns an iterator that will partition the input .
4013	Load a list of keys from the database .
4014	Append message to path
4015	Create a key for the given pojo .
4016	Compares two objects .
4017	Return a Key from a raw key .
4018	Return the key from a typed key .
4019	Returns the kind of the given class
4020	Returns True if the given type is not a parameterized type .
4021	Check if super type is a super type .
4022	Get all direct direct direct direct supertypes of type .
4023	Takes a type and returns it .
4024	Returns the translator for the given type key .
4025	Returns a populator for the given class .
4026	Returns the boolean instruction for the given class .
4027	Returns True if the given method can be loaded .
4028	Returns a list of all declared properties .
4029	Returns the key metadata for this entity .
4030	Get the result for the given key .
4031	Execute the pending round .
4032	Fetch all pending entities .
4033	Adds the indexed discriminators of a class .
4034	Register a translator for a class .
4035	Get the component type of a collection .
4036	Returns the type of the map key
4037	Create a ForwardPath from a path .
4038	Get the final path .
4039	Returns a string representation of the root node .
4040	Return the number of nodes in this path .
4041	Put all buckets in a collection .
4042	Empty the cache .
4043	Cache items in memcache if they are not already cached .
4044	Get all values from memcache
4045	Returns the keys of all buckets .
4046	Find all key fields in the class
4047	Safely save the entity s key .
4048	Sets the id of a pojo
4049	Returns the parent key of a pojo .
4050	Registers a subclass with the given superclass type .
4051	Check if two types have common types .
4052	Transform owner to declaring class .
4053	Get an annotation for the given type .
4054	Add all values from other to the session .
4055	Load a key by its parent .
4056	Execute the round if necessary .
4057	Translates an entity into a cache .
4058	Fetch entity from datastore .
4059	Safely load an entity .
4060	Helper to create a raw key .
4061	Returns the raw key .
4062	Returns the ID value of a key .
4063	Returns a Key object from a URL safe key .
4064	Create a transactionless object .
4065	Perform a transactionless transaction .
4066	Executes the given work and returns the result .
4067	Returns True if the given object matches the given conditions .
4068	Return objectify object .
4069	Returns an async datastore .
4070	Returns the metadata for the given object .
4071	Allocate a new key range .
4072	Open a new objectify .
4073	Closes the given objectify .
4074	 homogenous indexes
4075	Create a new reference .
4076	Returns the first item in the collection .
4077	Add a new value to the list .
4078	Return whether the future is done .
4079	Generates the conditions for the given field .
4080	Called when the engine is done .
4081	Get the container at the given path .
4082	Returns a Stat object for the given kind .
4083	Wraps the given exception and raises an exception .
4084	Get a translator for a type key .
4085	Returns a Translator for the root of the given class .
4086	Creates a Translator for the given tk .
4087	Loads a property from a container into a Pojo .
4088	Get the value of a field from a container .
4089	Sets the value of the given pojo .
4090	Saves the given object to the given entity .
4091	Returns the value of the given pojo .
4092	Write extensions to the given message
4093	Writes the content category to the generator .
4094	Write a list of content categories .
4095	Process a snippet .
4096	Get bids from response .
4097	Get a bid with the given id .
4098	Updates the bids in the response .
4099	Removes the bids from the response .
4100	Returns an iterable of Impps with the given imp filter .
4101	Read extensions from msg .
4102	Check if the token is empty .
4103	Registers an extension reader .
4104	Register an extension writer .
4105	This function is used to process the snippets .
4106	This function is used to process the snippet fields .
4107	Updates an iterable of Bokeh Builder objects .
4108	Filter a list of objects by filter .
4109	Get the current name from the JSON parser .
4110	Start a JSON object .
4111	Mark the start of an array .
4112	Peeks the next token in a JSON parser .
4113	Writes a boolean field to the generator .
4114	Writes a list of strings to the generator
4115	Writes a list of integers to the generator
4116	Writes a list of long values to a JSON array .
4117	Writes a list of ProtocolMessageEnum objects to the given field .
4118	Resolves a URL .
4119	Return a new URL with the given target .
4120	Get host segments from URL .
4121	Get host from URL
4122	Returns the page of the given URL
4123	Load a list from a persistent vector .
4124	Extract a single config element from a map .
4125	Get the protocol associated with the given URL .
4126	Generate the WARC info .
4127	Extracts the refresh URL from a string .
4128	Get metadata for outlink .
4129	Returns a copy of metadata that contains all the metadata in the metadata .
4130	Add a new URL to the queue .
4131	Validate a field name .
4132	Get the charset from the BOM .
4133	Gets the charset from the text content .
4134	Get charset from meta data
4135	Return True if the content is valid .
4136	Set the value of a key .
4137	Get the first value of the given keys from metadata .
4138	Returns a list of cookies from a list of cookies
4139	Checks if the domain domain matches the given domain .
4140	Generate a cache key for a URL .
4141	Get robot rules set from cache .
4142	Extract meta tags from a document .
4143	Acknowledge a tuple .
4144	Check if the URL matches the metadata .
4145	Apply all the rules in the URL string to the URLString .
4146	Read rules from a file .
4147	Converts a URL to query elements
4148	Creates a NavigationFilters object from the configuration file .
4149	Add a record format to the HDD .
4150	Returns the number of seconds that the last query is allowed .
4151	Returns whether or not the last query is allowed .
4152	Returns a ParseFilters object from the configuration file .
4153	Appends a new node to the current tree .
4154	 ignorable whitespace .
4155	Handle processing instruction .
4156	Add a comment .
4157	Handle CDATA data .
4158	Start a doctype .
4159	Start a namespace mapping .
4160	Returns the canonical URL for the given tuple .
4161	Return the text of the given text .
4162	Get the duration of a custom interval
4163	Get the URLFilters from the config file .
4164	Sets the number of items in the wheel .
4165	Get the size and state based on the measure spec .
4166	Set the empty item drawable .
4167	Set the angle of the wheel .
4168	Updates the selected position
4169	Invalidate a wheel item .
4170	Convert raw position to wheel position .
4171	Updates the angular velocity .
4172	Get contrast color from map entry
4173	Clamp an integer .
4174	Writes the coveralls data to the specified writer .
4175	Return the next byte as a byte array .
4176	Set a string .
4177	Returns an ArrayObject containing 1D strings .
4178	Create an ArrayChar from a string .
4179	Creates an ArrayChar from a list of values .
4180	creates an ArrayArray from an array of strings
4181	Get forecast time interval offset from a Grib2 record
4182	show the window
4183	Show the main window if it is not iconified
4184	Create an estimate of the size of a grid .
4185	Read Grib1 record from file .
4186	Return a new unit name .
4187	Return a new UnitName .
4188	Make a plural string .
4189	Check if date is included in date
4190	Returns a new DateRange with the intersection of this range .
4191	Extend a date range .
4192	Extends the date to the end date
4193	Set start time .
4194	Set the end time .
4195	Set the duration .
4196	recalculate duration
4197	Adds a map bean to the menu
4198	Print the error message .
4199	Get the name of the file
4200	String representation of parameters .
4201	Opens a DAP file and returns it .
4202	Compute the range iterator over all edges .
4203	This method is called when the UI has changed .
4204	Compute unlimited chunking .
4205	Register a directory .
4206	Process events .
4207	Returns a new TimeHelper object for the given reference date .
4208	Open a feature dataset .
4209	Wraps a NetCDF dataset and returns an analysis result
4210	Check if we have a feature type
4211	Find a FeatureType from a NetCDF file
4212	Write catalog to response .
4213	Convert catalog to HTML
4214	Gets the CSS for the page
4215	Gets the user head
4216	Create a catalog for a given path .
4217	Add global services to CatalogBuilder
4218	Initialize the HTTP session .
4219	Returns the response as a string .
4220	HTTP PUT operation .
4221	Returns the front page
4222	Make a catalog builder .
4223	Extract geospatial coverage .
4224	Returns the dataset with the given type or None .
4225	Return True if two VertCoordValue are nearly equal .
4226	Return a new UnitID .
4227	Parse an attribute string .
4228	Read the top - level NEXI product .
4229	Convert two integers into an integer .
4230	Converts a byte array to an integer .
4231	Returns a Date object representing the number of days and milliseconds .
4232	Make a valid NetCDF object .
4233	Returns True if name is a NetCDF3 object .
4234	Open the netCDF file for writing .
4235	Read the record data for a given section
4236	Reads a record data subset from a section .
4237	Fill non - record variables in the ncfile
4238	Creates a time struct for the given time index
4239	Creates a GradsTimeStruct from a calendar object
4240	Check if a time template exists .
4241	Adds a server side function .
4242	Get a boolean function by name .
4243	Get a BT function by name .
4244	Load a server side function .
4245	Returns the name of the level for a given grid record
4246	Get the description of a level
4247	Get the level unit for the given grid record
4248	Returns the type of the projection of the given GDS record .
4249	Check if the level is a vertical coordinate
4250	Check if a grid is a layer
4251	Creates a coordinate transform from a NetCDF dataset
4252	Create a dummy variable with a dummy transform .
4253	create a projection from a CoverageTransform
4254	Run the Thredds dataset chooser .
4255	Saves the state to the preferences
4256	Returns a new Chronology instance with the specified timezone .
4257	Write count to file .
4258	Writes an array to the serial stream .
4259	Write bytes to stdout .
4260	Write bytes to the output stream .
4261	finish init
4262	Returns a CalendarDateRange object from a date range .
4263	Create a Grib2GDS object .
4264	Parse ddsparse text .
4265	Parse text using DAS .
4266	Swap the grid header
4267	Read a grid from a McIDAS grid record
4268	This is the main function of the main function .
4269	Writes a constraint to the file output .
4270	Write WFS capabilities to file .
4271	Writes operations to file .
4272	Read all files in a directory .
4273	Scans the given log file .
4274	Get the data type of a grid .
4275	Find a grid by parameter
4276	data packing type
4277	unpacks the data into a float array
4278	Compute a floating point grid from an integer buffer .
4279	Unpack Grib1 data .
4280	Read Grib2 data from file .
4281	Print the grid records to stdout .
4282	Gets the next byte from the file .
4283	Create a CalendarDate object from a calendar date .
4284	Creates a CalendarDate object from a date .
4285	Creates a CalendarDate object from the given milliseconds .
4286	Create a CalendarDate object from a calendar date .
4287	Parse uunits string into a CalendarDate object .
4288	Get the difference in a calendar date .
4289	Create CDMArray atomic variable .
4290	Sets up the download parameters .
4291	r Escapes a string .
4292	Create slices from a list of ranges
4293	Unwrap the given file .
4294	Check if dimension contains variable length .
4295	Compute the effective shape .
4296	Add a date to a date
4297	Multiply a unit by another unit .
4298	Returns a new unit with the same scale as this unit .
4299	Returns a new unit that can be divided by the scale .
4300	Raises a new unit with the given power .
4301	Converts the amount to a derived unit .
4302	Convert a float to a derived unit .
4303	Converts the given amount to a float .
4304	Returns the canonical string representation of the derived unit .
4305	Read data from a section .
4306	Read data from the vindex 2 .
4307	Flatten a list of stations from a list of station names .
4308	Find a service by its name .
4309	Returns the size of the gate for the given datatype .
4310	Returns the start of the first gate in the given datatype
4311	Returns the number of gate counts for the given datatype
4312	Write an XML document to a NetCDF file .
4313	Get the preferred layout size for the target .
4314	Verify that the descendant dataset is descendant .
4315	Generates a proxy dataset resolver for the given catalog .
4316	Returns a CalendarDateUnit object for the given calendar name .
4317	Create a CalendarDateUnit object from a calendar date unit .
4318	Return a CalendarDateUnit object representing a calendar date unit .
4319	Converts a date to a double offset .
4320	Returns a calendar date .
4321	Returns a QuantityDimension for the base units .
4322	Check if a file is valid .
4323	Read station names from a file .
4324	Read 1 - dimensional array .
4325	Reads an int data array from a LayoutRegular Variable
4326	Read data from NetCDF file .
4327	Calculates the elevation of an angle
4328	Calculates the step between two bins
4329	calculate azimuth
4330	Calculate temperature for a single record
4331	calculate the decimal value
4332	Creates a vertical transformation for a dataset .
4333	Sets the debug flags
4334	Set whether or not to extend the index .
4335	Read data from a variable .
4336	Checks if a variable is missing at the given index .
4337	Returns the bounding box of the current axis
4338	Finalize the structure .
4339	Add tab to a buffer .
4340	Pads a string to a given width .
4341	Returns a string representation of an integer .
4342	Return a string representation of a long integer .
4343	Format the size as a string .
4344	Display a double precision
4345	Prints the number of decimal places
4346	Returns a string representation of a shape
4347	Finish the slice .
4348	Returns the constraint string .
4349	Compose two slices .
4350	Compose a slice from a slice .
4351	dump bytes from a buffer
4352	Dump bytes to memory .
4353	Returns the type associated with the given name .
4354	Returns the type of an EthEllipsoid with the given epsgId
4355	Decode the vlen data into an array .
4356	Decode the vlen array
4357	extract a list of URLs from a URL
4358	get text content from a URL
4359	Streams tags from the input stream .
4360	Reads data from IOS section to a byte channel .
4361	Add all the attributes to an iterable .
4362	Remove an attribute .
4363	Remove an attribute from an attribute .
4364	Returns a list of the offset in the time unit
4365	Add an action source listener to the manager
4366	Returns a Date object from a string
4367	Returns the ISO8601 formatted date .
4368	Returns the origin of the date .
4369	Returns a new date .
4370	Converts a double precision value to a Date object .
4371	Returns the time unit in seconds .
4372	Returns a string representing the standard date .
4373	Get the spacing in meters of a grid .
4374	Adds dimensions to NetCDF file
4375	Create a double coordinate axis
4376	Make a projection from a NetCDF file .
4377	Adds all the gds parameters to a variable
4378	Add a coordinate system variable to a NetCDF file .
4379	Create a LambertConformal coordinate system .
4380	Create a stereographic projection
4381	Construct a Mercator .
4382	set up a message geostationary
4383	Set the dimensions of a grid
4384	Read an InvDataset
4385	Read a dataset scan element .
4386	Method to read metadata from a URL .
4387	Get the level type of the GIB level 1 .
4388	Check if a file is valid .
4389	Write bytes to the buffer .
4390	set the clear name
4391	Returns the name of the variable with the given axis .
4392	Get the name of a coordinate in a NetCDF dataset
4393	Build the XML response .
4394	Build and return a DapException
4395	returns a list of dimension names for each dimension
4396	make a dimension with a z coordinate axis
4397	Create new variables for a NetCDF variable .
4398	Make a coordinate axis from a reference variable .
4399	Turn a float into a float .
4400	Entry point for a Grib2 GIB file .
4401	Wraps a netcdf file to a netcdf dataset
4402	Open a NetCDF file for the given location .
4403	Clears all coordinate systems
4404	Finds a coordinate axis by type
4405	Finds a coordinate axis by name
4406	Find a coordinate system by name
4407	Find a coordinate transform by name
4408	Check if we have enhance mode
4409	Set the values of a variable .
4410	sets the values of a variable
4411	Make an array from a list of strings .
4412	Return the offset of the array .
4413	Check if a file exists .
4414	Returns a list of features that intersect a bounding box
4415	Discretize a double precision matrix .
4416	Add ThreddsMetadata to a ThreddsMetadata object .
4417	Add an inline document .
4418	Removes all documentation for a given type .
4419	Return the maximum number of bytes in the given time range .
4420	Returns true if the netCDF file is a netCDF file
4421	Add a new dataset to the list of files
4422	returns a list of convention names
4423	Build a convention attribute from a list of convs .
4424	build coordinate systems
4425	Find all coordinate axes in the variable list .
4426	find the coordinate system
4427	Make all coordinate systems in the netCDF dataset
4428	Ensures that all coordinate systems are complete .
4429	Checks if a variable is a coordinate axis
4430	Adds a coordinate variable to the coordinate map
4431	Subset an InvDataset
4432	Set the filter to use .
4433	Checks if a dataset has been marked .
4434	deletes a dataset
4435	Initiate a GET request .
4436	Count a boolean value .
4437	Add a symbol to the symbol .
4438	Compare two table row values
4439	Compare two boolean rows .
4440	Returns the group scope
4441	Pass any reserved attributes from the map
4442	Checks if a valid date range is valid
4443	Returns True if the slice is next .
4444	Register a class as a class .
4445	Register a class in the registry .
4446	Check if the given class is registered in the registry .
4447	Remove a dispatcher from the registry .
4448	Create a new Grib2Tables object .
4449	Calculates the total length of the forecast time interval in hours
4450	Returns the time interval offset for the given Grib2 record
4451	Return the appropriate VertCoord type for the given code .
4452	This method is called when the node is finished .
4453	Sort the nodelist .
4454	Returns the RAF for a particular part number .
4455	Finds a variable with the given attribute name and attribute name .
4456	Finds a variable with the given attribute name and attribute value .
4457	Find the name of a variable with the given attribute name .
4458	Finds a variable with the given attribute name and attribute value .
4459	Finds the structure of a structure .
4460	Returns True if the dataset contains a record structure .
4461	Get the value of a global attribute
4462	Get the feature type from a NetCDF dataset
4463	Get a variable name from a dataset
4464	Return the value of a double coordinate .
4465	Distance between two points
4466	Returns a list of double values .
4467	Returns a 2D coordinate axis .
4468	Finds the closest distance to target .
4469	Returns the name of the name for this sort .
4470	Add an action to the menu .
4471	Match path .
4472	Entry point for the project
4473	Find the index of the substring in a byte array .
4474	Add a picture to the cache .
4475	report the cache contents
4476	Stops all background loading threads
4477	Check if a URL is already loading .
4478	HTTP GET method
4479	Returns an HTTPMethod instance for the given HTTPSession .
4480	Return random float array .
4481	Returns a random integer .
4482	Read the data from a CDMR variable .
4483	Returns a filesystem provider for the given URI .
4484	Reads the nexrad table .
4485	Returns the index of the given object .
4486	Removes a variable from the data variable list
4487	Convert cloud height to meters
4488	Override this method to read a section from a section .
4489	Set the number of colors
4490	Calculate the scaling transform for a rectangle .
4491	Convert a URI to an Auth scope .
4492	Compare two grids
4493	Returns True if the factor is reciprocal of this factor .
4494	Get the catalog for a directory .
4495	Find the index of an integer .
4496	Read metadata from a URL .
4497	Reads the metadata element and returns it as a JDOM element .
4498	Helper method to add metadata to the mdata element
4499	Validate the contents of the metadata object .
4500	Creates a CatalogGenConfig object from a CatalogGenConfig element .
4501	Reads a Datasource element and returns a Datasource object
4502	Reads a DatasetNamer element .
4503	Reads a DatasetFilter element and returns a DatasetFilter object .
4504	Read a ResultService element and return a ResultService object .
4505	Create a catalog gen config element .
4506	Creates an XML element for the dataset source .
4507	Creates an XML element for a DatasetNamer .
4508	Creates a dataset filter element .
4509	Creates an XML element for the result service .
4510	set a boolean flag
4511	Construct the top menu
4512	Adds the given preferences to the menu
4513	This function is used to add parameters from a table .
4514	Make a parameter from a list of words .
4515	Get a gempakParameter object by name
4516	Reads and returns the contents of the stream as a string .
4517	Read bytes from the stream .
4518	Replace the ensemble template with the ensemble identifier
4519	Sets the station type .
4520	Check if the buffer is valid
4521	Shows information about the format field
4522	Read Grib2 bit map from file .
4523	Set the output of a NetCDF file .
4524	Set debug flags
4525	Parse name into pieces .
4526	Returns True if dstruct is a group of parent
4527	returns the length of a netcdf variable
4528	Get the shared dimension of a group .
4529	Construct dimensions for a DArray .
4530	Returns True if dtype is unsigned .
4531	Read DODSSD data from server .
4532	Get an ImageIcon from a resource .
4533	Get an image from a resource .
4534	Create a custom cursor
4535	Read data from a file and return it .
4536	Read data from a positioning data stream .
4537	Read an array from a layout .
4538	Creates an array for the given type
4539	Convert a byte array to UTF - 8 encoding .
4540	Convert a character to a byte string .
4541	Convert byte array to byte array
4542	Read an array from a section .
4543	Get an array structure from a child section .
4544	Get a scalar string from a member .
4545	Get the structure of a scalar field .
4546	Get an array for a member
4547	Returns a structure members of a DAPVariable
4548	Adds a dimension to the NetCDF file
4549	Creates a CrawlableDataset from the given path .
4550	Normalize path .
4551	Add an explicit dataset .
4552	Add a dataset scan .
4553	This method is called when the task is finished .
4554	Create a list of Dataset objects .
4555	Returns the most recent dataset
4556	Create a netCDF dataset
4557	Add resource control to dataset .
4558	Adds a point to the contour
4559	Returns the upper coordinates of the bounding box of the bounding box .
4560	Get the lower coordinates of the bounding box .
4561	Validate this DatasetFilter .
4562	Tests whether this filter applies to the given dataset .
4563	Add all feature features in a feature dataset .
4564	Parse a constraint from a request URL .
4565	Evaluates the clause of a given object .
4566	Print constraint information .
4567	Amend a NetCDF file from an OL file .
4568	set shared dimensions of a variable
4569	check for unknownDims
4570	Find a group by name .
4571	Reads the content of the Xlink .
4572	Get the canonical URI of the catalog .
4573	set the projection panel
4574	add a layout component
4575	Invalidate the layout
4576	Removes a layout component
4577	Minimum layout size
4578	Recursively layout a container
4579	Returns true if the parser is a radial coordinate system .
4580	Returns the maximum radial value
4581	Opens a URL .
4582	Convert earth to Sat
4583	Convert sky coordinates to earth .
4584	Convert GOES to geos .
4585	Converts the scan geometry to a sweep angle axis .
4586	Convert the sweep angle axis to a string .
4587	Set the runtime coordinates for this runtime
4588	Write point observation dataset to file .
4589	Rewrites a feature dataset in a feature dataset .
4590	Get array sequence for member name .
4591	Get the full name of the parent .
4592	Get the unique ID for the authority and ID .
4593	Returns the InvAccess for the given type .
4594	Find a dataset by its name .
4595	Returns the parent catalog
4596	Returns the metadata for the given type
4597	Find a service by its name .
4598	Returns a ThreddsMetadata object with the given vocabulary .
4599	Find all catalog references in a dataset tree .
4600	Escape path for URL .
4601	Add double stagger to array .
4602	Interpolate linear extrapolation .
4603	Compute earth radius .
4604	Returns the full description of this module
4605	Create a structure from a gempak file .
4606	Create a variable that contains missing parameters .
4607	Creates a variable for a gempak parameter .
4608	Add global attributes .
4609	Returns the size of the variable with the given name .
4610	Helper function to get 1D array
4611	Return the next jump state .
4612	Report a syntax error .
4613	Print the reduced stack .
4614	Read DMR data from request mode .
4615	Read the error body
4616	Read data from data buffer .
4617	Read header from the input stream .
4618	Convert ISO 8601 string to Date .
4619	Read a table from a URL .
4620	Transfer a group from a NetCDF dataset into the target Dataset .
4621	Gets the STN file for the given location .
4622	Open the station file
4623	Get the beginning of a given index .
4624	Get the end of a given index .
4625	Create a GribCollection with all the files in the directory .
4626	Set the value of the edit
4627	Returns the DataType corresponding to the given format .
4628	Convert ECF to longitude
4629	Cleans up the unit .
4630	Cleans up a package name .
4631	Returns True if the unit is unitless .
4632	Return an instance of the NoteSort .
4633	Get the variable ID for a given note .
4634	Parse a DAS DAS object .
4635	Find DODV by name
4636	Finds and returns a DODV object
4637	Find child by index
4638	Get the parent group .
4639	Returns the dimension at the given index
4640	Find the index of a dimension by name
4641	Get the units string from the attribute
4642	Returns the shape as a Section
4643	Return a copy of this variable with the given value .
4644	Sets the enum type .
4645	Read an array from the stream .
4646	Reads a scalar string
4647	Read data from the proxy reader .
4648	Read section from proxy .
4649	Write CDL string .
4650	Return a string representation of this variable
4651	set the type of the variable
4652	Set the dimensions
4653	Reset the shape of this array .
4654	set dimensions of variable
4655	removes the dimensions of this variable
4656	Set dimension .
4657	Sets the cached data .
4658	Returns a list of all dimensions
4659	Set the bounding box of all coord systems .
4660	Finish all grids
4661	Returns all datasets in this set .
4662	Check if path ends with any extension .
4663	Opens a DAP file and builds the DMR model .
4664	Build the DMR dataset .
4665	Recursively build sequence types .
4666	Add dimensions to the DAPVariable .
4667	Returns a list of enum types that match the given values
4668	Get the core dimension from a list
4669	Scan a Bufr file and return the counts
4670	Process a Bufr message as dataset .
4671	Handle POST request .
4672	get the AffineTransform
4673	Determine if the map area should rotate .
4674	Returns a ProjectionRect for the projection area
4675	Convert world coordinates to point2D .
4676	Pan the map .
4677	Apply a zoom to the screen .
4678	calculates the coordinates of a bounding box based on the bounding box
4679	Add a listener to the listener manager .
4680	Remove a listener from the listener manager .
4681	Send an event to all listeners .
4682	Send an event to all listeners
4683	Print the given command to out .
4684	Print information about a NetCDF file .
4685	returns string representation of variable
4686	Print variable data as a string .
4687	Print structure data to out .
4688	Print an array as plain text .
4689	Print an array to the given writer .
4690	Write ncCDF file to writer .
4691	Reads a double attribute .
4692	helper function to add a parameter to the dataset
4693	Main entry point .
4694	Read an object from a DAPVariable .
4695	Checks if a level is positive up .
4696	Returns True if the unit is compatible with this unit .
4697	Make a label from a quantity ID
4698	Set bit offset .
4699	Convert a number into an unsigned integer .
4700	Convert a number to a signed integer .
4701	Opens an HTTP connection to a given URL .
4702	Returns DAS command
4703	Returns a list of DAP2DDs
4704	Complete a CE string
4705	Convert world coordinates to lat lon
4706	Translate an IDV dataset into a string .
4707	Convert date range to date range
4708	Check if a file is valid .
4709	Handles satellite information .
4710	Handle the sensor information .
4711	Reads the root element from the given location .
4712	Clean XML character data .
4713	Unescape a string .
4714	Escape URL query .
4715	Unescape URL query .
4716	Unescape characters in a string .
4717	Escape any special characters in a string .
4718	Add global lightning attributes .
4719	Swap a short value at offset .
4720	Swap an unsigned integer .
4721	Swap double value at offset .
4722	Swap a float .
4723	Swap a double .
4724	Convert a short value to a byte array .
4725	Convert an integer to a byte array .
4726	Convert a long integer to a byte array .
4727	Return a subset of this transform .
4728	Returns the XML representation of the last modified date .
4729	Make a C - dimensional array from an array .
4730	Write start XML file .
4731	Writes WFS features to file .
4732	Takes a list of GribCoordRecord records and sorts them together .
4733	Add a dimension to a NetCDF file .
4734	Add level information to a NetCDF file .
4735	finds a coordinate transform for a particular coordinate
4736	Returns the index for the given record
4737	Stop the timer .
4738	Returns a cached file .
4739	Returns the file or None if not found .
4740	Prints out the cache files .
4741	Recursively delete all files in a directory
4742	Calculate the bearing between two points .
4743	Calculate the bearing between two points .
4744	Calculates the bearing between two points .
4745	Find a point with a given distance .
4746	Find a point with a given distance from a point .
4747	Find a point using default Earth coordinates .
4748	loads a picture in a thread
4749	Load a picture from a URL .
4750	Loads the image into the SourcePicture object .
4751	Stop loading of the source picture
4752	Stop loading without loading .
4753	Returns the size of the image
4754	Sets the source buffered image .
4755	Get the standard URI for this dataset
4756	Create a data descriptor for the associated field .
4757	Transfer data from one proto message to another .
4758	Count the number of bits in all subkeys .
4759	Compare two DataDescriptor objects .
4760	Load the Dbase header
4761	Load the data from the stream
4762	Returns the field with the given name
4763	Returns a list of doubles with the given name .
4764	Returns a list of strings with the given name .
4765	Returns a list of boolean values for a given field name .
4766	Get the name of the field .
4767	Get the names of the field names
4768	Dump Dbase files
4769	Returns a map of attributes
4770	Adds an attribute to this object
4771	Remove an attribute from the DAP .
4772	Return the DapGroup for this node
4773	Get the container of this node
4774	Get the escaped name of the name .
4775	Get the path of the current DAP node
4776	Returns a list of DAPGroups
4777	Compute fully qualified FQN
4778	Returns True if the parent is top .
4779	Build a DAP dataset .
4780	store a collection of values
4781	Gets a list from a key
4782	Get an object from the storage .
4783	Read Grib2 data from a file .
4784	Print the data to the printer .
4785	Print a compound instance .
4786	Convert an element into a string .
4787	Write an element to a file .
4788	Write an XML document to a stream .
4789	Write an XML document to a writer .
4790	Create an element for a dimension .
4791	Create a ProjectionCT from an attribute container
4792	Reads an array of int values from a CMCIDAS attribute .
4793	Creates a new base unit .
4794	Create a new unit .
4795	Return a new unit database .
4796	Creates and returns a new UnitDB instance .
4797	Returns a new SI instance .
4798	Find the coordinate element of target .
4799	Find closest coordinate to target .
4800	Returns the subset values for the given axis .
4801	Open a feature dataset .
4802	Open a feature dataset .
4803	Annotate a netCDF dataset
4804	Read Grib1 record .
4805	Assemble the URI into a string .
4806	Return the canonical representation of a string .
4807	Normalize units .
4808	Compile the DAP dataset
4809	Initialize metadata from the metadata file .
4810	Get the element at the given key .
4811	Add an element to the list .
4812	Returns a date object
4813	Print XML attributes .
4814	Print an XML attribute .
4815	Check if the attribute is special .
4816	Prints the dimensions of a dimension
4817	returns True if the file is valid
4818	Set area directory attributes .
4819	Sets the navigation block attributes
4820	Get calibration type
4821	Set the attributes for the cal_type attribute of the image .
4822	Set the coordinates of a NetCDF dataset .
4823	Find the name of a coordinate axis by its type .
4824	Find a coordinate axis by its type .
4825	Find a coordinate axis by type .
4826	Find a dimension by its type .
4827	Find the best coordinate system with highest rank .
4828	Returns a CoverageCoordAxis with the specified axis or None if not found .
4829	Returns the base type of a variable
4830	Deserialize a stream .
4831	Read a marker from the stream .
4832	Writes a marker to the stream .
4833	Raises a SAXParseException with a fatal error .
4834	Create a new TimeSeries
4835	Example for testing
4836	Get the Java ArrayString representation of a member .
4837	get parameter list
4838	Set the stations .
4839	Sets the selected station
4840	Redraw the region
4841	Reads the rectangle from the object s stream .
4842	Writes the x y and height to the stream .
4843	Add a unit database to the database .
4844	Adds a unit to the set .
4845	Add an alias to a unit .
4846	Get a unit by its id .
4847	Add a new unit to the name map .
4848	Add a unit by symbol
4849	Adds a new unit to the map .
4850	Adds a menu to the menu
4851	Find a Grib2Record by drs position .
4852	This method is used to read a scalar variable into memory
4853	Serialize the dataset to the destination stream .
4854	Extracts the parameter values from the Dorade RAT .
4855	Constructs a vertical perspective view
4856	Opens a feature dataset .
4857	Opens the feature dataset .
4858	Open a netCDF dataset .
4859	Annotate an InvDataset
4860	Remove duplicates from a list
4861	Add a new partition to the collection .
4862	Returns a GribCollection .
4863	Returns an instance of a regular regexp and duration coverage enhancer .
4864	Returns an instance of a regular regexp and duration coverage enhancer .
4865	Write an XML query capability to a file .
4866	Reads an array structure from a given section .
4867	Set a picture from a URL .
4868	set a buffered image
4869	This method is called when the image has been resized .
4870	Paint the component
4871	Convert TGF to TTOI format .
4872	Decode the TGIT information into a string .
4873	Return TTIOC string .
4874	Return the number of days for a given year .
4875	Translate the horizontal coordinate to a valid vertical coordinate .
4876	Convert integer values to integers .
4877	Get the name of the grid packing name
4878	Returns the data type for the given type .
4879	Read data from a stream and deserialize it
4880	Standardize the output stream .
4881	Get a Tag enum by its code .
4882	Returns the next image .
4883	Returns the size of a DapType
4884	Returns the sum of the given array .
4885	set spatial grid
4886	Set the scale overlap .
4887	Clear all grids
4888	Mark the object as clear
4889	Finds the intersection of a rectangle
4890	Finds the intersection of a point
4891	Find the closest object to a point
4892	Returns the squared distance between a point in a grid
4893	Creates a new base unit with the given id and returns it .
4894	Given a fragment return the service type .
4895	Given a URL search for the Thredds protocol .
4896	Given a path extension return the service type .
4897	Check if the location is DOD .
4898	Check if the given location is DAP4 .
4899	Write data to out .
4900	Returns the suffix of the given fqn .
4901	Returns the prefix of the given fqn
4902	Locate a file in the directory
4903	Locate a relative path relative to a relative path .
4904	Extracts the bytes from the buffer .
4905	Returns the structure path of a variable
4906	If path is empty return None .
4907	Join an array into a string .
4908	Checks if a path contains a drive letter .
4909	Get a list of protocols from a URL .
4910	Convert indices to slices .
4911	Returns a list of slices corresponding to the given offset .
4912	Check if slices are contiguous .
4913	Checks if a list of slices is a single point .
4914	Convert a list of slices to an Index .
4915	Read data from the stream .
4916	Sets the station information .
4917	Set the short names for this instance .
4918	Reads a FeatureCollectionConfig from a catalog and returns it .
4919	Add a declaration to the dataset .
4920	Update the groups .
4921	Find a variable by its name .
4922	Returns the axis type of the variable
4923	Gets GribStat type from time range indicator .
4924	Subset a CoverageCoordAxis from a LatLonRegion .
4925	Returns the range iterator
4926	Set the default properties of the given properties
4927	Get the session ID from the cookie store
4928	Sets the maximum number of redirects to this session .
4929	Sets the use sessions
4930	Close all HTTP methods .
4931	Setup the authentication and proxy credentials .
4932	Track a session .
4933	Sets the global credentials provider .
4934	validate the catalog
4935	Factory for creating an index .
4936	Compute the stride for the given shape .
4937	Construct a section from a list of ranges .
4938	Return the reduced index .
4939	Return a new Index .
4940	Return the transpose of the index .
4941	Permute the index .
4942	Create an iterator for an array .
4943	Get the current element .
4944	Set the index .
4945	Set the dimension of a dimension
4946	Set the dimensions of an array .
4947	Returns the name of the time interval
4948	Returns a calendar date range for the given calendar .
4949	Return a list of file dates .
4950	Convert a DMPPart into a list of parameters .
4951	Get a list of station objects
4952	Creates a new gempak station from the header
4953	Returns a list of all station keys
4954	Returns a list of Date objects
4955	Find the station index by id
4956	Returns the file type .
4957	Indent the given number .
4958	Set the indent level .
4959	Read or create a GribIndex from a single file .
4960	add a directory scan
4961	Check if a collection is required .
4962	Scan the first time in the collection .
4963	Set debug flags .
4964	Add a new Variable to the writer .
4965	Write the variable list to a file .
4966	Validate an XML document .
4967	Returns the string representation of this slice .
4968	Set the original variable .
4969	This method is used to read the data .
4970	Try to read the data from a StructureDS section .
4971	Check if conversion needs to be converted
4972	Convert an array structure to an ArrayStructureMA .
4973	Convert member members to variables
4974	Finds a VariableEnhanced by orgName
4975	Checks if a variable has a data type
4976	Enhance all variables in this dataset .
4977	Checks if the request is under resource control
4978	Make an empty sequence .
4979	Make an array sequence from a sequence of values .
4980	Create a Sequence object for the given part name .
4981	Adds the vertical coordinate attribute to the v .
4982	Synchronously read the catalog from a URI .
4983	Read a XML string from a string .
4984	Factory method to read invCatalog from a string .
4985	Write the catalog to the output stream .
4986	Gets the metadata converter associated with key .
4987	Returns a unique unit name .
4988	Multiply this unit by another unit .
4989	Override this method to divide two units .
4990	Convert the input to a derived unit .
4991	Returns True if the unit is compatible with this unit .
4992	Returns string representation of a geometry
4993	Returns a string representing the point
4994	Converts a Line to XML .
4995	Returns the XML representation of a polygon .
4996	Pulls an attribute from a node .
4997	Returns all the subnodes of the given parent .
4998	Parse XML response .
4999	Pass reserved attributes from node to dap .
5000	Get a subset string from a variable .
5001	Create an ArrayStructureMA from an array structure .
5002	Sets the data for a member of a member .
5003	Create an ArrayStructureMA from a structure .
5004	Returns the geometry type of a variable
5005	Make a station feature .
5006	Compile an AST .
5007	Recursively compile a filter expression .
5008	Add a dimension redefinition
5009	Create a view object for an index .
5010	Returns True if b is contained in a LatLonRect
5011	extend a LatLonPoint to the upper right
5012	Extend a LatLonRect .
5013	Returns the intersection of the rectangle
5014	Add an array to an array .
5015	Return True if two arrays are conformable .
5016	Test if two shapes are conformable .
5017	Convert an array to another type .
5018	Copy elements from array to result .
5019	Copies boolean values from a to result .
5020	Copies the elements of an array to the result .
5021	Get min max from an array .
5022	Sets the value of a double array .
5023	Create a CatalogBuilder from the local data sets .
5024	Factory to create a Projection implementation .
5025	Unescape DAP identifier .
5026	Decodes UTF - 8 encoded strings
5027	Unescape URL .
5028	Escape a string with a reserved characters .
5029	Unescape a string .
5030	Tokenize an escaped name .
5031	Returns the index of the first character in the escaped name .
5032	Convert backslash to DAP
5033	Reads an atomic scalar
5034	Get the path of a cursor .
5035	Get the UI default value of a given class .
5036	Returns the JJ class for the given component .
5037	Compile the variables in the databuffer .
5038	Compile a structure array from a DAPVariable
5039	Compile a DAP structure into a DAP structure .
5040	Compile a sequence array
5041	Compile a sequence
5042	Read a long value as a long integer .
5043	Get a field by its name .
5044	Returns the value of a field .
5045	Sets the value of a field .
5046	Add a field to the cursor row .
5047	Create a CheckBox field .
5048	Add a date field .
5049	Add a double field to a field .
5050	Add an int field to a Field
5051	Add a password field .
5052	Create a field with a text field .
5053	Create a Field with a text combo box .
5054	Add a text field to a text field .
5055	Add a heading to the layout components .
5056	Add a component to the layout components .
5057	Add an empty row to the layout components .
5058	Find the active frame .
5059	Returns the cell spacing .
5060	Get all the factors
5061	Returns the multiplication of two dimensions .
5062	Returns a list of factors multiplied by the given power .
5063	Returns whether this dimension is a reciprocal of another dimension .
5064	Returns True if all factors are dimensionless .
5065	Creates a new Grib1ParamTables object .
5066	Factory function to create a Grib1ParamTables object .
5067	Add a lookup table to the standard lookup table .
5068	Add a Grib1 parameter table to the standard lookup table .
5069	Raises this unit with the given power .
5070	Convert input to derived units .
5071	Initialize the unit table
5072	Make a vertical variable .
5073	Peeks the name of a file .
5074	Grab a short value from a byte array .
5075	Grab an integer from a byte array .
5076	Reads a float from the byte array .
5077	Reads a double from the byte array .
5078	Add an alias to a unit .
5079	Add a symbol to a unit .
5080	Creates a converter to convert fromUnit to to toUnit
5081	Sets the data of a list of structures
5082	Sets the feature data in the feature table .
5083	Draw all the shapes in the given g .
5084	returns an iterator over all shapes in the gis feature
5085	Process the input stream .
5086	Read data from the stream into dest .
5087	Read one or more bytes from the stream .
5088	Read bytes into a byte array .
5089	Skip the given number of bytes .
5090	Adds a dimension to the netCDF file
5091	returns the index of the given grid record
5092	Check if a file is valid .
5093	Initialize the netCDF file .
5094	Read an array from a section .
5095	Reads one row data from a byte array
5096	Create a Variable from a NetCDF Dataset
5097	Create a base type from a variable .
5098	Fires on the map area
5099	set map area
5100	set map area
5101	Sets the map area of a latitude and longitude .
5102	set the projection
5103	Adds actions to the menu
5104	Start a redraw of the redraw
5105	set the screen size
5106	Set the selected variable .
5107	Get a double from the template .
5108	Reads a double value .
5109	Read an object from the data .
5110	Get the name of a Gini sector .
5111	Reads a signed integer from the buffer .
5112	Find a parameter by its name .
5113	Returns True if there is next odometer .
5114	Swap the endian of the system .
5115	Returns the number of time steps per file .
5116	Get the full path of the template
5117	Returns a list of file names .
5118	Returns the path of the ddf file
5119	Returns the full path of the file .
5120	Add a chsub to a chsub list
5121	Convert reference date to TimeCoordintValue
5122	Reads a WMO file .
5123	Get the data from the uncompdata .
5124	Create a special graphic symbol .
5125	Create a circle packet
5126	Read the nids product header from the file .
5127	Create a pcode code .
5128	Create a text code .
5129	Create an unlinked vector packet .
5130	get the levels of the data
5131	This function is used to get the low - level levels of the data
5132	Add a variable to a NetCDF file .
5133	Add a parameter to a NetCDF file .
5134	Decompress a CBZ2 compressed buffer .
5135	Convert a byte sequence into an integer .
5136	Calculate the integer value of a byte sequence .
5137	Convert a byte array to an object .
5138	Do the DMR request .
5139	Returns a DapRequest instance for the request .
5140	Send an error message to the request .
5141	Make a point anchor .
5142	Stretch a point
5143	Returns the bounding box of the anchor
5144	Returns the bounds of the last point
5145	Formats a string as a date only .
5146	Replace all the variables in a structure .
5147	Raises an exception if the memory size is too large .
5148	Convert a random integer to an integer .
5149	Reads an unsigned integer from a file .
5150	Reads an integer from a file .
5151	Reads an unsigned integer from a file .
5152	Read an unsigned integer from a file .
5153	Read a float from a file .
5154	Convert an integer to a float .
5155	Read an 8 byte integer from a file .
5156	Count the number of bits in a bitmap
5157	Returns a copy of the projection .
5158	Converts WGS84 to WGS84 format
5159	r Escape characters in a string .
5160	Unescape a string .
5161	Split a string into a list of paths
5162	Make a list of files grouped by run date
5163	Returns the service special string for the given path .
5164	Return the number of projected components .
5165	Returns the reference time .
5166	Factory function to create an ArrayStructureBB .
5167	Main entry point .
5168	Read a Grib1Record from a protobuf .
5169	Returns True if the netCDF file is valid
5170	Returns a UTM Projection from the dataset
5171	Reacquire the area .
5172	Returns True if the date is before the given date
5173	Returns True if the date is before the given date
5174	Returns True if the date is after d
5175	Sets the value at the given index .
5176	Add a coordinate system to the variable .
5177	Set the units for this variable .
5178	Get the units string of the variable .
5179	Initialize the context
5180	Reads and returns a ConfigCatalog object
5181	Process a list of datasets .
5182	Read all catalogs in a directory .
5183	Returns True if the given longitude is between two longitudes .
5184	Convert latitude to string .
5185	Convert longitude to string .
5186	Compares two quantity .
5187	Returns the selected dataset .
5188	Set the selected dataset .
5189	Creates a tree path from the given node .
5190	Opens all invatalogs
5191	Sets the catalog for the given location .
5192	Set the catalog
5193	Find the alias for a variable .
5194	Writes an integer to an integer .
5195	Write characters in a string .
5196	Read characters from a buffer .
5197	Sets the debug flags
5198	Add a member to the list .
5199	Hides a member from members .
5200	Returns a list of member names
5201	Find a member by name
5202	Read Grib1 bit map .
5203	Restore the state of the table
5204	returns an iterator over the selected rows
5205	Returns the index of the column
5206	Returns the array associated with the given member .
5207	Get the scalar value of a member .
5208	Get a double array from a Java array .
5209	Get the scalar float value of a member .
5210	Get a float array from a Java array .
5211	Get the scalar byte of a member .
5212	Get a byte array from a Java array .
5213	Get the scalar integer value of a member .
5214	Returns the array as an int array .
5215	Get the short value of a scalar member .
5216	Get the short value of a Java array .
5217	Get the scalar value of a member .
5218	Get a long array from a Java array .
5219	Get the scalar character of a member .
5220	Get the char array of a member
5221	write one dataset
5222	Checks if the dataset can be used
5223	Create a new dataset .
5224	Transfer metadata from a Dataset node .
5225	Return ThreddsMetadata object
5226	Add a product to the list
5227	Show missing values
5228	Show the number of missing records .
5229	Return the record associated with the ensemble .
5230	Returns a string representation of the grid
5231	Make a long name .
5232	Returns a subset of the coordinates in a list of longitudes
5233	Check if two bytes are equal .
5234	Parse a DAPR document .
5235	Process the attributes in the dataset .
5236	Add coordinates to partition collection
5237	Set the Gaussian latitudes in the GDS horizCoord system .
5238	Parse a variable selector .
5239	Make a section spec string .
5240	Check if a rectangle contains a bounding box .
5241	Close the connection .
5242	Executes a HTTP request .
5243	Identify the encoding station and station dimension
5244	Match axis type and dimension .
5245	Initialize the bz2 stream .
5246	Read a single character from the stream .
5247	Start a new task .
5248	Convert a string into a URI .
5249	Convert a URI into a URI .
5250	If the string s is empty return it .
5251	Join prefix and suffix together .
5252	Check if the dataset has been accepted .
5253	Copy information from a GribCollection .
5254	Returns a sorted list of all files .
5255	Sets the index RAF
5256	Returns the path to the index file in the cache .
5257	Closes the index .
5258	Returns the number of counters in the nested list .
5259	Add a global attribute .
5260	Adds a global attribute to a global attribute .
5261	Delete a global attribute .
5262	Renames a global attribute .
5263	Adds a variable attribute to a variable .
5264	Adds a variable attribute to a variable .
5265	Deletes an attribute from a variable .
5266	Rename a variable .
5267	Determine the sub type of the file .
5268	Writes header and bounding box to file .
5269	Writes geometries to file .
5270	Returns a string representation of the station observation dataset .
5271	Returns a string representing the station collection .
5272	Write a DSR document .
5273	Send a DXR to the client .
5274	Write an error response
5275	Close the output stream .
5276	Flushes the DMR buffer .
5277	Returns a copy of the projection .
5278	Check if we are in a sequence .
5279	Return the first element of an integer .
5280	Return a new range shifted origin by origin .
5281	Read data from the specified index .
5282	Reads data from a layout .
5283	Return a subset of a boolean vector .
5284	Returns all catalogs
5285	Cleans up the database if it has been created .
5286	Set GDS projection parameters .
5287	Convenience method to get the data chunk iterator without filtering .
5288	Make a double array of integers
5289	Request dataset boundaries .
5290	Checks that the requested variables are contained in the grid
5291	Get the datasource structure by name .
5292	Get the path to a resource .
5293	Takes a list of GridVertCoordList and adds it to the netCDF file
5294	Reads a PB file .
5295	This method is called when the dataset is finished .
5296	Recursively transfer inherited metadata from parent to public metadata .
5297	Transfer metadata from an InvDataset to another .
5298	Transfer inherited metadata from the InvDataset .
5299	set contributors
5300	Add a dataset to the repository .
5301	Removes a dataset from the catalog
5302	Replaces the given dataset in the catalog .
5303	Add a dataset service to the registry
5304	Remove a service from its services .
5305	Sets the services in a local list .
5306	Removes the local metadata from the repository .
5307	Get a user property .
5308	Validate this dataset .
5309	Returns a list of descriptors
5310	Construct the path for the HTTP request .
5311	Creates a WFSGetCapabilities writer .
5312	returns a WFSException
5313	Returns a WFS exception writer .
5314	This method is called when the request is requested .
5315	Get the capabilities of a URL .
5316	Return the length of the S3 object .
5317	Returns the last modified date of the object .
5318	Set all variables in the dataset .
5319	Serves a file and returns it .
5320	Send a string to the response .
5321	Sets the content length of a response .
5322	Returns the URI for the request .
5323	Get the path of the request .
5324	Get query string from request .
5325	Get a parameter from a request .
5326	Save the preferences
5327	Write directory as HTML .
5328	Set bit offset
5329	Create a new BitCounterUncompressed object .
5330	count the number of bits of all subkeys
5331	Append a line to the history .
5332	Create a document for the station collection .
5333	Generate the capabilities document .
5334	Get the record at the given coords .
5335	Returns the coordinate at the given index
5336	Adds an item to the list
5337	Handles the exception .
5338	Returns the slice at i .
5339	Given firstpos and lastpos return the index
5340	Get the NCEP process .
5341	Returns the featureType of the given endpoint
5342	Sets the type of the field
5343	Create a Grib1GDS object .
5344	Copy data from stream to out .
5345	Reads the contents of a stream and returns it as a string .
5346	Read the contents of a stream into a byte array .
5347	Write the contents of a string to the stream .
5348	Copy the contents of a file to out .
5349	Copy data from RAF to out .
5350	Copy a directory tree to another directory .
5351	Reads a file and returns a byte array .
5352	Reads a file and returns it as a string
5353	Write string to file .
5354	Writes contents to a file .
5355	Write an input stream to a file - like object .
5356	This function is called when the exception is raised .
5357	This function handles a DAP2 exception
5358	Send a bad URL to the response .
5359	Get the DODS catalog
5360	Print catalog information
5361	Print the status of the server .
5362	print bad URL page
5363	Returns the reference date .
5364	Reads a vlen array
5365	Read a NetCDFData object from a NetCDF dataset .
5366	Open a NetCDFCollection reader .
5367	allow characters in a string
5368	Cleans up a byte array and returns it .
5369	Filter out characters that are in a string
5370	Filter 7 bits from a string .
5371	Make a valid CDM object
5372	Match two strings .
5373	Pads a string in the left to the desiredLength .
5374	Pads a string to the desiredLength
5375	Remove a substring from a string .
5376	Removes a character from a string .
5377	Removes a character from a string .
5378	Collapse whitespace into a single string .
5379	Replace out in a string with out in the string .
5380	Replace characters in a string with replaceChar .
5381	Replaces a string with a given value .
5382	Substitute a string with a match .
5383	Replace all occurrences of match with subst .
5384	Remove characters from a string from the buffer .
5385	Remove out characters from a string .
5386	Replace the characters in the buffer in out with out .
5387	Substitute a match in a string .
5388	Trim characters from a string .
5389	Subscribe to events
5390	Check the state of the dataset .
5391	Update a collection .
5392	Show unique templates in a collection
5393	Returns a list of datasets .
5394	Release all datasets
5395	Creates a deep copy of the structure data .
5396	Copy an array structure to an array structure .
5397	Copy an array structure to an array structure .
5398	Copies the contents of a StructureData object to a byte array .
5399	Copy an array structure to an array structure .
5400	Returns the forecast time interval in hours
5401	Create a new coordinate axis from a range .
5402	Create a TableAnalyzer from a nested TableConfigurer .
5403	Returns the first feature type associated with this table .
5404	Analyze the given feature type
5405	Reconstructs the ncfile object
5406	Returns a list of double precision values for the given type
5407	Swap long value at offset .
5408	Swap a float from a byte .
5409	Swap char at offset .
5410	find coordinate axes
5411	Adds a double parameter to the dataset
5412	Find the common parent of another group .
5413	Returns True if other is a parent group .
5414	Set the parent group
5415	Adds a dimension to the group
5416	Adds a dimension to the group if it does not exist .
5417	Adds a group to the group
5418	Adds an enumeration to the group .
5419	Adds a variable to the group
5420	Removes a dimension from the list
5421	Create a Group from a relative path .
5422	Convert an alias field to a standard alias table .
5423	Print the DAS object to the writer .
5424	Get the variable from the stack .
5425	Write a grid to the dataset
5426	Replaces missing values in the array .
5427	Replaces missing values in the array with the given min and max values .
5428	Given an array of longitude coordinates find the start of the longitude
5429	Writes a GeoReferencedArray to a GeoReferencedArray
5430	Write an exception report to the response .
5431	Get the string representation of the network .
5432	Creates a TopIndexFile from the given configuration .
5433	Returns the type of GribCollection .
5434	Update a GIB collection .
5435	Update a leaf collection .
5436	Open a GribCollection from a RAF file .
5437	Open a GribCollection from a data file .
5438	Open a GribCollection from a data file .
5439	Returns True if the given URL matches the given pattern .
5440	Add a triple to the RC .
5441	Search for a key and url .
5442	Looks in the set of known URLs and sets them as well .
5443	load rc file
5444	Insert a triple into the store .
5445	Returns a list of Dataset objects .
5446	Find a dataset by its name .
5447	Set the projection of the feature set
5448	Get all the shapes in g .
5449	make a list of shapes
5450	Compares two strings
5451	start a progress monitor task
5452	Check if the collection needs update .
5453	Normalize ensembles .
5454	Set the object at the given index .
5455	Get a structure at the given index .
5456	Copies the members of a structure into a new object .
5457	Get the value of a scalar object
5458	Convert a scalar value to a double value
5459	Convert a scalar integer to an int .
5460	Get a float value from a member
5461	Get a scalar byte from a member
5462	Get the short value of a member
5463	Get a scalar char from a member
5464	Returns the string representation of a scalar member
5465	Get the array structure for the given record
5466	Returns the array sequence for the specified record
5467	Returns an ArrayObject for the specified record
5468	Min and max value .
5469	Evaluate expression .
5470	Returns the string representation of the constraint .
5471	Checks if the node is a reference
5472	Returns True if variable matches the filter
5473	Returns the number of expansion variables in a structure .
5474	Compute the list of enums .
5475	Compute groups for all variables and enumerations
5476	Compile a constraint from a string
5477	Check if a file is valid .
5478	Make all actions available in the controller
5479	Get the endianness of a file .
5480	Sets the endianness of the system .
5481	Find a key by name
5482	Find a file header by its name .
5483	Get the header of a file .
5484	Print the parts to stdout .
5485	returns the pointer to the data point
5486	Read a float from a file .
5487	Reads a string from the file .
5488	Convert a DMPPart into a float .
5489	Get a string representation of a bit .
5490	Write a NetCDF file to a writable channel .
5491	Parse base element .
5492	Parse a Grid element and return it
5493	Parse Aliases
5494	Decode a list of keys into a list of dictionaries .
5495	Replicate a list of keys .
5496	Get the name of the dataset
5497	Returns the CFFeature type .
5498	Returns True if a is nearly equal absolute difference
5499	Returns True if the given node can be referenced
5500	Parse a unit
5501	Probe for an object .
5502	Checks if the given variable is tiled
5503	This function returns the most recent time from the complete time .
5504	Converts a LatLonRect to a ProjectionRect
5505	Show a list of time series
5506	Make a map from an attribute list .
5507	Get array values
5508	Returns the value at the given index
5509	Write a CDL object to file .
5510	Set the attribute value .
5511	Set the values of an attribute .
5512	set the values of an array
5513	Perform a scan on the catalog .
5514	Generates a skeleton catalog for the given ProxyDatasetHandler .
5515	Schedules a write to the queue .
5516	Open the thredds datatype
5517	Helper function to open thredds datatypes
5518	This function is called when a dataset is created
5519	set the dataset
5520	This function is called when the system is running .
5521	Create a Jupyter notebook
5522	Make a string from a list of coordinate axes
5523	Returns a coordinate axis that is less than rank
5524	Finds a coordinate axis by type
5525	Returns the ProjectionCT associated with this coordinate transform .
5526	Returns True if the x y axis is geo - coordinates
5527	Check if all coordinate axes are regular .
5528	Check if subset is a subset .
5529	Check if a list of coordinate axes contains the same axes .
5530	Returns True if the given axis contains the given name .
5531	Check if the domain contains the domain .
5532	Checks if the given list of axes contains the same axes .
5533	Check if we have axis type
5534	Clone the DAG .
5535	Returns the selected bean
5536	returns list of selected beans
5537	Returns a list of the selected cells
5538	Sets the selected bean to the selected value
5539	Restores the current state of the table .
5540	Create an UnknownUnit by its name .
5541	Close the stream .
5542	Check if a variable is an extra variable .
5543	Checks if the given variable is a coordinate .
5544	returns a CoordVarExtractor object for the specified coordinate
5545	Recursively add data variables
5546	Add parent join data to the table .
5547	Creates a station feature from a structure data structure .
5548	Create the node map .
5549	Factory for parsing
5550	Creates a new unit with the given name
5551	Make a Unit object from a string .
5552	Check if two units are compatible
5553	Checks if a date reference unit is a date reference unit .
5554	Check if a unit string is a unit .
5555	Returns the conversion factor between two input units .
5556	Convert a double value to a unit .
5557	Check if the unit is unknown .
5558	Return the value of the scaled unit
5559	Create a TopOp clause .
5560	Creates a TopLevelQuery clause for a boolean function .
5561	Creates a constraint clause .
5562	Creates a grayscale image of an array .
5563	Crawl the catalog .
5564	Crawl a dataset
5565	Crawl direct datasets .
5566	Returns the cached file if it exists .
5567	Get an existing file if it exists .
5568	Set the debug flag
5569	Returns a list of all files
5570	Close the file
5571	Seek to the given position .
5572	Flush buffer to file .
5573	Read a single byte from the file .
5574	Read a short value from a byte array .
5575	Read an integer from the buffer .
5576	Read an integer from a byte array .
5577	Read a long value from a long array .
5578	Read a float from a byte array .
5579	Read a double value from a double representation .
5580	Reads a string from bytes
5581	Reads a string from the maximum number of bytes .
5582	Write a boolean array .
5583	Write an integer to a byte array .
5584	Write a character to a byte array .
5585	Write an integer to a byte array .
5586	Write a long integer to a byte array .
5587	Write a float to a byte array .
5588	Write a double value to a byte array .
5589	Write bytes from a string .
5590	Write a character to a buffer .
5591	Search until a match is found .
5592	Append query from query string
5593	Factory method to create a collection
5594	Attempts to find the index .
5595	Determines if the index is a leaf .
5596	Construct a list of DirectoryBuilder objects .
5597	Scan directory for children .
5598	Read all files in the index from the index reader .
5599	get a list of gridsets
5600	Acquire a cacheable file .
5601	Remove a CacheFile
5602	Remove the cache from the cache .
5603	Release a file from the cache
5604	Create an unsigned integer .
5605	Update the cache in the shadow cache .
5606	Clear all files in the cache .
5607	Make the vertical transform
5608	Is the global longitude?
5609	Returns True if Z axis is positive False otherwise .
5610	Find the coordinates of a single coordinate .
5611	Find the closest coordinates of a coordinate .
5612	Find the index of the coordinates in a latitude and longitude .
5613	Given a latitude and longitude return a list of indexes that match the given latitude and longitude .
5614	Get the position of the item in the table
5615	Get an item from a pixel
5616	Iterate over all MFile objects in the given collection .
5617	Download remote files
5618	Returns the name of the subcenter of the given center
5619	Convert unit to CalendarPeriod
5620	Return a calendar period .
5621	Create a CalendarPeriod object from a unit .
5622	Subtract a date from start to end .
5623	Returns the conversion factor for a calendar period
5624	Returns the value in milliseconds of the calendar period .
5625	Returns the offset between start and end date
5626	Try to reconstruct the ncfile .
5627	Initialize the tables
5628	Adds a date root extension
5629	Given a path find the longest common prefix .
5630	Find the data root for the given path .
5631	Convert a data root to a DataRoot .
5632	Get calendar date range
5633	Reindex a list of coordinates
5634	Create a new Netcdf writer .
5635	Create a new Group and return it .
5636	Adds an enumeration type to a group
5637	Delete an attribute from a group .
5638	Rename a group attribute .
5639	Add a record structure to the network .
5640	Abort the spiw .
5641	Write the properties of an object to out .
5642	Extracts metadata from a Thredds Dataset
5643	Divide the unit into another unit .
5644	Converts a number to a derived unit .
5645	Converts the given amount to a double precision unit .
5646	Convert nested variable to array .
5647	Convert a DAPS Variable into an array .
5648	Convert DodsV data to Array structure
5649	Close all databases
5650	Open a database .
5651	Convert integer value to Period
5652	Ensures that the array is less than minCapacity
5653	Get a string at index .
5654	Create a catalog from a directory .
5655	Creates a proxy catalog for the given path .
5656	Returns the type of the coordinate .
5657	Return a Grib2Pds instance .
5658	Calculate the time from a Grib number .
5659	Apply scale to given value .
5660	Parse a local concept .
5661	Add a local concept from an input stream .
5662	Clean a single line .
5663	Stores a concept in the database
5664	writes the grib1 tables
5665	Writes the lookup tables to a directory .
5666	Shows all local concepts .
5667	Entry point for the ECMW local Concepts .
5668	Get a DataSourceType object by its name .
5669	Expands the access point dataset .
5670	Expands the data source into a new InvCatalog .
5671	Name the datasets in the dataset .
5672	Add named datasets to the named dataset .
5673	Name the dataset tree .
5674	Load a picture from a URL .
5675	Stop loading without loading .
5676	Called when a source image is received .
5677	Triggers the source load progress notification .
5678	Create a scaling thread in a thread .
5679	Returns the size of the scaled picture
5680	Gets the size of the scaled picture
5681	Get merged parts .
5682	Create a header for a gempak station
5683	Returns a list of strings that are available for the user
5684	Checks if part is a valid group
5685	Set the root directory .
5686	Make sure the root directory exists .
5687	Returns a cached file .
5688	delete all files before a date
5689	delete all files in the cache
5690	Returns True if the given FITS table is valid .
5691	Factory function to create a coordinate axis
5692	Returns a copy of this coordinate axis .
5693	Checks if the data type is numeric .
5694	Print information about the axes
5695	Obtain the calendar from CF and COARDS attributes .
5696	set the row list
5697	Returns the selected row
5698	Increments the selected row .
5699	Returns the index of each column in the table
5700	set the selected index
5701	Quick sort function .
5702	Swap two strings .
5703	Check if a file exists .
5704	Rotates the given lonlat and rot2
5705	Create an XMLStore from a file .
5706	Create a new XMLStore object from two streams .
5707	create an XMLStore from a resource
5708	Creates a standard filename for the specified store name
5709	Saves the preferences to disk
5710	Save the preferences as an XML file .
5711	Writes an atomic variable to a serial writer .
5712	Write data to a serial writer .
5713	Write the data cursor to a serial format .
5714	Write a sequence to a serial writer .
5715	Write a record to a serial writer .
5716	Check if a file is valid .
5717	Get WMO ID
5718	Read a single row of data .
5719	Get the data from the type i .
5720	Read data from a Grib2D file
5721	Read Grib2D data
5722	Read an object from a list of slices .
5723	Create a CFGrid from a grid dataset .
5724	Makes an estimate of the size of a grid .
5725	Create a netCDF file .
5726	Set the stations from a list of stations .
5727	Sets the selected station
5728	Find the station with the given point .
5729	Find the closest station to a point
5730	Get the selected station .
5731	Returns the project name for the given type .
5732	Get all stations in a bounding box .
5733	Get station by name .
5734	Get a data iterator .
5735	Get a data iterator .
5736	Read data from a file .
5737	Return the dot product of a vector .
5738	Returns the sum of all values .
5739	Normalizes all elements in the array .
5740	Set all services in a dataset
5741	Get a Grib1 parameter .
5742	Get a Grib1 parameter by its ID .
5743	Add a prefix to the set .
5744	Adds a double symbol .
5745	Get the prefix of a given string .
5746	Check if an email is OK
5747	Gets a double parameter from a string .
5748	Calculate CRC .
5749	Check if the data is a thin packet .
5750	Returns the index of the given field name
5751	Returns a string describing the time range
5752	Returns the time coordinate
5753	Set the next polygon .
5754	Set the previous polygon
5755	Find a property by name .
5756	Set the current projection
5757	Returns a subset of the coordinate axis that corresponds to a time axis .
5758	Registers a Netcdf file .
5759	Registers an IOProvider class .
5760	De - register an IO provider with the given target .
5761	Checks if the given IOP class is registered .
5762	Deregisters a given IOP class .
5763	Returns True if the file can open the given location .
5764	Open a netcdf file with the given data .
5765	Open a NetCDF file with the given data .
5766	Opens a NetCDF file and returns it .
5767	Open a NetCDF file in memory .
5768	Find a global attribute by name .
5769	Convert a URL to a ncML string .
5770	Write CDL to out .
5771	Write a CDL representation of a CDL file .
5772	Write CDL to f .
5773	Add an attribute to a group .
5774	Add an attribute to a group .
5775	Add group to parent
5776	Add a dimension to a group .
5777	Remove dimension from group
5778	Add a variable to a group
5779	Add a variable to a group
5780	Add a string variable to a group
5781	Remove variable from group
5782	Send an ISP message to the ISP server .
5783	Tries to add a record structure
5784	Close all variables and variables
5785	Read a variable section
5786	Read section and write to a byte channel .
5787	Reads arrays from a list of variables .
5788	Read a variable section from a string .
5789	Make the full name of a CDMNode .
5790	Make a full name string with the full name .
5791	Return True if the given mfile is included in the list .
5792	Return True if the given mfile is excluded .
5793	Return True if the given MFile is true False otherwise .
5794	Appends a value to the attribute .
5795	Dispatches the given value .
5796	Attempt to force a string value .
5797	Checks if a string is a Byte value .
5798	Check if a short value is valid
5799	Check if string s is an integer
5800	Returns True if the string s is valid .
5801	Returns True if s is a float
5802	Check that the string s is a double value
5803	Returns the DataType of the attribute .
5804	Check if the dataset is viewable
5805	Returns whether a boolean string is valid .
5806	Returns True if the given alphnum string is valid .
5807	Returns True if the alphanumeric string conjunction with the given alphnum string conjunction with the specified alphnum string
5808	Return True if path is a path .
5809	Converts a Unicode code point into a percent string .
5810	Get a parameter from the string .
5811	Compare two grid definitions
5812	Process the input stream .
5813	process a BUFR message
5814	Remove quotes from a string .
5815	Mark the stack as stacked variables .
5816	Opens a NetCDF file and writes it to the editor
5817	Get a value from Thredds configuration .
5818	Write a CDL string .
5819	Create a StationHelper object from the remote server .
5820	Validate the result .
5821	Returns the azimuth in degrees
5822	Returns the elevation of the message
5823	Returns a list of latitudes
5824	Returns a list of longitudes
5825	Returns a list of the altitudes of the ASIB
5826	Returns a numpy array with the azimuth angles in radians .
5827	Returns a numpy array with the elevation of the YB bayes
5828	Returns a copy of a Structure with the specified members .
5829	Select members of a variable .
5830	Adds a member to the member structure
5831	set member variables
5832	Sets the parent group
5833	Calculate the total element size .
5834	Read a structured structure from the array .
5835	Read array structure .
5836	Get a structure data iterator
5837	Returns the data category
5838	Returns the fully qualified name of the class .
5839	Add a new parameter .
5840	Return the header
5841	Convert a LatLonRect to a projection .
5842	Get the version of a ConvName .
5843	Returns the Zis - UP representation of the zaxis .
5844	deletes the next file
5845	sets the color scale parameters
5846	Draws the data in the plan view
5847	Check if this is a child of this HDF5 group .
5848	Get a message type by its name .
5849	Installs all cells in a table in all columns .
5850	Sets the API key and secret for the Coinbase API .
5851	Create a label from a string .
5852	Create a label from a list of lines .
5853	Create a label .
5854	Connect to a Cloud SQL instance .
5855	Returns a list of IP types
5856	Connect to a MySQL socket .
5857	Purge the given logger .
5858	Compiles all the source files in the given class .
5859	Compiles the given class and returns the result .
5860	Adds a source code to the compiler .
5861	Read a graphic control extension .
5862	Get the next frame from the header .
5863	Returns the selectable persons property
5864	Initialize the list listeners
5865	Get a person by id .
5866	Adds a message to the internal map .
5867	Set the person with the given id
5868	Takes a View object and adds it to it
5869	Takes a View and returns a ViewModel instance
5870	Loads the available countries .
5871	loads the list of subdivisions
5872	Create a property for a string property .
5873	Add an immutable property to this property .
5874	Create a Java view step .
5875	Create a FxmlView step for the given view type .
5876	Clears all observables from the map .
5877	Creates the events for the selected index
5878	Access a member from an AccessibleObject .
5879	loads view tuple
5880	Creates a fxml path from a view type .
5881	Returns the style row associated with the given style mapping row .
5882	Get the pixel value of a pixel .
5883	Read pixel values from PNG file .
5884	Validate the image type of the image
5885	Creates an image of the CoverageDataImage
5886	Set tile data .
5887	Wrapper around raw query .
5888	Create a CursorResult instance from a raw query .
5889	Executes a query .
5890	Convert a SQL query to a Cursor object .
5891	Converts a Cursor to a Result object .
5892	Returns the feature row for the given geometry index .
5893	Adds a cursor wrapper to the database .
5894	Retrieves the row for a given tile .
5895	Gets a Gridded CoverageData object from the tile database .
5896	Get coverage data
5897	Get coverage data .
5898	Gets the coverage data for the requested bounding box .
5899	Returns the results of zooming on the requested bounding box .
5900	Gets the results for zooming in the requested bounding box .
5901	Returns results for zoom - out of the requested tile .
5902	Returns the tile matrix for the given request
5903	Returns the value at the given tile row .
5904	Sets the icon for the given geometry type
5905	Returns the icon row for the given geometry type
5906	Open a SQLite database .
5907	Convert bytes to a bitmap .
5908	Compress a bitmap .
5909	Creates the table metadata .
5910	Deletes a table from the database .
5911	Create a TableMetadata object if it does not exist .
5912	Get the ID of the given GeoPackage
5913	Creates a TableMetadata object from a cursor .
5914	Create a new Extensions
5915	Returns the feature row for the given cursor .
5916	Creates a custom cursor for the given SQL query .
5917	Performs a query on a given bounding box .
5918	Query the cursor for a custom cursor .
5919	Returns the number of points in a geometry
5920	Query user custom cursor
5921	Builds the WHERE clause for the given range
5922	Query for a bounding box
5923	Count the number of features in a bounding box
5924	Returns the query results for a feature query
5925	Query for feature query results
5926	Returns the number of pixels in the bounding box
5927	Set bitmap data
5928	Sets the data for the given bitmap
5929	Set the image compression configuration .
5930	Returns the number of tiles in the bounding box .
5931	Adjust bounding box based on projection
5932	Sets the world bounding box to the world .
5933	Adjust bounding box based on WGS84
5934	This function adjusts the bounding box to fit in the web package .
5935	Gets the bounding box for a given zoom level .
5936	Returns a TileGrid for the given zoom level
5937	Retrieves the tile row for the given column and row .
5938	Returns a cursor for the tiles descending by zoom level .
5939	Returns the closest zoom level for a given length
5940	Returns the approximate zoom level for a given length .
5941	Returns a TileGrid object for the given zoom level .
5942	Deletes a tile from the tile table .
5943	Count the number of tiles in a given zoom level .
5944	Checks if the bounding box is Google Tile
5945	Get the float value of a pixel .
5946	Read the pixel values from the image bytes .
5947	Validate the coverage data tile type .
5948	Creates a CoverageDataDataImage .
5949	Sets the value of the first pixel to the given pixel value .
5950	Get or open a GeoPackage .
5951	Returns the current row
5952	Go to next invalid position in the database .
5953	Returns a list of style mappings for the given base ID .
5954	Deletes an index by its base ID .
5955	Get a rectangle from a bounding box .
5956	Returns a rectangle around a rounded rectangle .
5957	Returns a list of databases that exist in the given list
5958	Create a new GeoPackage and close it
5959	Check if a database is valid .
5960	Validate and close the SQLite database .
5961	Validate and close the SQLite database .
5962	Validate the SQLite database .
5963	Validate that the SQLite database header is valid .
5964	Checks if the database header is valid
5965	Add the internal databases to the collection .
5966	Add external databases to the collection .
5967	Imports a GeoPackage object into the database .
5968	Get metadata for a database .
5969	Get metadata at the given path .
5970	Creates a long value for the given geometry metadata
5971	Create a GeometryMetadata object from a geometry envelope .
5972	Deletes the number of geometries from the database .
5973	Creates a new geometry if it exists .
5974	Updates the metadata with the given metadata
5975	Count the number of rows in a table .
5976	Creates a GeometryMetadata object from a cursor .
5977	Executes an UPDATE statement
5978	Draws a tile
5979	Gets all simple attributes for a list of ids .
5980	Checks if the cursor is OK
5981	Gets a UserMapping object for the given table .
5982	Gets a SimpleAttributesDao object for the given table .
5983	Returns the mappings for a given base relation .
5984	Returns the mappings for the given extended relation .
5985	Returns True if the user has a mapping with the given baseId .
5986	Returns the count of the cursor .
5987	Register a cursor to the table .
5988	Creates a UserCustomDao object .
5989	Get a tile from a bounding box .
5990	Draws the tile with the requested tile .
5991	Reproject a tile from a bounding box .
5992	Retrieves tile cursor results for the given bounding box .
5993	Calculates the maximum overlap between two features
5994	Set the density
5995	Set the line paint .
5996	Set the polygon paint
5997	Returns tile data as byte array
5998	Draw a tile .
5999	Draws a tile from the index .
6000	Returns the number of geometries matching the web mercator bounding box .
6001	Returns the number of features matching the given bounding box .
6002	Query indexed features by bounds .
6003	Search for features matching the bounding box .
6004	Draws a tile on all features
6005	Simplify a list of points
6006	Get the point color for the feature style .
6007	Get the style paint for a feature style .
6008	Get the style paint for a feature style .
6009	Returns the paint for a polygon .
6010	Returns the style paint for the given feature style .
6011	Returns the style paint for the given style .
6012	Returns the paint for the given style row
6013	Returns the paint for the given style ID
6014	Stores the given icon row in the given bitmap .
6015	Creates a bitmap from an icon row
6016	Wrap the values in the values dictionary
6017	Create a bitmap for all layers .
6018	Cleans up all layers
6019	Get a bitmap for a layer .
6020	Get a canvas .
6021	Create a bitmap and return it .
6022	Gets the style mapping database .
6023	Gets the style dao .
6024	Gets the user s icon dao .
6025	Returns the feature styles for the given feature table .
6026	Returns the styles for the given feature table .
6027	Returns the style row associated with a feature table .
6028	Returns the icons for the given feature table .
6029	Returns the icon for a feature table
6030	Gets all the styles for the given feature row
6031	Returns the feature styles for the given feature ID .
6032	Returns the styles for the given feature row
6033	Returns the icons for the given feature row
6034	Gets all styles for a given feature
6035	Gets all icons for a given feature
6036	Sets the feature styles for the given feature table .
6037	Sets the styles for a feature table .
6038	Set table icons .
6039	Sets the feature styles for the given feature row .
6040	Sets the style for a feature
6041	Sets the styles for the given feature row .
6042	Set styles for a feature .
6043	Sets the style of a feature row .
6044	Sets the default style for the given feature row .
6045	Sets the default style for a feature .
6046	Sets the icons for the given feature row .
6047	Set the icons for a feature .
6048	Sets the icon for the feature row .
6049	Sets the default icon for the feature row .
6050	Sets the default icon for a feature .
6051	Get or insert a style row .
6052	Get or create an icon .
6053	Inserts a new style mapping into the database .
6054	Deletes a table style .
6055	Deletes the table icon for a feature table .
6056	Deletes all table mappings
6057	Deletes the table mapping
6058	Deletes the mapping from the database
6059	Gets all style IDs associated with a feature table
6060	Gets all icons associated with a feature table
6061	Gets all style IDs associated with a feature table
6062	Gets all icons associated with a feature table
6063	Returns the image bytes .
6064	Flushes the output stream .
6065	Get pixel value from pixel coordinates .
6066	Read pixels from file
6067	Draw a feature in a tile
6068	Draws a path to a feature tile .
6069	Draws a polygon path
6070	Adds a LineString to the path
6071	Adds a polygon to the path
6072	Get a feature cache for a table .
6073	Removes a feature row from the database .
6074	Clears all cached features
6075	Get the cached Styles .
6076	Get the table icons .
6077	Creates a new RTreeIndexTable object for the given feature .
6078	Sets the width .
6079	Sets the height .
6080	Get derived dimensions .
6081	Calculate tile density .
6082	Reads a blob value from the database
6083	Read a user custom table from a database .
6084	Returns the default color .
6085	Validate a color .
6086	Creates a Color object based on the hex color and opacity .
6087	Returns a new GeoPackageManager instance .
6088	Sets the progress
6089	Returns the index of the given types .
6090	Returns True if the given feature row is indexed .
6091	Deletes the index from a collection .
6092	Deletes the index of a given feature row .
6093	Deletes the index for a given geometry
6094	Deletes the index from the feature index .
6095	Returns whether the index is indexed .
6096	Returns the list of features that are indexed
6097	Query the feature index table .
6098	Returns the number of indexed features
6099	Gets the bounding box of the indexed type
6100	Query feature index .
6101	Returns feature index type .
6102	Gets the internal file .
6103	Gets the absolute path of a file .
6104	Gets the geometry type from the geometry name .
6105	Sets the geometry type of the specified geometry type .
6106	Returns True if url contains bounding box .
6107	Replace x and y in url with x and y .
6108	Checks if the URL has XYZ .
6109	Replace bounding box with bounding box .
6110	Replace bounding box with given bounding box .
6111	Gets the geometry data from the table .
6112	Index a feature row .
6113	Updates the last indexed time in the feature database
6114	Deletes the table index
6115	Deletes the specified geometry index .
6116	Returns whether the last index is indexed .
6117	Returns a cursor for the geometry metadata
6118	Gets a cursor for the given bounding box .
6119	Count the number of features in a given bounding box .
6120	Returns a cursor for the specified geometry envelope
6121	Returns the number of elements in a geometry
6122	Gets the cursor for the given bounding box
6123	Count the number of features in a bounding box
6124	Returns the bounding box of the feature
6125	Get geometry metadata from a cursor .
6126	Get a FeatureRow from a cursor .
6127	Returns the feature row for the given geometry metadata .
6128	Returns a list of TileDaos for a feature table
6129	Returns a list of feature tables for the given tile table
6130	Get the bounding box for the feature tile .
6131	Query custom cursor by IDs
6132	Returns all unique base IDs
6133	Returns the list of unique IDs
6134	Deletes records by base Id .
6135	Deletes all records by the given related ID
6136	Deletes a relationship between two models
6137	Build a WHERE string from base and relatedId
6138	Inserts the metadata into the database .
6139	Delete a database from the database
6140	Renames a GeoPackageMetadata object .
6141	Rename a GeoPackageMetadata column .
6142	Returns all GeoPackageMetadata objects .
6143	Get metadata for a given database .
6144	Get metadata for a given ID .
6145	Get the metadata for the given geopackage .
6146	Check if a database is external
6147	Get metadata for an external path .
6148	Returns a list of metadata where the given sortColumn is a sort column .
6149	Returns a list of metadata where the sort column is notlike .
6150	Returns a list of names where the given column is the name of the metadata
6151	Creates a GeoPackageMetadata object from a cursor .
6152	Called when a view is created .
6153	Add a parallax view to a view .
6154	Overrides superclass .
6155	Creates a custom view from a custom view .
6156	Appends an event to the given cb .
6157	Tries to find the configuration file from the system properties .
6158	Returns the URL for the given filename .
6159	Auto - configure configuration
6160	Adds a status for a resource
6161	Convert a socket address to a string .
6162	Returns a new ExecutorService .
6163	Start all converters .
6164	Appends an event to the parent file .
6165	Adds a substitution property .
6166	Gets the value of the given property .
6167	Compile and return a compiler .
6168	Parse a T node .
6169	Parse a literal token .
6170	Escape the given buffer .
6171	Convert a fixed date to a regular expression .
6172	Start an event evaluator
6173	Add an event evaluator to the stack .
6174	Initializes the logger context
6175	loads a ContextSelector from a string
6176	Sets the properties of the logger
6177	Returns the absolute path of the external storage directory .
6178	Returns the database directory
6179	Get the absolute path of a file .
6180	Returns True if the logging event is greater than an error .
6181	Returns the discriminated value from a log event .
6182	Updates the mask if necessary .
6183	Get the decision of an event .
6184	Creates the key manager
6185	Creates the trust manager
6186	Creates a key store factory from the system properties
6187	Returns the location of a system property .
6188	Returns a URL for the given location .
6189	Returns True if the chain handles a exception .
6190	Stop the logback context
6191	Print out if the context is in a warning level .
6192	Print the error status of a context .
6193	Print the current status manager to stdout .
6194	Write the first line of the exception to the stream .
6195	Returns the entry for the given key
6196	Remove an entry from the live map
6197	Converts a format string into a FormatInfo object .
6198	Attempt to rename a file to another location .
6199	Check if srcFile is on different volumes .
6200	Get an environment variable .
6201	Get an Android system property .
6202	Sets the MDC property map .
6203	returns a string representation of the MDC property map
6204	Extract the caller data from the given exception .
6205	Checks if the current class is in the framework space .
6206	Add newStatus to tail buffer
6207	Add a listener to the status listener list .
6208	Looks up an implicit action .
6209	Returns a list of actions that match elementPath .
6210	Sets the class loader for this class .
6211	Get a value from system properties
6212	Get a boolean value from SystemProperties .
6213	Decapitalize a string .
6214	Returns a list of method descriptors for the given class .
6215	returns a list of property descriptors for a given class
6216	Start the encoder .
6217	Add a on console status listener to the console
6218	This function is called when the context is done .
6219	Returns the name of the logging event as a string .
6220	Determines if an event is discardable .
6221	Initialize the shutdown hook .
6222	Adds a shutdown hook to the stack .
6223	Returns the list of enabled protocols
6224	Determine the enabled cipher suites .
6225	Return a list of strings that are included in defaults .
6226	Convert a string to a Scope object .
6227	Sets the properties of the given properties .
6228	Add a new appender to the list .
6229	Detach an appender from the list .
6230	Detach an appender from the list .
6231	Handle a parent level change .
6232	Calls the appenders for this logger .
6233	Detach the specified appender .
6234	Creates a child logger by name .
6235	A helper to call the turbo filter chain .
6236	Log a logging event .
6237	Call a new thread and return the socket .
6238	Returns True if the given file does not exist .
6239	Returns the integer corresponding to the given level .
6240	Convert an integer to a level .
6241	Returns a set of URLs that contain the given resource .
6242	Returns the resource for the given resource .
6243	Returns the class loader of the given object .
6244	Get the class loader as a privacy .
6245	Gets the Java ClassLoader of the given class .
6246	Start the tag .
6247	Format log tag .
6248	Handle opening properties .
6249	Get the index of the separator in the name
6250	Returns True if the logging event is enabled .
6251	Get client thread name .
6252	Check if two files are on the same file store .
6253	Start the session .
6254	Append an event to the queue .
6255	Send an SMTP buffer to the buffer .
6256	Adds a MDCValueLevelPair to the value map .
6257	Returns a dynamic converter for the given keyword .
6258	Returns a composite converter for the given keyword .
6259	Determines the compression mode
6260	Do the configuration of the given URL .
6261	Do the configuration of the given file .
6262	Configures the input stream .
6263	Build the interpreter .
6264	This method is used to configure the current configuration .
6265	Configure the interpreter .
6266	Gets a string property .
6267	Set the name of this context .
6268	Check if a context has a status listener .
6269	Returns the time of the last reset message .
6270	Start parsing .
6271	Returns the effective converter map
6272	return the header of the file
6273	Generate the footer
6274	Called when the context is started .
6275	Called when the end of an appender is encountered .
6276	Returns a copy of the clients .
6277	Adds a client to the list of clients .
6278	Remove a client from the list of clients .
6279	Get a copy of the context map .
6280	Gets the value of a type
6281	Returns a FilterReply based on the current chain .
6282	Determines if the operating system is an Android OS .
6283	Initialize the default logger context .
6284	Returns all files in a folder that match the stem regex .
6285	Helper function to print the status of the current status
6286	Converts a facility string into an integer .
6287	Gets the database file .
6288	Remove expired logs .
6289	Checks if the given expiry time is expired .
6290	Inserts an event and returns the insert ID .
6291	Appends an event to the secondary sub - append .
6292	Bind the logging event to the statement .
6293	Takes an object and returns it as a string
6294	Compute the reference mask for an event .
6295	Merge the properties of an event into a map .
6296	Insert an exception .
6297	Returns the length of the length of the prefix in this prefix .
6298	Get the highest level of all status messages .
6299	Sets a property on the object .
6300	Returns True if the given class is not equal to the constructor .
6301	Returns a dict with the child value
6302	Process an include URL .
6303	Opens a URL .
6304	Removes the head and tail elements from the SaxEventRecorder
6305	Returns True if the server is started .
6306	Return True if the exception is transient .
6307	Set default hosts .
6308	Ensures that the local index already exists .
6309	Synchronously sync data selection queries .
6310	Check if the last sync date is greater than the last time .
6311	Wait for a task to be published .
6312	Returns the list of all indexes in the database .
6313	Reads a stream of characters from a stream .
6314	Reads and returns a byte array from the stream .
6315	Consume the contents of a connection .
6316	Return a list of hosts that are up .
6317	Sets the type of the places query .
6318	Start a new index .
6319	Put a value into the lru cache .
6320	Get the first value of a key from the cache .
6321	Wait for all threads to finish .
6322	Compare two version strings .
6323	Report an exception .
6324	Copies all files in src to target directory .
6325	Initialize the simulation properties .
6326	Get a static field from a class .
6327	Get a static method by name .
6328	Formats a percentage .
6329	Format a double .
6330	Format a long number .
6331	Read a JSON syntax character .
6332	Convert a character to a hex value .
6333	Write a JSON string .
6334	Writes an integer to the stream .
6335	Writes a double to the stream .
6336	Read a JSON string .
6337	Reads JSON numeric characters .
6338	Reads an integer from the context .
6339	Reads a double from the stream .
6340	Read base64 encoded JSON string .
6341	Invoke methodCall .
6342	Invoke a request .
6343	Enqueue a method call to the queue .
6344	Gets a file from a filesystem path .
6345	Update the decorator
6346	Refreshes the repository view .
6347	Returns the resource history view
6348	Opens an editor with the given contents and name .
6349	Report the login failure dialog
6350	Prompt for authentication .
6351	Create the default page
6352	Start a thread .
6353	Sets the isKeepAll alive flag .
6354	Sets whether or not to omit .
6355	Sets the owner node .
6356	Add a condition factor .
6357	Create a ConditionTerm from a stream .
6358	Tests whether the condition term matches the condition term .
6359	Get the DSL content for a given rule .
6360	Load the DSL config file .
6361	Reads the DSL configuration from the given stream .
6362	Get the menu
6363	Creates a new response body .
6364	Add href to root .
6365	Insert href before ref .
6366	Remove href from DOM .
6367	Creates a propstat element .
6368	Get the href of the element .
6369	Returns the current status .
6370	Returns the stack frame for the given value .
6371	Returns True if class1 is a subclass of class1 and class2 .
6372	Checks if the proposals contains a new proposal .
6373	Clone a node .
6374	Reset the stream .
6375	Creates the actions for the content assist tip
6376	Adds a connection
6377	Returns the value of a property .
6378	Removes a connection .
6379	Sets the location of the location .
6380	Sets the value of a property
6381	Set the size property
6382	Dump constraints to a string .
6383	Creates a LockEntry .
6384	Adds a child vertex to the graph .
6385	Removes a child from the graph .
6386	This method is used to clear the cache preferences
6387	Stop the context
6388	Get a string from the default resource bundle
6389	Returns the resource bundle
6390	Returns a FormColors instance
6391	Sets the date in the given date .
6392	Sets the date of the given date
6393	Create a new status with an error message .
6394	Log an error .
6395	Adds a field editor to the list of fields .
6396	Adjusts the layout of the fields to be updated
6397	Apply the font to all fields .
6398	Calculate the number of columns .
6399	Initialize all the fields
6400	Fire a property change event .
6401	Set the active editor .
6402	Adds the zoom to the toolBarManager
6403	Determine the dialect of the backtext
6404	Creates a new context with the given locator and locator .
6405	Saves the file to disk .
6406	Setup table listeners
6407	Create and create the table
6408	Puts a value into a URL .
6409	Stores the given URL in the table .
6410	Create a new node and return it .
6411	Adds a node to this node .
6412	Set the file .
6413	Adds a new condition to the list of conditions
6414	Adds a state token to the condition .
6415	Checks if a condition matches the condition .
6416	Get the prop .
6417	Returns the status of the node .
6418	Sets the prop property .
6419	Get the last line of a string
6420	Returns the last non dash line
6421	Bind a binding to an id .
6422	Binds a binding to an id .
6423	Returns the message with the given id and bindings .
6424	Create a process in the project
6425	Create a process sample .
6426	Returns the value of the current runtime id
6427	Visit a rete .
6428	Visit the node .
6429	Return a unique identifier for an object .
6430	Creates a remove property .
6431	Create a set .
6432	Creates a new locator .
6433	Return a new presentationReconciler .
6434	Check if obj is the same as obj .
6435	Returns True if the term contains a condition term .
6436	Create a ConditionFactor from a stream .
6437	Add pages to the editor .
6438	Perform an HTTP DELETE request
6439	HTTP POST method
6440	Get the status of a job .
6441	Suppress warnings .
6442	Handle pull results .
6443	Sets a JSON array value .
6444	Creates a new active lock .
6445	Filter proposals that start with prefix .
6446	Read a prefix from a document .
6447	Calculates the row list for the rete graph .
6448	Draws the border
6449	Returns the part for the given model element
6450	Returns an image descriptor for the given path .
6451	Registers an image with the given path .
6452	Add a vertex to the graph .
6453	Returns the index of the row with the given vertex .
6454	Get the width of all rows .
6455	Dump the vertices to stdout .
6456	Optimize all rows .
6457	Load a RETE model from a string .
6458	Initialize the graphical viewer
6459	Draw the new graph to the graph .
6460	Returns a Drools line breakpoint for the given source
6461	Set href .
6462	Checks if theDAV server can talk to the server .
6463	Performs a copy of the locator .
6464	Analyzes a multi - status response .
6465	Extract property stats from a MultiStatus object .
6466	Returns the content of the response .
6467	Get all active locks
6468	Get the status of a property
6469	HTTP HEAD request .
6470	Lock the server .
6471	Move the given locator to the destination .
6472	Check in the locator .
6473	Refresh the lock .
6474	Remove one or more properties .
6475	Remove a property .
6476	Sets the content of the given content .
6477	Set the properties of a collection .
6478	Set property .
6479	Unlock the server .
6480	Update a document .
6481	Perform a version control request .
6482	Delete a resource .
6483	Raises WebDAVException with the given status code .
6484	Check if a property has a child .
6485	Write the request body .
6486	Convert a byte array to a hex string .
6487	Convert an integer array to a hex string .
6488	Sets the isAllProp property .
6489	Sets if the property is a property .
6490	Sets the property value .
6491	Strip the last word from a string .
6492	Update the tree viewer
6493	Writes data to the stream .
6494	Step over the current thread .
6495	Mark parse errors as a Drools build marker
6496	Skip whitespace .
6497	Add a resource to a GuDAV server .
6498	Commit changes on selected file
6499	Gets the age of the field
6500	Get the Content - Length value of the Content - Length value .
6501	Get the maximum forwards value .
6502	Gets the overwrite value .
6503	Gets the passthrough value .
6504	Gets the timeout value from the server
6505	Store a context key in the context .
6506	Set timeout .
6507	Open a DSL file .
6508	Parse a file - like object .
6509	Extract metadata from obj .
6510	Strip obj metadata .
6511	add tokens to a node
6512	get children of condition
6513	get child nodes from the tree
6514	Recursively adds children to list
6515	Print the tree .
6516	Pretty print a node .
6517	Print count tabs .
6518	Read a JSON object from a string .
6519	Get an image descriptor by its id .
6520	Invoke webDAV request .
6521	Sets a header field .
6522	Creates the rule launcher
6523	Creates the rule for the project
6524	Create the Rule Flow .
6525	Creates the RuleFlowLauncher
6526	Returns the selected IUs
6527	Create an image and save it to stream .
6528	Returns the name of the field
6529	Returns the evaluator for this node .
6530	Returns the value of this node .
6531	Add the properties of a Guvnor resource .
6532	Creates a baseline control control element .
6533	Bind a member to a resource .
6534	Get a locator for a member .
6535	Optimizes the vertices .
6536	Initializes the resources group
6537	Checks that the resource group is valid
6538	Generate a new entity tag .
6539	Returns the opposite vertex of the given vertex .
6540	Validate OTPs .
6541	Check if username is right user
6542	Get the username for a publicId
6543	Add a YubiKey to the user .
6544	Verify an OATH OTP
6545	Clear the password .
6546	Returns the public ID of a YubiKey .
6547	Checks if the given OTP format is valid .
6548	Creates an evaluation .
6549	Creates an evaluation object
6550	Clears the cache .
6551	True if the Java annotation is enabled .
6552	Get the package name of an object .
6553	Get the package name of a class .
6554	Returns the unique descriptor for the given object .
6555	Returns the type of the argument .
6556	Returns True if two classes are the same .
6557	Gets the appropriate method for the given target .
6558	Gets the value of a method .
6559	Returns a map of property descriptors for the target class .
6560	Get a property descriptor from a target class .
6561	Get a read method from a target object .
6562	Read a character from the buffer .
6563	Expression projection .
6564	A SELECT statement .
6565	Returns a long value .
6566	Returns a double representation of the given value .
6567	Converts a value into a big integer .
6568	Converts a value into a big decimal value .
6569	Return a string representation of the given object .
6570	Returns the numeric type of the given value .
6571	Converts the given value to the given type .
6572	Converts a value into an integer .
6573	Try to interpret a numeric type .
6574	Returns the numeric type of two objects
6575	Return a new integer based on type .
6576	Pop the current evaluation .
6577	Generates the code for the value getter
6578	Generates a value setter for the given node .
6579	Flatten the tree .
6580	initialize the node
6581	Return the character in the image .
6582	Sets the root context .
6583	Get a value from an expression
6584	Sets the value of the expression
6585	Set the value of an object in the tree .
6586	Returns whether the expression is a constant .
6587	Returns the default watch service id .
6588	Wait until the server starts .
6589	Reads the file and returns a string
6590	Reloads the project .
6591	Gets an archiver by name .
6592	Checks archiver for problems .
6593	Reads a file and returns a string
6594	Create an ant project
6595	Add a system property to the Java environment .
6596	Add a system property to a Java environment .
6597	Open a new folder dialog .
6598	Change the directory .
6599	Refresh the status menu
6600	Create a new file observer .
6601	Return the selected folder
6602	Creates a new folder .
6603	Checks if the given file is valid .
6604	Start a background job .
6605	Start a list .
6606	Remove the end tag from the list .
6607	Handles a motion motion .
6608	Get the rect of the crop .
6609	Compute the layout of the crop .
6610	Register a listener for the RTditText text listener .
6611	This method is called when the text has changed .
6612	This is called when the view is not available .
6613	Returns a view that handles the specified item in the list .
6614	Convert text to RTML
6615	converts text from start to end
6616	Creates a new file and returns the unique file .
6617	Determines the original file .
6618	Return the namespace for the given name .
6619	Returns the local name of the given name .
6620	Set attribute name and value .
6621	Set an attribute .
6622	Get font name .
6623	Get the font name of a font .
6624	Create a new buffer if needed .
6625	Write bytes to a buffer .
6626	Write a byte to the buffer .
6627	This method is used to write the input stream into the buffer .
6628	Write all the buffers to out .
6629	Return a copy of the buffers .
6630	Set the font size
6631	Replace Unix separator in path with Unix separator .
6632	Recompute the focus
6633	Ensures that the cursor is visible .
6634	Center a highlight view on a highlight view
6635	Reset the document locator .
6636	Validate a string .
6637	Add an element type .
6638	Set an attribute .
6639	Set a child element .
6640	Get an element type by its name .
6641	Get an entity by its name .
6642	Cleans up paragraphs .
6643	Apply the given value to the editor .
6644	Checks if the given domain is valid .
6645	Executes an operation in the editor .
6646	Redo the given editor .
6647	Replace all occurrences of search in string with replacement .
6648	Get the thread status .
6649	Set the decoding options for a thread .
6650	Check if a thread can decode .
6651	Decodes a file descriptor .
6652	Get a set of fonts from the assets folder
6653	Returns a map of asset names to assets .
6654	Returns a map of all system fonts .
6655	Sets up the stack
6656	get a reader from an input source
6657	Get the stream for a publicid and systemid
6658	Add attributes to the XML element .
6659	Expand entities in a string .
6660	Lookup an entity by offset and length .
6661	Restart the specified element .
6662	Pop the next element from the stack .
6663	Pop an element from the stack .
6664	Return the prefix of a string .
6665	Returns whether the schema is foreign
6666	Trim quotes from a string .
6667	Split a string
6668	Rectify an element .
6669	Make a name from a character .
6670	Save the state of the toolbar
6671	Called when the event is destroyed .
6672	Subscribes to the editor .
6673	Called when a LinkEvent is received .
6674	Get the base matrix for the bitmap .
6675	Returns the maximum zoom level .
6676	Returns True if the text exists in the editor .
6677	Find all spans in a paragraph and remove them .
6678	Encodes a URL into a string .
6679	Decode URL to UTF - 8 encoded string .
6680	Tries to pick a directory .
6681	Creates a new bitmap with the specified degree
6682	Set the output writer .
6683	Write a character to the output stream .
6684	Write a string to the output stream .
6685	Handle a boolean attribute .
6686	Write escaped HTML string .
6687	Write namespace declarations .
6688	Write a qualified name .
6689	Creates a stream if it doesn t exist .
6690	Wait until the stream is active .
6691	Complete store snapshot with missing snapshots .
6692	Waits for the next provisioning request to execute .
6693	Gets records from Kinesis .
6694	Perform an action with retry limit .
6695	Try to get an action between two requests .
6696	Checks if the bucket is accessible .
6697	Loads all the stored entities from the store by their name .
6698	Apply a wildcard expansion handler to all files .
6699	Replaces oldPattern with new pattern .
6700	Removes any characters from a string .
6701	Add a resource lint report .
6702	Updates the given configuration with the given key .
6703	Returns the configuration properties .
6704	Creates a stream to read the wro .
6705	Convert a dictionary of pre processors to a map .
6706	Compiles a JavaScript script .
6707	Reload the cache .
6708	Called when the model has changed .
6709	Returns a new request that will be included in the request .
6710	Returns a transformer that returns a transformer for the name and extension .
6711	Called when an error occurs .
6712	Send a redirect to the server .
6713	Process a resource .
6714	Returns a function that returns a function that replaces all files in the given group .
6715	Locate a URI .
6716	Creates the WroConfiguration object
6717	Register the change listeners
6718	Method to process the URI .
6719	Set the WroConfiguration factory .
6720	Identify duplicate group names .
6721	Merges an imported model into this object .
6722	Locate the given URI .
6723	Apply post processors .
6724	Decorate a resource post processor .
6725	Process a resource .
6726	Split a string into a list of strings .
6727	Load properties from a stream .
6728	Parse properties from a string .
6729	Creates a new Wro Factory instance .
6730	Persist all the fingerprints in the model
6731	Checks if the given group is a target group .
6732	Extends the classpath of the Maven plugin .
6733	Reads the model resource .
6734	Initialize a new factory from the given properties .
6735	Sets the list of model transformers .
6736	Compiles the template with the given name .
6737	Process and merge a list of resources .
6738	Process and merge resources .
6739	Run preprocessing in parallel .
6740	Apply pre processors to a resource .
6741	Decorate a resource pre processor .
6742	Persist the fallback storage .
6743	Get all the fields of an object .
6744	Rewrites the CSS URL to the given URL .
6745	This function is used to compute the location of a URL .
6746	Add a new model transformer .
6747	Serve processed bundle .
6748	Sets the aggregated folder
6749	Extract variables from a string .
6750	Extract variables and values from a css string .
6751	Replaces variables in a string with the given variables .
6752	Return a resource preprocessor decorator .
6753	Checks if the given resource type is eligible .
6754	Apply gzip operation to the response .
6755	Add a path pattern processor .
6756	Returns a processor that excludes the given patterns .
6757	Create a new resource change handler .
6758	Stores the given resource
6759	Apply a function to a resource .
6760	Returns a list of empty items
6761	Returns whether the request is minimized or not .
6762	Find imported resources .
6763	Computes the absolute URL of a resource .
6764	Create a string from a list of strings .
6765	Returns a list of aliases
6766	Creates a context object for commons .
6767	Evaluate an expression from a reader .
6768	Evaluate a JavaScript script .
6769	Prepares the cache and model updates
6770	Returns True if the request parameter is a handler request .
6771	Return the path to the handler request .
6772	Returns the name of the named group .
6773	Computes the destination folder for the given resource type .
6774	process a group
6775	Check if a resource has changed .
6776	Locate a resource within the standalone context folder .
6777	Create a new object pool .
6778	Obtain a stream from the given URI .
6779	Opens a JAR file .
6780	Extract the query path from a URI .
6781	Returns whether the group extractor is minimized .
6782	Add a new UriLocator factory to this instance .
6783	Decorator to decorate a WroModelFactory .
6784	Adds a require to the list .
6785	Process the given content .
6786	Log a summary .
6787	Process a resource .
6788	Get a read - write lock for the given key .
6789	Creates a process and returns it .
6790	Parse properties from a string .
6791	Returns a list of TaskInfo objects
6792	Returns the compilation command for the given input string .
6793	Parses a header into a dictionary
6794	Add no cache headers .
6795	Get the path info from a request .
6796	Gets the servlet path from a request .
6797	Returns True if the request URL matches the request path .
6798	Load a regular expression with the given key .
6799	Safely copy the reader to the specified writer .
6800	Create a temporary file .
6801	Cleans an image URL .
6802	Sets an attribute to the given object .
6803	Generates the data URI from the input stream .
6804	Generate data URI .
6805	Sets the context with the given configuration .
6806	Unregisters the context map .
6807	Checks if the group has changed .
6808	Called when an exception occurs .
6809	Checks if the resource has changed .
6810	Update the current hash for a group .
6811	Checks if the given resource type matches the given resource type .
6812	Creates a process .
6813	Encodes a serializable object .
6814	Process groups .
6815	Parse a group element .
6816	Creates a Group from an XML element .
6817	Parse a resource element .
6818	Get resources for a group .
6819	Log a timer .
6820	Stop a named timer .
6821	Get a named timer .
6822	Get a named timer .
6823	Prints the statistics .
6824	Wake up all workers .
6825	Update counters based on the number of jobs processed .
6826	Update the count of finished jobs .
6827	Checks if the counter is smaller than the given value .
6828	Default visit method .
6829	Instertates sub - property into taxonomy .
6830	Ensure that the axiom is loaded .
6831	Restores the current state .
6832	Checks if the state is consistent .
6833	Restores the taxonomy .
6834	Restore the instance taxonomy .
6835	Returns an Entailment inference .
6836	Invoked when the reasoner is initialized .
6837	Recursively invalidate this reasoner .
6838	Returns a collection of individuals .
6839	Returns the removed individuals .
6840	This method is not implemented .
6841	Remove an element from a list .
6842	Remove item from k and v .
6843	Find the position of the moved element in d .
6844	Return True if o is present in d .
6845	Add an element to a list .
6846	Check that the occurrence numbers are valid .
6847	Adds a class conclusion timer .
6848	Adds a rule application timer .
6849	Put a key into the list of values .
6850	Remove an entry from a list .
6851	Enlarge the map .
6852	Shrinks all keys and values .
6853	Save a configuration to disk .
6854	Print declarations in the class taxonomy .
6855	Returns all instances of the given type node
6856	Clear all buckets .
6857	Combines multiple sets .
6858	Combines a list of integers .
6859	Copy data from the input stream to output .
6860	Creates a new incompleteness monitor .
6861	Process a taxonomy .
6862	Submit an input to the buffer .
6863	Appends an ElkObject to an appender .
6864	Marks the indexed class as computed .
6865	Add a direct type - node .
6866	Verify that all expressions match start position in full chain .
6867	Returns a new set that matches the given condition .
6868	Returns a new set with the given functor .
6869	Add an element to the array .
6870	Remove an object from the array .
6871	Add a class conclusion counter .
6872	Log the memory usage .
6873	Sets the options from the reasoner configuration .
6874	Shut down the EK reasoner .
6875	Print the header .
6876	Print the given values .
6877	returns a string from a character
6878	Add a rule counter .
6879	Writes given object to Xhtml writer
6880	Get action input parameter by name .
6881	Returns a property descriptor for a given property path .
6882	Returns the required parameters
6883	Returns true if the given class is a single value .
6884	Add a rel parameter .
6885	Set the type of the link .
6886	Add href language parameter .
6887	Add a revision parameter .
6888	Add a link parameter .
6889	Returns a new Affordance with the given arguments .
6890	Returns a list of rels .
6891	Returns a list of revs .
6892	Returns True if all required variables are not required .
6893	Returns the formatted string representation of the value .
6894	Returns whether the given property is hidden .
6895	Returns True if the given property contains the given property .
6896	Returns True if the input annotation has an implicit property .
6897	Returns true if the request is required
6898	Returns the default value
6899	Returns the name of the parameter to use .
6900	Get an exposed property from the input parameter .
6901	Determine the vocab for the given mixin .
6902	Returns the query string
6903	Appends the form of an affordance .
6904	Generates an input button
6905	Appends input to parent input parameter .
6906	Add an affordance builder to this instance .
6907	Returns partial URI template components .
6908	Returns the partial URI template components .
6909	Get the first node with the given name .
6910	Returns the first node with the given rel
6911	Returns an iterator over the UberNodes
6912	Create a persistent map from an iterable .
6913	Create a persistent tree map from an iterable .
6914	Return an empty persistent tree map .
6915	Return a sorted sorted set of entries .
6916	Returns the last key in the map .
6917	Create a new source provider .
6918	Given an iterable of operations return the result .
6919	Create a new Xform with the given predicate .
6920	Apply a reduction function to a sequence of iterables .
6921	Return a Tuple2 instance from a map entry .
6922	Return the first element of a function that matches the given function f .
6923	Given a list of types register them in this list .
6924	Get the node at the given index .
6925	Return a new persistent vector with the given value .
6926	Concatenate an iterable .
6927	Creates a mutable set .
6928	Creates a mutable vector .
6929	Creates a set from a set of items .
6930	Return an immutable Vector .
6931	Returns an unmodified iterable .
6932	Return a new string with indent spaces .
6933	Return a string representation of an array .
6934	Create a lazy reference .
6935	Return the value of the producer .
6936	Insert an item into a list .
6937	Return a copy of the array with the given length .
6938	Suspends the current thread if it is assoaciated
6939	Ensures that the transaction is in the current state .
6940	Build and return a list of service components .
6941	Validate the directory .
6942	Create an inheritance link to the concrete class .
6943	Copy methods from source to destination .
6944	Copy methods to destination .
6945	Create a tree item from a local root .
6946	Remove the sbb entity with the current loader
6947	Returns whether or not notifications are enabled .
6948	Returns a set of references that are not in the resource manager
6949	Installs a service .
6950	Uninstalls a service
6951	Returns true if the given ralink name is referenced by the given resource link name
6952	Get the usage parameter sets for a given sbb ID
6953	Clears all usage parameters .
6954	Gets all profiles in a profile table
6955	Gets the activity of a profile table .
6956	Gets a profile ID for the given attribute .
6957	Display the result
6958	Unfold an array
6959	Execute an event .
6960	Bind a name to the cache .
6961	Removes a node from the cache .
6962	Lookup an object by its name .
6963	Returns a map of names to their names
6964	Find the highest priority SBB entity for the current event .
6965	Returns True if the given trace level is greater than the same level .
6966	Extracts a JarFile into a directory .
6967	Pipe the stream to the stream .
6968	Puts an object into the node .
6969	Creates a new SBBEntity if it does not exist .
6970	Detach a SbbEntity from the parent node .
6971	Returns True if no SBB entities are attached
6972	Returns a set of all SBBS entities attached to this node .
6973	Attach a timer ID to this node .
6974	Detach a timer from the attached timers node .
6975	Returns True if no timers are attached
6976	Returns the names of all timers attached to this node .
6977	Adds a name bound to the names node .
6978	Unbound a node .
6979	Returns True if there are no names bound .
6980	Returns a set of names bound to this node .
6981	Sets the value of a cmp attribute .
6982	Retrieves the value of the attribute with the given name .
6983	Returns a copy of the comparison attributes .
6984	This method returns a list of all of the registered ObjectName .
6985	Sends a usage notification .
6986	Download a remote DDU from a remote URL .
6987	Updates the deployed components
6988	Installs a deployable unit
6989	Uninstalls a deployable unit .
6990	This method is used to process an uninstalled uninstalled DUs .
6991	Returns a string describing the status of the deployed units .
6992	Checks if a log record is logged in .
6993	Get a logger for a log record .
6994	Returns a set of components that are referenced by the given component
6995	Returns a set of all sbb entities in the node .
6996	Select permissions from the current policy .
6997	Returns the code sources of the current policy .
6998	Checks if a profile exists .
6999	Remove the table profiles
7000	Update the configuration properties of the object .
7001	This function is called when the entity is running
7002	This method is called when the RLE is stopping .
7003	Activate the state of the entity
7004	Deactivate the entity
7005	Schedules the end of all activities .
7006	Removes the state from the service .
7007	Returns the resourceAdaptor interface for the given resource type
7008	Called when the service is active .
7009	Derrefer an ActivityHandle .
7010	Called when an activity is ended .
7011	Update the properties of the object .
7012	Validate config properties .
7013	Marks the object as stopped .
7014	Deactivate the object .
7015	Unconfigure the object .
7016	Unconfigures the context of the object
7017	Unset the fault tolerant context
7018	Builds a profile attribute map .
7019	Resumes the event routing task
7020	Returns a set of the handle names of the activity context .
7021	Removes all usage and usage parameters
7022	Creates a ObjectName object for a usage parameter set .
7023	Returns True if the abstract class is decorated .
7024	Fire an event .
7025	Fire an event .
7026	Invoke getProfileCMP method .
7027	Retrieves an installed usage parameter set by the given name .
7028	Returns a map of abstract methods from a class .
7029	Returns a map of interface methods from an interface class
7030	Creates the object pool for the given profile .
7031	Removes the specified object pool .
7032	Returns True if the notification source is owner of an alarm
7033	Raise an alarm
7034	Retrieves an installed usage parameter set by name .
7035	Returns the spec descriptor for this event .
7036	Returns True if the given URL can be accepted .
7037	This method is used to create a deployable unit from the given URL .
7038	Start a deployable unit .
7039	Stop a deployable unit
7040	Displays the status of the deployment manager .
7041	Executes after commit actions
7042	Executes after commit priority actions
7043	Executes the after rollback actions
7044	Executes before commit actions
7045	Executes before commit priority actions
7046	Returns a list of the tracer names that are defined in this context .
7047	Create a tracer by name .
7048	Remove replicated data
7049	Register editors .
7050	Process the usage parameters interface
7051	Returns the object pool for the given service .
7052	Create and remove the object pool for the given service .
7053	End an activity .
7054	Start an activity with the given handle .
7055	End the given activity
7056	Checks if the given event is valid .
7057	Fire an event .
7058	Generates the class for the sbb local object .
7059	Make a getter for the field .
7060	Convert a string to an object .
7061	Set the profile ID .
7062	Extract the message from the result .
7063	Returns True if the object is contained in the SBB .
7064	Return True if the collection contains all of the children .
7065	Remove all elements from the collection .
7066	Returns True if other is greater than level .
7067	Try to resolve the current level .
7068	Cleans up all classes in the pool .
7069	Add a profile call to a profile
7070	Get a profile object by its name .
7071	Passivate the given profile object to the pool .
7072	Sets the component ID from the given text .
7073	Generates the concrete class for the activity context interface .
7074	Generate a list of concrete abstract methods .
7075	Set the data attribute to the given value .
7076	Adds a name binding to the cache
7077	Removes the names bound to the activity context
7078	Removes a name binding .
7079	Attach a timer to the cache .
7080	Removes all attached timers from the cache .
7081	Attaches a SBB entity ID to the cache .
7082	Detach a sbbEntity from the cache
7083	Returns a sorted set of sbb entities .
7084	Ends the end of the activity context
7085	Add a deployable component .
7086	Returns a set of all component IDs that are contained in this DU .
7087	Check if dependencies are satisfied .
7088	Check if this unit has already been deployed .
7089	Returns all post - install actions
7090	Gets the uninstall actions
7091	Checks if a component has the referring components
7092	Closes the given profile .
7093	Creates a ObjectName for the given profile table and profile name .
7094	Changes the state of the profile to read - write
7095	Called when the profile is readable .
7096	Called when the field has been set .
7097	This method is called before the table has been set .
7098	Called when the profile has been completed .
7099	Invoke before management method invocation .
7100	Called when the management method is invoked .
7101	Deletes all files in a directory
7102	Creates a default constructor .
7103	Creates the default usage parameter getter .
7104	Creates the getter and setter methods for the sbbEntity .
7105	Creates all methods that have been fired .
7106	Creates a method to call the getSbbActivityContextInterface method .
7107	Add an expression to the list .
7108	Binds a key to the factory map .
7109	Rebind name to target
7110	Decorates the AbstractSbb class to be decorated with this class .
7111	Calls the given method with the given name and returns an object .
7112	Returns the real field name for the given field name .
7113	Sets the value of a field to the given value .
7114	Returns the value of the field with the given type
7115	set the profile context
7116	Initialize the profile with the given name .
7117	Removes the current profile context
7118	Returns the profile local object for this profile
7119	Fire the add or updated event if the profile is not yet created
7120	Returns an instance of profileCmpSlee10 wrapper
7121	Creates a CtClass class .
7122	Create the inheritance link for the given concrete class .
7123	Add an annotation to an annotation .
7124	Adds member values to an annotation .
7125	Returns the activity context interface for the given activity object
7126	Initializes the javassit class pool
7127	Sets the deployable unit .
7128	Undeployed state .
7129	Executes the given Activity handle .
7130	Checks if the given class is an interface searchable .
7131	returns a map of all methods in the given interface class
7132	Returns the input source for the given entity .
7133	Checks that a tracer name is valid .
7134	Returns a collection of profiles matching the given query .
7135	Checks the dependencies of the component
7136	Create a temporary directory for the given deployable unit .
7137	Get the entity manager from the transaction context
7138	Starts the slee container
7139	Switches the specified class to the specified class and returns the appropriate class .
7140	Calls the given proxy method with the given parameters
7141	Checks that the current transaction is in the current transaction .
7142	Converts the last access to a TTL string .
7143	Returns True if the profile class is visible .
7144	Get a profile object from the current transaction .
7145	Returns a list of all logger names matching the given regex
7146	Resets the logger levels .
7147	Clears the loggers by name
7148	Adds a logger to the server .
7149	Adds a socket handler to the server .
7150	Removes a log handler .
7151	Converts a tracer name to a log4J logger name .
7152	Synchronizes the logging level of the logger .
7153	Assigns the logging level of log4j .
7154	Reset the cache flags .
7155	Send a notification to the trace server .
7156	Checks that the tracer name is valid .
7157	Write an object to out .
7158	Reads an object from the stream .
7159	Adds a domain to the direct dependencies list
7160	Returns a list of all URL loaders
7161	Try to find a class locally .
7162	Find a resource by name .
7163	Find resources by name .
7164	Creates and registers a profile of the given profile table .
7165	Resume a transaction .
7166	Returns a set of all sbbIDs in the given component repository
7167	Returns a set of all resourceAdaptor entity bindings in the component repository
7168	Initializes slee .
7169	Shutdown all modules .
7170	Validate a state transition
7171	generate a named usage parameter getter
7172	Sets the value of the update query to the given value
7173	Build a PolyJDBC connection .
7174	Adds a value to the query
7175	Executes a transaction .
7176	Create a RegionRequest from a string
7177	Returns a 2D object representing the region .
7178	Resolve the image dimensions .
7179	Returns the type of the given annotation .
7180	Sets the viewing hints for this resource .
7181	Add viewing hints to this resource .
7182	Sets the renderings .
7183	Add a rendering to this resource .
7184	Merge multiple ImageApiProfile into one .
7185	Merge two ImageApiProfile into another .
7186	Create rotation request from string
7187	Create a size request from a string
7188	Initialize the adb connection .
7189	Get the dump of the system
7190	Test if the device is on the device brus
7191	Push the handle Popator . jar to the device .
7192	Clean the temporary file .
7193	Pull dump file to PC
7194	Get crash log from external storage .
7195	Detabify tabs
7196	Indent spaces .
7197	Return a list of HTML tokens .
7198	Convert text to markdown .
7199	Escapes special characters within a tag .
7200	Add an exception to the pool .
7201	Close all cached statements .
7202	Find the fully qualified name of the parent class .
7203	Generates a Java file for the target class .
7204	Writes a divider to the file .
7205	Append bit strings to BitVector
7206	Read data from the stream .
7207	Returns a list of JSON objects .
7208	Get a list from a key
7209	Connect to the extent reports
7210	Add a screen capture to the current step .
7211	Set system info
7212	Creates a new selector for the specified property .
7213	Creates a selector that applies the given transform to the given alias .
7214	Extracts validation annotations .
7215	Find all annotations for a given property .
7216	Find the annotations of a property .
7217	Get a property descriptor for a given class .
7218	Try to lookup the given object expression .
7219	Takes a map and returns an instance of it .
7220	Creates a new instance from a map .
7221	Creates a mapper from a value map .
7222	Converts an object to a map .
7223	Convert object to map
7224	Get the value of an annotation .
7225	Creates a composite validator for the current field .
7226	Given a list of validationMetaData objects return a list of validators .
7227	Returns a FieldValidator for the given validationMetaDataName .
7228	Apply validation metadata properties to validator .
7229	Removes the given property if it is empty .
7230	Set the time in seconds .
7231	Return the total size of all cache regions .
7232	Return the final hash for the given object .
7233	Default options .
7234	Opens the database .
7235	Put all values into the database .
7236	Removes the specified keys from the database .
7237	Search for all entries in the database .
7238	Load all data by keys .
7239	Closes the database .
7240	Returns the sum of the elements of an array .
7241	Returns the sum of the elements of an array .
7242	Calculate the variance of a sequence .
7243	Return the mean of a list .
7244	Calls an object with the specified arguments .
7245	Returns the sum of all values in the array .
7246	Return Euro UTC date string .
7247	Returns True if obj matches the given expression .
7248	Creates a Criterion that is not in a set of values .
7249	Creates a new Criteria from a list of objects .
7250	Creates a Criteria from a JSON string .
7251	Add a list of integers to the end of the list .
7252	Returns the maximum value of an array .
7253	Returns the first elements of a list .
7254	Returns the last element of a list .
7255	Returns the last item of a list .
7256	Returns the most elements of a list .
7257	Returns the first element of a list
7258	Returns the minimum value of an array .
7259	Process a collection of maps .
7260	Handle collection of maps .
7261	Creates an instance from a dictionary .
7262	Returns the value associated with the given key .
7263	Helper function to create a tooltip from the bundle .
7264	Generates a string representation of a label value .
7265	Add a hex string to the string .
7266	Process the read queue .
7267	Process the write queue .
7268	start the data store
7269	Get a string at the given index .
7270	Return the substring starting from start to start .
7271	Checks if the string is in the given string .
7272	Adds c to str
7273	Return a string representation of the given objects .
7274	Return a compact string from a string
7275	Split string into strings
7276	Split string by space .
7277	Split string by pipe
7278	Convert a list of strings to a string .
7279	Convert string to camel case
7280	Returns True if the start and end of a string is within the given range .
7281	Convert string to under - bar case .
7282	Convert count to string
7283	Sorts a list of sorts .
7284	Sort list by fields
7285	Returns the comparator for this field .
7286	Returns a list of comparators
7287	Checks if a value is in a map .
7288	Raises an exception if the expected value is not equal .
7289	Check if expected values are equal .
7290	Calculates the sum of a given start and length
7291	Round up a number to 2 .
7292	Sort a list by a list .
7293	Sort a list by a field .
7294	Sets the value of a map field .
7295	Converts an object to a list
7296	Creates the SQL to load all versions of a table .
7297	Returns a deep copy of a list
7298	Returns True if the object has a string field with the given name .
7299	Checks if class has a string field .
7300	Returns True if class has a field with the given name .
7301	Returns the first comparable name for the given class .
7302	Returns the sortable field of the object .
7303	Compare two cache entries .
7304	Compares two CacheEntry objects .
7305	Sort list .
7306	Sorts the list according to the given sortBy .
7307	Sorts the entries in a map .
7308	Sorts the values of a map .
7309	Sorts the keys in a map .
7310	Sorts a list of objects by the given sort by the given sortBy .
7311	Returns a comparator for the given field .
7312	Returns a comparator that can be used to sort objects .
7313	Get the value associated with a key .
7314	Returns the value of the given key .
7315	Increment the order .
7316	Evicts all entries in the map .
7317	Ensures that the value is initialized .
7318	Allocate a buffered buffer .
7319	Determines if the process should exit .
7320	Manage the input writer .
7321	Checks if the writer is empty .
7322	Start monitor .
7323	Start the monitor
7324	Get an object from the map .
7325	The main query plan for the given criteria
7326	Handle the group filter .
7327	Called when a time is reached .
7328	Sync the output to disk if necessary .
7329	Cleanup the output stream .
7330	Write the next buffer to the output buffer .
7331	Write the buffer out to the disk .
7332	Initialize the output stream .
7333	Store all the values in the store .
7334	Convert a key to a byte array .
7335	Read metadata for a given property .
7336	Extract validator metadata from a string .
7337	Get the meta data for a given class and property .
7338	Returns a list of validator metadata for the given property .
7339	Extract validator metadata from a list of annotations .
7340	Convert annotation data to ValidatorMetaData
7341	Split a string into multiple characters .
7342	Split string by whitespace .
7343	Split string by delimiters .
7344	Removes characters from a string .
7345	Split a string into multiple strings .
7346	Parse double string .
7347	Convert from string to integers .
7348	Parse long string .
7349	Get a property from an object .
7350	Get fields from an object .
7351	Gets the property type for a given property .
7352	Injects a property into an object .
7353	Set a property value at a given property path .
7354	Get a collection property from a collection .
7355	Get a property from an object .
7356	Get an integer value from a object .
7357	Initialize the message keys .
7358	Creates a message for the given key .
7359	Internal helper to suppress warnings .
7360	Convert a list of keys to a list
7361	Returns the current subject
7362	Parse a JSON string .
7363	Send an HTTP request to the server .
7364	Delete a database .
7365	Creates a database .
7366	Gets a list of UUIDs .
7367	Get a list of all resources in a directory .
7368	Trigger a replication operation .
7369	Returns the value of a JSON document .
7370	Sets the descending flag .
7371	Sync all design documents in the dek database .
7372	Get design document by id .
7373	Get all design documents .
7374	Get a design document from a design document .
7375	Save replicator document to database .
7376	Returns the ReplicatorDocument for the given document .
7377	Returns all Replicator documents .
7378	Removes a document from the database .
7379	Finds an instance by id .
7380	Returns a list of documents matching the given jsonQuery .
7381	Returns True if the document contains the given id .
7382	Bulk documents .
7383	Uploads an object to the specified URI .
7384	Sends an HTTP PUT request to the specified URI .
7385	Perform an HTTP POST request .
7386	Executes a DELETE request .
7387	Validate response .
7388	Sets the HTTP entity for the given request .
7389	Adds an attachment to a dictionary .
7390	Get changes .
7391	Read the next row from the stream .
7392	Converts the money to a string .
7393	Shutdown all locks .
7394	Writes data to the output stream .
7395	Adds tags to a metric .
7396	Creates temporary tables for the current hour .
7397	Get the project ID for the given namespace .
7398	Check if the request is a query .
7399	Send authentication request .
7400	Get the verb for the request .
7401	Generates an object that can be used to access a resource .
7402	Called when a request result is received .
7403	Called when the client request failed .
7404	Initialize the session .
7405	Returns all scheduled jobs .
7406	Converts a set of buckets into a list of buckets .
7407	End an exchange .
7408	Get all tokens from a bucket .
7409	Create a new bucket from a given time range .
7410	Send a message to the producer .
7411	send a message to the producer
7412	Send a message to the producer .
7413	Perform a scan on the cursor .
7414	Sets the value for the given property .
7415	Add a file to the archive .
7416	Replace the given text with the given text .
7417	Build the import configuration .
7418	Generate metrics for given component .
7419	Fetches content by id .
7420	Gets the download content for an order item .
7421	Upload an export transformation to a ZIP file .
7422	Generate a file generation .
7423	Create a new directory in a directory .
7424	Add the end of the object .
7425	Register a modelAdaptor to a group .
7426	Registers an attribute renderer .
7427	Creates a new ST template
7428	Add a domain to the assembler .
7429	Sets the value of a property .
7430	Add a child object to a collection .
7431	Creates a new file from a directory .
7432	Copy data from stream to out .
7433	Parses the given file .
7434	Parse an XML document .
7435	Return an iterator over the elements in the given parent .
7436	Stream of child nodes in a given parent .
7437	Get first child element of parent .
7438	Return a stream of named elements in the given parent .
7439	Validate an XML stream .
7440	Entry point for static files .
7441	Creates a builder from the given content .
7442	Create a ContentBuilder from a resource .
7443	Process an entry from a ZIP file .
7444	Encode a string in ASCII characters
7445	set the signature
7446	Remove whitespace from a list .
7447	Sign the request
7448	Sets the data to the given objectKey .
7449	Complete a multipart upload request .
7450	Sets the favorite notifications .
7451	Adds an entry to the notification database
7452	Check if there is expired .
7453	Get a notification by id .
7454	Gets addreses for a notification .
7455	Get addres see by id
7456	List events by a notification
7457	Get an event by event ID .
7458	Returns the URL for a single notification .
7459	Get an entry by ID .
7460	Creates an authentication token .
7461	Returns the number of notifications .
7462	Add new categories to the notification categories
7463	Fetches a notification for the current user .
7464	Creates a NotificationResponse with an error
7465	Map a notification response to a NotificationEntity .
7466	Map a notification entry to a NotificationEntry .
7467	Attach the available actions to the notification entry
7468	Normalizes a link into a URL .
7469	Returns the notification category .
7470	Get the notification source from the preferences preferences .
7471	Removes the specified notification from the request .
7472	Reads a notification response from a file .
7473	Get the student s id from the request .
7474	Extracts the user id from the response .
7475	Invokes the hide action .
7476	Returns a map of attributes to their values .
7477	Normalize a GeoTuple3D .
7478	Checks if boxA is contained within boxB .
7479	Finds the closest point in a point
7480	Returns the double sign of a point .
7481	Set R and T
7482	Set 3D rotation matrix .
7483	Convert a rectangle to a rectangle .
7484	Convert a 2D polygon to Quadrilateral .
7485	Set the bounding box to a rectangle .
7486	Computes the bounding box of a polygon .
7487	Return the center of a quadrilateral .
7488	Computes the average of each vertex in the input polygon .
7489	Compute the convex hull of a list of points .
7490	removes all vertices in a polygon that are parallel
7491	Calculate the average of the closest point in a polygon .
7492	Computes the area between two polygons .
7493	Returns True if the given point is inside the quad .
7494	Tests if a triangle contains a triangle .
7495	Computes the intersection between two lines
7496	Computes the intersection between two line segments
7497	Compute the intersection between two lines .
7498	Calculates the intersection between two line segments
7499	Computes the intersection between two Polygons .
7500	Checks if the ellipse contains an ellipse .
7501	Returns the distance between two rectangles .
7502	Get a double value from a matrix .
7503	Convert a rotation matrix to a Quaternion .
7504	Rotate X by angle .
7505	Set the rotation matrix of X
7506	RotY matrix
7507	Quaternion rotation matrix .
7508	Set the rotation matrix to the rotation matrix
7509	Converts an Euler type to a rotation matrix .
7510	Return rotation matrix about axis .
7511	Set the slope to the slope .
7512	Transform a rotation matrix to twist coordinates .
7513	Set the transform matrices .
7514	Interpolates the rotation matrix
7515	Computes the SVD of a list of points .
7516	Solve a set of points on a plane .
7517	Returns the length of a side .
7518	Checks if a point is inside this point .
7519	Convert conic general matrix to another .
7520	Convert to a DMatrix3x3 .
7521	Convert conic general data to a Parabola general format .
7522	Convert from Parabola general data .
7523	Divides two GeoTuple3D values .
7524	Convert GeoTuple3D matrix to matrix
7525	Convert to GeoTuple3D .
7526	Set the parameter vector to the unit axis .
7527	Distance between two angles
7528	Returns True if a plane intersects a plane .
7529	Test if a plane is inside a plane .
7530	Checks if a line is within a sphere .
7531	Interpolates two Se2 .
7532	Extract a quaternion from a matrix
7533	Process a set of points into a polygon .
7534	Set the identity matrix to no motion
7535	Convert a Se3D matrix into homogeneous matrices .
7536	Convert se to homogeneous matrix
7537	Create a new 3x3x3 . Vector3 .
7538	Checks if two matrices are identical
7539	Convert lat lon and lon to vector
7540	Creates a circle between two points
7541	Calculates the squared distance between two points .
7542	Find the closest point between two lines .
7543	Returns the closest point to a point in a line .
7544	Finds the closest point to a plane
7545	Finds the closest point in a line segment
7546	Finds the closest point in a triangle .
7547	Transform a Point2D to a new one .
7548	Transform two points into points .
7549	Check if quad is equal to tolerance
7550	Calculate the acute angle between two lines .
7551	Convert a LinePolar2D object to a new one .
7552	Convert one line polar to a new one .
7553	Convert a LineSegment2D to a new one .
7554	Convert a LineGeneral2D object to a new one .
7555	Convert a LineGeneral2D to a new one .
7556	Convert a point to a new LineParametric_f64 .
7557	Convert a LinePolar2D object to a new one .
7558	Convert a LineGeneral2D to a new one .
7559	Convert a LineGeneral2D to a new one .
7560	Convert a plane normal .
7561	Convert a plane normal vector to a plane normal object .
7562	Convert a plane normal to a plane normal matrix .
7563	2D point2D projection
7564	Transform a plane to a plane .
7565	Check if t is identical .
7566	Returns a copy of the data
7567	Returns the squared vector .
7568	Computes the T of a point on a line .
7569	Returns True if all elements are uncountable .
7570	Returns True if parabola_F64 is equivalent .
7571	Returns the center of the center of a point .
7572	Calculate the acute angle between two segments .
7573	Checks if a point is infinite .
7574	Randomly generate a list of points .
7575	Convert a Point4D to a Point3D .
7576	Subtract two points .
7577	Check if two arrays are identical .
7578	Set the length of a rectangle .
7579	Convert an ellipse quadratic matrix to a new one .
7580	Compute a point2D from an ellipse .
7581	Computes the angle between two ellipse points .
7582	Compute the tangent vector from an ellipse .
7583	Selects the tangent line between two points .
7584	Get the corner at the given index .
7585	Compute the distance between two lines .
7586	Compute the distance between two points .
7587	Compute the distance between two line segments .
7588	Returns the distance between a plane and a point .
7589	Returns the distance between a cylinder .
7590	Distance between two line segments .
7591	Calculates the distance between two lines
7592	Squared distance between two Quadrilateral points .
7593	Compute the distance between two Quadrilateral points .
7594	Squared distance between two Polygon objects
7595	Computes the minimum distance between a polygon and a point .
7596	Returns the distance origin of a line .
7597	Compute the distance between two ellipse points .
7598	Compute the distance between two ellipse .
7599	Add a transform to the path .
7600	Finds the closest point in a line segment
7601	Returns the closest point to a point .
7602	Process polynomial curve data .
7603	Create a new Vector3D .
7604	Computes the perpendicular canonical representation of a 3D vector .
7605	Checks if two vectors are identical
7606	Normalize a Vector3D .
7607	Create a matrix from a vector 3D matrix .
7608	Convert matrix to Vector3D .
7609	Return the distance between two points .
7610	Set the ellipse to be rotated .
7611	Normalizes w and z components .
7612	Calculates the distance between two points
7613	Return a double quadrilateral .
7614	Computes the double precision of a polygon .
7615	Computes the mean of a set of points
7616	Sort a list of points .
7617	Compute the normal matrix of a set of points .
7618	Checks if a polygon is convex .
7619	Multiply x and z by scalar .
7620	Returns maximum absolute value .
7621	Returns the distance between two vectors .
7622	Returns the distance between two points .
7623	Generate a list of points from a plane .
7624	Randomly generates a list of points .
7625	Randomly generate a list of points .
7626	Compute the mean of a set of points .
7627	Compute the mean of a set of points .
7628	Invalidate all the credentials .
7629	Invalidate all JwtContext objects
7630	Combine multiple strings into a set .
7631	Get server features from a server .
7632	Get all config dropins from the server
7633	Get server XML features .
7634	Parse include node
7635	Parses the feature manager node
7636	Download JSON files for the given productId and productVersion
7637	Get the set of open liberty features from the given files .
7638	Returns True if a list of features should be installed .
7639	Returns True if reference contains all of the strings in reference .
7640	Returns the next quarter specifier .
7641	Extracts the symbolic name from the jar
7642	Given a directory of INSTALL_MAP_PREFIX and INSTALL_MAP_PREFIX returns the first one .
7643	Returns true if two files are the same jar .
7644	Extract the version from a file .
7645	Compare two version strings .
7646	Execute the productInfo command .
7647	Returns true if the artifact is a spring - boot - uber jar
7648	Returns the ARQuillianProperty corresponding to the given key .
7649	Returns True if the file is working in this environment .
7650	Move back back to center .
7651	Compares two objects .
7652	Load integer from string
7653	This method returns a list of all Tortoza - party exceptions .
7654	Verify the image .
7655	Returns a new Puzzle with a new blank cell .
7656	Get the distance between all cells in the goal .
7657	Format and flush the given string .
7658	Format and flush the output .
7659	This function is used to show the Fishy decision .
7660	Log a variable .
7661	Return a uniform uniform number .
7662	Return a uniform uniform distribution .
7663	Calculate the Poisson distribution .
7664	Return a random integer from an array .
7665	Generate a random distribution
7666	Capitalize the first character of a word .
7667	Returns the first character of a word .
7668	Make sure path is empty
7669	converts a CriteriaJoiner to string
7670	Returns the token sentence .
7671	This method is called when the request is expired
7672	Extract token from cookie list .
7673	Register a Guice binding .
7674	Recursively gets all the permissions for a role in the given role .
7675	Adds a projection to the list
7676	Convert JobInfo to JobDetail
7677	Convert a TriggerInfo into a TriggerBuilder .
7678	Sets the count interval values for a trigger
7679	Sets the start and end time for a trigger .
7680	Send mail to queue .
7681	Write buffer to output stream .
7682	Initialize the scheduler
7683	Returns a list of all fields in a class
7684	Returns a map of field names to field names .
7685	Converts an exception into a Response
7686	Configure the authentication configuration .
7687	Generate a hash of attributes .
7688	Generates a new token
7689	Creates a MIME message .
7690	Generate a strong password for a user .
7691	Change the password of a user
7692	Gets the user with the given name .
7693	Returns a hash of the given password .
7694	Verifies that the account name is valid .
7695	Verifies that the password is correct .
7696	Construct the search model
7697	Commit the transaction .
7698	Called when an error occurs .
7699	Start the transaction .
7700	Configure a field field by name .
7701	Check if the token is authorized .
7702	Parses the given object and returns a date object .
7703	Helper method to create a response .
7704	Create a restriction with equal values .
7705	Creates a restriction with the given name and value
7706	Create a restriction that can be less than a given object .
7707	Creates a restriction that is less than or equal to a given value .
7708	Creates a restriction with a greater than value .
7709	Creates a restriction with a greater than or equal to a value .
7710	Creates a restriction with the given name and value .
7711	Creates a restriction for an incondition .
7712	Creates a new namespace manager with the given namespace and href .
7713	Create a new resource representation .
7714	Return a new resource representation .
7715	Create a new resource representation .
7716	Return a new resource representation .
7717	Check if a byte array can decode .
7718	Encodes a string into a byte array .
7719	Compare two streams .
7720	Move src to dst .
7721	Touch all files in the given files .
7722	Get the basename of a file .
7723	Add padding to the block .
7724	Get the fully qualified name of a class .
7725	Returns a set of all superclasses of the given class .
7726	Verify a password against a hash .
7727	Reads a string from the stream .
7728	Append a new byte to the buffer .
7729	Append bytes to the buffer .
7730	Returns a copy of the original array .
7731	Return a new Fraction .
7732	Return a new Fraction .
7733	Return a new Fraction .
7734	Return a new Fraction .
7735	Return the maximum value .
7736	Return the minimum value .
7737	Checks if the condition is true .
7738	Fetch location forecast data .
7739	Fetch sunrise data .
7740	Returns meteo data .
7741	Find point and period forecasts from now
7742	Find the nearest forecast for a given datetime .
7743	Fetches weather data .
7744	Creates a simple long term forecast .
7745	Returns a Meteo extras forecast
7746	Creates a Location from a string .
7747	Fetch meteo data .
7748	Returns the name of the wind symbol .
7749	Find the beaufort level of a point forecast .
7750	Create a Meteo URI from a string .
7751	Checks if the current date is on the sun
7752	Returns the forecast associated with the given datetime .
7753	Returns the best forecast for the given date range .
7754	Get meteo data .
7755	Returns meteo data .
7756	Update the database .
7757	Invoke a string method .
7758	Acquire an object from the source .
7759	Returns a ReferencedObject for the given class .
7760	Returns a reference to a referencedObject .
7761	Get a configuration from the service path .
7762	Returns True if the bootstrap configuration is enabled .
7763	Creates an iterator over the classes of the given service .
7764	Retrieve the decoder from the bootstrap configuration .
7765	Load all services from an interface .
7766	Returns the module instance for the given interface type .
7767	Acquire a stream from the source .
7768	Return the size of the source .
7769	Returns a reference to the wrapped data .
7770	Returns the component at the given index .
7771	Get a prefix from the upper index .
7772	Check if the compiler is colored .
7773	Execute a regular expression .
7774	A search loop .
7775	Subset a runtime subexpression .
7776	Dissect subexpression .
7777	Dissect a runtime expression .
7778	Clone out chain .
7779	Recursively walk tree tree .
7780	Mark a subre .
7781	Optimize a NFA .
7782	Parse a subre .
7783	Remove all outarcs from a NFA .
7784	Create a non - word edge .
7785	Reverse a word .
7786	Scannum number .
7787	Parse a bracket .
7788	Scan a plain string .
7789	Create a new LCON .
7790	Handle one character .
7791	Process a Unicode set .
7792	Return the color associated with the given codepoint .
7793	Return a new pseudo color .
7794	Return a range between two ranges .
7795	Make all possible colors in a NFA .
7796	Add a colorchain .
7797	Remove an Arc from an Arc .
7798	Dump all available colors .
7799	Start the parser .
7800	Check for prefixes .
7801	Lex the interpolated pattern .
7802	Return the color associated with the given codepoint .
7803	Initialize the state set .
7804	Returns the number of noprogress .
7805	Return a UnicodeSet of a character .
7806	Return a UnicodeSet class corresponding to the given class .
7807	Sort arcs .
7808	Return a string representation of the compiler .
7809	Create a new state .
7810	Move out out of a state .
7811	Move an arc to another state .
7812	Copyins from old to new state .
7813	Copy outouts from old to new state
7814	Drop an arc .
7815	Festate a state .
7816	Create an arc .
7817	Perform a dup traversal of a state .
7818	Set special colors for the parent .
7819	Dump a NFA
7820	Dump a state .
7821	Pretty - print arcs
7822	Dumprarcs .
7823	Print an Arc
7824	Run optimization .
7825	Analyzes the given expression .
7826	Combines two Arcs
7827	Clean up all unreachable states .
7828	Mark a state as reachable .
7829	Mark a mark as possible .
7830	Find all empties .
7831	Check if a is empty .
7832	Get rule parameters from file .
7833	Returns all rule interpreter plugins
7834	Get report plugins .
7835	Returns a RuleSelection object for the given rule set .
7836	Runs the specified command .
7837	Get the error message of an exception .
7838	Gather standard options .
7839	Gather the options from all tasks in the task factory
7840	Gather the names of all tasks in the task factory
7841	Interpret the given command line arguments .
7842	Parse command line arguments .
7843	Executes the given CLI task .
7844	Read properties from command line .
7845	Prints a help message .
7846	Get JQASSISTANT_HOME from environment variables .
7847	Creates a new plugin loader .
7848	Returns a set of all cells contained in this cell .
7849	Returns a set of all cells intersecting the given range .
7850	Returns the URI for a target .
7851	Add a route to the router .
7852	Return the number of routes .
7853	Add a route to the first route .
7854	Add a route to the router .
7855	Adds a route to the last route .
7856	Return True if any of the requestPathTokens are matched .
7857	A smart_equal method to create a restriction with a value
7858	Get the name of the store file .
7859	Compares two folders
7860	Compares two Entry objects .
7861	Compares two bookmarks .
7862	Set the last modified time of the servlet class .
7863	Returns a list of all the dependants of this tag .
7864	Find class by name .
7865	Parse Authorization header .
7866	Returns a ProtectedFunctionMapper instance
7867	Map a function to a function .
7868	Returns a protected function mapping .
7869	Returns the method associated with the given prefix and local name .
7870	Set the values of a character .
7871	returns the value of a variable
7872	Parse a tag file .
7873	Parse a file into a Node object .
7874	Parse tag file directives .
7875	Do the actual parsing of a Jasper page .
7876	Create a Jasper compiler .
7877	Returns the stream of the given resource .
7878	Calculate the last modification timestamp .
7879	Find the class loaders
7880	Checks if the given classloader is valid .
7881	Start loading the given name .
7882	Read the stream header from the stream .
7883	Paginate a list .
7884	Create a MetaKey from a string .
7885	Fills the requirements .
7886	Returns a TagFileInfo for the given short name .
7887	Parse implicit . tld file
7888	Get the checksum of a file .
7889	Returns the size of a file .
7890	Validate the channel name
7891	Seek to the specified block number .
7892	Locate the block at the given position .
7893	Get Maven versioned artifacts
7894	Update the state of an option .
7895	Calculate one byte price .
7896	Calculate long rep price .
7897	Calculate the normal match price .
7898	Raises an exception when a byte is not expected .
7899	Creates a UTFDataFormatException .
7900	Scan for all TLDs .
7901	Parse a TLD file and return a TLDInfo object .
7902	Adds a JspWrapper to the jsp .
7903	Returns the parent loader for this class .
7904	Set a bytecode .
7905	Get the bytecode birth time for a given name .
7906	Save the bytecode of a class to a file .
7907	Checks if all jsp pages are in background compiliations
7908	Initializes the class path based on the context attribute .
7909	Start the background thread .
7910	Stop the thread .
7911	The main loop .
7912	Get a channel by its name .
7913	Find and return the channel instance .
7914	Update the deploy group cache .
7915	Get list of deploy groups .
7916	Copies the contents of the input stream to out .
7917	Parse a Jasper node .
7918	Parse attributes from a Jasper page .
7919	Parse quoted string .
7920	Create an Include directive from a list of files .
7921	Parse an attribute and body .
7922	Adds an attribute to the attributes dictionary
7923	Adds a child to the tree
7924	Find all attributes .
7925	Finds all nodes in the tree
7926	Find all children of given name
7927	Returns the MavenCoordinates as a base .
7928	Find the variable alias .
7929	Set thread and streams .
7930	Unregisters the thread .
7931	Get a print stream .
7932	Writes an optional value to the writer .
7933	Write a string to a writer .
7934	Add an element to a parent .
7935	Adds an element to the first element of the given parent .
7936	Write out to out .
7937	Set the writer .
7938	Allocates a buffer to be allocated .
7939	Map Jasper page to static declarations
7940	Get the parent state of a given state .
7941	Registers a new model with the given key .
7942	Streams a boolean stream from the data path .
7943	Request the monitor .
7944	Checks if the authorization request is authenticated .
7945	Close the output stream .
7946	Return a Gon instance .
7947	Returns True if lz2 is encoded False otherwise .
7948	Returns the union of the provided metadata .
7949	Gets the exception from the request .
7950	Check checksum extension
7951	Close the lzma stream .
7952	Get the exception from the request .
7953	Evaluate the given expression
7954	Creates a prefix from Osgi service properties .
7955	Check if the given path is an XML file .
7956	Parse tag file directives
7957	Load and load a tag file .
7958	Removes all generated class files from the compiler .
7959	Entry point for Jasper .
7960	Set the URI root of a file .
7961	Scan all files in a given base directory .
7962	Locate the implicit URI root of a file .
7963	Returns a URLClassLoader for the system .
7964	Move to the correct position .
7965	Check if the string matches the given string .
7966	Match optional spaces .
7967	Skip until a limit is reached .
7968	Skips until an escape character is encountered .
7969	Skips until an ETag tag .
7970	Parse the next token .
7971	Pop the current file from the stack .
7972	Returns a new Coordinates with unclassified attributes .
7973	Filter a list of AspectInformation objects that match a predicate .
7974	Return a list of required factories
7975	Set the schema resource prefix .
7976	Set the DTD resource prefix .
7977	Encodes a prefix to UTF - 8 .
7978	Converts the given node into a tree .
7979	Merge the errors of a BindingResult .
7980	Initialize the Binder .
7981	Scans the channel aspects and returns a map of Channel aspects
7982	Unqualify path .
7983	Invoke the tag plugin .
7984	Get a byte array from the cache .
7985	Get an array of integers .
7986	Convert artifacts to AetherResult
7987	Returns the stream of the given resource .
7988	Validate the page .
7989	Push a stream into the include stack .
7990	Get the encoding of a Jasper file .
7991	Scan for XML declarations .
7992	Report a Jasper error .
7993	Returns the full path of a resource
7994	Returns a URL for the given path .
7995	Returns an open stream for the given path .
7996	Returns a set of all files in the given path
7997	Log message and exception .
7998	Convenience method to add a filter .
7999	Calculate the size of the size of dict .
8000	Get memory usage .
8001	Set the preset dictionary to write to disk .
8002	Move the open window .
8003	Fill in the dictionary with the specified length .
8004	Process pending bytes .
8005	Get the length of a given distance from the read buffer .
8006	Get the length of a match .
8007	Returns True if the matches the given matches False otherwise .
8008	Return the number of bytes required to flushing .
8009	Cleans up the buffer .
8010	Flushes the buffer .
8011	Clear the buffer .
8012	Flush the output buffer .
8013	Close the response .
8014	Write a string to the buffer .
8015	Allocate a char buffer .
8016	Create a JasperError and return a JasperException
8017	Make a list of keys from the MetaKey
8018	Generate the Java class .
8019	Compile the JSP page .
8020	Removes all generated files .
8021	Initializes the Java compiler
8022	Returns True if the path is in the system jar
8023	Quote a single character .
8024	Generates declarations for the page directive .
8025	Create a list of tag handlers for a custom tag .
8026	Generate XML prolog .
8027	Generate common postamble .
8028	Generate a postamble code .
8029	Static method that generates the XML page .
8030	Generate the attributes for a tag .
8031	Read properties from an XML stream .
8032	Exports a Channel to a ZIP file .
8033	Validate the xml view
8034	Get a tag handler .
8035	Parse an expression .
8036	Select two property groups .
8037	Returns True if the given URI is a Jsp page .
8038	Print a comment .
8039	prints a string in indent
8040	Print the given string with the given indentation .
8041	Print a multi - line string to the writer .
8042	Get expression from XML .
8043	Check that the scope is valid .
8044	Escapes XML characters .
8045	validate expressions
8046	Get the class name of a tag handler .
8047	Make a valid Java package name .
8048	Split a path by pat .
8049	Make a valid Java identifier .
8050	Manages a single character .
8051	Check if a key is a Java keyword .
8052	Adds a property to the map
8053	Return the modifier string .
8054	Return a set of all the metadata for the given metadata .
8055	Run all users in the database .
8056	Get the base name of a path .
8057	Store a value in the metadata cache .
8058	Load the metadata stored in the database .
8059	Converts an AggregatedPayload into a MetricCollection
8060	Resolve a number .
8061	Write a string to a CodedOutputStream .
8062	Get the TTL of the tenant
8063	Create the prepared statements for the metrics_locator .
8064	Track delayed metrics for a tenant
8065	Track delayed metrics for a tenant .
8066	Reads a double or long value from the varint .
8067	Serializes a double or long to a varint .
8068	Returns a map of all properties .
8069	Creates a container in the storage .
8070	Schedule eligible slots .
8071	Clears state from running slots .
8072	Add a listener to an event .
8073	Add a callback to the emitter .
8074	Remove an event from the queue .
8075	Call all registered callbacks .
8076	Returns a list of listeners for the given event .
8077	Get remote name .
8078	Append a rollup to the output stream .
8079	Parse a timestamp from a file .
8080	Start the server .
8081	Returns the appropriate rollup class based on the source granularity .
8082	Creates a new IOContainer from the configuration .
8083	Adds a TTL value to the table .
8084	Compute maximum length of headers and outputs .
8085	Format GAP header .
8086	Format a list of output formats .
8087	Add metrics to the registry
8088	Sets the name of the thread pool .
8089	Adds the given metric index to the list of documents .
8090	Returns a set of all metric names that have the total count of children .
8091	Get a list of tokens
8092	Puts multiple statements into the database .
8093	Creates a new granularity from a set of points .
8094	Create a new granularity from a set of points .
8095	Set the current time to the given time .
8096	Returns set of unique hosts
8097	Return the maximum number of connections per host .
8098	Returns an iterator over all of the metric family .
8099	Insert metrics into the database .
8100	Write metrics to Cassandra writer .
8101	Returns a set of locators that can be used in the current context .
8102	Get the metric names from Elasticsearch .
8103	Returns a regex that matches the given query .
8104	Start the uploader thread .
8105	Stop the uploader thread .
8106	Checks if a Locator is currently in the batch layer
8107	Checks if a Locator is currently in the discovery layer .
8108	Returns True if the token discovery layer is present in the token discovery layer .
8109	Returns True if the slot is delayed or not .
8110	Stores the locator for the slot at the current slot
8111	Given a range and a range map it to it .
8112	Return an iterator over the ranges of the given granularity .
8113	Insert the given metrics into the keyspace .
8114	Insert metrics into a column .
8115	Returns whether the metric is delayed .
8116	Returns the bound statement for the metric if it is delayed .
8117	Get the metadata for the given locator .
8118	Returns the serializer for the given type
8119	Check if the Content - Type header is valid .
8120	Check if the Accept header is valid .
8121	Insert discovery into Elasticsearch .
8122	Returns True if all metrics are present .
8123	Check for unexpected errors
8124	Create a new Extractor instance .
8125	Returns True if the operating system matches the OS name prefix and version prefix .
8126	Start the RabbitMQ process .
8127	Stop the RabbitMQ process .
8128	Returns default PnSignalingParams .
8129	Add ice servers to the peer .
8130	Adds ice servers to the peer
8131	Send a JSON message to the PnRTC client .
8132	Send a message to all peers .
8133	Gets the weitereadse
8134	Gets the list of user defined fields
8135	Gets the list of UserDefinedField
8136	Corresponds to IdFelder
8137	Get the list of multimedia_anhang
8138	Corresponds to IDD
8139	Sets the status of the driver .
8140	Gets the ID of the status .
8141	Gets the generated importmodus
8142	Get the generated Adressdruck .
8143	Get the Waehrung type .
8144	Get the generated Bodag .
8145	Sets the region .
8146	Sets the area .
8147	Sets the address .
8148	Sets the description .
8149	Sets the generated RentCollectionPeriod .
8150	Sets the generated furnished date .
8151	Sets the phone1 .
8152	Sets the phone .
8153	Sets the contact name .
8154	Sets the phone information .
8155	Sets the main email .
8156	Sets the value of the email .
8157	Sets the external id of this driver .
8158	Sets the agentId .
8159	Sets the generated Epart .
8160	Set the Jahrgang value .
8161	Sets the generated Gebaeudeart
8162	Sets the bueroTyp
8163	Checks if the value is numeric .
8164	Sets the Gebiete value .
8165	Sets the gruppe
8166	Sets the agent .
8167	Get the generated property .
8168	Sets the stand value .
8169	Gets the list of user defined extensions
8170	Sets the generated Zeiteheit .
8171	Get the list of zimmer
8172	Return the list of Haus instances
8173	Get the list of bueroPraxen
8174	Get the list of gastgewerbe
8175	Return the list of LandUnd
8176	Return the list of Sonstige
8177	Return the list of zinshausRendite objects
8178	Returns the list of terrain
8179	Sets the UMFANG value .
8180	Sets the Wohnung type .
8181	Returns the ISO2 code for a given country
8182	Get country from ISO3 code
8183	Returns the ISO3 code for a given country
8184	Get country from ISO2 code
8185	Returns the display name of a country
8186	Translate country name from country to language
8187	Get the list of anbieter
8188	Sets the category .
8189	Returns the PDF
8190	Sets the generated .
8191	Sets the generated data .
8192	Sets the generated Pacht value .
8193	Downgrade the document to previous version .
8194	Upgrades the document from previous version .
8195	Get the generated content .
8196	Returns the names of all fields
8197	Sets the generated blick .
8198	Sets the generated Pauschalmiete value .
8199	Sets the Monatsmiete value .
8200	Get the generated Parkplatz
8201	Sets the lastenauzage
8202	Sets the generated Zustand art .
8203	Return the list of generated Bewertung . Feld objects .
8204	Handles a validation event .
8205	Dump the record to writer writer
8206	Gets the value at the given position .
8207	Return a list of strings
8208	Sets the value at the given position
8209	Sets the type of check .
8210	Sets the generated haustyp
8211	Get the list of energiepass
8212	Sets the generated Keller .
8213	Sets the generated grundst type .
8214	Sets the generated GeschlAttr .
8215	Sets the generated HallenLagerType .
8216	Returns a boolean indicating whether the Wiederholst Terminator is generated .
8217	Returns a boolean indicating whether the teilgs can be generated .
8218	Upgrades the document from previous version .
8219	Get the list of Bevorzugt
8220	Get the list of Wunsch .
8221	Sets the art .
8222	Sets the modus value .
8223	Get the list of emails .
8224	Get the list of tels .
8225	Sets the generated handel type .
8226	Downgrade the document to previous version .
8227	Corresponds to IdFeld1
8228	Sets the generated api_feld2
8229	Corresponds to IdFeld3
8230	Get the row of results .
8231	Corresponds to DistanzySport
8232	Get the list of anhang
8233	Get a Garagen Kategorie
8234	Gets the generated objektza
8235	Gets the generated HausKategorie
8236	Gets the Ausstatgs qualitet .
8237	Return the list of vermarktungs
8238	Get the list of Interessents .
8239	Sets the Wert value .
8240	Corresponds to IDD Field ackerland
8241	Sets the generated Bauerwartungsland
8242	Sets the generated bootsstaende
8243	Sets the buero value
8244	Sets the camping value .
8245	Sets the Doppelhaus value .
8246	Sets the Einfamilhaus attribute
8247	Sets the generated Einzeldel gross
8248	Sets the generated Einhandel klein
8249	Sets the Garagen value .
8250	Sets the generated Garten
8251	Sets the generated gastronomie
8252	Sets the generated Gewerbe
8253	Sets the Hotel property .
8254	Sets the industrie
8255	Sets the keine bebauung
8256	Sets the generated kleingewerbe
8257	Sets the Lager flag
8258	Sets the mehrfamilhaus attribute
8259	Sets the obstpfung
8260	Sets the generated Parkhaus value .
8261	Sets the generated produktion
8262	Sets the reihenhaus value
8263	Sets the generated stellplaetze
8264	Sets the villa value .
8265	Sets the Wald attribute .
8266	Sets the anbieter value .
8267	Get the list of Wohnung
8268	Get the list of grundstueck
8269	Get the list of Einzelhandel
8270	Get the list of HallenLagerProd instances
8271	Get the list of Parken
8272	Return the list of freizeitmobilies
8273	Get the list of objektartZars
8274	Get the list of stellplatzart
8275	Sets the maximum Dauer value .
8276	Gets the feature list .
8277	Sets the generated Zimmertyp
8278	Upgrades all energiepass elements from the previous version .
8279	Sets the keine angle
8280	Sets the erwerme attribute .
8281	Sets the solarheizung
8282	Sets the generated pellezung
8283	Sets the gas
8284	Sets the OEL value .
8285	Sets the generated Fernwaerme
8286	Sets the generated strom
8287	Sets the generated kohle
8288	Generate a random string .
8289	Generates a random string of given length .
8290	Generate a random numeric string .
8291	Gets the generated WohnGategories
8292	Sets the generated WIS driver .
8293	Sets the generated objekte
8294	Get the list of Feed objects .
8295	Sets the generated MoEB .
8296	Return the list of serviceleistun
8297	Sets the subistrative area
8298	Sets the city .
8299	Sets the generated locality .
8300	Downgrade the document to previous version .
8301	Upgrades the document from the previous version of the document .
8302	Sets the land type .
8303	Get the generated field .
8304	Upgrades the document from previous version .
8305	Get the ad list .
8306	Sets the gengew type .
8307	Sets the generated Platzart .
8308	Corresponds to IDD Field Datenkens
8309	Gets the klimaanlanlage
8310	Gets the list of images .
8311	Sets the price type .
8312	Sets the new development availability .
8313	Sets the directions attribute .
8314	Sets the co2 rating .
8315	Sets the energy .
8316	Sets the viewing details .
8317	Sets the property status .
8318	Sets the adictures attribute .
8319	Sets the generated Bebaubar attribute .
8320	Upgrades the document from previous version .
8321	Sets the ParkenType
8322	Sets the generated alter attribute .
8323	Sets the generated freizeit .
8324	Sets the telefonart date .
8325	Sets the email art .
8326	Sets the Overseas sales
8327	Sets the OverseasRental value .
8328	Create an XML node for a user - defined simplefield .
8329	Return the list of Fehler objects
8330	Sets the generated Erbpach value .
8331	Get the list of STPSonstige
8332	Get the value list
8333	Sets the minimum Dauer .
8334	Sets the generated zins .
8335	Get the list of photo .
8336	Sets the feed metadata .
8337	Sets the project data .
8338	Sets the Feed s properties .
8339	Downgrade the document to previous version .
8340	Upgrades the given document from the previous version .
8341	Get the list of immobilie
8342	Get the list of objekt
8343	Get the list of fehlerliste
8344	Gets the status .
8345	Sets the generated Sonstige type .
8346	Sets the distanz value .
8347	Get the list of distanzen
8348	Get the list of distanzen sport
8349	Check if an exception is compatible with the given exceptions .
8350	Bind namespace URI to namespace URI .
8351	Binds a namespace URI to a namespace URI .
8352	Removes a binding .
8353	Check if the content has an opening tag .
8354	Consume comments from a string .
8355	Consume a comment from a string .
8356	Return the index of a comment in a line .
8357	Initialize logging configuration .
8358	Start a namespace mapping .
8359	Add an iterator to a composite iterator .
8360	Add an option to the list .
8361	Add a string option .
8362	Add an integer option .
8363	Add a long option .
8364	Adds a double option .
8365	Add a boolean option .
8366	Parse command - line arguments .
8367	Returns an instance of the given class .
8368	Called when the concurrency limit is reached .
8369	Sets the target object .
8370	Sets up the class and target class .
8371	Finds a matching method that matches the target class .
8372	Convert integer i to an unsigned string .
8373	Serializes an object into a byte string .
8374	Deserialize object from bytes .
8375	Searches for a child element by its name .
8376	Get the text value of a child element by name .
8377	Returns the children of an element .
8378	Determines if the node matches the desired name .
8379	Determines if a node matches the desired names .
8380	Sets the size of a string to the given length
8381	Add a release listener to the handle queue .
8382	Add a reference to the tracked entries .
8383	Keeps the thread alive .
8384	This method calculates the phone number from a mobile phone number
8385	Start a prefix mapping
8386	End prefix mapping .
8387	Add a callback to the future .
8388	Parses the jar jar files and returns the root node
8389	Get text color
8390	Set the values .
8391	Get color based on position and position .
8392	Set text paint size
8393	Return x if x is in bounds
8394	Get the intro from the remote library
8395	Returns a list of keyword names to stop remote server .
8396	Get keyword arguments for the given keyword .
8397	Returns the documentation for a keyword .
8398	Entry point for the remote server .
8399	Stop the robots remote server
8400	Start the robots remote server
8401	Converts a JSON file into a dictionary .
8402	Convert json file to JSON format .
8403	Converts an input stream into a JSON object .
8404	Convert properties to JSON
8405	Converts a dictionary to a JSON object .
8406	Converts a dictionary of values into a JSON string .
8407	Converts a dictionary of values to a map .
8408	Converts properties to a JSON object .
8409	Get the radius of the shadow .
8410	Creates an OSPSP fetcher .
8411	Find an intermediate certificate .
8412	Execute Pegdown .
8413	Preprocess markdown files .
8414	Substitute variables in a template .
8415	Get title from a list of strings .
8416	Adds the title to the HTML file
8417	Replace variables with variables .
8418	Update relative paths in HTML .
8419	Copy files from one directory to another .
8420	Checks if the path is valid .
8421	Helper function to wrap the slider content in a layout
8422	 fade up up .
8423	Starts a fade down .
8424	Calculates the percentage of the given width
8425	Make sure all views overlap with the specified width .
8426	Creates a launch intent
8427	Launches the specified activity .
8428	Gets a list oftodos .
8429	Gets a list of factsheets .
8430	Download file from response .
8431	Build a client client .
8432	Creates access control entity .
8433	Updates the data model .
8434	Creates a full export .
8435	Creates a list of exports .
8436	Sets the client s token provider host to use .
8437	Sets the client credentials .
8438	Uploads a GraphQL result to a file .
8439	Gets a list of bookmarks .
8440	Add permissions to a node .
8441	Write the permissions of a node .
8442	Add one or more rulesets to the graph .
8443	Close the client .
8444	Executes a SPARQL query .
8445	Creates a MarkLogic dataset graph .
8446	Limits the number of threads per process
8447	This operation is used to resize a geometry
8448	Sets the command to rotate the specified degrees .
8449	Set the gravity value
8450	Remove profiles from the command .
8451	Set font size and color .
8452	Add image to image .
8453	Add an image file to the command .
8454	Parse arguments from a Java object .
8455	Print usage information about a Java object .
8456	Extracts the unit from a time string .
8457	Internal method to parse a Java object
8458	Execute a Slide .
8459	Execute a Slide file .
8460	Interpret a PPTX file .
8461	Sort a list by size
8462	Render a template .
8463	Gets the xml rel file for a slide .
8464	Checks if an event is within the range of the screen
8465	Finds all elements that overlap the given element .
8466	Execute an outbound operation .
8467	Execute an outbound message .
8468	Find a file by name .
8469	Returns a temporary directory .
8470	Creates a new log value .
8471	Log a trace .
8472	Log an event .
8473	Log a debug message .
8474	Logs a debug message .
8475	Log an INFO message .
8476	Log an INFO message .
8477	Log an INFO message .
8478	Log a warning .
8479	Log a warning .
8480	Log an error .
8481	Logs an error .
8482	Adds a context to the log builder .
8483	Start Steno serialization .
8484	Writes keys and values to the JSON generator .
8485	Serializes the given ThrowableProxy to JSON generator .
8486	Return a log value .
8487	Returns the stack trace element of the given logging event .
8488	Encodes the given value to the encoder .
8489	Creates a database with the given name .
8490	Remove the mappings from the mappings .
8491	Parses the save attribute from a cell
8492	This method is used to save the data in the context of the cell controls .
8493	Refreshes a sheet row from a given context
8494	Parse the save attribute string .
8495	Gets the save attribute list from the row
8496	Get save attribute from a string .
8497	Sets the value of save objects in the hidden column .
8498	Set the save attributes for a sheet .
8499	Set save attributes for a row .
8500	Prepare context and attributes for a cell
8501	Format a double number .
8502	PutShiftAttrs into the shift map .
8503	Set the Workbook .
8504	Returns the WSDL wrapper for the current workbook .
8505	Returns the formula evaluator
8506	Calculate max column counts .
8507	Loads a web sheet from a stream .
8508	Loads a web sheet
8509	loads a work sheet by tabName
8510	Do the export
8511	This method is called when the save operation is performed
8512	This method is called when submit mode is set to True .
8513	Populates the component with the specified attributes .
8514	Returns the current sheet configuration .
8515	Read an object from the serial workbook .
8516	Returns the locale for the given component
8517	Returns a StreamedContent object for the current picture .
8518	Get the final cell helper .
8519	Returns a PicturesHelper instance .
8520	Get the validation handler .
8521	Get the chartHelper .
8522	Convert shared formulas from shared formulas .
8523	Convert ptg to PTG
8524	Convert pgs to PTG
8525	Create a single ptg .
8526	Takes a list of rows mapping and returns a list of rows .
8527	Assemble a list of rows from a mapping .
8528	Convert a reference point into a reference row
8529	Build a dynamic row for a RefPtg base
8530	Build dynamic row for an AreaPtg base
8531	Get the background color for the plot
8532	Returns the XColor for the given shapePr .
8533	Returns the XColor for the given color fill
8534	Returns the XColor corresponding to the scheme .
8535	Converts RGB color to XSFColor
8536	Get XColor with automatic fill .
8537	Convert xssf color to color
8538	Get triplet from XssfColor
8539	Gets the background color for the given cell
8540	Returns the component name of the given component .
8541	Populate the attributes of the component with default controlMap
8542	Find the attributes of an object by name .
8543	Sets the property of an object
8544	Gets the value of a property from an object .
8545	Setup control attributes
8546	Find cell validation attributes .
8547	Sets up the cell charts if needed .
8548	Sets the charts for the given cell
8549	Sets the picture for the given cell
8550	Initializes the chart map
8551	Returns the title of a pie chart
8552	Sets the style of a series
8553	Creates a 3D chart .
8554	Setup bar style
8555	Initialise chart map
8556	Get chart s id from parent chart name
8557	Initializes anchors map
8558	Generate a chart for a single chart .
8559	Converts a collection expression to a Collection object .
8560	Returns the full name of a row .
8561	Rebuild the upper level formula from the config build
8562	Sets up the upper level form for the given cell .
8563	Build cell formula for shifted rows .
8564	Get the rows mapping by name .
8565	Change index number in shiftMap .
8566	Change the final length of a full name .
8567	Change index number in hidden column in hidden column .
8568	Sets the full name in the hidden column .
8569	Returns the original row number in hidden column
8570	Sets row number in hidden column
8571	Find parent rows mappings from shift map .
8572	Returns a list of rows mapped to the given name .
8573	Find an item in a collection by index .
8574	Build a new ConfigRange from a source range .
8575	Returns True if the config range is a static row
8576	Returns true if the row is a static row ref
8577	helper function to replace an expression with a cell value
8578	Returns a map of cell ranges from the merged region .
8579	Returns a list of cells that are skipped by sheet1 .
8580	Adds a skip cell to the skipList
8581	Recursively build the cell comment from a sheet .
8582	Build cell comment from alias list
8583	Returns a map of sheets to sheets
8584	Returns a SheetConfiguration object for the given sheet .
8585	Build a form command from a sheet configuration
8586	Verifies that the last cell in the row is the last cell .
8587	Build sheet .
8588	Checks if the last row is in the configuration .
8589	Build command command list from comments .
8590	Sets the parent command for a specific command
8591	Returns True if all commands in the command list have the same command
8592	Matches the specified command to the config command .
8593	Copies the sheet to a copy of the sheet
8594	Build command list from cell
8595	Process a method line
8596	Process a command line .
8597	Move the comment from a cell to a map .
8598	Creates a ConfigCommand instance for the specified command .
8599	Builds attribute map from command line .
8600	Get sheet configuration from config .
8601	Sets the footer of the sheet
8602	Sets the body of the sheet
8603	Sets the header of the sheet
8604	Delete a row from the sheet .
8605	Removes all ranges from the shiftMap .
8606	Returns a list of names that are removed from the table .
8607	Returns a Command object from its parts .
8608	Adds empty objects to the list .
8609	Suppress warnings about the last command .
8610	Takes a list of varparts and returns the index of the collection .
8611	Index all commands in a config range .
8612	Check if the row is allowed to add .
8613	Insert each template in the source config range into the config .
8614	Evaluates the value of the cell with the given string value
8615	Evaluate cell formula .
8616	Returns True if the string is a user formulas .
8617	Create and save cell comment .
8618	evals a boolean expression
8619	Removes all rows in a sheet .
8620	Removes a single row from a sheet .
8621	Removes cached cell from sheet .
8622	Removes all rows in the body .
8623	Loads the picture from the page
8624	Tries to load a chart from the current page
8625	Assemble a value into a string
8626	Returns the value of the cell with the given formula evaluator
8627	Returns the value of the cell without formatting it .
8628	Returns the string value of the cell with the given type
8629	Gets the string value of a cell
8630	Sets the value of the cell
8631	Sets the value of a cell
8632	Sets the value of a cell .
8633	Sets the value of a cell as a date .
8634	Sets the value of the cell
8635	Copies the contents of one row to another .
8636	Copies a single row from one sheet to another .
8637	Copy a cell from one cell to another .
8638	Copies the value of the source cell to the new cell
8639	Copies the style of the source cell to the destsheet .
8640	Clone the source cell to a new cell
8641	Creates a client anchor for a new cell .
8642	Create and insert a comment on the cell
8643	Match comment settings .
8644	Returns the VML Drawing object associated with the given cell .
8645	Get the CTShape from the source vml .
8646	Get cell style from source cell .
8647	Converts a POI cell to a CellRangeMap
8648	Get the row and column indices from the component attributes .
8649	Get the initial rows from the sheet configuration
8650	Get FacesRow from body row
8651	Get the cell from the body row
8652	Get a single cell from a sheet .
8653	Returns the Skey for a POI cell
8654	Returns a TieCell or creates a new TieCell if it does not exist .
8655	Returns the current context name
8656	Evaluate the expression .
8657	Evaluates the expression and returns the result .
8658	Write the row number to a file - like object .
8659	Remove a row from a row .
8660	Merge the rows mapping .
8661	Recover all the serial rows in this sheet .
8662	Returns the chart type for this chart
8663	Returns a basic strokes .
8664	Initializes the chart data from an XSSF chart
8665	Sets up chart data
8666	Initializes the chart anchors map .
8667	Initialize an XSSFS anchor map
8668	Get the chart ID associated with an anchor .
8669	Get the chart ID from the node attributes .
8670	Loops through the items collection and adds them to the config
8671	Saves the value of the given POI cell in the worksheet
8672	Recalculate all cached values
8673	Returns the Poi cell with the given row and col
8674	Returns the cell with row col and col
8675	Restore collection data from full name
8676	Get the last collect data .
8677	Check if the name of the current context should be restored .
8678	Returns a CollectionObject from the given part
8679	Shifts the row ref by the given number .
8680	Set the first row reference
8681	Set the last row and add it to the attrs
8682	Build all cells in a row
8683	Build a single cell
8684	Reads data from the serial workbook .
8685	Build the category list
8686	Build a series list
8687	Builds a chartSeries from a chart object
8688	Get a list of colors from a list of cells .
8689	Get a DDPt by index .
8690	Sets the command index map
8691	Get the picture from the workbook
8692	Load a picture from an XSSFS workbook .
8693	Add picture to a map
8694	Generate style for a picture
8695	Generate CSS style for a chart
8696	Returns the size of the anchor
8697	Returns the compiled pattern for the given alias .
8698	Returns a StreamedContent object for the current chart .
8699	Recover the cell
8700	Gets the row span of the cell
8701	Gets the font style of the cell
8702	Get the color of a cell .
8703	Gets the decoration string for the cell font .
8704	Gets the HTML style of the cell
8705	Gets the style of the cell
8706	Gets the alignment from a poi cell
8707	Gets the vertical alignment of a cell
8708	Calculates the total height of a sheet .
8709	Sets the style of the cell
8710	Returns the input type of a cell .
8711	Returns a set of paths for the given path .
8712	Gets the stream of the given path as a stream .
8713	Remove a prefix from a resource .
8714	Evaluates the input of the given type .
8715	Returns the first instance of the given bean with the given name
8716	Concatenate a list of short strings
8717	Round a float to the given number of places .
8718	Returns the tab type of the tab
8719	Returns the tab style
8720	Returns the default date pattern .
8721	Returns the decimal separator for the default locale
8722	Returns the decimal separator for the default locale
8723	Sets the tie command alias list .
8724	Builds the watch list
8725	Build the watch list for a cell
8726	Adds a row to the watch list .
8727	Check if a string is a command string .
8728	Parse widget attributes .
8729	Returns the attribute key for a cell
8730	Parse the validate attributes of a cell
8731	Finds the index of the pair between start and end
8732	Parses an attribute string into a dictionary of attributes .
8733	Parse input attributes .
8734	Parse validation attributes .
8735	Split a string into attributes .
8736	Extracts special attributes from a cell form .
8737	Process calendar attributes .
8738	Process select item attributes .
8739	Gather special attributes .
8740	parse comment to map
8741	Returns the index of the first column in the input string .
8742	Removes characters from a string .
8743	Converts a number to an Excel column name .
8744	Converts a column to an integer .
8745	Get cell by reference
8746	Convert height units to pixel
8747	Check if a string is a date .
8748	Parse a date from a string .
8749	Check if a string is numeric .
8750	Determine if a character should continue .
8751	Sets the property of an object
8752	Compares two cells .
8753	Checks if a config range is within the given range
8754	Clear hidden columns in a sheet .
8755	Delete hidden objects in row .
8756	Removes a cell from a row .
8757	Log on TieFaces .
8758	Called when the cell has changed .
8759	Check if row and col are valid
8760	Validates the value of the cell based on TieWebValidationBean
8761	This method is used to check if the value of an error is present in the worksheet .
8762	Validate all rules for a single cell
8763	Checks if the value of the cell is valid
8764	Check if the target is valid
8765	Validate the current page .
8766	Validates the current row in the current page
8767	Checks if the given row is valid
8768	Refreshes cached cells in the current page
8769	Refreshes all cached cells in a row .
8770	Sets the SUBMIT mode in the view map
8771	Check if the current tab is valid
8772	Clear the cell
8773	Load header rows
8774	Returns a list of header cells from the given range build
8775	Fills the header cells to the maximum number of columns .
8776	Get the style of a header cell
8777	Returns the width of a column
8778	Load the header row with the given tab .
8779	Calculate the width of a cell .
8780	Clear the workbook
8781	Initialize tabs
8782	Load the data from the worksheet configuration .
8783	Refreshes the data of the worksheet .
8784	Refreshes the data for the given row .
8785	Refreshes data for given row
8786	Returns the index of the tab with the given name
8787	Load and save the data sheet
8788	Prepare work shee
8789	Sets the first page of the DataTable
8790	save obj to viewMap
8791	Sets the row info
8792	Loads the body rows from the UI .
8793	Assemble a row of faces from one sheet .
8794	Refreshes a cached cell
8795	Process a refresh cell
8796	Creates the dynamic columns for the given tab .
8797	Add a repeat row
8798	Refreshes the body rows in the given sheet .
8799	set unsaved state
8800	Returns the unsaved state
8801	Returns the common constructor for the given type .
8802	Write stream to output stream .
8803	Writes a long value to the writer .
8804	Write a string to the writer .
8805	This function is used to convert traffic stats tag to hex
8806	Add a bitmap to the result .
8807	Add a file descriptor .
8808	Removes a parameter by its name .
8809	Add a header to the request .
8810	Clear the result .
8811	Starts playback .
8812	Call the stop service .
8813	Bind to the service
8814	Unbind the service
8815	Remove a listener from the streaming playback
8816	Store the image to disk if available .
8817	Transfer a stream to a stream .
8818	Convert a stream to a string .
8819	Send data to the stream .
8820	Return the number of available bytes in the stream .
8821	Close the stream .
8822	Read data from the stream .
8823	Reset the buffer .
8824	Write start boundary .
8825	Send the Content - Disposition header .
8826	Send Content - Type header .
8827	Send transfer encoding header .
8828	Send an end header .
8829	Send the end of the stream .
8830	Write parts to out .
8831	Calculate the length of the parts .
8832	Return whether the URL is a redirect URL .
8833	Send a 304 response to the server .
8834	Sets the HTTP date header
8835	Sets the date and cache headers
8836	Sets the Content - Type header for the given file .
8837	Closes the given channel .
8838	Send the attachment header .
8839	Send data to the stream .
8840	Installs the cache .
8841	Returns the current working directory .
8842	Gets a response from the cache .
8843	Returns a stream stream that closes the snapshot .
8844	Reset the bitmap .
8845	Returns a WebsockifySSLContext instance .
8846	Validate a keystore .
8847	Replace the scale type .
8848	Stop listening for locations .
8849	Get the pending intent .
8850	Disconnects a URL connection .
8851	Bind to the service
8852	Remove the service from the application service
8853	Called when the view changes .
8854	Called when the channel is open .
8855	Called when the response data is received .
8856	Called when the device is reset .
8857	Wait for the given time to complete .
8858	Sets the text or visibility of the given text .
8859	Hides soft input from the text .
8860	Show soft input
8861	Toggles the soft input of the text .
8862	Calculate the width of the pixels in a given dip .
8863	Called when an exception occurred .
8864	Clear the cache for a given URL .
8865	Populate the image from the view .
8866	Cancel image loading
8867	Creates an image consumer .
8868	Set the image and reset the image .
8869	Sets the loading image .
8870	Start an image loader task .
8871	Store an image in memcache .
8872	Release the given buffer .
8873	Called when the connection is prepared .
8874	Adds a simple parameter to the request .
8875	Try to connect to the core .
8876	Returns the MD5 of a string .
8877	Return a string for a given integer n .
8878	Return a string representing the CUBLAS status code .
8879	Check if the result is valid .
8880	Checks the result BLAS error .
8881	Adds a lexeme to the frequency .
8882	Adds an ending ID to the end frequency .
8883	Returns the estimated estimate of a word form .
8884	Print a long description .
8885	Verifies that the attribute value matches the attribute value .
8886	Convert attribute values into string .
8887	Verifies that a tag is at the given index .
8888	Cleans up kamols markup formatting .
8889	Get a list of metric data .
8890	Returns a dictionary representation of the query parameters .
8891	Returns a list of MetricData objects
8892	Parse AppInfo from json string .
8893	Returns a connection config object .
8894	Perform a SignalFx metric request .
8895	Return a generator reader .
8896	Return a GenericodeSet object .
8897	Read a ColumnSet document .
8898	Return an instance of GC10 code list .
8899	Return an instance of GC10 code list set .
8900	Read a ColumnSet document .
8901	Returns the ID of a column element .
8902	Returns the value of a row with the given column ID
8903	Returns the column with the given ID .
8904	Takes a ColumnSet and returns a list of Key IDs .
8905	Get a key from a column set by its ID .
8906	Returns True if the given column ID matches the given column ID
8907	Creates a new column .
8908	Creates a new Key instance .
8909	Sets the number of lines skipped .
8910	Adds a column to the worksheet .
8911	Create a generator that writes the GC04 code list .
8912	Create a GenericodeSetSet object .
8913	Create a column set document .
8914	Create a generator that writes the GC10 code list .
8915	Create a GenicodeSet object for the GC10 code list set .
8916	Create a column set document .
8917	A generator for generating code list document .
8918	A generator for generating code list set .
8919	Validator that returns a ColumnSet document .
8920	Validator for GC10 code lists .
8921	A generator for generating code list set .
8922	Validate that the GC10 column set document is valid .
8923	Sends the logs to the screen feed back .
8924	Set the log persister context
8925	Get the current logging level .
8926	Get a boolean from the queue .
8927	Set the maximum log store size .
8928	Prepend metadata to the message .
8929	Appends the stack trace information to a JSON object .
8930	Creates a JSON object
8931	Log the location of the current user
8932	Sets the user identity for the given user
8933	Get a byte array from a file
8934	Start location updates .
8935	Size the specified region .
8936	Calculates the size of all entries in a partition .
8937	Count the number of entries in the given region .
8938	Reads a snapshot record
8939	Print the number of time stamps to the stream .
8940	Get time values since a given index .
8941	Returns a GfStatsReader object from the given file
8942	Returns the pool for the specified server
8943	Get a pool for the given jmx .
8944	Check if a region exists on the server .
8945	Get a member from a JMX .
8946	Returns a list of all members of a member .
8947	Try to lookup the host from the resource bundle
8948	Check if data is an error and send an exception .
8949	Executes a function and returns a collection of results .
8950	Flatten an iterable into a collection .
8951	Returns a collection of return types .
8952	Create a new listener bridge for after put events .
8953	Create a new listener bridge for after delete events .
8954	Default error handler
8955	Returns the on region filter key facts
8956	Export data from region
8957	returns a set of all members of member
8958	Suppress warnings about a page
8959	Get the name of the name of the resource .
8960	Construct security client authentication properties
8961	Returns a region object for the given region name .
8962	Get a region from a client cache .
8963	Construct a comparison between two hashes .
8964	Returns True if the next index is in the given timestamp .
8965	Closes the stream .
8966	Convert Gf Stats to CSV files
8967	Entry point for GfStatsReader .
8968	Reconnect to the JMX server .
8969	Stop members on a host
8970	Shutdown a member
8971	Shuts down the system .
8972	Shuts down Redundancy zone
8973	Internal helper to store pagination results in a region
8974	Read results from a page by page criteria .
8975	Import a region
8976	Check if remote Locators and locators are valid
8977	Executes the specified region
8978	Builds the checksum map for the given region
8979	Returns a string representation of a string value .
8980	Checks if the given type is a type .
8981	Serialize object to byte string .
8982	Deserialize an object from bytes .
8983	Returns an instance of the given class .
8984	Checks if an element has an ID column .
8985	Checks that the given column element is valid .
8986	Check if element is a super type .
8987	Generate the CREATE TABLE schema .
8988	Brew Java code .
8989	Emits get_id function .
8990	Returns an observable for the given table object .
8991	Checks that the given name is equal to the given name .
8992	Returns the value of a string or defaultString if not empty
8993	Convert a string to a capitalized case .
8994	Checks if the given type is a type .
8995	Sets the query as descending .
8996	Reads the temperature of the slave .
8997	Get a string representation of a type .
8998	Prints a warning message .
8999	Prints an error message .
9000	Returns a list of available icons
9001	Get all available icons
9002	Create the layout for SLD editor
9003	Returns an HTMLFlow with the background content .
9004	Return the power of x .
9005	Set the values of the matrix .
9006	Calculates the power of x and returns it .
9007	Calculates the integer root of x .
9008	Calculates the exponent of x .
9009	Returns a Decimal with the given x and scale .
9010	This function is used to calculate the negative approximations .
9011	Convert x to arctan .
9012	Approximations of an arctan taylor .
9013	Round x to the square .
9014	Pretty print a string .
9015	Return a string representation of a timestamp .
9016	Set the limits of the rectangle .
9017	Put r into the counters .
9018	Print the progress bar .
9019	Return a new complex .
9020	Return a complex .
9021	Multiply a complex .
9022	Divide a complex .
9023	Set the matrix to 1 .
9024	Return a RowVector with the given row r .
9025	Returns a ColumnVector with the given column c .
9026	Set the values of the matrix .
9027	Return a transpose of the matrix .
9028	Return a new matrix with sum values .
9029	Computes the difference between two matrices .
9030	Return a new matrix with the product k .
9031	Multiply the matrix .
9032	Print the contents of the table .
9033	Sets the given image resource .
9034	Validate the coefficients .
9035	Compute the next position .
9036	Clears the internal state
9037	Converts a StyledLayerInfoInfo to XML .
9038	Parses a StyledLayerDescriptorInfo object and returns it .
9039	Validate a styled layer .
9040	Validates a SLD
9041	Calculate the area of a region .
9042	Set the values of the matrix
9043	Set the values of the grid .
9044	Returns the inverse matrix of the identity matrix .
9045	Return the determinant of the matrix U .
9046	Returns the sum of all values .
9047	Solves a column vector .
9048	Print the decompose matrix .
9049	Forward elimination .
9050	Forward substitution .
9051	Back substitution .
9052	Improve residuals .
9053	Convert a square matrix to 1 .
9054	Generate a random value .
9055	Implementation of the iteration procedure .
9056	Compute the next position .
9057	Check if the position is not changed .
9058	Compute the next position .
9059	Checks that the interval is valid .
9060	Add a new addend to the running sum .
9061	Return the multiplication of two integers .
9062	Raises an integer .
9063	Implementation of the iteration procedure .
9064	Returns the SLD manager .
9065	Convert a long value to a char array .
9066	Decomposes the bits and its parts .
9067	Print the value to the stream .
9068	Validates that the biased exponent is valid .
9069	Validates that the unbiased exponent is valid .
9070	Checks that the given biased exponent is valid .
9071	Validates that the unbiased exponent is valid .
9072	Create a SldGwt service asynchronously .
9073	Returns the next central point .
9074	Return the next polar value .
9075	Generate a random ratio .
9076	Return a list of boolean sieve .
9077	Return the prime factors of a given number .
9078	Implementation of the iteration procedure .
9079	Compute the next position .
9080	Raise an exception if the position is not changed .
9081	Sets the Java application .
9082	Sets the configuration from the given file .
9083	Sets the default configuration .
9084	Initialize fxml loader .
9085	Reverse geocoding request
9086	Extracts host and port from service instance metadata
9087	Get the applicable attribute definition .
9088	Evaluate the attribute with the given attribute filter .
9089	Sanitize a tag .
9090	Sets the address parameter for the geocoding request .
9091	Set the geocoding request parameters
9092	Return a set of all service names .
9093	Get a list of service instances for the given service .
9094	Get all collaboration .
9095	Return metadata metadata for decimal
9096	Change password for a user .
9097	Gets all users .
9098	Get gravatar for an email address .
9099	Get gravatar data for a user .
9100	Populates all fields in the elasticsearch JSON object .
9101	Returns ElasticSearchType for this field
9102	Create a flow step .
9103	Updates a flow step
9104	Get a flow step by id .
9105	Get a FlowStep by step param .
9106	Returns a list of all steps in the given flow .
9107	Deletes a flow step .
9108	Force delete a flow step .
9109	Method to populate the form fields from the form fields param .
9110	Closes the ABaseES connection
9111	Handle the message .
9112	Called when the connection is closed .
9113	Get the echo messages from the return value
9114	Returns a list of all personal inventory items .
9115	Create form container table record .
9116	Deletes a form container .
9117	Returns a list of form historical data .
9118	Get form historical data .
9119	Get the most recent form for a form .
9120	Lock a form container
9121	Unlock a form container .
9122	UnLock a form container .
9123	Maps form container to form .
9124	Returns a list of Role objects
9125	Create a form definition .
9126	Updates a form definition .
9127	Get a form definition by its ID .
9128	Get a form definition by name .
9129	Returns a list of form definitions for the given user .
9130	Deletes a form definition .
9131	Get the storage key from the form definition and form definition .
9132	Returns the memcached client .
9133	Shutdown the memcache .
9134	Convert string to long .
9135	Converts a PDF file to a PDF file .
9136	Returns the field values for the given form ID or None if not found .
9137	Create a flow step entry rule .
9138	Create a flow step exit rule .
9139	Create a flow step view rule .
9140	Updates a flow step rule .
9141	Updates a flow step rule .
9142	Updates the flow step view rule
9143	Moves a flow step rule up to the next step .
9144	Move the flow step rule down .
9145	Deletes a flow step entry rule .
9146	Deletes a flow step exit rule .
9147	Deletes a flow step view rule .
9148	Initializes an authentication session .
9149	Gets all user queries .
9150	Returns a list of all the roles
9151	Returns service ticket as hex string
9152	Creates a form field with a masked value .
9153	Creates a form field with text barcode .
9154	Create a decimal field for a decimal field .
9155	Create a decimal field for a decimal field .
9156	Creates a table field
9157	Updates a form field .
9158	Updates a form field .
9159	Method to update a decimal field .
9160	Update a decimal field
9161	Method to update a table field
9162	Get a field by name .
9163	Returns a list of FormField listing objects with all fields in the WS .
9164	Returns a list of form fields matching the form Type Type and User .
9165	Delete a field .
9166	Force delete field
9167	Returns the metadata for a table field
9168	Method to update a field .
9169	Get or create an index .
9170	Create a flow .
9171	Updates a flow .
9172	Get a flow by its ID .
9173	Get a flow by name .
9174	Deletes a flow .
9175	Force delete a flow .
9176	Updates a field with a global field .
9177	Get all global field values .
9178	Retrieves the form definition and title from the database .
9179	This method is used to decrypt an init packet .
9180	Closes the connection and closes it .
9181	Initialize a new request .
9182	Get exception message
9183	Create a new admin user .
9184	Get an access token .
9185	Returns a normalized UserProfileInfo object .
9186	Executes a JSON request .
9187	Execute a POST request .
9188	Return response handler .
9189	Check if the connection is valid
9190	Returns an SSLContext object .
9191	Returns the path to the fluid system trust store
9192	Closes the database connection .
9193	Returns a list of FluidItems for the given jobView .
9194	Send form to Flow .
9195	Called when the connection is closed .
9196	Called when a message has been received
9197	Sends a JSON object to the server .
9198	Sends a message to the remote endpoint .
9199	Closes the session .
9200	Synchronously execute a native SQL query .
9201	Request a license request .
9202	Returns a LicenseRequest object with the specified license string .
9203	Creates a field for a plain text field .
9204	Creates a field for a paragraph text field .
9205	Creates a field for a paragraph text field .
9206	Creates a Field for a MultiChoiceField .
9207	Creates a field for a date field .
9208	Updates a field with plain text fields
9209	Updates a field with a paragraph text field
9210	Updates the field with date and time metadata
9211	Updates a field with a Decimal field
9212	Method to update a field in a route field .
9213	Creates a field for the given fluid item
9214	Get a configuration by key .
9215	Get all configurations
9216	Creates a new attachment
9217	Get attachment by its ID .
9218	Delete an attachment
9219	Force delete attachment
9220	Parse a jar file .
9221	Sets the class loader for the given jar path .
9222	Check that the parent of the parent .
9223	Check that the parent element is not present .
9224	Raises ValidationException if no simpleType attribute is not present .
9225	Get the schema node for the given path .
9226	Raises an exception if the parent is not present .
9227	Raise an exception if the parent is not present .
9228	Converts an object into a T object .
9229	Create a CLI interface .
9230	Create a CLI instance using an instance of an instance .
9231	Parse command line arguments .
9232	Creates an instance of the CLI with the given arguments .
9233	Build a URL builder .
9234	Removes a footer view
9235	Returns the value at the given point .
9236	Generate a 3D gradient with noise noise .
9237	Generate a 3D noise .
9238	Return a 3D value with noise noise .
9239	Calculate the cubic interpolation function .
9240	Curve 5 curve
9241	Sets the bounds .
9242	Process a CloudTrail event .
9243	Process a CloudTrailEvent .
9244	Get the account ID from the event .
9245	Applies the rules to a violation entity .
9246	Returns an event serializer .
9247	Creates a file with the given name .
9248	Creates a temporary directory .
9249	Restore the properties of the system .
9250	Returns a new map implementation .
9251	Add an object to the collection .
9252	Set a property .
9253	Get values from an array property .
9254	gets the state of the next state
9255	Removes all entries from the queue
9256	Returns the type of the given type .
9257	Get a parameterized type .
9258	Returns the type variable of the type .
9259	Print traceback to stream .
9260	Print the traceback to writer .
9261	Replace the object with the remote object .
9262	Runs the task .
9263	Set the task .
9264	Check if the task is accepted .
9265	Called when the task is rejected .
9266	Check if the task started .
9267	Marks the task as completed .
9268	Stop the task .
9269	Get the next job in the queue .
9270	Insert a job into the queue .
9271	Convert name to a blocking mode .
9272	Read and return the local instance .
9273	Sets up all the readers
9274	Add a reader to a catalog reader array
9275	Copy readers to a catalog
9276	Creates a Catalog object from the catalog class
9277	Load all the catalogs from the system .
9278	Parse the catalog from a URL .
9279	Process pending catalogs .
9280	Parses a catalog file .
9281	Called when a token is invalid
9282	Recursively parse all the catalogs
9283	Resolve the DOCTYPE from the local system .
9284	Try to resolve a DOCUMENT entry .
9285	Resolves a system by its ID .
9286	Resolve a local URI .
9287	Resolve all the subordinate catalogs in the system .
9288	Make the given sysid absolute .
9289	Normalizes a URI
9290	Convert an integer to a string .
9291	Adds a partial entry to the list
9292	Create a soft value value .
9293	Fires on the specified exception .
9294	Add an exception to the console .
9295	Returns the implementation of the wrapped list .
9296	Compare two TimerTask objects .
9297	Try to get the value of the object
9298	Get an object from the list .
9299	Set the item at the given index .
9300	Remove all available objects from the queue .
9301	Adds a new entry type to the registry .
9302	Get an entry type from its name .
9303	Returns the number of entries for the given type .
9304	Get a string from the args .
9305	Set the context loader for the given thread .
9306	Swap two elements .
9307	Remove a node from the heap .
9308	Internal helper to cleanup a timeout .
9309	Load a class by name .
9310	Preload all available protocols .
9311	Create a URLStreamHandler for the given protocol .
9312	Checks if the Java protocol - handler - pkgs property is not present
9313	Returns the class from the context .
9314	Returns a set that can be used as a set .
9315	Returns a new LongCounter .
9316	Creates a new LongCounter with the given counter .
9317	Check if the namespace is in an extension namespace .
9318	Check if a notification is required .
9319	Rebind name to target .
9320	Returns the object instance associated with the given object
9321	Substitutes a string from a string .
9322	Split a string into a list of strings .
9323	Join a list of bytes into a string .
9324	Appends an object to the given buffer .
9325	Returns the value as a blocking mode .
9326	Create a new entry map
9327	Get an object from the cache .
9328	Get the value of a key from the cache .
9329	Remove an entry from the cache .
9330	Remove all entries from the cache .
9331	Returns a list of valid keys
9332	Set the resolution of the timer .
9333	Returns a TimedEntry .
9334	returns a list of children that match the given tagName
9335	Returns the first child of an element with the given tagName
9336	Get optional child of element .
9337	Get the content of an element .
9338	Get the unique child of an element .
9339	Get the child content of an element .
9340	Sets the maximum size of the executor .
9341	Set the blocking mode .
9342	Sets the blocking mode .
9343	Executes the given task wrapper .
9344	Resolves a system by its identifier .
9345	Resolves the given public id and systemId .
9346	Resolve an external system using the given resolver .
9347	Resolve an external public identifier
9348	returns a catalog resolver
9349	Append vector to vec
9350	Resolve all system IDs in a given systemId .
9351	Attempts to resolve the given system ID into a URL .
9352	Find all system entries in the system with the specified systemId
9353	Resolve all local systems in the system
9354	Resolve all subordinate catalogs
9355	Reads a catalog from the given URL .
9356	Read a catalog from the given stream .
9357	Connect to the local file .
9358	Create a new stream for writing .
9359	Compare two nodes and return the new value .
9360	Delete a node from b .
9361	Returns the valid value
9362	Returns a snapshot entry .
9363	Compare two elements .
9364	Create and return a logger .
9365	Appends a list of objects to the given buffer .
9366	Returns the fully qualified name of the class .
9367	Returns the string representation of this class .
9368	Returns the names of all properties
9369	Get a property group by name .
9370	Tries to find a constructor for a given type
9371	Returns a copy of the object
9372	Dereference an object .
9373	Initialize the context
9374	Updates the jndi cache with the given name and value
9375	Return the set of all keys in this configuration
9376	Returns a set of entries .
9377	Removes a property listener .
9378	Triggers a property added event
9379	Triggers a property removed event .
9380	Triggers a property changed event .
9381	Called when a property has changed .
9382	Make a property name prefixed with prefix .
9383	Load properties from a property reader .
9384	Loads properties from the source file .
9385	Get a property group by name .
9386	Returns whether the entity has been resolved .
9387	Returns an InputSource object for the given systemId
9388	Tries to resolve a systemId as a URL
9389	Returns an InputSource for the given systemId
9390	Sets the value to the value of the document .
9391	Normalize public id .
9392	Encodes an URN into a string .
9393	Decodes an URN from a string .
9394	Replaces oldStr with newStr
9395	Start the timer .
9396	Returns the total number of seconds since the current time .
9397	Returns a new StopWatch .
9398	Compares two objects .
9399	Generates a hash code from a list of bytes .
9400	Generates a hashcode for the given array .
9401	Create the map
9402	Sets field value to field instance
9403	Get the next token from the file .
9404	Initialize the date editor
9405	Adds a vertex to the graph .
9406	Set the root vertex of the graph .
9407	Remove a vertex from the graph .
9408	Depth - first search .
9409	DFS DFS traversal .
9410	Find a vertex by its data .
9411	Find all cycles in the graph .
9412	Normalize HTML characters .
9413	Parse XML string .
9414	Parses an XML stream and returns it .
9415	Parses the given source into an Element .
9416	Creates an element and returns it .
9417	Resolve a qualified name to a QName .
9418	Copy attributes from srcElement to destElement .
9419	Returns True if the node contains all children of the given node .
9420	Get all children of a node
9421	Get the text content of a node .
9422	Iterator over child elements of a node .
9423	Returns the parent element of the given node .
9424	Add a resource to the waiting queue .
9425	Reads a catalog from the given stream .
9426	Reads a catalog from a given file URL .
9427	Get the address of the local host .
9428	Resolve an entity by its publicId and systemId .
9429	Sets the class value of the given class .
9430	Print the information about the class .
9431	Describe a class .
9432	Strip the package name from the classname .
9433	Get the package name from the classname .
9434	Force load a Java class .
9435	Returns the primitive wrapper for the given type .
9436	Get all interfaces of a class .
9437	Returns a list of all the interfaces of the given class .
9438	Returns True if the given type is a primitive type .
9439	Instantiates an object from the expected property
9440	Gets the attribute getter for a given attribute .
9441	Returns an attribute setter for a given attribute .
9442	Converts a string into a Java class .
9443	Get the value of a property .
9444	Get a list of filenames for a property .
9445	Remove all weak objects from the set .
9446	Return an iterator .
9447	Returns an URLLister class for the given protocol .
9448	Return a set of all entries in the map .
9449	Adds a listener to the bound property
9450	Removes a bound property
9451	Check if the value is null .
9452	Find an editor by name .
9453	Registers an editor .
9454	Converts a text value into an object .
9455	Returns the context loader for the given thread .
9456	Returns an ApplicationDeadlockException if the exception is an application deadlock exception .
9457	Schedule a timeout .
9458	Do any pending work .
9459	Create a subcontext from a given name .
9460	Lookup an object by name .
9461	Check if object is an instance of the given class
9462	Append class info to buffer .
9463	Get a transition by name .
9464	Read the properties from the system
9465	Get the verbosity from the system
9466	Returns True if resource is relative - catalogs
9467	Retrieve catalog files from the system
9468	Returns a vector containing the catalog files
9469	Return whether or not the resource is public
9470	Returns a boolean indicating whether or not to use the static catalog
9471	Returns an InputSource for the given entity .
9472	Resolve a URI from a URL .
9473	Make URI absolute .
9474	Resolve a Python object stream class .
9475	Invoke the setter method .
9476	Get the local name of an element .
9477	Get the namespace URI of a node .
9478	Get the namespace URI of an element .
9479	Return a list of elements from an element .
9480	Get a file stream .
9481	Load properties from a file .
9482	Load all the specified properties .
9483	Adds an edge to the graph .
9484	Add an outgoing edge .
9485	Adds an incoming edge to the graph .
9486	Checks if the edge is in the graph .
9487	Removes the edge from the graph .
9488	Find the edge in the outgoing edges .
9489	Finds the edge with the given edge
9490	Returns the cost of the given vertex .
9491	Zip src into a JarInfo object .
9492	Returns True if there are no iterators .
9493	Fire an event .
9494	Installs the Java type provider .
9495	Recursively delete all files in a folder .
9496	Dispatch to the action stream .
9497	Returns an event stream of the given action type .
9498	Creates a path to a fxml file
9499	Perform oneToMany operation on a list of records .
9500	Stream of manyToOne objects .
9501	Yields a stream of rights .
9502	Return a stream of rights .
9503	Returns True if the page should be roots .
9504	Verifies that the instruction is generated by the DrinkMaker .
9505	Command line interface .
9506	Main entry point .
9507	Get the sum of all words .
9508	Returns a dictionary with the arguments to use for the superclass .
9509	Informs a JDBC resource loader .
9510	Checks if the data source is configured .
9511	Returns an iterable of the given type .
9512	Returns an array of the given type .
9513	Generates a list of objects from the given class .
9514	Generates a collection of values .
9515	Returns a list of objects of the given class .
9516	Return a left instance of the left type .
9517	Return an instance of right type .
9518	Validate that the given type is not null .
9519	Validate that the given type is valid .
9520	Returns an instance of the given type .
9521	Connects to the database with the specified driver and returns the result .
9522	Executes the given SQL in the specified database .
9523	Queries the database with the given sql .
9524	Convert the array to a boolean array .
9525	Add an example filter to the table .
9526	Update the database .
9527	Backup the table to CSV .
9528	Restore table from CSV .
9529	Sets the empty text in the list .
9530	Dump database to CSV .
9531	Unescape CSV string .
9532	Get a list of values from a CSV row .
9533	Converts a comma separated string to a map
9534	Convert a map to a CSV string
9535	Join multiple elements into a single string
9536	Join a list into a comma - separated string
9537	Read a database from an index .
9538	Write database info to out .
9539	Ensures that the ID field is not annotated .
9540	Returns a base dao model for the given entity .
9541	Returns the bind type
9542	Imports database from CSV .
9543	Backup all tables to CSV .
9544	Restore all tables from csv .
9545	Write index to file .
9546	Create a query from the given entity manager .
9547	Create a TypedQuery object from the given entity manager .
9548	Render a SQL query
9549	Delete a specific ID
9550	Save an object .
9551	Updates the given object in the database
9552	Add a WHERE item to the query .
9553	Create a new WHERESubquery builder .
9554	Get the next active stack
9555	Returns an empty intention stack
9556	Add a plan to the graph .
9557	Select a plan according to the policy .
9558	Select a plan at random .
9559	Set the plan instance variables to the planInstance
9560	Returns the result with the given index .
9561	Get the parents of all parents .
9562	Get the children of all children
9563	Grow a list of bytes
9564	Create a logger
9565	Perform a single step .
9566	Set goals .
9567	Pauses the user to continue .
9568	Initialize the default pool size
9569	Initialize the Intention selection threads .
9570	Start the jill - selection threads
9571	Shutdown all connections .
9572	Register a Jill extension .
9573	Reset all agents
9574	Load an Agent class into the catalog .
9575	Process a list of plans for a Goal type
9576	Creates a list of agents and adds them to the catalog .
9577	Load a class from the given class .
9578	Loads a JillExtension class
9579	Returns True if two objects are equal .
9580	Generate usage string .
9581	Parse a configuration file or string .
9582	Parse an argument with a config option .
9583	Evaluate a query against an agent .
9584	Get a object by index .
9585	Find an object by its name
9586	Pushes an object onto the list .
9587	Get an object from the stack .
9588	Pushes an object onto the heap .
9589	Remove and return the next object .
9590	Returns the type of an object .
9591	Match a BELief query .
9592	Main entry point .
9593	Convert a string into a byte array .
9594	Push a goal to the stack .
9595	Send a message to a Goal .
9596	Send a message to a Goal .
9597	Get a byte array of goals .
9598	Creates a BeliefSet with the given name and fields .
9599	Adds a belief to the belief base .
9600	Evaluate a query against the Belief base .
9601	Suspend the agent .
9602	Returns the field with the given name .
9603	Register neighbours in the beliefset .
9604	Build a random name .
9605	The main loop
9606	Checks if the execution stack is valid .
9607	Remove finished agents .
9608	Manage a Goal node
9609	Shutdown the pool .
9610	Sets the agent idle if it is already idle .
9611	Move the disc between two pins .
9612	Initialize the agents .
9613	Wait for all pools to be idle .
9614	Terminate all the agents .
9615	Check if all the pools are idle .
9616	Return the pool id for an agent .
9617	Picks the expression and returns it .
9618	Sets the expression .
9619	Returns the join for the given attribute .
9620	Recursive join recursively .
9621	Find a join for a given property .
9622	Check if the end of a response is reached .
9623	Get an UploadStream from a request .
9624	Handles the request
9625	Check if a parameter exists .
9626	Returns the value of a parameter .
9627	Parse content type parameter .
9628	Configure transaction manager .
9629	Returns a generated file for the given artifact name .
9630	Writes artifact to target file .
9631	Assign instance field to instance field
9632	Returns the declared constructor .
9633	Build a string representation of a config object .
9634	Gets the method for the given method .
9635	Returns the type of a field .
9636	Returns the value of a circular dependency .
9637	Persists the temporary file .
9638	Set default link .
9639	Set default link template .
9640	Handle links from response .
9641	Add links to the response .
9642	Parse the links in the body .
9643	Parse a link object .
9644	Get or create a new map if it exists .
9645	Set allowed methods .
9646	Check if the given method is allowed .
9647	Register instance processors .
9648	Register an instance factory .
9649	Register an instance processor .
9650	Register a class processor .
9651	Returns an instance of the specified interface class .
9652	Adds an argument to the list .
9653	Creates target file list .
9654	Returns the XML representation of this object .
9655	Initialize the source files .
9656	Returns true if the template has the same reference to the template .
9657	Creates a parameterized template from a reader .
9658	Creates a parameterized template model from a file .
9659	Sets the request path .
9660	Returns an observable that will be read from the specified range .
9661	Returns a instance of the given string .
9662	Sets the value of a field with the given name .
9663	Add a capture to the given logger .
9664	Remove a capture appender .
9665	Clears the specified appender .
9666	Reads the file and returns a list of arguments
9667	Parse the model files .
9668	Resolves all proxies in the resource set .
9669	Returns a list of files .
9670	Parse all files in a directory .
9671	Checks if the model is fully resolved .
9672	Finds all EObjects in the given resource set .
9673	Set the model dirs
9674	Sets the file extensions .
9675	Set the model resources .
9676	Read a single record .
9677	Sets the value of a string .
9678	Sets a boolean value .
9679	Execute a large update .
9680	Converts a string into an instance type .
9681	Merge a velocity template into a file .
9682	Get model directory
9683	Returns the canonical path of the template .
9684	Serializes the given object to the HTTP response .
9685	Start the web UI .
9686	Configure the web window .
9687	Print the view
9688	Write stream to out .
9689	Invokes the given method and returns the result .
9690	Attaches the request to the request .
9691	Detach from the context
9692	Return a Cookies object .
9693	Dump the request context
9694	Returns a list of all metations in the managed methods .
9695	Set event stream configuration .
9696	Set the remote host
9697	Extract a parameter from the event stream .
9698	Remove prefix from path .
9699	Get the common directory of two files .
9700	Convert absolute path to relative path .
9701	Convert relative path to absolute .
9702	Returns the number of directories in a directory .
9703	Dumps the error of an HTTP request .
9704	Send a JSON object to the response .
9705	Adds a parameter template to the list of parameter templates
9706	Adds all parameter templates to the list
9707	Initialize the ParameterGen4JContext .
9708	Returns a list of parameter templates that are within the templateDir .
9709	Enable save button .
9710	Delete a file
9711	Deletes an element deleted
9712	Instantiate a managed instance .
9713	Returns a list of files .
9714	Summarize all files in the results .
9715	Returns a summary row for the given directory .
9716	Returns a summary row for the given directory .
9717	Returns a service instance .
9718	Returns the setup class .
9719	Returns a list of all model directories .
9720	Return a list of all model resources .
9721	Sets the collection of candidates to use .
9722	Load a configuration document from a stream .
9723	Called when an exception is raised
9724	Checks if the given parameter is an object type .
9725	Reads JSON data from request .
9726	Reads an object from a JSON stream .
9727	Extracts the parameter from the cell .
9728	Returns the query hints
9729	Returns true if the request header is a X - HTTP request .
9730	Returns true if the request is Android .
9731	Handle an entity event .
9732	Returns a list of properties that are annotated with a given type .
9733	Gets the annotation for a given property .
9734	Log a message to the server .
9735	Lookup a Whois result .
9736	Returns True if the user has the given whois host .
9737	Returns the managed class for the specified interface .
9738	Get a managed method .
9739	Process an exception that contains an exception .
9740	Process the notification with the given parameters .
9741	Gets a boolean value .
9742	Returns True if the result of the database has the specified type .
9743	Serialize the response to the HTTP response .
9744	Returns the value of a cookie .
9745	Add a cookie to the HTTP response .
9746	Remove a cookie from the HTTP response .
9747	Returns iterator over cookies .
9748	Returns the TargetFileProducer .
9749	Adds a field to the pool .
9750	Compiles the Java class .
9751	Returns True if token is valid
9752	Gets the value of a file .
9753	Ensures that the URI has a trailing slash .
9754	Login to the HTTP server .
9755	Returns the HTTP request .
9756	Invoke a managed method .
9757	Executes a mutable transaction .
9758	Executes an immutable transaction .
9759	Returns a list of files .
9760	Returns the last file .
9761	Returns the concrete configuration type .
9762	Returns True if path starts with the given path component .
9763	Returns a list of Artifact factories that are registered for the given model type .
9764	Returns HTTP session object for the given instanceKey .
9765	Serialize the file to the HTTP response .
9766	Executes a GET request .
9767	Handles the request
9768	Clean up the statement .
9769	Pre - destroy event streams
9770	Handle allowed methods .
9771	Uploads the server to the server .
9772	Delete the data from the server .
9773	Extract column parameters from a row .
9774	Get the names of all arguments
9775	Schedule a periodic task .
9776	Schedule a timeout task .
9777	Load view manager configuration
9778	Returns the next file .
9779	Configure the application
9780	Prints the Welcome banner
9781	Print the stopped banner .
9782	Creates a Chameleon instance
9783	Registers a shutdown hook
9784	Trigger a trigger .
9785	Trigger a trigger .
9786	Insert a new row into the table .
9787	Return counts of all files in the results .
9788	Sets the score of the summary .
9789	Gets the variants of the summary .
9790	Sets the variants of the summary .
9791	Gets the question type .
9792	Sets the questionType .
9793	Returns the token for this focus .
9794	Gets the dep label of a token .
9795	Sets the dep label .
9796	Retrieves the semantic type for this token .
9797	Sets the semantic type .
9798	Gets the sections of the document .
9799	Sets the sections
9800	Gets the sections of a document .
9801	Sets the sections of a document .
9802	Gets the URIs of the concept .
9803	Sets the URIs of a concept .
9804	Gets the types of the concept .
9805	Sets the types of types
9806	The target type of the answer type .
9807	Sets the target type of the answer type .
9808	Returns the rank of the search result .
9809	Sets the rank of the search result .
9810	Retrieves the query string for the search result .
9811	Sets the query value .
9812	Gets the candidate answers for the search results .
9813	Sets the candidate answers
9814	Returns a CandidateAnswerVariant for the given index .
9815	Sets the candidate answers .
9816	Retrieves the query of the search .
9817	Sets the query .
9818	Gets the hit list for the search .
9819	Sets the hit list
9820	Gets a hit list by index .
9821	Sets the hit list .
9822	Gets the abstract query for this search .
9823	Sets the abstract query
9824	Gets the search id for a search .
9825	Sets the searchId .
9826	Sets the docId of this Passage .
9827	Get the offset in the beginning of a passage .
9828	Sets the offset of a passage .
9829	Get the offset in the end section .
9830	Sets the offset in the end section .
9831	Get the start section of the passage .
9832	Sets the start section of the passage .
9833	Get the end section of the passage .
9834	Sets the end section of the passage .
9835	Retrieves the aspects for a passage .
9836	Sets the aspects
9837	Returns the triple for this search .
9838	Sets the triple value .
9839	Retrieves the source relation for this passage from .
9840	Sets the source relation .
9841	Get the subject of the triple .
9842	Sets the subject .
9843	Get the predicate of the triple .
9844	Sets the predicate .
9845	Returns whether or not a triple is an object URI .
9846	Sets the is_objUri flag .
9847	Gets the operator for a complex query concept .
9848	Sets the operator
9849	Gets the operator arguments for a complex query .
9850	Sets the operator args
9851	Gets the concept of a concept .
9852	Gets the score of a concept mention .
9853	The text of the CandidateAnswerOccurrence .
9854	Sets the text of the candidate answer .
9855	Gets the ID of the concept .
9856	Sets the id of the concept .
9857	The name of the concept .
9858	Gets the abbreviation of the concept .
9859	Sets the abbreviation of the concept type .
9860	Sets the concept
9861	Gets the variants of the answer .
9862	Sets the variants
9863	Gets the named entity types .
9864	Sets the named entity types
9865	Gets the concept type of the query .
9866	Sets the concept type .
9867	Gets the occurrences of this CandidateAnswerVariant
9868	Sets the occurrences of a CandidateAnswerVariant
9869	Gets the concepts for this query .
9870	Sets the concepts
9871	Retrieves the original text of the atomic query concept .
9872	Sets the original text
9873	Gets the arguments for this QueryOperator .
9874	Sets the arguments of a QueryOperator .
9875	Gets the label of the semantic role .
9876	Sets the label of the semantic role .
9877	Return the next clear bit .
9878	Set the value of a bit .
9879	Freezes the buffer .
9880	Create a new instance of CacheValue
9881	Rehash a list of values .
9882	Returns the HLM2 representation of the Monomer .
9883	Check brackets in the annotation section .
9884	Parse a string into a Monomer object
9885	Returns a HLM2 string representation of the group .
9886	Add an element to the list
9887	Entry point for the script .
9888	Checks if a Polymer ID is valid
9889	Checks if the connection is valid
9890	Validate connection details .
9891	Check if groupID is valid
9892	Check if a string is repeating .
9893	Checks if the Polymer is a peptide or RNA
9894	Returns the JSON representation of the notation container
9895	Get a Polymer from a string .
9896	Returns the current grouping notation
9897	Convert Polymer to a HLM2 string .
9898	Converts a list of Polymer IDs into a HLM2 string .
9899	Returns the HLM2 representation of the connection
9900	Returns the HLM2 representation of the groupings .
9901	converts an annotation section to a HLM2 string
9902	Returns a list of polymer and groupings
9903	Returns the Polymer with the given id
9904	Sets the polymer elements .
9905	convert h2 . 0
9906	Set the annotation .
9907	Set the count
9908	Returns a MonomerNotation object for the given type
9909	Returns a MonomerNotationGroupElement from a string
9910	Decide whether or not an entity is appropriate .
9911	Returns the list of values .
9912	Parse the input string .
9913	set nucleotide units
9914	Define ambiguity .
9915	Get statistics about the worker thread .
9916	Create an ADiGraph from a collection of edges .
9917	Create a new ADiGraph .
9918	Internal method to initialize the outgoing paths
9919	Returns a sorted list of nodes sorted by reachability .
9920	Subscribes to a given pattern .
9921	Get the number of subscribes to a given pattern .
9922	Unsubscribe from a pattern .
9923	Send a request and return the response .
9924	Send a return sync message .
9925	Wait for a message from a timeout .
9926	Shutdown the OTP server .
9927	Raises an exception if the exception is not local .
9928	Unlock the run state .
9929	Create a new worker thread .
9930	Attempt to add a worker to the queue .
9931	Register a new WorkQueue .
9932	Deregisters a worker .
9933	Signal the work queue .
9934	Run a WorkQueue .
9935	Waits for a single work queue .
9936	Return the number of queued tasks in the queue .
9937	Returns the common work queue .
9938	Returns the number of external help completions for a task .
9939	Adds a task to the queue .
9940	Sets up the common pool .
9941	Wait for the completion to complete .
9942	Builds a JSON string from the given code .
9943	Return statistics about the workers and shared queues .
9944	Creates a list of elements .
9945	Return a reverse list .
9946	Returns True if all elements in the collection satisfy predicate .
9947	Apply a function to each element in an iterable .
9948	Folds the right of a list .
9949	Push a task onto the queue .
9950	Create an AOption from a nullable value .
9951	Creates an ALongHashMap from keys and values .
9952	Returns an AListMap with empty values .
9953	Create a new AListMap from keys and values .
9954	Create a new AListMap from keys and values .
9955	Return a set of all keys in this map .
9956	Normalize a resource name .
9957	Converts a BoundType into a string .
9958	Return a string representation of a sequence .
9959	Create a binary search for a given list .
9960	Create a binary search for a given list .
9961	Send an email .
9962	Send an email .
9963	Bind a route binding .
9964	Bind a FilterBinding .
9965	Returns True if the user has the specified role .
9966	Returns the integer of an integer .
9967	Removes duplicate strings from an array .
9968	Return a string representation of value .
9969	Run a single run .
9970	Check if a user has a password
9971	Get user from cookie and store it in DB .
9972	Get the login user from the request .
9973	Returns True if the password matches the hashed password .
9974	Save user in cookie .
9975	Returns the login key .
9976	Returns a CookieUser for the given UUID .
9977	Forward the request to the given context .
9978	Append file separator to path
9979	Extract a long parameter from request .
9980	Log a debug message .
9981	Returns a CallInfo object for the given level
9982	Convert a char array to a simple byte array .
9983	Convert a string to a byte array .
9984	Convert a byte array to a simple character array .
9985	Convert a string to an ASCII byte array .
9986	Get the locale data for the given code .
9987	Returns a promise that will be executed in seconds .
9988	Crop the image to another .
9989	Invoke an invocation .
9990	Invoke a direct invocation .
9991	Returns a RestTemplate instance .
9992	Render an error .
9993	Render a forbidden message .
9994	Process a template .
9995	Returns the path of the current action path
9996	Render the data tables as JSON .
9997	Render empty data tables .
9998	Sets the items in the combobox .
9999	Redirect to the given context .
10000	Return a list of instances of the given injector .
10001	Get the name of the current method
10002	Compact memory .
10003	Propagate metrics to local metrics collection .
10004	Encode special characters in a string .
10005	Returns the charset of the file .
10006	Copy data from the input stream to the output stream .
10007	Copy data from input to output stream .
10008	Copy the input stream to the output stream .
10009	Copy data from input to output writer .
10010	Copy data from input to output writer .
10011	Copy input to output stream .
10012	Copy input to output stream .
10013	Compares two streams .
10014	Compare two files .
10015	Suppress warnings .
10016	Returns the SQL for the given SQL name .
10017	Unmarshalls a JSON string into a class .
10018	Unzip a zip file .
10019	Returns a permission dialog fragment .
10020	Resume the dialog
10021	Add a value to the converter .
10022	Returns True if the value matches the given regular expression .
10023	Returns True if value is mobile or not
10024	Check if value is a phone number .
10025	Check if value is a birth day .
10026	Returns True if value is a URL .
10027	Returns True if value is a date .
10028	Apply the filter to the HTTP request .
10029	Encodes a base64 string .
10030	Decode base64 encoded string .
10031	Converts a hex string into a byte array .
10032	Read properties from a stream .
10033	Reads the content of a stream and returns it .
10034	Reads a file and returns it as a string .
10035	Write data to file .
10036	Copy a directory to the target directory .
10037	Serialize a DOM document into a string .
10038	Parses the XML file and returns a Document object .
10039	Parse XML string into a Document object .
10040	Parses the stream and returns a Document object .
10041	Validate an XML signature .
10042	Sign a document .
10043	Determines if the given class is safe .
10044	Checks if the given class is a primitive array .
10045	Returns True if the given class is a primitive array .
10046	Resolves primitive .
10047	Returns True if left - side types are identical .
10048	Checks if the given value is assigned to the given type .
10049	Returns all interfaces of an instance .
10050	Returns a set of all interfaces of the given instance .
10051	Save properties to a temporary file .
10052	Extracts variables from a URI
10053	Adds a permission to the manager .
10054	Creates a Druid plugin
10055	Bind an extension point to an extension point .
10056	Returns the builtin object for the given type .
10057	Returns the primitive for the given type .
10058	Converts an object to a type .
10059	Converts the given object to the given type .
10060	Get a query parameter from a request .
10061	Creates a parameter from a request .
10062	Creates a session parameter .
10063	Initialize the datasource
10064	Sets shared variables
10065	Add a parameter to the request .
10066	Sets the condition for a given field .
10067	Show the permission dialog .
10068	returns True if all values are granted
10069	returns True if all values are denied
10070	Find records by a SQLSelect .
10071	Finds one record by sqlSelect .
10072	Returns True if the given model has a new value .
10073	Determines if the method declares an exception .
10074	Process all items in the queue .
10075	Adds a new value to the map .
10076	Check if a string matches a pattern .
10077	Reads arguments from the given arguments .
10078	Get the protobuf entity for the given class .
10079	Returns True if the given class is a protbuf entity .
10080	Returns a map of all protobuf fields .
10081	Gets the getter for a protobuf attribute .
10082	Get the setter for a protobuf attribute .
10083	Get the object mapper .
10084	Get a JSON factory .
10085	Converts an object into a JSON string .
10086	Set borders .
10087	Get user record from database .
10088	Copies all the jmx attribute values to the specified object .
10089	Copies all jmxAttributeValues to target .
10090	Get the value of a property .
10091	Set a property to a new value .
10092	Returns a JFrame with the title and title
10093	Save the access token .
10094	Returns the access token .
10095	Returns the default loader for the current thread .
10096	Get a resource by name .
10097	Get the stream of a resource .
10098	Returns the stream of the given class as a stream .
10099	Initialize the components from a URI .
10100	Initialize the scheme .
10101	Initialize the path from a string .
10102	Sets the scheme .
10103	Set the userinfo string .
10104	Sets the host and port .
10105	Set the port .
10106	Appends a path to the current path .
10107	Sets the query string .
10108	Sets the fragment of the URI .
10109	Returns the string representation of the URI .
10110	Creates a prepared statement with the given parameters .
10111	Initialize the service
10112	get a muffin string from a file
10113	Sets the muffin for the given param
10114	Returns the contents of the system clipboard
10115	Set the clipboard contents to a string selection
10116	Open a file dialog and return the input file contents .
10117	Load services by class
10118	Sets the parameters of a service operation .
10119	Gets the parameters of a parametrized operation .
10120	Finds a parametrized service by id
10121	Finds an instance of a service by class
10122	Parse the response from a JSON response .
10123	Return an iterator over the iterator .
10124	Get encoding from XML string .
10125	Returns the parent logger .
10126	Returns a connection instance for the given connection .
10127	Provide authorization code .
10128	Visit package declaration .
10129	Visit class declaration .
10130	Visit an executable declaration .
10131	Get an option from a dictionary .
10132	Returns a Filter that matches the specified modifiers .
10133	Returns a Filter that matches the given kind .
10134	Returns a Filter that matches two declarations .
10135	Return a Filter that matches this filter .
10136	Return the map as a dictionary .
10137	Ensures that the constructor is accessible .
10138	Returns an ObjectQueryInfo object for the given object .
10139	Replace slashes with hyphens .
10140	Convert a list of bytes to a hex string .
10141	Returns the indexes for a given parameter name .
10142	Parse a SQL string into a string .
10143	Convert a collection of protobufs to protobufs
10144	Sets the field value of a protobuf attribute .
10145	Sets the value of a protobuf field .
10146	Return True if the given file should be accepted .
10147	Returns a proxy for the specified ResultSet .
10148	Convert a list of labels into a map .
10149	Extracts state values from a dictionary
10150	Get the generic superclass of the given type .
10151	Polls all the objects in the pool .
10152	Wait for one object to complete .
10153	Get a declared field from a class .
10154	Get all declared methods of a class .
10155	Gets the declared method for a given class .
10156	Returns a list of methods annotated with the given annotation class .
10157	Returns a list of constructor annotated with a given annotation class .
10158	Dumps a byte to stdout .
10159	Returns the index of the first occurrence of substring in a substring .
10160	Remove characters from a string .
10161	Clean state .
10162	Initialize the audit class .
10163	Initialize the message queue
10164	Initializes the password validator .
10165	Initializes the password authenticator .
10166	Returns the localized code for the given locale .
10167	Get a locale info for the given code .
10168	Returns a Statement instance for the given statement .
10169	Clear all elements .
10170	Push an element onto the stack .
10171	Remove and return an element from the stack .
10172	Returns an open stream stream .
10173	Helper function to parse properties .
10174	Return True if tokens match the pattern .
10175	Move two coordinates .
10176	Returns True if the rectangle is enclose .
10177	Returns true if the given point is within the given coordinates .
10178	Returns a Rectangular with the intersection of other .
10179	Return a new Rectangular with the union of other .
10180	Return a new Rectangular with the same x .
10181	Return a new Rectangular with the same y values .
10182	Get the offset of a column .
10183	Get the offset of a row .
10184	Get the bounds of a cell relative to the given coordinates .
10185	calculate the number of columns
10186	Calculates the number of rows of each area .
10187	Given an exception return the corresponding exception .
10188	The main function .
10189	Called when a byte code is updated .
10190	Copy the code buffer to the internal code buffer .
10191	Render the instructions into a labeled table .
10192	Initialize the application context
10193	Returns a copy of this QueryParameter .
10194	Adds a child to the tree .
10195	Clear all children .
10196	Returns the next solution in the search space .
10197	Add instructions to the functor .
10198	Add instructions to parent .
10199	This function is called when a Work panel changes .
10200	Registers a work panel
10201	Updates the present component flags .
10202	Creates a new decimal type .
10203	Return True if the term is a variable .
10204	Optimize a list of instructions .
10205	Compares two collections .
10206	This function is called when the request is received .
10207	Start the page tag .
10208	Render a button .
10209	Reset the state .
10210	Initialize the training data .
10211	Returns the value associated with the given key .
10212	Returns the index of the element in the map
10213	Sets the value at the given index .
10214	Removes an element from the array
10215	Removes an index from the list .
10216	Check if a property exists .
10217	Set a property to a given value .
10218	Returns the value of a property .
10219	Checks if the given wrapper type is compatible with the given wrapper type .
10220	Initializes the property getter and setters .
10221	Returns the decision tree of the given property .
10222	Initialize the lookup table for the decision tree .
10223	Unify query and statement bindings .
10224	Unify two terms .
10225	Unify variable from leftTerm and rightTerm .
10226	Compile a query into a WAMCompiledQuery object .
10227	Find the maximum number of arguments in a clause .
10228	Allocate permanent memory registers for a query .
10229	Collect position and occurrence information from a clause .
10230	Display a compiled predicate .
10231	Display a compiled query .
10232	Put a signed integer into a buffer of bytes .
10233	Convert a buffer to a string .
10234	Returns the string value of the attribute .
10235	Set a string value .
10236	Read a term
10237	Check if a class exists and is loadable .
10238	Returns true if the given class is a sub - type of the given class .
10239	Checks if parent and child of given class is subtype .
10240	Check if parent class is a sub - type of the parent class .
10241	Returns a class for the given name .
10242	Returns a new instance of the given class .
10243	Returns a new instance of the given constructor .
10244	Calls an arbitrary method on an object .
10245	Calls the given method with the given parameters .
10246	Calls a static method .
10247	Returns the constructor for the given class .
10248	Find all setters that match a property .
10249	Returns a new queue that can be used as a transaction .
10250	Returns a new queue that can be used as a transaction .
10251	Returns the type of the given object .
10252	Reset all start states .
10253	Search for the current goal path .
10254	Creates an instance of the specified type .
10255	Add a supported timezone to the endpoint
10256	Adds an alternate dimension to the database .
10257	Adds a dimension to the database .
10258	Finds free variables in a query .
10259	Finds free non - anonymous variables .
10260	Compares two search nodes .
10261	Writes an object to a file .
10262	Reads a stream of bytes and returns it as a string .
10263	Creates a search node for the given state .
10264	Generate a string with the trace indent .
10265	Allocates the argument registers for the given functor expression .
10266	Returns True if the last body term is in arg position only
10267	Gets the majority classification of a given property .
10268	Tests if all examples have the same classification .
10269	Chooses the best value of the output property to the given output property .
10270	Creates a Functor .
10271	Create a Variable from its name .
10272	This function is called when the request is successful .
10273	Returns the list at the given index .
10274	Set the texture
10275	This method is called when the screen is called immediately .
10276	Create a buffered image .
10277	Creates a Graphics2D object from a buffered image .
10278	Creates an image of a binary image .
10279	Creates a GDISurface image
10280	Sets the queue search algorithm .
10281	Perform a depth - bounded search .
10282	Search the queue .
10283	Entry point for prolog parser .
10284	Returns a Clause from a prolog .
10285	Parse a list of terms .
10286	Parse a functor .
10287	Parse a list of arguments .
10288	Get a list of terms .
10289	Parse a variable .
10290	Parses an integer literal .
10291	Parses a double literal .
10292	Parses a string literal .
10293	Consume a directive .
10294	Internal function to register an operator .
10295	Initializes the built - in operator table .
10296	Consume a token .
10297	Returns whether the current token is consumed or not .
10298	Bind the session to the current thread .
10299	Rollback all resources .
10300	Collects the elements of an iterator into a collection .
10301	Create a CallPoint for the given name and length .
10302	Convert milliseconds to milliseconds .
10303	Convert ticks to years .
10304	Convert ticks to hours .
10305	Convert ticks to minutes .
10306	Convert ticks to milliseconds .
10307	Convert ticks to a long value .
10308	Convert ticks to a given month .
10309	Convert ticks to a long value .
10310	Calculate the start of a year in a given year .
10311	Get the month of a year .
10312	Read a byte block from the source file .
10313	Apply a new entry to the given key .
10314	Returns the entry for the given key .
10315	Place an entry into the hash table .
10316	Rehash the table .
10317	Action event handler
10318	Sets the next available state
10319	Sets the previous state
10320	Set the finished state .
10321	Returns a WAM resolved machine .
10322	Returns an iterator over the set of variables .
10323	Calculate the expected value of a list of probabilities .
10324	Calculates the probability for a distribution .
10325	Set the ticks for the given number of ticks .
10326	Perform the action forward .
10327	Returns a new URL .
10328	Returns information about the request .
10329	prints the headers of the request
10330	gets the cookies from the request
10331	gets the parameters from the request
10332	returns a string representation of the request scope
10333	returns an HTML table of the page scope
10334	gets the session scope
10335	returns the application scope
10336	gets the principal from the request context
10337	Start the debug table
10338	Returns a HTML table with the given properties
10339	Perform a search .
10340	Set the current screen state .
10341	Walks a term in the search tree .
10342	Compare two search nodes .
10343	Update the registers .
10344	Notifies all active listeners .
10345	Leave a clause .
10346	Returns True if the context is a top functor .
10347	Return a copy of the elements of an array .
10348	Set the operator arguments .
10349	Returns the fixity .
10350	True if associativity is infix
10351	Compares two operations .
10352	Property change event handler
10353	Registers a work flow controller
10354	Returns an enumeration attribute factory for the given class .
10355	Creates a component factory .
10356	Returns the storage cell associated with this variable .
10357	Returns True if the variable is bound .
10358	Sets a column attribute .
10359	Set row attributes .
10360	Returns the column attribute of the column .
10361	Returns the row attribute of the row .
10362	Internal method to insert cell attributes into cell attributes .
10363	Creates an instance of the specified type .
10364	Creates a new type instance .
10365	Return True if the value is an instance of the given string .
10366	Create an initial context operator .
10367	Update the registers .
10368	Get the value of the variable .
10369	Searches through the forward queue until the goal is reached .
10370	Joins two search nodes .
10371	Cache a single block .
10372	Get the properties of a named resource .
10373	Set the rate of the batch rate .
10374	Read bytes from the source file .
10375	Skip n bytes .
10376	Gathers all expressions in a disjunction .
10377	Get an integer from a byte array .
10378	Writes an integer to a byte array .
10379	Writes an integer to a byte array .
10380	Get 24 bit integer from a byte array .
10381	Get a short value from a byte array .
10382	Writes a short value to a byte array .
10383	Returns a tree search state for the given operator .
10384	Returns an iterator over the valid operators in the tree .
10385	Returns the id of the attribute class .
10386	Returns the value of the attribute .
10387	Sets the value of the attribute .
10388	Takes a string and returns a list of strings
10389	Convert an array to a string
10390	Converts name to CamelCase
10391	Convert case to uppercase .
10392	Gets the current configuration .
10393	Takes a list of handlers and prints it to a buffer .
10394	Get a WAM call point from the symbol table .
10395	Create a WAM call point .
10396	Checks whether this attribute is a sub - category of this hierarchy attribute .
10397	Returns the ID of this attribute .
10398	Returns the value at the given level
10399	Returns the last value
10400	Serializes the hierarchy attribute .
10401	Deserializes the hierarchy attribute .
10402	Compute the manhattan distance .
10403	Returns the remainder of a given integer .
10404	Add a user readable error .
10405	Handles the given exception .
10406	Writes a string to the output buffer .
10407	Classify the given state .
10408	Compares two sets .
10409	returns an iterator for the iterator
10410	Convert an integer to an integer .
10411	Convert integer to log base 2 .
10412	Convert integer to integer representation .
10413	Convert integer to integer representation .
10414	Convert a number to an integer .
10415	Convert integer value to integer representation .
10416	Get the number of characters in an integer .
10417	Get the character count of a long integer .
10418	Return the character count for the given integer value .
10419	Sets the head of the Functor .
10420	Emits the compiled code .
10421	Sets the current screen to the current screen .
10422	Return True if t is a member of the predicate .
10423	Retrieves a property from the stack trace .
10424	Get the properties of a given key .
10425	Returns an iterator that returns an iterator over elements in a key .
10426	Create array properties .
10427	Set the throttle rate .
10428	Evaluates a numeric type .
10429	Attempts to find the system properties .
10430	Returns the properties of the system
10431	Try to load the properties from the classpath
10432	Returns the properties of the current working directory .
10433	Called when a functor is visited .
10434	Get the value of the variable .
10435	Set the substitution for the given term .
10436	Create a priority queue .
10437	Clean up the connection .
10438	Appends an event to the socket output stream .
10439	Start a new connector thread
10440	Initialize the printers .
10441	Commit this transaction .
10442	Rollback the current transaction .
10443	Request a write operation .
10444	Adds a cached write operation to the cache .
10445	Acquire the global write lock .
10446	Release the global write lock .
10447	Enlist this resource .
10448	Return True if rule set is within media query set .
10449	Add an element to the queue .
10450	Poll for an event from the pool .
10451	Put an exception into the queue .
10452	Insert an element into the queue .
10453	Returns the next object .
10454	Returns a boolean value as a boolean .
10455	Returns the value of a property as an integer .
10456	Converts a property name to a long value .
10457	Create a mixin node for a mixin .
10458	Add a visitor to the rule set .
10459	Backtrack the given check node .
10460	Get the code from the code buffer .
10461	Execute a query and extract bindings .
10462	Decode a heap .
10463	Capture the contents of an object .
10464	Restore an object from the cache .
10465	Get a field from the cache .
10466	Store the given attribute in the cache .
10467	Returns the field names for the given class
10468	Execute the test runner commands .
10469	Add an element to the queue .
10470	Poll the list .
10471	Create a new search node .
10472	Create a priority queue .
10473	Create a new TermWalker for the given visitor .
10474	Create a new term walker .
10475	Creates a new TermWalker for the given visitor .
10476	Create a term walker for a positional term .
10477	Create a new term walker .
10478	Load properties from a stream .
10479	Load properties from a file .
10480	Get properties object from a URL .
10481	Get properties from a path .
10482	Computes the size of the grid .
10483	Initializes font metrics
10484	Adds a property listener to the list
10485	Adds a property listener to the list
10486	Removes a property listener .
10487	Fire a property change event
10488	Creates a new double range .
10489	Perform a fade on a group .
10490	Show the horizontal bar .
10491	Show the left bar .
10492	Show right bar .
10493	Sanitizes radio controls .
10494	Wait until t is reached .
10495	Waits until a timeout is reached .
10496	Execute the test runner commands .
10497	Append classpath paths to the command line .
10498	Creates a new DateRangeType .
10499	Print introduction .
10500	Initialize a console reader .
10501	Evaluate the given sentence .
10502	Evaluate the query .
10503	Get a MultiTypeData object from a boolean value .
10504	Converts a byte into a MultiTypeData object .
10505	Get the type data for a character .
10506	Returns a MultiTypeData object for the given short value .
10507	Returns a MultiTypeData object for the given integer .
10508	Returns a MultiTypeData object for a long integer .
10509	Converts a float into a MultiTypeData object .
10510	Converts a double value into a MultiTypeData object .
10511	Convert a string to a MultiTypeData object .
10512	Convert an object into a MultiTypeData object .
10513	Convert a MultiTypeData object to a type .
10514	Puts an attribute into the scope .
10515	Clear the map up to the given key .
10516	Expand a key into an array .
10517	Internal method to insert a character into the table .
10518	Compares two search nodes .
10519	Parse operators .
10520	Returns the operators matching the given name .
10521	Checks if the candidate has a given fixity .
10522	Creates a search node for the given successor .
10523	Pads a string to the right of the given size .
10524	Return the parsed errors .
10525	Returns a string describing the options in force .
10526	Returns the usage string .
10527	Adds trailing pairs to properties .
10528	Add options to properties .
10529	Adds an option to the map .
10530	Take a set of free arguments from the given properties .
10531	Checks that the given argument is valid format for this option .
10532	Compare two iterators .
10533	Return a list of options .
10534	Returns a list of command - line options
10535	Set the Stemmer ID for the selected tag .
10536	Returns the actual Stemmer .
10537	Returns the stem of the word
10538	Run Stemming .
10539	Creates a new float range .
10540	Reset the data area .
10541	Returns a string representation of the environment frame
10542	Return a string representation of a choice frame .
10543	Internal implementation of internal calls .
10544	Return the next stack frame .
10545	Check if we are backtrack .
10546	Send a trail .
10547	unwind a1 to a2
10548	Clean up the trail .
10549	Unify two integers .
10550	Unify a constant .
10551	Return the string representation of a slot .
10552	Returns a random eight puzzles state .
10553	Checks if a puzzle is solvable .
10554	Returns a new EightPuzzleState for the given operator .
10555	Returns a list of valid operators
10556	Pretty print the board .
10557	Swaps the given tile to the specified location .
10558	Returns True if the two tiles are swapped .
10559	Takes a string and returns a list of characters
10560	Creates a new EightPuzzleState from a character list .
10561	Converts a log record to a string .
10562	Convert a log4j level into a log4j object .
10563	Add an element to the requeue .
10564	Requeue an element .
10565	Increment the size of the record .
10566	Decrement the size of the record .
10567	Signal signal on size threshold .
10568	Obtain a list of contexts .
10569	List the bindings of a context .
10570	Adds a property to the environment
10571	Removes a property from the environment .
10572	Run GCTill - stable state .
10573	A literal .
10574	Resolve a mixin reference to a mixin .
10575	Pushes a variable to the stack .
10576	set max row height
10577	Updates the maximum column width .
10578	This method is called when the action is executed .
10579	Make a heuristic search node .
10580	Performs the action forward .
10581	Substitute builtins in in clause .
10582	Initialize the symbol table .
10583	Checks the top level of a term .
10584	Returns a string representation of a variable and functor list .
10585	Compares two numbers .
10586	Sets the state to running .
10587	Terminates the running state .
10588	Marks the state as terminated .
10589	Add a new data element to the heap .
10590	Compute the ceiling of an integer .
10591	Update the minimum node .
10592	Compares two nodes .
10593	Insert a new node into the root list .
10594	Restart the cache .
10595	Returns a set of objects that match the given method .
10596	Find all objects in a search method .
10597	Find all solutions in a search method .
10598	Returns the next element in the sequence .
10599	Restore the cached values from the mementos store .
10600	Get the value of the given property .
10601	Store the multi - typed data under the given property .
10602	Store the data under the given property .
10603	Capture the contents of an object .
10604	Remove an element from the list .
10605	Return a string representation of the modifier modifiers .
10606	Convert string to integer .
10607	Convert a string to a date .
10608	Check if a string is a date .
10609	Check if a string is a time string .
10610	Returns True if the string is a datetime .
10611	Creates a token source for a given string .
10612	Creates a token source for a given file .
10613	Creates a token source for a prolog parser .
10614	Determines if the given instruction is a constant .
10615	Returns true if the instruction is an empty variable .
10616	Determines if the instruction is non - arg only .
10617	Get the children of this term .
10618	Returns the argument at the given index
10619	Returns an iterator over the children of this term .
10620	Return a string representation of the arguments .
10621	Retrieve a summary from the database .
10622	Retrieve records from the database .
10623	Executes a SQL query and returns a list of Measurements
10624	Emmit the given code .
10625	Sets the basic type of a class .
10626	Parse the given input stream into the knowledge base .
10627	Returns a string representation of a variable binding .
10628	Returns a mapping of variable names to variable names
10629	Run the component .
10630	Read and process the stream .
10631	Get a random time .
10632	Calculate the uuid time .
10633	Update the track info .
10634	Update the playlist .
10635	Render the output .
10636	This method is called when the request is permanent .
10637	Called when an event is started .
10638	Called when the event is started .
10639	Initialize the packet reader .
10640	Start the connection thread .
10641	Shutdown the connection .
10642	Reset the parser .
10643	Parse packets from the XML stream .
10644	Process a packet .
10645	Set the CLI option .
10646	Create a new chat for a user .
10647	Internal helper to initialize the content manager .
10648	Reset the cache .
10649	Set the value of a property .
10650	Adds a new packet filter to the list .
10651	Process a request .
10652	Clear all stored properties .
10653	Initialize the writer .
10654	Send a packet to the server .
10655	Get the next packet from the queue .
10656	Opens a stream .
10657	Returns a list of all informations
10658	Returns True if the given descriptor contains the given descriptor .
10659	Add an eventLifeCycle listener to the event .
10660	Shutdown the executor .
10661	Returns True if two files are identical .
10662	Clean the given byte buffer .
10663	Checks if the given entry is valid .
10664	Mask the value of a key .
10665	Compares two objects .
10666	Returns the entry for the given key .
10667	Resize the table .
10668	Add all the keys to the map .
10669	Remove an entry by key .
10670	Removes an entry by key .
10671	Remove a mapping from an entry .
10672	Add an entry to the table .
10673	Create a new immutable ImmutableMap with the given keys and augmentation .
10674	Encode an XML attribute .
10675	Convert a list of bytes to a hex string .
10676	Encode base64 encoded string .
10677	Encodes a byte array into a string .
10678	Returns the number of elements in the collection .
10679	Set the controller to select track .
10680	Set the current jump progress controller .
10681	Set the controller to change the controller .
10682	Set a controller to change the volume change volume .
10683	Broadcasts the available playlists .
10684	Handle command resources .
10685	Handle volume event .
10686	Handles the jump progress .
10687	Handle the select track .
10688	Returns a cached cache .
10689	Returns a request cache .
10690	Get the alternate field name for a field .
10691	Returns a copy of the map with only the keys that are included in the source .
10692	Get shard path .
10693	Adapts the given source to a session object .
10694	Calls the specified method with the given name and arguments .
10695	Deletes the tree at the given path .
10696	Updates one entity with the given properties .
10697	Set the ping interval .
10698	Schedule a ping server task .
10699	Adds all options to the parser
10700	Check if the given option has an option .
10701	Parses command line arguments .
10702	Prints the help message .
10703	Parse command line arguments
10704	Initialize the connection .
10705	Called when a TLS connection is received .
10706	Return the XMPPInputOutputStream if supported .
10707	Request stream compression .
10708	Start stream compression .
10709	Notify a connection error .
10710	Notify the reconnection .
10711	Register a SASL mechanism .
10712	Returns a list of supported SASLMechanism classes
10713	Returns the output plugin behaviour
10714	Log an INFO message .
10715	Log an error .
10716	Log a message to out .
10717	Creates a start event .
10718	Create a start event .
10719	Notify all writer listeners .
10720	Returns True if the given resource is available .
10721	Returns True if the given source ID exists in the given source .
10722	Returns True if the given list of resources exists .
10723	Returns a list of resources that match the given IDs .
10724	Get a map from the cache .
10725	Returns the cache key for the given key .
10726	Remove a key from the shared cache .
10727	Store an item in the cache if it does not exist
10728	Returns a mapping of CCF files to their locations .
10729	Include a file .
10730	Include a jar from a file .
10731	Add a string to the default mech .
10732	Add a list of mechanisms to the server .
10733	Create the debug information .
10734	Activate safe post processors .
10735	Register standard events .
10736	Registers an event listener .
10737	Register an event ID .
10738	Try to write a file lock .
10739	Unregisters an event ID .
10740	Check if event can be run .
10741	Create a DSE session .
10742	Create a PlayerError object .
10743	Start a playing song .
10744	Stop playing .
10745	Creates a player command
10746	Create a broadcaster playlist request .
10747	Create a broadcaster from a playlist .
10748	Appends a list of parts to the URL .
10749	Build a query parameter .
10750	Constructs a query parameter .
10751	Build a query parameter .
10752	Add a query parameter .
10753	Get a playlist from an event model .
10754	Launches Nakamura
10755	Wait for nakamura to finish .
10756	Check if a URL exists .
10757	Browse browser button event handler
10758	Creates an ImageIcon from a file .
10759	Entry point to launch nakamura
10760	Set the values to a new array .
10761	Export data to a dictionary .
10762	Returns a JSONResult with the given index .
10763	Gets a JSON result from a JSON object .
10764	Convert value to integer .
10765	Tries to convert value to double
10766	Returns a string representation of the given value .
10767	Create a CommandResource .
10768	Returns True if the given command is valid .
10769	Returns True if the given capabilities is valid .
10770	Verifies that the given command and capabilities are valid .
10771	Execute a batch of statements asynchronously .
10772	Returns a set of subclasses that contain the given class
10773	Returns a set of subclasses of the given fqcn
10774	Search for classes in a directory .
10775	Search for classes in a directory .
10776	Search jar file for classes in the given location .
10777	Convert this resource to a list
10778	Returns the total number of inner maps .
10779	Process a packet .
10780	Get volume from event model .
10781	Create an error message for RSM .
10782	Create an error message
10783	Determines if the event model is a target .
10784	Set the login period to the specified date .
10785	Return a SynchronizedSet .
10786	Set the name of the user .
10787	Set the subscription state .
10788	Returns a collection of roster groups that contain this entry .
10789	Append the RSM element to the query element .
10790	Parses an RSM element and returns a new RSM object .
10791	Filter a list of objects based on a RSM response .
10792	Create a stop event .
10793	Reloads the Roster from the server .
10794	Create a new roster entry .
10795	Returns a collection of roster entries
10796	Get a presence resource from a resource
10797	Called when a presence packet is unavailable .
10798	Notify the Roster listeners .
10799	Set the digest for the connection ID and password .
10800	Generate a MusicResource based on the resource model .
10801	Create a PlayerRequest object .
10802	Return the time passed in event model .
10803	Register an update listener .
10804	Initializes the properties file
10805	Loads the properties from the properties file .
10806	Parse a stream error .
10807	Parses the mechanisms element and returns them as a list .
10808	Parses the compression methods XML element .
10809	Parse an XML packet extension .
10810	Converts a string into a Python object .
10811	Returns True if the given capabilities match .
10812	Gets the playback state from a resource .
10813	Return the secret key for the subdomain .
10814	Returns True if subdomain is multiple allowed .
10815	Stores the given value in the cache .
10816	Return a reference set .
10817	Return reference values .
10818	Remove all entries from a reference
10819	Get the entry for the given key .
10820	Returns the hash of the given key and value
10821	Create a new reference entry .
10822	Check if the presence level is present .
10823	Set the presence .
10824	Update the most vague .
10825	Send a message to all listeners .
10826	Generate a generate script
10827	Initiate the output directory
10828	Load a property file
10829	Write ST to file .
10830	Get the progress from the event model .
10831	Decorate a collection with a new collection .
10832	Discover the service resolver .
10833	Try to resolve the result of the API .
10834	Returns the thread pool .
10835	Create a stop music request .
10836	Returns True if the event model is a stop music .
10837	Get a DSE cluster .
10838	Add a connection listener .
10839	Adds a packet listener to receive packets .
10840	Adds a packet sending listener .
10841	Fires the send listeners of a packet .
10842	Adds a packet interceptor to the list .
10843	Notifies all interceptors of a packet .
10844	Convert a string property to a value .
10845	Called when the server is lost .
10846	Returns the ID of the current thread
10847	Check if the given node is valid .
10848	Returns the key corresponding to the given value .
10849	Get the value at the given index .
10850	Return the next valid value in the data .
10851	Lookup the node at the given index .
10852	Compares two objects .
10853	Returns the node at the given index .
10854	Find the most node at the given index .
10855	Return the next node that is greater than the given index .
10856	Return the most valid node .
10857	Returns the least valid node .
10858	Copy a color from one node to another .
10859	Checks if the node is red .
10860	Returns True if node is black .
10861	Get the parent node at the given index .
10862	Returns the parent node at the given index .
10863	Get the right child of a node .
10864	Get the left child of a node .
10865	Rotates the node at the given index
10866	Rotates the node at the given index
10867	Perform a red black insert .
10868	Perform a red black delete .
10869	Check that o is not a comparable .
10870	Insert a value in the Map
10871	Checks if the given key exists in the thread .
10872	Checks if the given value is a valid value .
10873	Get a value by key .
10874	Remove an element from the list .
10875	Clear all nodes in the tree .
10876	Return the set of keys in the tree .
10877	Returns a collection of values .
10878	Return a filterable set of entries .
10879	Copy all entries to a new map .
10880	Remove expired entries from the linked list .
10881	Cleans up the cache .
10882	Activate the host and port .
10883	Get a PlayerRequest object from a playlist .
10884	Initialize a default RosterStore .
10885	Opens a default RosterStore .
10886	Scan a range of addresses within a range .
10887	Returns an IPv6 address from addr .
10888	Returns the object as a dictionary .
10889	Imports a TrackInfo object from a dictionary .
10890	Add all applications to the classmap .
10891	executes an application
10892	Prints the list
10893	Print usage information .
10894	Command - line entry point .
10895	Create a mute event .
10896	Create a mute event .
10897	Get a schema by name .
10898	writes lines to file
10899	returns True if the executable is in a jar
10900	Add an option to the CLI .
10901	Returns a list of schema fields sorted by id .
10902	Get a schema field by name .
10903	Get the name of a package .
10904	Map content to values .
10905	Create an event .
10906	Sets the state .
10907	Iterate a filterable collection .
10908	Perform an iteration of an iterator .
10909	Get track info from event model .
10910	Export data to a dictionary .
10911	Returns a progress object .
10912	Creates an error image .
10913	Get an image from a URL .
10914	Request a JSON result from a URL .
10915	Reverse a map .
10916	Returns the elements of the cartesian product .
10917	Start the daemon .
10918	This function will return the object to the pool
10919	Create a stop event .
10920	Returns current track info .
10921	Create a new Playlist with new trackInfo .
10922	Shuffle the track list .
10923	Verify that the capabilities are valid .
10924	Export data to a dictionary .
10925	Escape a string for XML .
10926	Called when a challenge is received .
10927	Returns the JSON representation of this object .
10928	Run the main loop .
10929	Handle an event .
10930	Join all queues
10931	Set the value of a property .
10932	Removes the specified property .
10933	Adds the given principal to the list of principals .
10934	Remove the given principal
10935	Called when a root window closes .
10936	Called when the event is encountered .
10937	Called when an event is fired .
10938	Returns True if the resource model is permanent False otherwise .
10939	Set the name of this group .
10940	Checks if the given key is contained in the hash .
10941	Check if the given value matches the given value .
10942	Add a new value to the map .
10943	Clear all entries .
10944	Return the hash of the given object .
10945	Compares two keys .
10946	Returns True if two objects are equal .
10947	Ensure that the new capacity is greater than the specified size .
10948	Returns the new capacity based on the proposed capacity .
10949	Returns an iterator over the entries in the map .
10950	Load an object from a binary stream .
10951	Register the current context
10952	Initialize the addon context .
10953	Notify a reconnection failed .
10954	Notify that an attempt to reconnect .
