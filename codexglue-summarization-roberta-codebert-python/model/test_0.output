0	convert sina XML data to list
1	Download a website
2	downloads sina data from sina
3	Format text with colors .
4	Print text to stderr .
5	Log a message .
6	print a message
7	Return OS compatible OS .
8	Download a video from a channel .
9	get video info from xml
10	get video url
11	Get the M3 URL for a given URL
12	Convert the given text into a canonical representation .
13	Download a video file .
14	Download the specified stream .
15	download video by id
16	Matches a list of patterns .
17	Parse a query parameter from a URL .
18	Get content from url .
19	Make a request to a url
20	Parse hostname and port .
21	Get room id from showroom url
22	helper function to get title from json content
23	Generate WAN files
24	Download WANmen from json .
25	Check if a task has a task .
26	Get the event buffer from the event_ids list
27	Return a snowflake connection
28	Get AWS credentials .
29	Get field from GRRPC .
30	writes the model to the database
31	Copy a table to a temporary file
32	Uploads the object to the specified bucket .
33	Returns the maximum partition of a table .
34	Returns a connection object
35	Show current task state
36	Restarts the worker threads
37	Get the client .
38	Translate values to target language .
39	Retrieve an instance
40	Creates an instance .
41	Patch an instance .
42	Deletes an instance .
43	Get a database
44	Create a database .
45	Patch a database .
46	Delete a database .
47	Export an instance .
48	Starts the sql proxy process .
49	Stops the cloud proxy process .
50	Retrieve the version of the proxy .
51	Create a connection to the database .
52	Retrieve a connection from the database .
53	Delete the database connection .
54	Get the sqlproxy runner
55	Get the database hook .
56	Clean up the database connection .
57	Reserve TCP port
58	Clean up a job id .
59	Extract the error code from an error .
60	Delete all DagRun records .
61	Delete all task instances .
62	Set the state of all DAGs .
63	Print performance results .
64	Periodically heartbeat tasks .
65	Invoke Lambda function
66	Create an evaluation operation .
67	Create a directory if it doesn t exist .
68	Convert string to float if possible .
69	Make a naive datetime aware .
70	Convert a datetime to a naive datetime .
71	Return a datetime instance .
72	Get a connection to druid broker
73	Get a requests session .
74	Execute the HTTP request
75	Check the response .
76	Execute the request and return the response .
77	Context manager to create a session .
78	Decorator to add a session to a function .
79	Reset the database .
80	Get the exception message .
81	Retrieve the records from the database .
82	Get a pandas dataframe from the database .
83	Run a SQL query .
84	Insert rows into table .
85	Get Azure DB client .
86	Check if a collection exists .
87	Create a collection collection .
88	Check if a database exists .
89	Create a new Airflow database .
90	Deletes the specified database .
91	Deletes a collection .
92	Insert documents into the specified collection .
93	Delete a document .
94	Get a single document .
95	Gets documents from a SQL query .
96	Retrieve a function by name .
97	Create a new function .
98	Updates a function .
99	Uploads a function to a zip file .
100	Deletes a function by name .
101	Get the status of the dependency
102	Check if all dependencies have met .
103	Return a list of failure reasons .
104	Parse S3 config file
105	Retrieves the current credentials .
106	Return a connection to the vertica .
107	Flush the buffer .
108	Check if fileloc is a zipfile .
109	Return a list of all python files in a directory .
110	Constructs and returns a TaskInstance
111	Starts the DagFileProcessor process manager .
112	Send a termination message .
113	Exit the DAG processor .
114	Start the process manager .
115	Start the agent in parallel .
116	Start the process in parallel .
117	Refresh the directory tree .
118	Checks to see if the process has elapsed .
119	Clear any missing import errors .
120	Log file processing statistics .
121	Sets the new file paths .
122	Waits until all processors are finished .
123	Perform a heartbeat on the DAG .
124	End the process .
125	Connect to the remote host .
126	Creates a new transfer job .
127	Get a transfer job
128	List all transfer jobs .
129	Updates a transfer job .
130	Deletes a transfer job
131	Cancel a transfer operation .
132	Pause a transfer operation .
133	Resume a transfer operation .
134	Wait for a GCP transfer job to complete .
135	Get all tasks for a given task instance .
136	Return the number of available slots .
137	Execute command and return output .
138	Remove an option from the airflow configuration .
139	Retrieve the airflow section for a given section .
140	Allocate the keys with the given partial keys
141	Begin a transaction
142	Commit a commit .
143	Perform a lookup of keys matching the given keys .
144	Roll back a transaction .
145	Execute a query
146	Retrieve an operation by name .
147	Deletes a running operation .
148	Poll until the operation completes .
149	Export project to storage bucket .
150	Import file from storage .
151	Publish message to target .
152	Return the hostname of the host .
153	Get a connection to the API .
154	Analyze a document .
155	Annotate a document .
156	Classify a document .
157	Returns the template fields for the given full name .
158	Create a role for a template field .
159	Disposes the database connection pool
160	Ensure that the classpath is available .
161	Check if task_id is available .
162	Determine whether the ticket variable is valid .
163	Convert an AlchemyAlchemy object to a dictionary .
164	Yield successive chunks from a list .
165	Apply a function to iterable .
166	Chain multiple tasks together .
167	pretty print a table
168	Render the filename for a given task .
169	Get a connection to the API .
170	Wait for an operation to complete .
171	Coerce the content of a string to a string .
172	Handle the execution of an operator .
173	Run the soap command
174	Fetch the current state of a celery task .
175	Return the number of tasks per process .
176	Get the number of tasks per fetch .
177	Set the value of a variable
178	Get a connection to the API .
179	Creates a new MLEngine job .
180	Retrieve a single job from MLengine .
181	Wait for a job to complete .
182	Create a new version .
183	Set the default version .
184	Returns a list of versions of a project .
185	Deletes a version .
186	Creates a model in the specified project .
187	Get a model from a project .
188	Write batch data to DynamoDB .
189	Integrate the executors module .
190	Get the default executor .
191	Get an executor by name .
192	Called when an error occurs .
193	Get a pymssql connection
194	Trigger a dag .
195	Delete a dag .
196	Get information about a task .
197	Get a list of pools .
198	Create a new pool .
199	Delete a pool .
200	Create or update a container group .
201	Returns the current state and exit code for a given instance .
202	Returns a list of messages for the given instance .
203	Get logs for a container .
204	Delete a container group
205	Check if a container exists in a resource group .
206	Decorator to apply default parameters to func .
207	Constructs the ingest query for the given columns .
208	Get a message from redis .
209	Get a DagRun .
210	Get all task instances in the workflow .
211	Get a TaskInstance
212	Get the previous Dagrun .
213	Get the previous Dagrun .
214	Update the state of the task .
215	Verify the integrity of the workflow .
216	Perform a jenkins request and return the response .
217	Convert a dictionary of airflows into a dictionary .
218	Trigger a controller .
219	Send a metric .
220	Query a metric .
221	Get the DAG for a given dag_id
222	Kill the given zombies .
223	Merge a single DAG into a single DAG .
224	Collects all of the files in the dag .
225	Report the DAG loading of the dagbag .
226	Add datetime to datetime
227	Convert datetime object to string format .
228	Check if file exists .
229	Check if the file exists .
230	Clear all task instances from the database .
231	Return the number of the first attempt .
232	Generate a command to run a job .
233	Return current task state
234	Called when the task instance is logged .
235	Refresh this task instance from the database .
236	Clear the data for this task .
237	Return a unique key .
238	Return True if this task should be done .
239	Calculate the datetime of the next retry .
240	Checks if the request is ready to be ready .
241	Check if the task pool is full .
242	Get DagRun object for this object
243	Push a value onto the task .
244	wrapper for xcom pull_pull
245	Initialize the run context .
246	Closes logging .
247	Get a connection
248	Start an instance .
249	Set the machine type for a resource .
250	Get an instance template
251	Insert an instance template .
252	Get instance group manager .
253	Patch an instance group manager .
254	Wait for an operation to complete .
255	Check if a bucket exists
256	Creates a bucket in S3 .
257	Check if a bucket is in the bucket .
258	List the common prefixes for a bucket .
259	List keys in a bucket .
260	Check if a key exists in S3 .
261	Get object from S3 .
262	Get the contents of a key .
263	Select an object from S3
264	Check if a given wildcard key exists .
265	Get the key matching a wildcard key
266	Load a file from S3
267	Load a string from a string .
268	Upload bytes to S3
269	Load a file - like object from S3
270	Copy an object to another bucket .
271	Query the cassandra .
272	Convert user data type to data dictionary .
273	Sends an email to the user .
274	Get a SpeechClient object .
275	Recognize audio .
276	Execute the query .
277	Load a list of airflow plugins .
278	Check if a plugin is valid .
279	Skips a task run
280	Connect to the Azure Manager
281	Check if file exists .
282	Upload file to remote server .
283	Gets a path
284	Execute the API
285	Uncompress a file into a temporary directory .
286	Return a cursor to the MSSql API
287	Decorate cli action logging .
288	Build metrics for a task .
289	Create a cgroup in the tree .
290	Delete a cgroup
291	Parse a hostname .
292	Perform API call .
293	Get a Salesforce connection
294	Make a query and return the results .
295	Describe an object .
296	Get the available fields for an object
297	Make an object from Salesforce
298	Convert a column to timestamps .
299	Write query results to file .
300	Return a MongoClient object .
301	Get a MongoDB collection
302	Replace multiple documents in a MongoDB collection .
303	Check if a mail attachment exists .
304	Retrieve mail attachments by name .
305	Download mail attachments by name .
306	Get attachments by name .
307	Returns the filename and payload
308	Add records to the delivery stream
309	Get status of a task instance .
310	Send email .
311	Sends an email using SMTP
312	Convert datetime value to UTC .
313	Check if a blob exists .
314	Check if a blob has a given prefix .
315	Create a blob from a string .
316	Reads a file from the specified blob .
317	Delete a file
318	Run MLST .
319	Get ftp connection
320	List files in a directory
321	Retrieve a file from FTP
322	Store a file in the remote memory .
323	Get the modification time of a file
324	Executes the Discord hook
325	Get a connection object .
326	Check if a directory exists .
327	Check if a file exists .
328	List all files and files in a shared directory .
329	Create a directory .
330	Loads a file from a file .
331	Create a file from a string .
332	Load a file from a stream .
333	Get storage client .
334	Copy a blob to another bucket .
335	Download a file from a bucket
336	Upload file to bucket
337	Check if an object exists
338	Check if an object is older than timestamp
339	Delete an object from a bucket .
340	List blobs in a bucket .
341	Get the size of the file in a bucket .
342	Retrieves the checksum of a blob .
343	Get the MD5 hash of an object
344	Create a bucket .
345	Compose a set of source objects into a bucket .
346	Check if the secondary training status was changed .
347	Returns the status message for the secondary training job .
348	Upload and tar files to S3
349	Configure S3 resources
350	check s3 url
351	Get log connection .
352	Creates a training job
353	Creates a new hyperparameter tuning job .
354	Create a transform job
355	Create an endpoint
356	Describe a training job .
357	check the job status
358	Check the status of the training job with logging .
359	Start the dataflow hook .
360	Run migrations .
361	Run migrations .
362	Delete an instance .
363	Create an instance .
364	Creates a table .
365	Deletes a table .
366	Update a cluster .
367	Prepare CLI commands for hive .
368	Prepare the hive configuration options
369	Load data from a Pandas DataFrame .
370	Generate a hql file
371	Get the metastore client
372	Check if a named table exists .
373	Check if a table exists
374	Connect to the hive server
375	wrapper for fetch_results
376	Write results to a csv file .
377	Retrieve records from the database
378	Return a pandas dataframe from the results
379	Get a client .
380	Get endpoint
381	Sends Dinging message
382	Bind parameters to SQL .
383	Escape a string .
384	Cast a string field to a string .
385	Validate that value is of expected type .
386	Get a BigQuery connection
387	Get the BigQuery service .
388	Check to see if a table exists .
389	Create an empty table .
390	Patch a table .
391	Cancels the BigQuery job .
392	Run a table deletion .
393	Runs the specified table in a dataset .
394	Gets the view access to a dataset .
395	Get a dataset .
396	Get list of datasets .
397	Inserts multiple rows into a table .
398	Executes the given operation with the given parameters .
399	Execute an operation on multiple sequences .
400	Moves the next query to the buffer .
401	Return a cursor for the database .
402	Create intermediate directories for remote_directory .
403	Create a queue .
404	Send a message to a queue .
405	Run the command .
406	Cleanup the config file .
407	Parse command line arguments .
408	Build the HTML header .
409	Creates the SVG element
410	Generate JSS chart
411	Create x axis
412	Create a new y axis
413	Return a sqlite3 connection
414	Log action logging .
415	Decorator for gzipped requests
416	Get the last DagRun with the given dag_id
417	Create a dag for a run
418	Send SQS message .
419	Returns a json response
420	Open a file and return an open file object .
421	Generate a cache key for a request .
422	Get a connection to the API .
423	Annotate a video .
424	Get API key .
425	Returns a requests session object
426	Execute the API
427	Build the opsgenie payload .
428	Execute OpsGenie alert hook .
429	Gets the connection
430	Runs a query
431	Check the status of a query execution .
432	Check the status of the query .
433	Return pysftp connection
434	Handles Zendesk API exceptions .
435	Call Zendesk API .
436	Returns a set of partitions from a table .
437	Get a table from the database
438	Get the location of a table .
439	Get the status of a cluster .
440	Delete a cluster .
441	Returns a list of cluster snapshots
442	Restore from a cluster
443	Create a new cluster snapshot .
444	Executes the API call
445	Create a new job flow
446	Filter files by size .
447	Filter out files that are ignored
448	Execute the query
449	Get a pool .
450	Create a new pool .
451	Delete a pool .
452	Convert a dictionary to a python object .
453	Wait for an operation to complete .
454	Get an operation by name .
455	Append a label to a cluster .
456	Create a cluster .
457	Get a cluster .
458	Get Discord webhook endpoint .
459	Build the message payload .
460	Execute the webhook
461	Encrypt a plaintext message .
462	Import a table .
463	Import a query into a directory .
464	Export a table to a staging directory .
465	Get a connection to the API .
466	Synthesize audio .
467	Closes S3 logs .
468	Get the list of init containers defined in the kube config .
469	Generate a dictionary of environment variables .
470	Get worker secrets .
471	Get security context .
472	Get extra links
473	Send a heartbeat for this job .
474	Launch a worker process .
475	Starts a DagFileProcessor process .
476	Check if the process is complete .
477	Exit process gracefully .
478	Update import errors .
479	Process task instances from a queue .
480	Change the state of the task instance with the given state
481	Get the number of tasks in the given states .
482	Change the state of a given task instances .
483	Enqueue tasks with queued task instances .
484	Execute all task instances in the given list of states .
485	Change the state of all tasks that have been executed .
486	Process the executor events .
487	Process a single DAG file .
488	Update the counters and status of a task instance .
489	Manage the state of the executor .
490	Returns a DagRun for the given date .
491	Returns a dictionary of task instances to run .
492	Execute the actions for the given run_dates .
493	Sets unfinished dag runs to failed .
494	Execute the Backfill job
495	This method is called when the job runs .
496	Get client .
497	Get an instance .
498	Apply a function to an instance .
499	Create an instance .
500	Update an instance .
501	Delete an instance .
502	Get database for instance_id .
503	Create a database .
504	Update the database .
505	Delete a database from an instance .
506	Check if the attachment_folder exists .
507	Prepare extra parameters to be merged with additional properties .
508	Return a connection to the cluster
509	Check if table exists .
510	Check if a record exists .
511	Build the command to track the driver .
512	Submit a Spark submit command .
513	Process spark submission logs .
514	Process the spark driver status line .
515	Returns a TaskRunner instance .
516	Wait for the job to complete
517	Return a cursor for a MySQL connection .
518	Configure a csv file with schema .
519	Write a local schema to the database .
520	Returns a dictionary of column types .
521	Maps the SQL_TYPE_TYPE_FIELD_TYPE to the corresponding field name .
522	Execute the Sqoop
523	Decorator to make a function callable
524	Return the extra JSON data .
525	Returns a list of dates
526	Scale an array of time units .
527	Return the number of days after n days
528	Initialize a role in the database .
529	Delete a role by name .
530	Get user roles .
531	Get all permissions for the current user
532	Check if a user has a role
533	Check if a permission is present in the cache .
534	Delete faulty permissions
535	Merge a permission into the database .
536	Update the permissions of the admin view .
537	Synchronize a permission to a dag view .
538	Create permission for all DAGs
539	Get the Fernet object .
540	Invoke the condition on the table .
541	Get the Lambda hook .
542	Retrieve a message from the queue .
543	Connect to hdfs .
544	Try to get a HDFHHook connection
545	Check if the given HDFS path exists .
546	Upload a file to HDFS .
547	Get a connection to the pin broker
548	Returns the URI for the connection
549	Convert date to dict
550	Convert a time object to a dictionary .
551	Returns a redis connection
552	Get a dataframe from the database .
553	Run sql statement .
554	Set autocommit .
555	Insert rows into table .
556	Serialize a cell into a string .
557	Check the health of the scheduler
558	Get extra links for a task .
559	Get a cloudant session .
560	Execute Slack webhook
561	Get credentials from the API .
562	Create an HTTP Http .
563	Decorator to catch http exceptions .
564	Decorator to fall back to default project_id
565	List of unfinished tasks .
566	Prepare the connection command to be executed .
567	Convert image to torch . Tensor .
568	Normalize a tensor .
569	Resize an image .
570	Pads an image to a PIL image .
571	Crop the image .
572	Crops an image .
573	Flip the image horizontally .
574	Return the perspective of the given startpoints .
575	Flip image horizontally .
576	Crop an image .
577	Adjust the brightness of an image .
578	Enhance the contrast of an image .
579	Enhance the saturation of the image .
580	Adjust the hue of an image .
581	Adjust the gamma of an image .
582	Rotate an image .
583	Apply affine transformation to an image .
584	Convert image to grayscale .
585	Save tensor to file .
586	Return a list of the classes in the given directory .
587	Reads a single image file
588	Reads the info file .
589	Read matches files .
590	Compute accuracy .
591	Setup print function
592	Download a URL .
593	List all directories under the given root directory .
594	List all files under the given root .
595	Download a file from Google Drive .
596	Generate random params .
597	Generate random parameters
598	Generate random crop parameters .
599	Returns a list of parameters for each image .
600	Generate a random set of parameters .
601	Download file from Flickr .
602	Download and extract training images .
603	Download and save files to folder .
604	Get the current theme name .
605	Perform autocompletion
606	Render preferences page .
607	Return a list of all the themes
608	Searches the search query
609	Parses the response and returns the result
610	Custom gradient descent .
611	Multivariate Multivariate Normal Network .
612	Calculate the log probability of joint effects .
613	Benchmarking benchmark .
614	Expand the docstring of the decorated function .
615	Generate a simple name from a distribution .
616	Helper function to build a custom RVs .
617	Convert a distribution into a random variable .
618	Decorator to create a random variable .
619	Compute one step - step predictive prediction .
620	Calculate the observed time series .
621	Mask array along axis .
622	Assert that x is finite .
623	Assert that x is equal to rank .
624	Return the size of the event .
625	Evaluate a function on a given dist .
626	Return the identifier for the given identifier .
627	Calculate the size of a mixture family .
628	Get the next interceptor .
629	Decorator to wrap a function into a function .
630	Yield the execution of a function .
631	Generate a toy logistic data .
632	Visualizes the decision visualization .
633	Builds an input pipeline .
634	Check that map_values are valid .
635	Trace a state function .
636	Call a transition operator .
637	Call fn with args and args .
638	Broadcast from_structure to target_structure .
639	Transform a log - probability function to a log probability .
640	Performs a leapfrog step .
641	Performs a metropolis heuristic step .
642	Constructs a Hamiltonian Monomer Monte Carlo .
643	Apply sign to output .
644	Create a Transformer from a dictionary .
645	Convert x to tensor .
646	Create a scale operator .
647	Generate a random normal walk function .
648	Generate a random walk function .
649	Expand dimensions to the tensor .
650	Compute the entropy lower bound for each component .
651	Compute cat probabilities .
652	Validate input arguments .
653	Ensure that TensorFlow is installed .
654	Binary logistic regression .
655	Compute features type and labels .
656	Calculate the cholesky covariance matrix .
657	Compute the standard deviation of x .
658	Calculate variance .
659	Turn axis into positive axis .
660	Squeeze x along axis .
661	Compute the z .
662	Inverse of inv .
663	Computes the temporal trend transition matrix .
664	Gradient transition .
665	Samples a Halton sequence .
666	Get permutations for num_results .
667	Get indices for num_results .
668	Return the size of the base expansion .
669	Return a list of primes less than n .
670	Return machine s eps for the given dtype .
671	Hook for hagerang .
672	Fix the next step size .
673	Wrapper around bracket - search .
674	Shortcut for HagerZoomLineSearch .
675	Perform a line search .
676	Prepare arguments for evaluation .
677	Convert a list of values to a string .
678	Builds a symmetric quadrature symmetric quadrature .
679	Computes a softmax approximation for a softmax normal distribution .
680	Check the parameters of a quad param .
681	Determine the shape of the event .
682	Interpolate loc .
683	Apply interpolation to a graph .
684	Scale operator .
685	Concatenate multiple vectors .
686	r Compute the log - likelihood matrix .
687	r Compute the log - sum of the logmatrix .
688	Compute the tensor matrix .
689	Helper function to extract the log probabilities .
690	Marginal hidden probabilities .
691	Compute posterior marginal marginal .
692	Initialize the posterior .
693	Chooses a random direction .
694	Sample next step .
695	Call fn if fn_like arg_list is None .
696	Right padding .
697	Perform a single step .
698	Build the prior for a parameter .
699	Builds a set of factors for a model .
700	Minimize a step in a graph .
701	Compute the mean and variance of a time series .
702	Compute the initial value of a masked time series .
703	Applies batch_shape to all distributions .
704	Computes the factored multivariate normalization operator .
705	Sum of all multivariate distributions .
706	Computes the empirical mean and variance of observed time series .
707	Expand the observed time series tensor .
708	Canonicalize observed time series .
709	Mix posterior draws from posterior .
710	Return the range of the range .
711	Return a function that returns a summary of the given attribute .
712	Unify a function signature .
713	Calculate distribution names for dist_fn_args .
714	Get the required arguments for a function .
715	Computes the KL divergence between two sequences .
716	Connects the model into the model .
717	Resolve distribution graph arguments .
718	Returns the entropy of the distribution .
719	Decorator to ensure that the argument is not in the distribution .
720	Create an image summary .
721	Visualize reconstruction .
722	Visualize the analysis .
723	Summarize distribution parameters .
724	Summarize the mean .
725	Return the multivariate normalization function .
726	Zero state .
727	Call the LSTM function with respect to inputs .
728	Apply convolution .
729	Generate random likelihood .
730	Reconstruct the model .
731	Sample random prior .
732	Sample from samples .
733	The batch shape of all parameters .
734	Compute batch shape for all parameters .
735	Builds a model - space model .
736	Sample from the prior space .
737	Compute minimum event dimensions .
738	Transforms vector size to square matrix .
739	Return indices of values along given axis .
740	Sort values along axis .
741	Compute ndarray .
742	Approximation of tensorflow .
743	Create ndtriples .
744	Applies a logtran to x .
745	Calculates the asymmetric trend of a series .
746	Derivative error .
747	Langulation .
748	Calculate the log probability of text messages .
749	Benchmark the HMC .
750	Determines if the marginal GP is univariate .
751	Get the marginal distribution .
752	Returns the index points at the given index .
753	Create an IAF stack .
754	Perform one step of the kernel .
755	Bootstrap evaluation function .
756	Return the outer squared difference between two vectors .
757	Compute the value and batch_jacobian .
758	Prevent the second derivative of x .
759	Apply a distribution to x .
760	Splits the covariance of a covariance .
761	Decompose model from posterior .
762	Decompose observed time series .
763	Decompose a forecast according to the forecast distribution .
764	Convert a dense tensor to a SparseTensor .
765	Decorator to convert an attribute to a function
766	Return a string representation of a tensor .
767	Returns the sample shape .
768	Returns the sample shape .
769	Return the sample value .
770	Evaluate the expression .
771	Return the result as a numpy array .
772	Concatenate the sum of a known scale .
773	Create a default MLP template .
774	Uniform unit norm .
775	Log probability of x .
776	Log normalization .
777	Find the common dtype for a list of args .
778	Create a tf . summary statistic .
779	Broadcast tensor to target_to_broadcast .
780	PDF at peak
781	Calculate effective sample size .
782	Compute the effective sample size for a single state .
783	Reduction reduction reduction .
784	Return the size of the input tensor .
785	Helper function for broadcast_arg .
786	Calculate a polynomial - Hermite quadrature .
787	A quadrature scheme for quantiles .
788	Merge two Mappings .
789	Return a copy of this Mapping .
790	Merge two values .
791	Recursively flatten a nested tuple .
792	Creates a tensor .
793	Finds the indices of the best interval .
794	Builds a slice of slice bounds .
795	Sample from the chain .
796	Samples a single slice from x_initializer .
797	Returns a set of values for a random variable .
798	Create log - probability function for a model .
799	Extract input keyword arguments from source .
800	Vertical convolution block .
801	Builds a tree model .
802	Decorator to check if value is None .
803	Returns true if there is no u - turn .
804	Leapfrog .
805	Computes the log probability of the target .
806	Generate random Bernstein - Bernstein random variates .
807	Creates a default scale function .
808	Creates a default normal function .
809	Create a default multivariate Normal distribution .
810	Deserialize function .
811	Serialize a function .
812	Broadcasts a structure from one structure to another .
813	Convert a nested structure to a tensor .
814	Convert a list of arguments into a tensor .
815	Call fn with args .
816	Get attributes from Tensorlike object .
817	Create a mixture - family prior for a mixture of variance .
818	Pack images into memory .
819	Download a file to a directory .
820	Build fake input functions .
821	Validate the block sizes .
822	Check that the inputs are broadcast .
823	Compute multivariate normal tril .
824	Bernoulli .
825	Normalization .
826	Poisson distribution .
827	Generate the proposal state .
828	Calculate the drift part .
829	Computes the log acceptance correction .
830	Call the volatility function with gradients .
831	Helper function for broadcast volatility .
832	Make an AR transition matrix .
833	Determine the shape of x .
834	Apply fn to the output shape .
835	Call fn on event_shape .
836	Deprecated .
837	Flat the joint distribution .
838	Allocate a set of words for a topic .
839	Return an edda function for a set of words .
840	Takes a list of topics and returns a list of strings for each topic .
841	Loads the newsgroups dataset .
842	Build fake input functions .
843	Builds input functions .
844	Minimize the optimization .
845	Adds control_dependencies .
846	Save numpy arrays to a file .
847	Visualizes training images .
848	Loads the Bernoulli dataset .
849	Cast a dtype to a numpy dtype .
850	Return the base dtype of a dtype .
851	Check if dtype is boolean .
852	Check if dtype is complex .
853	Return the maximum value of a dtype .
854	Return the name of a tensor .
855	Return the size of the given dtype .
856	Assert that all items have the same base type .
857	Assert that tensor is the same type .
858	Minimize an objective function .
859	One - hot algorithm .
860	Return a function that returns a function that evaluates to a value .
861	Exponential expansion function .
862	Returns a function that evaluates to a contraction .
863	Shrink down the smallest solution .
864	Replace replacement with replacement .
865	Check if the solution is converged .
866	Validate the arguments for the objective function .
867	Prepare the arguments to be passed to the solver .
868	Prepare the arguments for evaluation .
869	Evaluate objective function .
870	Generates a plot of weighted mean and standard deviation .
871	Plots the predicted prediction for a given set of probabilities .
872	Build a fake data structure .
873	Get keras configuration .
874	Create a TensorFlowConfig from a dictionary .
875	Matrix multiplication .
876	Helper function to compute standard deviation .
877	Assigns a log_moving_mean to a tensor .
878	Ensure x is a columnar .
879	Random RADemacher .
880	Return a random ray .
881	Pick a scalar condition from pred .
882	Finish the log probability for each event .
883	Finish the probability of a single fiber .
884	Rotate dimensions of x .
885	Undo batch normalization .
886	Validate BatchNormalization layer .
887	Slice a single parameter .
888	Return a dictionary of parameters for each slice in a slice .
889	Apply a single step .
890	Apply slice_overrides to a sequence .
891	Slice a batch of slices into a batch of slices .
892	Fit a model to a model .
893	Returns a function that returns a new convergence criteria .
894	Prepare the arguments for inference .
895	Return the number of cols .
896	Prefix static and static_fn .
897	Copy docstring to original_fn .
898	Convert a pred to a boolean value .
899	Return the rank of the input shape .
900	Returns a case where the predicate is a case .
901	Create a context scope .
902	r Compute the standard deviation .
903	Makes a trilomial .
904	Make a diagonal scale .
905	Get shapes from loc and scale .
906	Check if scale is a diagonal .
907	Check if a scalar distribution is valid .
908	Pad the tensor dimensions .
909	Selects a single scalar condition .
910	Moves a dimension from one dimension to another .
911	Check if x is nonnegative .
912	Tests if two dynamic shapes are equal .
913	Retrieves the static value of x .
914	Determine if dtype is unknown .
915	Determine if dtype can be signed by dtype .
916	Returns the largest integer in the given dtype .
917	Return the smallest integer in the given dtype .
918	Check if dtype is an integer - like object .
919	Check that categorical event is shape .
920	Calculate log - permutations .
921	Rotate x .
922	Returns a pickle vector .
923	Prefer a copy of static_broadcast_shape .
924	Generate a new seed
925	Create a tridiagonal matrix .
926	Return dimension size .
927	Transforms quadrature and probability grid of quadrature .
928	Return a copy of the parent frame .
929	Expand inputs to a tensor .
930	Create output_tensor with specified dependencies .
931	Validate the correct dimensions .
932	Validate permutation .
933	Return the shape of the event .
934	Concatenate two tensors .
935	Return the dimensions of x .
936	Merge two tensors with another .
937	Return a new TensorShape with the given rank .
938	Check that the target shape is equal .
939	Extracts the shape of the batch .
940	Build a backward pass through a backward step .
941	Update backward smoothing .
942	Build a single filter step .
943	r Linear Gaussian update .
944	Compute the Kalman transition matrix .
945	Build a step of kalman .
946	Build a step - recursion function .
947	Builds a sample sampling step .
948	Propagate mean .
949	Propagate covariance matrix .
950	Backsliding smoothing .
951	Sample n times .
952	Compute posterior marginal marginal posterior .
953	The mean mean .
954	Joint covariance matrix .
955	Applies latent_means to observations .
956	Normalization function .
957	The mode of the concentration .
958	Rotate the tensor .
959	Sample from the tensor distribution .
960	Return a copy of a function .
961	Remove keys from a dictionary .
962	Recursively replace dictionaries with pretty_dict .
963	Get n samples from dist .
964	Check if x is a namedtuple .
965	Returns the base case for the input .
966	Selects a type based on the accepted parameters .
967	Safe sum of x .
968	Internal function implementation .
969	Call fn with gradient and gradients .
970	A wrapper for smart_for_loop .
971	Perform a trace scan .
972	Return a copy of the setter .
973	Makes a getter that returns the innermost results .
974	Enables parameters in a kernel .
975	Replace event_shape with input_shape .
976	Replace event shape with event shape .
977	Check if the shape is valid .
978	Returns True if all inputs have converged .
979	Get parameters for initial state .
980	Line search .
981	Restrict the function along the given direction .
982	Update the position of the current state .
983	Check convergence between two objectives .
984	Broadcast value to target .
985	Compute the harmonic of x .
986	Returns a function that can be used to create an exchange function .
987	Extract a field from kernel results .
988	Compute the set of states for each state .
989	Variance scaling term .
990	Returns a function that returns the forward log - likelihood function .
991	Returns a function that returns a function that transforms a bijector .
992	Returns a function that returns the inverse transform function .
993	One step of the transformer .
994	Like tf . tf . Tval .
995	Secondant version of secant2 .
996	Second step .
997	Performs a second - step update on the current batch .
998	Update the value_and_gradient function .
999	Batch objective function .
1000	Batch bisect .
1001	Batch bisection function .
1002	Check if two values are finite .
1003	Checks if the value is a WolfEulfe .
1004	Compute the secant between two values .
1005	Generate a simple step - policy update policy for a standard rollout .
1006	One - step implementation .
1007	Computes the log acceptance correction .
1008	Perform one step of the Hamiltonian .
1009	Bootstrapped kernel results .
1010	A Bayesian Resnet .
1011	Resnet block .
1012	Create an encoder for a bag of words .
1013	Create a decoder for a set of topics .
1014	Create a Dirichlet distribution .
1015	Sample from Markov chain .
1016	Create exponential family .
1017	Train a deterministic d .
1018	Train a Gaussian gamma .
1019	Download NIPS 2000 papers .
1020	Initialize the params .
1021	Determines the k priority of two lists .
1022	Read image from file .
1023	Download all sprites .
1024	Create a character matrix .
1025	Create a sequence of frames .
1026	Creates a random sequence .
1027	Create a dataset .
1028	Validate distributions .
1029	Flatten a list of kernels into a list of kernels .
1030	Flatten a list of kernels into a list of kernels .
1031	Build fake data .
1032	Count the number of elements in an array .
1033	Find bins in x .
1034	Create histogram histogram .
1035	Compute quantiles of x .
1036	Get the ndims of x .
1037	Append dimensions to x .
1038	Make a list of axis indices .
1039	Move dimensions to flat_dims .
1040	Sorts a tensor by the first dimension .
1041	Builds a set of model states for each component .
1042	Calculate the Amariance .
1043	Computes the KL - Leibler for the given log - likelihood .
1044	Compute the Jensen - Shannon coefficient .
1045	Calculate the Pearson correlation coefficient .
1046	Squared Hankeler .
1047	Compute the diagonal of the tensor .
1048	Compute the power of the tensor .
1049	Absolute logarithm .
1050	Compute the Jacobian Hessian .
1051	Computes the modifiedgan .
1052	r Compute dual CSiszar factor .
1053	Symmetrized CSisarzar function .
1054	Calculate the CSiszar divergence .
1055	Implementation of CSIsARzar .
1056	Raise an error if x is not compatible .
1057	Batch gather parameters .
1058	Broadcast an event to a tf . event .
1059	r Logical expectation .
1060	Broadcast an event with samples and samples .
1061	Minimize an optimization .
1062	Check the inputs for the inverse Hessian .
1063	Update the inverse Hessian .
1064	The inverse update term .
1065	Matrix multiplication .
1066	Compute the tensor product of two tensors .
1067	Transpose matrices .
1068	Pad x with ndims .
1069	r Compute the sum of ndims .
1070	Squared square root of x .
1071	Return the common dtype of arg_list .
1072	Minimize an objective function .
1073	Returns initial state optimizer results .
1074	Get the search direction .
1075	Make an empty queue for an element .
1076	Push a queue onto the queue .
1077	Return the PSD of x .
1078	Return true if x_bounds is larger than det_bounds .
1079	Create a uniform correlation matrix .
1080	r Compute the correlation matrix .
1081	Compute the Clamped pearson confidence interval .
1082	Computes the true volume of the given det_bounds .
1083	Implementation of von Mises .
1084	Cumulative density function .
1085	One step of one step .
1086	Minimize objective function .
1087	Get initial arguments for objective function .
1088	Find the highest value in a population .
1089	Checks the convergence value for the population .
1090	Constructs the starting population .
1091	Performs binary crossover on the population .
1092	Get mutators for a population .
1093	Gets the indices of the inputs for the given size .
1094	Ensure tensor is a list .
1095	Converts to a TensorFlow .
1096	Soft - threshold .
1097	Clips a tensor by the given value .
1098	Build pipeline pipeline for training .
1099	Plot generated images .
1100	Convert a list of operators into a string .
1101	Call the LSTM .
1102	Evaluate latent function .
1103	Tensor of x .
1104	Calculate the tensor of x .
1105	Compute the rank of a matrix .
1106	Perform a pinv .
1107	Perform LU solver .
1108	Compute the inverse of the LU decomposition .
1109	Reconstruct tensor assertions .
1110	Constructs assertions for LU .
1111	Helper function to create a sparse block diagonal .
1112	Validate a matrix .
1113	Gradient of negative log likelihood .
1114	Fit a model to a sparse model .
1115	Generate slices for num_blocks .
1116	Generate a tf . mask .
1117	Create a dense dense graph .
1118	Create an input order based on input_size .
1119	Create a list of degrees .
1120	Create masks for input degrees .
1121	Makes a masked initializer from a mask .
1122	Build the graph .
1123	Call the autoregressive layer .
1124	Draw samples from multinomial distribution .
1125	Create a zero - dimensional multivariate Gaussian .
1126	Creates a function that returns the observation function for the given time series .
1127	Computes weights for the given parameters .
1128	Get the depth of a graph .
1129	Return the highest order of dependencies .
1130	Returns a function that flattens the best order rule .
1131	Build the graph .
1132	Calculate the variational loss .
1133	Minimal posterior .
1134	Builds the last day of the given number of steps .
1135	Builds a matrix of effects to residuals .
1136	Builds a transition matrix .
1137	Builds the seasonal transition noise .
1138	r Computes the transition noise model for the given effects .
1139	Check if observation data is empty .
1140	Validate the observation data .
1141	Adds a schedule to the scheduler
1142	Sets the checkpoint at the given path .
1143	Sets gradient clipping .
1144	Optimize the optimization .
1145	Sets training summary .
1146	Sets the value summary .
1147	Create an optimizer .
1148	Sets the training data .
1149	Set the summary trigger trigger .
1150	Download train images .
1151	Get a list of the news2020 texts
1152	Get the wove v2 v2 .
1153	Compile the optimizer .
1154	Fit the model to the dataset .
1155	Evaluate the model .
1156	Predict the sample .
1157	Get MNIST dataset .
1158	Preprocess the MNIST dataset and test data .
1159	Returns the max trigger number for the given options
1160	Validate the optimizer .
1161	Get the value of the configuration
1162	Call a BigDL function
1163	Call a Java function on the gateway .
1164	Convert an RDD to Java object .
1165	Convert Python objects to Java .
1166	Get an activation by name .
1167	Create BigDL from a ndarray .
1168	Get the label of the image .
1169	Read an ImageFrame from a parquet file .
1170	Writes a parquet file to disk .
1171	Get the image data .
1172	Get a 2D numpy array of float images .
1173	Returns the labels of the distributed ImageFrame .
1174	Get the predicted image values .
1175	Predict on input data .
1176	Fit the model .
1177	Returns the transformed dataset .
1178	Save a Keras model definition to a file .
1179	Build keras model .
1180	Predict the class of the underlying class .
1181	Sets weights on the tensor .
1182	Get weights for the layer .
1183	Saves the tensorflow to disk .
1184	Call the evaluation function .
1185	Load a torch file .
1186	Load Keras backend .
1187	Construct a Criterion from a jcriterion .
1188	Load weights from a json file .
1189	Load training dataset .
1190	Build keras model .
1191	Get input shape .
1192	Get output shape .
1193	Get MNIST dataset .
1194	Extract ratings data sets .
1195	Return the bigDL classpath for bigDL
1196	Return True if spark version is less than 2 . 2 . 0 .
1197	Exports a checkpoint file .
1198	Saves the given variable to the given tensor .
1199	Expand the tile shape .
1200	Precomputed symbols from trie .
1201	Simple simple attention layer .
1202	Performs attention .
1203	Compute BLEU score .
1204	Get the log file
1205	Log an utterance .
1206	Generate summaries for gradients .
1207	Dump weights to disk .
1208	Read dataset from JSON .
1209	Train an evaluation model from a config file .
1210	Interactively interact with agent .
1211	Convert a set of labels into one hothot
1212	Convert labels to one hothot
1213	Create a tf session .
1214	Load the model .
1215	Get the momentum variable .
1216	Update graph variables .
1217	Calculate the F1 score of the mean function .
1218	Process a single word .
1219	Starts a stacked convolution layer .
1220	Basic Bi - RNN layer .
1221	Create a stacked RNN layer .
1222	Builds a stacked high - level highway layer .
1223	Embed a random embedding layer .
1224	Builds a CUD layer .
1225	Create a GNN Cell with UUIDs .
1226	Create a LSTM layer .
1227	Create LSTM compatible with USTM .
1228	Wrapper for cudnn .
1229	Create the LSTM .
1230	Builds a concatenation .
1231	Wrapper for variational dropout .
1232	Build the network .
1233	Builds word CNN .
1234	Build basic basic network .
1235	Train the model on a batch of data .
1236	Predict on batch labels .
1237	Convert a list of sentences into a ndarray .
1238	Convert a list of tags into a vector .
1239	Calculate BLEU measure .
1240	Verify a URL
1241	Extract X509 certificates from a string .
1242	Verify certificates chain .
1243	Verify the request signature .
1244	Verify the authenticity of the signature chain .
1245	Returns a list of all control controls .
1246	Returns a list of the msbot framework .
1247	List of telegram controls .
1248	Returns a list of the editor controls .
1249	Main entry point .
1250	Decorator to wrap a function into a graph .
1251	Decorator to use Keras backend .
1252	Compute accuracy of two examples .
1253	Round accuracy .
1254	Initializer for pretrained embedding .
1255	Read data from file path .
1256	Creates a default agent for this agent .
1257	Convert x to one - hot encoding .
1258	Pretty print metrics .
1259	Populate the default settings directory .
1260	Load the model .
1261	Save the model to disk .
1262	Get the optimizer for loss .
1263	Search a word for a given word .
1264	Make the default operation cost for all operations .
1265	Start the conversation timer .
1266	Handle incoming request .
1267	Process the utterance .
1268	Generate the response dictionary
1269	Handle incoming intent
1270	Handle the launch request .
1271	Handles an unsupported message .
1272	Prints a pretty representation of the struct .
1273	Convert ELMo loss loss to float .
1274	Build a chainer .
1275	Interactively interact with model .
1276	Run model on file .
1277	Read input file .
1278	Return a function from a module name .
1279	Decorator to register a metric .
1280	Get a metric by name .
1281	Return the decay type from a string label .
1282	Find the best value based on loss_division_division_division
1283	The embedding function
1284	Read requirements from requirements file .
1285	Compute the log loss
1286	Export a weight module to a hub .
1287	Returns a string with the details of a dictionary
1288	Create an ecommerce agent
1289	Entry point for the bot .
1290	Download a file from the destination_url .
1291	Unpack a tar file
1292	Decompress a URL .
1293	Recursively update a dictionary .
1294	Add md5 hash to a url
1295	Set a query parameter to a URL .
1296	Return the token representation of the card .
1297	JSON representation of control .
1298	Builds a card action
1299	json representation of control
1300	Generate a ms_bot_bot_bot message
1301	Compute the F1 F1 F1 score .
1302	Calculate recall at k_true
1303	Check if GPU is available .
1304	Recursively parse a config property .
1305	Parse DEEPVOV configuration file .
1306	Expand the given path .
1307	Create a Component from a dictionary .
1308	Run the main loop .
1309	Delete a conversation .
1310	Refresh expired certificates
1311	Verify the request signature
1312	Handle incoming request
1313	Return class from module name .
1314	Decorator for registering a model class .
1315	Get model by name .
1316	Get the regularization path for a model .
1317	Make a GLM model .
1318	Create an H2Cluster object from keyvals .
1319	Shutdown the H2 instance .
1320	Check if the server is running .
1321	Show the status of the cloud .
1322	List all available jobs
1323	Return the list of time zones .
1324	Set properties from h2cluster object .
1325	List of metalearner parameters .
1326	Starts the test_func at the given time .
1327	Get summary of a frame
1328	Delete a frame by key .
1329	Get model builders .
1330	Validate model parameters
1331	Compute metrics for a given model .
1332	Get model metrics .
1333	Delete a model by key
1334	Helper function for tabular output .
1335	Run EC2 instances .
1336	Terminate instances .
1337	Stop instances .
1338	Start instances .
1339	Reboot instances .
1340	Wait for SSH to complete .
1341	Get the full name of a function .
1342	Recursively find function from given frame .
1343	Get the signature of a function .
1344	Wrap the given text .
1345	Wait for this job to finish .
1346	Trains the model .
1347	Fit the model .
1348	Get a dictionary of parameters for this estimator .
1349	Task handler .
1350	Remove the output directory .
1351	Remove RSandbox directory .
1352	Get port from stdout .
1353	Scrape cloud size from stdout .
1354	Stop the JVM .
1355	Stop all connected nodes .
1356	Get the IP of the client .
1357	Get the port of this node .
1358	Return the roc value of the model .
1359	Determine the size of each column in the pre_trained model .
1360	Absolute mean absolute error .
1361	r Mean squared error .
1362	Absolute mean absolute error .
1363	H2O2 . 1 . 2 . 2 . 1 . 2 . 2 . 2 . 2 . 1 . 1 .
1364	Raise an H2OTypeError if var is a type of types .
1365	Fail if value matches a regular expression
1366	Raises an AssertionError if condition is not satisfied .
1367	Extract the assertions from the file .
1368	Check if var is a valid type .
1369	Returns the name of the given vtype
1370	Generate source code for lambda function
1371	Check if variable is type of type
1372	Checks if variable is in the list .
1373	Get the current configuration
1374	Read config files .
1375	Yield paths to h2oconfig files .
1376	Execute the job .
1377	Store the current progress of the model .
1378	Recalculate model parameters .
1379	Estimate the completion time .
1380	Guess the next poll interval
1381	Compute progress at time t .
1382	Calculate the time at x_target
1383	Draw text to stdout .
1384	Compute the size of the widgets .
1385	Get terminal size .
1386	Set the encoding of the file .
1387	Fit the encoder to the target frame .
1388	Get an H2O frame from the given frame ID .
1389	Refresh the cache .
1390	Return the type of a column .
1391	Filters columns by type .
1392	Print a summary of the h2o frame .
1393	Describe the frame .
1394	Return the first n rows of the DataFrame .
1395	Multiply a matrix .
1396	Return a list of levels .
1397	Return the number of levels
1398	Set the level of the table .
1399	Set the domain levels .
1400	Rename the table .
1401	Set the column names .
1402	Set the column name .
1403	Check if an item is in the table .
1404	Create a row - fold row with kfold folding .
1405	Sets a row of stratified kfolded data .
1406	Show H2O structure .
1407	Return a pandas dataframe as a pandas dataframe
1408	Remove a column from the table .
1409	Compute the quantile of each column .
1410	Concatenate multiple frames .
1411	Binds the given dataframe to a new DataFrame .
1412	Apply rbind to each frame .
1413	Split the data into multiple splits .
1414	Creates a group by the given index .
1415	Fill missing values with given axis .
1416	Impute values in a column .
1417	Merges two columns .
1418	Create a new H2O level
1419	Insert missing values in the dataset
1420	Compute the variable variance .
1421	Compute the Pearson correlation matrix .
1422	Compute the distance between y and y .
1423	Convert this DataFrame to a factor .
1424	Split string by pattern .
1425	Count the number of matches matching pattern .
1426	Creates a new H2oFrame containing a substring of a substring .
1427	Return a new row with lstrip .
1428	Compute the entropy graph .
1429	Compute the number of valid substrings for the given path .
1430	Create a table containing table data .
1431	Generate a histogram plot .
1432	Compute the index of the words .
1433	Return a new expression with replacement for replacement .
1434	Uppercase expression .
1435	Generate an expression that matches the given pattern .
1436	Create a new table with NaN values .
1437	Compute the difference between two frames .
1438	Create a DataFrame containing NA values .
1439	Sets the minute expression of this Frame .
1440	Creates a new H2OO .
1441	Returns a random set of stratified split_frac .
1442	Return a new Frame with the given breaks .
1443	Compute the maximum value of the Index .
1444	Apply a function along axis .
1445	Parse the given text .
1446	Parse a YAML file .
1447	Move the cursor to the given drow .
1448	Parse untoken data .
1449	Returns the size of the centroid .
1450	List of centers
1451	Returns the center standard deviation .
1452	Connect to a server
1453	Make a request to the API
1454	Check the version of the cluster .
1455	A lazy import loader .
1456	Upload a file to a CSV file .
1457	Import data from a CSV file .
1458	Import a Hive table .
1459	Import an SQL table .
1460	Import SQL table
1461	Parse a raw setup frame .
1462	Return a copy of the data .
1463	Returns the model for the given model_id .
1464	Get a grid from a grid
1465	Get a single frame
1466	Download a POJO file to a POJO .
1467	Download a CSV dataset to a file
1468	Download all H2O logs to directory .
1469	Export a frame to a file
1470	Convert data to a pandas dataframe .
1471	Run a demo function
1472	Uploads a file to the h2o_data directory .
1473	Generates metrics for the model
1474	Upload a key to S3
1475	Upload a custom metric function to CloudMetrics .
1476	Validate frame id .
1477	Return a human readable string representation of a number of bytes .
1478	Normalize a slice .
1479	Check if a slice is normalized .
1480	Run a mojo prediction from a dataframe
1481	Use mojo to predict a trained model .
1482	Decorator to mark a function as deprecated .
1483	Wait for the queue to complete .
1484	Get the deep features for the given test data .
1485	Prints a summary of the model
1486	Show the hyperparameters table
1487	Returns the hyperparameters for the given id .
1488	Get the hyperparameters for the given id .
1489	Get a grid object from the model
1490	Returns a dictionary of F1 models .
1491	Returns a pandas dataframe of the model
1492	Projects the ARCH dataframe in the test frame
1493	Plot the model .
1494	Translate name to lowercase
1495	Determines the indent for the given text
1496	Extract run info from a python file
1497	Run the ExtractRuntimeRuntimeLog .
1498	Close the session .
1499	Returns the session id
1500	Start logging .
1501	Prepare data payload .
1502	Prepare file payload .
1503	Log a start transaction .
1504	Log the end of a transaction .
1505	Log a message .
1506	Process a HTTP response .
1507	Print a message
1508	Retrieves the model for the specified project .
1509	Downloads the job from the leader .
1510	Download the model from the leader .
1511	Fit the model
1512	Apply transform to X .
1513	Transform X to X
1514	Extract the true string from a string .
1515	Find the node_name from the node_list if it exists
1516	Find git hash branch
1517	check for build timeout
1518	Find the build failure
1519	Find the build id for the given line .
1520	Extract the job URL from a URL string .
1521	Collects the global java message
1522	Saves the test dictionary to the console
1523	Update the global summary file .
1524	Write file content to filehandle
1525	Writes a Java Message
1526	Loads all messages to ignore .
1527	Normalize enum constants .
1528	Find synonyms for word .
1529	Poll the job .
1530	Saves the assembly to a file
1531	Fit a frame to a frame
1532	Find the percentile of a sorted list .
1533	Return a dictionary with default values
1534	The actual params .
1535	Sends deep features to the test data
1536	Get the scoring history
1537	Shows the current model .
1538	Returns variable importances .
1539	Returns the residual degrees of freedom in freedom .
1540	Get coefficients .
1541	Downloads the model to the given path .
1542	Downloads the MOJO file for this model
1543	Save model details to path .
1544	Check that the targets are valid .
1545	Returns a list of cross validation models .
1546	Runs the GBM boosting model .
1547	A demo of the H2O model .
1548	A demo of the general model .
1549	Wait for a key press .
1550	Return the table as a pandas DataFrame .
1551	Display the table contents .
1552	Creates a JVM instance .
1553	Searches for h2o . jar if not found .
1554	Yields h2o_jar paths .
1555	Return the hit ratio for this model .
1556	Return a csv writer .
1557	Return the path to a package .
1558	Convert a directory path into a URI .
1559	Return a sorted list of functions .
1560	Generate the documentation for the given uri
1561	Find all modules in the directory tree .
1562	Write API documentation to outdir .
1563	Write an index file .
1564	Converts the table to a list of integers .
1565	load json from file
1566	Add new ignored messages to the dict .
1567	Updates the message dictionary with the given message
1568	Extract messages from a file
1569	Save json file
1570	Print a dictionary containing all the keys in the config file
1571	Parse command line arguments .
1572	Print usage information .
1573	Locate all python files in a directory .
1574	Find the spell in a file .
1575	Main function .
1576	Apply transform to the pipeline .
1577	Summarize all failed test runs .
1578	Extracts the output to printout .
1579	Plot the ROC curve .
1580	Calculate confusion matrix .
1581	Checks if a Deepwater model is available
1582	Remove data from last month to month .
1583	Return a dictionary of all endpoint groups
1584	Update site model with current settings .
1585	Return data as JSON .
1586	Comment on a given user .
1587	Get the credentials from the user .
1588	Like the most recent feed .
1589	Like the most recent media .
1590	check if user is not bot
1591	read a list from a file
1592	Add a schedule to the queue .
1593	Define this message .
1594	Download an ARVA .
1595	Guess a service name from a spec .
1596	Updates a power shell command .
1597	Deletes an application by ID .
1598	Create an application definition .
1599	Build the URI for the request .
1600	Get a connection to the given request .
1601	Perform a single request .
1602	Execute script_actions on a cluster .
1603	Checks the name of a front door name .
1604	Purge a deleted vault .
1605	Get the Authorization server .
1606	Validate the request URI .
1607	Returns a profile object
1608	Retrieve CLI credentials for a resource .
1609	Resolve a resource .
1610	Checks a service s name availability .
1611	Opens a HTTP request .
1612	Sets the timeout .
1613	Sets a request header .
1614	Retrieves the response headers .
1615	Send a request .
1616	Get the status of this request .
1617	Retrieves the status of the request .
1618	Returns the response body .
1619	Sets the client certificate .
1620	Send a request to the server .
1621	put a request header
1622	Send the given request body .
1623	Get a response object .
1624	Get a readable id from a given id_name .
1625	Get serialization name .
1626	Verify a face to a person .
1627	Adds a new batch .
1628	Get the properties of an entry .
1629	Get the children of a node .
1630	Find the namespaces in the given child node .
1631	Return a ServiceBus Namespace object from the given XML string .
1632	Creates a ServiceBusRegionRegion object from a string .
1633	Convert an XML string to a availability response .
1634	Convert an XML string to a Metadata object .
1635	Replace the content of a runbook .
1636	List domain recommendations .
1637	Update an update operation .
1638	Gets the group groups .
1639	Build a package from a repository .
1640	Import data from a resource .
1641	Publish a runbook .
1642	Renew the lock .
1643	Perform a replace operation .
1644	Adds a value to a SecretValue resource .
1645	Get storage account properties .
1646	Gets a list of storage accounts for a given service .
1647	Regenerates the keys of a storage account .
1648	Create a storage account .
1649	Updates an existing storage account .
1650	Deletes a storage account .
1651	Fetches information about a storage account name .
1652	Get information about a specific hosting service .
1653	Creates a hosted service .
1654	Deletes a hosted service .
1655	Create a new deployment .
1656	Deletes a deployment .
1657	Swap the specified deployment from a service .
1658	Change the configuration of a deployment .
1659	Updates a deployment status .
1660	Upgrade a deployment .
1661	Updates the specified upgrade domain .
1662	Reboot a role instance .
1663	Deletes the specified roles .
1664	Fetches information about the specified service name .
1665	Lists the certificates for a service .
1666	Gets the details of a particular service .
1667	Adds a certificate to a hosted service .
1668	Deletes a certificate .
1669	Gets the management certificate for this subscription .
1670	Adds a certificate certificate .
1671	Deletes a certificate certificate .
1672	Gets the information about the affinity group .
1673	Creates a new affinity group .
1674	Deletes an affinity group .
1675	List subscription operations .
1676	Creates a reserved IP address .
1677	Deletes a reserved IP address .
1678	Associate a reserved IP address .
1679	Disassociates a reserved IPv4 address .
1680	Gets a reserved IP address .
1681	Gets a specific role .
1682	Creates a virtual machine deployment .
1683	Adds a role to a service .
1684	Updates a role .
1685	Deletes a role .
1686	Captures a role .
1687	Start a new Role instance .
1688	Start the specified roles .
1689	Restart a role .
1690	Shutdown a role .
1691	Shutdown the specified roles .
1692	Adds a DNS server .
1693	Updates a DNS server .
1694	Deletes a DNS server .
1695	Gets a list of resource extensions .
1696	Replicates the replication of a VM .
1697	Unplicates a VM image .
1698	Shows the permissions of a VM .
1699	Creates a new VM image .
1700	Deletes a virtual machine image .
1701	Lists the VM images .
1702	Updates the VM image .
1703	Adds an OS image .
1704	Updates an image .
1705	Updates the OS image from an image reference .
1706	Deletes an OS image .
1707	Gets the data disk of a specified role .
1708	Adds a virtual disk .
1709	Updates a virtual disk disk .
1710	Deletes a data disk .
1711	Adds a disk .
1712	Updates a disk .
1713	Deletes a disk .
1714	Summarize the policy for a management group .
1715	Build receiver .
1716	Request next available messages .
1717	Renew the lock .
1718	Create or update a virtual machine scale set .
1719	Converts a VM scale group to a single placement group .
1720	Sets a screen text .
1721	Creates a new key .
1722	Creates a new key .
1723	Updates a key .
1724	Sets a secret .
1725	Sets a certificate set for a vault .
1726	Create an instance from a connection string .
1727	Get a subscription for a given topic .
1728	List all subscriptions for a given topic .
1729	Sends multiple messages .
1730	Get sender instance .
1731	Return receiver instance .
1732	Create a Receiver for this entity .
1733	Parses an Async operation response .
1734	Perform a GET request .
1735	Perform a PUT request .
1736	Wait for an operation to complete .
1737	Gets the status of an operation .
1738	Update the HTTP header based on the request .
1739	Validate the package .
1740	Gets certificates for a vault .
1741	Returns a list of Region objects representing the region .
1742	Lists the namespaces .
1743	Gets a namespace .
1744	Creates a new namespace .
1745	Deletes a named namespace .
1746	Checks the availability of a namespace .
1747	Gets a list of topics .
1748	List a notification hubs .
1749	Gets all relay directions .
1750	Gets the metrics for a given queue .
1751	Gets the metrics for a given topic .
1752	Gets the metrics rollups for a given metric .
1753	Gets the metrics for a given metric .
1754	Create an Environment .
1755	Create a new virtualenv with packages .
1756	Creates a new SQL Server .
1757	Sets the admin password for a server .
1758	List server quotas .
1759	Gets the event logs for a given server .
1760	Creates a new firewall rule .
1761	Updates a firewall rule .
1762	Deletes a firewall rule .
1763	List all firewall rules .
1764	Gets a list of service objectives .
1765	Creates a database .
1766	Updates a database .
1767	Deletes a database .
1768	List databases .
1769	List domains for a domain .
1770	Close the handler .
1771	Close the receiver .
1772	Get session state .
1773	Set the session state .
1774	Receive a deferred message .
1775	Merge an existing reservation .
1776	Validate the given challenge .
1777	Purge a table .
1778	Internal helper for handling errors .
1779	Create a queue .
1780	Deletes the specified queue .
1781	Gets the details of a queue .
1782	Creates a new topic .
1783	Gets information about a topic .
1784	Creates a rule .
1785	Gets a specific rule .
1786	Gets the rules for a topic .
1787	Creates a new subscription .
1788	Gets the details of a subscription .
1789	Returns a list of all subscriptions for the specified topic .
1790	Sends a message to a topic .
1791	Unlocks a subscription message .
1792	Sends a batch of messages to a specified queue .
1793	Unlocks a queue message .
1794	Receive a message from a queue .
1795	Waits for a subscription message .
1796	Creates an event hub .
1797	Updates an event hub .
1798	Gets the EventHub for the specified hub .
1799	Sends a message to a hub .
1800	Adds the Content - Type header to the service bus .
1801	Get authorization string .
1802	Check if token is expired .
1803	Get a token from the access control service .
1804	Updates the query path and query parameters .
1805	Reset a service principal profile .
1806	Deletes the message .
1807	Unlocks the message .
1808	Renew the lock .
1809	Adds headers to the request .
1810	Return a JSON representation of this batch .
1811	Gets the health of a cluster .
1812	Retrieves the cluster health information .
1813	Unprovision an application type .
1814	Gets a list of repair tasks .
1815	Submit a property batch batch request .
1816	Common error handling
1817	Start a web site trace operation .
1818	Fetches information for a slot in a slot .
1819	Swaps a slot .
1820	Gets events for a given event .
1821	Adds a new face to the image list .
1822	Handles redirect requests .
1823	Creates a migration .
1824	Publish events to a topic .
1825	Move resources to another resource group .
1826	Sets the profile to use .
1827	List query results for a management group .
1828	Create a queue .
1829	Deletes the specified queue .
1830	Create a topic .
1831	Deletes the specified topic .
1832	Create a subscription for a topic .
1833	Create a SharedAccessKey object from a connection string .
1834	Get entity properties .
1835	True if the lock has expired .
1836	Create a new session .
1837	Creates a new subscription .
1838	Creates an export rate for a given interval .
1839	Process results from the queue .
1840	Bulk add_tasks to the results queue .
1841	Task collection thread .
1842	Prepare the configuration .
1843	Reset a user password .
1844	Start an environment .
1845	Create a message from the response body .
1846	Convert an XML Element element into a Rule object .
1847	Convert XML element to Queue object .
1848	Convert an XML entry to a Topic object .
1849	Convert an XML subscription XML element into a subscription object .
1850	Create a new Operation .
1851	Deletes a certificate .
1852	Create a client from CLI profile .
1853	Create a client from a dictionary .
1854	Get a client from an auth file .
1855	Parse an EnumerationResults XML response .
1856	Get entry properties from an XML Element .
1857	Removes a certificate subscription .
1858	Get a queue by name .
1859	List the Queue clients .
1860	Get a specific topic .
1861	List available topics .
1862	Receive a deferred message .
1863	Settle a deferred message .
1864	Gets a specific site .
1865	Create a site .
1866	Deletes a website .
1867	Updates a website .
1868	Restart a website .
1869	Get historical usage metrics
1870	Get the metrics definitions for a website .
1871	Retrieves the publish profile from the website .
1872	Gets the publish profile
1873	Updates a quarantine policy .
1874	Creates a cloud service .
1875	Checks the availability of a job collection .
1876	Gets a specific job collection .
1877	Complete a backup operation .
1878	Cancel scheduled messages .
1879	Send all pending messages .
1880	Reconnect the sender .
1881	Gets the certificate from the publish settings file .
1882	Load cookies .
1883	Compute terminal width .
1884	Remove leading prefix from string .
1885	Prints a message inplace with spaces on the terminal .
1886	Formats a file size
1887	Format elapsed time .
1888	Create a status line .
1889	Generate progress bar .
1890	Generate segment numbers .
1891	Returns an iterator over the segments
1892	Wait until the event is available .
1893	Add a segment to the future .
1894	Put value into queue .
1895	Parse the pvsw SWF file .
1896	Extract the nonce from the query result .
1897	Find vpid for given url .
1898	Parses the given JSON data .
1899	Parse XML data .
1900	Parse a query string .
1901	Searches a dictionary by key .
1902	Spawn a command .
1903	Iterate through tags .
1904	Parses a manifest and returns a dictionary of video representations
1905	Determine the encoding of a sample .
1906	Parse a JSON response .
1907	Parse an XML response .
1908	Parse cookies .
1909	Parse the HTTP headers .
1910	Parse query parameters .
1911	Get the message .
1912	Make a new LogRecord .
1913	Login to LiveEUI account .
1914	Load a support plugin .
1915	Update the query string .
1916	Iterate over chunk tags .
1917	Generator for all required arguments .
1918	Check file output .
1919	Create the output pipe .
1920	Create an HTTP server .
1921	Iterate over http requests .
1922	Outputs an output stream to an HTTP server .
1923	Handle stream output .
1924	Opens the given stream .
1925	Open and write a stream .
1926	Read a stream .
1927	Handle a single stream .
1928	Fetch streams .
1929	Retry and retry streams .
1930	Return the stream name for a given stream_name
1931	Formats a list of valid streams .
1932	Handle the given URL .
1933	Prints streamlink information .
1934	Authenticate Twitch using Twitchlink .
1935	Load plugins from given directories .
1936	Sets up global arguments .
1937	Setup the console .
1938	Setup http session options
1939	Load plugins .
1940	Setup command line options .
1941	Log current version .
1942	Extract stream id from text .
1943	Returns a list of streams from the given text .
1944	Set an option .
1945	Get an option value
1946	Sets an option for a plugin .
1947	Get the value of a plugin .
1948	Resolve a given URL .
1949	Load plugin plugins
1950	Convert a number of hours minutes to an integer .
1951	Validate that value starts with given value .
1952	Validates that value is an end of string .
1953	Validates that a string contains the given value .
1954	Creates an attribute from a value .
1955	Apply a function to each value in a dict .
1956	Apply a function to a value .
1957	Validate a URL .
1958	Convert an element to an XML element .
1959	Wrapper for XML findall .
1960	Attempt to find the player s url .
1961	Parse M3U8 data .
1962	Given a cmd name return the supported player name
1963	Login to the user
1964	Extract stream id from HTML .
1965	Extract stream info .
1966	Login to the login URL .
1967	Apply a function to the map .
1968	Make an API call .
1969	Start a new session .
1970	Get information about a media .
1971	Creates an API client .
1972	Compress a string .
1973	format a character
1974	Return a formatted output formatter .
1975	Read n bytes from the stream .
1976	Get the value of this code .
1977	Return the explanation of this code .
1978	Sets the decodings table for decoding .
1979	Sets the length of this sequence to be used by the parser .
1980	Prints a table of code strings .
1981	Reads a tuple from the stream .
1982	Return an explanation of an explanation .
1983	Get the value of the given index .
1984	Returns the lower and upper bounds of the extra table at the given index .
1985	return the value at index
1986	Returns the mnemonic for the given index .
1987	construct mnemonic
1988	Compile the actions table
1989	execute action
1990	Make a hex string from the stream .
1991	Process the stream .
1992	Calculates the metablock length
1993	Indicate whether the stream is uncompressed .
1994	Set block type .
1995	Takes a vector and returns the transformed value
1996	Reads the prefixes .
1997	Calculate monochrome color .
1998	Compute a polychrome polygon from an array of colors .
1999	Creates an arrow table from a SAS DataFrame .
2000	Decorator to patch a function .
2001	Add virtual velocity columns to the PMR .
2002	Create virtual columns .
2003	Return graphviz representation of the expression
2004	Return a pandas Series containing counts for each column .
2005	Applies a function to the DataFrame .
2006	Wrapper for vexEx .
2007	Open multiple files .
2008	Reads data from a SAM file
2009	Create Dataset from an AST table
2010	Create a DataFrame from a list of arrays
2011	Convert numpy arrays into numpy arrays .
2012	Convert Pandas DataFrame to a DataFrame
2013	Read a CSV file .
2014	Return a server instance .
2015	Simulate Zeldovich file .
2016	concatenate dfs
2017	Create a range from start to stop .
2018	Opens a dataset .
2019	Evaluate a dataset .
2020	Decorate a function with a promise .
2021	Return a set of the columns that are dependent on this dataset .
2022	Run a task .
2023	Sort the list of pairs .
2024	Get info from a file
2025	Clear the canvas .
2026	Wait for the last plot to finish .
2027	Open a document .
2028	A context manager for writing to a file .
2029	Split arrays into masks and combine them together .
2030	Remove a numpy array from this RDD .
2031	Count the first occurrence of an expression .
2032	Compute the mean of an expression .
2033	Compute the sum of an expression .
2034	Calculate the standard deviation of a variable .
2035	Calculate the covariance matrix .
2036	Compute the minimum value of an aggregated histogram .
2037	Return the minimum value of an expression .
2038	Calculate the median of an expression .
2039	Create a matplotlib plot
2040	Calculate HEALPix pixels .
2041	Plot the HEALPix pixels .
2042	Plot a 3D DataFrame .
2043	Returns the dtype of the given expression
2044	Get the private directory for this HDFS
2045	Get the state of the model
2046	Set the state of the table .
2047	remove virtual meta data
2048	Write virtual meta data to disk .
2049	Write metadata to a yaml file
2050	Returns a list of subspaces in the table .
2051	Set variable with given name .
2052	Evaluate variable
2053	Evaluate a selection mask .
2054	Convert to dict
2055	Return a copy of this DataFrame .
2056	Convert to pandas DataFrame
2057	Convert DataFrame to ArrowTable .
2058	Convert to an astropy . Table
2059	Add a column to the DataFrame .
2060	Rename a column .
2061	Add virtual columns to cartesian coordinates .
2062	Add virtual velocity to cartesian coordinates .
2063	Add virtual columns to cartesian coordinates .
2064	Add virtual columns to cartesian coordinates .
2065	Add virtual columns .
2066	Add virtual columns to cartesian coordinates .
2067	Add virtual columns .
2068	Add a virtual column to the table .
2069	Delete a virtual column
2070	Add a new variable to the model .
2071	Delete a variable
2072	Return the last n elements .
2073	Display the head and tail of the table .
2074	Describe the columns of the dataset .
2075	Concatenate two sequences .
2076	Set the current row .
2077	Get column names .
2078	Trim the columns from the DataFrame .
2079	Return a new DataFrame with selected columns .
2080	Extract a subset of the list .
2081	Return random samples .
2082	Split the array according to the given frequency .
2083	Split this sequence into multiple intervals .
2084	Sort the Series by a given value .
2085	Materialize a virtual column .
2086	Undo a selection .
2087	Redo the selection .
2088	Check if the selection can be undone .
2089	Set a selection expression .
2090	Drop all non missing values in the table .
2091	Return a copy of this DataFrame with NaNs removed .
2092	Selects a bounding box .
2093	Selects a bounding box between spaces .
2094	Selects a given circle .
2095	Select an ellipse .
2096	Create a SelectionLasso .
2097	Set the inverted selection .
2098	Set the selection
2099	Execute a selection
2100	Searches for a valid name .
2101	Return a list of all the nodes of this expression .
2102	Return graphviz representation of this DataFrame .
2103	Add a column to the table .
2104	Encode a column .
2105	Returns a Dataset with the columns as a Dataset .
2106	The length of the array .
2107	Vertical stacking of DataFrames .
2108	Return a new DataFrame with another DataFrame .
2109	Export DataFrame to HDF5 file .
2110	Add a column to the DataFrame .
2111	Decorator to patch a DataFrame .
2112	Register a function as a function .
2113	Fill missing values with value .
2114	Returns the day of the day of x .
2115	Return dayof year of year
2116	Check if the year is leap year .
2117	Return the year of year
2118	Returns a pandas Series of the month .
2119	Return the month name of the month .
2120	Return the day of x .
2121	Return the day name of the day .
2122	Return the week of year of year .
2123	Return the hour as a pandas DataFrame .
2124	Return the dt of x .
2125	Returns the second time series of second .
2126	Convert a string to a column string .
2127	Concatenate two strings .
2128	Check if x is contained in x .
2129	Count the number of occurrences in x
2130	Find the occurrence of x .
2131	Get a column array from array .
2132	Find the index of a substring .
2133	Convert string to ColumnArray
2134	Convert string to string
2135	Pad a string to a column .
2136	Return a new ColumnArrowArray .
2137	Find occurrence of substring .
2138	Find the index of a substring .
2139	Return a column aligned with the given width .
2140	Convert string to string
2141	Slice a string into a slice .
2142	Convert string to column array .
2143	Convert a string to a column string .
2144	Convert a string to a column array .
2145	Return an array of NaN values
2146	Convert to a numpy recarray .
2147	Write properties to file .
2148	Write comment to file .
2149	Write a property .
2150	Yield properties from a file - like object .
2151	iterate over newlines
2152	Show installed versions .
2153	Mark a keyword as deprecated .
2154	Set the libtftt library .
2155	Track beat events .
2156	Adjusts the tuning using librosa
2157	Convert frames to samples .
2158	Convert samples to frames .
2159	Convert time series to frames .
2160	Convert midi to a note
2161	Convert HZ to mel .
2162	Convert mel_els to HELS
2163	r FFT frequencies
2164	Calculate the frequencies for cqt
2165	r Calculate the mel frequencies in Hz .
2166	Calculate the A - PMA weighting weights for A .
2167	r Compute time - series of time - series .
2168	Return samples of an array of frames .
2169	Compute the CQT coefficients for a given sample .
2170	Compute pseudo - Fourier filter .
2171	Filter CQT data using the CFT filter algorithm .
2172	Filter a CFT filter using CFT filter
2173	Trims a cqt . cq_respords into a single numpy array .
2174	Compute the CFT response
2175	Calculate the number of downsampling steps that should be applied to the epoch .
2176	Perform a pre - downsample on an audio signal .
2177	Calculates accumulator for DW .
2178	Internal helper for backwards compatibility .
2179	Perform the Viterbi algorithm .
2180	r Compute the discriminator over a transition matrix .
2181	Return a uniform transition matrix .
2182	Generate a transition loop .
2183	Generate a transition matrix for a cycle .
2184	r Compute a transition matrix .
2185	Calculate the onset amplitude .
2186	Compute the total onset strength .
2187	Finds offsets of onset from onset
2188	Multi - dimensional onset confidencerogram .
2189	Write timeseries to a csv file
2190	Write audio data to a WAV file .
2191	Calculate the colormap .
2192	Plot waveplot .
2193	Helper function to set the current image
2194	Return mesh coordinates .
2195	Check if the given axes is an instance of matplotlib .
2196	Helper function for plotting axes
2197	Calculate the coordinates of the FFT bins .
2198	Calculate melicity basis for mel_frequency
2199	Calculate the CQT frequency for a given frequency .
2200	Calculate the coordinates of the chromosome
2201	Convert n frames to time .
2202	Estimate the pitch using piprack .
2203	Interpolate a stream of audio data .
2204	Compute the spherical harmonic Hessian
2205	Compute the harmonic
2206	Compute the percvectors of a variable
2207	Stretch a time series of time series .
2208	Calculate pitch shift of data .
2209	Takes an array of intervals and computes an array of points
2210	Determine if a signal is non - silent
2211	Trim the signal from a signal .
2212	Split data into multiple points .
2213	A generator for phase op .
2214	r Compute the amplitude of a signal .
2215	Compute a standard Fourier transform .
2216	Perform HSSS separation between the hpsus and hparams .
2217	Decomposes components into components .
2218	Filter a segmentation matrix .
2219	Helper function for _nn_filter .
2220	r Calculates the mel coefficients for a given frequency spectrum .
2221	Generate a chroma band structure from a frequency spectrum .
2222	Creates a float with a float
2223	Generate a frequency filter for a given sr .
2224	r Calculate the frequency - length distribution for a given histogram
2225	Convert CQ to chromosome coordinates .
2226	Calculate the bandwidth of a window .
2227	Wrapper for scipy . get_window
2228	Multiprocessing filter .
2229	Compute the frequency and sample frequencies for the midi calibration .
2230	fill with window_samples
2231	Compute the squared sum of a window .
2232	Diagonal filter .
2233	r Compute the centroid of the spectra .
2234	r Compute spectral rolloff .
2235	r Compute the spectral level of the spectrogram .
2236	Compute spectral features for a single frame
2237	Calculate zero crossing crossings .
2238	Spectral TimeSeries
2239	Compute chroma filter using CQT
2240	Spectral Spectrogram
2241	Calculate the Jaccard correlation coefficient .
2242	Given a query and a set of intervals return the index of the best match .
2243	Match intervals between two intervals .
2244	Matches intervals between two intervals .
2245	Matches two events .
2246	r Compute the salinity pressure .
2247	r Compute the harmonics of an array .
2248	Calculate the harmonics at a given frequency range .
2249	Compute the harmonics of a 2D array .
2250	Load sound file .
2251	Load audio data from an audio file .
2252	Convert numpy array to mono .
2253	Resample noise to target ratio .
2254	Compute the autocorrelation of a time series .
2255	Perform lpc .
2256	Generate a set of audio samples .
2257	Create a tone from a signal .
2258	Chirp signal .
2259	Get all the files in a directory
2260	Stretch the audio .
2261	Parse command line arguments .
2262	Perform the HSSH analysis on the audio file .
2263	Compute a beat track for a given onset .
2264	Tracks the beat track .
2265	Compute beat score .
2266	Compute the best beat track for a given period .
2267	Returns the last beat beat .
2268	Convert a recurrence matrix to a lag matrix .
2269	Convert a lag - axis to a recurrence matrix .
2270	Decorator to apply a function to a time - lag - lag time - lag - lag time - lag time - lag - lag - lag - time series .
2271	Subsegment data into n_segments .
2272	Aggregate the labels of the data .
2273	Enhance the path - wise filter .
2274	Detect onset detection .
2275	Create a frame of a numpy array .
2276	Validate audio data .
2277	Convert x to int .
2278	Pad the size of an array to a given size .
2279	Sort an array of values in a 2D array .
2280	Normalize data .
2281	Localized version of localmax .
2282	Select a peak .
2283	Sparses rows in a sparse matrix .
2284	Rolls a sparse matrix .
2285	Convert a numpy array to a float
2286	Convert an index set to slices .
2287	Synchronize segmented data .
2288	Apply softmask to X .
2289	Return a tiny tiny value for x .
2290	convert frames to video
2291	Read a single PNG image .
2292	Get a single frame .
2293	Convert the video to a file .
2294	Sets the progress of the given tasks .
2295	Helper function to track a progress bar .
2296	Flip image .
2297	Rotate image .
2298	Clip the bounding boxes of a bounding box .
2299	Scales bounding boxes .
2300	Clip an image to a bounding box .
2301	Pad an image with padding .
2302	Pad image to multiple images .
2303	Scales the size of the given size
2304	Resize image .
2305	Resize image to dst_img .
2306	Rescale image .
2307	Register a file handler .
2308	Convert a priority value to a priority enum .
2309	De - quantize an array .
2310	Display an image
2311	Visualize bounding boxes .
2312	Read flow data from a file .
2313	Write flow data to file .
2314	Dequantize a sequence .
2315	Loads the state_dict from a module .
2316	Load checkpoint from file .
2317	Convert weights to CPU .
2318	Save checkpoint to file .
2319	Initialize the optimizer .
2320	Initialize logger .
2321	Get current learning rate .
2322	Register a hook .
2323	Run the runner .
2324	Register training hooks .
2325	Convert video file to output_file .
2326	Resize a video .
2327	Cut video .
2328	Concatenate video into a single file .
2329	Read a list from a file .
2330	Read a file into a dictionary
2331	3D convolutional layer .
2332	Create an object from a dictionary .
2333	Read image from numpy . ndarray
2334	Create an image from a byte string .
2335	Write image to file .
2336	Convert BGR image to grayscale .
2337	Convert gray to BGR color .
2338	Cast an iterable to another type .
2339	Check if seq is of expected_type .
2340	Slice a list into a list
2341	Decorator to check whether the given list of prerequisites are met .
2342	Average the last n values .
2343	Perform a scatter on input devices .
2344	Convert a color into a tuple .
2345	Get the time of a timer
2346	Starts the timer .
2347	Return the number of seconds since the timer was started .
2348	Return the elapsed time since last check .
2349	Visualize a flow
2350	Convert a flow matrix to RGB .
2351	Generate a color wheel .
2352	Compute accuracy .
2353	Apply a scatter function to targets .
2354	Helper function for scatter
2355	Perform a HTTP request .
2356	Return JSON as JSON .
2357	Return text as text .
2358	Handle an AWS callback .
2359	Handle multiple requests .
2360	Make a request to the API .
2361	Start the worker .
2362	Normalize task v2 .
2363	Parse YAML file and return line numbers .
2364	Return the wheel distribution name .
2365	Return archive basename
2366	Add additional requirements .
2367	Convert an egg - info directory to a distribution archive .
2368	Create a new Activity
2369	Builds a suggested actions .
2370	Add an attachment
2371	List attachments .
2372	Return an attachment
2373	Create a trace .
2374	Set the telemetry client .
2375	Reads the specified keys from the store .
2376	Write changes to the store
2377	Delete the specified keys .
2378	Create an S3Item from the result .
2379	Create a dictionary from an item .
2380	Sanitize a key .
2381	Create database and container connection
2382	Get a database from the database .
2383	Get or create a container .
2384	Fill Qna event with query results .
2385	Create a ConversationReference for a given activity .
2386	Get the name of the step .
2387	Check if a channel can be supported .
2388	Return True if card_cancel_cancel is supported .
2389	Get channel id .
2390	Determine if the token is an emulator token .
2391	Create a hero card attachment .
2392	List of parameters .
2393	Mirror the definition .
2394	Return the inverse gate .
2395	Set the control register .
2396	Return a copy of this object .
2397	Return qasmasmq if control is not None .
2398	Return a QASM instruction .
2399	Run the circuit .
2400	Perform a single pass of a pass .
2401	Returns a list of all passes in this working list .
2402	Dump all flow controllers
2403	Creates a controller for the given parameters .
2404	Creates a UBase
2405	Get parameters for a single gate .
2406	Return a 2x3 matrix for a single gate .
2407	r Compute the einsum matrix .
2408	r Compute the einsum matrix for a set of indices .
2409	Helper function to calculate the indices of the einsum multiplication .
2410	Convert a circuit to a DAGCircuit .
2411	Exponential fit function
2412	fit - fit function
2413	Plot the coherence .
2414	Shape of R_R data .
2415	This function plots the RDF data .
2416	Split runs on parameters .
2417	Compose u1 and phi components
2418	Convert YZYZ to ZYZ .
2419	Validate input state .
2420	Trim the image .
2421	Returns the span span of a gate .
2422	create an instruction from a circuit
2423	Run Transpiler .
2424	Find the best connected component of the network .
2425	Create a new Barrier .
2426	Average the observed data .
2427	Process bit ids
2428	Process a custom Unitary Unitary node .
2429	Process a gate
2430	Process CON node .
2431	Process a Measure node .
2432	Process a condition node .
2433	Creates a DAG class .
2434	Return the channel duration in seconds .
2435	Return the start time of the channel .
2436	Return the stop time for the given channels .
2437	Iterate over all instructions in this child .
2438	Check that the value is of the expected type .
2439	Recursively dump additional data .
2440	Load additional data
2441	Create a validation schema .
2442	Validate a model instance against the schema .
2443	Decorator for validation methods .
2444	Dump the model to a dictionary .
2445	Load data from a dict .
2446	Compute the Fourier Transform .
2447	Return a partial trace vector .
2448	Vectorize a density matrix .
2449	Deletes a vectorized matrix .
2450	Convert a choi polynomial into a matrix .
2451	Remove negative values from an array .
2452	Return the outer product of two vectors .
2453	Calculate the concurrence of a state .
2454	Compute shannon entropy .
2455	Compute Shannon entropy of a state .
2456	Calculate mutual information .
2457	Compute the entropy of a state .
2458	Compute EOF entropy .
2459	Flatten a schedule into a new schedule .
2460	Shifts a schedule by time .
2461	Insert a child into a schedule .
2462	Append child to parent .
2463	add a U3 gate
2464	The backend status .
2465	Start the simulation .
2466	Return the time remaining after iteration
2467	Disassemble a QObject into a circuit .
2468	Return Hamming distance between two strings .
2469	Create a quaternion from an axis .
2470	Create a quaternion from an Euler angles .
2471	Normalize the quaternion .
2472	Convert to a 3D matrix .
2473	Convert the euler angles to z z z z .
2474	Takes a list of numbers and calculates the number of values .
2475	Plot histogram data
2476	Check if value is a collection of values .
2477	Check that the index is within the range .
2478	Check if a matrix is square .
2479	Check if a matrix is a diagonal .
2480	Check if op is symmetric .
2481	Check if a matrix isheritian .
2482	Check that matrix is positive definite .
2483	Check if a matrix is square .
2484	Check if a matrix is a unitary matrix .
2485	Convert the input data to a polynomial .
2486	Convert the input data to superoperator .
2487	Convert data to Kraus operators .
2488	Convert data to Channels .
2489	Convert input data to PTM .
2490	Convert input data to stines .
2491	Convert data to operator .
2492	Convert operator input to tensors .
2493	Convert StinesResponse to Operator .
2494	Convert superop to CHOI .
2495	Convert data to superop .
2496	Convert a list of Kraus operators to a polynomial .
2497	Convert a polynomial matrix to a Kraus matrix .
2498	Convert a list of stines to a pair of kines .
2499	Convert stines to polynomial .
2500	Convert a set of Kraus states to stine .
2501	Convert Kraus operators to superoperator
2502	Transforms data to a Cholesky .
2503	Transforms data to chi .
2504	Re - reconstruct the tensor .
2505	Transform data to matrix .
2506	Check that input_dim is n - qubit .
2507	Hide ticks and labels .
2508	Set the label for the x - axis
2509	Clears all points
2510	Add vectors to the vector .
2511	Add an annotation .
2512	Render the plot .
2513	Plot front .
2514	Display the plot .
2515	Compute the two - qubit K - qubit polynomial .
2516	Get the top layer
2517	Get mid format
2518	Return the bot
2519	The length of the span
2520	Returns the parameters for an instruction .
2521	Returns a label for an instruction .
2522	Return a latex representation of the parameter .
2523	Compile a circuit .
2524	Filter deprecation warnings .
2525	Return local hardware information .
2526	Check if a host is connected .
2527	Check the status of a particular job .
2528	Create an array with constant amplitude .
2529	Return the square of the square .
2530	Circular triangle
2531	Inverse of the cosine function .
2532	Helper function to fix Gaussian widths in a Gaussian .
2533	Generate a Gaussian with the given parameters .
2534	Returns the derivative of the gaussian .
2535	Generate a square square of a square .
2536	Default pass manager .
2537	Create a default pass manager .
2538	Check if a given register is present .
2539	Return a copy of the circuit .
2540	Return the inverse circuit .
2541	Append an instruction to the circuit .
2542	Attach an instruction .
2543	Add a register to the circuit .
2544	Check that the arguments are duplicated .
2545	Check that qargs are valid
2546	Check cargs in the circuit
2547	Check that the circuit registers are compatible
2548	Return the qasm as a string .
2549	Draw circuit .
2550	The number of gate operations .
2551	The total width of the QR code .
2552	Return a dictionary mapping the number of instruction names .
2553	Returns the number of connected components .
2554	Return a new circuit with the given values .
2555	Binds a parameter to a value .
2556	Generate a pulse drawing .
2557	Searches for a number of taps .
2558	Map a set of free gates to a circuit .
2559	Calculate the distance between two gates .
2560	Return the score of a step .
2561	Creates a new DAGCircuit from source_map .
2562	Map a layout to the gate .
2563	Given an edge return a list of swap gates .
2564	Run Transpiler .
2565	Add a physical qubit to the coupling graph .
2566	Add an edge to the graph .
2567	Return a subgraph of this coupling map .
2568	List of physical qubits .
2569	Check if the graph is strongly connected .
2570	Compute the distance matrix .
2571	Calculate the distance between two components .
2572	Deprecated . Compiler .
2573	Create a cu11 gate
2574	Inverse of the instruction .
2575	Evaluate the gate if any .
2576	Called when the instruction is in classical mode .
2577	Subscribe to an event .
2578	Dispatch the given event .
2579	Unsubscribe a callback .
2580	Publish an event .
2581	Initialize the registers .
2582	Define the circuit .
2583	Return a list of the gates to unindent .
2584	Calculates the stochastic angle of a complex complex complex complex .
2585	Compute multiplexing gates .
2586	Returns True if value is a virtual register .
2587	Return a copy of the layout .
2588	Combine two layouts into an edge map .
2589	Add a toffoli gate .
2590	Insert a schedule into this schedule .
2591	Check if the given name is fenced .
2592	Convert a list of gates into a bitmap .
2593	Runs stochastic interpolation .
2594	Update layer .
2595	Takes a number of qubits and returns a tensor
2596	Construct a PauliMatrix from a label string .
2597	Initialize from a boolean array .
2598	Return the Pauli product of two Pauli operators .
2599	Convert circuit to an Operator
2600	Convert the circuit into an instruction .
2601	Update the qubits .
2602	Update the qubits .
2603	Insert a Pauli product into the matrix .
2604	Append a PauliUnit to the plate .
2605	Delete qubits at indices .
2606	Generate a random binary quadratic model .
2607	Creates a Pauli operator .
2608	Compute the measure outcome .
2609	Add samples to the memory .
2610	Add a quantum instruction .
2611	Add a reset state to the quantum state .
2612	Validate the initial state vector
2613	Set the initial state vector
2614	Get the state vector
2615	Validate the circuit .
2616	Run the job .
2617	Run a job .
2618	Validate the circuit .
2619	Validate the initial unitary .
2620	Sets the unitary matrix .
2621	Return the unitary representation of the tensor .
2622	Run a job .
2623	Validate the circuit .
2624	Check if an object is a bit type .
2625	Run Transpiler .
2626	Determine whether this interval is overlap .
2627	Shifts the interval by given time .
2628	Return a new Timeslot with the given time .
2629	Get the start time of the start of a channel .
2630	Return the stop time for the given channels .
2631	Check if this timeslots are mergeable .
2632	Returns a new TimeslotCollection with all slots merged .
2633	Shifts the timeslot with the given time .
2634	Sends a comment to the given branch .
2635	Process rho data
2636	Plot state of state
2637	Create a new RZ gate .
2638	Add two CAMP gate .
2639	Initialize backend_prop .
2640	Creates the program graph from the given dag .
2641	Select the next edge of the program .
2642	Select the best cx .
2643	Select the best best available qubit .
2644	Run the program .
2645	Returns a list of instruction instructions .
2646	Inverse of the gate .
2647	Apply qubit to gates .
2648	Evaluate classical gates .
2649	Check if the matrix contains a unitary matrix .
2650	 conjugate operator .
2651	Returns a new operator with transposed operator .
2652	Return the power of this operator .
2653	Returns the shape of the inputs .
2654	Convert an instruction to an operator .
2655	Update the mapping layer .
2656	Separate a bitstring into a single bitstring .
2657	Format memory - zero memory data .
2658	Formats a multi - memory memory array into memory .
2659	Returns a list of memory counts for the given level .
2660	Format counts as a dictionary .
2661	Formats a complex vector into a complex vector .
2662	Formats a matrix as a unit vector .
2663	Decorator to check that the job has been submitted .
2664	Submit the job to the scheduler .
2665	Returns the status of the job .
2666	True if the interval is included in the interval .
2667	Plot a multivariate multivariate scatter plot
2668	Get the low frequency for the channel .
2669	Get the default locations for a channel .
2670	Iterate over the circuit .
2671	Plot the state of a quantum sphere .
2672	Calculate k choice for k - th distribution .
2673	Find the lexicographical index of a list .
2674	Plot the state of a state .
2675	Returns a list of unique hardware backends .
2676	Return the op node .
2677	Sampling of a constant pulse .
2678	Return a sampled pulse .
2679	Sample a square pulse .
2680	Return a sampled pulse .
2681	Return sampled pulse .
2682	Create a sample of cosine .
2683	Sampling of sinus .
2684	Create a sample of a Gaussian .
2685	Compute the derivative of a Gaussian .
2686	Sampling of a square wave .
2687	Calculates the distance between the axis .
2688	Draw the component tree
2689	Returns a backend instance .
2690	Renames a register .
2691	Removes all op s named opname .
2692	Add a quantum register
2693	Add a REC instruction .
2694	Add a wire .
2695	Verify that the condition is valid .
2696	Get the bits in a condition .
2697	Add a new node to the graph .
2698	Apply an operation back to the graph .
2699	Verify that the edge maps are valid .
2700	Verify that the wire_map is valid .
2701	Map a condition to a condition .
2702	Extend the state of a dag .
2703	Compose circuit from input circuit .
2704	Check that the wires are valid .
2705	Generate a map of predicates for a given node .
2706	Compute the full prediction mapping for a DAG circuit .
2707	Returns the topological sort of the graph .
2708	Returns an iterator over edges .
2709	Return all op nodes in the MultiGraph .
2710	Return a list of all gate nodes .
2711	Return a list of nodes that match the given names .
2712	Returns a list of two q gates .
2713	Get the predecessors of a node .
2714	Get predecessors of a quantum register .
2715	Return the ancestors of a node .
2716	Returns a list of successors of the given node .
2717	Removes an op node from the graph .
2718	Remove all ancestors of a node .
2719	Removes all descendants of a node .
2720	Removes all non - ancestor nodes of a node .
2721	Removes all descendants of a node .
2722	Returns a shallow copy of this DAGCircuit .
2723	Generate a DAG for the topological operations .
2724	Iterate over multigraph layers .
2725	Collect all gates in the graph .
2726	Iterate over nodes on a wire .
2727	Count the number of operations in the topology .
2728	Summary of the tensor .
2729	Return a copy of a tomography basis .
2730	Applies the gate to the gate .
2731	Generate a tomography set .
2732	Process a tomographic set .
2733	Create a tomography circuit for a quantum circuit .
2734	Extract data from tomography .
2735	Calculate marginal counts
2736	Fit to TOMography data
2737	Fit a stochastic approximation to a tensor
2738	Projection onto the projection matrix .
2739	Linear inverse linearization
2740	This function calculates the eigenvalues of a transition matrix .
2741	Calculate Wigner data .
2742	Apply the gate to the circuit .
2743	Check the status of a job .
2744	Monitor the status of a job .
2745	Compute euler angles for a 2D unit sphere .
2746	Simplify U3 gate .
2747	Apply the QR code to the graph .
2748	Show the information about the qubits in the backend .
2749	Builds a tab .
2750	Plot job history .
2751	Draw the pulse .
2752	Create a cu33 gate
2753	Build a Bell circuit .
2754	Create a transpilation job .
2755	Run a circuit on a circuit .
2756	Execute a set of experiments .
2757	Return the drive channel .
2758	The control channel .
2759	Return the measured measure channel .
2760	Returns the first channel in the queue .
2761	Generate input state .
2762	Assemble a series of experiments .
2763	Unset the logger logger .
2764	Plot the state of a state .
2765	Process fidelity between two channels .
2766	Set input .
2767	Pops the stack .
2768	Push a file onto the stack .
2769	Compute the DAG circuit .
2770	Return the bound method for an instruction .
2771	Convert an acquisition instruction into a memory instruction .
2772	Convert frame to qobj .
2773	Convert a persistent value to a QObject .
2774	Convert the drive instruction to the QObject model .
2775	Convert a snapshot instruction into a QObject .
2776	Updates the duration of the pulse .
2777	Generate samples from a sample function .
2778	Filters backends backends .
2779	Resolve backend name .
2780	Convert a dag to a QuantumCircuit .
2781	Convert a matrix to a dictionary .
2782	Updates the current symtab
2783	Verify that a bit is declared in the gatelist .
2784	Verify that an expression is valid .
2785	Verify that obj is a gate .
2786	Verify that the register is valid .
2787	Verify that the bitlist is declared in the object .
2788	Find the column in the input token
2789	Parse the debug value .
2790	Parse data .
2791	Run parser .
2792	Parse the input file .
2793	Add crz gate .
2794	Return the basis state of a bitstring .
2795	r Creates a matrix of the density matrix .
2796	Calculate purity .
2797	Run the commutation .
2798	Creates HTML for a backend
2799	Update backend info .
2800	Generate a layout for the jobs pending .
2801	Split CX into dag .
2802	Returns a single backend
2803	Return the shape of the input tensor .
2804	Yields the register name and max_labels .
2805	Truncate a float .
2806	Convert the image to LaTeX .
2807	Calculate the depth of each gate .
2808	Determine the page size to be displayed on the screen .
2809	Load schema from file .
2810	Get a validator .
2811	Load the schema and validators .
2812	Validate JSON dict against given schema .
2813	Format the error as a string .
2814	Computes the majority of a vote
2815	Unmajority operator .
2816	Generates a LaTeX source for a circuit .
2817	Returns a matplotlib drawing .
2818	Generate a random unitary operator .
2819	Generate a random density matrix .
2820	Generate a random numpy matrix .
2821	Random density function .
2822	Random density matrix .
2823	Returns a list of call names .
2824	Return the power op .
2825	Compute the complement of the subsystem .
2826	Convert an instruction into a superoperator .
2827	Runs the DAG on the given dag .
2828	Convert a circuit to a QObject .
2829	Apply the decomposition to the dag .
2830	Run the DAG on the gate .
2831	Create the gate definition .
2832	Check the value of the collection .
2833	Recursively check the type of the data .
2834	Sets the value of the given tolerance .
2835	Set the Riskit value .
2836	Reshape the input dimensions .
2837	Return the dimensions of the input .
2838	Determine the dimensions of the output .
2839	Return a deep copy of the data .
2840	Power of this vector .
2841	Determine the default dimensions .
2842	Perform einsum multiplication .
2843	Deserialize value .
2844	Custom serialization method .
2845	Check if value is expected .
2846	Compute the fidelity of two states .
2847	Compute the SVD decomposition of a function .
2848	Return the inverse of the snapshot .
2849	Set label .
2850	Checks if this matrix is a unitary .
2851	Convert to an operator .
2852	Convert this QuantumFlow gate to an instruction .
2853	Initialize the transformer for the given data .
2854	Gets the enum for the given model .
2855	Monkey patch the strpptime import to the calendar
2856	Returns a map of locale - > locale .
2857	Returns an iterator over the available locale objects .
2858	Check if tokens are valid .
2859	Split the given string into tokens .
2860	Parse a date string .
2861	Parse date string .
2862	Return True if the given string is valid .
2863	Translate a date string .
2864	Parse date string according to date format .
2865	Generate and return an array generator .
2866	Convert an exception to an appropriate number .
2867	Convert an exception to an integer .
2868	Read configuration from config file .
2869	Compose the configuration .
2870	Get information about all streams .
2871	Compose the stepper configuration
2872	Write stdout and stderr to log .
2873	Expand a human - readable time string .
2874	Read Stepper wrapper from config file
2875	Publish the stepper info .
2876	returns the filename of the STPD file
2877	Read the stepper info file
2878	Write the stepper info to disk
2879	Make the stpd file .
2880	Create a composite step .
2881	Returns the rps at the given time .
2882	Execute a command .
2883	Decodes the monitor data from each host .
2884	Create a list of points for a label
2885	Publish a message .
2886	Count the number of codes in a dictionary .
2887	Stop the pool .
2888	Feed the scheduler .
2889	Initialize logging .
2890	Applies the user - defined options .
2891	Load configuration options
2892	Gracefully gracefully gracefully .
2893	Collect data from the queue
2894	Notifies listeners of the given data .
2895	Return a URI for the given marker type .
2896	Parse a duration string .
2897	Start the agent .
2898	Start the SSH agent .
2899	Find the jetermine UDP UDP UDP UDP port .
2900	Add components to the workbench
2901	Terminate the process .
2902	Read a list of dictionaries
2903	Create a custom criterion from a string .
2904	Get the configuration from a file .
2905	Create a config file if it exists .
2906	Check disk space
2907	Check if free memory is less than max
2908	Get terminal size
2909	Returns the right line
2910	Truncate the given line_arrays .
2911	Renders the left panel
2912	Render screen .
2913	Add an info widget .
2914	Fills the rectangle with the given text .
2915	Returns the length of a string
2916	Create a load plan .
2917	Get the string representation of the logging level .
2918	Add an info widget
2919	Makes a request to the writer
2920	Load all plugin plugins .
2921	Return the first plugin with the specified plugin_class .
2922	Returns a list of plugins that match the specified plugin_class .
2923	Collects a single file .
2924	Add artifact file to collector .
2925	Create a temporary file .
2926	Load config files .
2927	Write config to file .
2928	Get a list of options from the config .
2929	Find sections with a prefix .
2930	Generate statistics from a single chunk
2931	Get phantom info .
2932	Prepares the environment for monitoring .
2933	Poll for agents .
2934	Send data to all listeners .
2935	Determine whether or not the task configuration should be monitored .
2936	Set metric values
2937	Decode the agents output into a dict .
2938	Subscribe to channels
2939	Start the subscription loop .
2940	Closes the stream .
2941	Perform a single HTTP request .
2942	Submit a new order
2943	Gets an order by ID .
2944	Gets a position by symbol
2945	List all available assets .
2946	Gets an asset by symbol
2947	Creates a sub - plan subplan for a pipeline .
2948	Ensures that a dictionary is a key and value type .
2949	Convert a dictionary into a dict .
2950	Construct an event logger .
2951	Construct a log event logger .
2952	Read configuration from a config file .
2953	Get the configuration for a repository .
2954	Format a configuration dictionary into a pretty format .
2955	Get a pipeline by name .
2956	Returns a list of all defined pipelines .
2957	Get the next event from the queue .
2958	Execute a pipeline .
2959	Wait for all processes to finish .
2960	Decorator to create a field definition .
2961	Build the ExecutionPlan .
2962	Builds a list of solids for a pipeline .
2963	Build a sub - pipeline .
2964	Get a pipeline by name .
2965	Construct publish commands .
2966	Set a new release
2967	Create a pipeline context definition .
2968	Decorator to create an input selector schema .
2969	Decorator to create an output selector schema .
2970	Return block of text .
2971	Download file from S3 .
2972	Upload file to S3
2973	Context manager to ensure a user - defined user - defined error occurs .
2974	Create a new directory .
2975	A context manager that creates a context manager for a user - supplied function .
2976	Create a context for a Dagster log .
2977	True if all steps have been completed .
2978	True if the step is skipped .
2979	Get the transformed output values .
2980	Get the transformed value .
2981	The failure data .
2982	Generate a Permission dictionary .
2983	Check if config value is valid .
2984	Check if config value is valid .
2985	Executes the core transform for the input .
2986	Decorates an existing existing type .
2987	Decorator to define a resource definition .
2988	Creates a new EventV2 v2 .
2989	Coalesce the execution plan into a dictionary .
2990	Get connection parameters .
2991	Get a new django db connection .
2992	Create a Cursor instance .
2993	Closes the database connection .
2994	Makes a model from a model_dict .
2995	Convert a list of model objects into a list .
2996	Overrides the default form field .
2997	Convert value to python object
2998	Apply relation filters .
2999	Compute the NFPs .
3000	Compute the NFPs .
3001	Compute the best optimal solution for the best problem .
3002	Compute optimal optimal optimal partition .
3003	Calculate the c - value between r and r .
3004	Sets up the seed values .
3005	Return the number of bytes required to store the hash value .
3006	Serialize the MinHash into the buffer .
3007	Deserialize a LeanMinHash from a buffer .
3008	Update the hash using a b .
3009	Merge two MinHash objects .
3010	Union of two MinHash objects .
3011	Index the given entries .
3012	Query all indexes in the sorted set .
3013	Calculate the minimum hash of the input vector .
3014	Remove a value from the cache
3015	Update the register with the given value
3016	Count number of linear variables .
3017	Merge this HyperLogLogLog with another .
3018	Clear the regressor .
3019	Compute an APK - K - K - K .
3020	Approximate the k - k - means of the prediction .
3021	Sort the sorted list of hashes
3022	Query the k_perm with k_perm
3023	Close all caches .
3024	Create a storage instance for the given configuration .
3025	Return an unordered storage storage instance .
3026	Returns a UserData object for the given object .
3027	Change social login process .
3028	Given a list of text returns the preferred number .
3029	Parse a scoped selector .
3030	Parse a single statement .
3031	Parse the value .
3032	Advance the current line to the next line .
3033	Parse a configurable reference .
3034	Augment an exception with traceback .
3035	Convert an operative config string to markdown format .
3036	Runs the final step .
3037	Ensure that the given function is wrapped .
3038	Decorate a function or class .
3039	Format a value .
3040	Clears the configuration .
3041	Bind a parameter to a configuration key .
3042	Returns the parameter bound to a given binding key .
3043	Return True if the given function has an argument .
3044	Get the signature of a function .
3045	Retrieves the names of the positional parameter names .
3046	Get all positional parameters of a function .
3047	Get the default values for a function .
3048	Validate a config scope .
3049	Decorator to mark a function as a decorator .
3050	Returns a string representation of the operative config .
3051	Parse configuration statements .
3052	Register a file reader .
3053	Parse a config file .
3054	Parse the configuration files and return a list of strings .
3055	Parse a configuration value .
3056	Finalize the configuration .
3057	Iterate over nested values .
3058	Iterate over configurable values .
3059	Registers a constant .
3060	Create constants from an enum class .
3061	Returns a list of selector matching the given partial selector .
3062	Get all matches for a partial selector .
3063	Returns the full selector for the given selector .
3064	Convert a search query to SPARQL format .
3065	Parses the Retry - After - After - Retry - After - After - Retrieves the response from the response header .
3066	Validate the value
3067	Return the property description as a dict .
3068	Set the value .
3069	Get a thing by id
3070	Initialize the object .
3071	Sets default headers
3072	Prepare the HTTP request header .
3073	Get a single thing .
3074	Called when a message is received
3075	Perform a POST request for a thing .
3076	Remove an action from a thing .
3077	Start the TCP service .
3078	Return the action description as a dictionary .
3079	Starts the action
3080	Mark the action as completed
3081	Represent the event as a dictionary .
3082	Get IP address .
3083	Returns a sorted list of addresses .
3084	Set the value to the specified value .
3085	Notify an external update .
3086	Return a thing description as a dict .
3087	Sets the href prefix for all properties .
3088	Get property descriptions as a dict
3089	Get action descriptions .
3090	Get event descriptions .
3091	Add a property .
3092	Remove a property from the model
3093	Get the value of a property
3094	Get a dictionary of properties .
3095	Sets the value of a property
3096	Get an action by name .
3097	Add an event .
3098	Add an event to the event list .
3099	Perform an action by name .
3100	Cancels an action .
3101	Add an available action .
3102	Remove a subscriber listener .
3103	Add an event subscriber to an event .
3104	Remove an event subscriber .
3105	Notify about a property
3106	Send an action to all subscribers .
3107	Notify about an event .
3108	Add annotations to the model .
3109	Perform an update on the database .
3110	Perform bulk insert .
3111	Perform an INSERT statement .
3112	Insert or update a model .
3113	Compile a postgresql query .
3114	Check if a field is a magical field .
3115	Get the fields needed to update the model .
3116	Called when a model is created .
3117	Trigger delete signal handler
3118	Create an expression that matches the given fields .
3119	Resolve all values in the store .
3120	Return the SQL string representation of this key .
3121	Return a copy of this dataset .
3122	Add additional joins .
3123	Returns HStoreField instance for given field name .
3124	Insert a list of objects into the database .
3125	Create a required hstore constraint
3126	Rename a hstore field .
3127	Drop an hstore constraint .
3128	Returns the constraint name for a given field .
3129	Return the sql create_create_create_index for the model .
3130	Create command .
3131	Return the database base class .
3132	Prepares the database .
3133	Prepare value for serialization .
3134	Build the query string for a query .
3135	Rewrite the insert into SQL .
3136	Rewrite the insert .
3137	Rewrite the SQL for an INSERT statement .
3138	Rewrite an insert statement
3139	Build conflict target .
3140	Get model field by name .
3141	Formats a field name in the database
3142	Prepare the value for a field .
3143	Create a unique constraint for a given field .
3144	Rename a hstore unique field .
3145	Drop a unique constraint for a given field .
3146	Generate a unique constraint name for a field .
3147	Generator to iterate over unique keys .
3148	Add a condition to the request .
3149	Return the SQL for this query .
3150	Return the tdist level for a df .
3151	Compute the sample variance between two samples .
3152	Compute the t - score between two samples .
3153	Check if two samples are significant
3154	Topological sort .
3155	Generator over queens of queens
3156	Play a board .
3157	Select the next node
3158	Move a random game .
3159	Filter benchmarks based on base_ver .
3160	Recursively expand benchmark names in benchmarks .
3161	generate a list of strings
3162	Initialize benchmarks .
3163	Returns the domain of the domain .
3164	Fetch messages from channel .
3165	Parse the raw posts .
3166	Get information about a user .
3167	Fetch objects from catalog .
3168	Fetch RSS entries
3169	Setup the command line argument parser .
3170	Fetch Bug objects
3171	Gets a list of bugs .
3172	Send a list of comments to a bug .
3173	Triggered by bug IDs .
3174	Get information about a specific bug .
3175	Get information about a specific issue .
3176	Fetch all merge requests .
3177	Get a list of merge notes .
3178	Get merge versions
3179	List merge items .
3180	Get a single merge .
3181	Fetch versions of a merge .
3182	Get a merge version .
3183	List notes .
3184	Fetch emojson objects .
3185	Fetch a list of Edmo objects .
3186	Calculate the time to reset the rate limit
3187	Fetch items from GitLab server .
3188	Init rate limit .
3189	Setup command line arguments .
3190	Fetch latest messages
3191	Get nick id from metadata
3192	Returns the number of members of a given conversation .
3193	Get information about a channel .
3194	Get information about a user .
3195	Setup command line arguments .
3196	Get the timestamp of the metadata of an item .
3197	Parse a buglist CSV file .
3198	Parse bug details .
3199	Parse the bug activity file .
3200	Logout from Bugzilla .
3201	Returns the metadata for the service
3202	Get bugs list
3203	Issues a list of bug ids
3204	Gets information about a bug .
3205	Fetch events from a given category .
3206	Fetch events from the group .
3207	Get events for a group .
3208	Get comments for a specific event .
3209	Fetches RRSVs for a group .
3210	Fetches the HTML for a question
3211	Fetch comments for a question
3212	Build a question object from an html page
3213	Fetch all questions from API
3214	Get the HTML of an HTML question .
3215	Get comments for a post .
3216	Parses a question container and returns a dictionary of information about the container
3217	Parses an answer from an answer question .
3218	Parse the number of pages in html page .
3219	Parses the user info page .
3220	Fetch reviews .
3221	Parse the reviews .
3222	Fetches the Gerrit mulitum .
3223	Get the server version .
3224	Get the reviews for the last item .
3225	Get next group item
3226	Executes a command
3227	Execute a command from the archive
3228	Execute a command and return the result .
3229	Setup command line arguments .
3230	Fetch the data for the given issue_id .
3231	Fetch attachments .
3232	Fetch messages for an issue .
3233	Fetch activities for issue .
3234	Fetch user data
3235	Get a user .
3236	Get information about a bug
3237	Get a collection of items for a given issue .
3238	Get the URL for the project
3239	Fetch items from the API
3240	Get all the subscriptions in groupio
3241	Find the group id
3242	Perform a GET request
3243	Setup command line arguments .
3244	Generate a unique uuid .
3245	Fetch items from backend
3246	Fetch files from archived backend .
3247	Find all backends of the given package .
3248	Fetch metadata for given category .
3249	Fetch metadata from archive
3250	Filter classified data .
3251	Parse arguments
3252	Sets the authentication arguments
3253	Set archive arguments
3254	Set the output arguments .
3255	Generate items from backend .
3256	Initialize the archive manager .
3257	Get the timestamp of the metadata of an item
3258	Parse a mbox file .
3259	Fetch messages from a mailing list
3260	Copy the mbox to a temporary path
3261	Validate the incoming message .
3262	Convert a cased dictionary to a dictionary .
3263	Get message from file .
3264	Fetch commits from the repository .
3265	Fetch items from repository .
3266	Parse git log file .
3267	Initialize the git repository .
3268	Setup the command line arguments .
3269	Parse the stream .
3270	Clone a repository into a directory .
3271	Count the number of objects in the repository .
3272	Check if the current branch is detached .
3273	Updates the git repository .
3274	Synchronize this repository .
3275	Get the rev - list of revisions for this repository .
3276	Get the log of this repository .
3277	Show the commits in the repository .
3278	Perform a fetch of all refs .
3279	Return list of commits from a pack .
3280	Update the references to the given refs .
3281	Discovers all refs in the repository .
3282	Update the ref .
3283	Execute a command in a repository .
3284	Read the stderr from the subprocess .
3285	Execute a git command .
3286	Fetch tweets from API .
3287	Fetch tweets from a category .
3288	Fetch tweets from the API .
3289	Setup command line arguments .
3290	Fetch items from database .
3291	Fetch hits for given category .
3292	Parse the results from Google Search API .
3293	Fetch hits for given keywords .
3294	Get the timestamp of the metadata of a metadata item .
3295	Determine the category of a given item .
3296	Fetch pull requests .
3297	Fetch repo info
3298	Get all the issues for a given issue number .
3299	Get all the reactions for a issue comment .
3300	Returns a list of assignees for the given issue .
3301	Get the pull requests for a pull request .
3302	Get the hash of pull commits for a given PR number .
3303	Get the list of pull review comments .
3304	Get user information from a user
3305	Get the list of reactions for an issue .
3306	Retrieves all issues in the repository .
3307	Iterate over pull requests .
3308	Returns the repository for this repository .
3309	Fetch the reviews of a pull request .
3310	Fetch pull commits for a given PR number .
3311	Retrieve the reactions of a pull review comment .
3312	Get user details .
3313	Return the orgs for the given login .
3314	Get token from request token .
3315	Return a list of tokens to rate limit .
3316	Choose the best api token for the request .
3317	Check if current token needs new token
3318	Update current rate limit .
3319	Initialize metadata .
3320	Store data in the archive .
3321	Retrieve an entry from archive
3322	Create a new archive .
3323	Calculate the hash code for the given request and headers
3324	Verify the integrity of the archive .
3325	Load metadata from the archive
3326	Return the number of rows in a table .
3327	Create a new archive
3328	Remove an archive .
3329	Search archives for a given backend .
3330	Searches archive files matching the given criteria .
3331	Search all files in the directory
3332	Check the filetype of the given filepath
3333	Generate a list of months between two dates .
3334	Convert an email message to a dictionary .
3335	Remove illegal XML characters .
3336	Convert XML to dict .
3337	Parse a raw JSON response into issues
3338	Gets the open issues .
3339	Get information about a issue .
3340	Fetch a user .
3341	Make a request to the Redmine API .
3342	Fetch docker hub data
3343	Fetch data from repository .
3344	Download a repository .
3345	Map custom fields to custom fields
3346	Filter out custom fields based on custom fields .
3347	Iterate over issues from raw page
3348	Get issues from a given URL .
3349	Get issues for a given date .
3350	Get comments for an issue
3351	Get all fields .
3352	Fetch data from cat
3353	Returns a list of jobs .
3354	Get builds for a given job .
3355	Parse the questions returned by the API
3356	Get all questions .
3357	Setup command line arguments .
3358	Fetch reviews from the API .
3359	Given a list of reviews return the max timestamp .
3360	Fetch pages from Review API .
3361	Get all pages
3362	Get recent pages .
3363	Fetch chat messages
3364	Parse raw JSON response .
3365	Return True if message is in chats
3366	Returns a list of updates for the current user .
3367	Fetch all articles in a group
3368	Add metadata .
3369	Parses an article into a dictionary .
3370	Handles fetching .
3371	Fetch an article
3372	Fetch data from remote server .
3373	Fetch data from the archive
3374	Create HTTP session .
3375	Setup rate limit handler .
3376	Sleep until rate limit expires .
3377	Update rate limit .
3378	Parse Supybot log file
3379	Retrieve archives from a given date .
3380	List all Supybot archives
3381	Parses the stream
3382	Parse a supybot timestamp .
3383	Parse supybot message
3384	Fetch topics from given category .
3385	Parse the topics page .
3386	Get information about a topic .
3387	Fetch a single post .
3388	Fetch all tasks from a given category .
3389	Parse tasks from raw JSON format .
3390	Parse all users from the server
3391	Returns a generator of all tasks that have completed .
3392	Fetch transactions by their ID .
3393	Get a list of users .
3394	Fetch a list of PhIDs .
3395	Call the Condabric API .
3396	Generate the metadata for a metadata item
3397	Parse the contents of a JSON file .
3398	Get the contents of the search query .
3399	Get historical content for a specific content .
3400	Parses the result into a Measurement object .
3401	Generate a URL for capabilities
3402	Read the content of a given URL
3403	Read string from string .
3404	Parses the result of MeasurementResults
3405	Build the URL .
3406	Find elements of complex_type .
3407	Construct the XML Schema
3408	Get the URL for a feature signature .
3409	execute a complex_data_with_reference
3410	Gets the movie list .
3411	Gets a TV list .
3412	Gets a list of movies .
3413	Retrieves information about the object .
3414	Gets the alternative titles .
3415	Gets the credits for the specified id .
3416	Get external IDs .
3417	Gets a list of keywords .
3418	Gets a list of recommendations .
3419	Gets the release dates .
3420	Gets a list of releases .
3421	Retrieves the translations from the API .
3422	Gets a list of similar movies .
3423	Gets reviews .
3424	Retrieves a list of changes from the server .
3425	Gets the upcoming upcoming tickets .
3426	Check if playing is playing .
3427	Gets the popular popular data .
3428	Gets the top rated rates .
3429	Gets the account states .
3430	Create a new rating .
3431	Gets the movie credits for the given id .
3432	Gets the TV credits for this item .
3433	Get credit id information .
3434	Query the TV .
3435	Gets information about the resource .
3436	Gets a movie list .
3437	Get information about this session .
3438	Gets the movie list movie movies .
3439	Create a new token .
3440	Gets a valid OAuth token .
3441	Create a new session .
3442	Create a new guest session .
3443	Gets the rated movies .
3444	Gets the status of an item .
3445	Create a new list .
3446	Remove a media item .
3447	Clears a list of records .
3448	Gets the content ratings for the given id .
3449	Gets similar similarity .
3450	Gets the information on the air .
3451	Get information about a particular season .
3452	Gets credits for a specific season .
3453	Get external ids .
3454	Get information about a particular season .
3455	Gets credits for a specific season .
3456	Get external ids .
3457	Sets attributes from response to dictionary
3458	Gets a movie .
3459	Gets a collection .
3460	Get information about a TV .
3461	Gets a person .
3462	Gets company information .
3463	Gets a keyword .
3464	Gets a multi - level transaction .
3465	Normalize a string .
3466	Count n - grams in reference sequence .
3467	Prepare a set of n - grams for a ref .
3468	Calculate the error - corrected error .
3469	Align two texts .
3470	Yield descriptor classes in a module .
3471	Register a list of objects .
3472	Register a descriptor .
3473	Prints string to stdout .
3474	Check if the given descriptor is a class .
3475	Convert to JSON .
3476	Get the coordinate of the descriptor
3477	Calculate the atomic magnitude of atom i .
3478	The surface area of the surface .
3479	Create a molecule from a molecule .
3480	Create a descriptor from a JSON object .
3481	Return a new instance with missing values .
3482	Return a new instance with only the missing values removed .
3483	Return an iterator over the keys and values .
3484	Return the object as a dictionary .
3485	Get the name of this collection .
3486	Decorator to log functions .
3487	A decorator that wraps the decorated function .
3488	Log a progress message .
3489	Display a message .
3490	Fail an error .
3491	Get a random file name .
3492	Set a temporary file .
3493	Remove temporary temp files
3494	Get the fixed path .
3495	Get the legal parameters for a given method .
3496	Merge options with the given method .
3497	Add options to the parser .
3498	Terminate the queue .
3499	Add a task to the queue .
3500	Wait for all threads to finish .
3501	Record the progress bar .
3502	Get S3 keys from environment variables .
3503	Get S3 keys from commandline options .
3504	Read s3 keys from config file
3505	Initialize S3 keys .
3506	Connect to S3
3507	List all buckets
3508	Helper function for os . walk . walk .
3509	Perform a local walk on a local directory
3510	Expand source parameters .
3511	Upload single file to pool .
3512	Put multiple files into the pool .
3513	Create a bucket .
3514	Updates the privilege
3515	Print S3 files
3516	Download single file from S3 .
3517	Get files from S3 .
3518	Copy a single file to the pool .
3519	Copy files from source to S3 .
3520	Delete files from S3
3521	Return a list of relative paths
3522	Sync local files to destination .
3523	Calculate the md5 hash of a file .
3524	Returns the md5 hash of the file .
3525	Ensure target exists .
3526	Check if a remote key is in the remote key
3527	Return True if path matches the filter_path .
3528	Recursively walk through s3dir .
3529	Filters out file changes
3530	Get the privilege of a file
3531	Lookup an object by s3 URL
3532	Read a chunk of data from a file at position .
3533	Upload an object to S3 .
3534	Verify that the file size is inconsistent .
3535	Write chunk data to target file at target position .
3536	Copy object to S3 .
3537	Run the command .
3538	Validate format
3539	Pretty - print objects .
3540	List available buckets
3541	Create mb bucket
3542	Add files to S3
3543	Get file handler .
3544	catenate source files
3545	Directly sync files
3546	cp_files command
3547	Manage mv files
3548	Delete files from S3
3549	Directory listing .
3550	Handles total size of the S3 bucket
3551	Match date string to datetime .
3552	Extract time from value
3553	Match delta value .
3554	Check if value is a dict .
3555	Discover the gateway configuration .
3556	Start listening for messages .
3557	Get a read from the hub .
3558	Push data to the RPC .
3559	Get the AES key .
3560	Called when an exception occurred .
3561	Include rollbar animation .
3562	Create a stream handler for logging .
3563	Get request object .
3564	Initialize the Rollbar .
3565	Decorator for lambda functions .
3566	Report a message to Rollbar .
3567	Search items by title .
3568	Creates a logging logger .
3569	Builds the details for the user .
3570	Add lambda context data to the dictionary .
3571	Build the request data for rollbar .
3572	Determines if a frame is included in the project .
3573	Builds the request data
3574	Build server data .
3575	Build a payload from a dictionary .
3576	Run the development server
3577	Compose Chinese character .
3578	Decompose a Hangul letter from a Hangul letter .
3579	Checks if a string represents a CJang letter .
3580	Attach a word to a word
3581	Check if an exception is inside an exception handler .
3582	Checks if a node is inside a lambda .
3583	Get all the elements of a node .
3584	Check if an exception is inside an exception .
3585	Check if the node is a superclass .
3586	Check if a node is an error .
3587	Check if the given node is a default argument .
3588	Check if the node is a function decorator .
3589	Check if the given node is an ancestor of the frame .
3590	Return node s parent .
3591	Decorator to register a function as a decorator .
3592	Given a format string return a list of strings .
3593	Get the argument name from a call node .
3594	Return True if the node is an exception module .
3595	Check if an error occurs in the given handler .
3596	Check if a function is decorated with a property .
3597	Check if a function is decorated with a function .
3598	Finds an exception handler for the given node .
3599	Check if a node is a fallback block .
3600	Gets the exception handlers for the given node .
3601	Check if the given node is an exception handler .
3602	Check if a class is abstract .
3603	Try to infer a node .
3604	Return the type of the assignment node .
3605	Check if the given node is registered .
3606	Whether the given node is postponed .
3607	Returns the fully qualified name of the module .
3608	Get the absolute name of an import node .
3609	Return a string representation of tree definitions .
3610	Generate a graph for imports .
3611	Check for imports .
3612	Check for imports .
3613	Check for missing import position .
3614	Records an import node
3615	Check that the import stack should be imported .
3616	Check if a relative import node is relative to modname
3617	Add an imported module .
3618	Check if a module is deprecated .
3619	Check that the preferred module is preferred .
3620	Append external dependencies to section .
3621	Filter the dependencies of the package .
3622	Get the default options from the environment .
3623	Insert default options .
3624	Check if an attribute is visible .
3625	Get the callbacks for a node .
3626	Visit a node .
3627	Check that the message is consistent .
3628	Check function call .
3629	Check if a datetime is valid .
3630	Check if open mode is valid .
3631	Process a message .
3632	Print all messages to stdout
3633	Get the title of the node .
3634	Set default options .
3635	Check if the node is a builtin
3636	Add class node .
3637	Get ancestors of given node
3638	Gets all instances of the given class node .
3639	Extracts all classes from the given node .
3640	Leave the project and classdi diagram .
3641	Visit an ImportFrom node .
3642	Create an instance of class diagram .
3643	Extract diagram definitions .
3644	Check if an owner is an owner of the given classes .
3645	Returns a list of names that are similar to the given attribute .
3646	Return True if node is not member of owner .
3647	Check if a statement is a parent of a statement .
3648	Check if the name of a variadic variable is used as a variadic variadic .
3649	Return True if variable is not context variable
3650	Iterate over an attribute node .
3651	Visit a function node .
3652	Check if a function is callable .
3653	Add invalid operands .
3654	Yield interfaces from a node .
3655	Create a project from a list of files .
3656	Visit package elements .
3657	Visit function definitions .
3658	Visitor for assignname .
3659	Handle assignment types .
3660	Report imported modules .
3661	Visit an ImportFrom node .
3662	Compute the module based on the given context_name
3663	Handle imported module .
3664	Generate ANSI code .
3665	Apply ANSI escape codes to a message .
3666	Register the given linter .
3667	Handle a message .
3668	Print the given layout .
3669	Handle message .
3670	Open a graph .
3671	Creates a node .
3672	Write an edge .
3673	Check that the format operation is valid .
3674	Process a non - raw string token .
3675	Write layout information .
3676	Update the layout section .
3677	Generate table content
3678	Create a default table
3679	Add a new message definition
3680	Register messages from a checker .
3681	Register a message .
3682	Check the symbol for a symbol .
3683	Raise an InvalidMessageError if the message is not a duplicate symbol .
3684	Raises an InvalidMessageError if the message id is invalid .
3685	Get a list of message definitions .
3686	Get a string representation of a message .
3687	Print help message
3688	List available messages .
3689	Initialize the built - in builder .
3690	Get CPU count .
3691	Add a report to the report
3692	Context manager to temporarily change Python paths .
3693	Load plugin modules .
3694	Loads the plugin configuration
3695	Set an option .
3696	Register a checker .
3697	Disable all reports for this report .
3698	Enable Python 3 ports .
3699	Return all checkers .
3700	Return a sorted list of checker names .
3701	Prepare checkers
3702	Expand a list of modules
3703	Set current module s current module .
3704	Parse an AST node .
3705	Report the evaluation .
3706	Called when a help message is received .
3707	interactively print the documentation
3708	list all messages
3709	List all checker groups
3710	Normalize text .
3711	Get the module and frameid from a node .
3712	Safely decode a string .
3713	Checks if the given base name matches a blacklist .
3714	Load plugins from a directory
3715	Return a comment string .
3716	Formats the value as a comma - separated string .
3717	Format a section .
3718	Format the contents of the INI file .
3719	Insert child at index .
3720	Append child to this node .
3721	Return all parents of this node .
3722	Format a layout .
3723	Compute the content of a table
3724	Compute the content of a node .
3725	Collects lines from module_node .
3726	Handle an ignored message .
3727	Register a report .
3728	Create a section of the report .
3729	Add stats to self . stats .
3730	Get the name of a setter property .
3731	Get setters property .
3732	Whether return is a return node .
3733	Identify the exc types of a node .
3734	Process the managed modules .
3735	Process a module .
3736	Process comments .
3737	Check if a given import is imported from a future import .
3738	Check if the given statement is in the given statement .
3739	Return an overridden method definition for the given name .
3740	Returns a string describing the unpacked module .
3741	Detect a global scope .
3742	Check if the name node_node_node_node exists .
3743	Mark a node as consumed .
3744	Report global variables .
3745	Return True if node is ignored .
3746	Check if the node is homonym in the upper scope scope .
3747	Check for unbalanced unpacking .
3748	Recursively check metaclasses
3749	Get all packages in a directory
3750	Install pylint packages
3751	Execute all sub - directories
3752	Add similarities to a table .
3753	Main entry point .
3754	Append a stream to the stream .
3755	Computes the similarities in the graph .
3756	Print out the number of lines in each file .
3757	Find common lines .
3758	Iterate over the similarities in the lineset .
3759	Iterate through lines starting at start_at .
3760	Make a dictionary of index numbers .
3761	Return True if the definition is equivalent to call .
3762	Check the equality of two nodes .
3763	Check if two parameters have the same default value .
3764	Check if two parameters are different .
3765	Internal infer_call_result .
3766	Mark the given node as accessed .
3767	Check class definition .
3768	Check if the node is consistent .
3769	Check that the base classes are valid .
3770	Check if a function definition is declared .
3771	Checks if the decorated function should be called .
3772	Leave a function definition .
3773	Check if slots are assigned to slots .
3774	Visit the name of a function .
3775	Iterate over all members of the given node .
3776	Check for abstract methods .
3777	Check the signature of a method .
3778	Check if the given node is a mandatory method .
3779	Check if the body is a raise an AST .
3780	Check for bad exception context .
3781	Check function definition .
3782	Display the report .
3783	Check if the node is a typing tuple .
3784	Check if the node is an enum class .
3785	Check if a node is a dataclass .
3786	Initialize the Statements .
3787	Add a warning message for a class definition .
3788	Cleans up a class definition .
3789	Visit an IF node .
3790	Check if BoolOp expressions are too long .
3791	Check the docstring for spelling .
3792	Return a formatted representation of the field .
3793	Check if the given token is a trailing comma .
3794	Check if the if node is an elif statement .
3795	Checks if the ifif node is valid .
3796	Check that the node is a valid StopIteration .
3797	Check if the exception is inherited from the stopiteration module .
3798	Check if the next generator is valid .
3799	check for nested blocks
3800	Determines if the call types are duplicated .
3801	Check if merge is in - order .
3802	Checks if the given comparison is used .
3803	Determines if a node is an AND or not .
3804	Check that the return statements are consistent .
3805	Check if a node is end of a return statement .
3806	Visitor for loops .
3807	Check if graphviz is available .
3808	Run diadefs
3809	Write package dependencies .
3810	Write all classes in a diagram
3811	Configure the printer
3812	Create a VCG printer .
3813	Return True if this module should be emitted .
3814	Format the help message .
3815	Get environment variables .
3816	Run pylint on a file .
3817	Run a pylint command .
3818	Find cycles between vertices and vertices .
3819	Return the source code of the source .
3820	Generate the graph for this graph .
3821	Format a section .
3822	Register a managed message .
3823	Disable a message for a message .
3824	Enable or disable a message .
3825	Return the symbol identifier for a message .
3826	Check if a message is enabled .
3827	Add a message to the graph .
3828	Print all global options and options .
3829	Print the documentation for a checker .
3830	Calculate indent length .
3831	Generate a line hint for indentation .
3832	Return the indentation of a token .
3833	Handle line start .
3834	Get valid indentation strings .
3835	Handle hanging indentation .
3836	Determines if a continuation is inside a bracket .
3837	Push a token onto the stack .
3838	Handle a new line .
3839	Check for keyword parentheses .
3840	Check if a type annotation is valid .
3841	Check for equality .
3842	Check that the given token is surrounded by the given token .
3843	Visit a default node .
3844	Check for multiple statements .
3845	Check for valid whitespace .
3846	Check the indentation level .
3847	Return True if the given node is in the iterator .
3848	Check if the node is a conditional import statement .
3849	Visit a name node .
3850	Add message exceptions to the index .
3851	Visit an attribute node .
3852	Checks that an exception handler is not allowed .
3853	Check raise .
3854	Find the pylintrc file .
3855	Validate value .
3856	Expand the option with the default value .
3857	Match long option .
3858	Register an option provider .
3859	Set provider option value
3860	Set global option value .
3861	Generate configuration options
3862	Loads the configuration file
3863	Loads the command line options from the given args .
3864	Adds a help section to the command line parser .
3865	Display the help of the command .
3866	Load default values
3867	Return the destination attribute name for an option .
3868	Get the definition of an option .
3869	Iterate over all the options in the config file .
3870	Check if a function is callable .
3871	Check if the given node is a complex format string .
3872	Visit logging module .
3873	Visit an ImportFrom node .
3874	Visit the import module .
3875	Visit a function call .
3876	Check that the format string is valid .
3877	Check if a node is in a loop .
3878	Get the parent loop node for a break_node .
3879	Checks if a loop exits .
3880	Extract property names from a config object .
3881	Determine the name of a function .
3882	Generate a stats report for each type of the type of each type
3883	Check if a node is redefined .
3884	Check if a call is a single argument .
3885	Check for starred targets .
3886	Check nonlocal and global variables .
3887	Check if call is abstract .
3888	Check if an exception is on a loop .
3889	Check if a node is in a loop .
3890	Open the Linter .
3891	Check that the string expr is a string .
3892	Checks that the function call is called .
3893	Report failure on failure .
3894	Add duplicate keys .
3895	Check if the node is unreachable .
3896	Check that the node is not in the end of the node .
3897	Check if the callable is valid .
3898	Check for assignments .
3899	Check the name of a node .
3900	Checks the docstring for a node .
3901	Check if the literal comparison is valid .
3902	Initialize a subgraph .
3903	Parse a subgraph .
3904	Add a warning message to the graph .
3905	add checker to checker
3906	Walk the AST tree .
3907	Add a relationship .
3908	Get a relationship by type .
3909	Get the attributes of a node .
3910	Get all methods of a node .
3911	Add an object to the diagram .
3912	Return class names .
3913	List of classes .
3914	Return the class with the given name .
3915	Returns all modules in this node .
3916	Return the module with the given name .
3917	Find a module by name
3918	Add a from_module to the node .
3919	Deletes the grant from the cache .
3920	Returns the query object
3921	Get user by username and password .
3922	Get user by access token .
3923	Set token
3924	Store a grant .
3925	Get a client .
3926	Prepare a request .
3927	Initialize the extension .
3928	Creates a remote app with the given name .
3929	Make a request to the API .
3930	Generate an OAuth2 token
3931	Handle an OAuth1 response .
3932	Handle the response from the client .
3933	Handle an authorized response .
3934	Decorator for authorized_response handler .
3935	Generate hash for application .
3936	Make a client with a cached token .
3937	Create a client using the given token .
3938	Context manager for insecure SSL transport .
3939	Confirm the authorization request .
3940	Decorator to create a request token handler .
3941	Get client secret .
3942	Get request token secret .
3943	Get the access token for the request .
3944	Get default realms for client .
3945	Get realms from request .
3946	Get the redirect uri for the request .
3947	Get the rsa_key for the client .
3948	Validate client key .
3949	Validate request token .
3950	Validate access token .
3951	Validate timestamp and nonce .
3952	Validate the redirect_uri .
3953	Validate the realms for the request .
3954	Validate a request .
3955	Verify request token .
3956	Verify that the realm is allowed
3957	Save access token .
3958	Save request token .
3959	Save a verifier .
3960	Return the error URI for the provider .
3961	Check authorization request .
3962	Verify a request .
3963	Extract the client credentials from the Authorization header .
3964	Determines if the client should be authenticated .
3965	Authenticate a client .
3966	Authenticate a client ID .
3967	Get scope of refresh token .
3968	Confirm that the given refresh token is valid .
3969	Get default redirect uri .
3970	Get default scopes .
3971	Destroy an authorization grant .
3972	Save an authorization code .
3973	Save a bearer token .
3974	Validate a bearer token .
3975	Validate client id .
3976	Validate a grant .
3977	Validate a grant type .
3978	Validate a refresh token .
3979	Validate response type .
3980	Validate scopes .
3981	Validate username and password .
3982	Revoke a refresh token .
3983	Update default data for QAPI .
3984	Convert all keys in a dictionary to string
3985	Change the authorization header .
3986	Register an oauth app with the given name .
3987	Create a new OAuth application
3988	Extract the parameters from the request .
3989	Convert text to bytes .
3990	Decode base64 .
3991	Create a response .
3992	Get cached clients .
3993	Add a remote app .
3994	Create a new OAuth application .
3995	Check for certificates
3996	Verify the success
3997	This function is called when a private key is loaded .
3998	Check if the private private key callback is invalid .
3999	Check if the private private key is wrong
4000	Check the CRL
4001	Check revocation of expired certificates .
4002	Create an X509 certificate .
4003	Create a certificate .
4004	Decorator to make a function callable
4005	Load SSL locations .
4006	Set the password callback function .
4007	Sets the certificate chain for the certificate chain .
4008	Use this method to set a certificate in the current context .
4009	Set the certificate on the current context .
4010	Add a certificate to this certificate .
4011	Use the private key file to use the private key file .
4012	Use this method to switch the given private key .
4013	Load the client ca .
4014	Set SSL verification depth .
4015	Load a temporary private dh file .
4016	Sets the cipher list .
4017	Set the client s client certificates .
4018	Add a client CA certificate to this context .
4019	Set a callback function to handle SSL events .
4020	Set the TLS tags for the current connection .
4021	Set the callback for NPN .
4022	Sets the SSL protocols .
4023	Set the callback for an ALPN select .
4024	Set the OCSP callback .
4025	Set the OCSP server callback .
4026	Set the OCSP client callback .
4027	Set SSL context .
4028	Get the host name .
4029	Sets the TLSEX hostname of the TLSX server .
4030	Receive data from the socket .
4031	Receive data from the stream .
4032	Read data from the socket .
4033	Negotiate a connection .
4034	Shutdown the SSL socket .
4035	Returns a list of all available cipher names .
4036	Returns a list of client names .
4037	Set the SSL shutdown state .
4038	Get random bytes from server .
4039	Get a random client .
4040	Returns the master key .
4041	Export a keying material .
4042	Get session .
4043	Get the name of the current SSL cipher .
4044	Returns the bits of the current cipher .
4045	Get the current SSL version .
4046	Get the SSL version .
4047	Get the next negotiated protocol .
4048	Sets the SSL protocols .
4049	Get the negotiated ALPN protocol .
4050	Create a new memory buffer .
4051	Convert a BIO object to a string .
4052	Set the time boundary of a boundary .
4053	Get the ASN time from the given timestamp .
4054	Get an elliptic curve .
4055	Dump a public key to a file .
4056	Load a public key from a buffer
4057	Sign data using EVP .
4058	Verifies the signature of the given data .
4059	Dump a CRL .
4060	Convert an EVP key to a cryptography key .
4061	Generate a new RSA key .
4062	Check if this key is valid .
4063	Loads the eciptic curves from the library .
4064	Load the elliptic curves
4065	Converts the object to a EC key .
4066	Derive the name of this certificate .
4067	Get the name components of the certificate .
4068	Returns the short name of the extension .
4069	Return the data as a string .
4070	Convert this certificate to a cryptography object .
4071	Sets the public key for this certificate .
4072	Get a public key .
4073	Get the name of the X509Name object .
4074	Adds the specified extensions to this certificate .
4075	Returns a list of X509 Extensions .
4076	Verifies that this certificate is valid .
4077	Convert this certificate to a cryptography object .
4078	Set the version of the certificate .
4079	Get a public key .
4080	Sets the public key for this certificate .
4081	Sign the given digest .
4082	Returns the signature of the certificate .
4083	Returns the digest of the given digest .
4084	Sets the serial number .
4085	Get the serial number of the certificate .
4086	Returns the amount of time after this certificate .
4087	Calculates the date after the given amount of time .
4088	Whether the user has expired or not .
4089	Returns the name of the issuer
4090	Set the certificate for this certificate .
4091	Get the name of the certificate .
4092	Set the certificate subject .
4093	Add one or more extensions to the certificate .
4094	Get an X509 extension by index .
4095	Add a certificate to the store .
4096	Add a CRRL to the store .
4097	Set the time of the certificate .
4098	Initialize the certificate store .
4099	Create an X509ContextError from the context .
4100	Verifies the certificate .
4101	Set a serial number .
4102	Get the serial number of the certificate .
4103	Set a reason .
4104	Get the reason reason .
4105	Set the revocation date of this certificate .
4106	Convert this certificate to a cryptography library .
4107	Get a list of revoked certificates .
4108	Returns the issuer of the certificate .
4109	Sign the given digest .
4110	Exports the certificate .
4111	Get the type name .
4112	Set certificate certificates .
4113	Export this certificate .
4114	Sign the given key with the given digest .
4115	Verifies if the given key is valid .
4116	Encode the SPI .
4117	Get public key .
4118	Sets the public key to the SPI .
4119	Build and return a list of error messages .
4120	Convert text to bytes .
4121	Creates a function that returns a function that handles the given col .
4122	Return metadata about service labels .
4123	Returns an iterator over all issues for this board
4124	Get the comments for a card .
4125	Get boards .
4126	Fetches list of available lists for a given board .
4127	Get a list of cards .
4128	Get all comments from a card
4129	Build the api url
4130	Generic GET method .
4131	Convert link field to dict .
4132	Get issues by query
4133	Get pull requests for a given tag
4134	Aggregate remote issues .
4135	Get the value of a key from the main config .
4136	Return a dictionary of template names .
4137	Validate that the given config is valid .
4138	Return True if the given issue should be included .
4139	Make a table from a grid
4140	Execute a command and return the result .
4141	Return an integer value or None .
4142	Pull issues from the bugwarrior database .
4143	Get data from url
4144	Get collection values
4145	Find the unique UUID for the given key .
4146	Merge two fields into a task .
4147	Build uuid overrides from targets .
4148	Parse a sprint string
4149	Get credentials .
4150	Calculate the p_rrouge for multiple sequences .
4151	Calculate pvalues for each gene .
4152	Perform a fractional correction .
4153	Compute zscore of data .
4154	Plot a heatmap of dataframe .
4155	Adjust the spines of the axes
4156	Creates an argument parser .
4157	Argument parser for prerank command .
4158	Creates a subparser to subparsers .
4159	Creates a subparser for enrichment .
4160	Compute enrichment score for gene_list
4161	Generate a ranking metric tensor for each gene .
4162	Calculate the ranking of a DataFrame .
4163	Compute the mean value of the gaussian distribution .
4164	Compute the enrichment score .
4165	Returns a pandas DataFrame with the name and description descriptions
4166	Returns a pandas dataframe
4167	Returns a Pandas DataFrame containing the attributes .
4168	Returns filtered filters
4169	query the database
4170	Run GSEA analysis on a dataset .
4171	Runs a single sample of the GSEA GSEA model
4172	Perform preordering on gene sets
4173	run replot plot
4174	Sets the number of cores .
4175	Load gene sets .
4176	Gets the list of libraries available in the database .
4177	Download enrichment sets for a given library name
4178	Compute heatmat matrix .
4179	Saves results to zipfile
4180	Load gene expression vectors from CSV file .
4181	Run the analysis .
4182	Run GSEA analysis .
4183	Iterate over all samples in dataframe
4184	runs the enrichment score for each gene
4185	save the enrichment score to a file
4186	Iterate over GSEA files
4187	Run enrichment analysis on a set of genes .
4188	Parse enriched gene sets
4189	Parse gene list or list of genes .
4190	Sends a list of gene_list to url
4191	Check if gene list is recognized by user .
4192	Get a set of background genes .
4193	Run the enrich method
4194	Create a cube
4195	Visualize an ICosphere sphere .
4196	Create a torus filter .
4197	Plot a plane edges .
4198	Draws a cube as a cube
4199	Returns the color values for a given color .
4200	Check if var is a list
4201	convert a variable to a list
4202	write a filter
4203	Generate LS3 loop .
4204	Merge two vertices .
4205	Opens holes .
4206	Splits fault incidents on non - Managed faces .
4207	Parses the border of two borders .
4208	Translate vertices .
4209	rotate a script
4210	Scale the specified axis .
4211	Function to create a cylinder from a cylinder
4212	convert a circle to a cylinder
4213	Takes a string around a string and returns a string .
4214	Transform a vector to a plane .
4215	Convert a tex file to a tex file
4216	Export mesh to face .
4217	Run uniform resampling script
4218	Convert a Poisson surface to screen .
4219	Variance of a script .
4220	Write filter to all faces .
4221	Generate filter for vertex filter
4222	Generate a filter .
4223	Write a conditional vertex filter .
4224	r Calculate a cylindrical diagram .
4225	r Generate a sphere
4226	returns a string with all the visible layers
4227	Rename the current mesh .
4228	Change the current layer .
4229	Duplicate the current layer .
4230	Delete a lower layer .
4231	Handle an error .
4232	Begins a filter script
4233	Adds a new layer to the stack .
4234	Delete a layer from the stack .
4235	Save filters to file .
4236	Run a meshlab script .
4237	Calculate the coordinates of a cylinder .
4238	Generate Hausdorff distance from a mesh .
4239	Generate a Poisson disk .
4240	Add a mesh element .
4241	Generate clustered vertices .
4242	Write flat plane filter .
4243	Generate a filter for each triangle
4244	Create a Voronoi filter .
4245	Parse the topological analysis script .
4246	Parse the mlk log file .
4247	Parse the hausdorff distance file .
4248	Generate a filter function .
4249	Create voronoi filter .
4250	Generate a cyclic rainbow .
4251	r Compute the Euclidean distance between x and y .
4252	Calculate the cross product between two vectors
4253	Multiply scalar values .
4254	Create a filter for a single vertex attribute
4255	Flips the filter in faces .
4256	Generate point sets .
4257	A taubin filter .
4258	Generate a depth filter
4259	Sort a polylines file
4260	Measure topology topology
4261	Measure the geometry of a molecule .
4262	Measure the dimension of a 2D mesh .
4263	Return a lowercase version of filename .
4264	Patch request class .
4265	Retrieve upload configuration from config file .
4266	Configure uploads for the given uploads .
4267	The configuration for this upload .
4268	Return the URL for the uploaded file .
4269	Return the path to a file
4270	Check if file extension is allowed .
4271	Resolve a conflict to a target folder .
4272	Extract version information from a Vprof file .
4273	Remove duplicates .
4274	Returns the difference between two objects .
4275	Formats a list of objects into a list of objects .
4276	Trace memory usage .
4277	Return a list of code events .
4278	The overhead of the computation .
4279	Compute the memory overhead of the process .
4280	Profile a Python package .
4281	Profile a module .
4282	Profile the function execution .
4283	Run the simulation .
4284	Return a set of all python modules in a package .
4285	Run a function in a separate process .
4286	Returns the type of a run object .
4287	Initialize the module .
4288	Initialize the package .
4289	Initialize the function object .
4290	Replace sys . argv with run_args .
4291	Sample the frame .
4292	Inserts a stack into the stack
4293	Fill the sample count
4294	Format a tree node .
4295	Return the call tree .
4296	Return a dictionary of information about the current run .
4297	Profile the module .
4298	Profile the function .
4299	Transform profiler stats into a sorted list of strings .
4300	Profile the current run object
4301	Profile the module .
4302	Profile the function .
4303	Initialize the database .
4304	Show guestbook .
4305	Add entry .
4306	Main profiler handler .
4307	Starts the HTTP server .
4308	Return the content of the root directory .
4309	Handle static files .
4310	Handle GET requests .
4311	Perform a POST request .
4312	Send a response .
4313	Check if the module_path is a standard directory .
4314	Record a line of a frame .
4315	Return a generator of lines that are not defined in standard library .
4316	Update the heatmap .
4317	Merge lines with skip_map .
4318	Profile the code for each run in the code object .
4319	Format heatmap .
4320	Profile the execution of the module .
4321	Profile the function .
4322	Run the profiler .
4323	Run a function and return the result .
4324	Predict probabilities of X .
4325	Predict log probabilities of X .
4326	Fit model to data .
4327	Counts the number of documents in analyzed documents .
4328	Sorts the vocabulary in the vocabulary .
4329	Limit features between documents .
4330	Fit the model
4331	Transforms the tensorflow matrix .
4332	Convert to Scikit .
4333	Fit the model using Spark .
4334	Wrapper for Spark . predict .
4335	Fit a Linear RegressionModel .
4336	Fit the model
4337	Fit the model
4338	Compute the score for each step in Z .
4339	Perform training on model .
4340	Evaluate estimator .
4341	Compute the k - means clustering .
4342	Predict on the model .
4343	Predict classifier .
4344	Check the expected dtype of an RDD .
4345	Fit the vocabulary
4346	Compute the mean and variance of the data .
4347	Fit SVD to X
4348	Applies the transformed SVD to X .
4349	Yield blocks of an iterator .
4350	Block a tuple into a tuple of dtypes .
4351	Block an RDD into a single RDD .
4352	Apply a function to each RDD .
4353	Return the shape of each RDD .
4354	Convert the RDD to a numpy array .
4355	Apply a function to the DataFrame .
4356	Returns true if the stat is in the stat mode
4357	Return True if path is only write permissions .
4358	Check the configuration file
4359	Read configuration from file .
4360	Run a command as a shell .
4361	Execute a command .
4362	Execute a command over SSH
4363	Validate the configuration option .
4364	Get the headers for this request .
4365	Return the response body
4366	URL endpoint for ExecuteAssistant Assistant .
4367	Get the URL for the webhook .
4368	Return the text of a packet .
4369	Print detection of a packet .
4370	Discover devices .
4371	Execute the device
4372	Send a confirmation message .
4373	Called when a push event is received .
4374	Execute the given device .
4375	Scan for devices .
4376	Convert a Transaction object into a Transaction .
4377	Find the file path to the ledger .
4378	Run compatibility on the device
4379	Gets the long description of the README . md file .
4380	Reads a precalculateText measure from a JSON file .
4381	Return the default text measure .
4382	Generate a badge .
4383	Generate Unicode character codes .
4384	Generate a sequence of encodings .
4385	Return a mapping of characters to their length .
4386	Writes the given measurer to a JSON file .
4387	Convolve a 2D image .
4388	Get a 2D Gaussian kernel .
4389	Convert an image to grayscale .
4390	Entry point for pyssim .
4391	Compute the SSIM value of the SSIM image .
4392	Compute the SSIM similarity between two images .
4393	Destroys the container .
4394	Set the code version .
4395	Get the status of the draft .
4396	Print the status of the cluster
4397	Convert a connection to a node .
4398	Try to bind the node if necessary .
4399	Callback called when a new connection is received .
4400	Callback when a client is received
4401	Retrieves a utility callback
4402	Check if a node is connected to this node .
4403	Attempt to connect to a node if necessary .
4404	Called when a connection is received .
4405	Called when an outgoing message is received .
4406	Called when a connection is disconnected .
4407	Add a new TcpConnection to this node .
4408	Remove a node from the pool .
4409	Send a message to a node
4410	Destroys the server .
4411	Adds an item to the queue .
4412	Adds an item to the heap .
4413	Get an item from the heap .
4414	Acquire a lock .
4415	Returns true if the lock is acquired .
4416	Release a lock .
4417	Decorator to check the result of a function .
4418	Decorator for views that require a view function
4419	Configure the websocket connection
4420	Create Elasticsearch indexes .
4421	Migrate the published index to the latest index .
4422	Strip metadata from a report
4423	Saves aggregate reports to Kafka .
4424	Extract the XML from a file object .
4425	Parse an aggregate report XML file
4426	Convert parsed report to CSV format
4427	Parse a report file
4428	Returns a list of supported IMAP capabilities .
4429	Save the results to a CSV file .
4430	Convert results to a zip file .
4431	Evaluates the DM report .
4432	Save aggregate report to Splunk
4433	Save crimes to Splunk .
4434	Decode a base64 - encoded string .
4435	Get the base domain of the given domain .
4436	Get the reverse DNS hostname from an IP address
4437	Convert human readable timestamp to datetime .
4438	Get the GeoIP database for a given IP address .
4439	Get information about an IP address
4440	Convert an email message to RFC 2822 .
4441	Convert a string to a list .
4442	Parse a report file
4443	Drain the connection .
4444	Publish a message .
4445	Publish a message .
4446	Publish a message .
4447	Subscribe to a subject .
4448	Unsubscribe from a subscription .
4449	Flush the socket .
4450	Select the next server .
4451	Handle an error message .
4452	Handle an error .
4453	Return a dict representing the connection information .
4454	Process a single pong .
4455	Process a message .
4456	Process the info from the server .
4457	Process the connection to the server .
4458	Flush the queue .
4459	Run the read loop .
4460	Perform coactivation on a dataset .
4461	Decode images .
4462	Loads features from a numpy array
4463	Load features from images .
4464	Calculate Pearson correlation .
4465	Compute the dot product of images .
4466	Select features from features .
4467	Extract studies from a set of masks .
4468	Returns a list of feature names .
4469	Classify dataset .
4470	Classify the classifier .
4471	Fit the classifier .
4472	Set the class weight of the classifier .
4473	Fit cross - validation .
4474	Fit the sklearn model .
4475	Average images within a given region .
4476	Get n_voxels from dataset
4477	Returns the top words of a model .
4478	Pearson correlation coefficient
4479	Find the value of a fractional distribution .
4480	Load activations from file .
4481	Create an image table
4482	Return a list of trials for the given features .
4483	Add features to the table .
4484	Returns a list of feature names .
4485	Returns a dictionary with counts of feature counts .
4486	Load dataset from file .
4487	Save features to a pickle file .
4488	Get the data for the given study .
4489	Get feature data .
4490	Return the names of the columns in the dataframe
4491	Get ids of all features within a given threshold .
4492	Search features .
4493	Get ids by expression .
4494	Convert SFrame to CSR
4495	Decorator to mark a function as deprecated .
4496	Transform a 2D coordinate matrix .
4497	Convert coords to matrices .
4498	Apply a transformation to a coordinate .
4499	Mask the image .
4500	Get the mask of the image .
4501	Load images from filenames
4502	Saves a nifti image .
4503	Set the logging level .
4504	Expand an address in the given language .
4505	Normalize string tokens .
4506	Parse an address .
4507	Find near duplicates .
4508	Convert a dictionary to an object .
4509	Retrieve the tick price for a given ticker .
4510	Returns a pandas dataframe for the given ticker .
4511	Get bulk news links .
4512	Perform a HTTP request .
4513	Get access token .
4514	Perform a request .
4515	Gets a list of track s tracks .
4516	Get information about an artist .
4517	Get an artist s albums .
4518	Get the top tracks for an artist .
4519	Returns a list of artist s related artists .
4520	Returns a list of artists identified by their ids .
4521	Get information about a category .
4522	Get a list of playlists for a category .
4523	Returns a list of all available categories .
4524	Get featured playlists .
4525	Retrieves a list of new releases
4526	Get recommendations for the given seed artists .
4527	Search for a list of artists .
4528	Get albums .
4529	Get all albums .
4530	Total albums for this artist .
4531	Return a list of related artists .
4532	Get current playing track .
4533	Get the current player .
4534	Return a list of available devices .
4535	List recently played tracks .
4536	Replace tracks .
4537	Reorder tracks in a playlist .
4538	Create a new playlist .
4539	Get a list of playlists .
4540	Get tracks .
4541	Get all tracks .
4542	Returns the URL to use for OAuth2 .
4543	Get an album .
4544	Get an artist .
4545	Get a track .
4546	Get a user s details .
4547	Get albums .
4548	Get a list of artists .
4549	Search for songs .
4550	Convert a string to an ID .
4551	Decorator to ensure that a function has attribute .
4552	Create a client from a client id .
4553	Construct OAuth2 URL .
4554	Return a dict representing the current request attributes .
4555	Return a list of parameters as a string .
4556	Builds a playlist .
4557	Get all tracks .
4558	Resume playback .
4559	Transfer a device to the authenticated user .
4560	Retrieve a single instance from the URL .
4561	Get the status of the element .
4562	Convert the current month to short month .
4563	Updates the documentation URLs .
4564	Checks if the current version is greater than one .
4565	Check if the current branch is a dev version .
4566	Check if the current version is deprecation .
4567	Backup the configuration .
4568	Restore the file contents .
4569	Check if the line is to be ignored .
4570	Parse the list of domains .
4571	Extract base from element .
4572	Format a string .
4573	Get the HTTP status code .
4574	Get the current status code .
4575	Check that the domain is valid .
4576	Check if the given domain is a subdomain .
4577	Checks ipv4 .
4578	Check if the given IP is a valid IP .
4579	Check URL syntax .
4580	Load the configuration .
4581	Makes sure the user is safe
4582	Main entry point .
4583	Check if entry_url is valid .
4584	Print the header .
4585	Determine file decision .
4586	Set the domain .
4587	Test URL .
4588	Print the logo .
4589	Format the domain s domain .
4590	Extract domain from file .
4591	Process the file list .
4592	Returns the URL of the file .
4593	Switch the given variable .
4594	Get the expiration date .
4595	Generate the status file .
4596	Get the structure file .
4597	Creates a directory if it doesn t exist .
4598	Delete all directories in the directory .
4599	Set the path to the config file .
4600	Load the configuration file .
4601	Install the production configuration .
4602	Install the IANA configuration file .
4603	Install the PSL file .
4604	Install the directory structure .
4605	Merge upstream configuration values
4606	Load the upstream configuration file .
4607	Split the version string into digits and the number of digits .
4608	Check the status of two versions .
4609	Check if the current version is a cloned version .
4610	Checks if the index is invalid .
4611	The path to the analytic host directory .
4612	Returns the unified file .
4613	Returns the status file .
4614	Determine if the domain is not produced .
4615	Parse the extensions .
4616	Load the public database .
4617	Return a standard string with special formatting .
4618	Sort an element into a hierarchical structure .
4619	Load the global database .
4620	Extract the referer from the server .
4621	Yield the filenames of the extension .
4622	Update the database .
4623	Mine the link .
4624	Retrieve data from backup file .
4625	Backup the miner .
4626	Add elements to the database .
4627	Remove the contents of the file .
4628	Returns a list of all files in the database .
4629	Processes mining data .
4630	Get the content of a file
4631	Write content to file .
4632	Determine whois whois the record .
4633	Update the expiry date .
4634	Called when the request is found .
4635	Create the before header information .
4636	Construct the header data .
4637	Print the header .
4638	Construct the data structure .
4639	Get the size of the given header .
4640	Colorize data .
4641	Print the data as JSON .
4642	Print the data to disk .
4643	Save file .
4644	Calculate the time between two times .
4645	Formats the execution time .
4646	Find files to delete .
4647	Returns the list of directories to delete .
4648	Delete all databases .
4649	Compute the hash of the file .
4650	Return the hash of the data .
4651	Get the contents of the file .
4652	Executes the command .
4653	Remove key from dict .
4654	Rename a key .
4655	Merge two dictionaries .
4656	Write the main dictionary to a JSON file .
4657	Save the main dictionary to a yaml file .
4658	Return the path separator .
4659	Write data to file .
4660	Read the content of the file .
4661	Returns a sorted list
4662	Merge two dictionaries .
4663	Return list of elements that match the regular expression .
4664	Match the data .
4665	Return a copy of self . regex .
4666	Increment the number of tests .
4667	Calculate the percentage of the current status .
4668	Write the current status .
4669	Check if the given URL is valid .
4670	Check if a domain is valid .
4671	Checks if the element is a valid subdomain .
4672	Return a test status .
4673	Reformat historical formating error file .
4674	Retrieves the database file .
4675	Backup the current database state .
4676	Compute the timestamp .
4677	Returns the contents of the database .
4678	Check if the plugin is present .
4679	Retrieves the database .
4680	Backup the database .
4681	Checks if the element is in the database .
4682	Check if the element is older than the current time .
4683	Get the expiration date of the element .
4684	Add the element to the database .
4685	Sets permissions for Travis CI .
4686	Run Travis on Travis
4687	Perform ns lookup lookup .
4688	Execute a Whois test .
4689	Get the current status code .
4690	Get the test result from the database .
4691	Get the current object
4692	Return a list of all standard library paths .
4693	Get all standard package names .
4694	Iterate over unused import line numbers .
4695	Yield the module name and line number of unused imports .
4696	Yield line numbers .
4697	Yields undefined name and module name
4698	Iterate over unused variable numbers .
4699	Yield line number of duplicate key line numbers .
4700	Create a dictionary mapping messages to messages .
4701	Check source code .
4702	Extract package name from a line .
4703	Return True if the line is a multiline statement .
4704	Return True if line is a multiline statement .
4705	Filter out imports from a module .
4706	Break a line into an import statement .
4707	Filter out unused imports .
4708	Given a list of messages return a dictionary of messages .
4709	Filter a mark star import from markdown .
4710	Remove duplicate key from line numbers .
4711	Check if a dict entry contains a key .
4712	Return whether the value is a literal or not .
4713	Generate line numbers .
4714	Filter the source lines of a source .
4715	Get the indentation of a given line .
4716	Return the end of a line .
4717	Filter source code .
4718	Split a string into a set of tuples .
4719	Return True if filename is a python file .
4720	Return True if filename is a exclude file .
4721	Find files in filenames .
4722	Parse command line arguments .
4723	Reads the ObtainLeaseResponsePayload from a stream .
4724	Write out to stream .
4725	Write this CancelRequestPaymentPayment to a stream .
4726	Read CancelResponse .
4727	Creates a new Name value .
4728	Read Digest object from stream .
4729	Write this digest to a stream .
4730	Create a new Digest object .
4731	Reads the application information .
4732	Writes the application information to the specified stream .
4733	Create an application specific information .
4734	Reads the DerivationParameters from a stream .
4735	Write the DerivationParameters to a file .
4736	Reads a GetRequestPaymentRequest .
4737	Write this GetRequestPaymentPayment to a stream .
4738	Read GetResponsePayload from stream .
4739	Write the response to a stream .
4740	Read SignatureVerifyRequest .
4741	Write the Message to a stream .
4742	Read SignatureResponse .
4743	Process an incoming request .
4744	Build an error response .
4745	Process a template attribute .
4746	Gets a list of attributes from the managed object .
4747	Get an attribute from a managed object .
4748	Sets attributes on a managed object .
4749	Sets the attribute on the managed object .
4750	Determines if the given policy is allowed .
4751	Write the decrypted request to the given stream .
4752	Creates a new secret
4753	Set a configuration setting .
4754	Load the server configuration file .
4755	Process a value parameter .
4756	Process a result value .
4757	Reads a long integer from the stream .
4758	Writes a long integer to the stream .
4759	Check that the value is valid .
4760	Reads a BigInteger .
4761	Write the value to the given stream .
4762	Ensure that the value is an integer .
4763	Validate the value .
4764	Read Boolean value from the stream .
4765	Write boolean value to stream .
4766	Writes a boolean value to the stream .
4767	Check that the value is a valid type .
4768	Reads an Interval object from a stream .
4769	Check that the value is valid .
4770	The encryption key .
4771	Set the encryption data .
4772	Validate the key .
4773	Validate the secret .
4774	Validate the opaque data structure .
4775	Convert an attribute name to a tag tag .
4776	Convert an attribute tag to its name .
4777	Return a bitmask from an iterable of enumerations .
4778	Return list of enumerations that match a given bit mask .
4779	Check if an enumeration is a bit mask .
4780	Read KeyPairRequest .
4781	Write the template to the given buffer .
4782	Read CreateKeyPairResponse payload .
4783	Write the CreateKeyPairResponse to the buffer .
4784	Reads the GetAttributeList request .
4785	Write the attribute list to the output buffer .
4786	Read GetAttributeListResponse payload .
4787	Write the attribute list to the specified buffer .
4788	Return a list of all json files in the given directory .
4789	Scans the policy files .
4790	Start the monitoring process .
4791	Get X509 certificate from connection
4792	Returns the extended key usage value for a certificate .
4793	Returns list of common names from certificate .
4794	Get the client identity from the certificate .
4795	Reads the CreateRequest payload .
4796	Write the object to the given buffer .
4797	Read CreateResponse payload .
4798	Write the response payload .
4799	Convert a dictionary into a private key
4800	Reads the EncryptedResponse payload .
4801	Reads the DeriveKeyRequest payload .
4802	Write the object to the given buffer .
4803	Returns whether the given attribute is supported .
4804	Check if an attribute is deprecated .
4805	Determines if an attribute can be applied to an object type .
4806	Check if an attribute is permitted .
4807	Get valid value from config file .
4808	Read CheckResponse payload .
4809	Write CheckResponse to a stream .
4810	Reads the attribute reference .
4811	Write the AttributeReference to the given buffer .
4812	Reads attributes from the given stream .
4813	Write attributes to a KIP file .
4814	Reads the nonce from the stream .
4815	Write the nonce to the stream .
4816	Parse username password and password .
4817	Write the credentials to a stream .
4818	Reads the device credential .
4819	Write the message to a stream .
4820	Reads a credential from a stream .
4821	Write this credential to a stream .
4822	Read MACSignature information .
4823	Write the MAC signature information to a stream .
4824	Reads a KeyWrapData object .
4825	Write this message to a stream .
4826	Reads a KeySpecification from a stream .
4827	Write this message to a stream .
4828	Reads the extension information .
4829	Write this extension to a stream .
4830	Create an extension .
4831	Read revocation reason from a stream .
4832	Write the revocation reason .
4833	Validate the revocation_code
4834	Reads object definition .
4835	Write the object to the object_buffer .
4836	Reads the object s properties .
4837	Write the object as a byte string .
4838	Reads the RNG parameters from the input buffer .
4839	Write the RNG parameters to a file .
4840	Reads the profile information .
4841	Write the ProfileInformation object to a file .
4842	Write the ValidationInformation structure to a file .
4843	Read Capability Information .
4844	Write CapabilityInformation to a file .
4845	Stop the server thread .
4846	Serve connections .
4847	Reads a LocateRequestPayload payload .
4848	Write the object to the given buffer .
4849	Parse the LocateResponse payload .
4850	Writes the LocateResponse to the specified buffer .
4851	Create a symmetric key .
4852	Create an asymmetric key pair .
4853	Compute the HMAC - MAC using the provided algorithm .
4854	Encrypts a plaintext message .
4855	Encrypt a plaintext message .
4856	Encrypt plaintext .
4857	Decrypts the ciphertext using the ciphertext method .
4858	Create a RSA key pair .
4859	Derives a key .
4860	Load RSA private key from bytes .
4861	Verifies the signature of a message .
4862	Read SignResponse payload .
4863	Write the signature data to a stream .
4864	Reads a GetUsageAllocationRequest .
4865	Convert protocol version to KMIP version .
4866	Reads the protocol version .
4867	Write the protocol version to the given stream .
4868	Reads the Authentication object .
4869	Write the Authentication object to a stream .
4870	Read PollRequestPayment .
4871	Read a Certificate object from the stream .
4872	Write the certificate to the given stream .
4873	Authenticate the SLUGS URL .
4874	Parse archive response .
4875	Write the response to the stream .
4876	Start the connection .
4877	Reads the RekeyResponse payload .
4878	Returns True if profile is supported .
4879	Derive a key .
4880	Gets a list of attributes for a specific item .
4881	Gets a list of attributes for a user .
4882	Perform a batch query .
4883	Sign a data request .
4884	Open the connection .
4885	Close the connection .
4886	Creates a new key policy .
4887	Creates a new key pair .
4888	Registers the managed object .
4889	Create new rekey .
4890	Derive a key from a set of unique identifiers .
4891	Locate managed objects .
4892	Checks the status of a resource .
4893	Gets a Kmip object .
4894	Get the list of attributes for a managed object .
4895	Activate the managed object .
4896	Revoke a managed object .
4897	Perform MAC MAC operation .
4898	Builds a cryptography parameters object from a dictionary .
4899	Builds an encryption key information object .
4900	Builds a MACSignature object from a dictionary .
4901	Build a KeySpecification object from a dictionary .
4902	Build common attributes for operation policy .
4903	Builds a name attribute list .
4904	Read query parameters .
4905	Write the query payload to the output buffer .
4906	Write the message to the given buffer .
4907	Reads the GetAttributesResponse payload .
4908	Write the attributes to a byte string .
4909	Get a single entry point for a given group .
4910	Get all ephemeris named group
4911	Return a list of all of the distributions in a group
4912	Load the object .
4913	Create an entry point from an entry point
4914	Live reload server
4915	Generate project files .
4916	Generate the controller .
4917	Generate action code .
4918	Generate the form .
4919	Generate the model .
4920	Generate a macro .
4921	Make a directory p .
4922	Rewrite project file with project name .
4923	Convert time to a time string .
4924	Check if the URL is valid .
4925	Encode an object to a string .
4926	Deserialize a string into a dict .
4927	Wrap a function in JSON format
4928	Return an absolute URL for the given endpoint .
4929	Load config from environment .
4930	Add a user to a session .
4931	Returns the current user
4932	Create a Flask application .
4933	Register jinja2 templates .
4934	Register routes .
4935	Register error handler .
4936	Register hooks for application .
4937	Write dataframe to a CSV file .
4938	Read CSV from csv file .
4939	Serialize a dataframe .
4940	Deserialize a dataframe into a DataFrame .
4941	Update this dataset from a dataframe .
4942	Update this object from raw data .
4943	Returns the URL for the download .
4944	Add a new file from a dataframe .
4945	Adds a new file from raw data .
4946	Opens this dataset .
4947	Read the entire dataset as a binary string .
4948	Read the entire dataset as text .
4949	Returns a pandas DataFrame from the stream
4950	Get the intermediate dataset .
4951	Get all experiments for a workspace
4952	Get datasets for a workspace
4953	Get a dataset
4954	Decorator for publishing a function .
4955	Decorator to register a function as a publish function .
4956	Decorator to declare types .
4957	Decorator to mark a function as a method .
4958	Decorator to mark a function as a decorator .
4959	Find all global globals in code .
4960	Return a copy of this Pen .
4961	Lookup a color for a Gtk color .
4962	Draw the canvas .
4963	Compute the Euclidean extension .
4964	Cubstein Jacobian .
4965	Build the choices list from the tree .
4966	Decorator to return a function that handles command options .
4967	Decorator to register a function hook .
4968	Compose a dynamic sitetree .
4969	Initialize the cache .
4970	Empty the cache
4971	Get an entry from the cache
4972	Update an entry in the cache
4973	Store an entry in the cache
4974	Initialize the cache .
4975	Resolve the I18n alias for the given alias .
4976	Check if the current app is admin .
4977	Calculate the depth of an item
4978	Get the current item for the given alias .
4979	Get URL for a model item .
4980	Init sitetree .
4981	Get the sitetree attribute for the given attribute .
4982	Get the ancestor of current item .
4983	Build the menu for the menu .
4984	Checks if the item has access to the given item .
4985	Build breadcrumb path .
4986	Generate a sitetree
4987	Render the children of the given item .
4988	Return the children of an item .
4989	Updates the tree s children
4990	Filter items by navigation type
4991	Get the ancestor of a tree item .
4992	Merge tree item into current tree .
4993	Resolve a variable .
4994	Parse the sitetree tree .
4995	Parse the sitetree nodes .
4996	Return a sitetree for the sitetree .
4997	Return a sitetree node for the sitetree .
4998	Render the sitetree context
4999	Create an alias for a given tag .
5000	Returns the URL name for a model .
5001	Registers the tree admin .
5002	Handler for handling tree items .
5003	Redirect to the current item .
5004	Redirect to the add item .
5005	Redirect the response to the view .
5006	Replace the tree item with the parent item .
5007	Get the tree for the given item_id .
5008	Action to move an item .
5009	Save the item to the parent .
5010	Add urls
5011	Dump model tree to JSON
5012	Generate a tree model
5013	Create a new tree item
5014	Import an application s sitetree module .
5015	Returns the model class corresponding to the given settings entry .
5016	Create a Config from a mapping .
5017	Create a Config from a Python file .
5018	Create a Config from a TOML file .
5019	Create a Config object from an instance .
5020	Generate a zipkin attributes .
5021	Create HTTP headers for a new span .
5022	Get the current trace context for this span .
5023	Start the current span .
5024	Stops the tracing context .
5025	Add extra annotations to the logging context .
5026	Add an annotation annotation to this span .
5027	Override this method to override the span name .
5028	Create an endpoint .
5029	Creates a new endpoint with the given service name .
5030	Create a v1_span object for this span .
5031	Encode a list of protobufs into a string .
5032	Create a protobuf span from a protobuf .
5033	Convert hexadecimal id to bytes .
5034	Get the Span protobuf for the given kind .
5035	Convert an endpoint into an Endpoint .
5036	Convert annotations to pb_pb2 . protobuf .
5037	Create an annotation .
5038	Create binary annotation .
5039	Creates a zipkin endpoint .
5040	Returns a copy of the endpoint with the given service name .
5041	Convert dict of annotations into list of annotations .
5042	Build a list of binary annotations .
5043	Create a new span .
5044	Convert a Thrift span to bytes .
5045	Encodes binary strings into bytes .
5046	Detect span version and encoding .
5047	Convert a list of spans to a list of spans .
5048	DEPRECATED with zipkin attributes .
5049	Encode a v2_span v2 .
5050	Create the json endpoint for the endpoint
5051	Encode a Span .
5052	Decodes a list of spans .
5053	Convert a Thrift endpoint into an Endpoint object .
5054	Convert thrift annotations into a dictionary .
5055	Convert binary annotations from thrift annotations to zipkin annotations .
5056	Decode a Thrift span .
5057	Convert a trace_id to a string .
5058	Convert an unsigned integer to lower hex .
5059	Writes a value to a hexadecimal string .
5060	Fix date before date
5061	Set the transaction code
5062	Set the iph_id of the tag
5063	Set the TNR tag for a transaction .
5064	Parses the input string and returns the tag object .
5065	Parse a MT940 transaction file .
5066	Join the given string .
5067	Extracts the response from the response .
5068	Log a rate limit .
5069	Make a request to DBL .
5070	Get bot info .
5071	Get a list of bots .
5072	Read a term from the stream .
5073	Write the given message .
5074	Close all input files .
5075	Decode a string .
5076	Encode a term .
5077	Add a source address to the network interface .
5078	Send all pending messages .
5079	Register a remote service callback .
5080	Stop the server .
5081	Clear all local services .
5082	Search for remote services .
5083	Create SOAP message
5084	Discover the logger .
5085	Get the item manager for this instance .
5086	Get all child relations of a model
5087	Return all child m2m relations for a model .
5088	Save child relations to child models .
5089	Create model from serialized data .
5090	Validate all unique fields .
5091	Returns True if all forms have changed .
5092	Return a copy of this address with a valid checksum .
5093	Generate a checksum from the address .
5094	Parse command line arguments .
5095	Create an argument parser .
5096	Prompts user for a seed .
5097	Validate signature fragments .
5098	Get a key by index .
5099	Get the key for an address .
5100	Create key iterator .
5101	Creates a Kerl sponge .
5102	Iterate over a list of bytes .
5103	Squeeze the given trits .
5104	Transform the state into a Python dictionary .
5105	Execute getDigests command .
5106	Execute get_keys command .
5107	Prepares a single multisig transfer command .
5108	Add two integers .
5109	Convert integer n to a list of strings .
5110	Adds two integers to the right .
5111	Adds the given operand to the right .
5112	Print seed .
5113	Find transactions .
5114	Execute GetInputs command .
5115	Get new addresses command .
5116	Returns a command to get the list of Transfers commands .
5117	Promote a transaction .
5118	Returns a replay command for a transaction .
5119	Submit a transfer command .
5120	Send a message to the adapter .
5121	Resolve the given URI .
5122	Send a request .
5123	Log a message .
5124	Send an HTTP request .
5125	Interpret the raw API response .
5126	Seed a response for a command .
5127	Add digests to the pool .
5128	Return the address associated with this pool .
5129	Returns an iterator over the addresses starting with the given seed .
5130	Convert a digester to an Address object .
5131	Generate an address for the given key iterator .
5132	Returns a list of transaction objects .
5133	Iterate over all available addresses .
5134	Get bundle IDs from a list of transaction hashes .
5135	Check if codec is valid .
5136	Return codecInfo instance .
5137	Encode a binary string .
5138	Decode bytes .
5139	Returns a list of addresses matching the given seed .
5140	Add a route .
5141	Creates a Transaction object from a bytes string .
5142	Return a dict representation of this Message .
5143	Return the validity of this signature .
5144	Sets the transaction s state .
5145	Returns a list of messages .
5146	Return a list of the transactions as a list .
5147	Return the transactions grouped by the last transaction .
5148	Discover all commands in a module .
5149	Executes the given request .
5150	Apply filter .
5151	Get the URL for a job .
5152	Returns the errors .
5153	Return whether the bundle is valid .
5154	Generate the validation errors .
5155	Gets the validation errors for the bundle signatures .
5156	Returns error message for group signatures .
5157	Traverse a bundle transaction .
5158	Start the IPython REPL .
5159	Return random seed .
5160	Returns a digest of the key .
5161	Sign a bundle of inputs .
5162	Prints a pretty representation of the object .
5163	Iterate over the given bytes .
5164	Squeeze the given number of bits .
5165	Add additional context to an exception .
5166	Generate a security level .
5167	Increment the legacy tag counter .
5168	The tag representation of this transaction .
5169	Add a transaction to the bundle .
5170	Finalizes the bundle .
5171	Signs all the inputs .
5172	Sign inputs at start_index .
5173	Add the inputs to the bundle .
5174	Convert value to SI unit .
5175	Decompress G1 to G1
5176	Find the prime of a prime field .
5177	Read from a JSON file .
5178	Return a list of words that match the given category .
5179	Find the synonyms for a word .
5180	Expand the lexicon .
5181	Split text into parts .
5182	Get all categories
5183	Generate a random colour
5184	Plot the component of this component
5185	Create a builtin object from a Fortran string .
5186	Instantiate a Timescale from a given name .
5187	Return a random decorator .
5188	Create a Color object from an image .
5189	Create a legend from a CSV file .
5190	Convert to a CSV string .
5191	Returns the maximum width of the table .
5192	Returns a decorator for the given component .
5193	Get an attribute from the decorated function .
5194	Get a component from the legend .
5195	Plot the elements in the list .
5196	Create component from text .
5197	Generate a summary string
5198	Deprecated .
5199	Process a single row .
5200	Parses a CAN string into a dictionary .
5201	Check if all vertices are consistent .
5202	Return unique thickness .
5203	Construct an IntervalList from a set of top values .
5204	Clean data from longitudinal data .
5205	Reads from petrel file .
5206	Build a list of dictionaries from data_dict .
5207	Create a Striplog object from a CSV file .
5208	Create a ColorImage from an image file .
5209	Create a Log from a Log object .
5210	Construct a LAS3 object from a string .
5211	Creates an Interval object from a file .
5212	Return a copy of Striplog
5213	Convert to a csv file .
5214	Convert L3 to L3 format
5215	Plot the axis of this list .
5216	Retrieve the data of a variable .
5217	Extract an attribute from a basis set .
5218	Finds all components matching a search term .
5219	Returns a list of indices that overlap .
5220	Finds the indices of gaps in this collection .
5221	Return a copy of the strip .
5222	Remove gaps from the strip .
5223	Return a copy of this interval with a given component .
5224	Return a new Striplog with the same spans .
5225	Return a new Striplog object that intersect with this Striplog .
5226	Merge overlapping pieces .
5227	Plot the histogram .
5228	Invert a Striplog object inplace .
5229	Crop the Striplog .
5230	Calculate the quality of this curve .
5231	Convert hexadecimal color to name
5232	Read an image from a file .
5233	Make sure the field_name is valid .
5234	Returns a list of jobs .
5235	Parse the given HCL request .
5236	Update a token .
5237	Returns a list of all allocations for a given prefix .
5238	Fail a deployment .
5239	Pause a deployment .
5240	Get the health of a deployment .
5241	Drain a node .
5242	Send a drain to a node .
5243	Get an eligible node .
5244	List files .
5245	Get a stream of data for a given id .
5246	Get a file .
5247	Joins agents .
5248	Updates the servers
5249	Force leave a node .
5250	Returns a list of nodes .
5251	Returns a list of evaluation results .
5252	Returns a list of namespace namespaces .
5253	Register a new job .
5254	Plan a job .
5255	Dispatch a job .
5256	Revert a job .
5257	Return a stable job .
5258	Unregister a job .
5259	Get the current configuration .
5260	Delete a peer from a peer .
5261	Returns a list of deployments .
5262	Get a random value from the mutator .
5263	Gets the mutator for a given object .
5264	Get a random polyglot attack .
5265	Fuzzy given object .
5266	safe version of utf - 8
5267	Start the http server
5268	Stop the server .
5269	Return html response
5270	Run the server .
5271	Fuzzy fuzz .
5272	Spawn a command .
5273	Get the output of the process .
5274	Finish the process .
5275	Terminate multiprocessing .
5276	Start the worker .
5277	Execute a JFuzzer command
5278	Decorator to encode JSON strings
5279	Build a random string .
5280	Build a string representation of the statement .
5281	Build query string .
5282	Build a random value .
5283	Build the OptGram .
5284	build reference definition
5285	Build a STAR .
5286	Shutdown the process monitor
5287	Run the process and monitor the process_to_monitor .
5288	Start monitor .
5289	Return a random float .
5290	Add a definition to the group .
5291	Add def_name to cat_group .
5292	Generate gram .
5293	Fuzz the given element .
5294	Returns fuzzed string
5295	Get fuzzed elements
5296	Decorator to make a function decorator .
5297	handle SIGTERM
5298	quit the running command
5299	Handles the command .
5300	Resume paused state .
5301	Handles command stop .
5302	Handles command restart
5303	Returns a list of Skype events .
5304	Set the user s mood .
5305	Set the avatar of the user .
5306	Get the metadata for a given URL .
5307	Get a single contact
5308	Get a user by id
5309	Get a list of bots .
5310	Get a user s agent .
5311	Searches for a given query string
5312	Returns a list of Skype requests .
5313	Instantiate a model from raw data .
5314	Merge this object into another .
5315	Merge another object into the cache .
5316	Executes a sync state call .
5317	Read the token file
5318	Write token to file .
5319	Verify that a token is valid .
5320	Refresh Skype token
5321	Get user id
5322	Get a valid registration token
5323	Update all SkypeEndpoints
5324	Checks to see if a given user is available
5325	Returns the token and token for the given token .
5326	Authenticate to Skype .
5327	Configure the messaging service settings
5328	Ping this email .
5329	Retrieve recent conversations .
5330	Get a single chat
5331	Create a new thread
5332	Extracts the id from a URL
5333	Get chat ID from a chat URL .
5334	Iterate over a function yielding each item .
5335	Convert text to unicode .
5336	Try to detect format of text .
5337	Parses the given text and returns the metadata and content .
5338	Convert metadata to dict .
5339	Parse YAML file .
5340	Export metadata to YAML
5341	Export metadata to JSON .
5342	Match the pattern .
5343	Return a list of items .
5344	Return a list of sub - lists matching the given index .
5345	Convert to new start position .
5346	Returns a list of arguments .
5347	Returns a list of lists matching the given pattern .
5348	Parses a list of strings .
5349	Transform a dictionary into a regular expression .
5350	Return index start and end indexes .
5351	Insert string at index .
5352	Return the partition of a character .
5353	Return a list of spans for a given type .
5354	Shrink overlapping spans .
5355	Update the span with given index .
5356	Return the nesting level of the parser .
5357	Derive the shadow shadow .
5358	Return a byte array of byte strings that can be used as a byte array .
5359	Return a dictionary mapping type names to spans .
5360	Deprecated .
5361	List of parameters .
5362	List of parser functions .
5363	List of templates .
5364	List of WikiLinks .
5365	List of comments .
5366	List of external links .
5367	List of sections .
5368	Return a list of Table instances .
5369	Get list of lists matching pattern .
5370	Return a list of the Tag s tags .
5371	Return the spans of the given type .
5372	Return list of ancestors .
5373	Return the parent of the given type .
5374	Return the mode of a list .
5375	Get the argument with the given name .
5376	Return a normalized name .
5377	Removes the first argument from the command line .
5378	Remove duplicate arguments from the command line .
5379	Set the argument s value .
5380	Get an argument by name .
5381	Check if an argument has the given name and value .
5382	Delete an argument from the command line .
5383	Convert a COSCC code to a string
5384	Find an object with the given ellipsoid .
5385	Load a crs from a URL .
5386	Parse a GeoJSON file .
5387	Convert an EPSG code string into a crs object
5388	Return a crs object from an ESRI code
5389	Convert RSR code to crs
5390	Takes a text format and attempts to detect the correct type .
5391	Write the record to out .
5392	Read Record from stream .
5393	Parses GeoTiff keys from vlrs .
5394	Parses a geotiff key .
5395	Gets the signature for the extra dimension .
5396	Return the id for a extra dimension type .
5397	Create a new PointRecord from another point record .
5398	Copy fields from another record to another record .
5399	Append zeros to the array
5400	The names of all dimensions in this array .
5401	Create an instance of Zeros .
5402	Create a Point from a stream .
5403	Create a Point object from compressed data .
5404	The dimension of the data .
5405	The vertical dimension .
5406	Z dimension of the data .
5407	Add extra bytes to the data_data field .
5408	Write the points to the given stream .
5409	Write metadata to file .
5410	Write the file to the given destination .
5411	Builds a dictionary mapping point format to dtypes .
5412	Builds a dictionary of dtypes and dtypes for point format_format .
5413	Convert numpy dtype to point format
5414	Returns the minimum file version for a given point format .
5415	Check if point format format is compatible with file format .
5416	Returns a list of vlrs with the given type
5417	Remove vlrs that match the given type .
5418	Reads a list of VLR objects from a stream .
5419	Check if a list of points have the same point format .
5420	Check if las files have same dtype .
5421	Check if file signature is correct .
5422	Reads a single header from the stream .
5423	Read VLRL list from stream .
5424	Reads points from the stream .
5425	Read compressed points data .
5426	Reads the internal waveform packet .
5427	Reads the evlrs from the stream .
5428	Warn if the stream is not at the end of the stream .
5429	Opens a LAS reader from a file .
5430	Read alas file .
5431	Creates a LasData object from a header .
5432	Helper function to create alas dataset .
5433	Convert alas object to a Point object .
5434	Merge las files .
5435	Read and write the result .
5436	Return the date as a datetime object .
5437	Set the date of the year
5438	The coordinates of the min - axis .
5439	Set the min and max values .
5440	A list of tuples containing the maximum and z - axis .
5441	Set max_max and z values .
5442	The scales of the cube .
5443	A list of tuples containing the coordinates of the cylinder .
5444	Read the version number from a file stream .
5445	Convert old_header to new_version .
5446	Unpack an array into a numpy array .
5447	Packs an array into a sub - field array .
5448	Return a list of dimension names that have been lost .
5449	Returns a dictionary of sub_fields keyed by name .
5450	Return the total number of extra extra extra bytes .
5451	Return True if there is a waveform packet .
5452	Do a demo of the satel integration .
5453	Calculate the checksum of a command .
5454	Print a hexadecimal message .
5455	Verify that the response is valid .
5456	Returns a list of set bits .
5457	Generate a query string
5458	Runs a demo .
5459	Connect to server .
5460	Start monitoring .
5461	Disarm disarm code .
5462	Send a clear alarm command .
5463	Set output mode .
5464	Keep the alarm alive .
5465	Monitor the status of the device .
5466	Close connection .
5467	Purge the database .
5468	Guess type of file .
5469	Get file_id for given path .
5470	Get a notebook .
5471	Create a notebook model from a database record .
5472	Get a directory .
5473	Convert a list of file records to FileModel .
5474	Create a directory model from a database record .
5475	Create a notebook model from a database record .
5476	Save a notebook model .
5477	Save file to database
5478	Rename a file .
5479	Delete a file
5480	Ensure user is in database .
5481	Purge a user .
5482	Create a directory .
5483	Return True if table is in directory .
5484	Delete a directory .
5485	Check if a directory exists .
5486	Return a list of files in a directory .
5487	Return list of directories in a directory .
5488	Given a user id and api_id and api_path and api_path return a dict where the file is the file path and the file id is the file .
5489	Select file creation .
5490	Return the default fields for the file .
5491	Get a single file from the database .
5492	Retrieve a single file .
5493	Get file_id from database
5494	Check if a file exists
5495	Rename a directory .
5496	Save a file .
5497	Generate all notebooks .
5498	Delete remote checkpoints .
5499	Generate remote checkpoints .
5500	Yield notebooks from a table .
5501	Encrypt row data .
5502	Re - encrypts the given user .
5503	Derive a single Fernet key .
5504	Return a list of Fernet keys from a list of passwords .
5505	Factory for encryption encryption .
5506	Decorator for memoization functions .
5507	Get the name of the column_like .
5508	Convert row fields to dict .
5509	Convert row to dict .
5510	Create a notebook checkpoint .
5511	Create a remote file .
5512	Delete a checkpoint .
5513	Get the content of a checkpoint .
5514	Get a list of remote checkpoints .
5515	Rename all checkpoints .
5516	Delete all checks .
5517	Purge remote checkpoints .
5518	Resolve the given path and return the root manager .
5519	Applies prefix to model data .
5520	Decorator to dispatch a path .
5521	Decorator for kwargs .
5522	Decorator to dispatch a path to another .
5523	Handle changes .
5524	Generic GET method .
5525	Normalize an API path .
5526	Split an API file path into a directory and name .
5527	Return a base64 encoded string .
5528	Read a base64 string
5529	Decode unknown content .
5530	Decode a base64 - encoded string .
5531	Finds all directories in a path .
5532	Decorator to handle path outside of root .
5533	Create a user .
5534	Separate directories and files from a list of models .
5535	Recursively walk all subdirectories .
5536	Recursively walk all files in the given manager .
5537	Walk through all files in mgr .
5538	Encrypt multiple users .
5539	Re - encrypt a single user .
5540	Unencrypt multiple users .
5541	Unencrypt a single user .
5542	Create a temporary file with alembic .
5543	Upgrade alembic database
5544	Sanitize a block of data
5545	Add instance id to embeddings .
5546	Load instances of given embed_type .
5547	Insert instance into block .
5548	Load all of the embedding data .
5549	Validate data .
5550	Show admin page .
5551	Convert the data to a JSON string .
5552	Hide the authenticated fields .
5553	Remove fields from the request .
5554	Extracts the requested article from the URL .
5555	Return a queryset of published items .
5556	Return a queryset of published items .
5557	If NullBoolean is set to True return False otherwise .
5558	Validates a Widget
5559	Validate a zone .
5560	Validate a UUID
5561	Returns the user s permissions
5562	Modify user permissions .
5563	Validate author data .
5564	Create a zone from validated data .
5565	Returns the data as a dictionary .
5566	Prepare data for processing
5567	Render the template .
5568	Get the settings for this Integration .
5569	Authenticate the user with the given query .
5570	Get integration settings .
5571	Update settings for integration .
5572	Signup a new invite .
5573	Convert list of strings to unicode string
5574	Render a zone .
5575	Save a featured image
5576	Save the subsection of this article .
5577	Returns the file extension .
5578	Returns the thumbnail URL for this image .
5579	Save image .
5580	Saves a new thumbnail .
5581	Get the connection to the database .
5582	Get a Bandwidth stream object .
5583	Read a number of bytes from the bucket .
5584	Receive the amount of amt .
5585	Schedule the amount of time to consume .
5586	Process a scheduled consume token .
5587	Calculate the Exponential Moving Average
5588	Records the current consumption rate .
5589	Download a file from a bucket .
5590	Wait for a transfer to complete .
5591	Get callbacks for a given transfer .
5592	Returns a dictionary with the given whitelisted keys .
5593	Decrease the counter .
5594	Finalize the pool .
5595	Check if a file is a special file .
5596	Acquire a tag .
5597	Release a previously acquired tag .
5598	Adjust the size of the file .
5599	Enqueue a write write write write task .
5600	Get the write task for the given fileobj .
5601	Returns the appropriate download manager class .
5602	Main function for multiprocessing .
5603	Main entry point .
5604	Add a write request to the heap .
5605	Determine whether the given object is seekable .
5606	Upload a file to S3 .
5607	Upload a file to a bucket .
5608	Copy a copy of a bucket to a bucket .
5609	Delete a submission .
5610	Shutdown the server .
5611	Cancel all tracked transfers .
5612	Wait for the transfer to be completed .
5613	Read a number of bytes from the given fileobj .
5614	Wrap a file - like object to a file - like object .
5615	Returns the appropriate uploader class .
5616	Set the exception .
5617	Set the result of the Future .
5618	Set an exception .
5619	Waits for the result to finish .
5620	Cancel a job .
5621	Submit task to executor .
5622	Add a callback that will be called when the future is done .
5623	Register a failure cleanup function .
5624	Announce this job .
5625	Submit a task to the executor .
5626	Add a callback function to the future .
5627	Upload a file to S3 .
5628	Downloads a file from S3 .
5629	Iterate over step decorators .
5630	Check if a decorator is passed in a decorator .
5631	Returns a list of changed step definitions .
5632	Iterate over step functions .
5633	Check if a step is a string or list of strings .
5634	Returns a list of diffs for a step .
5635	Select the python parser for the given parser
5636	List team membership .
5637	Create a team membership object .
5638	Update a team membership .
5639	Deletes the project membership .
5640	Get the catfact
5641	Process a new webhook .
5642	List members of a room .
5643	Deletes the project membership .
5644	Validate base_url and hostname .
5645	Check if string is a web URL .
5646	Open a local file .
5647	Check that the given object is an instance of acceptable_types .
5648	Create a dictionary from a list of dictionaries .
5649	Check that the response code is expected .
5650	Convert a JSON string to an OrderedDict .
5651	Convert time string to datetime format .
5652	List room objects .
5653	Create a room .
5654	Update a room .
5655	Deletes a room .
5656	List license objects .
5657	Time of the team s creation date .
5658	Get access token .
5659	Create webhook .
5660	Update a webhook .
5661	Delete a webhook .
5662	Strip the query string from the API endpoint .
5663	Sets the current rate limit .
5664	Updates the headers .
5665	Convert a URL to an absolute URL .
5666	Makes a request to the API .
5667	Perform a GET request .
5668	Get pages from WebExact .
5669	Get items from a single page
5670	Perform a PUT request .
5671	Perform a DELETE request .
5672	Creates a new login request
5673	Gets a list of person objects .
5674	Create a message .
5675	Deletes a message
5676	Create a person .
5677	Gets a person object .
5678	Update a person .
5679	Deletes a person
5680	Returns a new person object
5681	List roles .
5682	Get team objects .
5683	Create a new team .
5684	Update a team .
5685	Deletes a team .
5686	Get a list of events .
5687	Serialize data into a tuple .
5688	Gets an access token .
5689	Returns the last activity .
5690	Handler for webhook events .
5691	Gets the NGR endpoint of the NGR API .
5692	Delete webhook with given name
5693	Create a webhook .
5694	Create webhook .
5695	Command line interface .
5696	Generator that yields all telegram messages .
5697	Reads messages from the queue .
5698	Create a DSM protocol for DSM
5699	Create a serial connection to DSM .
5700	Create a connection to DSM
5701	Handle incoming data .
5702	Called when the connection is lost .
5703	Handle a telegram .
5704	Parse the telegram data .
5705	Retrieve the version from the given file .
5706	Ensures that the given specs are valid .
5707	Return a list of packages in the top - level directory .
5708	Create a command class .
5709	Return a command for the given function .
5710	Run a command .
5711	Make sure targets exist .
5712	Wraps a command to run commands .
5713	Returns a command handler for the given package_data_spec .
5714	Extract the data files from the data specs .
5715	Get package data from root .
5716	Compile a glob pattern .
5717	Yields paths from a path .
5718	Translate a glob pattern .
5719	Join the translated parts .
5720	Translate a glob pattern into a regular expression .
5721	Truncate a table .
5722	Writes a table to the database .
5723	Write indexes to database .
5724	Write indexes to database .
5725	Adds constraints to the database .
5726	Write contents of table to file .
5727	Process row .
5728	Write indexes for a table .
5729	Writes table constraints .
5730	Writes the triggers to the given table .
5731	Return the number of items in the queue .
5732	Enqueue the given data
5733	Starts a task .
5734	Build an AND query .
5735	Simple JSON serializer .
5736	Reconnect to MySQL .
5737	Execute a query .
5738	Get a connection to a database .
5739	Run the benchmark .
5740	Establish a connection to the pool .
5741	Lookup an error by number
5742	Return the total size of the pool .
5743	Called when a connection fails .
5744	Simple JOIN expression .
5745	Build an UPDATE statement .
5746	Connect to the database .
5747	Sets up the database .
5748	Destroys the database .
5749	Start a step .
5750	Stop a step .
5751	Load steps from raw_steps .
5752	Disconnect from the API .
5753	Closes the connection .
5754	Connect to the server
5755	Handle incoming messages .
5756	Stop timers .
5757	Sends ping to the API
5758	Handle pong .
5759	Send an event to the API .
5760	Remove paused messages .
5761	Process system messages .
5762	Handle client info .
5763	Default event handler
5764	Process data received from the client .
5765	Resubscribe from Bitfinex .
5766	Handle authentication data .
5767	Handle configuration changes .
5768	Update the timestamps for the given channel .
5769	Reset the connection .
5770	Returns a list of candles for the given pair .
5771	Configures the bitfinex configuration
5772	Subscribe to ticker .
5773	Unsubscribe from ticker .
5774	Subscribe to order book .
5775	Unsubscribe from order book .
5776	Subscribe to the bookbook .
5777	Unsubscribe from raw book book .
5778	Subscribe to trades for a pair .
5779	Unsubscribe from trading pair .
5780	Subscribes a list of clients to a given pair .
5781	Unsubscribe from a given pair .
5782	Authenticate to the API .
5783	Cancel an existing order .
5784	Called when a device is received .
5785	Process a device command .
5786	Called when a pika notification is received .
5787	Create a new DeviceType .
5788	Publish an event
5789	Update a device .
5790	Gets a list of clientStatus objects .
5791	List all bundles
5792	Create a new bundle
5793	Update a schema
5794	Disconnect from IBM IoT .
5795	Called when a connection is received
5796	Subscribe to a device .
5797	Subscribe to a device status .
5798	Subscribe to device commands .
5799	Publish a command .
5800	Callback invoked when an unsupported topic is received .
5801	Called when a device is received .
5802	Called when a device is received .
5803	Process an app status message
5804	Get last event .
5805	Get all events for a device
5806	Make an API call
5807	Initiate a new request
5808	Get status of a request
5809	Close the index .
5810	Gets the number of results within the specified coordinates .
5811	Returns the nearest nearest neighbors .
5812	Gets the bounding box .
5813	Delete data by its coordinate .
5814	Create an index from the data stream .
5815	Loads a byte array from memory .
5816	Delete an object
5817	check for return return value
5818	Load application .
5819	Initializes the Flask extension .
5820	Starts the development server .
5821	Convert value to native image URL .
5822	Crop the image using ppoi .
5823	Crop the image .
5824	Process an image .
5825	Process an image
5826	Check if the image is valid .
5827	Save the placeholder image .
5828	Update the PPOI field .
5829	Update the PPOI field .
5830	Extracts the field data from the field .
5831	Returns the formfield for this widget .
5832	Return the value as string .
5833	Autodiscover modules .
5834	Unregister a subclass of SizedImage subclass .
5835	Unregister a filter subclass .
5836	Return the URL for the placeholder image .
5837	Build filters and sizes for the field .
5838	Get the root folder of this image
5839	Returns the path to the sized root folder
5840	Returns the path to the thumbnail folder
5841	Delete files matching the given regex pattern .
5842	Preprocess the image
5843	Preprocess a GIF image .
5844	Preprocess image .
5845	Retrieve an image
5846	Saves an image
5847	Convert PPOI to string .
5848	Creates a resized image
5849	Render the template with the given name .
5850	Return the context for this widget .
5851	Builds a dictionary of attributes from base_attrs .
5852	Get the resized filename for a given path .
5853	Given a path and a filename return the path to the original image .
5854	Validate a list of sizes key sets .
5855	Get the url from an image key .
5856	Returns the rendition key set for the given key .
5857	Return a string representation of an instruction .
5858	Format a function body .
5859	Decodes the given bytecode into instructions .
5860	Decode a Python module .
5861	Marks a function as deprecated .
5862	Connect to the server .
5863	Close the client .
5864	Read the result from the parser .
5865	Handles the request .
5866	Parse an AGI result line .
5867	Check the response code .
5868	Reset all instances .
5869	Returns a string representation of the instance .
5870	Get metadata about setup . py
5871	Get primary keys for a model .
5872	Deserialize the value .
5873	Get an existing instance from the query .
5874	Add declared fields to the model
5875	Deserialize data .
5876	Split the kwargs into kwargs .
5877	Delete orphan snapshots .
5878	Snapshot a database .
5879	List all snapshots
5880	Restore a snapshot
5881	Remove a snapshot
5882	Rename snapshot .
5883	Replace a snapshot
5884	Shuffle indexes .
5885	Clean text in text .
5886	Apply a function to data .
5887	Creates a processor for processing text .
5888	Processes text .
5889	Process text data .
5890	Generate the maximum document length .
5891	Return a Pandas DataFrame of words in the corpus .
5892	Map parameter type to string .
5893	Parse interface definitions .
5894	Return the inverse of the bidict .
5895	Update the log with rollback .
5896	Make a copy of this bidict .
5897	Return a copy of the BIDict .
5898	Return True if other is equal to other .
5899	Returns an iterable of the values in an iterable .
5900	Clears the application .
5901	Moves the node s prv to the given key .
5902	Write text to a temporary file .
5903	Get contacts from a list of addresses .
5904	Merge config options into config .
5905	Load address books .
5906	Prepare a list of search queries .
5907	Create a new contact command
5908	Produce a list of birthdays .
5909	Search for phone subcommands .
5910	Print a list of contacts .
5911	Executor for modify_subcommand
5912	Function to delete a contact file .
5913	Execute the selected vCard subcommand
5914	Executor for merge subcommand .
5915	Executor for copying vCard subcommands .
5916	Get the action associated with the given alias .
5917	Convert a boolean value from config file .
5918	Return a new contact object .
5919	Create an AddressCollection from a file .
5920	Create a contact object from a userbook .
5921	Create a contact from an existing contact .
5922	Get a list of names from a variable part .
5923	Add a category
5924	Parse a type value string .
5925	Convert a list to a string
5926	Convert a string to a datetime object .
5927	Compare two UIDs
5928	Searches for all contacts
5929	Search for contacts
5930	Searches for all contacts with the given query string .
5931	Search for an address book .
5932	Returns a dictionary of short ids .
5933	Get short UID from uid .
5934	Yields all VCF files .
5935	Load all the vCard files from the vdir .
5936	Returns the ABHook with the given name .
5937	Get available arch architectures .
5938	Get available architectures .
5939	Return inspectspec for inspect .
5940	Dispatch the given command .
5941	Helper function for safe input .
5942	Encode the given value .
5943	Guess type from keyword arguments .
5944	Add commands to the parser .
5945	Decorator to add an attribute to a function .
5946	Decorator to add positional arguments to the decorated function .
5947	Prompt user for confirmation .
5948	Return a new QuerySet with parameters replaced .
5949	Return a new version of this pattern .
5950	Fetch cached result from cache
5951	Get the first matching object
5952	Delete entities from the database .
5953	Called when a delete is deleted .
5954	Run redis command on redis .
5955	Estimate the estimate of the workload .
5956	Perform a search .
5957	Count the number of records in the database .
5958	Get the connection to an object
5959	Return a list of strings .
5960	Refresh indices for a model .
5961	Clean old index .
5962	Add a pk
5963	Get a pk value
5964	Write unique data for a unique identifier .
5965	Save the object to the database .
5966	Delete this object
5967	Retrieve an instance from the database .
5968	Register dispatching function .
5969	Open a semaphore .
5970	Return the number of CPUs available on CPU .
5971	Send a result back to the queue .
5972	Main worker function .
5973	Add work items to the queue .
5974	Ensures that the executor pool is running .
5975	Wrap non - pickleable objects .
5976	start a server
5977	Return a copy of the given fd .
5978	Return a reusable executor .
5979	Wait for jobs to finish .
5980	Return a dictionary containing information about the current process .
5981	Prepare process
5982	Close all open file descriptors .
5983	Tries to terminate a process .
5984	Terminate a process .
5985	Get the exit codes for each worker .
5986	Format the exit codes .
5987	Entry point for the semaphore .
5988	Starts the semaphore tracker .
5989	Generate an event processor .
5990	Run the main program .
5991	Interactively interact with a console .
5992	Split a string into multiple arguments .
5993	Return the stack trace and line number
5994	Run all registered hooks .
5995	The forget function .
5996	Get the integer value of the given arg
5997	Get an integer value .
5998	Process commands .
5999	queue startfile
6000	Get the next token from a string
6001	Display error message .
6002	Read a single line .
6003	Close connection .
6004	Disassemble a message into a byte string .
6005	Disassemble code into a byte string .
6006	Count the number of frames in a frame .
6007	Get the call function name .
6008	Print the stack trace .
6009	Look up a subcommand by prefix .
6010	Handles short_help .
6011	Register a subcmd callback .
6012	Run a command .
6013	Start the debugger .
6014	Show a specific category .
6015	Handle line information .
6016	Given a traceback frame find the traceback .
6017	Map thread names to thread IDs .
6018	Get an integer from argname .
6019	Validate and return a boolean value .
6020	Set the boolean on the debugger .
6021	Runs a setting on the debugger .
6022	Run show on or off .
6023	Show the current int value .
6024	Show the value of the current setting .
6025	Return True if the given line is a load function .
6026	Check if the given line is a class definition .
6027	quit threading thread
6028	Determine the background background .
6029	Check if a color is dark .
6030	Get the signature of a frame .
6031	Return a list of all auto - display expressions
6032	returns a list of all available display signatures
6033	Return a string representation of the object .
6034	Read a single message from the socket .
6035	Debugging session
6036	Handles undefined subcommand .
6037	Execute the debugger .
6038	Pretty print a simple array
6039	Look up a signal name by number .
6040	Look up a signal by name .
6041	Determines if a signature is a valid name .
6042	Set the replacement for a signal .
6043	Check if the signandler should be adjusted .
6044	Show information about signal handlers .
6045	Handle an action .
6046	Set the print method .
6047	Process a signal .
6048	Given a filename return the module name .
6049	Search for a file .
6050	Looks for a py_script file in the given directory
6051	Return a list of all pyfiles in the caller .
6052	Write a message to the output .
6053	Run the program .
6054	Return a columnized list of commands .
6055	Called when an exception is raised .
6056	Close the connection .
6057	Write message to socket .
6058	Complete an identifier .
6059	Print string to stdout
6060	Add frames to ignore_filter
6061	Determine if filename is valid .
6062	Return the filename for the debugger .
6063	Check if tracing is started .
6064	Check if a frame is stop
6065	Set next frame to stop frame
6066	Record the traceback of the given function .
6067	Check if filename ends with filename .
6068	Check the function name .
6069	Deletes a breakpoint
6070	Delete a breakpoint by its number .
6071	Enables all breakpoints .
6072	Enables a breakpoint by its number .
6073	Delete breakpoints by line number .
6074	Open the input file .
6075	Read a single line .
6076	Prompt the user for confirmation .
6077	r
6078	r
6079	Convert a query to a future .
6080	Removes the user from the session .
6081	Load the CAN_LOGINAS_AS_AS_AS_AS_AS_AS_AS_AS_AS_AS_AS_AS_AS_AS_AS_AS_AS_AS_AS_AS_AS_AS_AS_AS_ASG .
6082	Iterate over all documents in the project .
6083	Entry point for the CLI .
6084	Translate a JSON file to a stream .
6085	Try to open a JSON file .
6086	Normalize the date data .
6087	Convert string to float .
6088	Guess the encoding of a file .
6089	Stream JSON lines from a file .
6090	Translate a file to UTF8 .
6091	Open a CSV file from a Python file .
6092	Read CSV file .
6093	Entry point for Transcode .
6094	Create a session with the given token .
6095	Save a token to a file .
6096	Make a request to the server .
6097	Perform a DELETE request .
6098	Wait for the project to finish .
6099	Get the root URL for a given URL .
6100	Save a token
6101	Perform a JSON request .
6102	Perform a POST request .
6103	Returns a new URL with the given path .
6104	Get the default account id .
6105	Returns the documentation for this project .
6106	Wait for a job to finish .
6107	Get a single resource .
6108	Print result as a CSV .
6109	Read params from json file .
6110	Simplify all missing text fields
6111	Create a project with the given documents .
6112	Create a project from a JSON file .
6113	Entry point for luminos .
6114	Uploads a project to a project .
6115	Upload a file to Cloud Storage .
6116	Entry point for the command line tool .
6117	Create a User from the given credentials .
6118	Log in .
6119	POST login page
6120	Get data for a resource .
6121	Fetch data per year
6122	Prepare the view class .
6123	Initialize the view .
6124	Handler for GET requests .
6125	Handle incoming changes
6126	Updates the menu with links
6127	Create a list of handlers for this site .
6128	Called when a message is received
6129	Called when a node has changed .
6130	Create the widget .
6131	Initialize the widget .
6132	Destroy the widget .
6133	Called when a child widget is inserted .
6134	Remove a child widget .
6135	Return all child widgets .
6136	Set attribute of widget .
6137	Update the proxy attribute of a change .
6138	Notify about a change .
6139	Evaluate a query .
6140	Prepare the object .
6141	Sets the widget s source widget .
6142	Sets the source widget .
6143	Called when the mode changes .
6144	Handle a block
6145	Called when a change is received .
6146	Returns the contents of a file
6147	Display error message .
6148	Handle parsing errors .
6149	Get product by name
6150	Creates a new session .
6151	Reset the store .
6152	Returns a list of stores for the specified search term .
6153	Set delivery system
6154	Gets the menu catalog for a given store .
6155	Adds item to basket
6156	Adds a pizza to the basket
6157	Adds a product to the basket
6158	Remove an item from the basket
6159	Set the payment method .
6160	Submit a payment option .
6161	Makes a GET request
6162	Makes a POST request
6163	Make an API call
6164	Append an item to the menu .
6165	Add an exit item .
6166	Draw the menu .
6167	Process user input .
6168	Select the selected option
6169	Parses the contents of the menu
6170	Select top values from a DataFrame .
6171	Group top values by aggregation .
6172	Convert string to datetime
6173	Convert datetime to string
6174	Convert a DataFrame to a date format .
6175	Cast a column to a new column
6176	Compute the rank of a DataFrame .
6177	Perform a waterfall of DataFrame
6178	Helper function to perform a math operation between two columns .
6179	Round values to a given column .
6180	Change the absolute values of a column .
6181	Pivot dataframe to column
6182	Pivot dataframe by group
6183	Perform aggregation on a DataFrame .
6184	Compute the cumulative sum of a column .
6185	Helper function to add a missing row to a DataFrame .
6186	Decorator to catch exceptions .
6187	Decorator to log message .
6188	Log the execution time of a function .
6189	Log shapes and output shapes .
6190	Renames given values .
6191	Compute cumulative sum of counts over each row .
6192	Takes a DataFrame and returns a DataFrame with aggregated columns .
6193	Get a parameter value from a function call .
6194	Remove old entries from cachedir .
6195	Roll up a DataFrame into a DataFrame .
6196	Compute the maximum of each column in a group .
6197	Compute the minimum value of a group .
6198	Fill missing values with given value .
6199	Add an hour offset to a date object .
6200	Add a number of months to a date object .
6201	Add a date object to a date object .
6202	Parse date string into datetime object
6203	Filter dataframe by date_column .
6204	Change the percentage of a column .
6205	Run ADA family .
6206	Get optimizer updates for training .
6207	Get training parameters .
6208	Add new free parameters to the network .
6209	Sample from Gaussian distribution .
6210	Prepare the encoder .
6211	Compute the final Tensor cost .
6212	Apply a function to each dataset .
6213	Initialize the target .
6214	Report the training data .
6215	Train the network .
6216	Sample from input .
6217	Compute alignments .
6218	Compute the context vector .
6219	Concatenate multiple arrays together .
6220	Pads the dataset to the final set of validation sets
6221	Calculate the RMS for a given parameters .
6222	Prints the elapsed time
6223	Run the optimization algorithm .
6224	Invoke the monitor .
6225	Builds the variables for loop variables .
6226	Perform a scan step .
6227	Calculate the momentum and gradients .
6228	Wrapper for if train .
6229	set skip_epochs
6230	Loads the model from a file .
6231	Train the model .
6232	Run the training step .
6233	Runs the optimization step
6234	Report the score map .
6235	Retrieves the current dataset .
6236	Apply func to the tensor .
6237	Report the current used parameters
6238	Compute var variance .
6239	Creates a list of Variables from a dataset .
6240	Compute the shared value for a given value .
6241	Tracks encoders layers .
6242	Stack decoder layers .
6243	Compute the encoder .
6244	Return the decoded output .
6245	Create a 2D Gaussian kernel
6246	Register a layer .
6247	Measure the mean value of each layer .
6248	Returns a list of all parameters .
6249	Sets the output variables .
6250	Computes the result of the pipeline .
6251	Save model parameters to path .
6252	Load parameters from file .
6253	Report basic information about the network .
6254	Register multiple parameters .
6255	Register new updates .
6256	Register new training updates .
6257	Register monitors .
6258	Calculate the norm of a list of tensors .
6259	dump elt to pickle
6260	Load pickled etags from file_obj .
6261	Load the model from a file .
6262	Create request elements .
6263	Decode user state .
6264	Parses the token data .
6265	Remove access tokens from the request .
6266	Logs into the provider .
6267	Normalize a dictionary .
6268	Convert a dictionary to a dictionary .
6269	Parse query string .
6270	Resolve provider class
6271	Create a cookie .
6272	Saves the cookie .
6273	Get cookie data .
6274	Return the data as a dictionary .
6275	Generate a signature .
6276	Serialize the value to a string .
6277	Check if the token is valid
6278	Expire the alarm to be seconds .
6279	Serialize credentials .
6280	Return True if content is a binary string .
6281	Return the response content .
6282	Create OAuth authorization elements .
6283	Extract email information from Bitbucket .
6284	Wrap view with login
6285	Log into the current user .
6286	Create a session key .
6287	Sets a session value .
6288	Generate a random CSRF token .
6289	Log a message at auth level
6290	Return True if the given status is in the given category .
6291	Split a URL into parts .
6292	Decorator to enable cross - origin authentication .
6293	Set the CORS headers for the request .
6294	Returns the kwargs for the application instance .
6295	Convert an object to a string .
6296	Ensure inst is iterable .
6297	Return True if two numbers are almost equal .
6298	Mark a function as deprecated .
6299	Deserialize an audio segment
6300	Create an AudioSegment object from a file .
6301	Create an AudioSegment from a numpy array .
6302	Executes a command and writes it to the output file .
6303	Silently silence audio .
6304	Compute the FFT .
6305	Generate frames from the stream .
6306	Normalize the SPL segment by using the average RMS .
6307	Returns a new copy of this audioSegSegment with the same data .
6308	Resample the stream .
6309	Serialize the state to a JSON string .
6310	Generate spectrogram .
6311	Determines the first offset of the candidate offset based on offset_fronts .
6312	Determine the offset behind the given onset_idx .
6313	Determine the offset of the first onset at the given onset position .
6314	Matches a set of offset IDs based on onset_front_front_front_id .
6315	Returns a list of tuples that overlap between onset and offset .
6316	Calculate the segmentation mask for the given onset and offset .
6317	Return the index of the front of a front - end index .
6318	Return a set of all front ids that have no effect .
6319	Given an onset and onset indices find the corresponding offsets .
6320	Remove overlapping segments .
6321	Removes frontend vectors that are smaller than size .
6322	Given a list of front - end pairs break them into a dictionary .
6323	Merge segments that are adjacent .
6324	Separate masks into masks .
6325	Downsampling of a mask .
6326	Perform ANTsA task
6327	Bandpass filter
6328	Lowpass filter .
6329	Convert a list of rows to a tf input matrix .
6330	Expand the dataset and standardize the response data .
6331	Check if two elements are equal .
6332	Returns a list of features for each feature in the audit score .
6333	Load confusion matrix from an audit file .
6334	Convert a list of data into a tf input matrix .
6335	Update pip_index_url from environment variables .
6336	Autodetect required files .
6337	Find all available streams .
6338	Get stream info for a given property .
6339	Find all streams matching a predicate .
6340	Handle an error .
6341	Push a sample to the stream .
6342	Push a chunk to the stream .
6343	Return information about the stream .
6344	Open a LSL stream .
6345	Set the time correction of the object .
6346	Return the child of this node .
6347	Return the next sibling of this node .
6348	Get previous sibling element .
6349	Set the name of the label .
6350	Set the value of the label
6351	Append a child to the current node .
6352	Create a new child element and return it .
6353	Return a copy of elem with elem .
6354	Return a copy of the element with the new element .
6355	Remove a child from this node .
6356	Returns a list of results for the resolution resolver .
6357	Pair a word .
6358	\ x1b [ 1mNAME \ x1b [ 1mNAME \ x1b [ 0mNAME \ x1mNAME \ x1b [ 1mNAME \ x1b [ 1mNAME \ x1b [ 0mNAME \ x1mNAME \ x1b [ 0mNAME \ x1b [ 0mNAME \ x1mNAME \ x1b [ 0mNAME \ x1b [ 0mNAME \ x1mNAME \ x1b [ 0mNAME \ x1b [ 0mNAME \ x1mNAME \ x1b [ 0m
6359	Compute the n - grams of a token .
6360	Iterate through a pipeline .
6361	Map a function over an iterable .
6362	Generate a fuzzy fuzzy word
6363	do fuzzy fuzzy
6364	index a word
6365	Extend relations to buckets .
6366	List available commands .
6367	Show number of redis databases
6368	get a key
6369	Handles geohashes
6370	List HOUSENumerations .
6371	Index a document
6372	List words matching a word .
6373	Compute the comparison between two strings
6374	Send a response .
6375	Return a list of requests .
6376	Get bits from array .
6377	Convert a reinterval to a bitarray .
6378	Convert a slice to a slice .
6379	Find all files in a directory .
6380	Boolean operator .
6381	Generates a counter function for a given items .
6382	Multiply a signed signal .
6383	Return the ceiling of x .
6384	Check if a number is a power 2 .
6385	Adds a case statement
6386	Define default statements .
6387	Register all interfaces for the given object .
6388	Called when the simulation is finished .
6389	log change signal
6390	Render a HDLProcess instance .
6391	Automatically add agents to this unit .
6392	get the parent clk
6393	Yield items from an iterable .
6394	Group items by fn .
6395	Flatten nested iterables .
6396	Merge elements from the IfStmStm ifStrict .
6397	Remove unconnected signals from netlist
6398	Checks if the statement is an assignment .
6399	Tries to merge two statements together .
6400	Takes a list of statements and reduces them in order .
6401	Called when a write request is received
6402	Export unit to Rtl
6403	Returns the name of the output for processing statements .
6404	Filter out all of the drivers of the specified signal .
6405	Create a signal signal .
6406	Synthesize the given architecture .
6407	Returns the maximum identifier for the given stm .
6408	Returns the maximum number of statements in a Processor .
6409	Write data to the simulation .
6410	Set the direction of the interface
6411	Loads all interfaces declarations
6412	Returns a list of signatures for this interface .
6413	Returns the name of this entity
6414	Returns the bit length of this interface
6415	Returns sensitivity by operation .
6416	Evaluate operator .
6417	Convert the value to the specified type .
6418	Convert a set of bits to a python type .
6419	Return the full word count for the given start position .
6420	Group items by word index .
6421	Pretty print interfaces
6422	Generates a list of frames from a transaction
6423	Iterate over all words in this word .
6424	Pack data into a data structure
6425	Cleans up meta data .
6426	Discover enclosing enclosures for statements .
6427	Discovers the sensitivity sequence
6428	Return the RWT context for this statement .
6429	Called when the reduce statement is removed .
6430	Merge two statements .
6431	Checks if two statements are mergable .
6432	Merge a list of statements .
6433	Merge two lists .
6434	Tries to reduce the list of statements .
6435	Triggered when the parent event dependent is dependent
6436	Set the parent statement of this statement .
6437	Adds the parent stments to the target list .
6438	Destroy this statement .
6439	Create a new register .
6440	Return a signature for a given type .
6441	Cleans up the internal state of this entity .
6442	Recursively walk through all fields in a structured structure .
6443	Convert HStruct to HStruct
6444	Convert this value to a signed value .
6445	Add sensitivity to the given process .
6446	Evaluate the condition .
6447	Connect a sub unit to another SimUnit .
6448	Create a new update updater for the nextVal .
6449	Create a update updater for the next item .
6450	Convert value to a vector .
6451	Initialize a HWProcess .
6452	Evaluate a Parameter
6453	Sets the default value for this parameter
6454	Construct a HStruct object from a list of interfaces .
6455	Resolve all ports .
6456	get the index of the signal
6457	Convert a Python value into a Value .
6458	Auto - cast the value of the signal .
6459	Interpret the value of the signal .
6460	Iterate over all parameters found in the interface .
6461	Return a list of connected physical interfaces .
6462	Pack an interface into one or more direct interfaces .
6463	Convert a ROM into a list of processes .
6464	Convert this unit to a Rtl .
6465	Registers an interface in the interface
6466	Reduce the value of a sig .
6467	Reduce the result of XOR X .
6468	Creates a base name scope .
6469	Determine the serialization decision for the given obj .
6470	Create a HDL type for a given type .
6471	Serialize ifContainer as a HDL statement .
6472	Return the base condition based on the condition .
6473	Return an instance of SimBits .
6474	Return the name of a constant .
6475	Cuts off the parent interface to the parent .
6476	Load this array from the given dtype
6477	Load bit address from HStruct
6478	Load this bittype from the given dtype .
6479	Returns the width of the item .
6480	Iterate over the flattened flattening of this structure .
6481	Remove significant bits .
6482	Merge two StmContainer objects .
6483	Return an indented indent
6484	Raise an IntvlLvlConfError if the property name is not available .
6485	Register a new parameter .
6486	Update parameters from other object .
6487	Register a unit .
6488	Registers an interface
6489	Register an array with the given name .
6490	Return the single driver .
6491	Evaluate the expression .
6492	Create an operand with the given resand .
6493	Return a new Context instance with a new indentation .
6494	Try to connect an interface to an interface .
6495	Propagate the clk to the clk
6496	Propagate clk nst nst nst nst and rst nst nst nst nst nst
6497	Propagate clk and rst nodes
6498	Propagate the RSTN n to the rst n .
6499	Propagate the rst in rst
6500	Iterate through bits in a signal or value .
6501	Private method to serialize an exclude .
6502	Serialize an entity into a serialized unit .
6503	Serialize params and return True if parent is uniq .
6504	Get the full name of the object
6505	Recursively create association
6506	Create a new SimModel from the given model class .
6507	Convert a unit into a SimModel .
6508	Reconstruct signal signals from model class
6509	Generates a VCD for the given simulation .
6510	Registers the TWriteCallback .
6511	Connect this port to the signal .
6512	Registers an external signal .
6513	Connect this node to the driver .
6514	Returns the name of the target .
6515	Checks if a signal is dependent on the given process .
6516	Add a process to the event queue .
6517	Add processor to run scheduler .
6518	Schedule an event to be queued .
6519	Schedules apply values .
6520	Return conflict strategy .
6521	Run combination of combobox .
6522	Run all queued SeqProcesses .
6523	Periodically apply values to all processes
6524	Return the value of the given sig .
6525	Write value to target
6526	Add a new process .
6527	Simulate the simulation .
6528	Factory function to create an op signal .
6529	Convert a list of Ternary operations into a list of Ternary containers .
6530	Create a child process for the given process .
6531	Calculate the Hamming distance between two hashes .
6532	Compute the average hash of an image .
6533	Calculate the distance between two images .
6534	Setup the Vizio device
6535	Update the power state .
6536	Mute volume .
6537	Increase volume .
6538	Down the volume down .
6539	Set the volume level .
6540	Reset the piece s pieces .
6541	Gets the piece at the given square .
6542	Remove piece at square .
6543	Sets a piece at the given square .
6544	Determine if a move is a case .
6545	Checks if the king has been armed .
6546	Is this game?
6547	Checks if the move is a checkmate .
6548	Checks if the current position is a valid move .
6549	Remove a move from the stack .
6550	A string representation of the piece .
6551	Pushes a move from the current position .
6552	Return the hash of the board .
6553	Gets the symbol of the piece .
6554	Creates a PIECE color from a symbol
6555	Gets the name of the piece .
6556	Create a Piece from string .
6557	Parse the commit data .
6558	Parse a commit message .
6559	Load configuration from a CLI .
6560	Execute commands from command line .
6561	Add an argument to the argparse parser .
6562	Load configuration from file .
6563	Generate a yaml string from the given configuration .
6564	Generate markdown markdown .
6565	Cast the value to the appropriate type
6566	Returns a list of dates between two dates
6567	Parse a date string into a datetime object .
6568	Load the contents of a currency file .
6569	Set missing values to None .
6570	Compute the missing rates for the given currency .
6571	Get the rate for the given date
6572	Convert amount to currency
6573	Yield n - sized items from an iterable .
6574	Interpolate frames .
6575	Read n bytes from file
6576	Write data to the file .
6577	Return a map of words between start and end .
6578	Return the comment area of the DAF file .
6579	Add an array to the file .
6580	Close the DAF file .
6581	Compute the position of a given tdb .
6582	Close the DAF file .
6583	Load PCK data
6584	Compute the coefficients of a segment .
6585	Visit a function call .
6586	Report violations on a binary operation .
6587	Check that the dictionary is valid .
6588	Add violations to a joined string .
6589	Check if the keyword argument is valid .
6590	Visit an exception .
6591	Detect logging level .
6592	Get handler name .
6593	Get the id of the given value
6594	Check if an exception is a bare exception .
6595	Check for exception info .
6596	Deletes the file if it exists .
6597	Add the link widget to the database .
6598	Returns rendered PDF .
6599	Override this method to customize the PDFView
6600	Encode a single string .
6601	Configure mongodb options .
6602	Convert string to underscore .
6603	Auto - index all indexes .
6604	Parse a csv file .
6605	Load all lines from a file .
6606	Parse the line into a PriceModel instance
6607	Translates the given symbol .
6608	Loads all the symbols in the registry .
6609	Get session .
6610	Add a price
6611	Import prices from a CSV file
6612	Shows the latest prices for the given symbol
6613	List available prices .
6614	Downloads prices from the database .
6615	Remove old price entries
6616	Get the default session for the price database .
6617	Create new symbol map .
6618	List available price maps .
6619	Get symbol by symbol
6620	Read lines from a file .
6621	Maps Entity to a Price object
6622	Map model to price
6623	Read configuration file .
6624	Returns the path to the config file
6625	Copy the user config file
6626	Returns the path to the config file .
6627	Get the contents of the config file .
6628	Sets an option .
6629	Get an option value
6630	Save configuration to file .
6631	Parses a symbol
6632	Add a price to the invoice .
6633	Add a price entity to the database .
6634	Downloads the latest price
6635	Dalchemy session
6636	Get prices for a given date .
6637	Get prices for a given namespace
6638	Delete all stocks with prices
6639	Delete all prices for a security symbol
6640	Download the price for symbol .
6641	Get securities
6642	Returns a partial state .
6643	Update bound_args .
6644	Recursively descend the tree .
6645	Decorator to turn a function into a tree .
6646	Check that the student part has unequal length .
6647	Check that the state is equal .
6648	Verifies that the student s text contains text .
6649	Test if a package is imported .
6650	Test if text contains text .
6651	Check if the solution has printout .
6652	Check that the state has no error .
6653	Test for the selected option .
6654	Check function call .
6655	Get the result from a tempname .
6656	Replace the state with the given solution .
6657	Test whether an instance is an instance of the system .
6658	Returns a flattened copy of the dictionary .
6659	Create a child state
6660	Execute the given parser .
6661	Test if a context is a context loop .
6662	Check that all context parts have the correct context .
6663	Check that a part has a part .
6664	Check if there is a part at the given index .
6665	Check the arguments passed to the function .
6666	Validate a function call .
6667	Get the true anomaly .
6668	Initialize the application .
6669	Initialize LDAP configuration .
6670	Add a new LDAP server .
6671	Decorator to remove a connection .
6672	Destroys the connection from the stack .
6673	Authenticate using LDAP .
6674	Authenticate using LDAP .
6675	Attempt to authenticate the user against the search path .
6676	Returns a list of LDAP groups for a user .
6677	Get user info from LDAP
6678	Get user info for given username .
6679	Fetch object from LDAP .
6680	Return a connection to the LDAP server .
6681	Create a connection to the database .
6682	Create an LDAP3 connection .
6683	Destroy a connection
6684	Search collection .
6685	Search for labels .
6686	Search for all repositories .
6687	Search a collection of jobs .
6688	Speak the database .
6689	Announce .
6690	Get secrets from SRegistry
6691	update headers
6692	check for secrets
6693	download a url to a temporary file
6694	Download a URL to a file
6695	Update authorization header .
6696	Gets the folder if it exists .
6697	Read response from response .
6698	Get S3 bucket
6699	Update the secrets if necessary .
6700	Initialize the client .
6701	Load secrets from cache
6702	Gets the log of the given name .
6703	List docker logs
6704	create folder at endpoint_id
6705	Initialize the transfer client
6706	List all containers
6707	Show current client status .
6708	Add a setting
6709	Remove a variable
6710	Activate the given backend
6711	Delete a specific backend
6712	Update base base .
6713	Create a basic auth header .
6714	Generate a signature for a payload .
6715	Generate a header signature .
6716	Make a DELETE request
6717	Send a HEAD request .
6718	Paginate a GET request
6719	check SSL certificates
6720	Remove an image
6721	Retrieve version information from version file .
6722	Get list of install requirements .
6723	Get the singularity version
6724	Check if the given software is installed
6725	Get the absolute path of the installation directory
6726	Get thumbnail image .
6727	Run a command
6728	Get metadata from database
6729	Update the Dropbox account
6730	Print the output of a Docker container .
6731	Kill the specified commands
6732	List logs .
6733	Returns a list of all available collections
6734	Collect secrets from the config
6735	Get credentials from Google Cloud Storage .
6736	Get the SRegistry client
6737	Run an IPython notebook .
6738	Get manifest data for given repo
6739	Get manifest from repository
6740	Get download cache
6741	Extract environment variable from the Docker container .
6742	Update the api base .
6743	Update the secrets from the registry
6744	Get metadata for the artifact .
6745	Get client settings .
6746	Get and update a global setting
6747	Update a setting .
6748	Generate an authorization request
6749	List all instances in a project .
6750	Retrieve a list of templates by name .
6751	Retrieve the IP address of an instance
6752	Run build
6753	List all containers in the bucket
6754	List all containers in the bucket
6755	Entry point for the registry .
6756	Entry point for the registry .
6757	Setup the database
6758	Return a json template
6759	List shared endpoints
6760	List endpoints
6761	List files in an endpoint
6762	Get shared link
6763	Read client secrets from environment file .
6764	Get the discovery services .
6765	Delete an object from a bucket .
6766	Delete a file
6767	Destroy an instance
6768	Get subparsers for the given parser
6769	Generate a random string .
6770	Get a temporary temporary directory .
6771	Extract a tar archive .
6772	Extract the tar2 archive .
6773	Calculate the SHA256 hash of a file .
6774	Read a file .
6775	Read a JSON file .
6776	clean up files
6777	Push an image
6778	Get or create a collection .
6779	get a collection by name
6780	get a container
6781	List all images
6782	Inspect a container
6783	Rename a file
6784	Move an image
6785	Remove an image
6786	Add an image
6787	Push an image to the registry
6788	Parse a recipe from a recipe
6789	Find a single recipe for a given file .
6790	Generate the build package tarball .
6791	Run the build
6792	Update metadata for a blob
6793	Formats a container name removing special characters .
6794	Whether the error stream should be printed .
6795	Determine if an error occurs .
6796	Write given message to given stream .
6797	Display a table
6798	Push an image
6799	Get a template
6800	Get the manifest from a repository
6801	Get a template
6802	Get client secrets
6803	Build a repr string for a class .
6804	Context manager for handling S3 errors .
6805	Create a proxy object .
6806	Returns a URL for a user .
6807	Build the URL for a gravatar image .
6808	Verify that the given email has a gravatar .
6809	Builds the gravatar profile url
6810	Generator of chimera blocks .
6811	Generate a chimera block of chimera blocks .
6812	Enumerate the resonance of a set of smiles .
6813	Enumerate all structures in a molecule .
6814	Normalize molecule to Molecule
6815	Apply reaction to molecule .
6816	Calculates the canonicalized Tautomers for a given molecule .
6817	Validate smiles .
6818	Disconnect metal from a molecule .
6819	Convert mol objects to standardized format .
6820	Enumerate Tautomers in a molecule .
6821	Convert a list of Tautomer objects to their canonical form .
6822	Normalize a molecule .
6823	Gets the parent of a tautomer .
6824	Return the largest fragment of a molecule .
6825	Remove stereo components from Molecule
6826	Replace isotopes in a Molecule .
6827	Charge the parent of a molecule .
6828	Return the superparent parent of a molecule .
6829	Main function for molvs
6830	Remove fragments from a molecule .
6831	Choose the largest fragment
6832	Integrate an IVP .
6833	Gets GitHub stats from GitHub
6834	Get members of the organization .
6835	Get the teams of the organization .
6836	Gets the list of repos .
6837	Count the number of contributors for a repo
6838	Get the number of open requests in the repository .
6839	Gets all issues for a repo
6840	Search for readme in GitHub .
6841	Get the license for a given repo
6842	Get all commits for repo
6843	writes a json file to a json file
6844	Write total totals .
6845	Write language data to file .
6846	Create a directory if it doesn t exist
6847	Remove a CSV file from the current language
6848	Get a list of user organizations .
6849	Authenticate to GitHub Enterprise Enterprise .
6850	Check API limits .
6851	Connect to GitHub .
6852	Query repositories .
6853	Ask user to get organization name
6854	write to a lnl file
6855	Create a Project from a Gitlab repository .
6856	Create a project from a DOEcode record .
6857	Returns a dictionary for the given license
6858	Gets the traffic .
6859	Retrieve all releases for a given URL .
6860	Get a list of referrers
6861	Retrieve data from a url
6862	writes a json file
6863	Write data to a file .
6864	check if data_to_check is already recorded
6865	Writes data to file .
6866	write the list of referrers to a file
6867	Processes a JSON file .
6868	Fetch DATA JSON from a URL .
6869	Process a JSON file .
6870	Login to Github .
6871	Get all the emails of org
6872	save users to file
6873	Connect to stash .
6874	Connect to Gitlab .
6875	Query repositories .
6876	Clone git repo to sloc
6877	Computes the hours of the given sloc .
6878	Remove null values from a dictionary .
6879	Reads a GQL query file .
6880	Query GitHub from a file .
6881	Submit a graph to the graph .
6882	Wait for a reset timestamp .
6883	Starts the countdown .
6884	Import data from a file
6885	Saves data to a file
6886	Create a TFS connection
6887	Create a TFS project analysis client .
6888	Create a TFS client .
6889	Creates TFS GitClient
6890	Creates a TFS GitClient
6891	Get git repositories for a given project
6892	Returns a list of TfVC branches for a project
6893	Get year commits from GitHub
6894	Calculates the total commits for the given week .
6895	write the last week to a file
6896	Configure backend instances
6897	Returns a MetricsInterface object for the given thing .
6898	Log timing information .
6899	Context manager for timing information .
6900	Decorator to schedule a timer .
6901	Generate a tag .
6902	Log timing information .
6903	Log a histogram .
6904	Perform a rollup .
6905	Create an order based on the given members .
6906	Convert value to enum .
6907	Convert value to enum .
6908	Return the value for the given value .
6909	Recursively recursively finds the set of objects in the given path .
6910	Projects a dictionary of words into a set of singular sequences .
6911	Returns the mean value
6912	Updates the meter .
6913	Return the mean rate .
6914	Mark the previous value .
6915	Send a metric .
6916	Serialize a metric .
6917	Formats a metric as a string .
6918	Send a metric string to the buffer .
6919	Raise an exception if an option does not exist .
6920	Ensure data is unicode .
6921	Gets the value of an option .
6922	Get the GUID for the given codes .
6923	Get a list of choices for the current user .
6924	Return a mapping of exact InvoiceNumber numbers to foreign invoice numbers .
6925	Solve the Sudoku problem .
6926	Wrap a view function as a view .
6927	Creates a form view .
6928	Creates a HTTP view view .
6929	Create an API view .
6930	Create a generic api view .
6931	Creates a ModelViewSet from the given injector .
6932	Create a StreamDescriptor for a given file descriptor .
6933	Read data from the socket .
6934	Close the connection .
6935	Called when the connection is lost .
6936	Add a watch .
6937	Remove a watch .
6938	Add a watch descriptor .
6939	Set up the watch for all requests .
6940	Get the current event .
6941	Triggers touch event .
6942	Update the interval .
6943	Increment the timer interval .
6944	Close all connections .
6945	Return True if all connections have been approved .
6946	Connect to a websocket connection
6947	Perform a lookup .
6948	Set the maximum allowed values for all connections .
6949	Called when the message is up .
6950	Add a callback to the given name .
6951	Remove a listener .
6952	Trigger an event with the given name .
6953	Publish a message to a topic
6954	Set the feature transform
6955	predicts the prediction function
6956	Calculate theta
6957	Parse log file
6958	Remove duplicate fastq files
6959	Merge the default adapters into a fasta file
6960	Run trimmomatic command
6961	Read a depth file .
6962	Main entry point for coverage analysis .
6963	Set template path .
6964	Set the name of the channel names
6965	Get user channel .
6966	Render a Jinja2 template
6967	Render the template .
6968	Set the channel names .
6969	Update the main forks .
6970	Set the secondary channel for a given source .
6971	Update the attributes of the component .
6972	Set the compiler channels in the pipeline .
6973	Set the raw inputs for the raw input .
6974	Set secondary inputs .
6975	Add extra inputs to the process .
6976	Parse coverage header .
6977	Parse assembly .
6978	Calculate the total number of nucleotides .
6979	Filter contigs based on comparisons .
6980	Returns the assembly length
6981	Write the assembly to a file .
6982	Write the assembly report to a file .
6983	Remove inner forks .
6984	Check for errors in a pipeline .
6985	Run sanity checks on a pipeline string .
6986	Parse a pipeline .
6987	Get the source lane of a fork .
6988	Parse the lane string .
6989	Establish a linear connection between processes .
6990	Establish a fork connection between two processes .
6991	Add unique identifiers to pipeline .
6992	Remove unique identifiers from a pipeline .
6993	Checks that the required files exist .
6994	Convert a header to a dictionary .
6995	Convert minutes seconds to seconds .
6996	Convert size to a float
6997	Gets the pipeline processes
6998	Clear the trace info
6999	Update barrier status status .
7000	Retrieve the contents of a log file .
7001	Assign cpu and memory resources to disk .
7002	Update process statistics .
7003	Parse the log file .
7004	Update inspect .
7005	Display the screen .
7006	Move down line down
7007	Move left side of right to right
7008	Get last n lines .
7009	Find static files for this pipeline .
7010	Reads the dotDag DAG file and returns a dictionary .
7011	Get the hash of the pipeline .
7012	Get the next flow control command file path from the log file .
7013	Splits sequences into separate sequences .
7014	Main entry point for the pipeline .
7015	Run brewuendo recipe .
7016	Returns a Recipe instance for the given recipe name .
7017	List all available recipes .
7018	Validates a pipeline string
7019	Build an upstream pipeline .
7020	Build the pipeline fragment .
7021	Define a pipeline string
7022	Run the auto - pipeline .
7023	Returns component string .
7024	Writes summary data to a file
7025	Generate Trimmomatic log file
7026	Replace the contig names in the FASTA file .
7027	Remove temporary files
7028	Parse a list of files
7029	Parses log file
7030	Iterate over all entries in the database .
7031	Extract the contig id from a contig string
7032	Create a plot of the report
7033	Write the report data to a json file .
7034	Run the assembly script
7035	Parse assembly file
7036	Add summary info to summary
7037	Get the labels for a window
7038	Calculate GC factor .
7039	Calculate GC sliding window
7040	Entry point for skesa .
7041	Writes the report to a json report
7042	Determine the index of a list of biased positions .
7043	Extract a subset of bases .
7044	Determine the optimal trim position for each sample
7045	Extract summary information from a summary file .
7046	Checks the summary of the summary .
7047	Parse bowtie log output
7048	Parses a process name string .
7049	Add a dependency process .
7050	Searches through the tree for the given template tree .
7051	Build the header
7052	Build the footer .
7053	Set the channels for all processes .
7054	Sets the initial process for the main process .
7055	Sets the secondary channels
7056	Set status channels .
7057	Build the config string from a resource dictionary .
7058	Build a container configuration string from a cont dict .
7059	Returns a string representing the parameters in the process .
7060	Returns a string representing the parameters in the process .
7061	Returns the config string for the pipeline .
7062	Sets the configuration
7063	Writes a DAG to a file
7064	Render the pipeline .
7065	Write configuration files .
7066	Export params to stdout .
7067	Export directive directives as JSON .
7068	Fetch the container tags
7069	Build the script .
7070	Set kmer range
7071	Entry point for spades .
7072	Get the report id of the next flow report .
7073	Update the tracewatch timestamp .
7074	Update the log watch timestamp .
7075	Send a live report
7076	Initialize live reports .
7077	Close connection to internet .
7078	Convert the adapter adapter file to a string .
7079	Entry point for fastqc
7080	Saves output to the output file
7081	Takes the input file and outputs the hash of the sample .
7082	Add software versions .
7083	Reads the Mash output and parses the results .
7084	Return a colored string with the given color .
7085	Parses the given dictionary of processes .
7086	Process process_map .
7087	Guess the compression of a file .
7088	Returns the range of a qual_str
7089	Returns a list of supported encoding strings .
7090	Parse coverage table .
7091	Filter an assembly into an assembly .
7092	Filter bamtools with coverage
7093	Evaluate the minimum coverage .
7094	Calculate assembly size and contigs for assembly .
7095	Main entry point for the assembly mapping .
7096	Convert CamelCase to CamelCase
7097	Collect process classes from component classes .
7098	Process a newick file
7099	Compute a quick hull of data .
7100	map the data to the next best match
7101	median filter
7102	Compute the Kruskal - Kruskal Kernel - Kruskal Kruskalcker kernel .
7103	Compute the SSM estimator .
7104	Compute the covariance matrix .
7105	Gaussian filter .
7106	Compute euclidean distance .
7107	Circular shift matrix
7108	Create an embedding of a matrix X
7109	Helper function for plotting plots .
7110	Plots boundaries of a set of boundaries .
7111	Plots a plot of all the labels
7112	Plots a groundtruth record .
7113	Plot a tree .
7114	Return a list of feature segments .
7115	This function computes the 2D FFT - D FITS feature matrix .
7116	Compute the similarity between two sets of points .
7117	Fit the scatter matrices .
7118	Fit the scatter plot to the data
7119	Read references in the audio file .
7120	Finds an estimation .
7121	r Write an estimation file to a file .
7122	Returns a list of all supported algorithms
7123	Get the configuration for a given feature .
7124	Gets the files in the dataset .
7125	Read hierarchy of hierarchy labels and labels
7126	Get duration of a feature file
7127	Write VTX format to out_file
7128	Get dataset file path
7129	Aligns a recording of beat_times .
7130	Estimate tempo and frames .
7131	Read beat annotations from JAMS file
7132	Compute the beat synchronous features .
7133	Read features from file .
7134	Write the features to a JSON file .
7135	Returns a list of parameter names .
7136	Compute frames async timeseries .
7137	Get frames of the feature .
7138	Get the features .
7139	Selects a feature from the given file .
7140	Validate MSAFE features .
7141	Synchronize labels and labels .
7142	Entry point for the MSAF dataset .
7143	Print the mean of the results .
7144	Compute the estimated GTF results .
7145	Compute the information gain gain .
7146	Process a track .
7147	Returns the name of the results file .
7148	Run segmentation analysis .
7149	Add a config variable .
7150	Compute all features for a given file .
7151	Process features in a single file .
7152	Calculate the cost of a Gaussian distribution .
7153	Normalize a F .
7154	Normalize a F .
7155	Normalize X .
7156	Calculate the time frames for a given interval .
7157	Remove empty intervals that are not empty .
7158	Generate audio clicks .
7159	Synchronize labeled labels .
7160	Process the segmentation level .
7161	Align the end of two end hierarchies
7162	Compute the distance between nodes in the graph .
7163	Estimate k - means k - means
7164	Determine the data for clustering
7165	Run k - means .
7166	Compute BIC
7167	Return magnitude of X .
7168	Extract the bounds from a json file .
7169	Convert json file to array of bounds .
7170	Loads the segments from a json file .
7171	Convert json file to numpy array
7172	Compute the 2D Fourier Transform using the FFT
7173	Compute the most frequent labels .
7174	Filter the activation matrix .
7175	Determine the boundaries module .
7176	Get the label module for the given algorithms .
7177	Run hierarchical segmentation algorithm .
7178	Run a flat flat file
7179	Runs the algorithms in the audio file .
7180	Runs the analysis .
7181	Process audio .
7182	Compute the W .
7183	Entry point for the command line tool .
7184	Decorator for coroutine functions
7185	Calculate accumulator .
7186	Sets the task to run the translator .
7187	Generate words from an iterable .
7188	Receive lines from input stream .
7189	A decorator that creates a push url .
7190	Make a request to Google Translate API
7191	Return translation table .
7192	Print a table of translations .
7193	Remove nodes from a network .
7194	Save network to HDF5 .
7195	Loads a network from an HDF5 file .
7196	Set the variable for the given node ids
7197	Aggregates the aggregate accessibility variables for a given distance .
7198	Get node ids based on distances .
7199	Plot a scatter plot .
7200	Initialize polynomial category .
7201	Returns the nearest pois for a given category .
7202	Return the low connectivity nodes of the graph .
7203	Process a single node dict .
7204	Make an osm query
7205	Builds a query for a node .
7206	Makes an OSM query and returns a dataframe .
7207	Check if the value is a regex
7208	Compare the given value with the given expectation .
7209	Decorator to trigger a function .
7210	Compare two expressions .
7211	Trigger method methods
7212	Check if the given request is valid .
7213	Get matcher by name .
7214	Initialize a matcher .
7215	Set the response body .
7216	Sets the response .
7217	Set the value of a key
7218	Append functions to target list .
7219	Trigger a pook request .
7220	Sets the URL for the request .
7221	Sets the headers for the request .
7222	Matches the given headers .
7223	Matches the given headers .
7224	Set the Content - Type header .
7225	Add query parameters .
7226	Sets the body of the request .
7227	Sets the JSONMatcher .
7228	Set the XML for the request .
7229	Open a file
7230	Sets the persistent state .
7231	Set the error handler .
7232	Return a Response object with the given status .
7233	Match incoming request .
7234	Activate a coroutine .
7235	Set the mock engine .
7236	Enable network filtering .
7237	Create a new mock expectation .
7238	Remove a mock from the mock .
7239	Activate the mock engine
7240	Disable the mock engine
7241	Check if the request should be used .
7242	Match a request .
7243	Return a copy of this request .
7244	Activate a function .
7245	Context manager for creating a context manager .
7246	Add interceptors to engine engine .
7247	Remove an interceptor by name .
7248	Get a setting .
7249	Return decrypted SQL for this column .
7250	Set the value of an attribute .
7251	Generate a placeholder for use with a value .
7252	Get a column based on its alias .
7253	Generates a placeholder for the encryption key .
7254	Look for multiple yaml keys in a data structure .
7255	Base regression .
7256	Invocation function .
7257	Recursively iterate over all nonterminals
7258	Calculate the weighted average of the overall tree .
7259	Compute the covariance matrix .
7260	The explained variance of the tree .
7261	Generate the clockwise regression
7262	Find the best root of the tree .
7263	set Tc
7264	Calculate the number of branches in the tree .
7265	Compute the cost of a node .
7266	Attach the merger cost to the tree .
7267	Optimize the coalescent time scale
7268	Convert a profile into a sequence .
7269	Normalize the profile .
7270	Set the GTR instance .
7271	Set the GTR model for a given string .
7272	Set sequence length
7273	Assign sequences to nodes
7274	Prepare the tree .
7275	Set up leaf nodes .
7276	Calculate the distance between the root and the root .
7277	Reconstruct the alignment information from the tree .
7278	Returns the mutation matrix for the given node .
7279	Return expanded sequence .
7280	Extract the Fitch profiles from the tree .
7281	Returns the state of the Fitch at the given position .
7282	Find the intersection of two lists .
7283	Computes the total sequence LH
7284	Calculate the likelihood of the ancestral tree .
7285	Convert a branch length to GTR .
7286	Optimizes branch lengths
7287	Optimized branch lengths
7288	Calculate the optimal length of a node
7289	Optimizes the sequence and branch lengths
7290	Reconstruct the assembled alignment .
7291	Computes the Q matrix
7292	Creates a new Gtrunc .
7293	Return the standard model class .
7294	Check the QR rate matrix
7295	Calculate the probability of a peptide .
7296	Compute optimal T - > T .
7297	Calculate the optimal TTR for the given sequence .
7298	Calculate the probability of a profile .
7299	Evolve the profile at the given time .
7300	Returns the log likelihood of a sequence .
7301	Sets the branch length based on the tree length .
7302	Filter the clock model .
7303	This function plots the root of the tree
7304	Recursively resolve polytomies .
7305	Print the log - likelihood of the tree .
7306	add a coalescent prior to the tree
7307	Find the root root position of the tree .
7308	Convenience function to make sure that the tree is valid .
7309	Create GTR model .
7310	Helper function to read a VCF file .
7311	Perform ancestral reconstruction .
7312	Calculate the FWHM .
7313	Create a distribution with a delta function .
7314	Multiply a distribution of distributions .
7315	Assign date constraints to the tree
7316	Setup a TreeRegressionModel instance
7317	Makes a maximum likelihood tree .
7318	Calculate the likelihood of the tree .
7319	convert the date of the tree to date
7320	Return the uncertainty of a node .
7321	Calculate the maximum region of a marginal region
7322	Returns the minimum value of an interpolation object .
7323	Compute the median interpolation of an interpolation object
7324	Returns a numeric year .
7325	Create a TimeSeries from a regression model .
7326	Connect to guacd server
7327	Close the connection .
7328	Receive an instruction .
7329	Send data to the server .
7330	Send an instruction .
7331	Start a handshake .
7332	Convert unicode string to utf - 8
7333	Load a Termination from an instruction .
7334	Encode an argument .
7335	Encode the instruction .
7336	Returns the URL for the given class .
7337	Returns the URL to use for this request .
7338	Returns the URL for the given class .
7339	Download the contents of this vault .
7340	Retrieve the parent job .
7341	Prompts the user for authentication .
7342	Login to a solver .
7343	Show whoami .
7344	Print user information .
7345	Create a new QuerySet with the given filters .
7346	Return a copy of this query with the specified range .
7347	Return a copy of this Genome .
7348	Fetches all facets .
7349	Process filters
7350	Returns the next item .
7351	Execute a query .
7352	Migrate this dataset to another dataset .
7353	Entry point for solver .
7354	Downloads a folder from remote_path to local_path .
7355	Construct an instance from a dictionary .
7356	Logout the OAuth2 token .
7357	Make a request to the API .
7358	Retrieve a child object .
7359	Cancel a job .
7360	Parse snpeff output .
7361	Convert a row to a dictionary .
7362	Get the credentials file .
7363	Saves the configuration to a file .
7364	Helper function to format val
7365	Normalize tabular data .
7366	Builds a row from a list of cells .
7367	Builds a single line
7368	return list of row attrs
7369	Helper function to format a table .
7370	Migrate this dataset to another dataset .
7371	Validate a full path .
7372	Uploads the contents of the remote path .
7373	Validate a vault path .
7374	Validate the API host URL .
7375	Add files to the manifest .
7376	Annotate a list of records .
7377	Evaluate the expression
7378	Set the format name .
7379	Register a new output format handler .
7380	Helper function to format data .
7381	Wrapper around tabulate table .
7382	Return the full path to the user config directory .
7383	Return the system configuration directories .
7384	Read the default config file .
7385	Read config files .
7386	Returns the path to the user config file .
7387	Return list of system config files .
7388	Returns a list of file paths for this project .
7389	Write the default config file .
7390	Read config files .
7391	Truncate string to max_width
7392	Replace strings in string .
7393	Call multiple commands in a sequence .
7394	Apply options to a command .
7395	Applies the given option to the given command .
7396	Initialize options .
7397	Run the pep8 fix command .
7398	Run the clean command .
7399	Truncate a list of rows in a table .
7400	Formats a list of numbers .
7401	Formats a row .
7402	Vertices of vertical tables .
7403	Create a table from a list of data .
7404	Renders a template file
7405	Checks if the given type is a valid number .
7406	Check if the token is a boolean .
7407	Checks if the type is a binary type .
7408	Generate a key using the given template .
7409	Generate a private key pair .
7410	Returns a list of objects with the specified template .
7411	Insert image into qr_dir
7412	Export gene panels .
7413	Returns the first weekday
7414	Return a new repeat .
7415	Count repeat times in start_repeat
7416	Calculate basic counts for each week
7417	Handle a single chunk event .
7418	Export variants to a list of variants .
7419	Export verified variant variants .
7420	Convert a list of variant variants to document .
7421	Update a user .
7422	List variant variants .
7423	Get a variant .
7424	Get a variant variant .
7425	Verify a variant verification .
7426	Handles CLVariant export .
7427	Get cancer variants .
7428	Page for a variant .
7429	Handle an evaluation request .
7430	Handles the current classification
7431	Upload gene panel .
7432	Download verified files .
7433	Return a mapping of gene names to their ids .
7434	Add incomplete senrance information .
7435	Link genotypes to a single gene
7436	Send a request to the MME server .
7437	Get nodes from MME .
7438	Get the coordinates of a cytoband .
7439	Determine the sub category based on alt_len and reference_len
7440	Returns the length of the sequence
7441	Get the end position of the end of a variant .
7442	Parse the coordinates of a variant
7443	Check chromand coordinates
7444	Create new panel .
7445	View a panel .
7446	Export panel .
7447	Edit a gene gene .
7448	Load delivery report .
7449	Return a dict of hpo terms .
7450	List users whitelist .
7451	Builds a phenotype object for a given phenotype ID
7452	Retrieve the gene information for a given hgnc_id .
7453	Convert gene query to JSON .
7454	Page for the institute .
7455	Display transcripts .
7456	Returns a list of events for a given month .
7457	Parse variants .
7458	List variants of STRs .
7459	Create a variant for a variant .
7460	Create a variant for a variant .
7461	Parses a variant from the database
7462	Add an export header to a list of variants .
7463	Get variant information from a list of genes .
7464	Get predictions from a set of genes .
7465	Create a variant case .
7466	Try to find the bai file if it exists .
7467	Fetch evidence for a variant
7468	Parse a single gene
7469	Return transcript as string .
7470	Return the end position of a variant
7471	Returns the frequency of a variant
7472	Parse clins for clins
7473	Generate a URL to link to a GPG variant
7474	Generate a link to a particular variant
7475	Generate a link to the beacon .
7476	Generate URL to link a variant to UCSC .
7477	Return a human readable representation of a variant .
7478	Get the expected inheritance of a variant
7479	Return the callers for a variant
7480	Return cancer filters .
7481	Export CLVariant instance to a dictionary .
7482	Returns a dictionary containing the clinvar submission for the given variant .
7483	Return a variant object .
7484	Post a variant to a variant .
7485	Create an evaluation .
7486	Upload HNC symbols to the database .
7487	Create XLSX document for verified variants .
7488	Export all genes in a BED format
7489	Parse a clinvar signature .
7490	Parse the compound information for a case .
7491	Export all genes .
7492	Build a ped object from a dict .
7493	Run variants .
7494	Get a case for institute .
7495	Show the list of Score collections .
7496	Install an institute .
7497	Update institute .
7498	Get file handle .
7499	Get net net
7500	Get the next and previous net .
7501	Ensure year is valid .
7502	Return the day of the week
7503	Parse case data .
7504	Add ped info to peddy file
7505	Parse an individual from a single sample .
7506	Parse a list of individuals .
7507	Parse a case .
7508	Parse a ped file into a list of samples .
7509	Build a dictionary for evaluation .
7510	Generate a report of mitochondrial variants .
7511	Determine whether a list of terms are homogenic .
7512	Determine if a list of paths are likely to be considered a pathogenic category .
7513	Determine if two terms are likely Benign
7514	Parse the acmgmg_terms and return a list of paths .
7515	Add gene information from a variant object
7516	Fetch variants from a case .
7517	Returns all variants of an institute .
7518	Get a single variant .
7519	Retrieves all gene variants from the database .
7520	Retrieve evidence from institute
7521	Returns the causalatives of a case .
7522	Check for causalative variants .
7523	Find all causalatives of a variant .
7524	Delete variants for a case .
7525	Returns a list of overlapping variants
7526	Get variants of a case .
7527	Get a region of a region .
7528	Retrieves the variant variants for a given subject .
7529	Get a MongoDB connection .
7530	Return list of submission objects for each variant
7531	Generate the header for the clinvar submission
7532	Generate CSV lines for clinvar objects
7533	Load transcripts
7534	Create a new panel .
7535	Build an exon object
7536	Delete a panel .
7537	Delete all indexes .
7538	Delete user from database .
7539	Delete genes collection .
7540	Delete exons from build
7541	Delete case .
7542	Show individuals .
7543	Parse MatMaker matches .
7544	Show cases .
7545	Load a LoginUser object .
7546	Perform a login request .
7547	Build institute object .
7548	Delete an event .
7549	Create an event .
7550	Fetches events for a particular institute .
7551	Get events for user object .
7552	Add a phenotype to an institute .
7553	Remove phenotype term from institute
7554	Create a comment for a case .
7555	Parse the genotypes into a list of genotypes .
7556	Check the coordinates of a chromosome
7557	List HPO terms .
7558	Export SCAN output .
7559	Load exons
7560	Create a region within a region .
7561	Return a list of all events for a given month .
7562	Return a queryset of live records that are currently active .
7563	Parse requirements . txt file .
7564	Check if a gene exists in the database .
7565	Updates a panel .
7566	Create a new gene panel .
7567	Export a panel object .
7568	Returns information about the archive .
7569	Migrate a scenario case .
7570	Migrate a scenario to the database
7571	Scrape a case .
7572	Load HGNC Gene objects .
7573	Show hpo terms .
7574	Create a Flask application .
7575	Configure the application extensions .
7576	Register blueprint blueprint .
7577	Configure coverage report
7578	Retrieve aliases for a given symbol
7579	Build a panel .
7580	Generate verified variants files .
7581	Export variants .
7582	Generates a VCF line for a variant .
7583	Serve mongodb server
7584	Generate the md5 hash of a list of arguments .
7585	Setup the database .
7586	Setup the database collection .
7587	Run SCI index .
7588	Setup the database .
7589	Run demo setup .
7590	Setup the database .
7591	Display institute information .
7592	Parse the genetic models for a given case .
7593	Show gene panels .
7594	Add institute to database .
7595	Update an institute .
7596	Get institute from database .
7597	Return True if the date is a valid date
7598	Parse a date string .
7599	Output gene IDs .
7600	Parse the rank score from a case - score row .
7601	Add a user .
7602	Check connection against MongoDB .
7603	Initialize the application .
7604	Load delivery report .
7605	Add user to database .
7606	Implements pileup .
7607	Load exons from the database
7608	Update compound compounds .
7609	Add links to a gene .
7610	Get information about a gene
7611	Parse a single HGNC line into a dictionary
7612	Parse HGNC genes
7613	Gets the clinvar for a user .
7614	Updates aclvar_id with the given clinvar_id
7615	Retrieves the clinvar id for a given submission_id .
7616	Adds new variants to the clinvar collection .
7617	Close the clinvar submission for a given user .
7618	Retrieve all clinvar submissions .
7619	Delete a clinvar object
7620	Returns a dictionary with the local variables for a case .
7621	Parse the OPO output .
7622	Handle a list of genes .
7623	Get a specific gene .
7624	List genes
7625	Check if panels exists in db
7626	Load variants for a case .
7627	Load a scout .
7628	Decorate a function to return a template .
7629	Get institute and case for institute .
7630	Return institute institutes .
7631	Get the HGNC ID for a given gene .
7632	Update a panel .
7633	Load disease terms .
7634	Load the disease terms from the HGIM database .
7635	Parse the variant frequencies .
7636	Parse the frequency of a variant .
7637	Parse SV variant frequencies .
7638	Display users .
7639	Build HGNC gene from gene_info
7640	Build a gene panel .
7641	Load the omim_automap panel .
7642	Return the set of genes that are similar to another .
7643	Updates the version of the mappings .
7644	Add a gene panel to the database .
7645	Fetch a panel .
7646	Delete a panel .
7647	Get a gene panel .
7648	Get gene panels .
7649	Convert a gene to a dictionary .
7650	Update a panel .
7651	Add a pending panel to the database .
7652	Apply pending changes to a panel .
7653	Returns a set of clinical symbols .
7654	Show cases .
7655	Emit an email .
7656	Load indexes from the database .
7657	Update indexes .
7658	Drops all indexes
7659	Build a query for a variant .
7660	Build Mongo query .
7661	Generate clinsig signature
7662	Add coordinates to Mongo query
7663	Add gene filters to mongodb query .
7664	Drops the database .
7665	Parse a CSV file .
7666	Build a dict from the clns_info dict
7667	Load a gene collection .
7668	Load a single transcript .
7669	Insert multiple exon objects into the database .
7670	Retrieve a gene from the database .
7671	Get HGNC ID for a given HGNC symbol
7672	Fetch a list of HGNC genes
7673	Retrieves all genes
7674	Return the number of genes in a given build
7675	Drop the HGNC gene collection .
7676	Drop transcripts collection .
7677	Drops exons collection .
7678	Fetch all ensembl transcripts
7679	Returns a dictionary of HGNC symbols for symbol
7680	returns gene by symbol
7681	Fetch all genes by alias
7682	Get all ensembl genes
7683	Get HGNC symbol
7684	Add hgnc_id to the database .
7685	Build a dictionary of interval intervals .
7686	Update the omim gene panel .
7687	List all cases for an institute .
7688	Return a case object .
7689	Handles matchmakers .
7690	Match matchmaker .
7691	Delete a matchmaker .
7692	Generate HTML for a case report .
7693	Render a case report .
7694	Define a case for a case .
7695	Add phenotype items to institute
7696	Handles phenotypes .
7697	Create a new event .
7698	Update the status of an institute .
7699	Assign a case to an institute .
7700	List HPO terms .
7701	Mark a variant as a redirect .
7702	Mark a variant as responsible for saving a case .
7703	Sends a delivery report to an institute .
7704	Shows a link to an institute .
7705	Re - run a case .
7706	View for the research .
7707	Sends a cytco closure to the database .
7708	Send MultiQC to the database .
7709	Generate a case for a case .
7710	Add report content to the case .
7711	Generate coverage report for coverage report .
7712	List all the clinvar submissions .
7713	Writes the MT files to Excel .
7714	Update case in case .
7715	Query HPO terms .
7716	Convert a VCF to a cable name .
7717	Returns a MongoQC instance for the institute .
7718	Returns a list of variants that are unevaluated by sanger
7719	Add a match to the MME .
7720	Send DELETE request to match case
7721	Gets matches from the MME server .
7722	Perform match on matchmaker
7723	Update gene information .
7724	Parse the callers from a variant
7725	Build a transcript
7726	Load institute into database .
7727	Parse the CADDED for a variant .
7728	Create a variant .
7729	Update a variant
7730	Updates the variant rank .
7731	Updates the compound with the given variant
7732	Update compound objects .
7733	Update compound variants in a collection .
7734	Update compound compounds .
7735	Load a variant from the database .
7736	Upsert a variant
7737	Load variants from the database .
7738	Create case for a case .
7739	Share a customer .
7740	Associate a case .
7741	Marks a case as checked .
7742	Validate a variant .
7743	Returns a list of variants ordered by user .
7744	Validate a variant .
7745	Mark a case as causal .
7746	Create a dismiss variant .
7747	Set the ACMG for a variant .
7748	Parses variant IDs into a dictionary
7749	Parses simple id and alt values
7750	Generate a key for a document ID .
7751	Convert hgnc_id to database .
7752	Convert a variant object to a variant ID .
7753	Get the number of cases in institute .
7754	Update dynamic genes list .
7755	Get a case .
7756	Delete a case .
7757	Adds a case to the database .
7758	Replace a case .
7759	update case id to case
7760	Adds an evaluation to a variant .
7761	Get evaluation results for a variant
7762	Parse the lines of the transcripts
7763	Parse the ensembl query result .
7764	Parse the ensembl query output .
7765	Parse an ensembl line
7766	Parse ensembl file
7767	Parse ensembl file
7768	Parse the ENsembl output into a dictionary .
7769	Initialize logging .
7770	Parse an omim line into a dictionary
7771	Parse the OMIM file
7772	Gets a set of phenotypes from a file .
7773	Scrape genes .
7774	Convert string to int .
7775	Formats the month and year month
7776	Create HTML for a weekday .
7777	Return the month name for the current month .
7778	Add popover information
7779	Get panel info .
7780	Parse a single gene info .
7781	Parse a list of gene identifiers .
7782	Parse a gene panel file .
7783	Show diseases .
7784	Drop HPO terms .
7785	List all users .
7786	Parse the conserved SNP values .
7787	Parse the conservations .
7788	Get general case information from the database .
7789	Gets all cases in the database .
7790	Returns a HttpResponse with the given context .
7791	Return the year and month from the query string
7792	Check for cancelled events .
7793	Fetch a specific ho term .
7794	Search HPO terms .
7795	Retrieve a disease term .
7796	Returns a list of all disease terms .
7797	Load a disease term .
7798	Generate a list of gene ids
7799	Read an HDF5 file
7800	Calculate the frequency axis
7801	Set up the time axis for the instrument
7802	Read filterbank .
7803	Compute the LST from the header
7804	Blank DC bin .
7805	Print info about the file
7806	Calculate the extent
7807	Plot the waterfall .
7808	Plot the time series .
7809	Write the filter to a file .
7810	Calibration for the bandpass filter .
7811	Convert data to a coarse - grayscale
7812	Apply a Macher to the input data .
7813	Calculate differential flux for a set of water flows .
7814	calculate frokes and stokes
7815	Convenience function to write waterfall filenames to filenames
7816	Find the closest value in xarray .
7817	Rinearin the data .
7818	Unpack a nbit array .
7819	Calculate Stokes Noise Ratio .
7820	Plots stokes and stderr for a river flow
7821	Generate the calibrated noise diagram for a given stream
7822	Plots the gain offsets for a given stream
7823	Open a file in HDF5
7824	Calculate the selection range for the selection .
7825	Calculate the selection size
7826	Calculate the shape of the selection
7827	Determine the start and end channels of the file .
7828	Set up the frequencies for the channel
7829	Populate the timestamps .
7830	Populate the frequencies for each channel .
7831	Determine the number of channels in the file .
7832	Calculate the number of blobs
7833	Check if the buffer is heavy .
7834	Read data from file .
7835	Read all data from file
7836	Read a single row
7837	Read data from the container
7838	Updates the header of the header
7839	Print info about the file
7840	Write the container to filenames .
7841	Write data to an HDF5 file .
7842	Writes the data to a hdf5 file .
7843	Determines the size of the blob in the given chunk
7844	Detect the chunk dimensions .
7845	Grab the plot of the data
7846	Create a histogram from a file .
7847	Read first header .
7848	Find the number of data blocks in the file .
7849	Print the data block .
7850	Plots a histogram
7851	Generate the header of the filter bank .
7852	find the size of the header
7853	Create a batch of matched files
7854	Create an HDF5 raw file .
7855	Fold function for foldcalc calculations
7856	Integrate waterfall
7857	Calculate seasonal fluxes
7858	Calculate the center frequency for each channel
7859	Calculate the f_0 and noise ratio .
7860	Calculate the diode separation ratio for a given wavelength range .
7861	Calculate the TSR for a diode
7862	Calibrate flux for a source source
7863	Calculate the length of the header .
7864	Return True if filename is a BLIM file .
7865	Fix the data type of a header in a file .
7866	Generate a signature string from a file .
7867	convert angle to sigproc
7868	Calculate the number of samples in a file .
7869	Convert the traceback to a dictionary .
7870	Creates a sub - parser for the recursion .
7871	Create a parser for zonefile
7872	Remove comments from a text .
7873	Add default name to the document .
7874	Parse a single record
7875	Parse a text zone file and return a list of dicts
7876	Parse a zone file .
7877	Quote double quotes .
7878	Parse an avro schema string .
7879	Convert a list of classes to a python package .
7880	Generate the source code for a pyschema class .
7881	Disable auto - register decorator .
7882	Convert a record to a JSON - compatible dictionary .
7883	Load a JSON record from a dictionary .
7884	Parse a JSON - encoded string .
7885	Add a schema to the map .
7886	Return the schema for the given record_name .
7887	Return a dictionary representation of the model .
7888	Add a mixin to a class .
7889	Create a record from a cls class .
7890	Get the schema for a record .
7891	Get the root schema for a record .
7892	A generator for reading mr file .
7893	Writes output to output stream .
7894	Creates an OrderedDict with the given key .
7895	Get a search result .
7896	Retrieve a list of search results .
7897	Reload entities .
7898	Extracts entity from a result .
7899	Given a quote return a new quote .
7900	Escape an object .
7901	Generates an elementary rotation matrix for a given axis .
7902	Construct the covariance matrix for the covariance matrix .
7903	Calculate the mean error for the vradiance .
7904	calculate standard error
7905	Compute GMagnitude error .
7906	Return magnitude error .
7907	Make the plot of the magnitudes
7908	Calculate the average number of transitions for a given beta .
7909	Return the angular distance between two points .
7910	Transform the cartesian coordinates of a cartesian product .
7911	Transform the sky coordinates to theta .
7912	Transform a covariance matrix to a Jacobian matrix .
7913	Returns the error scaling factor for the given observable .
7914	Make a plot of the spectra
7915	Make a plot of the vmag data
7916	Apply a function to a list of functions .
7917	Decorator for debugging purposes .
7918	Unquotes the given value .
7919	Apply a function to each item in the collection .
7920	Return a new DataFrame with only the elements that match the given func .
7921	Return a new Collection containing only the elements of this collection .
7922	Return an iterator over the items from this collection .
7923	Return a new collection where the elements of this collection is met .
7924	Zip the elements of the collection .
7925	Find the node matching the given criteria .
7926	return the path to the system path
7927	Iterate over a group of characters .
7928	Parse register options .
7929	Return an event string .
7930	Calculate a list of possible run locations .
7931	Write the results to a file .
7932	Print the performance of the benchmark .
7933	Print a report of all solver conditions .
7934	Strips the given code .
7935	Round to the next number .
7936	Block a list of indices .
7937	Calculate cache access
7938	Calculate the number of cycles per process
7939	Run the kernel .
7940	Perform IAC analysis .
7941	Strip markdown and uncomment comments .
7942	Strip unreferenced labels .
7943	Select the best block in the assembly .
7944	Prompt the user to enter a new block increment increment
7945	Go through assembly files .
7946	Insert mark markers at start and end line .
7947	Run IMA analysis on input file .
7948	Entry point for the script .
7949	Simulate the model .
7950	Generate a series of numbers .
7951	Get the last modification time of the directory .
7952	Check if arguments are valid .
7953	Main entry point .
7954	Merge two pickle files .
7955	Shorthand symbol .
7956	Transform a multidimensional declaration into a 1D array .
7957	Transforms a multidimation reference to an array .
7958	Finds the type of the given node type .
7959	Force a function to return an iterable .
7960	Check that all datatypes are in the kernel .
7961	set a constant
7962	Substitute constants .
7963	Return the array sizes of the variables in the Dataset .
7964	Calculate the relative offset of the variable .
7965	Removes duplicate entries from source dictionary .
7966	Returns the length of the iteration .
7967	Get the loop stack
7968	Return an ordered list of free symbols .
7969	Compile sympy references to a dictionary of variables .
7970	r Computes the distances between each variable .
7971	Convert global iterator to indices .
7972	The iterator for the global iterator .
7973	Convert indices into a global iterator .
7974	An iterator that provides a global iteration of global variables .
7975	Print information about the kernel .
7976	Print the information about the variables .
7977	Print the constants in the output file .
7978	Print the kernel code .
7979	Convert a symbolic AST to its symbol representation .
7980	Get the offset of an expression .
7981	Get the name of an ast . reference .
7982	Return the index type of the kernel .
7983	Return a list of constant declarations .
7984	Get array declarations .
7985	Return a list of loop nodes for loop .
7986	Builds array declarations from kernel astroid
7987	Find innermost loop in loop .
7988	Builds a kernel for array initialization .
7989	Builds a dummy kernel call for kernel calls .
7990	Build a kernel function declaration .
7991	Build scalar declarations from kernel .
7992	Get the code for the kernel .
7993	Build a kernel call .
7994	Get the main code for this program .
7995	Runs the instrument analysis .
7996	Build the executable file .
7997	Convert a string to sympy notation .
7998	Generate a unique identifier .
7999	Get the datetime of the file .
8000	Generate CacheSimulationSim
8001	Calculate the bandwidth of the kernel .
8002	Select compiler and flags from machine description file .
8003	Parse a perfctr command line into a tuple .
8004	Ensure that there is no overlapping range .
8005	Get the location of the header file
8006	Align a single iteration offset to the cli boundary .
8007	Returns the number of loads
8008	Returns the number of hits in the memory hierarchy
8009	Returns the list of misses
8010	Returns a list of stores
8011	Returns the number of evicts in the cache .
8012	Get information about the cache level
8013	Replace the environment variable with the given value .
8014	Configure argument parser .
8015	Print the runtime statistics .
8016	Parse the README file .
8017	Schedule this job .
8018	Builds the item description
8019	Attempts to record a purchase .
8020	Get course content from Ecommerce API
8021	Gets the course content for a course .
8022	Updates the unenroll list
8023	Send course refund notification .
8024	Send an offer notification email .
8025	Get logger configuration .
8026	Retry the order of a request .
8027	Fulfill the given order .
8028	Get the client for the specified site .
8029	Get the value of a key
8030	Stores the given key in the cache .
8031	Retrieves a configuration setting from the environment .
8032	Get the filename of the overrides file .
8033	Get the value sorted by version .
8034	Returns the latest version of an eplus - package .
8035	Return a dictionary of file references .
8036	Populate table from json data
8037	Returns a list of all external files
8038	Set default values for all tables .
8039	Prepare a list of extensible extensions
8040	Get the name of the field at the given index .
8041	Return a dictionary mapping external references to external references .
8042	Get the value of a single column .
8043	Update value in field .
8044	Update record .
8045	Set default values .
8046	Add fields to the record .
8047	Pop the value at index .
8048	Insert value into list
8049	Delete record from database
8050	Register a record hook .
8051	Register a hook .
8052	Create a regex pattern for the given line .
8053	Returns the remaining duration in seconds .
8054	Serialize the event into a dictionary .
8055	Send a HTTP request to the server .
8056	Get information about a particular service .
8057	Try to create a directory .
8058	Configure a service .
8059	Register a CA .
8060	Set recording status .
8061	Set the status of an event
8062	Updates the capture status of the agent .
8063	Return the configuration file location .
8064	Update the configuration file
8065	Check the server authentication .
8066	Initialize the logger .
8067	Show home page .
8068	Serve a preview of an image .
8069	Run all modules .
8070	Parse the ICal file
8071	Get the current schedule
8072	Run the control loop .
8073	Run the control loop .
8074	Makes an error response
8075	Generate a response response .
8076	Get information about the service .
8077	List available events .
8078	Get an event by uid
8079	Delete an event
8080	Modify an event .
8081	Parse the workflow config .
8082	Process an ingest event .
8083	Start capture .
8084	Render the HTML to a fragment .
8085	Returns a list of all resources .
8086	Convert the object to a dictionary .
8087	Create a Fragment object from a dict .
8088	Add content to the response .
8089	Add a fragment resource .
8090	Add a resource URL .
8091	Initialize the js function
8092	Returns a list of resource objects with the given placement .
8093	Convert a resource to HTML .
8094	Handles GET requests .
8095	Render a standalone HTML response .
8096	Renders the given fragment .
8097	calculate the probability density function
8098	Convert values to one - dimensional array .
8099	Given an error table and an error table return the values in the error table .
8100	Compute posterior hypotheses for a single chromosome .
8101	Generate final error table for a DataFrame .
8102	Extract a summary table from a DataFrame
8103	Compute error statistics for target scores .
8104	Find the cutoff .
8105	Run XGBost on the given data .
8106	Infer IPID forms from the input file .
8107	Convenience function to infer peptide peptides from a file .
8108	Convenience function for inference
8109	Subsample an input file with subsample .
8110	Reduce input files to outfile .
8111	Backpropagate infile to outfile
8112	Filter a list of sqmass files
8113	Get group by ID .
8114	Create a group .
8115	Delete a group .
8116	Get group members .
8117	Update the members of a group .
8118	Get the effective member count .
8119	Checks if a group is effective .
8120	Modify the Sphinx configuration .
8121	Create a HDF5 dataset .
8122	Decrypt the contents of a key .
8123	Get stdin and stderr
8124	Get stdout and stderr
8125	Get the stderr of this command .
8126	Get the output of the debug command
8127	Yields stdout and stderr .
8128	Context manager for streaming stdout .
8129	Context manager to yield stderr .
8130	Context manager .
8131	Empty account .
8132	Empty a container
8133	Decorator to handle stdout .
8134	Decorator to add a file handler to the file manager .
8135	Write error message to file .
8136	Prints the help of the option .
8137	Print the usage of the option .
8138	Print version information to file .
8139	Perform a HTTP request .
8140	Post an account .
8141	Delete an account .
8142	Updates a container .
8143	Send HEAD request .
8144	Retrieve an object from the server .
8145	Puts an object into a PUT .
8146	POST an object to the specified container .
8147	Resolve an option in the config file .
8148	Returns a shallow copy of this instance .
8149	Write headers to file .
8150	Authentication client .
8151	Generate a temporary URL for a request .
8152	Escape a value .
8153	List containers in a container .
8154	Get a client .
8155	Encrypt a block of data .
8156	Decrypt encrypted data using given key .
8157	Upload a directory structure .
8158	Update an account
8159	Put a container into a container .
8160	Get the manifest body .
8161	Create a new container
8162	Obtain a temp URL .
8163	Show information about a transaction
8164	Help for a command .
8165	Return True if the buffer is empty False otherwise .
8166	Encrypt data using AES key .
8167	Get the status of a repository .
8168	Get a specific pull request .
8169	Get a list of pull requests .
8170	Save the title of this slide .
8171	Returns a queryset of all available sliders .
8172	Render a hero s hero slider .
8173	Acquire a read lock .
8174	Release the writer pool .
8175	Acquire the writer lock .
8176	Add a task to the registry .
8177	Remove a task from the registry .
8178	Get task by task_id .
8179	Return a list of all tasks in the queue .
8180	Convert the object to a dictionary .
8181	Create Task from dict .
8182	Execute a perceval job .
8183	Initializes the archive manager .
8184	Execute the queue .
8185	Execute the backend
8186	Creates an index
8187	Create a mapping from an index file
8188	Wrapper around json - encoder
8189	Writes items from the given generator .
8190	Add a task .
8191	Cancels a task .
8192	Get all pending items .
8193	Validate task arguments .
8194	Parse archive arguments .
8195	Execute the job .
8196	Schedule a job .
8197	Cancels a job task .
8198	Starts the job listener
8199	Listen for new jobs
8200	Schedule the scheduler .
8201	Schedules a task .
8202	Cancels a task .
8203	Handle a job .
8204	Log a failed job .
8205	Build command line arguments for job execution .
8206	Get secret from secret directory
8207	Register view .
8208	Register a view function .
8209	Reverse the version of the request .
8210	Get the name of the view .
8211	Get the version number .
8212	Resolve an alias by key .
8213	Determine the engine configuration for a given scheme .
8214	Parse a database path .
8215	Extract database configuration from a database URL .
8216	Parse a database URL .
8217	Authenticate user .
8218	List users .
8219	Create a new password .
8220	Add the URL field to the context .
8221	Parse a human readable boolean value .
8222	Parse a string into an integer .
8223	Returns a parser for the given type
8224	Read settings from environment variables .
8225	Create a ModelDict from a model .
8226	Base64 encoding .
8227	Create field from dict .
8228	Create a validator from a dictionary .
8229	Returns the cartesian product of a list of parameter values .
8230	Finds a list of points that are unique
8231	Change logging settings from kwargs .
8232	Decorator to specify a simple logging configuration .
8233	Create directories for the given log file .
8234	Return a list of strings
8235	Rename log file .
8236	Initialize the logger .
8237	Extract replacements from a trajectory .
8238	Shows progress bar .
8239	Check and replace the arguments in the parser .
8240	Convert a parser to a string .
8241	Find and parse multiprocessing options .
8242	Searches for multipro_dicts in dictionary
8243	Check if the log configuration file is configured .
8244	Parse log_config file .
8245	Handle a log config dictionary .
8246	Create and set up logging handlers .
8247	Finalize the object .
8248	Start stdout .
8249	Write buffer to stream .
8250	Compare results .
8251	Compare two parameters .
8252	Decorator for executing a function .
8253	Mark a function as deprecated .
8254	Decorator to specify mutually exclusive keyword arguments .
8255	Decorator for deprecated keyword arguments .
8256	Decorator to retry a function .
8257	A decorator that marks a class namespaces .
8258	Add parameters to the trapezoid .
8259	Run the network
8260	Compute euler s euler algorithm .
8261	Add parameters to the simulation .
8262	Computes the difference between two Lorenz vectors .
8263	Create a storage service .
8264	Create a storage service .
8265	Add parameters to the simulation .
8266	Calculate the Rolesky decomposition
8267	Compact a single HDF5 file .
8268	Return True if the parameter is in a group .
8269	Build dictionary of model eqs .
8270	Prebuild pre - build model .
8271	Build model .
8272	Builds the equation of the equation
8273	Run prebuild pre build .
8274	Build the network .
8275	Add parameters .
8276	Compute the fano factor for a given neuron
8277	Compute mean factor for each neuron .
8278	Compute mean fano factor .
8279	Add monitors to the network .
8280	Add monitors to the network .
8281	Make the path to the output folder .
8282	Plot result .
8283	Print the graph and VAR graphs .
8284	Analyze the excitation population
8285	Get the batch number
8286	Explore a set of parameters for a given batch
8287	The root node of this node .
8288	The function associated with this node .
8289	Rename the container .
8290	Set the details of the environment .
8291	Convert a node to a message .
8292	Remove a sub - tree from a node
8293	Deletes a node from the graph .
8294	Removes a node from the root node .
8295	Removes the given node from the given split_name .
8296	Translate a shortcut name into a value .
8297	Add prefix to the start node .
8298	Determine the type of a starting node .
8299	Helper function to add a generic generic generic type .
8300	Add nodes to the tree .
8301	Create a link under the given action .
8302	Ensure that the names are valid .
8303	Creates a new group with the given name and type .
8304	Creates or creates a new parameter for the given node .
8305	Sets details for a given instance node .
8306	Iterate over the given node .
8307	Create an iterator over the children of the given node .
8308	Perform a breadth - first traversal tree traversal
8309	Perform a fast search .
8310	Searches for a given key .
8311	Backward search .
8312	The children of this node .
8313	Add a group from storage .
8314	Add a leaf from storage .
8315	List of directories for this node .
8316	A convenience method for debugging .
8317	Get the parent location of this node .
8318	Add a group .
8319	Add a link .
8320	Remove a link .
8321	Add a leaf to the network .
8322	Remove this node from the tree .
8323	Remove a child from the group .
8324	Check if an item contains an object .
8325	Get the value of an object .
8326	Get the children of this node .
8327	Get groups .
8328	Get the leaves .
8329	Get list of links .
8330	Stores the child with the given name .
8331	Store the object in the group .
8332	Load a child node .
8333	Loads the current trajectory .
8334	Add a parameter group .
8335	Add a parameter to the network interface .
8336	Add a result group .
8337	Add a result group .
8338	Add a derived parameter group .
8339	Add a derived parameter .
8340	Add a config group .
8341	Add a config group .
8342	Evaluate the maximum fitness .
8343	Add configuration variables for a commit .
8344	Make a git commit .
8345	Flatten a nested dictionary .
8346	Takes a dictionary and returns a nested dictionary .
8347	Display a progress bar .
8348	Get the arguments for a function .
8349	Returns a dictionary of kwargs for the given function .
8350	Convert timestamp to datetime format .
8351	convert port to pypet
8352	Ensure that the given path exists .
8353	Reset the index .
8354	Gets the remaining time .
8355	Convert the object to a dictionary .
8356	Remove a key from annotations .
8357	Convert annotation dictionary to string
8358	Modify a result .
8359	Set the result of a result .
8360	Set the shared data .
8361	Store data for this trajectory .
8362	Get the data node .
8363	Check if the item is supported .
8364	Create shared shared data .
8365	Manage multiprocessing .
8366	Request a lock .
8367	Send shutdown signal .
8368	Finalize the context .
8369	Start the client .
8370	Send a request to the server .
8371	Attempt to acquire lock
8372	Listen for messages
8373	Send data to server .
8374	Handles fork process .
8375	Handle data .
8376	Listen for messages .
8377	Receive data from the queue .
8378	Receive data from the socket .
8379	Store data in the cache .
8380	Store the given message .
8381	Stores references in the given trajectory .
8382	Decorator to parse configuration data from a configuration file .
8383	Get a section from the parser .
8384	Collect configuration values .
8385	Extract kwargs from config file
8386	Add parameters to the trapezoid .
8387	Convert the given rule number into a numpy array .
8388	make initial state
8389	Plots a pattern to a file .
8390	Perform cellular automaton algorithm .
8391	Simulate the pattern .
8392	Send a signal to the scheduler .
8393	Gets the overview group for this view .
8394	Loads the given message .
8395	Store the given message .
8396	Load multiple items .
8397	Check HDF5 properties in the metadata file .
8398	Store multiple items .
8399	Called when the underlying file is closed .
8400	Extracts the file information
8401	Backup the current trajectory .
8402	helper function to read a row from a table
8403	Prepare the merge of a traj .
8404	Load meta data for a trj .
8405	Load a sub - branch .
8406	Check that the current trajectory is correct .
8407	Fill the run table with all run information .
8408	Loads the exploratory for the given Trajectory .
8409	Stores the explorations in a tranj . tranj . overview .
8410	Prepare the overview table for overview .
8411	Stores the given trajectory .
8412	Stores a sub - branch in the tree .
8413	Create a leaf node in the tree
8414	Helper function to load a tree of nodes .
8415	Stores the nodes in the given tree .
8416	Search for parameter table entry in HDF5 .
8417	Get or create a table or create a table if needed .
8418	get node by name
8419	Sets all attributes to their corresponding values .
8420	Reconstruct the native data type from the store .
8421	Add or modify a row to the table .
8422	Helper function to insert into a row .
8423	Extracts the insert dictionary for the given item .
8424	Truncates a string to a maximum length .
8425	Gets or creates a group if it does not exist .
8426	Determine if a key is already created .
8427	Store the v_annotations in the HDF5 file .
8428	Load annotations from node .
8429	Store the given traj_group in HDF5
8430	Parses a load_data group .
8431	Load all metadata for a traj node .
8432	Extract missing flags from data_dict .
8433	Add summary table to prm table
8434	Add information about the metadata table .
8435	Store data in store .
8436	Store or store a parameter .
8437	Print shared arrays .
8438	Write a shared table
8439	Write a dictionary to a PDB table .
8440	Write data to pypi
8441	Insert data into another array .
8442	Insert data into the HDF5 file .
8443	Delete a link
8444	Recursively delete parameter or group .
8445	Write data into a pytable
8446	Creates a pytable description
8447	Retrieves the value of a parameter from a parameter table
8448	Given a list of strings return the length of the longest string .
8449	Parses the given dictionary into a dictionary .
8450	Load a pbject table into a dictionary .
8451	Read shared data .
8452	Properly read a table .
8453	Perform PRM reader .
8454	Load a trajectory .
8455	Make set name .
8456	Set property values from kwargs .
8457	Register dynamic imports .
8458	Set the name of the run .
8459	Yield successive runs .
8460	Shrink the trajectory .
8461	Initialize a new parameter .
8462	Set a preset parameter .
8463	Lock the experiment .
8464	Retrieve a value from the run .
8465	Check if a run is completed .
8466	Removes expanded parameter from disk .
8467	Helper function for _copy_from_node .
8468	Explicitly explore a trajectory .
8469	Updates the run information .
8470	Add information about a single run .
8471	Lock all parameters
8472	Lock all derived parameters
8473	Finalize the run .
8474	load the skeleton
8475	Load an object .
8476	Store this trajectory to the backup file .
8477	Create a list of wildcard wildcards .
8478	Merge multiple trajectories .
8479	Merge multiple run names into one run .
8480	Rename a full name .
8481	Merge derived parameters from other_trajectory
8482	Merge potential links from another Trajectory
8483	Merge config from another trajectory .
8484	Merge two trajectories .
8485	Merge the results of another Trajectory
8486	Migrate this trajectory .
8487	Store the current trajectory .
8488	Restore default values .
8489	Sets the parameter access to the given index .
8490	This method is used to create a single run .
8491	Get run names .
8492	Get information about the run .
8493	Finds the index of the parameter in the given list of parameters .
8494	Starts a running run .
8495	Finalize the run .
8496	Sets start time .
8497	Sets the finish time of the run .
8498	Returns an instance of the given class .
8499	Return a copy of param_dict
8500	Finalize run .
8501	Get the configuration dictionary .
8502	Get a dictionary of results .
8503	Store a single item in the network .
8504	Load one or more items from disk .
8505	Called when a node is removed .
8506	Delete links from the given iterator .
8507	remove child nodes
8508	Callback for delete_items .
8509	Internal wrapper for _pool_wrapper .
8510	Wrapper for frozen pooling .
8511	Configure the pool .
8512	Configure a frozen pool .
8513	Process a single run .
8514	Configure the frozen scop .
8515	Execute a single scoop .
8516	Configure logging system
8517	Configure the niceness .
8518	Helper to handle SIGINT exceptions .
8519	Run single run function
8520	Wrap the handler for logging .
8521	Loads a class from the full class string .
8522	Create a class by name .
8523	Get the length of this parameter .
8524	Return the value as a string .
8525	Test if two values are equal .
8526	Get range .
8527	Explicitly explore the parameter range .
8528	Expand an array to a range .
8529	Raise an exception if explore_iterable is not an entry .
8530	Store the object in the store
8531	Load parameter from disk
8532	Loads the parameter from a dictionary .
8533	Check if two values are equal .
8534	Check if the given data is a supported matrix .
8535	Serialize a sparse matrix .
8536	Builds a tuple of names based on the name index .
8537	Helper function to reconstruct a sparse matrix
8538	Loads the parameters from a dictionary .
8539	Store the pickle parameter .
8540	Loads the parameter from a dictionary .
8541	Convert key to integer
8542	Return the value as a string .
8543	Convert the data to a dictionary .
8544	set the value of the variable
8545	Get a value from the result .
8546	Set a single item .
8547	Overrides sparse implementation .
8548	Store data into a dictionary .
8549	Loads data from a dictionary
8550	Set a single entry .
8551	Store the result of pickle .
8552	Loads the parameters from a dictionary
8553	Merge all files in folder
8554	Upload a file to S3
8555	Copy a file from S3
8556	Create a session .
8557	Merge two trajectories .
8558	Start a job .
8559	Matrix multiplication of two reals .
8560	Run Euler integration .
8561	Post - process firing of a neuron .
8562	Add parameters to the experiment .
8563	Add an exploration .
8564	Execute pre - run pre_run
8565	Execute a network run
8566	Extract sub - runs from a trapezoid .
8567	Execute the given network run .
8568	Adds the parameters of a traj .
8569	Pre - run pre - run
8570	Run the network .
8571	Run the experiment .
8572	Create a filename for a trapezoid .
8573	Gets the next element from the chain .
8574	Merge all files in a folder .
8575	Handles a SIGINT signal .
8576	Read configuration from a file .
8577	Request PIN code .
8578	Request token from ecobee .
8579	Refresh access token .
8580	Returns a list of thermostatoms .
8581	Write tokens to file .
8582	Set HVAC mode
8583	Sets the fan minimum on a thermostat .
8584	Set the hold temperature for a thermostat .
8585	Set the climate hold for a given index .
8586	Delete a vacation
8587	Resume a program .
8588	Send a message to the thermostat .
8589	Set the humidity .
8590	Generate a random delay .
8591	Generate a new timeout
8592	Generate time for a lease request
8593	Generate a renewal time .
8594	Return a dict of all FSM attributes .
8595	Reset attributes .
8596	Get the timeout for a particular state .
8597	Set the timeout for a particular state
8598	Send a discovery packet .
8599	Select an offer .
8600	Send a DHCP request .
8601	set timers for current state
8602	Handle a DHCPACK packet .
8603	Check if DHCPK is available .
8604	Execute the INIT .
8605	Set BOUND state
8606	Reset the lease .
8607	Sends a REBING state .
8608	End the script .
8609	Initiate an error .
8610	Check if there are enough offers .
8611	Check if request is still valid .
8612	Raise RENEWING .
8613	Raise a REBINDING .
8614	Handle incoming request .
8615	Handle an ACK request .
8616	Handle a NAK request .
8617	Receives an ACK or BODY .
8618	Handle NAKING .
8619	Handle an ACK .
8620	Handle NAK .
8621	Called when a lease is received
8622	Set the value of a query .
8623	Return a new query with the given name and value .
8624	Return a new QuerySet with the given name and value .
8625	Check status of nagios .
8626	Create the output of the given data .
8627	Entry point for the CLI
8628	Validate a message .
8629	Read a tdmsms file and return the name and data
8630	Add the deformation transformation .
8631	Convert tdms file to fcs
8632	Compare two files
8633	Create a new patch
8634	Delete the next patch .
8635	Delete the specified patch .
8636	Check if file exists in the patch .
8637	Backup a file
8638	Add a file to the database .
8639	Run Quilt command .
8640	Create the directory if it doesn t exist .
8641	Copy this directory to another directory .
8642	Link file .
8643	Copy this file to another directory .
8644	Returns the directory object .
8645	Backup a file
8646	Refresh the index .
8647	Unapply a previously applied patch
8648	Unapplies the top patch
8649	Unapply all patches .
8650	Apply a patch to the series .
8651	Apply the next patch to the series .
8652	Apply all patches .
8653	Read series file .
8654	Save series to file .
8655	Add a patch to the patch
8656	insert patches into the patchfile
8657	Add patches to the current patch .
8658	Remove a patch
8659	Return a list of patches after the given patch .
8660	Return a list of patches before the given patch .
8661	Return a list of patches that match the given patch .
8662	Replace a patch .
8663	Create the directory structure .
8664	Check the version of the python version .
8665	Add arguments to the parser .
8666	Add an argument to the given parser .
8667	Adds a parser to subparsers .
8668	Set subparsers .
8669	Add subparsers to the given parser .
8670	Check if file is in the given patch
8671	Check if the given file is in the next patch .
8672	Reverts a file to the given patch
8673	Import a patch .
8674	Import patches .
8675	Store a way .
8676	Returns an iterator over the missing node ids .
8677	Store a node .
8678	Builds route for the given relation .
8679	Formats the route_short_short_short_short_short_short_short_short_short_short_short_short_short_short_short_shorten .
8680	Get the agency id for the relation .
8681	Collect all possible ways .
8682	Store a relation record .
8683	Create dummy data for dummy trips .
8684	Generate a list of Agency objects .
8685	Create dummy trips for a trip .
8686	Writes the data to a zip file .
8687	Copy all buffered files to a destination .
8688	Build an agency .
8689	Extract stops .
8690	Build a Shape object from a list of nodes .
8691	Get the version supported by the adapter .
8692	Send an APD to the device .
8693	Try to authenticate the device .
8694	Register a new U2F
8695	Verify U2F authentication .
8696	Register one or more U2F devices .
8697	Convert unicode strings to unicode strings .
8698	Wrap a function with a given function .
8699	Wrap the class methods in a class .
8700	Check if the filepath matches the given filepath .
8701	Returns the email address for the given email .
8702	Get entry for given entry_tree .
8703	Convert markdown text to reST .
8704	Serve flawless HTTP request .
8705	Records an exception to the host .
8706	Convert url to image
8707	Convert a string to an Image object .
8708	Decorator for validating an image .
8709	Check if image is smaller than size .
8710	Ensure width is larger than width .
8711	Check if height is bigger than height .
8712	Parses the category and returns it .
8713	Parses totals and returns an integer .
8714	Get all items from the XML file .
8715	Store an error .
8716	Parse the items from the database
8717	Parse an item into a dictionary .
8718	Get an instance of the model
8719	Save an item
8720	Download a file from a URL .
8721	Load the config file .
8722	Returns a dictionary of tuples from the CSV file
8723	Set the network access settings .
8724	Runs a command .
8725	Adds one or more files to the working directory .
8726	Add a file to the sandbox .
8727	Get all enrollments for a given course .
8728	Gets all enrollments for the given Scope Id .
8729	Get all enrollments for a section .
8730	Gets all enrollments for a Section Id .
8731	Returns all enrollments for a given regid
8732	Enroll a user .
8733	Get all roles in an account
8734	Get all roles in an Account
8735	Get all roles in an account
8736	Get a single role .
8737	Gets a role by its Id .
8738	Get a single course .
8739	Get a course by ID
8740	Get all courses in an account .
8741	Get all courses in SIS Account
8742	Get all published courses in an Account .
8743	Get all published courses in an Account
8744	Returns all courses associated with a given regid
8745	Create a new course .
8746	Update a SIS course .
8747	Returns the activity object for the given account .
8748	Returns a list of grades for the given account .
8749	Get statistics for a particular term .
8750	Get an activity by sis_id
8751	Returns a list of Assignments for the given SIS course ID
8752	Returns a list of student summaries corresponding to the given course_id
8753	Returns the student activity for the given SIS user_id
8754	Returns the student messages for the given user_id
8755	Get external tools in an account
8756	Get external tools in a course .
8757	Create external tool .
8758	Update an external tool .
8759	Delete an external tool .
8760	Check required parameters .
8761	Retrieves a user .
8762	Returns a list of users for the given course .
8763	Get all users for a particular course
8764	Create a user .
8765	Get the loggedins for a user .
8766	Updates a user login .
8767	Extract next page from response .
8768	Get URL for a resource .
8769	Get the full resource of a resource .
8770	Make a GET request to the API
8771	Generic PUT operation
8772	POST a resource
8773	Generic DELETE operation .
8774	Returns a list of Canvas admins .
8775	Create an admin .
8776	Create an admin by ID .
8777	Deletes an admin .
8778	Deletes an admin by ID .
8779	Create a new grading standard for a given course .
8780	Returns a single section .
8781	Get a Section by ID
8782	Get all sections in a course .
8783	Returns all sections in a course
8784	Get all sections in a course .
8785	Gets all sections in a course .
8786	Creates a new section .
8787	Update a section .
8788	Returns a list of Quizzes .
8789	Get a single account .
8790	Returns a list of all sub accounts of the specified account .
8791	Update an account .
8792	Update the SIS ID for the given account .
8793	Returns a user sssettings object .
8794	Update the ssoos settings .
8795	Retrieves a term by its ID
8796	Import a string from a CSV file
8797	Import a directory
8798	Returns the status of a given SIS import .
8799	Build the zip archive .
8800	Returns a list of assignments for the given course .
8801	Update an assignment .
8802	Returns a list of available report types .
8803	Get reports by type .
8804	Create a report .
8805	Creates a new course report .
8806	Creates a new SSIS report
8807	Creates a report of unused courses .
8808	Get data from a single report .
8809	Get report status .
8810	Deletes a report .
8811	move detection to images
8812	Flip detection of detected detection .
8813	Return a copy of the object .
8814	Get the configuration from the inplace settings .
8815	Return the empty value for edit_value .
8816	Parses the args and returns a dictionary of keyword arguments .
8817	Create new metrics from the registry .
8818	Set up aiohttp connection .
8819	Configure the registry .
8820	Create a new dictionary of metrics .
8821	Get a metric by name .
8822	Renders the home page .
8823	Handle requests .
8824	Go to Wolfram .
8825	Fix HTTPMessage .
8826	Make a query to the Wolfram API .
8827	Return information about the pod and warnings .
8828	Iterate over the results of this job .
8829	Encode data as a request .
8830	Make a call to the API
8831	Send GET request .
8832	Send DELETE request .
8833	Make PUT request
8834	Make a POST request
8835	Process a query .
8836	Groups sentences into groups .
8837	Disambiguate PDF .
8838	Disambiguate a query .
8839	Segments text .
8840	Get language .
8841	Retrieves a concept by its id
8842	Compute the feature map
8843	Return the accuracy score for the given features .
8844	Fit the MDR to the MDR grid .
8845	Perform predictions on a set of features
8846	Return the accuracy score for a given set of features .
8847	Fit the CMDR to the model .
8848	Transform features to labels
8849	Compute the score between features and targets .
8850	Perform MDR computation .
8851	Yield n - dimensional n - way models .
8852	Plots grid of MDRs
8853	Return the configuration values for a given application .
8854	Get the value of a configuration key .
8855	Creates a vector from an iterable of members .
8856	Create vector vectors .
8857	Evaluate a file .
8858	Compile the given stream into a Python module .
8859	Evaluate a string .
8860	Bootstrap repl module .
8861	Run Sass code .
8862	Create a multi - function for dispatch functions .
8863	Add a method to a map .
8864	Add a new method to the MultiFunction .
8865	Get a method by key .
8866	Remove a method from a map .
8867	Remove a method by key .
8868	Check if v is a macro .
8869	Find the location of a line from a reader .
8870	Decorator to wrap a function with loc .
8871	Check that the node is not recursively .
8872	Assert that the node is recursively .
8873	Resolve a bare symbol .
8874	Resolve a fully qualified variable form .
8875	Parse the AST .
8876	Whether or not the named variable should be used .
8877	Put a new symbol into the symbol table .
8878	Apply lrepr to each item .
8879	Return a string representation of an iterable .
8880	Returns a string representation of an object .
8881	Retrieves a repr of an object .
8882	Ensure that the environment variables are missing .
8883	Compile the given form .
8884	Compile Python module into an AST .
8885	Compile a list of forms .
8886	Compile Python code into a module .
8887	Get the sequence from s .
8888	Makes a string from a string .
8889	Removes underscores from a string .
8890	Create a Fraction instance .
8891	Create a default stream handler .
8892	Return a mapping from kvs .
8893	Split a collection into n elements .
8894	Decorator to wrap a function with meta data .
8895	Read a namespace .
8896	Apply a function f to a collection .
8897	Read a list .
8898	Read a vector .
8899	Read a set .
8900	Read a map literal .
8901	Read a string .
8902	Read a symbol from the context .
8903	Read a keyword .
8904	Read meta and return an object .
8905	Read a function .
8906	Read a quoted quote .
8907	Expand a syntax quote into an iterable .
8908	Process syntax quotes .
8909	Read syntax quotes .
8910	Read a unquoted string .
8911	Read a Deref form .
8912	Read a character .
8913	Read a regular expression .
8914	Read a reader macro .
8915	Return the next comment .
8916	Read the next token .
8917	Generator that yields expressions from a stream .
8918	Read text from a string .
8919	Read a file .
8920	Update current location .
8921	Mark the pushback .
8922	Reads the next token from the stream .
8923	Generate the bytecode for the given code .
8924	Get the base code for the given cache data .
8925	Return the path to a cache file .
8926	Installs the import hook .
8927	Find and return a module spec .
8928	Execute a cached version of a cached file .
8929	Executes a Basilisp module .
8930	Set up the namespace for the given module .
8931	Build a symbol object .
8932	Completes the given text .
8933	Get or create a PMap .
8934	Creates a new keyword .
8935	Chain the source and nodes of a PyAST stream .
8936	Load an attribute from a string .
8937	Decorator to return a simplified AST node .
8938	Takes a collection of tokens and a sequence of nodes and returns a single AST stream .
8939	Adds location and location to the py AST .
8940	Decorator to wrap the AST node with the current location and column .
8941	Decorator to wrap a function with ast . py
8942	Check if v is dynamic .
8943	Return True if v is redef .
8944	Convert an expression to a statement .
8945	Convert a function into an AST .
8946	Determine whether a defname should be declared .
8947	Convert a DO node into an AST .
8948	Generate a name from a string .
8949	Convert function args to python AST .
8950	Converts a single node to an AST node .
8951	Convert a multi -arity function to an AST node .
8952	Convert a FnNode to a PyQ AST .
8953	Convert the if statement into an AST .
8954	Convert an IF node into an AST .
8955	Convert an Invoke node to a PyInvoke AST .
8956	Convert a QUOTE node to a Python AST .
8957	Convert a recur into an AST node .
8958	Convert a node to a Python AST .
8959	Convert SETBANG node to python AST .
8960	Convert an ast node to an AST node .
8961	Convert a Python node to a PyB AST .
8962	Convert a local node to an AST node .
8963	Converts a variable to an AST node .
8964	Convert a variable AST node to an AST .
8965	Convert an interop property to an ast node .
8966	Convert a node to an AST node .
8967	Convert a node into a PyHostForm .
8968	Convert constant value to Python AST .
8969	Convert a collection literal literal to a Python AST .
8970	Generate Py AST node .
8971	Iterate over base classes .
8972	Create an ast . ImportFrom object
8973	Create an ast variable .
8974	Create a set from an iterable .
8975	Return a set of members .
8976	Visit an exception node .
8977	If node is constant return value .
8978	Return a copy of the function def .
8979	Visit a While node .
8980	Return a new AST node .
8981	Return a new module type .
8982	Returns the first sequence or None .
8983	Return the rest of the given object .
8984	Get the last nth value from collection .
8985	Return the next nth element in the collection .
8986	Return True if o is a sequence or seq .
8987	Convert an object to a sequence .
8988	Concatenate multiple sequences .
8989	Return an association .
8990	Return conjugate conjugate .
8991	Partially partial function .
8992	Dereferenced object .
8993	Compare two values .
8994	Divide x and y .
8995	Sort a collection .
8996	Returns True if k is in the collection .
8997	Get a value from a mapping .
8998	Convert an object into a Lispatch .
8999	Convert object to python object .
9000	Return a string representation of an object .
9001	Collect arguments from Python variadic arguments .
9002	Decorator for trampoline .
9003	Decorator to set attributes
9004	Decorator to wrap a function with meta data
9005	Mark a function as a function .
9006	Resolve alias .
9007	Resolve a variable s alias .
9008	Add a python variable to the current namespace .
9009	Bootstrap a dynamic namespace .
9010	Internally intern a variable .
9011	Internally intern a variable .
9012	Find the first occurrence of namespace with name_symbol .
9013	Finds the variable in symbol_symbol .
9014	Find a variable in the context of the given namespace .
9015	Add a default import .
9016	Add an alias .
9017	Internally intern a variable
9018	Internally add a new_var to a map .
9019	Finds a reference to a variable .
9020	Add an import .
9021	Get an import for a symbol .
9022	Add a reference to the graph .
9023	Get the reference for a given symbol .
9024	Assign references to other symbols .
9025	Set all references to another namespace .
9026	Get or create a new namespace from the cache .
9027	Get a named namespace .
9028	Get the named namespace .
9029	Remove a namespace .
9030	Return a completion matcher for the given text .
9031	Completes aliases .
9032	Completes the imports of the module .
9033	Returns a list of interned internations .
9034	Return a complete list of references for the given value .
9035	Autocomplete aliases .
9036	Returns tuple of arguments .
9037	List members .
9038	Return a list .
9039	Returns a new representation of a scaler .
9040	Decrypt a JWE token .
9041	Encrypt a JSON object .
9042	Delete a key from the cache .
9043	Convert this selector to a Python tuple .
9044	Close the stream .
9045	Parse a fiql string into an expression .
9046	Serialize a NDB model to a file - like object .
9047	Decode an object into JSON .
9048	Decode date string .
9049	Decode the value .
9050	Default encoder .
9051	Validate release version string
9052	Generate changelog .
9053	Return a list of strongly connected components .
9054	Performs a topological sort of a graph .
9055	Set parent expression
9056	Returns the parent expression
9057	Adds an operator to the current solver .
9058	Adds an element to the current scope .
9059	Create an AND operator .
9060	Creates an OR operation with the given elements .
9061	Log a function .
9062	Parse an incomming message .
9063	Convert tuple tuples to OrderedDict
9064	Given a list of messages return a single message .
9065	Prepare and send the given commands .
9066	flush incoming messages
9067	Enable or disable a slide
9068	Save template to file .
9069	Load template from file .
9070	Get information about the device .
9071	Read a file .
9072	Locate the package json file .
9073	Parse the package json file .
9074	Raise an exception if there is an error
9075	Validate the response .
9076	Hook for homogenization of two wave vectors .
9077	Interpolate the dependent wave vector .
9078	Find the indices of the indep vector in a wave .
9079	Verify that two wavelengths are compatible .
9080	Load the systemjs manifest
9081	Create a tuple of named parameter names for a module .
9082	Run a trace of the given module .
9083	Shorten a URL .
9084	Expand short url
9085	Get URL stats for a short URL .
9086	Query Asterisk Manager API .
9087	Get DB stats .
9088	Run the command .
9089	Execute a command on the terminal .
9090	Log a message .
9091	Caches a cached property .
9092	Yield chunks of an iterable .
9093	Decorator to yield chunks of a function .
9094	Flatten an iterable .
9095	Prints a signal to stderr .
9096	Print table .
9097	Create a dummy dummy type
9098	Convert string to integer .
9099	Manage LSLS API .
9100	Trace the module .
9101	Generate links in requirements file
9102	Makes a common entry for a list of Python versions .
9103	Makes a comma - separated list of Python versions .
9104	Convert a string representation of the comparison operator to words .
9105	Generate noise data
9106	Calculate parsers for chunk data .
9107	Write a touchstone file .
9108	Return a bounding waveform bound to a given interval .
9109	Build the string representation of the units .
9110	Return a copy of the wave .
9111	Calculate the running area of the trajectory
9112	Validate the minimum and indep_min and indep_max .
9113	Return the cosine of the wave .
9114	Return the angle of the wave .
9115	Inverse of the wave .
9116	Return the angle of the wave .
9117	Return the average waveform .
9118	Compute the frequency of the wave .
9119	Return the derivative of a waveform .
9120	Compute the imaginary part of a waveform .
9121	Compute the FFT
9122	Compute the Fourier transform of a waveform .
9123	Compute the real Fourier transform of a waveform .
9124	Compute the DFT for a given waveform .
9125	Compute the imaginary part of the input waveform .
9126	Compute the FFT of a waveform .
9127	Compute the phase of the input waveform .
9128	Compute the real vector of the input waveform .
9129	Compute the integral of a waveform .
9130	Calculate the group delay
9131	Logarithm of the wave .
9132	Calculate the coverage of a waveform .
9133	Return the nintegral of a waveform .
9134	Return the maximum amplitude of a waveform .
9135	Return the minimum value of a waveform .
9136	Return the phase of the wave .
9137	Round a wave wave .
9138	Squared square root of a waveform .
9139	Return a new waveform .
9140	Return the complex wave .
9141	Return a copy of the wave .
9142	Return a copy of the wave .
9143	Returns the value of the w value at the given index .
9144	Searches for JSPM packages .
9145	Get the short description from a long description .
9146	Recursive function to build an expression .
9147	Return the next delimiter .
9148	Given an expression return a list of function names and a list of functions .
9149	Pair the list of delimiters and return a pair of new delimiter pairs .
9150	Parse an expression .
9151	Remove consecutive delimiterers from an expression .
9152	Split text by separator .
9153	Convert a number into an integer .
9154	Convert a number to scientific notation .
9155	Converts a number to an engineering notation .
9156	Convert number to float
9157	Returns the Peng fraction of a number
9158	Calculate Pengant number .
9159	Convert power number to power
9160	Return the math equivalent of the given suffix .
9161	Remove extra delimiter from expression
9162	String representation of number .
9163	Convert number to scientific notation .
9164	Find the sourcemap comment of a file .
9165	Checks if the app extension needs an extension .
9166	Bundle the application
9167	Return trace for given app .
9168	Check if the given dep_tree matches the given tree .
9169	Formats a hex dump of an argument .
9170	Parse a docstring and return a dictionary of parameters .
9171	Return a list of valid function identifiers .
9172	Convert an import statement into a context object .
9173	Split a line into parts .
9174	Ensures that the init_commands are available .
9175	Return help text for builtin functions .
9176	Finds a function by name
9177	List the functions in the given context .
9178	Check if arg is a flag .
9179	Process command line arguments .
9180	Extract the next argument value from the given string .
9181	Invoke a single function from a line
9182	Invoke the given line .
9183	Invoke the function
9184	Parse a docstring and return the name and description
9185	Parse a return statement .
9186	Classify section name .
9187	Classify a line
9188	Join paragraphs .
9189	Wrap the main docstring to a string .
9190	Convert value to a type .
9191	Convert binary value to a given type .
9192	Returns the size of the given type .
9193	Format the value to the given type .
9194	Validate that the type object is valid .
9195	Check if the given type is known .
9196	Parse a complex type name .
9197	Instantiates the given base type .
9198	Return a known type for the given type .
9199	Checks if the format is a known format
9200	Injects a type into the registry .
9201	Loads a type module into the registry .
9202	Checks if spec is covered by the spec .
9203	Add a new parameter .
9204	Set a typed return value .
9205	Define a custom return value
9206	Match the short - name of a short - name .
9207	Get the type of a parameter .
9208	Return the signature of the function .
9209	Format the return value .
9210	Convert a positional argument to a value .
9211	Check the spec for validity .
9212	Convert an argument to a specific type .
9213	Format the error message .
9214	Convert exception to a dictionary .
9215	Check if arguments are valid .
9216	Parse a list of validator validators .
9217	Find all contexts in a container .
9218	Return a context object from a module .
9219	Get the help text of a function .
9220	Decorator to add a parameter to a function .
9221	Annotate the return value of a function .
9222	Decorator to add a type to a function .
9223	A decorator that adds a context to a class .
9224	Annotate decorated function .
9225	Decorator to mark the decorated function as decorated .
9226	Get a short description of a function .
9227	Load all tasks
9228	Install crontab .
9229	Print all tasks in the registry
9230	Uninstall crontab .
9231	Create a new schema .
9232	Load project config files
9233	Save project config to yaml file
9234	Define a singleton instance of carrier .
9235	Returns a dictionary with all the dependent projects in this project .
9236	Decorator for project_command
9237	Initialize the project .
9238	Set a key to value .
9239	Set an attribute on this object .
9240	Create a new length from an iterable .
9241	Returns a setter for the given state .
9242	Set a set of values to be set .
9243	Apply a function to the state of the state .
9244	Returns a function that collects n arguments .
9245	Decorator for functions .
9246	Apply a function to a state .
9247	View the fold in the given state .
9248	Convert this Fold to a list .
9249	Apply a function to the state .
9250	Set the value to the given value .
9251	Iterate over the given iterable .
9252	Get optics kind .
9253	Main entry point .
9254	Return a copy of this vector .
9255	Handles the input
9256	Advance the robots .
9257	End the game .
9258	Prompt the user to move a board .
9259	Play the game .
9260	Make a move on the board .
9261	Return the outcome of the game .
9262	Generate a generator of the potential ws .
9263	Process an item .
9264	Open an S3P spider
9265	Upload a single chunk to S3 .
9266	Create a file - like object
9267	Get the state of a given address .
9268	Gets the current state of an asset .
9269	Get a single block .
9270	Gets the block hash for a given block index .
9271	Get the value of a block s fee .
9272	Get the contract state of a contract .
9273	Get a raw raw transaction .
9274	Call get_storage method .
9275	Get the value of a transaction .
9276	Invoke a script .
9277	Invoke a function .
9278	Invoke a script .
9279	Send a raw raw raw transaction .
9280	Validate an address .
9281	Send a JSON - RPC call to the server .
9282	Determine if a string is a hash256 hash .
9283	Return True if the string is a valid hash160 .
9284	Encode parameters into a list of parameters
9285	Decodes the stack result .
9286	Decorator to specify a default value for a function .
9287	Convert an instruction to a timezone .
9288	Apply the given datetime to the given datetime .
9289	Render the template .
9290	Render the Barcode .
9291	Calculate the checksum .
9292	Render code .
9293	Connect to the KVS server .
9294	Entry point for S3 .
9295	Downloads a file from S3
9296	Uploads a file to S3
9297	Downsync map file
9298	Show the differences between the specified section .
9299	Parses a value string into a key and value pair .
9300	Set basic credentials .
9301	Set API key .
9302	Get json content from folder
9303	Get all schemas .
9304	Get the schema .
9305	Returns a RefResolver for this schema .
9306	Validate given object .
9307	Get valid examples .
9308	Get invalid examples .
9309	Return the URL for the auth user .
9310	Process the given URL .
9311	Retrieves a new access token .
9312	Get user id .
9313	Returns a list of files in a folder .
9314	Create a folder
9315	Add a comment to an object
9316	Decode an object .
9317	Set the drop target for the given object .
9318	Start drag operation
9319	Sets the default tlw .
9320	Inspect an object
9321	Creates a shell .
9322	Moves font from font
9323	loads a page
9324	Get parameter from tag .
9325	Send the message .
9326	Create a custom tooltip window
9327	handle mouse down event
9328	Mouse event handler
9329	handle resize event
9330	handles key press events
9331	delete selected objects
9332	Duplicate the selected objects
9333	Refresh the snapshot
9334	Calculates the best position of the tooltip
9335	Retrieves the python data for the given item .
9336	Sets the data for the given item .
9337	Find the data at the given start_data .
9338	Deletes an item from the list .
9339	Deletes all items
9340	Remove all values from the database .
9341	set selection
9342	Get string selection
9343	set data for a client
9344	Append a string to the end of a string .
9345	Return a string representation of an object .
9346	Get object by name
9347	Make a deep copy of this object
9348	add child to sizer
9349	Set the parent of this component
9350	Tile background .
9351	Erase background clipping
9352	event handler
9353	Find modules in the specified directory .
9354	Returns a sorted list of column headers
9355	Reset the view .
9356	Update the values of the current table .
9357	Updates the column attrs in the grid .
9358	Sorts a column .
9359	Clear the grid .
9360	Creates a new combo box
9361	Begin editing a row .
9362	Ends the edit selection
9363	Checks if a key is accepted by the user .
9364	Handles key events
9365	Decorator for registering a form type .
9366	Enable a menu item .
9367	Checks if the menu item is enabled .
9368	Enable the top menu .
9369	Check if top menu is enabled
9370	Removes an item from the menu .
9371	Called when the form submit button is clicked .
9372	Sets the tag of an object .
9373	Parse html table .
9374	Get a document documenter for the given object .
9375	Mangle a signature from a signature
9376	Import object by name .
9377	Create an autolink role .
9378	Display an alert dialog
9379	Prompt the user to enter text .
9380	Prompts the user to select a font
9381	Display a selection dialog .
9382	Display a directory dialog .
9383	Returns the search dialog
9384	Sets the item s children
9385	set the icon
9386	show the window
9387	Parse a resource file .
9388	Save rsrc to filename
9389	build a windows window
9390	Build a component from a dictionary .
9391	Connect component to the controller
9392	Map name to correct name
9393	set the data
9394	Look for documentation in a docstring .
9395	load an application
9396	Inspects an object
9397	Activate the selected item
9398	update the new name
9399	show context menu
9400	Returns the thumbnail representation of the image .
9401	Decorator to add an expression filter .
9402	Decorator to add a node filter .
9403	Assert that the path matches the given query .
9404	Assert that the given path matches the given path .
9405	Assert that the current path has been met .
9406	Assert that path has no current path .
9407	Select an option .
9408	Apply the filter to the given value .
9409	Get webdriver .
9410	Return an xpath representation of the expression .
9411	Returns True if the node matches the filters
9412	Switch to current frame .
9413	Accept an alert
9414	Open confirm dialog
9415	Dis dismiss confirmation dialog .
9416	Prompt the user to enter a prompt .
9417	Disassign a prompt .
9418	Save body as HTML .
9419	Save a screenshot to a PNG file .
9420	Raise server error if any .
9421	Check if this node matches the filter .
9422	Ensures that a field is checked .
9423	Check if a field has no field .
9424	Ensures that a field is checked .
9425	Check if a field is not unchecked .
9426	Assert that the query matches the query .
9427	Assert that the query matches the query .
9428	Assert that the given title matches the given query .
9429	Assert that the object has no title
9430	Assert that a title has a given title .
9431	Assert that the given title has no title .
9432	Find all matching results for this selector .
9433	Finds first occurrence matching criteria .
9434	Return the inner content of the given node .
9435	Return the inner text of the given node .
9436	Normalize query string .
9437	Decorator to create a setter for a property .
9438	Decorator to synchronize the session .
9439	Determine if an error should be caught .
9440	Compares the count against the query options .
9441	Checks if there is at least one result in the cache .
9442	Check if any of the options are None .
9443	Create a failure message .
9444	Returns true if the count matches the given criteria .
9445	Normalize text .
9446	Normalize whitespace .
9447	Escape text .
9448	Check if the current session matches the given session .
9449	Resize the window .
9450	Start the WSGI application .
9451	Decorator for setting a property .
9452	Declare an instance method .
9453	Declare a class method .
9454	Return the traceback of the call .
9455	Returns the source code for an object .
9456	Returns a logger for the given instance .
9457	Set logger .
9458	Call the API
9459	List of available channels .
9460	List of users .
9461	Make a message
9462	Translate Slack message .
9463	Send a Slack message
9464	Read a channel .
9465	Run Slack API
9466	Start the Slack client .
9467	Returns the difference between two dictionaries .
9468	Colorize a message .
9469	Triggered when the task starts .
9470	Invoked by the runner .
9471	Prints a summary of the given stats
9472	Called when a task is skipped .
9473	Convert a prefix to an IPv4 address .
9474	Decorator to check if value is empty .
9475	Add a model
9476	Get values as a dictionary .
9477	Load data from a dictionary .
9478	Convert the object to a dictionary .
9479	Parse configuration attributes .
9480	Parse the state .
9481	Translate configuration into a string
9482	Load all available filters
9483	Find the path to a YANG file .
9484	Convert a model to a dictionary .
9485	Get the difference between two strings .
9486	Perform HTTP POST request .
9487	Generates the authorization code for the user .
9488	Gets the OAuth token
9489	Get query parameters from a URL .
9490	Remove query parameters from a URL .
9491	Build a URL .
9492	Handle exception .
9493	Make a response object .
9494	Makes a redirect response
9495	Makes a JSON response
9496	Get authorization code .
9497	Refresh a refresh token .
9498	Get a new access token
9499	Get authorization code .
9500	Handle a GET request from a POST request .
9501	Get the authorization object for this request .
9502	Open the I2C device .
9503	Read a single byte from the bus .
9504	Read a number of bytes from the device .
9505	Read byte from bus .
9506	Write bytes to the bus .
9507	Write byte data to the bus .
9508	Write data to the bus .
9509	Get CDN URL .
9510	Creates a copy of this file
9511	Create a local copy of the artifact .
9512	Create a remote copy .
9513	Construct an Effect from a file .
9514	Upload a file - like object .
9515	Upload a file from a URL .
9516	Upload a file from a URL .
9517	Returns a list of URLs for the CDN .
9518	Construct a Group from a dict .
9519	Create a new group .
9520	Request a list of UUIDs .
9521	An iterator over FileUids .
9522	Generic function for listing items .
9523	Generate a bar chart .
9524	Perform an upload request .
9525	Gets the home mode status .
9526	List all cameras .
9527	Retrieve camera information .
9528	Retrieve information about a specific camera .
9529	Disable a camera .
9530	Gets a motion setting .
9531	Gets the MDP parameter for a given camera .
9532	Update the camera s state .
9533	Return True if li is the last item in the list .
9534	Iterate through a list and yield a list of nodes .
9535	Get the value of the lxml option .
9536	Get the vMerge element from the xml node
9537	Get the number of grid span span .
9538	get td at index
9539	Return True if style is False otherwise .
9540	Return True if rpr is bold False otherwise .
9541	Return True if rpr is italic
9542	Return True if rpr is under rpr
9543	Check if pStyle is a title
9544	Yield the data for a text run .
9545	Get information about a relationship .
9546	Get the data from a zip file .
9547	Determine the type of a list .
9548	Builds an XML tree .
9549	Build a tracer element .
9550	Build an XML table .
9551	Get the content of a tag .
9552	Remove all elements from the tree
9553	Find a dataset and return it
9554	Load MNIST dataset .
9555	Load cifar10 data .
9556	Plot a list of images .
9557	Plot layers of weights .
9558	Plot grayscale filters
9559	Generate samples from a list of arrays .
9560	Convert a string to a list of strings .
9561	Create batches of classifier batches .
9562	Predict sequence of labels .
9563	Add conv layer weights .
9564	Encodes the input to the network .
9565	Convert an input vector into a network .
9566	Find output name for given layer .
9567	Return the score of the autoencoder .
9568	Return the predicted output .
9569	Return the predicted probability for each input layer .
9570	Predict the logitit .
9571	Compute the score of the predictive distribution .
9572	Create a batch of features .
9573	Generate batches of target classes .
9574	Load the network from a file .
9575	Generate a random matrix .
9576	Generate a random vector .
9577	Find outputs matching the given patterns .
9578	Get parameters matching the given patterns .
9579	Create a graph from kwargs .
9580	A list of the variables associated with this model .
9581	Compute accuracy .
9582	Perform aano scan .
9583	Build an Activation object .
9584	Generate a n - dimensional reservoir .
9585	Sets loss
9586	Perform an iteration of the algorithm .
9587	Run all monitors .
9588	Generate a hash of layers .
9589	Build the graph for the graph .
9590	List of input layers .
9591	Returns the names of all variables in the inputs .
9592	Find layer with param .
9593	Compute the feed - forward function .
9594	Return the predicted output .
9595	Compute the score of the predictive distribution .
9596	Saves the model to a file .
9597	Load a pickled model from a pickle file .
9598	Calculate the loss
9599	Build the graph .
9600	The output size of the layer .
9601	Connect the given inputs and outputs .
9602	Bind the model to the given graph .
9603	Resolve input shapes .
9604	Resolve output shapes .
9605	Log the current layer .
9606	Log the total number of parameters .
9607	Format string .
9608	Resolve layer name to output_shape .
9609	Find a parameter by its name .
9610	Add a bias vector .
9611	Returns the spec for the model .
9612	Calculate the log - likelihood of a band .
9613	Calculate the loggaborator
9614	Add a Tier
9615	Remove a tier by name .
9616	Get tier by name .
9617	Generate an EAF .
9618	Add a point to the tier
9619	Add an interval to the tier
9620	Remove interval from the tier .
9621	Remove a point from the tier .
9622	Get intervals .
9623	Returns a list of all intervals
9624	Indent an element .
9625	Add an annotation to the tier .
9626	Add a value to the controlled vocabulary .
9627	Add a description to the controlled vocabulary .
9628	Add an external reference .
9629	Add a language language .
9630	Add a new lexicon reference
9631	Add a linguistic type .
9632	Add a media file .
9633	Add a local locale .
9634	Add a secondary file descriptor .
9635	Add a tier to the list
9636	Remove all time slots .
9637	Extract annotation data from EAF
9638	Generate an annotation id
9639	Generate a unique ID
9640	Get child tiers of id_tier .
9641	Return a tuple containing the full time interval and max values .
9642	Returns the reference annotation data for the given time interval .
9643	Returns the reference annotation data for the given time zone .
9644	Returns a list of tier ids for the given tier .
9645	Merge tiers into the graph .
9646	Remove all annotations from a tier
9647	Remove a description of a controlled variable .
9648	Remove a license .
9649	Remove all linked media files .
9650	Remove properties that match a key .
9651	Remove the edge annotation for the given tier .
9652	Removes secondary linked file descriptors .
9653	Remove a tier by id
9654	Remove a list of tiers
9655	Rename a tier .
9656	Shift annotations by time
9657	Entry point for the command line tool .
9658	Generate a debug message .
9659	Return the base level of a string .
9660	Get embedding levels .
9661	Extract explicit embedding and override overrides .
9662	Calculate level start and end levels .
9663	Resolve weak type references to weak type .
9664	Resolve neutral types .
9665	Reverse contiguous sequence .
9666	Reverse the resolved levels .
9667	Process current file
9668	Convert lines from PySide2 to PySide
9669	Add an attribute to an object .
9670	Entry point for the CLI .
9671	Maintain backwards compatibility .
9672	Show the current GUI .
9673	Discovers the currently registered gui
9674	Remove all known hosts .
9675	Add entry to file menu .
9676	Temporarily restore the current selection .
9677	Temporarily restore current time .
9678	Display a messagebox with no registered GUI .
9679	Initialize the types .
9680	Get cumulative data .
9681	Get the values for a single axis
9682	Draw a constant line
9683	Load transform parameters .
9684	Reverse a mapping .
9685	Generate a range of floats .
9686	Add data to the data store .
9687	Generate the XML definitions .
9688	Add a conf . conf
9689	Burn the visualization .
9690	Calculates the left margin .
9691	Calculate right margin .
9692	Calculate top margin
9693	Add a popup to the foreground .
9694	Calculate bottom margin
9695	Draw the graph
9696	Make a data point on the foreground .
9697	Draw x - y labels on the step
9698	Draw y labels
9699	Draw x - y guide lines .
9700	Draw y guide lines .
9701	Draw all title titles
9702	Render inline styles
9703	Create SVG element .
9704	Return a list of all resource sheets .
9705	Run a bot .
9706	Send data to the client .
9707	Connect to the server .
9708	Respond to a message
9709	Dispatch regex patterns .
9710	Registers a new nick .
9711	Handle a ping .
9712	Called when the server is registered .
9713	Main event loop .
9714	Register a new node .
9715	Main task loop .
9716	Decorator to require a boss .
9717	Return a list of regex patterns for the worker .
9718	Called when a connection is successful .
9719	Execute a command .
9720	add a worker
9721	Sends an email notification .
9722	Send a password reset notification
9723	Validates the password strength .
9724	Verify that token is valid
9725	Remove the user s avatar .
9726	Allow POST request .
9727	Get a concurrent executor .
9728	Get an API client .
9729	Return the TLS client .
9730	Returns the name of the service .
9731	Execute a Docker API call
9732	Execute a docker docker docker container .
9733	Check the status of the docker service .
9734	Stop the Docker service .
9735	Filter unique email address .
9736	Updates the password .
9737	Update password with new password
9738	Validate email address .
9739	Create a new token .
9740	Deletes the token .
9741	If the user is not already logged in .
9742	Handle POST request .
9743	Update the expiry date .
9744	Returns context context for password reset .
9745	Send an email notification .
9746	Handler for password reset email .
9747	Handle email notification email .
9748	Authenticate request .
9749	Check if the token has expired .
9750	Show bokeh plot .
9751	Process bokeh plots
9752	Builds custom javascript callback
9753	Returns a widget with the given parameter name .
9754	Render a function as a plot
9755	Creates a text input widget .
9756	Takes a list of objects and returns a list of names .
9757	Get the owner of a method .
9758	Assigns the HTTP auth values .
9759	Ping the server .
9760	Retrieves information about the cluster .
9761	Retrieves the health of the cluster .
9762	Convert bytes to human readable string
9763	Calculate total load of the system .
9764	Get memory size .
9765	Get the total network .
9766	List of volumes .
9767	Get a volume by id
9768	Get the volume of a volume
9769	Returns the volume used by the volume
9770	Volume of disk .
9771	Returns the maximum disk temperature .
9772	Get a disk by id .
9773	Login to the system
9774	Execute a GET request
9775	Execute GET request
9776	Update entry .
9777	Get information about the system
9778	Get the storage object
9779	Create a context for a Hipchat request .
9780	Get the tenant token
9781	Builds the attributes for this widget .
9782	Set INSTALLED_APPS to INSTALLED_APPS .
9783	Remove apps from INSTALLED_APPS .
9784	Returns a dictionary of all global settings .
9785	Handles GET requests .
9786	Get a value from the config
9787	Change a configuration value
9788	Migrate OAuth2util config file
9789	Start the webserver .
9790	Wait for a response to be ready .
9791	Get access information from the Reddit URL .
9792	Check that the config key is present
9793	Set access token .
9794	Refresh the access token .
9795	Creates a manifest table .
9796	Split a full path into bucket and prefix .
9797	Determine if a bucket is a GLAC .
9798	Extract run id from filename .
9799	Remove None values from a dictionary .
9800	Add run_id to the manifest .
9801	Check if a run is in the manifest .
9802	Extract the schema from a URI .
9803	Remove the schema from the schema
9804	Convert contexts into a list of tuples .
9805	Parse unstructured event .
9806	Transform the given line into JSON .
9807	Returns a json representation of the event .
9808	Extracts the name of a response from a response .
9809	Format a context block .
9810	Prints the context variables
9811	Formats the given SQL string to HTML .
9812	Pretty - print a Django context object .
9813	Pretty - print a dictionary .
9814	Add HTML highlighting .
9815	Format the object .
9816	Serialize the object to a stream .
9817	Get a token from a string .
9818	Get a list of nodes from a string .
9819	Convert LaTeX text to text .
9820	Sets template directory .
9821	Read a tex file .
9822	Convert latex to text .
9823	Convert a string to a Unicode string .
9824	Convert a string to ASCII .
9825	Gets the organization information .
9826	Returns a list of boards .
9827	Returns a list of members for this group .
9828	Updates the organisation .
9829	Remove a member from the organization .
9830	Adds a member to the organization .
9831	Adds a member to the organization .
9832	Gets information about the list of resources .
9833	Adds a new card to this account .
9834	Retrieves information about the label .
9835	Returns a list of all check items in the account .
9836	Update a label by name .
9837	Updates a label .
9838	Get the authorisation URL .
9839	Gets the card information .
9840	Gets a board .
9841	Gets a list of resources .
9842	Get all checklists .
9843	Add a comment .
9844	Add a new attachment .
9845	Creates a new checklist .
9846	Adds a label from a dictionary .
9847	Adds a label from the class .
9848	Adds a member to the group
9849	Retrieves information about the group .
9850	Returns a list of Card objects
9851	Get all organisations
9852	Create a new board .
9853	Decorator for singledispatch methods
9854	Returns information about the board .
9855	Retrieves a list of lists of lists .
9856	Returns a list of labels .
9857	Get a single card .
9858	Get all checklists .
9859	Get an organisation .
9860	Updates the board .
9861	Adds a new list to this organization .
9862	Creates a new label .
9863	Get information about the checklists .
9864	Returns a card object
9865	Returns a list of items for this card
9866	Updates the specified checklist .
9867	Add a check item .
9868	Remove an item .
9869	Updates the name of the checklist .
9870	Updates the checklist
9871	Add authorization parameters to the query params .
9872	Check the response for errors .
9873	Build the url for a given path
9874	Fetch a JSON response .
9875	Create an organisation object .
9876	Create a board object .
9877	Create a label from a dict .
9878	Create a new list .
9879	Create a Card from a dict .
9880	Create a new checklist .
9881	Create a new member from a member_json .
9882	Get an organization
9883	Get a board .
9884	Get a list .
9885	Get a card .
9886	Get a checklist .
9887	Get a user .
9888	Extract the domain from a URL .
9889	Convert text to raw text .
9890	Convert text to raw text .
9891	Convert text to text pairs .
9892	Set the password for a service .
9893	Split text with given locations .
9894	Mark the given regex as split .
9895	Mark the beginning of a regular expression in text .
9896	Entry point for the command line tool .
9897	Create a cipher object .
9898	Get AES mode
9899	The priority of the feature .
9900	Check the encryption scheme .
9901	Called when a publisher is received .
9902	Make a random integer .
9903	Synchronously connect to MQTT .
9904	Handle CONNACK packets .
9905	Encode a string as a binary string
9906	Decode string to bytes
9907	Encodes a 16 - bit integer into a byte string .
9908	Encodes a length value .
9909	Decode length .
9910	Encode the packet .
9911	Encode this message into a binary string .
9912	Decode the packet .
9913	Encode the result .
9914	Decode the packet .
9915	Decode the message from the packet .
9916	Encode the message .
9917	Encode the message as a binary string .
9918	Decode the message from the packet
9919	Encode the message header .
9920	Encode the message payload
9921	Decode the message from the packet .
9922	Decode the packet .
9923	Get the URL for the vk API .
9924	Make a request to the API
9925	Refresh the list of blocks .
9926	Format data according to the analyzer .
9927	Fit the input data
9928	Compute k - means clustering .
9929	Fit mean shift to data .
9930	Compute the classifier .
9931	Predict class based on input data .
9932	Returns a map of cluster clusters
9933	Sort clusters according to sort_by .
9934	Convert datetime to date format
9935	Get the total number of points in a dictionary .
9936	Get the total time span spanning all times .
9937	Convert a list of values to units .
9938	Return a pretty - printed element .
9939	Convert a string to a numpy ndemass file .
9940	Convert chemical name to massname
9941	Collate all files in a given directory .
9942	Enumerate a boolean array .
9943	Convert a tuple of tuples to a boolean array .
9944	Fast smoothing function .
9945	Compute the gradients of an array .
9946	Finds all elements in x and y .
9947	Perform mean shift clustering .
9948	Run k - means clustering .
9949	Perform clustering on data .
9950	Returns a list of all defined SRMs in the file
9951	Read the configuration file
9952	Read the latools config file and return the config .
9953	Print all LATools configurations
9954	Copy the SRM table from configuration file
9955	Create a configuration file .
9956	Change the default configuration .
9957	Remove holes from a filter .
9958	Modify filtilt filtered by threshold .
9959	Perform despiking dispatching .
9960	Make the autorange plot
9961	Determine the time series
9962	Calculate the ratio .
9963	Calibration for calibration
9964	Sample the given analytes .
9965	Returns a dictionary of abbreviations of the ablation .
9966	Filter the focus using the given threshold .
9967	Filter out gradients based on criterion .
9968	calculate correlation coefficient
9969	filter the correlations
9970	Add a new filter .
9971	Get filter params .
9972	Plot histograms of data .
9973	Create a pandas DataFrame with summary statistics .
9974	Loads the reference data .
9975	Lookup one type of type G .
9976	Get all elements in the system .
9977	Calculate the molecular mass from a molecule .
9978	Generate keywords .
9979	Return the top level of the stack .
9980	Reduce the stack from the stack .
9981	Calculate the moving average of the gaussian data .
9982	Gaussian distribution function
9983	Compute standard deviation .
9984	Get a subset of samples .
9985	Piply despise the data .
9986	Calculate background weighted mean .
9987	Calculate background interpolation .
9988	Subtract background correction .
9989	Calculate ratio .
9990	Make a subset of the analysis .
9991	Filter gradients by percentile
9992	Fit a classifier .
9993	Apply a classifier to the dataset .
9994	Filter correlation coefficients .
9995	Apply a filter on each sample .
9996	Remove all samples from the dataset .
9997	Return the filter status
9998	Defragment a filter .
9999	Count the number of removed samples .
10000	Create a histogram of gradients .
10001	Draw the gradient of the focused analysis .
10002	Create histograms for the focused analysis .
10003	Generate trace plots
10004	Generate gradient plots for the analysis .
10005	Generate filter reports .
10006	Generate sample stats
10007	Create a pandas dataframe
10008	Compute the export dataset .
10009	Export traces to a zip file .
10010	Save the analysis log to a directory .
10011	Exports the current analysis dataset .
10012	Split a file into segments based on regex pattern .
10013	Fold a function f over f .
10014	Plot a barplot of components .
10015	Calculate the bayesian scale of a statistic
10016	Calculate the median of a string .
10017	Interpolate a signal over a signal .
10018	Perform exponential decay using exponential decay .
10019	add a new component
10020	Remove one or more parameters .
10021	Clear the configuration .
10022	Remove all unused components
10023	Return the first match key matching fuzzkey
10024	Return a boolean indicating whether the key is runable .
10025	Return a boolean indicating whether the filter exists or not .
10026	Return a string representation of the component
10027	Decorator to log a function
10028	Write a log file
10029	read log file
10030	Decorator for autologin .
10031	Get information about the modem .
10032	Send SMTP message .
10033	Parse a file - like object .
10034	Convert a URL to a bbviewer link .
10035	Generate the thumbnail div for this snippet .
10036	Returns code for the snippet
10037	Returns the code example if any .
10038	The URL for this view .
10039	Return the output file name .
10040	process the notebook
10041	Convert notebook to python code .
10042	Generate data download .
10043	Creates a thumbnail for the image .
10044	Return the description of the header .
10045	Scale an image .
10046	Save the image to the thumbnail .
10047	Copy the thumbnail figure to disk
10048	Returns the URL for the given nbfile .
10049	Get language codes for a field
10050	Returns the default value for the given field
10051	Process thumbnail .
10052	Process the pre_save signal .
10053	Refresh the cache for this image .
10054	Return a list of all thumbnails .
10055	Create a new thumbnail .
10056	Delete a thumbnail .
10057	Create a Thumbnail .
10058	Returns a Thumbnail instance for the given source name .
10059	Delete a thumbnail .
10060	Handle incoming message .
10061	Subscribe to a callback function .
10062	Returns a set of states that are valid
10063	Add a new provider
10064	Send a message to the provider .
10065	Creates a receiver for the given provider
10066	Returns a mapping of receiver names to receivers
10067	Handle incoming message
10068	Handle receiving status messages
10069	Wrapper around jsonex API
10070	Forward an object to the client .
10071	Sign a web3 transaction .
10072	Estimate a gas value at a given address .
10073	Estimate the gas gas for a transaction .
10074	Write bytes to the output stream .
10075	Read a single line from the serial port .
10076	Send a message .
10077	Return the message as a string .
10078	Check if the message has bad headers .
10079	Add an attachment .
10080	Registers given services .
10081	Create a Config from a module .
10082	Registers given resources .
10083	Return the value for the given key .
10084	Exit when the context is closed .
10085	Sets up the object .
10086	Return the nth derivative of a given wavelength
10087	Evaluate the Cauchy equation .
10088	Initialize the API .
10089	Login to Vault .
10090	Returns a list of all the domains for this account .
10091	Gets all elements
10092	Patch an object
10093	Perform a DELETE request .
10094	Check if two paths are the same file ID .
10095	Create a junction directory
10096	Initialize the logger .
10097	Raise an error if message is invalid .
10098	Claims a list of readers .
10099	Determine the normal column header for a vcf .
10100	Claims a set of vcfers and vcfers .
10101	Initialize population stats .
10102	Claim the unclaimed VCF readers .
10103	Split text into individual lines .
10104	Return line terminator .
10105	Return line terminator .
10106	Seek to next line .
10107	Seek to the previous line .
10108	Return the tail of the file .
10109	Return the head of the file .
10110	Follow the file .
10111	Given a list of file readers and a list of VCF readers and return them .
10112	Parse a VCF record .
10113	Returns a dictionary of sample tag values for each sample .
10114	Return set of tags for this variant .
10115	Join the info fields .
10116	Formats the field name field
10117	Return the field for a sample field .
10118	Return a string representation of the sample .
10119	Add a sample tag value .
10120	Add a new filter to the filter .
10121	Returns a list of all available categories .
10122	Generates a product form for the given product type .
10123	Factory for creating staff products .
10124	Add an error message for a product .
10125	Decorator to cache a function .
10126	Returns a form factory for model fields .
10127	List items in cart .
10128	Send an email .
10129	Return an iterator over the OSM data stream .
10130	Parse osmm file .
10131	Iterate over OpenStreetMap notes .
10132	Return True if the user has a condition .
10133	Check if the given user is met .
10134	Returns the remainder of the current user .
10135	Filter queryset by user .
10136	Filter queryset .
10137	Filter items in queryset .
10138	Filter queryset .
10139	Filter user groups based on conditions .
10140	Decorator for functions that modify the cart .
10141	Create a cart for a given user .
10142	Updates the reservation duration .
10143	Applies a voucher to the cart .
10144	Validate the cart .
10145	Fix invalid errors
10146	Recalculate the discounts for this cart .
10147	Adds a discount clause to this product .
10148	Create a report view .
10149	Returns a list of all rows in the table .
10150	Get the form .
10151	Render the data type .
10152	List all reports .
10153	List items sold in invoice .
10154	Summarize all sales .
10155	List payments .
10156	List credit note refunds .
10157	List product status .
10158	Displays a list of discounts on the cart .
10159	Displays all invoice items related to a product item .
10160	List all invoices that have been paid at the time .
10161	Displays credit notes .
10162	List invoices .
10163	List all attendees .
10164	List all available speaker registrations .
10165	Create the invoice manifest
10166	Get the list of available categories for the current user .
10167	Return available credit notes .
10168	Return True if the user is sold out of the ticket .
10169	Redirect registration to the user .
10170	Edit the attendee profile .
10171	Handle a profile form .
10172	List products for a given category .
10173	Handles creation of products .
10174	Handle a voucher form .
10175	Handle the checkout of a user .
10176	Redirect to the invoice for the given access code .
10177	Show an invoice
10178	Handle manual payment form .
10179	Refund the current invoice .
10180	Apply a credit note to an invoice .
10181	Advance staff items .
10182	Ends a customer s account
10183	Send invoice email notification .
10184	View for badges .
10185	Render a badge .
10186	Returns a list of available discounts for the given categories .
10187	Annotate the queryset with the past and post_use field .
10188	Returns a list of available products for a given user .
10189	Apply payment to invoice
10190	Adjust the cancellation fee .
10191	Generate a random access code .
10192	Decorator for lazy evaluation .
10193	Get object from dotted name
10194	Fetch invoice for given cart .
10195	Generates a list of invoice items .
10196	Generate cart items from cart .
10197	Apply credit notes to invoice .
10198	Check if user can view this invoice .
10199	Refresh invoice from database .
10200	Check that the invoice is valid .
10201	Updates the invoice s status
10202	Mark the invoice as paid .
10203	Returns True if invoice matches the cart .
10204	Update the invoice s validity .
10205	Mark the invoice .
10206	Refund the invoice .
10207	Send an email to the invoice .
10208	Update this instance .
10209	Flatten a single field
10210	Print downloads .
10211	Download the given field .
10212	Get project data
10213	Returns a list of processor objects
10214	Print the inputs for a given processor .
10215	Rundata the data
10216	Upload one or more fields to a project .
10217	Upload a file to the server
10218	Download processor results .
10219	Recursively get all subclasses of the given class .
10220	Get repo and project data
10221	Get a list of suggested phenotypes for each variant .
10222	Given a list of variant IDs and a list of Suggestions return a list of Suggestions that are merged with suggested suggestions .
10223	Search for variants matching a coordinate query .
10224	Bulk search for variants in a sequence .
10225	Load an element from the cache .
10226	Remove duplicates from a sequence .
10227	Authenticate with Asana .
10228	Select a single item from a list .
10229	Get the data for an issue .
10230	Moves an issue data from one or more issues .
10231	Get the saved task data .
10232	Get a task by id .
10233	Save data to file
10234	Apply a flag .
10235	Decorator to wrap Asana task tasks .
10236	Flush all items in the queue .
10237	Create a task .
10238	Given a list of tasks return a list of task numbers .
10239	Create a missing task in the given workspace .
10240	Return all data types in this project .
10241	Logs the given log message
10242	initialize the serial port
10243	Set the values of the polling .
10244	Combine the BAM field and return the result .
10245	Render the meter readings since the given timestamp .
10246	Set the context string
10247	Calculates the pf of a product .
10248	set max demand period
10249	Set the meter password .
10250	Unpack a struct struct
10251	Convert the contents of a meter to a string .
10252	returns a serialized dictionary
10253	Calculate the CRC of a meter
10254	Split an Ekm date into a date tuple
10255	Get the buffer buffer buffer
10256	Sets the CT ratio
10257	Assign a schedule
10258	Assign a season to a given day .
10259	set season schedules
10260	Assign holiday date .
10261	Request a set of Schedules
10262	Extract the periodic schedule
10263	This method is used to read the month of a month .
10264	Extracts a 3D field for the given month .
10265	Reads the holiday days and schedules it in milliseconds
10266	Extract holiday date from given holiday_holiday
10267	Read settings .
10268	write a new command
10269	Sends a password to the serial port
10270	Update all observers
10271	Initialize the LCD lookup .
10272	Request one or more B .
10273	Request a single AVA
10274	Request data from the serial port .
10275	Replace fields in field_a and field_b .
10276	Calculates the number of fields in the output .
10277	set LCD command
10278	Set relay delay
10279	Send serial string to serial port .
10280	Sets pulse input to pulse .
10281	set zero resettable kw
10282	Set the LCD DLL .
10283	Iterate over the fields in a schema .
10284	Iterate over a schema in a schema .
10285	Generates paragraphs .
10286	Generate a random text .
10287	Return a string describing the timing information .
10288	Colorize text .
10289	Print text to stream .
10290	Return a summary of the result .
10291	Parse command line arguments .
10292	Sets up the result .
10293	Run the test suite .
10294	Execute the transform .
10295	Transform the node into a testcase definition .
10296	Yield descriptions of the transform .
10297	Transform an example .
10298	Transform the given example body to self . name .
10299	Generate an ast . ast .
10300	Register a path hook .
10301	Convert a byte string to a Python code object .
10302	Applies the argument parser to the arguments parser .
10303	Load a module by name .
10304	Load source from a file .
10305	Discover files in path .
10306	Return a function that checks for files in a location .
10307	Return a function that filters messages from a given location .
10308	Add a command to a file .
10309	Remove a configuration file .
10310	Add a new restart message .
10311	Create a Places object from results .
10312	return a multi - service monitor
10313	Create a procmon service object
10314	Refresh session .
10315	Remove expired nodes .
10316	Remove a node from the cluster .
10317	Get the last update of the node .
10318	Get all node IDs .
10319	Refresh session .
10320	increment the times of all times in seconds
10321	Dereference a node
10322	Split a list into tokens .
10323	Check that path is bad
10324	Merge two messages .
10325	Construct a Query that matches the given value .
10326	Convert a token into a Query .
10327	Return a constant .
10328	Convert a function to a splitted function .
10329	Convert a function to an unsplated function .
10330	Run a process .
10331	Create a multitain service .
10332	Complete the parser with the given parser .
10333	Parse a sequence of literals .
10334	An operator that turns a parser into an optional parser .
10335	Create a new parser with the input parser .
10336	Return a new parser with input parser .
10337	Create a new parser with a separator .
10338	Replace separator with separator .
10339	Check state for states .
10340	Close the task .
10341	Check if the connection is open .
10342	Add a heartbeat to the master
10343	Wrap a service in a multi - service .
10344	Freeze a checkpoint from a checkpoint .
10345	Freeze a trained model .
10346	Save a sub - graph to a file .
10347	Creates a graph from a checkpoint .
10348	Save weights from checkpoint .
10349	Restore from checkpoint .
10350	Parse a tag from the given parser .
10351	Render a tag .
10352	Validate arguments against tag_name .
10353	Get context data .
10354	Parse template tag .
10355	Get the context data .
10356	Convert caffe to tensorflow graph .
10357	Freeze caffe model .
10358	Save a tensorflow graph to Tensorflow .
10359	Makes a list of rows and returns a list of rows .
10360	Yield n - tuples from iterable .
10361	Yield all items from an iterable .
10362	Remove duplicates from an iterable .
10363	Return the next item .
10364	Yield items from an iterable .
10365	Partition a set of items into chunks .
10366	Return True if the item is an iterable .
10367	Context manager to suppress exceptions .
10368	Return items that are duplicated .
10369	Assert that all elements in iterable are ordered .
10370	Swap a partition result .
10371	Partition a dictionary into two lists .
10372	Fetch the first n queues
10373	Reset iterator .
10374	Parses the given token and returns it as a tuple .
10375	Decorator to mark the decorated class as a class .
10376	Return a descendant of the given chain path .
10377	Returns a list of all SQLite records .
10378	Iterate over nested objects .
10379	Determine if an object matches an object .
10380	Parse a selector .
10381	Return a list of validators .
10382	Returns a list of all nodes in the given lhs .
10383	Return all the ancestors of a list of nodes .
10384	Return all siblings of the given rhs .
10385	Process nth child nodes .
10386	Matches the given objects according to validators .
10387	Ping an ICMP port .
10388	Perform a GET request
10389	Expire the cache .
10390	Sets the value of a key .
10391	Get a value from the store .
10392	Check if a key exists in the store .
10393	Checks the chain for a given timestamp .
10394	Deserializes a NistBeaconValue from a JSON string .
10395	Creates a NistValue from an XML string .
10396	Resolve the rendered template .
10397	Apply a function to the logfile .
10398	Get a list of rows from the table .
10399	Validate token .
10400	Returns a cryptography engine
10401	Helper function to validate input token .
10402	Create a token .
10403	Counter32 - 32 - bit float32 .
10404	Calculate a counterclockwise counterclockwise .
10405	Calculate the duration in seconds .
10406	Setup the output module .
10407	Setup the sources
10408	Sends events to the bus .
10409	Start the watchdog .
10410	Parse format .
10411	Parses log line
10412	Ensure that the given field is valid .
10413	Ensure the message is valid .
10414	Verify the token
10415	Get the browser name .
10416	Warning about nonlocal images .
10417	Connect all the receivers
10418	Create a link for a record .
10419	Send a new access request .
10420	Send a confirmation email notification .
10421	Send email notification email notification .
10422	Send a rejected access request .
10423	Send a notification .
10424	Create a secret link
10425	Validate a token .
10426	Revoke this link .
10427	Create a new record .
10428	Get request by receiver .
10429	Confirm the email address .
10430	Accept a message .
10431	Reject this message .
10432	Create a secret link
10433	Generate a SHA512 hash .
10434	Verify that a message is valid .
10435	Checks if the record has access to the access token
10436	Handles access requests .
10437	Confirm an email address .
10438	Get a connection endpoint
10439	Reverse column .
10440	Return a string containing the selected values .
10441	Returns a QuerySet where items are selected .
10442	Get the version of the file .
10443	Set the version of the file
10444	Initialize ssh configuration
10445	Start timer .
10446	Enqueue the service .
10447	List linked links .
10448	Create a connection to the Riemann server
10449	Stop the thread .
10450	Empty the queue .
10451	Called when events are received .
10452	Create a new UDP connection
10453	Create Elasticsearch client
10454	Encode an Event protobuf .
10455	Encode a list of events
10456	Decode a protobuf message .
10457	Sends a sequence of events .
10458	Generate file preview .
10459	Retrieve a file preview .
10460	Sends a message to r_q_dict
10461	The message loop .
10462	Checks if the current time elapsed .
10463	Respond to the SASL protocol .
10464	Abort the session .
10465	Perform SASL preparation for SASL .
10466	Render the admin footer .
10467	Build payment parameters .
10468	Build register payment parameters .
10469	Creates payment with given amount
10470	Get a short version string .
10471	Constructs the layout
10472	Called when the plugin is setup .
10473	Configures shortcuts .
10474	Called when the item is activated .
10475	Called when the item is selected .
10476	Update the location of the item
10477	Finalize options .
10478	Execute the resource .
10479	Run clean command .
10480	Fetch all children .
10481	Refreshes the tree .
10482	Returns the icon at the given index
10483	Run a command and return its child process .
10484	Get the maximum file descriptor .
10485	Closes a file descriptor .
10486	Close open file descriptors .
10487	Redirect stream to target .
10488	Set the attributes of the form widget .
10489	Imports an application module .
10490	Import project modules from INSTALLED_APPS .
10491	Process an include node .
10492	Return the URL for a gravatar .
10493	Return the URL for a gravatar image .
10494	Validates that the port value is a valid file location
10495	Validate a port URL
10496	Return the absolute path to a template .
10497	List objects in the bucket .
10498	Build a json representation of the workflow .
10499	Execute the GDX API .
10500	Archive the project folder
10501	Recursively create a directory .
10502	List all available files
10503	Restore the project from the current directory
10504	Return an API client .
10505	List files in a folder .
10506	Download a file from the server .
10507	Check if the given path exists .
10508	Get the parent of the given path .
10509	Create a folder in the specified path .
10510	Uploads a local file
10511	Deletes a project
10512	Validate the path .
10513	Return an instance of Client .
10514	Create an instance of Storage .
10515	Get details about an entity .
10516	Set the metadata for an entity .
10517	Get the metadata for an entity .
10518	Update the metadata for an entity .
10519	Deletes the specified metadata for the given entity .
10520	List projects .
10521	Get details about a project .
10522	Create a project .
10523	Delete a project .
10524	Create a folder .
10525	Get details about a folder .
10526	Deletes a folder .
10527	Upload a file to the service .
10528	Copy content of a file .
10529	Download the content of a file .
10530	Get the signed URL for a file .
10531	Emit a record .
10532	Sets the URL to the given service and version .
10533	Set the headers for the response .
10534	Specify the query parameters .
10535	Sets the given exception class .
10536	Return a list of boolean values .
10537	Applies a function to each of the input inputs .
10538	Generate genotype GVCFs for GVCF files .
10539	Run oncotator on VCF
10540	Sort the collection .
10541	Returns a list of timestamps
10542	Load export .
10543	Shift time by time .
10544	Calculate the sum of all values
10545	Run the rfxcom command .
10546	Create a user account .
10547	Parses vns results
10548	Parses the release results .
10549	Parses producer results
10550	Parses the character results .
10551	Parses tags from soup
10552	Parse user results .
10553	Write a list of files to a tarball .
10554	Apply all files to the output_dir .
10555	Copy a file from a local file to the output directory .
10556	Create parameters for Spark .
10557	Returns a list of docker parameters for this job .
10558	Retrieve the metadata from the remote database
10559	Run MuTect on MuTect
10560	Creates a new object
10561	Returns a list of streams from the database
10562	Export the device s data to a directory .
10563	Search for VNDB .
10564	Parse search results .
10565	Add a stream to the database .
10566	Reset the current session to the device .
10567	Returns a list of all users in the database .
10568	Create BWA index files
10569	Connect to the server
10570	Add a stream to the database .
10571	Add a new stream to the database .
10572	Insert a datapoint into the cache
10573	Sync the database .
10574	Starts the sync
10575	Stop reading .
10576	Download a URL to a file
10577	Uploads a file to S3 .
10578	List the labels of an ontology
10579	List the tree of the given ontology
10580	Get the mean size of a BAM file
10581	Get the current container ID .
10582	Run the STAR index for the given r2id
10583	Creates a new file
10584	Exports the stream to a directory .
10585	Return the device object .
10586	Get all labels of an ontology
10587	Get the hierarchy of an ontology
10588	Entry point for Til .
10589	Populates an argument parser with the given config_parser .
10590	Get the empty config .
10591	Get mount path .
10592	Add an option to arg_parser .
10593	Create an argument parser .
10594	Command to create a pipeline .
10595	Set basic authentication on the client .
10596	Raise an error if the result is not 200 .
10597	Ping the server .
10598	Create a resource .
10599	Update a resource .
10600	Handle DELETE requests .
10601	Subscribe to a stream
10602	Create a new user
10603	List of devices .
10604	This module will run cutadapt and reverse cutadapt .
10605	Run samtools using samtools
10606	Run samtools index
10607	Runs sambamba on input BAM .
10608	Run samblaster
10609	Mark duplicate BAM files in BAM .
10610	Run Picard sort sort sort .
10611	Run baseRecalibral calibrator
10612	Run kallisto kallisto .
10613	Run rsem for the given BAM file .
10614	Retrieves the user affinity for each user .
10615	Send a command to the websocket .
10616	Subscribe to a stream
10617	Connect to the server .
10618	Attempt to reconnect the server .
10619	Subscribe to all subscribed subscriptions
10620	Invoked by the websocket connection
10621	Called when the connection is disconnected .
10622	Called when a connection is lost .
10623	Called when a message is received
10624	Checks the websocket connection
10625	Run GATK select variants using GATK .
10626	Run GATK variant filtering
10627	Run variant recalibrator on a VCF file .
10628	Perform recalibration on a genome .
10629	Combine variants using GATK .
10630	Run quickcheckcheck on a BAM file
10631	Load handlers from packet mapping .
10632	Write configuration to disk .
10633	Get the current configuration .
10634	Fetch a term from ontology
10635	Search ontology by name
10636	Suggest an ontology .
10637	Iterate over all descendants of an ontology .
10638	Iterate over all labels of the ontology .
10639	Iterate over labels of ontology .
10640	Yield hierarchical terms of ontology
10641	Run fastq and return the fastq
10642	Add a stream to the query
10643	Create a Flask application .
10644	Start Spark container .
10645	Start Spark worker
10646	Start the datanode on the master
10647	Stops the Spark worker .
10648	Check the container status
10649	Tokenize a template file .
10650	Lookup the zone ID for a zone
10651	Fetch the configuration from a DNS zone .
10652	Merge configuration chunks into XML
10653	Validate the changeset .
10654	Minimize a list of members by fitness score .
10655	Returns the fitness of the group .
10656	Returns the average cost of the average cost function .
10657	Median cost function .
10658	Get the total parameters .
10659	Returns a list of members .
10660	Add a parameter .
10661	Generate next generation .
10662	Normalize command options .
10663	Get environment variables .
10664	Takes a callable and throws an exception .
10665	Transform a list of pypi results to a list of packages .
10666	Transform result to string .
10667	Convert HTML to xhtml .
10668	Convert xhtml to HTML .
10669	Convert a Python document to string .
10670	Open a document in a browser .
10671	Remove the tree from the tree .
10672	Drop the tag of this tag .
10673	Get element by id .
10674	Return a CssSelector for the given expression .
10675	Iterate over all the loggers .
10676	Return a dictionary of count of classes and classes .
10677	Check if the current class is a single class
10678	Check if the module is a single module
10679	Validate parameters .
10680	Validate the identifier .
10681	Decode a file system path .
10682	Escape all values in an iterable .
10683	Return the codec name for the given encoding .
10684	Detects the BOM in the stream .
10685	Get the remote address of a forwarded - to .
10686	Convert amount to decimal
10687	Parse BeautifulSoup string .
10688	Parse a file .
10689	Convert BeautifulSoup tree to XML .
10690	Get current traceback .
10691	Return a string representation of the exception .
10692	Render the traceback summary .
10693	Generate plaintext traceback .
10694	Return a list of lines representing the source code .
10695	Render the source table .
10696	Takes an egg_info string and returns the version string
10697	Returns the locations of the index URLs found in the project .
10698	Find all versions of a project .
10699	Find an installed requirement that matches a requirement .
10700	Sort a list of links .
10701	Get the content - type of a given URL .
10702	Return an iterator over the links .
10703	Returns True if the link is valid .
10704	Find data files for a package .
10705	Exclude files from src_dir
10706	Parse a requirements file .
10707	Join one or more lines .
10708	Ignore comments .
10709	compile a marker
10710	Translate AST node .
10711	Return a new AST node .
10712	Convert a value to a number .
10713	Decorator to copy the current request context .
10714	Push the context onto the stack .
10715	Remove the next app context .
10716	Return a copy of the app .
10717	Match the request .
10718	Pushes a request context onto the stack .
10719	Make a relative path relative to a relative path .
10720	Check if a distribution is editable .
10721	Add a function to the blueprint .
10722	Add a function to the blueprint .
10723	Register an error handler .
10724	Decorator to stream the given generator or context .
10725	Make a response .
10726	Generate a URL for the given endpoint .
10727	Safely join filename to absolute path .
10728	Return the root directory of a module .
10729	Return the jinja2 loader for this template
10730	Run the script .
10731	Return the cookie domain name .
10732	Generate a cache key for a link .
10733	Return True if name is a pure python library .
10734	Yields the paths of uninstallations in the distribution
10735	Raise an exception if the wheel version is not compatible .
10736	Build wheel and store it in output_dir
10737	Iterate over the names of the code .
10738	Decorator to ensure that the API is fresh .
10739	Add egg - info files to the list of files .
10740	Write the DELETE marker file .
10741	Return True if virtualenv is running under virtualenv .
10742	Get the username
10743	Build a scheme for distutils
10744	Parse Cache - Control header
10745	Check if a HTTP request is cached .
10746	Cache the response .
10747	Update zipimporter cache .
10748	Load template from dev_path .
10749	Install site - specific site .
10750	Save the current state to disk .
10751	Convert value to Converter
10752	Add filters to the config .
10753	Configure a logging handler .
10754	Add handlers to the given logger .
10755	Common configuration of a logger .
10756	Execute a file .
10757	Temporarily override tempdir .
10758	Get URL and revision
10759	Get an item from an object .
10760	Generate a file from the source .
10761	Compile template files .
10762	Return default cache location .
10763	Find eggs in zip .
10764	Find a distribution on the given path .
10765	Declare a package .
10766	Get the mro name of a class
10767	Find an adapter for obs
10768	Ensure directory exists .
10769	Iterate over all entries of a distribution group .
10770	Return True if dist can be added to dist .
10771	Find best matching Distribution for given req .
10772	Evaluate a marker .
10773	Evaluate a markdown text .
10774	Format a log record .
10775	Formats a number according to the given locale .
10776	Parse a regular expression pattern .
10777	Returns a decimal number for the given precision .
10778	Return the decimal precision of a number .
10779	Return scientific notation elements .
10780	Return the total seconds in seconds .
10781	Parse a requirements string .
10782	Return an untyped distutils class .
10783	Raises an exception if the value is a valid requirement .
10784	Fetch the build egg
10785	Do a dice roll
10786	Convert obj to Price class
10787	Shortcut for Price
10788	Validates the request .
10789	Get a method based on args .
10790	Execute a method on the server .
10791	Module name .
10792	The blueprint
10793	Attach error handling for multidict .
10794	Return an abstract dist .
10795	Add a requirement to this installation .
10796	Given a list of req_to_installers and a list of requirements to install them .
10797	Check if a requirement is installed .
10798	Returns the set of dependencies to install .
10799	Get all namespace packages .
10800	Encode an object into JSON .
10801	Tokenize a document .
10802	Merge html annotations .
10803	Copy annotations from src to dest .
10804	Combine the tokens into a list of tokens .
10805	Parse a list of tokens .
10806	Expand all tokens in a list .
10807	Search for unbalanced end tags .
10808	Parse a list of tuples into a list of tokens .
10809	Recursively flatten elements .
10810	Split text into individual words .
10811	Generate start tag .
10812	Return the end tag of an element .
10813	Serialize an HTML fragment .
10814	Fix INSERT tags .
10815	Extract constant from code .
10816	Returns the URL for the cache .
10817	Autolink links .
10818	Kill conditional comments .
10819	Creates a document from an HTML string .
10820	Decorator to handle API responses .
10821	Returns a TreeWalker class for the given tree type .
10822	Export an svn repository
10823	Get the revision for a given location .
10824	Decorator for setting up the setup method .
10825	Return the name of the module
10826	Whether or not the PROPAGATE_EXPORT_PROPAGATE_EXCEPTION is set to True .
10827	Auto - find the path of the instance .
10828	Update the template context .
10829	Handle an HTTP exception .
10830	Tries to trap HTTP exceptions .
10831	handle an exception
10832	Raise the routing exception .
10833	Dispatches and dispatches the request .
10834	Generate a default options response .
10835	Create the URL adapter for the given request .
10836	Inject url defaults into values .
10837	Yield unique values from an iterable .
10838	Handle all_requires .
10839	Convert a requirement into a string .
10840	Convert an egginfo file to metadata .
10841	Import all modules .
10842	Returns all classes in this module
10843	Return a list of all available method names .
10844	Find the basename of the given basename .
10845	Check if path is a module path .
10846	Recursively walk a base directory tree
10847	Return an iterator over the module paths .
10848	Adds default values to kwargs .
10849	Load the arg default values for the given kwargs .
10850	Set multiple keys .
10851	Increment a value by delta .
10852	Dump an object to a string
10853	Build options from a query string .
10854	Populate the link with the given finder .
10855	Ensure that the source directory exists .
10856	Remove temporary source code .
10857	Return the distribution for this package .
10858	Get the data from the request .
10859	Extract headers from the response .
10860	Convert an iri into a native Python native Python object .
10861	Returns the path to the cache directory for the given appname .
10862	Return the path to the user s data directory .
10863	Return the path to the user s log directory
10864	Return the path to the user - defined config directory .
10865	Return a list of site config directories .
10866	Iterate over all loaded modules .
10867	This method is used to restart the application .
10868	Convert string to text .
10869	Try to locate a CA bundle .
10870	Parses an HTML document and returns a tree .
10871	Parse the contents of a text stream .
10872	Parse a string containing XML fragments .
10873	Translate a word .
10874	Return a list of tokens and tokens .
10875	Binds the server to the server .
10876	Prints the report .
10877	Loads the bytecode from a file - like object
10878	Convert kwargs dict to dict
10879	Run a command on VCS .
10880	Get the version string
10881	Return a list of Distribution objects for the given basename .
10882	Find external links .
10883	Open a local URL
10884	Process a URL .
10885	Remove absolute paths from the current environment .
10886	Create set of paths in sys . path
10887	Add a package .
10888	Add a path to a directory .
10889	Check if this process is enabled .
10890	Add user - packages to the installed paths .
10891	Set up the shell .
10892	decorator for aliases
10893	Set default encoding .
10894	Force the global eggs to be run after the local site .
10895	Ensure that sys . path is a classpath .
10896	Wrapper for subprocess . Popen
10897	Check if pyrex supports build extensions .
10898	Convert pyxex source files to their corresponding language .
10899	Context manager for debugging .
10900	Get resource from shared folder
10901	Determine the user agent .
10902	Determine whether the given name is a URL .
10903	Unpack a file URL .
10904	Download a url from a link
10905	Check if a link exists .
10906	Sets a currency for a symbol .
10907	Register an exchange .
10908	Decode the response .
10909	Default template context processor .
10910	Render the template with the given context .
10911	Render a template .
10912	Render a template string .
10913	Parse the version string
10914	Check if the given name is declared .
10915	Visit a name node .
10916	Visit Include node .
10917	Visit an import node .
10918	Create a zip file from base_dir
10919	A decorator for atomic operations .
10920	Serve a service factory
10921	URL encoding .
10922	Check if a requirement matches a wheel .
10923	Populate a requirement set .
10924	Export the package to a temporary directory .
10925	Lookup an Amazon Product .
10926	Iterate over pages .
10927	Browse ancestor .
10928	List of child nodes .
10929	Safely get element from path .
10930	Get the element s text .
10931	Safely get element text value .
10932	Get price and currency .
10933	List price .
10934	Wrapper for caching .
10935	Build the response .
10936	Creates a getter for the given attribute .
10937	Convert a string to lowercase
10938	Sort a value .
10939	Group values by value .
10940	Apply a filter to a list of filters .
10941	create a logger
10942	Compares two constant time series .
10943	Verify a signature .
10944	Derive the secret key
10945	Get the signature for the given value .
10946	Sign a value .
10947	Verify the signature of the given value .
10948	Extracts a signed value from a signed value .
10949	Sign a value
10950	Validate a signed value .
10951	Serialize object to JSON .
10952	Handles a server error .
10953	Return a list of installed packages .
10954	Yield packages from a list of packages .
10955	Return all directories in base_path .
10956	Prepare the response for caching .
10957	Remove a record from a record .
10958	Unpack a wheel .
10959	Install setuptools scripts for distutils .
10960	Assemble all the graphs in the DOT format
10961	Returns the canvas canvas .
10962	Get a node by ID .
10963	Handle directed changes .
10964	Handle edges .
10965	Called when a component is changed .
10966	Mouse click event handler
10967	Called when the diagram is changed .
10968	Clear the canvas canvas .
10969	Callback when domain model is changed .
10970	Maps the domain model to a new graph .
10971	Removes all elements of the mapping model
10972	Map element .
10973	Set style node attributes
10974	Parse an xsdot data .
10975	Process font .
10976	Process an ellipse .
10977	Process a Polygon .
10978	Process a Polyline .
10979	Process a text component .
10980	Process an image .
10981	Render a GridFS file .
10982	Save object to file .
10983	Load the DOT file .
10984	Checks if a point is in the given point .
10985	Draw the bounding box
10986	Opens a new graph wizard
10987	Connect to the database .
10988	Parses the graph and saves the graph data
10989	Initialize the graph .
10990	Open a file dialog .
10991	Save the model to a file .
10992	Save the graph as a file
10993	Configure the graph
10994	Configure nodes
10995	Configure edges
10996	Display information about the robots .
10997	Add a node to the graph .
10998	Add an edge to the graph .
10999	Add a subgraph to the graph .
11000	Add a cluster .
11001	Obtain a graph from the graph .
11002	Edit options
11003	Configure the dot code
11004	Called when the user exits .
11005	Move components to origin coordinates .
11006	Save the object to a file - like object .
11007	Load data from a file - like object .
11008	Save metadata to file .
11009	Load an object from a file .
11010	Create an alias property .
11011	Parse a text file .
11012	Return list of start words
11013	Add a chain .
11014	Remove a chain .
11015	Builds a chain from a source sequence .
11016	Generate a sentence from the chain .
11017	Create a binary graph .
11018	Add or update a node .
11019	Delete a node by name or ID
11020	Get a node by ID
11021	Removes an edge from the graph .
11022	Add an edge to the graph .
11023	Add a subgraph to the graph .
11024	Called when graphviz executable is changed .
11025	Set the nodes in the graph .
11026	Parse a DOT file and return a graph object
11027	Parse a DOT file .
11028	Builds the topology from the tokens .
11029	Build a graph from tokens .
11030	Return the units and multiplier from seconds .
11031	Format a duration in seconds .
11032	Update path
11033	Create the UI for the graph
11034	Split a sequence into n chunks .
11035	Yield windows from an iterable .
11036	Run the bot .
11037	Get all children of an object .
11038	Append a child to an object .
11039	Insert a child into the object .
11040	Delete a child node from an object .
11041	Called when a node is removed
11042	Called when a node has changed
11043	Get label from object .
11044	Set the label of an object .
11045	Called when label changes
11046	Initialize the widget .
11047	Update editor .
11048	Add event listeners
11049	Replace nodes with new nodes .
11050	Handle changes .
11051	Add nodes to the graph .
11052	Replace old edges .
11053	Handle edges changes .
11054	Add edges to the graph .
11055	Parse xdot directive .
11056	Callback called when a drawing is clicked .
11057	Create a new node .
11058	Returns an edge object .
11059	Set up the database connection .
11060	Parse xdot directive .
11061	Parse xdot directive .
11062	Handle drawing .
11063	Called when the component is changed .
11064	Called when the component is changed .
11065	Hookdown event handler
11066	Get information about the highlighted CSS .
11067	Draw the main layer .
11068	Check if a point is inside the polygon .
11069	Draws the main layer
11070	Handle an event .
11071	Run the pipeline .
11072	Returns full url for the current page .
11073	Render links for previous page .
11074	Render the pagination links .
11075	Determines if the candidate content type matches the given candidate .
11076	Selects the content type for the requested content type .
11077	Rewrite a URL to a valid URL .
11078	Removes the auth auth from the given url .
11079	Create URL identifier .
11080	Normalize host name .
11081	Return a list of modules in a directory .
11082	Find all modules in a directory .
11083	List all modules in a module .
11084	Return a list of module classes .
11085	List all classes in a module .
11086	Ensure directory exists .
11087	Stores the contents of the blob at key .
11088	Validate a Luhn card number .
11089	Get the current git revision
11090	Load a module .
11091	Add a path to the list of paths .
11092	Find a module by name .
11093	Split a line into multiple lines .
11094	Remove all namespaces from the given root .
11095	Check that the version is consistent with the current version .
11096	Create an instance from a YAML specification .
11097	Merge actions from a dictionary .
11098	Execute all actions
11099	Create a Config object from a yaml dictionary .
11100	Append the details of the request .
11101	Emit a record .
11102	Add the context to the context
11103	Log an account attempt .
11104	Add url to queue .
11105	Start the worker threads .
11106	Sets the value of a key .
11107	Get a value from KVStore .
11108	Recursively retrieve a key from the store
11109	Get an index from Consul
11110	Delete a key from KVStore
11111	Create a heatmap plot
11112	Add months to a timestamp .
11113	Add months to a date .
11114	Check if this period is a holiday period
11115	Set a music service .
11116	Set a storage service to use .
11117	Load data from csv file
11118	Load configuration from JSON file .
11119	Export data to a JSON file .
11120	Filter y labels by reference label .
11121	Return a pandas DataFrame with the mean of each sample
11122	Compute the mean feature importance .
11123	Restore data_dict .
11124	Merge two dicts .
11125	Decorator to declare a dispatch function .
11126	Decorator to register a method as a method .
11127	Import all registered apps .
11128	Verify that a block is registered with the given block_type .
11129	Registers a block .
11130	Unregister a block stream .
11131	Convert file to MP3 .
11132	Generate a reasonable version .
11133	Handle HTTPS redirect .
11134	Initialize celery task .
11135	Enqueue an email .
11136	Parse Accept header value .
11137	Parse a cache control header value .
11138	Parse a content - type content_type .
11139	Parse a forwarded header value .
11140	Parse a comma - separated list .
11141	Parse a list of parameter values .
11142	Resize an image to its width .
11143	Add a value to the link .
11144	Download a file from YouTube .
11145	Connect to Google Drive .
11146	Uploads a file .
11147	Create music folder .
11148	Write sky parameters to file
11149	Update filenames
11150	Read the absorption matrix .
11151	scale phi_phi
11152	Read pure water absorption from file .
11153	Read pure water scattering from file .
11154	Interpolate IOPT wavelength from file .
11155	Write an iterator to a file
11156	Builds the b .
11157	Builds the total absorption
11158	Build the total attenuation c .
11159	Build all b and c
11160	Update batch parameters .
11161	Read parameter file .
11162	Convert a string to a list of strings .
11163	Read a p_report report from a pypi file .
11164	Set up a signal handler
11165	Decorator for handling signals .
11166	Default handler function .
11167	Pause signal handler .
11168	Handle an abort request .
11169	Process a status signal
11170	Unregisters an event .
11171	Fetch data for a metric .
11172	Returns a sorted list of metric values .
11173	Takes an iterable and returns a list of iterables .
11174	Print an item to stdout .
11175	Pretty print an iterable .
11176	Extracts the signature from the given function .
11177	Set the signature from a partial instance .
11178	Returns a copy of this argv .
11179	Return True if the given filename should be ignored .
11180	Return a tuple with priority key for a file .
11181	Convert a VLQ - bit integer to an integer .
11182	Read a table of values .
11183	Parse the archive header .
11184	Convert a number of seconds into a human readable string .
11185	Print game details .
11186	Populate the data .
11187	Show search result file
11188	Writes data to file .
11189	Process the data file .
11190	Display the current connection .
11191	Prints information about the graphic .
11192	Display the error message .
11193	Hide the error message .
11194	Run planar .
11195	Cancel Planar arabad .
11196	Quits the program .
11197	Save the figure to disk
11198	Open a log file .
11199	Open the planar library .
11200	Implements the actions necessary to create the necessary actions
11201	Event handler for click .
11202	Handle mouse movement
11203	Display the graphic target .
11204	Return a lock set with the given genesis key .
11205	Create a signature of the sender
11206	Return a hash of this message .
11207	Return True if this is a valid state .
11208	Assign funds to a wallet .
11209	Get the last lock .
11210	Returns the last block proposal .
11211	Return last valid locks set .
11212	Calculate the timeout for this proposal .
11213	Callback called when a proposal is received .
11214	Create a list of private keys .
11215	Calculate the delay of a packet .
11216	Deliver a packet to the next peer .
11217	Creates a cproxy object for the given chain .
11218	Convert an address to native contract class .
11219	Register a native contract .
11220	Updates the filter .
11221	Called when a transfer is received
11222	Convert vg image to RGB
11223	Convert image to vgg matrix
11224	Get the function for a given layer .
11225	Get the output layer output .
11226	Get features from x .
11227	Create a new secure key file .
11228	Finish the job .
11229	Load data from a file .
11230	Put a list of items .
11231	Release the table .
11232	Returns a list of tables to be used for generation .
11233	Decorator to fix compile_flags
11234	Find the path to the terra metadata directory .
11235	Get a configuration value .
11236	Set a value in the config file .
11237	Implements the table .
11238	Execute a query
11239	Retrieves a value from a key .
11240	Write default configuration file .
11241	Set the filter filters .
11242	Write this DataFrame to an archive writer .
11243	Convert the export settings to a string .
11244	Convert a string to a float .
11245	Parses the gain from a string .
11246	Parse device settings from string .
11247	Wrap the given text to the specified width .
11248	Detect device devices .
11249	Set the frequency of the peak .
11250	Compute the Fourier transform .
11251	Wait for the result to finish .
11252	Updates the PSD .
11253	Read packet data from file .
11254	Write an array to a file .
11255	Attempt to submit a future .
11256	Convert the sampling time to a number of times .
11257	Calculate freqfreq plan .
11258	Create a buffer for the given bins .
11259	Setup the PSD .
11260	Stop streaming .
11261	Sets the PSD spectrum .
11262	Spatial sweep .
11263	Set device address .
11264	Run CMake on ZQL .
11265	Return a subset of the given datetimes .
11266	Mask a datetime object .
11267	Return a new datetime with the given datetime .
11268	Returns a set of filters that are not in the current time range .
11269	Return a subset of the datetimes to delete .
11270	Return a set of dates to be removed .
11271	Returns a list of dates to delete
11272	Get SPI control byte .
11273	Read a single value from the specified bit .
11274	Write a single byte to the given address .
11275	Return the bit number of a given bit pattern .
11276	Watches the events for the given port .
11277	Handle events from the queue .
11278	Turns gpio interrupt into user interface .
11279	Write the input edge to the pipe .
11280	Waits until the file exists .
11281	Register a pin function .
11282	Deregisters a pin function .
11283	Enable GPIO interrupts
11284	Send a number of bytes to the device .
11285	Render tab .
11286	Return True if the form has any errors .
11287	Render the link to the template .
11288	Extract the version from a package .
11289	Returns the kwargs for the foundation form .
11290	Check the status of the response .
11291	Make a GET request
11292	Get download link .
11293	Upload a link
11294	Upload a file
11295	Upload a remote URL
11296	Get status of remote upload .
11297	Retrieve a list of folders .
11298	List running conversions .
11299	Calculate humidity .
11300	Calculate the dewpoint .
11301	Publish the message to the server .
11302	Calculate CRC for given data .
11303	Verify a VPR CRC .
11304	Unpack storm date from storm date .
11305	Determine whether or not the archive should be used .
11306	wake up wakeup station
11307	Send command to device .
11308	send dmpft command
11309	Get the newest record for the current time station
11310	Parse the archive fields
11311	Upload weather data .
11312	Initialize logger .
11313	Get a list of site services .
11314	Get the current wind speed from the given station and interval
11315	Set parameters for the snowflake .
11316	Set positional arguments
11317	Write the values to a file
11318	Decorator to specify whether the user wants a request .
11319	Initialize the extension .
11320	Fetches all requirements for this request .
11321	Push an override onto this context stack .
11322	Remove the override context from the override context stack .
11323	Context manager to override the current value .
11324	Push a new context onto the stack .
11325	Remove the context from the stack .
11326	Add additional elements .
11327	Remove duplicate field names .
11328	Interpret stats .
11329	Extract query parameters from a query .
11330	Run a query .
11331	Return a pandas dataframe .
11332	Get a networkx graph from the results .
11333	Plot pie chart .
11334	Plot the data .
11335	Plot bar chart .
11336	Export the results to a CSV file .
11337	Decorator to check if user has permission to login .
11338	Return the context data .
11339	Return a list of widgets sorted by position .
11340	Return a list of widgets that need to update
11341	Register a widget .
11342	Unregister a widget .
11343	Return the last update of the dashboard widget .
11344	Returns the value of a dashboard widget .
11345	Save a setting to the dashboard .
11346	Check if the current request should be updated .
11347	Create an array from an array .
11348	Constructs an array of ones along a given axis .
11349	Concatenate multiple Spark arrays .
11350	Check if arguments passed to pyspark .
11351	Helper function to format axes arguments .
11352	Wraps a function returning a SparkArray .
11353	Return the reshape of the array .
11354	Convert to Spark array .
11355	Compute the tensor of the mesh .
11356	Horizontally stack the DataFrame .
11357	Apply a function to each RDD .
11358	Get a chunk of data .
11359	Apply a function to each element in the RDD .
11360	Apply a function to each RDD .
11361	Calculate the plan for the dataset .
11362	Remove padding from value array .
11363	Get the number of chunks for a plan .
11364	Generate slices for a plan .
11365	Create a boolean mask for numpy arrays .
11366	Repartition the RDD .
11367	Return a stacked array with the given size .
11368	Align the axis to the given axis
11369	Returns the first element in the list .
11370	Compute statistics on the DataFrame .
11371	Compute mean .
11372	Compute variance .
11373	Return standard deviation of given axis .
11374	Compute sum along given axis .
11375	Compute the maximum value .
11376	Return the minimum along an axis .
11377	Return a chunk of the DataFrame .
11378	Swap the keys in the bar .
11379	Compute the transpose of the partition .
11380	Swap two axes .
11381	Reshape this array to a new shape .
11382	Reshape all keys in a shape .
11383	Remove axis from self .
11384	Return a copy of each RDD of this RDD .
11385	Clips each RDD in the DataFrame .
11386	Convert RDD to a numpy array .
11387	Convert arg to a tuple .
11388	Wraps argpack into a tuple .
11389	Invert an ndarray to a new shape .
11390	Return True if two arrays are identical .
11391	Convert a list of numpy arrays into an array .
11392	Convert a slice into a slice .
11393	Check if two axes are transposed
11394	Indicate whether new keys are reshaped .
11395	stack all values
11396	Expand array with extra dimensions .
11397	Zip an RDD with the elements of an RDD .
11398	Decorator to wrap a function into a function .
11399	Find a constructor based on parameters .
11400	Reshape the BoltArrays .
11401	Transpose the BoltArrays .
11402	Reshape the BoltArrays .
11403	Transpose the BoltArrays .
11404	Return an instance of a new ones .
11405	Return an array with zeros filled with zeros .
11406	Concatenate multiple arrays .
11407	r Compute a discrete log - likelihood .
11408	Find the most likely alpha .
11409	Calculate the mean value of discrete noise .
11410	Compute the best alpha of the largest alpha .
11411	Compute the best alpha value for each sample .
11412	Plots the posterior of the plot .
11413	Compute the lognormal likelihood .
11414	Sanitize HTML tags .
11415	Configure analytics for Yandex .
11416	Return a list of tags for the model .
11417	Returns the md5 hash of the key .
11418	Return the SHA256 hash of the key .
11419	Compute the SHA512 hash of the key .
11420	Decode a long integer .
11421	Decode a public key .
11422	Parse the parsed options .
11423	Process the SSH RSA key data .
11424	Process the SSH key data .
11425	Processes a data block .
11426	Processed ed25519 data .
11427	Parse SSH2 public key .
11428	Perform a single step .
11429	Perform a single step step .
11430	List of available mechs .
11431	Store the credentials for this key .
11432	The main function
11433	Initialize setup .
11434	Context manager to create a wave file .
11435	Return HTML for the hdfbp header .
11436	Renders the static normalize CSS theme .
11437	Renders a font - awesome font .
11438	Renders the jupyter for django . js . js
11439	Returns the jupyter notebook with jupyter . js
11440	Render Jupyter s jupyter UI .
11441	Template tag for django . js
11442	Return the CSS stylesheet for the jquery data tables .
11443	Link the jquery data tables .
11444	Return the jupyter Jupyter for jupyter
11445	Return HTML for jQuery scrolltoJS .
11446	Function to render jupyter js javascript
11447	Return the CSS CSS for twbs .
11448	Generate a HTML script that can be used to display the user in settings .
11449	Renders a JavaScript variable .
11450	Generate a hash of authentication hashes .
11451	Calculate the expiration time .
11452	Generate a token for a user .
11453	Serialize user data .
11454	Deserialize a profile dict .
11455	Update a user profile .
11456	Called when authentication failed .
11457	Check if a user is active .
11458	Check if request is secure .
11459	Get username from user
11460	Create a user token .
11461	login a user
11462	logout the user
11463	Login to the API .
11464	Authenticate with username and password .
11465	Authenticate a user with a token .
11466	Change the user s password
11467	Send a forgotten password reset .
11468	Reset a user s password
11469	Recursively merge two dictionaries .
11470	Read content from path .
11471	Get the ID of the AleaID field .
11472	Given a list of objects return a dict of key ids .
11473	Return the object ID for a given meteor_id .
11474	Return an object mapping to alea ids .
11475	Fetch an object from the elasticsearch database .
11476	Set default values for an operation .
11477	Set the default_meteor_id for a model
11478	Truncate all tables .
11479	Truncate database migration .
11480	Truncate database .
11481	Initialize options .
11482	Finalize options .
11483	Execute the meteor build .
11484	Convert a path to a directory .
11485	Seed a set of values .
11486	The state of the background .
11487	Generate a random string of given length .
11488	Decorator to make API endpoint .
11489	Generator for all API endpoints
11490	Clear API path cache .
11491	Pretty print a value .
11492	validate kwargs
11493	Invoked by the websocket .
11494	Called when the connection is closed .
11495	Process DDP message .
11496	Parse DDP frames
11497	Process a UDP message .
11498	Dispatch a message .
11499	Receive a connection from the server .
11500	Receives a pong .
11501	Receive a sub .
11502	Receive a subscription .
11503	Receive a method from the API
11504	Yields the websocket info .
11505	Serve DDP server
11506	The main function .
11507	Print msg to stdout .
11508	Stop the server .
11509	Start the DDP greenlet .
11510	Run the connection .
11511	Process a single notification .
11512	Prevent greenlets .
11513	Generate a random MDE id .
11514	Autodiscover API modules .
11515	Return the result as a dict .
11516	Creates an instance of an object .
11517	Emit a log message
11518	A decorator that adds a negotiation middleware to the application .
11519	Context manager for adding routes .
11520	Add a resource to the route .
11521	Run the application .
11522	Send a message .
11523	Send notification to APNS .
11524	Fetches a list of inactive registration IDs .
11525	Send a message to GCM
11526	Helper function to send GCM messages .
11527	Send JSON data to GCMP .
11528	Send data to the API .
11529	Returns the model class for the given module location .
11530	Fast forward selection algorithm
11531	Search for Giphy
11532	Translate a phrase .
11533	Get trending data .
11534	Get a gif .
11535	Get screenaver .
11536	Uploads a list of tags to a file .
11537	Convert int values to integers
11538	Fetch data from the endpoint
11539	Translate a term to a GIF
11540	Get a generator of Giphy images .
11541	Returns a Giphy Image object
11542	Upload a gif to a file .
11543	Create an Access Control Extension
11544	Authenticate to Google .
11545	Upload a media to a media group .
11546	Check the status of a video .
11547	Update a video entry .
11548	Delete a video entry .
11549	Check availability of a video
11550	Check if a video is available
11551	List videos of a user .
11552	Upload a direct file from a direct upload
11553	Uploads a video .
11554	Handle POST request .
11555	Remove a video from the database .
11556	Get a video entry
11557	Creates a new video
11558	Delete video .
11559	Update the metadata of the container .
11560	Updates a metadata field .
11561	Update this item .
11562	Parse a string and return a list of dicts
11563	Return a string representation of a tree .
11564	Load a Python object from a file - like object .
11565	Load an ASCII file .
11566	Parse a string representation of a node .
11567	Create a node .
11568	String representation of a newick .
11569	Show ASCII art .
11570	Return the node with the given label
11571	Prune the tree .
11572	Recursively resolve Polytomies .
11573	Remove internal names .
11574	Remove leaf names from node .
11575	Decorator to ensure that a user is authenticated .
11576	Process a JSON string .
11577	Raise an exception if the given setting is not defined .
11578	Get an argument by name .
11579	Get a list of parameters from the request .
11580	Wraps a callback with the given arguments .
11581	Get cookie value .
11582	Clear a cookie
11583	Redirect to the authenticated user .
11584	Get the authenticated user
11585	Create the request parameters .
11586	Redirect to the OpenID endpoint .
11587	Make a request to the Facebook server .
11588	Get the authenticated user .
11589	Concatenate and concatenate parameters .
11590	Parse a single header line .
11591	Add an entry to the header .
11592	Get a list of values .
11593	Parse a single line of a line .
11594	Parse an HTTP header .
11595	Normalize header name .
11596	Return a UTF - 8 encoded string .
11597	Convert a value to a unicode string .
11598	Convert value to bytes .
11599	Recursively convert objects to unicode
11600	Perform authentication on the app .
11601	Iterate over all subclasses of cls .
11602	Select the policy based on the given origin .
11603	Determine the occupancy of a grid .
11604	Write a gro box to a file
11605	Write a PDB file .
11606	Determine the list of molecule numbers .
11607	Resize the PBC cell box .
11608	Write a topology file .
11609	Iterate over all of the resources in a package .
11610	Send a message to a user .
11611	Send a message to users .
11612	Get all messages for a user .
11613	Check if user is logged in .
11614	Check config file .
11615	Verify the profile name .
11616	Extracts data from config .
11617	Extracts auth from configuration .
11618	Update config data from cfg .
11619	Update configuration pwd .
11620	Create a config profile .
11621	Displays the required items .
11622	Get data from user .
11623	Get authentication from user type .
11624	Configure a profile .
11625	Write data to profile .
11626	write auth info to cfg
11627	Add attachments
11628	Send message .
11629	Send a message .
11630	Instantiate a message from the given type .
11631	Creates a property .
11632	Validate a property .
11633	Validate input message .
11634	Validate two Twilio attributes .
11635	Validate slack post .
11636	Validates a phone app .
11637	Synchronously send messages .
11638	Add a message to the coroutine .
11639	Reads the body of a file
11640	Remove duplicate arguments from kwargs
11641	Send a message .
11642	Get chat id from username
11643	Send the message to the server .
11644	Send the message .
11645	Returns the SMTP server for the given address .
11646	Generate email message
11647	Add headers to the message
11648	Attach body to message
11649	Add attachments .
11650	Get session .
11651	Get an SMTP SSL .
11652	Create a new SMTP session
11653	Sends the email .
11654	Save the tags to a file .
11655	Unload the image .
11656	Get the region of the image .
11657	Validate that all keys are valid .
11658	Remove all entries from the cache .
11659	Generate a byte string .
11660	Read the data from the file .
11661	Delete the chunk .
11662	Resize the chunk .
11663	Insert a new chunk .
11664	Save ID3 to file .
11665	Delete file .
11666	Parse a file .
11667	Process a single line .
11668	Add the source lines to the file
11669	Draw a string on the given font .
11670	Parse ISO 8601 - formatted datetime string .
11671	Make a list of words
11672	Takes a word and attempts to convert it to HTML .
11673	Make an HTML paragraph from a list of words .
11674	Make html code from list of lines
11675	Convert a list of items into a string
11676	Save metadata to file .
11677	Update parent atoms .
11678	Run the game .
11679	Register a mapping for a vendor .
11680	Get a controller for a given controller .
11681	Registers a freeform key .
11682	Return the HMAC - SHA256 signature of a string .
11683	Generate the HTTP request headers .
11684	Send a request to the server .
11685	Send GET request .
11686	Send a POST request
11687	Send a DELETE request .
11688	Convert value to an APEValue .
11689	Send an HTTP request to the device
11690	Perform an autopaginated API call .
11691	List all hosted zones .
11692	Create a hosted zone .
11693	List resource record set by ID .
11694	This method is used to change the resource record set .
11695	Draw an image .
11696	Draw a region on the image .
11697	Total header size .
11698	Replace old_pages with new_pages .
11699	Find the last page of the stream .
11700	Set a section .
11701	Add a Markdown markup to the HTML .
11702	Processes the content .
11703	Get a markup by tag name .
11704	Create a new HostedZoneRequest
11705	Lock a fileobj .
11706	Insert a number of bytes into a file .
11707	Delete bytes from fileobj .
11708	Convert unicode to UTF - 8
11709	Add a change .
11710	Parse an e_change_info xml response .
11711	Measure the width of a string
11712	Returns whether the object has modified or not .
11713	Delete this resource .
11714	Saves changes to the change set .
11715	Parses an ID3v3 record .
11716	Makes an ID3v3 v3v3 v3 format .
11717	Fetch data from the file .
11718	Delete all values from the dictionary
11719	load a frame
11720	Update common features .
11721	Updates the V24 header .
11722	Unload sound .
11723	Play a voice .
11724	Sets the loop points for the voice channel .
11725	returns a list of glyphs
11726	Filter a list of glyph names based on a filter .
11727	Dump an SID table to a file .
11728	Dump an array to a file .
11729	NAME glyph names . py
11730	Check if a file exists
11731	Create a list of files .
11732	Parse a HostedZone object into a dict .
11733	Parse the zone set element .
11734	Encode blocks .
11735	Group padding blocks .
11736	Delete the metadata block .
11737	Save metadata to file .
11738	Parses an RRset alias .
11739	Parse rrset record values .
11740	Parse an rrrset record .
11741	Delete this hosted zone .
11742	Add a new record to this zone .
11743	Create a new record .
11744	Create a AAAA record .
11745	Create a CNAME record .
11746	Create a new MXResourceRecord .
11747	Create a new NSResourceRecord record .
11748	Create a PTR resource record .
11749	Create a SPF resource record .
11750	Create a new SRV resource record .
11751	Create a new TXT resource record .
11752	Registers a frame key .
11753	Extract the values from a change set .
11754	Generate an XML representation of a change .
11755	Build an XML resource record for a change request .
11756	Initialize logging .
11757	Return the item with the given alias .
11758	Freeze a dictionary .
11759	Join HTML attributes into a string .
11760	Called when the app is initialized .
11761	Initialize the bars .
11762	Bind a bar to the bar .
11763	Return a dict of the function arguments .
11764	The URL for this request .
11765	Check if current url is current
11766	Validates a metric class .
11767	Get a stat by name .
11768	Calculate statistics for each stat
11769	Auto - discover gadgets .
11770	Returns a csv dump of the metric
11771	Run maintenance commands
11772	Get a list of values from a GET request .
11773	Get a boolean value from a GET request .
11774	Get next colour
11775	Returns the parameters to be used in gecko .
11776	Displays the current gecko statistics widget .
11777	Display the latest metrics for the current user .
11778	Displays the line chart for a given metric .
11779	Retrieve the latest gecko gecko Metrics .
11780	Displays the most recent metrics for the current user .
11781	Returns a list of gadgets .
11782	Registers gadgets
11783	Return the context data .
11784	Prints an error message to stderr .
11785	Decorator for validating parameters .
11786	Prompt for long input .
11787	Display a list of strings .
11788	Prompt for a file .
11789	Return a DataFrame of games for a given year .
11790	Returns the winner of the game .
11791	Returns the season s season .
11792	Returns a DataFrame of starters .
11793	The surface of the game .
11794	Get the coinoss for this game .
11795	Get weather information .
11796	Return information about the team
11797	Get a pandas DataFrame for the given season .
11798	Returns a DataFrame containing the standings as a DataFrame .
11799	Get a table of team stats
11800	Returns a list of royov votes .
11801	Returns a DataFrame containing the line score of each team .
11802	Returns the season of the year
11803	Get the stats for the game .
11804	Decorator to switch to working directory .
11805	Decorator to cache the results of a function .
11806	Get the unique key for the class and kwargs .
11807	Memoization decorator .
11808	Calculate the age of a person .
11809	Get a table of stats from a table .
11810	Get stats per game .
11811	Get the stats table
11812	Get the per minute per minute .
11813	Get stats per percent .
11814	Get advanced stats table .
11815	Get the state of the game .
11816	Get the stats table for the stats table .
11817	Return a Pandas DataFrame containing the basic games for a given year .
11818	Get memory session data
11819	Expand the details into a DataFrame
11820	Add team columns to dataframe .
11821	Add columns to dataframe
11822	Calculate initial win probability for a given line .
11823	Returns a pandas DataFrame containing the results for each pass .
11824	Retrieve a list of awards for a given year .
11825	Get the team name .
11826	Get box scores for a given year .
11827	Return pq tag for year .
11828	Returns a list of head coaches for a given year .
11829	Get the schedule for a given year
11830	Return the attribution of a given year .
11831	Return the legend for a given year
11832	URL of a year
11833	Get the winning scheme .
11834	Get Visual Alignment
11835	Returns a DataFrame of split splits for the given year .
11836	get html from url
11837	Recursively flattens the HTML tree .
11838	Convert a rel url to a regex
11839	Convert input keyword arguments to a query string .
11840	Read data from HDF5 .
11841	Put the guard into the guard .
11842	Directly access the guard .
11843	Closes the queue .
11844	Read a batch from HDF5 dataset .
11845	Retrieve the remainder of the file at the given path .
11846	Get a queue of examples from the dataset .
11847	Return a generator that yields rows from the queue .
11848	Parse a file - like object .
11849	Write pb_objects to file .
11850	Read a varint from the stream .
11851	Returns an iterator over the objects .
11852	Close the file descriptor .
11853	Write pb2obj to the buffer .
11854	Flush the buffer .
11855	Get the directory of the game directory .
11856	Performs a keyboard input to the input text .
11857	Create fake movie .
11858	Evaluate the trait descriptions .
11859	Wait until a condition is met
11860	Waits until an element is present
11861	Sets ignored exceptions .
11862	Get the current volume
11863	Returns the source of the main source
11864	Send message to socket .
11865	Get the vehicle status .
11866	Power off the device .
11867	Power on .
11868	Set the volume .
11869	Select the power source
11870	Decrypt a request .
11871	Calculate the CRC32 of a string .
11872	Encrypt a value .
11873	get missing schema
11874	get all href links
11875	check song name
11876	Parses a song href and returns the href
11877	generate url for song_name
11878	Extracts the URL from Google s website .
11879	Parses a song and returns its URL .
11880	get html response
11881	download a file from a url
11882	Download file using wget
11883	Returns a list of UUIDs for a city .
11884	Get the location of a location
11885	Parse observation response into dictionary .
11886	Get station information
11887	Returns a list of search paths .
11888	List of compiler extensions .
11889	Get the mimetype for this file extension
11890	Return the mime type of the compiler .
11891	Return the compiler extension .
11892	Register a processor for a mimetype .
11893	Unregister a processor for a mimetype .
11894	Returns a list of paths to search for finders .
11895	Register default values .
11896	Try to import Qt module .
11897	Get netnode metadata
11898	Add a netnode plugin name to the metadata dict
11899	Delete a netnode plugin
11900	Import settings from given path .
11901	Exports settings from given path .
11902	Returns the directory associated with the config_directory .
11903	Iterate over the directory keys .
11904	Simple simple error handler .
11905	Get a table .
11906	List all tables .
11907	Fetch items
11908	Get metadata id from metadata
11909	Get the timestamp of the metadata of a metadata item .
11910	Fetch the crate owner of a crate
11911	Fetch the crate owner of a crate .
11912	Fetch the versions of a crate .
11913	Fetch the versions of a crate .
11914	Fetch raw crate data from a crate
11915	Get a summary of the categories .
11916	Get all crates
11917	Get the crate for a crate
11918	Get a specific crate attribute
11919	Fetch items from path
11920	Fetch query items
11921	Fetch items from API .
11922	Get all available questions .
11923	Fetch events
11924	Determine whether the metadata field was updated .
11925	Determine the category of a given item .
11926	Fetch items from ReMo API .
11927	Return the buffer list .
11928	Get the IO priority .
11929	Release the queue .
11930	Submit a list of blocks .
11931	Cancel an event .
11932	Cancel all pending transfers .
11933	Get a list of events .
11934	Fetch events
11935	Get all cells spreadsheet data .
11936	Parse the feed
11937	Get export formats .
11938	Return the permission factory .
11939	Create a blueprint .
11940	Create a URL rule .
11941	View for a record .
11942	Default view method .
11943	Exports a record .
11944	Time a callable .
11945	Close the socket .
11946	Remove a client .
11947	Increment a counter .
11948	Send a timing request .
11949	Log timing information .
11950	Add a gauge .
11951	Updates a gauge delta .
11952	Set a metric .
11953	Send data to the server .
11954	Create a batch client .
11955	Return a unit client .
11956	Flush all batches .
11957	Create a checker for the given record
11958	Create a new batch client .
11959	Flush all pending batches .
11960	Creates a TCP client .
11961	Create a User object with the given parameters .
11962	Convert an object into an OMMI object .
11963	Convert a term to openmath .
11964	Convert an object to a python object .
11965	Convert obj to OpenMath .
11966	Register a conversion function to openmath .
11967	Decorator for deprecated conversion .
11968	Initialize the Flask app .
11969	Yield valid choices .
11970	Split model kwargs into dictionaries .
11971	Decorator to register a function .
11972	Create a value from the registry .
11973	Parse all form fields and return them as a dict .
11974	Decorator that ensures that a field is required .
11975	A decorator that ensures that the field s choices are valid .
11976	Returns a string representation of the decimal field .
11977	Return the data for a single email field .
11978	Get data from a date field .
11979	Return random datetime data .
11980	Return valid float data .
11981	Validate integer field data .
11982	Generate random data field .
11983	Return a random string of choices .
11984	Return a string representation of multiple choices .
11985	Select data from queryset .
11986	Encode a Python object to bytes
11987	publish package
11988	Tag the current version
11989	Decorator to check if field is blank
11990	Load a global variable .
11991	Create an instance of pickle .
11992	Create a list of symbols .
11993	Create a tuple with a tuple .
11994	Decode bytes to binary
11995	Encode a sequence of bytes .
11996	Format a value to a fixed number .
11997	Format number .
11998	Convert number to money
11999	Convert numpy array to numpy array .
12000	Convert an array to bloscape
12001	Add a workspace .
12002	Remove a workspace .
12003	List workspaces .
12004	Get a Widget by name .
12005	Check if a repository exists in a workspace .
12006	Sync the workspace
12007	Clone a repository
12008	Check the version of ndio .
12009	Convert an array to a list of voxels .
12010	Convert a list of voxels into an array .
12011	Execute shell commands
12012	Executor for globus update
12013	Set up console handler .
12014	Execute a command .
12015	Load a PNG file .
12016	Save numpy array to file .
12017	Saves a collection of numpy arrays .
12018	Print the status of a workspace .
12019	Print the status of a repository
12020	Get the block size
12021	Post cutout data .
12022	Load image from file .
12023	Save numpy array to file .
12024	Load a multi - layer TIFF file .
12025	Write configuration to file .
12026	Clone this repository to the given URL .
12027	Get package version .
12028	Given a name and a name return the greeting .
12029	Wrap the command line options .
12030	Get reserved ids
12031	Merge multiple ids
12032	Set the state of a remote channel
12033	List projects in a dataset .
12034	Get a dataset by name .
12035	List all available datasets for this resource .
12036	Parse subcommands
12037	List workspaces
12038	Show information about a workspace
12039	Print all workspace names
12040	Build the URL for the host .
12041	Guess the format from a file extension .
12042	Opens an image file .
12043	Convert input file to output format .
12044	Build a build graph .
12045	Compute invariants .
12046	Convert the given graph to the given format .
12047	Convert a list of ramons into a dictionary .
12048	Returns the RAMON type for the given type .
12049	Delete a channel .
12050	Add a dataset
12051	Generate a JSON dictionary for a dataset .
12052	Convert dataset to a dictionary .
12053	Create channel dict
12054	Generate a dictionary of project_name and token_name
12055	Identify the dimensions of an image .
12056	put data to ndio
12057	Find the path to a workspace .
12058	Get public tokens .
12059	Get project information
12060	Set the OTP data for a given token .
12061	Get the given URL .
12062	Make a POST request
12063	Deletes the given URL
12064	Loads neural network layers from HDF5 file .
12065	Save an array to an HDF5 file .
12066	Infer gaps from a Pandas DataFrame .
12067	Recover the given IO object and return the result .
12068	Install the translation functions .
12069	Ensures that the given condition is exclusive .
12070	Return percentage of part
12071	Get the stats for a server .
12072	Get a dictionary of slabs
12073	Return context data .
12074	Show server status .
12075	Show the memcache dashboard .
12076	Show memcache statistics .
12077	Display the memcache slabs .
12078	Convert a number of bytes to a human readable string
12079	Finds a Config object and returns it
12080	Add a directory to the Environment .
12081	Apply the configuration to the config .
12082	The path of this node .
12083	Read the file .
12084	Write data to file .
12085	Configure the logger .
12086	Creates the file if it doesn t exist
12087	Apply the configuration applied to this path .
12088	The path of this node .
12089	Remove the directory .
12090	Prepare the children of this node .
12091	Performs cleanup on the object .
12092	Create a path to a file
12093	List all files in the directory
12094	Write data to file .
12095	Returns the contents of a file
12096	Add one or more files to the tree .
12097	Save configuration to file .
12098	Load configuration from file
12099	Remove temporary files
12100	Load plugins from a directory
12101	Recursively update a dictionary recursively .
12102	Get a child node
12103	Resolve the path
12104	Retrieves the value for this entry
12105	Updates this configuration object .
12106	Load configuration from YAML file .
12107	Return a string representation of the config object .
12108	Builds the URL for the given request .
12109	Read and close the socket .
12110	Send the socket output .
12111	send a RPC request
12112	Read data from socket .
12113	Write output of given socket .
12114	Decorator for registering a callback .
12115	Get remote set modes for a remote link .
12116	Configure connection parameters .
12117	The address of the source .
12118	The target address .
12119	Called when the session is closed .
12120	Creates a new sender
12121	Add a sender to the link .
12122	Request a receiver .
12123	Request a receiver .
12124	destroy a link
12125	Close session .
12126	Process an endpoint event .
12127	Add a markdown pattern to the markdown object .
12128	Called when a remote receiver is closed .
12129	Called when receiver has failed .
12130	Extract host and port from an AMQP address .
12131	Connect to host and port
12132	Create a server socket
12133	Return a list of connected connections .
12134	Raises a RuntimeError if the connection has not been invoked .
12135	Process the connection .
12136	Read data from the output stream .
12137	Create a new sender .
12138	Reject a previously sent sender .
12139	Create a new receiver .
12140	Callback called when the connection failed .
12141	Called when the connection is active .
12142	Called when a remote connection is closed .
12143	Called when an error occurs .
12144	Decorator for Twilio views .
12145	Returns a string representation of the color .
12146	Returns a list of font files for the search path .
12147	Set the compression flag .
12148	Add a new PDF object .
12149	Add output to page .
12150	put a stream
12151	Add text to the document
12152	Sets the color scheme .
12153	Set default font .
12154	Add page to page
12155	Sets the font size .
12156	Add text to PDF .
12157	Add newlines to the page .
12158	Add a pie chart
12159	Output pages .
12160	Returns the list of orientation changes
12161	Output font files .
12162	Output images .
12163	Output the XML file .
12164	Transform the current matrix .
12165	Returns the absolute position of the current position .
12166	Set style .
12167	Rotate a point on the segment .
12168	Set information about the object .
12169	Set display mode
12170	Closes the document .
12171	Write header to buffer .
12172	Write pages to PDF .
12173	Store resource dictionary .
12174	Write information about the producer .
12175	Write catalog .
12176	write the object to the buffer
12177	Floyd function .
12178	Generator that iterates over sequences .
12179	Generator for gosper .
12180	A generator for brent .
12181	Fit the fit to the maximum length
12182	Fit the fit_length of the dataset
12183	Returns True if the unit is greater than the x coordinate .
12184	Returns true if the y coordinate is greater than this unit .
12185	Return a copy of this cursor .
12186	Move x by dx .
12187	Increase y - axis .
12188	Render the table .
12189	Create a new label
12190	List all tags
12191	Get labels by name .
12192	Update a label
12193	Delete a tag
12194	Create a new label
12195	List all tags
12196	Get tags by label .
12197	Create a new hook
12198	List all hooks
12199	Update a hook .
12200	Create an alert configuration .
12201	Get all alerts with specified alert type .
12202	Update an alert
12203	Setup extension .
12204	Returns the path to the themes package .
12205	Helper method for POST requests .
12206	List all hosts
12207	Retrieve a list of log records
12208	Finds the slack tracker for a piece of piece abacker
12209	Returns the duration in seconds .
12210	Updates the limits of the limit .
12211	Compute the model .
12212	Calculate the Bin object .
12213	Free memory allocation .
12214	Receive data from the socket .
12215	Generator for line generator
12216	Generator that yields buffered data .
12217	Return the status code and message .
12218	Generate info .
12219	Generate a message .
12220	Send a command to the server .
12221	Get capabilities .
12222	Set the mode of the device .
12223	Send QUIT command .
12224	Return a datetime object .
12225	Send a HELP command .
12226	Generate new groups .
12227	Generate new news info .
12228	Return a list of new news .
12229	List the active news groups .
12230	Get the list of active active times .
12231	List the newsgroups .
12232	Generate a list of names .
12233	Get the list of extensions .
12234	Generates a list of lists .
12235	Get a list of values .
12236	Send a GROUP command
12237	Retrieve the next article .
12238	Parse an article
12239	Retrieve a HEAD message .
12240	Return the body of a message .
12241	Send xgtitle command .
12242	Send a XHDR message .
12243	Send a XZHDR message .
12244	Generate xover records .
12245	Generate xpat message .
12246	Generate a list of pattern .
12247	Sets the gzip compression flag .
12248	Send a POST request .
12249	Convert a number to an integer .
12250	Convert a string to a timestamp .
12251	Convert string to datetime object .
12252	Perform a POST request .
12253	Perform an HTTP DELETE request .
12254	Make a GET request
12255	List scheduled queries .
12256	List tags .
12257	Get tags by name or ID
12258	Create an alert notification
12259	Delete a tag .
12260	Create a scheduled query .
12261	Create a new alert
12262	Remove a tag from LogEntry .
12263	Convert a range to a string .
12264	Parses a newsgroup line
12265	Parse a line header .
12266	Convert a dictionary of header strings into a string .
12267	Perform a POST request
12268	Run multiple tests .
12269	convert defaults to docstring
12270	Creates a decorator that adds kwargs to a function .
12271	Generate a docstring for this class .
12272	Set the value .
12273	Raise TypeError if value is not expected .
12274	Returns the value of the variable
12275	Check if value is a scalar .
12276	Symmetric error
12277	Set errors .
12278	Set the Value
12279	Import metrics from the API
12280	Extract metrics from a list of metrics
12281	Filter metrics by name
12282	Call the RPC .
12283	Return an alternation of text .
12284	Return an operator .
12285	Add an op .
12286	Initialize required properties .
12287	Returns a list of all parameters .
12288	Returns a list of parameter values .
12289	Returns the parameters of the model
12290	Clear all derived values
12291	Setter for method .
12292	Get environment variables .
12293	Get the URL parameters .
12294	Perform a GET request
12295	Perform a DELETE request .
12296	Perform a POST request .
12297	Perform a PUT request .
12298	Call the API .
12299	Validate the sceneInfo .
12300	Verify the product product product type
12301	Get size of remote file
12302	Download the image from the scene
12303	Validate bands
12304	Establish connection to EARThex .
12305	A decorator that creates a function that returns a decorator that returns a function that accepts a prefix .
12306	Return the timezone for the given zone .
12307	Convert naive datetime to timezone .
12308	Join an iterable .
12309	Return a list of positions of newline positions .
12310	Return a line pointing to a source .
12311	Dump the result of the relay .
12312	Remove metrics .
12313	Load a fortune file .
12314	Generate a random fortune .
12315	Entry point for the application .
12316	Return a grammar rule .
12317	Concatenate special cases .
12318	Parse the grammar .
12319	List of Rule instances .
12320	The list of comments .
12321	Return a list of all the directives from the comment .
12322	Return the source code for this script .
12323	Compile the parser
12324	Get import directives .
12325	Returns the type of the parser .
12326	Returns the class definition .
12327	Find the entry point of the directive .
12328	Get the definition of a rule .
12329	Return the source code for the given rule .
12330	Get the rule name for a rule .
12331	Convert an expression to ASN .
12332	Convert a node into an ASN string .
12333	Given a list of operands return a list of operands .
12334	Remove grouping nodes from an OptionTree .
12335	Convert AST node to code .
12336	Convert an AST node to a Python code string .
12337	Convert an AST to code .
12338	Convert an AST node group into a Python code object .
12339	Converts an ASTRERepetitionGroup to a code block .
12340	Convert AST special handling to code .
12341	Convert an astroid op to a code block .
12342	Convert an astroid op to a Python code string .
12343	Convert an expression to a code block .
12344	Return a code block with repeated expressions .
12345	Return code for an AST operand .
12346	Find directives that match the predicate .
12347	Determines if child is a child of parent .
12348	Find directives from a comment .
12349	Print the results .
12350	Get a new ID .
12351	remove a hotkey
12352	Add command line arguments .
12353	Configure logging .
12354	Validate the arguments .
12355	Convert infix nodes to postfix .
12356	Convert a list of nodes to anOptree node .
12357	Reduce a set of operators into a single operator .
12358	Add command line arguments .
12359	Loads the plugin manifest
12360	Get a metric definition by name
12361	Returns the length of the column names .
12362	Returns the length of the metrics columns
12363	Replace underscores with underscores .
12364	Print the markdown header .
12365	Output the metrics table .
12366	Generate markdown documentation .
12367	Parse the input into a tree .
12368	Attempts to attempt the most recently consumed text .
12369	Add command line arguments
12370	Parses a string into a datetime object .
12371	Output the aggregated metrics to CSV .
12372	Outputs JSON data to stdout .
12373	Output raw json data .
12374	Create the XML report for the metrics CLI .
12375	Determine if the node is not empty .
12376	Pretty print a root node .
12377	Creates a new repetition extractor .
12378	Get terminal node .
12379	Extract a repetition from text .
12380	Extract text extraction .
12381	Count the number of whitespace leading whitespace .
12382	Call extractor .
12383	Return the node s position .
12384	True if this node is empty .
12385	Add ignored items .
12386	Check if the given value is a type .
12387	Return a flattened copy of this node .
12388	Return a copy of this AST node with the given pred .
12389	Returns a copy of this parser with self and its children .
12390	Return a copy of this parser .
12391	Return a compressed parse node .
12392	Return the position of the cursor .
12393	The max read position .
12394	Go to next character .
12395	Move the next line to the next line .
12396	Move the previous line to the previous line .
12397	Return the last readed line .
12398	Return the next position in the current line .
12399	Save current context .
12400	Restore current context .
12401	Return a string representation of the notification .
12402	Set the internal name of the model
12403	Count the number of variables .
12404	Return the number of functions .
12405	Update the number of types .
12406	Add a new scope .
12407	Return a new scope .
12408	Update the scope with the given oset .
12409	Return a new scope with the current state .
12410	Update the scope with the given oset .
12411	Return a new scope with the difference of this scope .
12412	Update this set with symmetric symmetric differences .
12413	Return a new scope with symmetric difference .
12414	Add a new signature .
12415	Removes an item from the set .
12416	Remove the signature from the chain .
12417	Return a list of all signature values .
12418	Return the first signature .
12419	Returns the last signature .
12420	Get a signature value .
12421	Get a scope by its name
12422	Get a signature by its name .
12423	Returns a list of all the transitive variables in this scope .
12424	Call the TranslatorInjector for the given Translator scope .
12425	Normalize an AST .
12426	Set node attributes .
12427	Returns an iterator over rvalues .
12428	Check if a hit is ok
12429	Compute the signature for this parameter .
12430	Resolve this expression .
12431	Get the resolved names for a type .
12432	Sets the resolution for the resolution
12433	Delete local file
12434	Delete a file from S3
12435	Delete file from local storage .
12436	Save a file to a temporary file .
12437	Saves the object to a file
12438	Saves the object to a local file .
12439	Finds paths by path
12440	Create an enumeration class .
12441	Check the types of the given function .
12442	Add a callable to the chain .
12443	Decorator to add a method .
12444	Decorator to register a hook .
12445	Decorator to register a rule .
12446	Decorator to register a directive .
12447	Decorator for registering a class .
12448	Bind dst to dst node .
12449	Read EOF .
12450	Push the rule nodes to the stack .
12451	Removes all nodes from the tree .
12452	Return the node s value .
12453	Parse a stream .
12454	Begin a new tag
12455	Set the end of the tag .
12456	Set the rules for the given dictionary .
12457	Set the registered hooks .
12458	Set the directive directives .
12459	Evaluate a rule .
12460	Evaluate hook .
12461	Peek at the end of the text .
12462	Read one character from the stream .
12463	Read a single character .
12464	Read until EOF is reached .
12465	Ignore whitespace .
12466	Set the default dtype for this cluster .
12467	Set the cluster dtype for the cluster .
12468	Check that the structure is compatible with the struct .
12469	Add a rulecl statement
12470	Add rules to the parser .
12471	Add a rule
12472	Add sequences to the parser .
12473	Add alternative .
12474	Add a range to the sequence .
12475	Add an RPT node .
12476	Add a capture to the sequence .
12477	Add a binding to the sequence .
12478	Add a parser to the parser .
12479	Set the parameter for the parameter .
12480	Set a parameter from a string .
12481	Parse a single parameter .
12482	Identify the parameter id .
12483	Change name of hook name
12484	Add a parameter to the list .
12485	Get the rules from the EBNF file .
12486	Ignore Cxx code .
12487	Add a new state .
12488	Return a dot representation of the graph .
12489	Save the graph to a DOT file .
12490	Write the graph to a PNG file .
12491	Format the state as a string .
12492	Set the next state of a new state .
12493	Clear all live state
12494	Infer the type of block .
12495	Infer subexpr of expr .
12496	Infer the type of an identifier .
12497	Infer a literal .
12498	Dump local node info
12499	Create a top - level function definition for a topython parser .
12500	Handle an exit scope .
12501	Parse a statement .
12502	Return an AST node .
12503	Return an AST node .
12504	Return an astroid . Eval node .
12505	Return an ast node .
12506	Visit a capture node .
12507	Return AST node .
12508	Return astroid .
12509	Visit a SeqNode .
12510	Return a boolean expression .
12511	Visit the AST node .
12512	return statement astroid
12513	Concatenate src and add it to dst
12514	Set indentation level
12515	Recursively convert a list to a string
12516	Echo a list of nodes
12517	Populate an edge from a sequence .
12518	Populate an edge register with all sequences
12519	Recursively walk the tree into a state tree
12520	Equality comparison of n .
12521	Build a Grammar from a string .
12522	Create a Grammar from a file .
12523	Parse the source .
12524	Parse a file .
12525	Set node value .
12526	Set node value as integer .
12527	Get a subnode .
12528	Default serializer .
12529	Get list of deposits
12530	Dump a deposition object to a dictionary .
12531	Get list of bibrecids from the database .
12532	Get list of bibrecids from the database .
12533	Try to import the bibdoc files .
12534	Dump a BibID to a list of files .
12535	Return a tuple of bib documents .
12536	Check BibDoc .
12537	Serialize object to JSON .
12538	List all users .
12539	Serialize uuid .
12540	List all available communities .
12541	Get a set of bibrecords from a given date .
12542	Get all records that are older than the specified date .
12543	Get restrictions for a collection .
12544	Get the revisions of a record .
12545	Get all collections for a record .
12546	Dump a record to a JSON file .
12547	Get bibdoc records from given date .
12548	Dump a record to a Bibliography .
12549	Serialize an AR object to JSON .
12550	Load common objects .
12551	Collect all thing_points
12552	Initialize application context .
12553	Decorator for memoization .
12554	Get the run SQL query .
12555	Get the list of connected roles .
12556	Query the database .
12557	Serialize object to JSON .
12558	Load a token .
12559	Import a record .
12560	Return the value of a given config var .
12561	Serialize object to JSON .
12562	Get users from invenio .
12563	Get all users .
12564	Serialize uuid .
12565	Load deposit files into SIP .
12566	Create record and pid .
12567	Load record dump .
12568	Load dump dump dumps .
12569	Inspect dump records .
12570	Common load function .
12571	Load communities .
12572	Load users from sources .
12573	Load dependencies from sources .
12574	Get profiling statistics .
12575	Run tornado web application
12576	dump profile
12577	Delete profile .
12578	Delete profile .
12579	Get the container status
12580	Disable the actual timestamp .
12581	Load user profile .
12582	Calculate translation of images .
12583	Merge images into single image collection .
12584	Add one or more ones to an array .
12585	Create record .
12586	Create record from dump .
12587	Update a record .
12588	Create persistent identifiers .
12589	Delete a record .
12590	Add files to record .
12591	Create a file - like object .
12592	Delete all buckets from a record .
12593	Return a list of persistent identifiers .
12594	Prepare revisions
12595	Prepare list of files
12596	Prepare the PID list
12597	Return True if this record is deleted .
12598	Load a community .
12599	Loads a featured community .
12600	Dump a thing .
12601	Check the given thing .
12602	Delete event handler
12603	Returns the magnitude of a vector
12604	Normalize vector values .
12605	Apply texcoords to the texcoords
12606	Ensures that the skeleton has the bones
12607	Set the length of the bone
12608	Sets the parent .
12609	Get the pivot point of the tree
12610	Starts the animation
12611	Set the state of the motor
12612	Unset the camera state
12613	Set the state of the region .
12614	Unset the rotation state .
12615	Ensures that the model does not exist .
12616	Redraw the scene .
12617	Draws the model
12618	Sets the model
12619	Write a list of test reports to a file .
12620	Create a test suite .
12621	Add a menu
12622	Redraw the label .
12623	Redraw the label .
12624	Draw the background .
12625	Delete a widget
12626	Redraw the label .
12627	Register event handlers .
12628	Register event handlers .
12629	Add main label
12630	Add OK button
12631	Exit the popup menu .
12632	Add confirm button
12633	Add a cancel button
12634	Update the progress bar .
12635	Render all actors .
12636	Render the batch .
12637	Context manager for a step .
12638	Returns true if the given resource exists .
12639	add a category
12640	Returns the missing texture
12641	Get a model by name
12642	load a model by name
12643	Returns cached model data for given name .
12644	Loads the data from a JSON file .
12645	Add a widget
12646	Draw the menu .
12647	Initializes the redraw .
12648	Redraw the scrollbar
12649	Checks if a mouse position is within a given position
12650	Compute the probability ratio .
12651	Adds a layer to the stack .
12652	Get a region from the buffer .
12653	Draw the buffer .
12654	Add an action .
12655	Perform an action
12656	Register a new identifier
12657	Add a layer to the stack .
12658	Draw all layers .
12659	Delete all layers .
12660	The border of the widget .
12661	Returns the offset of this list .
12662	Returns the size of the widget
12663	Read a mesh from an hdf5 file .
12664	Create network connection matrix .
12665	Sets the fields for this query .
12666	Add fields to the request .
12667	Check element types .
12668	The space of each element in this element .
12669	Calculates the centroids and volumes of the mesh .
12670	Return the angles of each element .
12671	Get the edge edges
12672	Return statistics for all centroids and angles .
12673	Convert an element set to a node set .
12674	Convert node set to surface surface area
12675	Populate the elements set by tag
12676	Return a pandas DataFrame with metadata
12677	Return metadata as pandas Series .
12678	Make the workdir if needed .
12679	Runs the postprocess process .
12680	Run GMSH algorithm
12681	Read history report .
12682	Read a field report
12683	Convert a list to a string
12684	Return an EOF statement .
12685	Produce a string representation of a DataFrame .
12686	Parse the response .
12687	Make a request to the API .
12688	Write XYY report to file .
12689	Write field report
12690	List available components .
12691	Return the error message .
12692	Return True if the exception was thrown .
12693	Sets the data of the data
12694	Determine the mode of an axis
12695	Set axis options
12696	Create a Descriptor class .
12697	Cycle through all notifications .
12698	Try to convert value to float .
12699	Convert string to int
12700	Renders a graph
12701	Force unicode to unicode .
12702	Clean HTML .
12703	Check if mime_type matches include_mime_type .
12704	Clean up the domain name .
12705	Given a domain name return a list of domain names .
12706	Make the hash for the given token .
12707	Collects words from the API .
12708	Index the keywords .
12709	Invert a hash key to the inverted hash index .
12710	Get the document frequency of the given hashes .
12711	Yield stream ids for h .
12712	Return an iterator of stream ids .
12713	Return iterable of items from a ProtoStream .
12714	Create a streamitem from an entry .
12715	Creates a ContentItem from a node .
12716	Reads a varint from the stream .
12717	Read an object from the stream .
12718	Serialize a stream item into a binary key .
12719	Convert a streamitem to key and data .
12720	Change the working directory to a previous working directory .
12721	Strip the prefix from a string .
12722	Strip suffix from string .
12723	Check if needle is in haystack
12724	A simple example .
12725	Run the wsgiref server .
12726	Shutdown the server .
12727	Decorator to register a route .
12728	Decorator to register an error handler .
12729	Renders a static file .
12730	Returns a callback function for the response page .
12731	Register a callback .
12732	Resolve a route .
12733	Find callback data for given route .
12734	Normalize pattern .
12735	Response body .
12736	Add an HTTP header .
12737	Set a cookie .
12738	String representation of the response .
12739	The Content - Type header .
12740	Get all values for a given key .
12741	Recursively delete a directory
12742	Get open file descriptors .
12743	Generate profile stats
12744	run verification on work unit
12745	Fetches the data for the given workunit .
12746	Returns a list of lines from a file .
12747	Return a random adjacspecies pair .
12748	Return random adjac species pair .
12749	Morph words from Goolkit API .
12750	Display similarity .
12751	Run hirana .
12752	List entities .
12753	Shows a short sum .
12754	List keywords .
12755	Comboo API .
12756	Create a new stage .
12757	Initialize a list of stages .
12758	Initialize all stages .
12759	Process a string of text .
12760	Run all the writers .
12761	Run an incremental transform on a stream .
12762	Replace the pipeline config with the given name .
12763	Return a WSGI application .
12764	Convert a list of sentences into a set of chains .
12765	Return True if target mentions are all of the target mentions .
12766	True if target_members are in the chain .
12767	Parse a list of tokens and return a list of matches .
12768	Matches multiple tokens in the stream .
12769	Create a tagger for the tagger .
12770	Aligns the input chunk with the given n_chunk
12771	Terminate the child process .
12772	Multiplies p by n .
12773	Fix email addresses .
12774	Yields sentences from a string .
12775	Make label index collection .
12776	Return a list of Sentences .
12777	Convert HTML entities to unicode .
12778	writes the cleaned file to a file
12779	creates a gpg file from taggerger
12780	Remove leading whitespace from a string .
12781	Takes a chunk of text and merges it into a single chunk
12782	Make absolute paths to absolute paths .
12783	Initialize pipeline configuration .
12784	Generate a single stream chunk from a file .
12785	Replace invisible characters .
12786	Makes sure HTML is visible .
12787	Make the visible visible file visible in the index .
12788	Remove leading whitespace from a string .
12789	Read HTML file .
12790	Try to load a stage .
12791	Loads the global stages from a source file .
12792	Import all stages from a module .
12793	Initialize a stage by name .
12794	Read bytes from index_bytes .
12795	Return True if the href is valid .
12796	Generate label labels
12797	Yields all paths in input_dir
12798	Get all tasks in the cluster .
12799	Get a random set of random keys
12800	Yields tokens from a sentence .
12801	Extract sentences from the given nerpdom node .
12802	Decorator to handle exceptions .
12803	Verify the MD5 of the received data .
12804	Get bucket from config .
12805	Decode data to stream .
12806	Get a chunk from a bucket
12807	Convert a stream_id to a kvlayer key .
12808	Convert kvlayer key to stream id
12809	Generate a key for a stream item .
12810	Run the main application .
12811	Build an argument parser .
12812	Add xpaths to the stream .
12813	Convert a list of sentences to character tokens .
12814	Convert ASCII character tokens to character offsets .
12815	Convert character offsets to xpaths .
12816	Add an element to the document .
12817	Generate an xpath piece of text .
12818	Return the index of the current text node .
12819	Yield descendants of elem .
12820	Select the elements of a source element .
12821	Select elements with the given name .
12822	Select elements matching the given pattern .
12823	Select an attribute from a source element .
12824	Returns an iterator over the siblings of the given element .
12825	Takes an XML element and returns a pretty string .
12826	Call inkscape .
12827	Wrapper around inkscape .
12828	Convert an SVG file to a PDF .
12829	Export svg to png
12830	Returns an Environment for the given file path .
12831	Sets the template file
12832	Fill the document with the given doc_contents .
12833	Save the content of the template to file .
12834	Create a document type from a template file .
12835	Replaces SVG code contents .
12836	Render the QR Code to a file .
12837	Render the function to a PDF file .
12838	Parse an expat using the given handler .
12839	Parse the input source and return the first element of the document .
12840	Extract HTML fragment from source code .
12841	Insert text .
12842	Insert a node before the reference node .
12843	Create a clone of this node .
12844	Execute the given options
12845	Return the string representation of a node .
12846	Insert a child element .
12847	Parse config file
12848	Get Google API credentials .
12849	Create event datetimes .
12850	Create a google calendar event
12851	Entry point for running events
12852	Get the file extension
12853	Add an extension to filepath if it exists .
12854	Get a temporary file .
12855	Remove all files in the workdir
12856	save csv to json
12857	Replace old content with new content .
12858	Parses the HTML tag and sets the tags .
12859	Checks the next tag for the next tag .
12860	wrap an italic tag
12861	Create a strong tag
12862	Wrap an underline tag .
12863	Parse the attributes of a tag
12864	Remove line breaks from a tag .
12865	Parse the given href .
12866	Parse an attribute .
12867	Given a dictionary of keys translate them into a dictionary .
12868	Convert to json string
12869	Find all files in folder_path
12870	Concatenate multiple strings together .
12871	Check if full starts with full .
12872	Check if a part is in the full path .
12873	Yields the length of a string .
12874	Compile a boolean expression .
12875	Yield a sequence of XPath expressions .
12876	Look up a table by key id .
12877	Replace characters in SVG code .
12878	Check if the input is an SVG file .
12879	Merge two svg files
12880	Merge multiple PDFs together .
12881	Embeds a font file into SVG .
12882	Embeds a font file into SVG
12883	Validate the input .
12884	check if the function is callable
12885	Recursively recurse through the input and outputs the output .
12886	Creates an input file with the given options
12887	Recursively traverse nested input tree .
12888	Convert an object to a string representation .
12889	Convert a python object to numbers .
12890	Convert an object to a boolean .
12891	Serialize an XPath AST .
12892	Change the XML encoding of a file .
12893	Save text into a QR code .
12894	Launch gromacs .
12895	Call the given command with arguments .
12896	Convert to PDF format .
12897	Compute the options for a psycopree .
12898	Transform a geometry to another .
12899	Create a geometry object from a JSON object .
12900	Expand this range with another .
12901	Return the intersection of this envelope .
12902	Check if this envelope intersects the other .
12903	Polygon formed by Polygon .
12904	Initialize from NNM
12905	Save the dataframe to a file
12906	Select rows matching a condition .
12907	Return the table at the given nucleotide .
12908	Return the intersection of two Table objects .
12909	Return a Table which is not in the given table .
12910	Return a list of elements with odd odd order .
12911	Return a new RDD with odd numbers .
12912	Return a new RDD with only elements that are odd .
12913	Compute the error of the DataFrame .
12914	Root Mean Square Error
12915	Binding energy
12916	Convenience function to compute the fraction of the nuclear mass
12917	S1 N1
12918	Calculate s2 p2
12919	calculate the singular pressure
12920	Create a new table derived from the table .
12921	Runs a function on the database .
12922	Derive a key from the master_password
12923	Bootstrap a new database .
12924	Search domains .
12925	Modify a domain .
12926	Create a new domain .
12927	Extract information from a HBS file
12928	Return the VSI prefix of a virtual path .
12929	Returns the SID of the SID
12930	Execute the command and exit .
12931	Initialize logging .
12932	Update a file from a URL .
12933	Return a dictionary of available driver names .
12934	Return the driver for the given path .
12935	Convert geom to numpy array
12936	Convert a raster to raster
12937	Open a raster from disk
12938	Create raster from bytes
12939	Copy raster to destination
12940	List of DMDATION options .
12941	Write a raster to disk .
12942	Sets the affine transform .
12943	Read this stream as an array .
12944	The envelope bounding box
12945	Get the driver .
12946	Create a new raster .
12947	Return a numpy array with masked values .
12948	Return the NData value of this element .
12949	Read raster data .
12950	Resample a given size .
12951	Copy the image to a file .
12952	Sets the projection of the dataset
12953	Warp the image to a new location .
12954	Calculate chunklen from alph_len .
12955	Determine which charset to use .
12956	Encode a single chunk
12957	Convert a chunk to a long integer .
12958	Get a chunk from the data
12959	Decorator for caching functions .
12960	Compile a file into a regular expression .
12961	Normalize date format
12962	Try to guess the timezone .
12963	Return a dictionary representation of Swagger objects .
12964	Activate the PDB hook .
12965	Pretty - print an object .
12966	Handle multiple jobs .
12967	The main worker thread .
12968	Start a worker pool .
12969	Sets the classification of this company .
12970	Send a message to the queue .
12971	Turn on a light .
12972	Turn on switch .
12973	Turn on a device .
12974	Turn off a device .
12975	Send all pending messages from the queue .
12976	Send a message to the network .
12977	Create an adapter for an object .
12978	Sets the nature of this Product .
12979	Update self . options from a dictionary .
12980	Reset all options to defaults
12981	Set config files .
12982	Iterate over all option values .
12983	Iterate over all default values and their defaults .
12984	Create the config file at index .
12985	Update the configuration dictionary .
12986	Read the configuration from a file .
12987	Reads the config files and returns a dictionary containing the configuration values .
12988	Returns a list of option names for the given option .
12989	Get a list of sections .
12990	Solve options for a command .
12991	Add options to the parser .
12992	Build the argument parser .
12993	Parse command line arguments .
12994	Execute zsh comp command
12995	set up a zsh executable
12996	Return the name of the bash command
12997	Complete a bash command
12998	Start the server .
12999	Connect to the manager .
13000	Called when a line is received .
13001	Called when the worker is closed .
13002	Called when a job is loaded .
13003	Called when a response is received .
13004	Close this job .
13005	Add a set of jobs to the master .
13006	Close all connections .
13007	Change all waitingers
13008	Add a new result .
13009	Wait for the task to be changed .
13010	Load the next job .
13011	Mark the job set as done .
13012	Add a result .
13013	Cancel all active jobs .
13014	Wait for all workers to finish .
13015	Distribute the available jobs .
13016	Add a new job set .
13017	Get the current job .
13018	Return the given job .
13019	Add a result .
13020	Called when a job set is done .
13021	Close the browser .
13022	Remove duplicates from a list
13023	Determines if the given object matches the given regex .
13024	Get all cached entries
13025	Get the region name .
13026	Filter entries based on filters .
13027	Get information about a host .
13028	Create an entry instance from a dictionary .
13029	Get an attribute .
13030	Sort the entries by attribute .
13031	Returns a string representation of the table .
13032	Create an instance from a boto3 instance
13033	Check if the filter matches the filter .
13034	Display the public ip address .
13035	Render a table .
13036	Add timestamp to event dict .
13037	Setup a logbook .
13038	Create a logger .
13039	Setup Celery .
13040	Get information about a worker .
13041	Delete a worker
13042	Create switch option .
13043	Configurable config section .
13044	Set options from config file
13045	Handler for config commands
13046	Create complete and execute command .
13047	Renders a list of columns .
13048	Renders a row to a row .
13049	Render a table .
13050	Prepare a list of strings to be inserted into the table .
13051	Return a color string for a given number .
13052	Calculate the color of a string .
13053	Generate a random color .
13054	Get input from a prompt .
13055	Checks username and password
13056	Check if token is valid .
13057	Decorator for views that require a token .
13058	Check if a process is running .
13059	Import a module and return it .
13060	Get the IP address of the internet .
13061	Make a request to the API .
13062	Prepare a dictionary of parameters to be uploaded .
13063	Serve the DNS server .
13064	Renders the template with the given attributes .
13065	Stream a command to stdout .
13066	Stream commands from a list of commands .
13067	Generates a stream of commands from a list of commands .
13068	Returns the number of days between two dates .
13069	Returns the path to the given command
13070	Builds the ssh command .
13071	Build the command to execute a scp command .
13072	Copy entries to remote_path
13073	Copy files from remote entry to remote_path .
13074	Run a command on multiple hosts .
13075	Connect to ssh entry
13076	Load a profile .
13077	Initialize a LsiProfile from the given arguments .
13078	Create a relationship .
13079	Get all related parts of a relationship .
13080	Load relationships from source .
13081	Add a part to this request .
13082	Load a part .
13083	Find the overrides for a given name .
13084	Creates a subclass from the given XML element .
13085	Parses input using chatl lxml .
13086	Build the JWT
13087	Assign the force field to an AMPAL object .
13088	Find the maximum radius of all parameters
13089	Make a dictionary of force field parameters .
13090	Convert to bytes .
13091	Yield segments that match a given name .
13092	Copy a directory to another .
13093	Open S3 bucket .
13094	Uploads a directory to S3 .
13095	Uploads a file to a bucket
13096	Upload an object to a bucket .
13097	Get all filenames in a directory .
13098	Return a list of all directories in a given directory .
13099	Create prefix for given dirname .
13100	Delete a file from the bucket .
13101	Login to LTD Keeper .
13102	Return the spoken text
13103	Delete a directory .
13104	Returns the URL for the current namespace
13105	Decorator to silence a function s namespace .
13106	Renders a breadcrumb for a project .
13107	Renders a breadcrumb for a project
13108	Computes the interaction energy of an AMPAL object .
13109	Returns the internal energy of an AMPAL object .
13110	Returns a sorted list of hotspots in the tree .
13111	Returns a token for the keeper
13112	Uploads a Ltd to LTD .
13113	Determine if the task should be skipped .
13114	Purge a surrogate key
13115	Register a build .
13116	Confirm the build URL .
13117	Recursively update a dictionary .
13118	Lists the ldmon survey .
13119	Command line interface .
13120	Entry point for pack_dir
13121	Split a path into parts .
13122	Find the file path and part of a file .
13123	Get the editor for the given filepath .
13124	Check if the module is valid .
13125	Generate a chart
13126	Write html to a chart
13127	Encode data into a chart .
13128	Patch json data .
13129	Returns html for a chart
13130	Convert a dictionary to a pandas DataFrame
13131	Write html to folder
13132	Creates a chart class based on the given dataframe
13133	Encode fields .
13134	Link to a GitHub user .
13135	Infer the app s tarball url .
13136	Build an app .
13137	Delete an app .
13138	Decorator to add an attribute to an iterator .
13139	Generate a random binary string .
13140	Random IP address .
13141	Generate a random date
13142	Get a session object .
13143	Make a request to Heroku API .
13144	Create a build .
13145	Check the status of a build .
13146	Generate an infinite sequence .
13147	Memoization decorator .
13148	Cache decorator for unique arguments .
13149	Register sub - commands .
13150	Returns the root argparse parser
13151	Get the description of a function .
13152	Get the docstring of the command .
13153	Run the command .
13154	Encode dataset .
13155	Returns a list of all athlete ids
13156	Get the last n - n activities .
13157	Request the activity list .
13158	Get the activity data for a given athlete .
13159	Return the endpoint for the given athlete .
13160	Get the URL for an activity .
13161	Perform a GET request
13162	Create a build .
13163	Creates a url with the given view .
13164	Get a random title .
13165	Generate a random person .
13166	Get the last name of the last name .
13167	Render options
13168	Set the dataset .
13169	Render the chart .
13170	Check the type of a chart
13171	Returns the final URL for the API .
13172	Wrapper around webbrowser
13173	Save the image to a file .
13174	Fetches the urlopen and returns it .
13175	Returns the image as an Image object
13176	Write the URL to a file - like object .
13177	Generate a checksum of the manifest
13178	Generate a decimal number .
13179	Decorator to turn a class name into an entity name .
13180	returns a dict of protected claims
13181	Get the keys as a list of JWKS
13182	Unpack a client metadata statement .
13183	Packs metadata statement .
13184	Evaluate the metadata statement
13185	Takes a metadata and a federation usage statement and replaces them with the relevant information .
13186	Extend the metadata for the metadata request .
13187	Parse command line arguments .
13188	Adds command line arguments to the argparse parser .
13189	Applies logging options to log files .
13190	Log a verbose message .
13191	Returns a dictionary mapping letters to letter frequencies
13192	Finds anagrams in a word
13193	Convert the class to an AMP class name .
13194	Transform a timeseries into a list of data points
13195	Get the last value from a timeseries .
13196	Validate page number .
13197	Get a single page of items from an iterator .
13198	Recursively chmod .
13199	Create an InternalSigningService for the given config .
13200	Create a signing service .
13201	Create a signed message .
13202	Create a new resource
13203	Update metadata statement
13204	Update the signature
13205	Yield the contents of a bundle
13206	Create a bundle .
13207	Returns a list of urls for the given asset type
13208	Render the HTML tags for this asset .
13209	Generate HTML tags for the given asset types .
13210	Ensure that the URL is a valid scheme .
13211	returns a list of links from a url
13212	Connect to AMP server .
13213	Returns a list of module names .
13214	Import service modules
13215	helper function to convert a param to lower and upper range
13216	take a list of field_list and return a new value
13217	Takes a list of datapoints or datapoints .
13218	Prints the current cursor .
13219	Print the current cursor .
13220	Gets the dependencies of a list of tasks .
13221	add default deps to project
13222	add default assettypes
13223	add default sequences to the project
13224	Create a new shot shot
13225	Add default projects to the project
13226	This function is called when a shot is created
13227	Create all tasks in the given department
13228	Preconnect a peer .
13229	Send a packet to the peer .
13230	Get a config value from a section .
13231	Decorator to add a function to the decorated function .
13232	Decorator to add a Cinder class to the decorated function .
13233	Decorator to add neutron events to the neutron service .
13234	Decorator to add a glance event processor .
13235	Decorator to add a function to an event processor
13236	Decorator to add a function to the decorated function
13237	Decorator to add a heat processor to a heat provider .
13238	Add a factory .
13239	Remove a factory .
13240	Create a connection to a remote broker .
13241	Receive data from a connection .
13242	Disconnect a connection .
13243	Call a remote command .
13244	Connect to the AMP server .
13245	Handle multiplexed connection .
13246	Called when data is received .
13247	Send data to the transport .
13248	Called when the connection is lost .
13249	Returns the protocol for the given connection identifier .
13250	Called when data is received .
13251	Disconnect the given connection .
13252	Centers a string centered on the current line .
13253	Prints the current clock on the right line .
13254	Return a string representing the version number .
13255	Identify the unit framework .
13256	Assert that value is convertible to target_unit .
13257	Pads data to block_size
13258	Unpads a block of data .
13259	Sign a request .
13260	Collect metadata statements for the given context .
13261	Pretty print a word .
13262	Argument parser .
13263	Prints the words in a wordlist .
13264	Called when data is received .
13265	Called when a type is received .
13266	Create a RPC function stub .
13267	Checks if a peerid is reachable
13268	Generate regex patterns
13269	Convert a string into an amp list .
13270	Convert an object to a string .
13271	Verify that the metadata statement is valid .
13272	Parses a JWKS response .
13273	Dump database to a temporary file .
13274	List databases .
13275	Get the md5 files for a given path .
13276	Sync all files in a folder
13277	Decorator for views that require user_token .
13278	Logs the user .
13279	Build submodules
13280	Returns a fresh instance of the appliance
13281	Load configuration from file .
13282	Create a self - signed JWT
13283	Create a JWT signed request signed by keyjar .
13284	Decorator to wrap the library .
13285	Reconstruct the contents of the given testdir .
13286	Entry point for tests .
13287	Return the letter score for a given letter .
13288	Calculate the score of a word
13289	Get a list of wordlists .
13290	Checks if a given word is valid .
13291	main entry point
13292	Run the script .
13293	Called when a request is received .
13294	Get command and responder function .
13295	Extracts the values from the request .
13296	Run the responder .
13297	Writes the response to the transport .
13298	Called when the connection is lost .
13299	Build the protocol for the given address .
13300	Create a KeyJar from a dictionary .
13301	Load a KeyJar from a string .
13302	Run a consumer process .
13303	Handles cinder processing .
13304	Process neutron consumer process .
13305	Process a glance customer process .
13306	Process a single request .
13307	Process a keystone event .
13308	Process heat customer request .
13309	Serve webserver .
13310	Print msg to stdout .
13311	Prints a message to stderr .
13312	Register a CommandSubclass .
13313	Registers a CommandSubclass .
13314	Convert value to string .
13315	Parse a string from a string .
13316	Update completers dictionary
13317	Starts the connection
13318	Initialize connection .
13319	Initialize the service modules .
13320	Initialize the consumer consumer .
13321	Initialize Cinder consumer .
13322	Initialize the neutron consumer .
13323	Initialize the broadcast consumer .
13324	Initialize the heatmonitor consumer .
13325	Enable listening for a given component .
13326	Get music info
13327	download song
13328	Execute the instruction .
13329	Load a global variable .
13330	Call a function .
13331	Dump a MySQL database to a temporary file .
13332	Render a ditaa file .
13333	Exit the application .
13334	Run the application .
13335	Change the current working directory .
13336	Recursively copy directory tree .
13337	Wrapper for debugging .
13338	Get the modification time of a file .
13339	Check if item has changed since last time .
13340	Read all files and update the cache .
13341	Remove all data from the cache .
13342	Scrape a feed
13343	Download the image .
13344	Check if the image has been modified .
13345	Compile a tag function .
13346	Return the name of the calling function .
13347	Get the defining component of a PE
13348	Command line entry point for ooau .
13349	Searches for the given symbol .
13350	Returns True if the package is contained in the root .
13351	Returns True if PE_PE_PE = False otherwise .
13352	Returns the name of the data type of a data type
13353	Get the related attributes of a RTA object .
13354	Creates an Enum . Enumeration .
13355	Create a bridge function for the given model
13356	Create an external entity .
13357	Constructs a function from a model .
13358	Convert a constant to a constant
13359	Create a function from a class .
13360	Create a function that returns a derived derived attribute .
13361	Recursively create class .
13362	Create a simple association
13363	Define a link between two objects .
13364	Recursively create an association .
13365	Create a fully - qualified component graph .
13366	Perform a single RPC call .
13367	Accept this message .
13368	Reject a call .
13369	Raise an exception .
13370	Establish a call .
13371	Establish a worker connection .
13372	Dispatch a reply .
13373	Guess the type name .
13374	Deserialize value into UUID .
13375	r
13376	r
13377	Retrieve a feature from the index .
13378	Retrieve multiple documents .
13379	Put items into the collection .
13380	Delete a document by id .
13381	Delete all documents in the index .
13382	Delete index .
13383	Perform a scan on the corpus .
13384	Return a sequence of IDs matching the given key ranges .
13385	Scan a prefix for a given prefix .
13386	Scan a prefix for a prefix .
13387	Generate fulltext features for a fulltext query .
13388	Return an iterator over fulltext ids matching query .
13389	Iterate over keywords matching the query .
13390	Iterate over keyword ids .
13391	Generate scan ids for the given feature .
13392	Return a list of feature names .
13393	Return a list of dicts suitable for filtering .
13394	Create the index .
13395	Create index mapping .
13396	Returns a mapping of indexed features to indexes
13397	Get list of properties for this field
13398	Returns a list of indexes for the index .
13399	Returns the total number of bytes in a dictionary .
13400	Count how many bytes have been processed .
13401	Return a string representation of the featureCounter .
13402	handle docopt options
13403	Default formatter .
13404	Convert a link to a link string .
13405	Returns a string representation of a unique identifier .
13406	Check the uniqueness of a Mapper class .
13407	Check integrity of a link
13408	Check the integrity of a subtype in super_kind
13409	Create a function that returns a sequence of features .
13410	Convert val to bytes .
13411	Put items into the cache .
13412	Delete all tables .
13413	Perform a scan on the table .
13414	Return an iterator for scan ids .
13415	Perform an index scan on the table .
13416	Create an index for an index prefix .
13417	Wrapper for index scanning .
13418	Apply prefix_prefix to the index .
13419	Define an index .
13420	Add an index to the index .
13421	Put value into the index .
13422	Yield the index keys for the given idx .
13423	Return index by name .
13424	Check pypi package name .
13425	Add direction to value .
13426	Get the type name of a type
13427	Return the requested attribute
13428	Builds the core type element for an XML node .
13429	Build an XML element for an enumeration node .
13430	Builds xml type element .
13431	Build a user type element .
13432	Builds the type for a particular type
13433	Build XML element for an object .
13434	Build an XML element for a complex type .
13435	Build XML Schema .
13436	Returns a prettified version of an XML string .
13437	Fetches a list of bottles .
13438	Set node information .
13439	Decorator to track the production of a function .
13440	r \ x1
13441	r
13442	r
13443	r
13444	r
13445	r
13446	r
13447	r
13448	r
13449	r QMARK .
13450	r A LESTAN
13451	r
13452	r \ x .
13453	Create queue .
13454	Delete a queue
13455	List all queues
13456	List all exchanges
13457	Method to purge a queue .
13458	Create a MIME message .
13459	Read the image and return it as text .
13460	Check if the text is visible in the input string .
13461	Parse command line options .
13462	Serialize a value into a serializable form .
13463	Serialize an association .
13464	Serialize a class to SQL
13465	Entry point for the command line tool .
13466	returns a list of elements
13467	Partitions the collection with the given condition .
13468	Run the code .
13469	Add bidi context
13470	Find a link between two topics .
13471	Set the attributes of this link to the target .
13472	Compute the lookup key for a given instance from a given instance .
13473	Compute the index key for the given instance to_instance .
13474	Returns the type of the given attribute name
13475	Create a new instance .
13476	Iterate over all registered metaclasses .
13477	Define a new meta class .
13478	Send multiple messages .
13479	recv_multipart_multipart_multipart
13480	Print out dead code .
13481	Parses email addresses .
13482	Decorator for RPC functions .
13483	Return a dictionary of the RPC spec for the given app .
13484	Normalize postcode middleware .
13485	Gets the next value .
13486	Accepts a symlink node .
13487	Accept a C C .
13488	Accept a PEP_PE .
13489	Gets the brightness of the image .
13490	Match pattern .
13491	Find the character in the document .
13492	Return a QTextEditEdit for the current character position .
13493	Called when the cursor position is changed .
13494	Return the exception info .
13495	Create an input hook for Qt4 .
13496	Get a mapper by name
13497	Decorator to register a url pattern .
13498	Decorator to add a URL to a URL .
13499	Add a pattern to the registry .
13500	Add a path to the registry .
13501	Calls the given url and returns the result .
13502	Execute the command .
13503	Called when the cursor is pressed .
13504	Return True if shift modifier is pressed .
13505	Get the history of a substring .
13506	Return the next history in the input buffer .
13507	Handle an execute reply .
13508	Checks if the history is locked .
13509	Returns the edited history for the given index
13510	Set the history
13511	Store the current state of the input buffer .
13512	Called when the connection is closed .
13513	Build a record collection from a DataFrame
13514	Convert collection to pandas DataFrame .
13515	Takes a DataFrame and returns a Pandas DataFrame .
13516	Set attributes from kwargs
13517	Subscribes all subscribed topics
13518	Handle a log message .
13519	Sort a list of lists .
13520	Return an iterator over the given reference .
13521	Convert a notebook to a new notebook .
13522	Return the platform supported by this platform
13523	Return importer for given path item_item_item .
13524	Return a StringIO object
13525	Parse version string into a tuple .
13526	Return True if setuptools should be overridden .
13527	Add a dist
13528	Find all installed plugins in the given plugin_env .
13529	Return the cache path for the given archive name .
13530	Parse an entry point .
13531	Return parsed pkg_info . pkg_info
13532	Compute the dependency map .
13533	Extract filename and format from filename .
13534	Collapse leading whitespace from the header .
13535	Remove the event filter .
13536	Reimplemented by the event handler .
13537	Return the current text cursor .
13538	Update the currently selected item .
13539	Register the admin site with the given app name .
13540	Return a list of disk partitions .
13541	Returns a tuple of CPU cpu times .
13542	Return a list of cpu times per system
13543	Read raw input from the console .
13544	Read raw data from stdin .
13545	Updates the visibility of the tab bar .
13546	Create a tab with the current kernel and return it .
13547	Add a frontend tab .
13548	Adds an action to the menu .
13549	Create dynamic magic function .
13550	Populate the menu menu menu .
13551	Closes the current tab
13552	Generate a hash of the password .
13553	Returns True if the passed passphrase matches the passed passphrase .
13554	Return a Jupyter for a boolean button .
13555	Return an indented short title .
13556	Collects the editable booleans from the list of actions .
13557	Renders a boolean value from an object .
13558	Check if the user has permission to change the user .
13559	Check if user can delete permission .
13560	Add nodes to the graph .
13561	Makes a bintree .
13562	Submit jobs to the graph .
13563	Ensure that the tree is valid .
13564	Creates a color table for the given class .
13565	Return a copy of this color scheme .
13566	Add a color scheme .
13567	Set the active color scheme .
13568	Absolute path to the home package directory .
13569	Handles incoming messages .
13570	handle stdin reply
13571	Wait for kernel to finish .
13572	Set the style of the widget .
13573	Get the format for a given token .
13574	Get format from document .
13575	Returns a QTextCharFormat object for the given token .
13576	Find command in PATH .
13577	Normalize a path .
13578	Raise an exception if the namespace is not a namespace .
13579	Check that entry points are valid .
13580	Is the last blank blank?
13581	Return true if the source of the source code is a valid two blanks .
13582	Replace assignment with system system .
13583	Applies assignment to ipython notebook
13584	Remove leading whitespace from a classic prompt .
13585	Replace IPython prompt with whitespace .
13586	Push a list of lines to the interpreter .
13587	Return whether there are more than one input .
13588	Find the indentation of a given line
13589	Store the given list of lines .
13590	Reset the source and raw data
13591	Process cell magic .
13592	Append lines to line_mode .
13593	Transform a single cell
13594	Populates an IPython input block .
13595	Initialize the set observers
13596	Called when a notification is received .
13597	Return set of observers for a given ntype
13598	Add a callback for an observer .
13599	Create a new job
13600	Update the status lists .
13601	Print group information
13602	Flush a group .
13603	Return a new status report .
13604	Report the status of all running jobs .
13605	Initialize the job .
13606	Insert value at index .
13607	Return a shallow copy of this object .
13608	Declare a variable .
13609	Declare a list variable .
13610	Declare a set variable .
13611	Set the cwd .
13612	Move the current state to another .
13613	Calculate the energy of a state
13614	Return a dict with default values .
13615	Check the existence of the table .
13616	Convert a list to a dictionary .
13617	Render a check .
13618	Print a warning message .
13619	Parse config file .
13620	Convert list of rows to HTML
13621	Return an HTML link .
13622	Generate HTML file for given URL .
13623	Return css file link
13624	Creates an HTML tag .
13625	Subtract value from value .
13626	Multiplies value by arg .
13627	Divide value by arg .
13628	Modify value by arg .
13629	Get verbose verbose name .
13630	Splits the input into a single line and returns the first line and the rest of the input .
13631	Add options to the parser .
13632	Add a builtin value .
13633	Remove a builtin function .
13634	Deactivate builtin .
13635	Determine the base URL for the given index .
13636	Yields the explicit links found in the document .
13637	Return a list of shell names .
13638	Run coverage code .
13639	Add an action
13640	Append an action code to the parser .
13641	Handles the command - line interface .
13642	Print help for coverage .
13643	Handles help .
13644	Check if args are valid .
13645	Execute the script .
13646	Print debug information
13647	Unserialize an object .
13648	Set the display hook .
13649	Log exceptions raised by the decorated function .
13650	Check if url is a protobuf URL .
13651	Validate url
13652	Validate a URL container .
13653	Retrieve a value from the global namespace .
13654	Select n random ports .
13655	Decorator to create Remote Function .
13656	Decorator to create a parallel function .
13657	Apply a sequence of sequences .
13658	Get the last n characters from the readline .
13659	Set auto - indentation .
13660	Initialize logstart start
13661	Stores the sys module state .
13662	Restore the state of the sys module .
13663	Register a post function
13664	Creates a fake main module .
13665	Cache the main module namespace .
13666	Initialize the user namespace .
13667	Return a list of all namespace references
13668	Reset the registry .
13669	Delete a variable
13670	Delete all keys that match a regular expression .
13671	Push variables to user namespace .
13672	Look up an object .
13673	Extract a property from an object .
13674	Wrapper for _find
13675	Wrapper for inspect .
13676	Initialize the shell history .
13677	Display exception traceback .
13678	Show the traceback of an exception .
13679	Print a traceback to stdout .
13680	Show the traceback of an exception .
13681	Insert the current input into the current line .
13682	Perform completion .
13683	Sets a custom completer
13684	Set the namespace of the completer frame
13685	Run a line magic magic .
13686	Find the magic for the magic magic .
13687	Define a macro .
13688	Run a command on IPython .
13689	Execute rewrite command .
13690	Return a dictionary of variable names .
13691	Given a dictionary of expressions return a dictionary of user - defined variables .
13692	Evaluate expression .
13693	Safely execute a file .
13694	Run the cell magic magic
13695	Run a single cell .
13696	Execute AST nodes
13697	Enable or disable a pylab notebook .
13698	Expand a variable with the given depth .
13699	Create a temporary temporary file and return it .
13700	Extracts input lines from input range .
13701	Find user input code .
13702	Clean up after exit .
13703	Publish message to destination .
13704	Send a message to a destination .
13705	Decorator to skip tests .
13706	Decorator to specify a test failure .
13707	Decorator to mark a function as deprecated .
13708	List all profiles in a directory
13709	Lists all registered bundles .
13710	Find the distribution with the given req .
13711	Run a command .
13712	Returns the path of the file .
13713	Return the next line .
13714	Send data to the child process .
13715	Send a VINTR instruction .
13716	Prepare a compiled regex pattern .
13717	Expect the pattern to match the pattern
13718	Waits until a match is found .
13719	Prepare a regular expression pattern .
13720	Search for strings in the buffer .
13721	Search the buffer .
13722	Create a listener for log messages .
13723	Unpack a directory into a directory structure .
13724	Emit a message .
13725	Returns the last error
13726	Execute a command and return its output .
13727	Find source file for given filename .
13728	Returns the list of executed arcs in the file .
13729	Return a list of all arcs that are not covered by this node .
13730	Return a list of all arcs that are unreicted .
13731	Return a list of line numbers .
13732	Return the total number of branches
13733	Return a dictionary mapping branch lines to missing branches .
13734	Returns a dictionary with the number of branch lines .
13735	Set the precision .
13736	Calculate coverage .
13737	Returns a string representation of the PC .
13738	Highlight the text inside a string .
13739	Highlight the given string .
13740	Highlight keywords .
13741	Run a function in the context manager .
13742	Unquote trailing quotes .
13743	Indent a string
13744	Return a marquee string .
13745	Removes whitespace from screen .
13746	Recursively dedent the given text .
13747	Wrap paragraphs in a text string .
13748	Find the optimal number of columns in a list .
13749	Helper function to get an item from a list
13750	Compute an item matrix for a list of items .
13751	Returns a list of strings separated by fields .
13752	Build the kernel argument list
13753	Setup ssh connections .
13754	Pretty print an object .
13755	Print obj to stdout .
13756	Get the MRO of an object .
13757	Default pretty print function .
13758	Create a pprinter for a sequence .
13759	Create a pprinter property for a dict .
13760	Prints a super class .
13761	Internal helper for debugging .
13762	Print type information .
13763	Print function .
13764	Print the exception class .
13765	Decorator to register a function for the given type .
13766	Decorator to mark a function as deprecated .
13767	Writes an object to the output buffer .
13768	Add a breakable break .
13769	End a group .
13770	Flush the buffer .
13771	Return pretty printer .
13772	Returns a tuple of terminal color schemes for the given exception .
13773	Writes row to ODD
13774	Get the current text from the win32win window .
13775	Get the current clipboard .
13776	Use tkinter to get text from Tkinter
13777	get build prefix
13778	Replace keys in a dictionary .
13779	Recursively extract dates from a string .
13780	Convert datetime objects to strings .
13781	Convert a datetime object to ISO8601 .
13782	Convert any object to bytes .
13783	Check if the site directory is installed .
13784	Write a script to the install directory .
13785	sleep time in seconds
13786	Create a parser for this command .
13787	Convert pyx files to CX files
13788	Connect to a connection .
13789	Build the package finder .
13790	Handle logging level changes .
13791	Get the default logger .
13792	Handle flags changed .
13793	Print help for all aliases .
13794	Print help for flags .
13795	Print the subcommands .
13796	Print help for the command .
13797	Print examples .
13798	Updates the config with the given configuration .
13799	Initialize the subcommand .
13800	Flatten the flags of this class into a nested dictionary .
13801	Parse command line arguments .
13802	Load a config file .
13803	Generate the configuration file for this class .
13804	Downsample a numpy array .
13805	Format an info dictionary .
13806	Write a message to stdout .
13807	Called when a config is changed .
13808	Return help text for a class
13809	Return the help text for a trait .
13810	Generate a section of a class .
13811	Clear all instances of this MRO .
13812	Create an instance of this class .
13813	Format a failure .
13814	Show crash handler .
13815	Flush all pending events .
13816	Emits the channel signals .
13817	Read data from file .
13818	Read the output of a file .
13819	Handle a subprocess .
13820	Split a string into multiple tokens .
13821	Compress a dhist .
13822	Returns the magics class
13823	records a magic magic cell
13824	Create a magic marker for a method .
13825	Decorator to create a magic marker .
13826	Return a dictionary with the documentation for the magics
13827	Registers given magic objects .
13828	Register a new magic function .
13829	Formats a string in LaTeX format .
13830	Parse options .
13831	Define an option with the given fn .
13832	Open a page in IPython notebook .
13833	Create a task with the given callable .
13834	Get task info by label
13835	Get the callable from the task info .
13836	Calculate the next run .
13837	Submit task to channel .
13838	Run the task .
13839	Run Async .
13840	Run a task .
13841	Runs a single callable .
13842	Find the URL for the controller key .
13843	Create an IPython kernel .
13844	Read the test steps from the test suite .
13845	Create an interrupt event .
13846	Listen for windows .
13847	Return a dict of objects that match regex patterns .
13848	List all objects in a namespace .
13849	Validate options in dictionary .
13850	Ensures that the current active figure is not active .
13851	Flush all figures .
13852	send a figure to IPython notebook
13853	Load an IPython extension .
13854	Unload an IPython extension .
13855	Generate random ports .
13856	Initialize the notebook .
13857	Handles SIGINT signal .
13858	Ask the user to confirm and exit .
13859	Shutdown the kernel .
13860	Generate market price options .
13861	Replace all occurrences of a dictionary .
13862	Renders the template .
13863	Base shell command .
13864	Create a zip file .
13865	Add new version to metadata . txt
13866	Return True if obj is mappable .
13867	Get partition from seq .
13868	Monkey patch pyxpect s pexpect .
13869	Run the script in a file .
13870	Run the given source .
13871	Generate coverage report .
13872	Generate the XML file for the analysis .
13873	Download a file to disk .
13874	Reduces a frequency list
13875	Compute the n - digit frequency frequencies for a given file .
13876	Reads a txt file
13877	Calculate frequency frequencies for a set of digits
13878	Calculate the frequency of two digits .
13879	Calculate the frequency of a set of digits
13880	plot 2 digit frequency spectrum
13881	Plot one digit frequency spectrum
13882	Print a debug message .
13883	Reverse the view .
13884	Determine if a class is private .
13885	Creates a test suite .
13886	Takes a source code and prints it .
13887	Run a script .
13888	Write a script to a module .
13889	Return a dict containing all the hashes in hashroot
13890	compress all hashes in hashroot
13891	Return a list of keys matching glob pattern .
13892	Check if the given record is allowed .
13893	Returns True if the record matches the given record .
13894	Format the error record .
13895	Configure an interactive shell .
13896	Main entry point for IPython .
13897	Returns a function that creates the new csv writer
13898	Prepare the translations dir .
13899	Write POI entries .
13900	Write the header to a po file
13901	Subscribe to a user .
13902	Initialize the parser .
13903	Attempt to run a Python module .
13904	Run a Python file .
13905	Make a Python code object from a Python file .
13906	Make a Python code object from a Python file .
13907	Convert an item matrix to HTML .
13908	Set the current value .
13909	Cancel tab completion .
13910	select the index
13911	Selects up the bottom of the tree .
13912	Select down down .
13913	Selects the left corner .
13914	Selects the right .
13915	Updates the list of items .
13916	Return a dictionary mapping word frequency to word frequency .
13917	Print the n words in the frequency dictionary .
13918	Convert to a string .
13919	Write to a file .
13920	Validate pin pin .
13921	Sends a shared pin to the topic .
13922	Delete a shared pin .
13923	Send a PIN to a user .
13924	Delete a user pin .
13925	Subscribe to a topic .
13926	List all subscribed topics for a given user .
13927	Decorate a function with a Monitor .
13928	Begins the progress monitor .
13929	Context manager for executing tasks .
13930	Create a subtask for the given units .
13931	Update the progressmonitor .
13932	Create a new progress monitor .
13933	Update the progress .
13934	Open an IPython notebook .
13935	Makes sure that the package should be restored .
13936	Load a list of PyPI config files .
13937	Load the configuration from disk
13938	Read the config file as a dictionary .
13939	Load a flag from a config object .
13940	Decode argv to unicode .
13941	Load configuration from IPython .
13942	Loads the configuration
13943	Parse command line arguments .
13944	Convert the flags to a Config object
13945	Find a module by name .
13946	Call the callback function with the stop data .
13947	Notify the start of the process .
13948	Called when the process is stopped
13949	Interrupt the server .
13950	Return command line arguments .
13951	Start processing .
13952	send a remote file
13953	fetch a file from remote
13954	Return the number of engine engines .
13955	Start the engines .
13956	Starts a WinC job
13957	Return a default context dictionary .
13958	Extract the job id from the output .
13959	write batch script to disk
13960	Start the execution job .
13961	Create QtMenu for given cursor position .
13962	Append a jpg to the image .
13963	Append png to the display .
13964	Append an svg
13965	Add image image .
13966	Copies an image to the clipboard .
13967	Get image resource .
13968	Insert an image .
13969	Insert SVG data into the table .
13970	Save an image
13971	Called when the exit code is done .
13972	Initialize the environment .
13973	Apply a command to the zmq prompt .
13974	Ask the user to exit .
13975	Set the next input for the given text .
13976	Read configuration from file .
13977	Return a list of values separated by the option .
13978	Return a list of values separated by the option .
13979	Parses command line options .
13980	Set attributes from keyword arguments .
13981	Load configuration from a file .
13982	Set an attribute from a config option
13983	Expand user - ~ ~ ~astropy . tilde . tilde
13984	Set the delimiter
13985	Split a line by cursor position .
13986	get global matches
13987	Takes an attribute string and attempts to match the attribute .
13988	Called when the dialect is changed .
13989	check for file matches
13990	Find aliases that match the given string .
13991	Given a text string return a list of matches .
13992	Returns the default arguments for the given object .
13993	Completes completion .
13994	handle line completions
13995	Return True if the record matches one of the tests .
13996	Returns a list of records matching the filter
13997	Extract a subdict from a dict .
13998	Return True if the prompt should be printed
13999	Write out the output prompt .
14000	Write format data to IPython console .
14001	Log output .
14002	Raise an InvalidOperationException if the object is frozen .
14003	Convert MySQL timestamp to Timestamp .
14004	Handle an event loop .
14005	Dispatch a control message .
14006	Dispatch a shell message .
14007	Start the dispatcher .
14008	flush all shell streams
14009	Publish a pyin function .
14010	Handle an abort request .
14011	Send clear reply message .
14012	Get the topic for this engine .
14013	Called when shutdown is invoked .
14014	Called when the context is started .
14015	Remove modules from the context stack .
14016	Return absolute path of given path .
14017	Return True if the given filename is a file - like object .
14018	Check if the given object is a class .
14019	Check if the given path is a package .
14020	Get package name from filename .
14021	Convert a label to a string .
14022	Returns a function to get the last key for a regular expression .
14023	Transforms a function into a new decorator .
14024	Creates a class based on the given module .
14025	Gets the system CPU time .
14026	Returns the command line for the current process .
14027	Get open file descriptors .
14028	Get a list of process connections for this process .
14029	Check if a user has a group .
14030	Resolve a class by fully qualified name .
14031	Return the usage percentage .
14032	Memoization decorator .
14033	Decorator to mark functions as deprecated .
14034	Login to Google API .
14035	Get the GDoc key from the URL .
14036	Ensures that the temp directory exists .
14037	Clear temporary files .
14038	Upload file to GDoc .
14039	Synchronize gocs to local file .
14040	Download data from GDOCs .
14041	Upload po files to Google Docs .
14042	Clear the empty CSV file .
14043	Create a new QConsole instance
14044	Check if url is accessible
14045	Check if the given URL has the given contents .
14046	Get the code for a given URL .
14047	Return True if content_type is the content type of content_type .
14048	Check if the given URL has the given code .
14049	Validate data .
14050	Clear the console output .
14051	Tries to find the executable
14052	Create a list of CodeUnit objects .
14053	Return the root name of the directory .
14054	Open the source file for this coverage .
14055	True if this file should be a Python file .
14056	Return the total seconds in seconds .
14057	Get the result .
14058	Wait for the message to complete .
14059	Get a dictionary of job results .
14060	Abort this message .
14061	Return the amount of time spent on the server .
14062	Wait for tasks to finish .
14063	Publish a display publish
14064	Wait for output to finish .
14065	Wait for the message to complete .
14066	Absolute path to absolute path
14067	Prepare a list of patterns .
14068	Return the separator from a string
14069	Find all python files in a directory .
14070	Remove relative filename from filename .
14071	Return canonical filename for given filename .
14072	Extract data from a zip file .
14073	Returns True if fpath matches the given fpath .
14074	Return True iff path matches pattern .
14075	Replace aliases in path .
14076	Start a Qt4 event loop
14077	Run a wx event loop .
14078	The main loop for the kernel .
14079	Loop over a GTK kernel .
14080	Run a loop on a kernel .
14081	Enable an IPython GUI .
14082	Calculate GOEA .
14083	Calculate the difference between center eigenvalues .
14084	Calculate the difference between num_eigenvalues .
14085	Initialize this Pipeline .
14086	Parse a step configuration file .
14087	Parse the step configuration .
14088	Initialize crash handler
14089	Load the configuration file .
14090	Initialize the IPython directory .
14091	Generate default config file
14092	Write data to file .
14093	Erases the file .
14094	returns a dictionary with the data
14095	returns a dictionary with all arcs
14096	Write the line data to a file .
14097	Read a file .
14098	Read raw data from file .
14099	Read a file and return lines and arcs .
14100	Combine parallel data files .
14101	Update the line_data dictionary .
14102	Add arc data to the arc .
14103	Add the given filename to the given file .
14104	Summarize the contents of the file .
14105	Returns a generator that yields all lines of the specified line .
14106	Run the main loop .
14107	Replace history items in rl .
14108	Read raw input .
14109	Edit syntax errors .
14110	Determine if an error should be triggered .
14111	Exit the program
14112	Return the url and revision of the VCS URL
14113	Create a new master master
14114	Initialize the colors for the IPython widget .
14115	Return a tuple with the information about this instance .
14116	convert ROJ to numpy array
14117	Find the source code for an object .
14118	Set the colors of the console
14119	Toggle color scheme
14120	Convert traceback to text .
14121	Return a formatted traceback of an exception .
14122	Formats the list .
14123	Formats an exception for printing .
14124	Show the exception only for the given type and evaluator
14125	Get the debugger .
14126	Set mode .
14127	Decorator for views that require a group .
14128	Recursively imports from a module from a list .
14129	Append a single line
14130	Creates a new section
14131	Get a function by name
14132	Returns code for expr
14133	Render the template .
14134	Apply dots to value
14135	Render a template .
14136	Return a dictionary of formatters for this config .
14137	Registers a function for the given type .
14138	Registers a function for the given type .
14139	Handle float precision .
14140	Return a list of user config files .
14141	Parse command line options .
14142	Configure logging .
14143	Configure the nose .
14144	Output a page of pages .
14145	Displays a pager page .
14146	Show a pager file
14147	Get pager command .
14148	Get start of pager
14149	Print string to screen .
14150	Pretty print basic information
14151	Convert Python object to PNG .
14152	Convert Python object to PNG format .
14153	Return True if object can be printed .
14154	Return the latex representation of an object .
14155	Add options to the parser .
14156	Validate a list of strings
14157	Validate that all keys are strings
14158	Run the IOLoop .
14159	Handle incoming messages .
14160	Execute code .
14161	Complete a request .
14162	Request information about an object
14163	Send a history request .
14164	Send a shutdown request .
14165	Flush all pending messages .
14166	Prompt the user for input .
14167	Start channels .
14168	Stop all channels .
14169	Check if the channel is running .
14170	Load connection information from file
14171	Write the connection_file to the file
14172	Launch a kernel on the local interface .
14173	Shutdown the kernel .
14174	Restart the kernel .
14175	Kills the kernel .
14176	Interrupt the kernel .
14177	Send signal to kernel .
14178	Check if the connection is alive .
14179	Get shell channel .
14180	Return the sub channel .
14181	Return the hb channel .
14182	Bind kernel instance to IPython .
14183	Log debug messages .
14184	Get the list of extension classes .
14185	Run pre - step pre - step .
14186	Run the post - step after each extension .
14187	Finalize all extensions .
14188	Walks an egg_dir
14189	Return True if the module is valid False otherwise .
14190	Launch a new IPController app and launch it .
14191	Save connection info to a file .
14192	Load config from engine json file
14193	Load secondary configuration from JSON .
14194	Execute cell in parallel .
14195	Enable autopx cell
14196	Disable autopx .
14197	Run a single cell .
14198	Process a heartbeat message
14199	Run a task .
14200	Remove task from database .
14201	Monkey patches the protocol for the Agent .
14202	Add an attribute to an object .
14203	Accept a new connection .
14204	Reject a pending connection .
14205	Get a proxy for this endpoint .
14206	Called when the form is valid .
14207	Delete the object .
14208	Ensure user is logged in .
14209	Generate coverage report .
14210	Check if all modules are available .
14211	Open an IPython editor .
14212	Try to fix an error editor .
14213	get the clipboard
14214	Add a function to the chain .
14215	Get metadata for a path
14216	Configure the plugin .
14217	Import an object by its name .
14218	Attempts to attempt a password on the server .
14219	Try to authenticate with passwordless .
14220	Try to connect to a paramiko .
14221	Connect to a tunnel
14222	Open a tunnel
14223	Stop scheduling tasks .
14224	Unwrap an exception .
14225	Registers an engine
14226	Unregisters an engine message .
14227	Handle a reply message .
14228	Flush notifications from the server .
14229	Flush results from the socket .
14230	Send control messages to the client .
14231	Flush all ignored control messages .
14232	Receive IOPub messages from the socket .
14233	Starts spin forever .
14234	Stop the spin thread .
14235	Synchronize notifications .
14236	Wait for jobs to finish .
14237	Send a request to a socket .
14238	Send an execute request .
14239	Get the result of this asyncHub .
14240	Queue the status of the engine
14241	Purge the results from the engine .
14242	Retrieve hub history .
14243	Send a query to the database .
14244	Return a set of opcodes for the given names .
14245	Get the byte parser .
14246	Returns a set of lines that match the given regexes .
14247	Parse the raw text .
14248	Returns the first line of a line
14249	Returns a set of lines in the given list of lines .
14250	Parse the source .
14251	Returns a list of all arcs in the byte_parser .
14252	Return a dictionary containing the number of line breaks .
14253	All child parsers .
14254	Generator that yields byte numbers .
14255	Find all the lines of this parser .
14256	Return a string representation of a block stack .
14257	Split the code into chunks .
14258	Check that the given chunks are valid .
14259	Return an iterator over the arc lines .
14260	Returns a list of all child parsers .
14261	Returns all arcs in this parser .
14262	Add options for coverage .
14263	Initialize coverage .
14264	Generate coverage report
14265	Return True if the given file can be used .
14266	Generate alternative interpretations for a source distribution .
14267	Open URL with authentication .
14268	Retrieve a distribution for a given requirement .
14269	Get the parent module .
14270	Return the root topic
14271	Render a template .
14272	Configure the plugin .
14273	Format the error and capture the output .
14274	Split data into n num elements .
14275	Convert a notebook object to its version .
14276	Convert hex color to RGB
14277	Return a dict with the colors for a given style
14278	Get font from given family .
14279	Remove the prompt from the IPython notebook .
14280	Handle a history request .
14281	Handle pyout output .
14282	Handle display data .
14283	Load the channel history .
14284	Execute the given file .
14285	Process an error message .
14286	Process an action payload .
14287	Set default style style
14288	Open an IPython editor .
14289	Makes an in - progress span of a prompt .
14290	Makes a prompt for a prompt .
14291	Called when the control sheet is changed .
14292	Called when the syntax is changed .
14293	Handle the response from CloudStack .
14294	Signs the request_parameters and returns the signature .
14295	Replace keys with their values .
14296	Get virtual memory usage .
14297	Get system CPU CPU time .
14298	Get uids of process uids .
14299	Get the gids of the process .
14300	Get the number of threads in the process .
14301	Returns a list of open file descriptors .
14302	Returns the commit hash for a given package .
14303	Return package information .
14304	Return a string containing the package information .
14305	Return the number of CUDA cores .
14306	Get the number of CPUs available on the system
14307	Returns the next set .
14308	Fetch single row
14309	Fetch one or more rows .
14310	Fetch all rows .
14311	Connect to peers .
14312	Convert a JSON string to a notebook .
14313	Read a notebook from a Python string .
14314	Return reads from a string .
14315	Wrapper around nbwrite
14316	Write data to a file .
14317	Convert ipynb files to json
14318	Load value from dictionary .
14319	Return True if name matches this rule .
14320	Returns a boolean indicating whether the given class should be used .
14321	Determine if a directory is wanted .
14322	Determine if a file should be requested .
14323	Returns True if the given function is wanted .
14324	Determine if a method wants to be requested .
14325	Determine if the given module is wanted .
14326	Return a list of lines from a file .
14327	Print a list of lines .
14328	Print a list of lines .
14329	\ xdef . pdef
14330	Returns the conversion factor between two currencies .
14331	Convert currency to currency
14332	Compute market return for given date .
14333	Get the encoding of a stream .
14334	Return default encoding .
14335	Write the connection to the file
14336	Initialize the heartbeat .
14337	Log connection info
14338	Initialize session .
14339	Initialize the IO socket .
14340	Initialize the kernel .
14341	Create a connection to the controller .
14342	Register the controller
14343	Convert HTML to text .
14344	Convert markdown to text .
14345	Convert a domain to a FQDN .
14346	Sets up the option parser .
14347	Configure noseExclude .
14348	Determine if a directory is requested .
14349	Return True if this is a dynamic library .
14350	Call each function in a list of functions .
14351	Call each function in reverse order .
14352	Append a function to the list .
14353	Insert function at index .
14354	Formats the usage of the command .
14355	Initialize the application .
14356	Write the pid file .
14357	Remove the pid file .
14358	Get PID from file .
14359	Construct a parser for a magic function .
14360	Get the real name of a magic function .
14361	Highlight the block .
14362	Rehighlight the block .
14363	Sets the current offset .
14364	Copies the text to the clipboard .
14365	Execute a shell command .
14366	Called when the prompt is finished .
14367	Return True if tab pressed .
14368	Add shortcuts to clipboard .
14369	Filter a key press event .
14370	Inserts the prompt prompt .
14371	Handle a complete reply .
14372	Silently execute a callback .
14373	Handle an exec callback .
14374	Handle a reply .
14375	Handle input request .
14376	Called when kernel is dead .
14377	Handle object info reply
14378	Handle pyout .
14379	Handle stream messages .
14380	Handle a shutdown message .
14381	Execute a local file
14382	Interrupt the kernel .
14383	Reset the kernel .
14384	Restart the kernel .
14385	Show the call tip .
14386	Send a completion request to the kernel channel .
14387	Process an error message .
14388	Process an execute OK message .
14389	Called when the document contents change .
14390	Add a plugin .
14391	Chain all registered plugins .
14392	Generator for all plugins .
14393	Run a simple method on the plugins .
14394	Configure the plugin .
14395	Load all registered plugins .
14396	Load plugins .
14397	Convert a string to PNG format .
14398	Convert latex string to HTML .
14399	Convert a string to an image .
14400	Check if the package is installed .
14401	Return an iterator over the processes .
14402	Return the current CPU usage .
14403	Return the object as a dictionary .
14404	Get the name of the current process .
14405	The exe executable .
14406	Get the children of this process .
14407	Get CPU percent .
14408	Get the current memory usage .
14409	Get memory maps .
14410	Whether this process is running .
14411	Suspend the current process .
14412	Resumes the current process .
14413	Kill the current process .
14414	Wait for an event .
14415	Wrap gtk kernel .
14416	Wrap gtk . gtk
14417	Returns True if the given identifier is shadowed .
14418	Initialize the transformer .
14419	Register a transformer .
14420	Unregisters a transformer .
14421	Initialize the checkers .
14422	Register a checker .
14423	Unregisters a checker .
14424	Initialize handlers .
14425	Register a handler .
14426	Unregisters a handler .
14427	Preprocess the given line_info .
14428	Find handler for given line_info .
14429	Transform a single line .
14430	Preprocess a single line .
14431	Preprocess input lines .
14432	Check if line_info is available .
14433	Checks if the line_info is valid .
14434	Return handler for given line_info .
14435	Check if alias is shadowed .
14436	Process line_info .
14437	Expand aliases .
14438	Handles the magic command .
14439	Generate ipython command line
14440	Handle a line .
14441	Handle the given line .
14442	Reimplemented to hide the tooltip .
14443	Stop the hide timer .
14444	Overridden method to paint the callTipWidget .
14445	Show the call info
14446	Show the tip tip of the current line .
14447	Hide the cursor position .
14448	Decorator to create a proxied property .
14449	Convert path to absolute .
14450	Wrapper for jsonschema validation .
14451	Return the masked dictionary as a dict
14452	Returns True if there is no global site package .
14453	Calculate the frequency frequency for each target .
14454	Convert a function to a view function .
14455	Return a list of aliases for the current platform .
14456	Define an alias .
14457	Define an alias .
14458	Validate an alias command .
14459	Call an alias .
14460	Transform an alias to a command .
14461	Expand aliases .
14462	Add help directive .
14463	Reset all attributes to default values .
14464	Split a string into separate actions .
14465	Returns the QColor corresponding to the given color .
14466	Get QTextCharFormat
14467	Generate a new JWT
14468	Decorator to acquire lock .
14469	Remove all expired tokens
14470	Check if token is already used .
14471	Validate a JWT
14472	Create a semaphore .
14473	Get the common prefix of a list of items .
14474	Filter key press events .
14475	Return the size of the widget .
14476	Check if cursor is cut .
14477	Whether the clipboard can be paste .
14478	Clear the input buffer .
14479	Cuts the cursor .
14480	Execute the input .
14481	Get the input buffer .
14482	Sets the input buffer .
14483	Sets the font widget .
14484	Pastes text into clipboard .
14485	Print the widget .
14486	Prompt the cursor to the top cursor .
14487	Reset the font .
14488	Perform a custom insert command .
14489	Append an HTML string to the display .
14490	Append an html fetching plaintext fetching text .
14491	Append plain text to the stream .
14492	Clears the input buffer .
14493	Completes completion with given items .
14494	Fills the temporary buffer with given text .
14495	Check if a control key is down .
14496	Create the control interface .
14497	Create a page control control .
14498	Intercept a key press event .
14499	Get the text of a block
14500	Get the end cursor .
14501	Get the column s column number .
14502	Get line from input buffer .
14503	Get the prompt cursor .
14504	Get selection cursor
14505	Insert a continuation prompt .
14506	Insert HTML into the given cursor .
14507	Insert HTML into plaintext .
14508	Insert plain text .
14509	Keep the cursor position .
14510	Cancel keyboard completion .
14511	Insert text into the page .
14512	Marks the prompt as started .
14513	Read a single line .
14514	Sets the prompt prompt .
14515	Sets the top cursor .
14516	Shows the prompt .
14517	Adjusts the scrollbar s scrollbars .
14518	Extract metadata .
14519	Copy a config file to the IPython package .
14520	Create a profile directory .
14521	Find a profile directory by name .
14522	Return a key that can be used for comparison operations .
14523	Read a file .
14524	Return a list of lines from multiple command lines .
14525	Create a temporary file with the given extension .
14526	Close the stream .
14527	Write string to file .
14528	Register a new heartbeat handler .
14529	Add a heart failure handler .
14530	handles ping messages
14531	Return list of batch_size .
14532	Split a path into a filename .
14533	Walk directory tree .
14534	Display elapsed time .
14535	Returns the time unit for the given time interval .
14536	Extract wininst config from dist_filename .
14537	Uncaches a zip directory .
14538	r Quote a quoted argument .
14539	Check if all files in the given dist_dir is set .
14540	Set fetch options for the given setup .
14541	Create the home directory if it doesn t exist .
14542	Check if the given name is an archive file .
14543	A decorator for immutable methods .
14544	Decorator to mark an object as readonly .
14545	Create a new heading node .
14546	Create a new notebook node .
14547	Create a new notebook node .
14548	Check if a directory is writable .
14549	Unquote a filename .
14550	Get a python filename .
14551	Searches for filename in search paths .
14552	Get the home directory of IPython .
14553	Return the xd configuration directory .
14554	Get IPython directory .
14555	Get IPython package directory .
14556	Get the path to an IPython module
14557	Check if target is outdated
14558	Returns the md5 hash of a file
14559	Check for old configuration files .
14560	Update the suggestions dictionary .
14561	Get most recent suggestions for an object .
14562	Get suggestions for a given object .
14563	Return the relative path to this directory .
14564	Return a list of files matching the pattern .
14565	Return a list of lines .
14566	Return the md5 hash of the file .
14567	Begin profiling .
14568	Print stats to stdout .
14569	Close the profiler .
14570	The main loop .
14571	Enable wx .
14572	Disable event loop .
14573	Disable Qt4 event loop .
14574	Enable interactive gtk .
14575	Enable or disable Tkinter
14576	Enable Pyglet hook .
14577	Saver for wave function
14578	Initialize the database .
14579	Execute an SQL statement
14580	Get session info
14581	Get the last n rows .
14582	Get a list of histogram lines from a string .
14583	Get the file name of the history .
14584	Change a session name
14585	Reset the history .
14586	Yields a range of histogram records
14587	Store the output for the given line number .
14588	Write cache output to database .
14589	Stop the thread .
14590	Determine the number of CPUs available on the system .
14591	Return a list of cpu times per system .
14592	Return a list of disk partitions .
14593	Return a list of all currently running processes .
14594	Return a nice string representation of a pair .
14595	Formats a list of statements into a string .
14596	Returns a string representation of the stack traceback .
14597	Wrapper for caching .
14598	Join a list of regexes .
14599	Remove a file from the filesystem .
14600	Update the contents of the object .
14601	Update cluster profiles
14602	Starts a cluster .
14603	Stop a cluster .
14604	Search for a command in PATH
14605	Print stdout and stderr to stdout .
14606	Find the code units in the given morfs .
14607	Reports a set of morf files to a directory .
14608	A decorator that ensures that the decorated function raises an AssertionError .
14609	Set traceback to stdout
14610	Decorator to check if a function is exceeded .
14611	Initialize IPython extensions
14612	Initialize the code .
14613	Run code inside the IPython app .
14614	Run all startup files
14615	Runs all the files in the IPython app .
14616	Execute code line in user namespace
14617	Run the module .
14618	Decorator to register generic methods .
14619	Return the filename of a static file
14620	Return the contents of a file
14621	Escape a string t .
14622	Report all files .
14623	Copy static report files .
14624	Write HTML to file .
14625	Generate a hash for the given source .
14626	Generate the index file .
14627	Read coverage status file .
14628	Write coverage status to a directory .
14629	Sort two lists .
14630	Get a slice from a sequence .
14631	Chunk a sequence into smaller chunks .
14632	Read configuration file .
14633	Read files from MANIFEST .
14634	Convert a glob pattern to a regular expression .
14635	Check if filename matches any of the patterns .
14636	Return a list of all versioned files .
14637	Start the kernel manager .
14638	Shutdown a kernel .
14639	Kill a kernel .
14640	Get a kernel by id .
14641	Get the ports for a kernel .
14642	Return the notebook with the given kernel ID .
14643	Sets the kernel for the given notebook .
14644	Shutdown a kernel .
14645	Interrupt the kernel .
14646	Restart a kernel .
14647	Create an IO stream .
14648	Create a shell stream for a kernel .
14649	Create hb kernel stream .
14650	Reset the properties of this instance .
14651	Export HTML to file .
14652	Exports xhtml to file .
14653	Converts an image tag to a utf8 string .
14654	Replace empty paragraphs .
14655	Export to file .
14656	Get an object from the given class .
14657	Generate a query based on tokenized search terms .
14658	Takes a query string and returns a subset of text .
14659	Creates a query builder for a date range .
14660	Build a query for date less than days .
14661	Retrieves a null query field from a field .
14662	Ensure fields_dict is case insensitive .
14663	Add options to the parser .
14664	Validate the attribute against the given method .
14665	Determine whether a method should be requested .
14666	Rotate the yank .
14667	Monkey patch pyzmq . pyqmq
14668	Create an XML parser from a schema URL .
14669	The websocket URL .
14670	Reserialize a reply .
14671	Injects a message into the cookie .
14672	Start the heartbeat .
14673	Internal helper to start the hb_callback
14674	Stop the hb stream .
14675	Reads the file and parses it to the file object
14676	Validate the block index .
14677	Seek to a block .
14678	Edit the code block .
14679	Print src block .
14680	Print all source blocks .
14681	Call a function on a collection .
14682	Run a batch function on a collection .
14683	Run a function on a list of subjects .
14684	run a method on collection collection
14685	A decorator to wrap an object into a function .
14686	Decorator to add object attributes .
14687	Get source code for traceback .
14688	Finds all lines that start at pos .
14689	Display a countdown .
14690	Stop all engines
14691	Check the condition for the condition .
14692	Set the ignore state .
14693	Save messages to the stack .
14694	Decorator to call the function with the results .
14695	Perform the spin after f .
14696	Get all available messages .
14697	Get a message from the queue .
14698	Decorator to define property .
14699	Get only one or more fields .
14700	Parse a URL .
14701	Return a list of modules .
14702	Get the root modules
14703	Quick completer function
14704	returns a list of modules
14705	Handles command completion .
14706	Handles tab completion
14707	Quote an attribute .
14708	Configure the plugin .
14709	Write XML report to the given stream .
14710	Add an error to the error list .
14711	Add a test failure .
14712	Add a testcase error .
14713	Generate a random number from a list
14714	returns a random number of loads
14715	Register an engine .
14716	Unregister an engine .
14717	Handles the pending commands .
14718	Process a submission submission .
14719	Iterate over the timeouts of the task .
14720	Attempt to fail an unreachable dependency .
14721	Try to assign a task to the scheduler
14722	Save a job to the graph .
14723	Submit a task to the engine .
14724	Dispatch the result of a task .
14725	This method is called when a result is received .
14726	Handle unmetric dependencies .
14727	update the graph
14728	Start the log file .
14729	Show the current state of the log .
14730	Write log line .
14731	Write data to logfile
14732	Stop logging .
14733	Create a new notebook node .
14734	Add a command chain .
14735	Add a regex to the command chain .
14736	get objects matching key
14737	Get all matches for a given key .
14738	Handle notebook dir .
14739	List all available notebooks .
14740	Generate a unique notebook id .
14741	Delete a notebook id
14742	Check if a notebook exists .
14743	Find the path to a notebook .
14744	Get notebook path by name
14745	Get the name of a notebook .
14746	Get the last modification time of a notebook .
14747	Save a new notebook .
14748	Save notebook data to a notebook .
14749	Save a notebook object
14750	Delete a notebook .
14751	Create a new notebook .
14752	Creates a new notebook id and saves it as a new one .
14753	Return a list of serialized tokens .
14754	Generate lines of source code .
14755	Load the default config .
14756	Return a list of the default classes .
14757	Decode IPython IPython notebook .
14758	Initialize the IPython app .
14759	Initialize the shell .
14760	Initialize the banner .
14761	Returns a string representation of an object .
14762	Parse a notification name .
14763	Sets the default value for this trait .
14764	Called when a trapezoid changes .
14765	Return a mapping of traits to traits .
14766	Returns the metadata for the given trait
14767	Validate value .
14768	Returns the default value
14769	Return True if this result is a subset of completed tasks .
14770	Whether this task is unreachable .
14771	Return the dependencies as a dictionary .
14772	Find the depth of a tree
14773	Pretty print a binary tree .
14774	Disambiguate a DNS URL .
14775	Apply a function to each element and return the result .
14776	Validate the targets
14777	Dispatch a message to monitor .
14778	Dispatch a message to the client .
14779	Handle a new heartbeat .
14780	registers a heart failure
14781	save a task request
14782	Saves a task result message .
14783	save a message to the database
14784	Connection request .
14785	register a new engine
14786	unregisters an engine
14787	Finish the registration .
14788	Send a shutdown request .
14789	Purge results .
14790	Extract data from a single record .
14791	Get results from client .
14792	Send a message to client .
14793	Handle DB queries .
14794	Change the current working directory .
14795	Decode a completed CompletedCommand .
14796	Run a command with the given cmd .
14797	Executes the command .
14798	Dispatch a message .
14799	Check if a message is from the current session .
14800	Report the annotations
14801	Annotate analysis .
14802	Get installed apt - cache version .
14803	Recursively replace unicode strings .
14804	Extract the message header .
14805	Check that the packer is valid .
14806	Create a message to be sent to the server .
14807	Sign a list of messages
14808	Serialize a message .
14809	Send a message .
14810	Send a raw message .
14811	Receive a message from a socket .
14812	Given a list of msg_list return a list of Identifiers and msg_list .
14813	Unserialize a message .
14814	Saves an SVG file .
14815	Copy an SVG string to the clipboard .
14816	Convert an SVG string to a QImage .
14817	Return information about an object .
14818	Get the docstring of an object .
14819	Get source code for an object .
14820	Get the argument specification of an object .
14821	Get the call line for a call .
14822	Find the absolute file path to an object .
14823	Return the line number of source code lines .
14824	Get the definition of an object .
14825	Return the header string
14826	Print info about a message
14827	Print the definition .
14828	docstring for documentation
14829	Show source code for an object .
14830	Print contents of a file .
14831	Helper function to format fields .
14832	Returns a string representation of the object .
14833	Search for namespaces in namespace table .
14834	Create a thread and return a thread object .
14835	Decorator to mark a function as a reactor .
14836	Find best matching string in corpus .
14837	Convert to string .
14838	Convert to XML .
14839	Load all modules in a package .
14840	Invert a dictionary into a dictionary
14841	Merge this struct into a new dictionary .
14842	Recursively converts an object into a primitive .
14843	Convenience function to format raw text .
14844	Get a list of figure objects .
14845	Print a matplotlib figure .
14846	Decorator for matplotlib functools .
14847	Select figure format
14848	Determine the appropriate gui and backend to use .
14849	Activate matplotlib .
14850	Configure inline backend .
14851	Activate a matplotlib environment .
14852	Entry point for tracing .
14853	Start the thread .
14854	Stop the tracing thread .
14855	Start a tracer .
14856	Install the actual tracing function .
14857	Start the collector .
14858	Stop the collector .
14859	Pause profiling .
14860	Resume all traces .
14861	Get the line data .
14862	Return a list of RemoteExceptions .
14863	Render the traceback of an exception .
14864	Start coverage process .
14865	Return canonical directory for given morf .
14866	Return source code for filename .
14867	Determine whether a filename should be traced .
14868	Check if the given frame should be traced .
14869	Add a warning to coverage .
14870	Check if all packages have been imported .
14871	Start the environment .
14872	Stop the container .
14873	Exclude a regex
14874	Return a regex for the exclude .
14875	Harvest data from the database .
14876	Combine parallel data structures .
14877	Harvest data .
14878	Perform analysis .
14879	Perform a single analysis .
14880	Analyze an analysis .
14881	Generate a summary report .
14882	Annotate the data .
14883	Generate HTML report .
14884	Generate an XML report .
14885	Display a list of objects
14886	Display a list of objects .
14887	Displays a SVG file or a list of objects
14888	Display a PNG image .
14889	Display a list of objects .
14890	Display a LaTeX object in LaTeX .
14891	Displays one or more objects .
14892	Displays given objects .
14893	Reloads the file .
14894	Find the path to the given command .
14895	Run the pexpect command .
14896	Forward read events to a stream .
14897	Run the client .
14898	Find the class for the given cli .
14899	Starts the cluster .
14900	Build a launcher class .
14901	Start the IPython cluster .
14902	Starts the cluster .
14903	Get a wx application .
14904	Check if the application is in the main event loop .
14905	Start event loop .
14906	Returns a QApplication instance
14907	Check if the event loop is running in an event loop .
14908	Start event loop .
14909	Create a blank canvas
14910	Draw a cross .
14911	Draw a line between two positions .
14912	Add text at position to the image .
14913	Convert an image to an ANTsImage .
14914	Generate a UUID .
14915	Get a unique key from a GET request
14916	Get the domain of a given URL
14917	Extract query arguments from a URL .
