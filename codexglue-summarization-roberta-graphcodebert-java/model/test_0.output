0	Emit a fast path ordered .
1	Wrap an observable source .
2	Returns a sorted observable with the given comparator .
3	Observes a ConnectableObservableObservable on the given scheduler .
4	Creates a new instance of multicast processor .
5	Creates a new instance of processors .
6	Try to subscribe a scalar to a Publisher
7	Convert a scalar value to a Scalar XMap .
8	Reset the global state .
9	Creates a Maybe from a Completable source .
10	Create a Maybe from a single source .
11	Retry a single element with the given predicate .
12	Requests that the given object is not null .
13	Gets the identity function .
14	Create a callable
15	Returns a function that represents a function .
16	Returns a function that casts the target class to the given class .
17	Creates a new reusable subject .
18	Creates a new reusable subject .
19	Creates a new reusable subject .
20	Creates a new durable subject .
21	Get the error from the queue .
22	Waits until the element is available .
23	Blocks until the queue is available .
24	Drains the max loop .
25	Performs a request to a given subscription .
26	Performs post completion .
27	Sets the value of the future .
28	Gets the value of this notification .
29	Gets the error value .
30	Validates the given Disposable and returns true if the observer is null .
31	Sets the AtomicReference from another AtomicReference .
32	Validates the upstream subscription .
33	Sets an upstream reference to the given upstream reference .
34	Add a long to a long .
35	Multiply a long .
36	Adds a number to the given AtomicLong .
37	Converts a Throwable to a NullPointerException .
38	Adds an object to the list .
39	Shuts down the thread .
40	Create a scheduled executor service .
41	Sets the current subscription .
42	Emit a loop .
43	Wrap an error .
44	Flatten a Throwable into a list of exceptions .
45	Throws an exception if it is a throwable .
46	Removes all resources .
47	Returns the number of resources .
48	Tries to apply a scalar to a scalar .
49	Maps a scalar value to a scalar .
50	Accepts a subscriber .
51	Accepts an observer .
52	Start the stream .
53	Start unbound stream .
54	Offers the given element to the queue .
55	Gets the disposed resource .
56	Called when the element is complete .
57	Sets an error .
58	Called when the task is completed .
59	Concatenates a Publisher to a Flowable using the provided Publisher .
60	Concatenates the elements of a function using the supplied function .
61	Returns a stream of elements sorted by the given comparator .
62	Blocks until the consumer has completed .
63	Requests a number of bytes to the stream .
64	Adds a PublishDispatcher to the queue .
65	Removes the subscriber from the queue .
66	Adapts a ConnectableFlowable to a ConnectableFlowable .
67	Parse the annotations from a method .
68	Sets the delay .
69	Creates an error response .
70	Calculates the delay in milliseconds
71	Create sample data .
72	Returns HttpMethod object from string representation .
73	Searches for a given username .
74	Encodes a password .
75	Returns true if the raw password matches the raw password .
76	Performs the version checks .
77	Determines whether the checks are disabled .
78	Gets the spring - core version .
79	Configure an attribute exchange
80	Gets the OAuth2 client configurer .
81	Get the OAuth2 resource server .
82	Specifies that the channel matches the security request .
83	Compares the given DN and returns true if it matches the specified value .
84	Retrieve the entry for the specified DN .
85	Searches all attribute values for the given filter name and returns the values .
86	Searches for all attributes matching the given filter .
87	Search for a single entry .
88	Builds the search controls .
89	Recursively find all the primary keys in the database .
90	Builds the preauthenticated authorities from the user .
91	Creates embedded server .
92	Create servlet filter
93	Initialize the jaas filter .
94	Whitelisted types .
95	Registers the spring security filter chain .
96	Gets the token for a given series .
97	Gets the granted authorities .
98	Returns a new cipher class .
99	Asserts that the AuthenticationManager is set .
100	Performs authentication .
101	Determines if this principal has been changed .
102	Performs the pre - authenticated authentication .
103	Checks the given amount of bytes to be written .
104	Maps a collection of authorities to a map .
105	Sets the login processing url .
106	Updates the authentication defaults .
107	Update the access defaults .
108	Map password .
109	Extract cookie from request .
110	Encodes the cookie string .
111	Sets the cookie .
112	Resolves a parameter with the security context .
113	Get the query string from the given pattern .
114	Gets the port .
115	Gets the principal .
116	Log out the session .
117	Performs the authentication .
118	Build the provider URL for the LDAP server .
119	Sets the context properties .
120	Gets the redirect url .
121	Ends the tag .
122	Initializes the UserDetails service .
123	Gets the UserDetails service .
124	Adds additional parameters to the attributes .
125	Determines whether the request needs authentication .
126	Determines if the authentication request is required .
127	Performs a proxy ticket request .
128	Returns true if the user is authenticated .
129	Determines if the request is configured .
130	Creates the security expression root for the method invocation .
131	Retrieve JWK set .
132	URL - encode a string .
133	Maps user groups to granted authorities .
134	Load user by assertion .
135	Gets the preAuthenticated principal .
136	Concatenates a byte array into a single byte array .
137	Returns a copy of a byte array .
138	Returns a list of granted authorities
139	Preprocess the attributes map .
140	Returns a collection of granted authorities .
141	Adds the given value to the collection .
142	Gets the preAuthenticated principal .
143	Returns the shared object for the given class .
144	Builds the redirect url for the given request .
145	Invokes interceptor method .
146	Checks if the given string is valid .
147	Checks if any of the roles have a role
148	Processes the auto login cookie .
149	Registers a persistent login token .
150	Attempt to switch to a user .
151	Attempt to exit the user .
152	Sets the exit user URL .
153	Display public index
154	Create the spring security filter chain .
155	Decodes a JWT .
156	Performs the authorization against the access expression .
157	Check if the authorization is allowed .
158	Convert a JWT to a collection of authorities .
159	Generates a CsrfToken for this request .
160	Display admin page
161	Display the AddPermission page for a contact
162	Add a new permission
163	Deletes a permission
164	Returns the role with the default role prefix .
165	Create a UserDetailsFactory instance from a string .
166	Returns a list of values for the given name .
167	Gets the first attribute value for the given name .
168	Encodes a CharSequence into a byte array .
169	Decodes a byte array .
170	Looks up the parameter names for the given object .
171	Add a contact .
172	Searches attributes for the given target class .
173	Add a secure method .
174	Returns all config attributes .
175	Checks if the given method is a match .
176	Configures any request matchers that have been matched .
177	Handle a bind exception .
178	Get a random contact
179	Clear authentication exceptions .
180	Returns the field with the given name .
181	Create service url .
182	Create the redirect url .
183	Extract the SHA prefix from the SHA pass password .
184	Invoked by the application .
185	Check the filters stack .
186	Returns an array of registered types .
187	Extracts the cause from the given throwable .
188	Registers the access manager .
189	Converts a collection of authorities to a Set .
190	Compares two byte arrays .
191	Sets the default redirect url .
192	Sets the function to resolve hidden inputs .
193	Build request URL .
194	Checks if the given string is an absolute URL .
195	Returns a list of OpenIDAttributeList for the given identifier .
196	Converts the given ResultSet into an identifier .
197	Creates entries .
198	Creates the object identity .
199	Update the object identity .
200	Saves the request .
201	Creates a new ServerWebExchangeMatcher that matches the given patterns .
202	Matches a server web exchange .
203	Create a text encryptor .
204	Create a TextEncryptor with the given password and salt .
205	Create a text encryptor for a password .
206	Writes the headers to the response .
207	Determine the target URL .
208	Determine the target URL .
209	Sets the target URL parameter .
210	Retrieves the directory with the immediate parent .
211	Build a DistinguishedName from the given username .
212	Creates shared objects .
213	Sets the JAAS property .
214	Get current date
215	Internal method to parse a date .
216	Updates the cache .
217	Set authentication details .
218	Determine the security name for the given subject .
219	Determine the groups for a given security name .
220	Changes the password .
221	Build a distinguished name from a group .
222	Check that the allowed session is allowed .
223	Copy details from source to destination
224	Gets the filters for the given request .
225	Gets the filters for the given URL .
226	Gets the application context .
227	Get the full distinguished name from the given base context .
228	Sets session attributes .
229	Creates a basic authentication scheme .
230	Add filters to the REST API .
231	Add additional filters .
232	Creates a new authentication scheme .
233	Creates an authentication scheme .
234	Creates a new authentication scheme .
235	Sets a proxy for a given URI .
236	Print response body
237	Sets configuration .
238	Sets the default charset .
239	Configures the default object mapper .
240	Set the default object mapper factory .
241	Sets configuration .
242	Sets mvc config .
243	Sets the object mapper config .
244	Sets the mock configuration .
245	Sets configuration .
246	Set encoder config .
247	Set header config .
248	Sets the asynchronous configuration .
249	Set mock mvc config .
250	Sets the multi part config .
251	Sets parameter config .
252	Sets the matcher config .
253	Returns an allowed hostname .
254	Declare a namespace config .
255	Sets a namespace config for a given namespace .
256	Perform a request with a given method .
257	Sets the headers .
258	Sets the default proxy .
259	Sets the control name .
260	Sets a header .
261	Sets basic authentication .
262	Configure ntl mtl
263	Creates a new Headers with additional headers .
264	Resets the context .
265	Sets header .
266	Build response .
267	Matches a cookie with the given value .
268	Matches the cookie matcher with the given comment matcher .
269	Matches a cookie that matches the expiry date .
270	Matches the cookie matcher with the given domain .
271	Matches the cookie matcher with the given path .
272	Matches a cookie that matches the given matcher .
273	Applies a cookie matcher to a Detector .
274	Matches the cookie with the given matcher .
275	Matches a cookie that matches the given maximum age .
276	Expect a header with the expected value .
277	Expect a header with the expected value .
278	Expect a cookie with the expected value .
279	Returns a copy of the proxy .
280	Sets the number return type .
281	Set the default parser type .
282	Sets the default log stream .
283	Enable logging .
284	Creates the HttpRequestBase for the given HTTP method .
285	Sets the default boundary .
286	Add an attribute .
287	Add a header .
288	Add multi part .
289	Add result handlers .
290	Sets a parameter for the given parameter .
291	Adds the given parameters to this instance .
292	Sets the http client factory .
293	Sets the http client mode .
294	Executes the given path and returns the response .
295	Returns the integer value for the given path .
296	Returns the byte as a Byte .
297	Returns the Short value for the given path .
298	Returns a float value as a float .
299	Returns a double value as a double .
300	Returns the value associated with the given path .
301	Gets a list from a path .
302	Gets a map .
303	Gets the object at the specified path .
304	Sets the body of the request .
305	Adds a cookie to the request .
306	Add a parameter to the request .
307	Add a parameter to the request .
308	Sets the form params .
309	Logs a response to the output stream .
310	Creates a new cookies with additional cookies .
311	Clean up the keys from the collection
312	Index implicit bindings .
313	Gets a binding or throws an exception if necessary .
314	Convert a constant string to a constant binding .
315	Clean up JITB bindings .
316	Remove failed binding from injection point .
317	Gets internal dependencies .
318	Creates an uninitialized binding .
319	Returns an array of parameters .
320	Binds the given injector to the provider .
321	Binds a logger instance .
322	Checks if the given member annotation is missing .
323	Returns true if the given method is overridden .
324	Initializes the delegate .
325	Returns the provider type .
326	Resolves all types in the given array .
327	Returns the canonicalizer for the given type literal .
328	Prepare builtin converters .
329	Returns the canonicalizer for the given class loader .
330	Returns true if the given class loader is the same as this class loader
331	Returns true if the given member is public .
332	Fixes the given key .
333	Requests an instance of an instance .
334	Validates pending injections .
335	Creates a new instance of the given arguments .
336	Wrap the given ServletRequest .
337	Creates a factory for the given scope .
338	Makes sure that the given scoping is scoped .
339	Normalize a path .
340	Generates an annotation for a given annotation type .
341	Determine if the annotation is retained .
342	Finds scope annotation from given annotations .
343	Returns the binding for the given member .
344	Returns the name of a key .
345	Initializes the delegate provider .
346	Add a direct type binding .
347	Gets the constructor in the cache .
348	Checks if the given interceptor is scope .
349	Create a RealMapBinder for the given binder .
350	Gets the key for the given key .
351	Creates a new instance .
352	Replace the source code with the source .
353	Returns a module for a given module .
354	Gets the assisted methods .
355	Returns true if the type is not defined .
356	Determine whether the given constructor matches the given parameters .
357	Get dependencies from ctor point
358	Removes dependencies from the given set .
359	This method is used to determine if the dependencies are valid .
360	Gets the binding from the injector .
361	Invokes the given method using reflection .
362	Reports a missing implementation for the given key .
363	Creates a new Real Multibinder .
364	Gets the key for a new item .
365	Find the next filter .
366	Determine if the constructor has at least one of the given constructor
367	Gets the internal constructor .
368	Gets the internal dependencies .
369	Constructs a module from a module .
370	Gets the annotation .
371	Returns the line number for the given member .
372	Initialize the providers .
373	Returns a new callable with the given key .
374	Transforms a callable to a request .
375	Validates the given value against the given key .
376	Gets the members in the cache .
377	Creates and returns the members of the given type .
378	Gets injectors .
379	Returns a new key for the given type .
380	Returns an annotation strategy for the given annotation .
381	Returns an annotation strategy for the given annotation type .
382	Removes the stacktrace from the given exception .
383	Returns the name of the binding .
384	Formats an error message .
385	Creates a new message with the given message format and arguments .
386	Creates a message with the given message and arguments .
387	Creates a message with the given source and arguments .
388	Convert an object to an object .
389	Determines if the given class is skipped .
390	Returns a stack trace element from a list of modules .
391	Main entry point .
392	Pushes a dependency to the current state .
393	Pushes a key to the source .
394	Creates an initializable instance .
395	Creates a new instance .
396	On connection event
397	Adds a connection event processor .
398	Get the task result .
399	Liefert a Throwable .
400	Register a processor
401	Registers the default processor .
402	Returns the processor for the given command code
403	Tries to get a cached URL .
404	Decode protocol code .
405	Get all connection pools
406	Scan all pools .
407	Gets a connection from the server .
408	Creates a connection and returns it .
409	Removes task from pool .
410	This method is called when a connection is needed .
411	Do create connection .
412	Closes a connection .
413	Called when a connection is closed .
414	Close the connection
415	Sets an attribute .
416	Register user processor .
417	Registers a multi interest processor .
418	Dispatch RpcRequest
419	Deserialize RpcRequest .
420	Sets the pre - processing context .
421	Log timeout .
422	Print debug log .
423	Executes a process .
424	Performs a remote operation .
425	On invocation .
426	Convert a bit set to a byte .
427	Convert an integer to a BitSet
428	Add a reconnect task .
429	Stops the cluster .
430	Convert request to remoting command .
431	Filter connections
432	Monitor connections
433	Close fresh select connections
434	Gets a system property .
435	Write info log .
436	Returns true if this request is a request timeout .
437	Get user processor by class name .
438	Returns a random connection .
439	Returns the value associated with the given key .
440	Get a property .
441	Resolve response object .
442	Returns the response object from the response .
443	Converts a ResponseCommand to a Throwable .
444	Returns detail error message .
445	Create RpcServerException .
446	Print the connection trace log
447	Creates an event loop group .
448	Parse the remote address .
449	Parse local address .
450	Parse the remote IP address .
451	Parse the remote host name .
452	Parse local IP address .
453	Parse the remote port .
454	Parse local port .
455	Parse a socket address to a host .
456	Adds a connection to this session .
457	Remove a connection and close it .
458	Returns the current connection .
459	Register a custom serializer
460	Get custom serializer by class name
461	Registers a custom serializer for the given command code .
462	Get custom serializer for command code
463	Start connection monitor .
464	Returns true if the remote address is connected .
465	Initialize write buffer water mark
466	Constructs a frame from the given opcode .
467	Performs a batch .
468	Sets the close frame .
469	Validate the reason frame
470	Updates the message payload .
471	Checks whether the given protocol is acceptable .
472	Translate a single frame check length limit .
473	Translate a single frame size to a single frame .
474	Generate final key .
475	Processes a continuous frame .
476	Process binary data .
477	Logs runtime exception .
478	Processes frame text .
479	Processes a continuous frame sequence .
480	Processes the frame is not finished .
481	Processes a close frame .
482	Checks the buffer limit .
483	Get the payload from the buffer
484	Gets the size of the buffer list .
485	Translate the HTTP HTTP request to the client .
486	Translate the HTTP HTTP header to a HTTP HTTP response .
487	Decode the socket .
488	Handle a connection exception .
489	Close connection .
490	Generate the http response for the error
491	Sends text to the web socket .
492	Resets the websocket .
493	Start connect .
494	Gets the port .
495	Send handshake .
496	Sets the connection lost timeout .
497	Stop the timer lost .
498	Start the connection lost timer .
499	Restarts the connection lost checker .
500	Sends a connection to the server .
501	Cancels the timer lost .
502	Handles a handshake request .
503	Sends a ping frame .
504	Stop the socket .
505	Gets the port .
506	Performs additional reads .
507	Handles the connection .
508	Performs a read .
509	Performs a write operation .
510	Setup the selector and connect to the server .
511	Ensure that the thread is open .
512	Shutdown the server .
513	Get the socket .
514	Broadcast data to a collection of clients .
515	Broadcasts a text to a collection of clients .
516	Broadcast data to clients .
517	Fills the given draft .
518	Transfer the source buffer to dest .
519	Start the entity manager factory .
520	Returns an entity manager for the given name .
521	Creates a new transaction with the given transaction .
522	Converts the arguments to a Java buffer .
523	Wrap a list of arguments .
524	Gets a localized message .
525	Gets a localized message .
526	Checks if a language is defined .
527	Returns the preferred language .
528	Returns the preferred language .
529	Sets the language .
530	Sets the bindings for the given modules .
531	Sets the bindings .
532	Specify bindings .
533	Sets the overrides for the given modules .
534	Specifies this module overrides .
535	Sets the overrides overrides .
536	Disable module classes .
537	Performs the call with the given request .
538	Sets the call to the given request .
539	Returns the file with the given relative path .
540	Returns a binding for the given scope .
541	Static factory method .
542	Convenience factory method for creating a tuple .
543	Convert ExecutionContext to Executor
544	Creates a default persistence config .
545	Create JPAConfig .
546	Creates a new JPAConfig from a map .
547	Create a flow from a string
548	Returns a flow of JSON node .
549	Adds a constraint validator for the given key .
550	Creates a new instance of the constraint validator .
551	Returns a matching method with the given name and parameter types .
552	Called when the client is received .
553	Handles a bad request .
554	On unauthorized page .
555	Handles not found .
556	Handles an error .
557	Logs an error .
558	Converts a throwable to an exception .
559	Handles an error .
560	Handles an error .
561	Creates a new documentation handler from the given resources .
562	Create a new BuildDocHandler from the given directory .
563	Create a BuildDocHandler from a given directory and a jar file .
564	Creates a new documentation handler based on the given directory and a jar file .
565	Create a documentation handler from a jar file
566	Consume data from the data stream
567	Create HttpEntity from content .
568	Create a HttpEntity from a string .
569	Creates a chunked entity .
570	Creates a response with the given status and content .
571	Returns a response with the given status .
572	Create a response with the given byte array .
573	Returns a response with the given status .
574	Returns a result with the given status .
575	Find a user by id
576	Returns the preferred language .
577	Returns a unique call .
578	Returns a new call with the given fragment .
579	Returns the absolute URL for the given request .
580	Returns the web socket URL for the given request .
581	Create a connection function that returns a connection to a connection .
582	Returns a connection function that executes a connection function .
583	Creates a new server for the given router .
584	Convert an object to JsonNode .
585	Converts a Json node into an object .
586	Parse a string .
587	Parse an input stream .
588	Returns relative path relative to target path .
589	Returns canonical path .
590	Returns a list of displayable constraints .
591	Returns a tuple of displayable constraints .
592	Timeout the given CompletionStage .
593	Returns true if the given class array is assignable .
594	Parse cron expression
595	Get the next cron interval
596	Creates and returns a new instance .
597	Returns a new GuiceApplicationBuilder with the given context .
598	Returns a paginated result .
599	Sets the value of a session .
600	Sets the value of a flash .
601	Specifies the binding key with the given instance .
602	Specifies the binding key with the given annotation .
603	Adds a binding to the given class .
604	Sets the binding to the given provider .
605	Adds a binding to the given supplier .
606	Converts a binding key to a given key .
607	Convert a provider to a Java Binding .
608	Get available languages .
609	Returns the preferred language .
610	Creates a new EvolutionsReader from a map .
611	Create a new evolution reader for the default evolution .
612	Clean up all the scripts in the database .
613	Adds a configuration loader to the environment .
614	Load a module loader .
615	Load a Guice application from the given modules .
616	Load the given modules .
617	Load the given modules .
618	Load a Guice application .
619	Creates a new Guice application .
620	Encodes a cookie .
621	Returns the EntityManager for the current thread .
622	Returns a dequeued entity stack .
623	Pushes the given entity to the stack .
624	Disables flow with given splitter .
625	Wrap a flow with the given splitter .
626	Creates a flow from an actor .
627	Converts an array of error arguments to an unmodifiable list .
628	Fill the form with the given value .
629	Returns all validation errors .
630	Returns the errors as JSON .
631	Returns the value associated with the given key .
632	Fill this form with the given value .
633	Parse the given text into an object .
634	Parse a field from a field .
635	Convert object to String
636	Print a string representation of a field .
637	Print a type .
638	Registers a converter .
639	Registers a formatter for the given class .
640	Register an annotation formatter .
641	Encode a cookie .
642	Returns a list of nodes matching the specified path .
643	Convert a list to a Seq .
644	Convert an array to a Seq .
645	Returns a sequence of elements from a given array .
646	Accepts a JSON WebSocketAcceptor .
647	Accepts a web socket .
648	Determines if the given object is accessible .
649	Computes the cost for a primitive class .
650	Computes the total cost of the given parameters .
651	Calculates the cost of an object from the destination class .
652	Returns a localized message for the given key .
653	Gets the message with the specified keys .
654	Creates a new database from the default database .
655	Create a parallel Sorter from an array of arrays .
656	Sort the elements in the sorted list .
657	Performs merge sort sort .
658	Invokes the method .
659	cast a type to a type
660	Loads an argument at the given index .
661	Emits a field instruction .
662	Pushes a zero or zero or null .
663	Unbox the stack .
664	Process an array .
665	This method is used for testing
666	Resolve all bridges .
667	Get all methods from the super classes .
668	Filter the given constructors .
669	Sets the superclass .
670	get field
671	Add methods .
672	Returns the cardinality of this matrix .
673	Sets the naming policy .
674	Finds all methods in the given array .
675	Resolve a child path .
676	Reads a file from a file .
677	Sets the host .
678	Create a new HttpRequest with the given method and destination .
679	Creates a request that connects to a destination .
680	Create a GET request for a GET request .
681	Create a POST request for a given destination .
682	Create a PUT request for a PUT request .
683	Create a PATCH request .
684	Create a DELETE request .
685	Create a HEAD request for a HEAD request .
686	Sets a TRACE request .
687	Create an OPTIONS request for an OPTIONS request .
688	Sets the request path .
689	Sets the cookies .
690	Add query parameters .
691	Add query to the query .
692	Sets the query string .
693	Returns the query string .
694	Get the host url .
695	Sets basic authentication .
696	Sets the host header .
697	Gets the request .
698	Sends the response and returns the response .
699	Removes the given range from the given range .
700	Get the number of exceptions table .
701	Collect action interceptors .
702	Collects action filters .
703	Collect the action results .
704	Collects actions from the action manager .
705	Sets a simple property .
706	Gets the property .
707	Extracts the reference from the property name .
708	Gets the writer .
709	Sets an object reference .
710	Returns the object reference .
711	Lookup an object reference .
712	Returns the entity descriptor for the given table reference .
713	Find table descriptor by column name
714	Returns the table alias for the given table reference .
715	Registers a table reference .
716	Lookup a table reference .
717	Registers a hint .
718	Serialize a value to a JSON context .
719	Inject attributes .
720	Inject parameters .
721	Inject uploaded files .
722	Convert property name to column name .
723	Convert column name to property name .
724	Applies the given column name to the given column name .
725	Stores the value in the prepared statement .
726	Prepare the value for the given object .
727	Returns all wrappers .
728	Resolve the given wrapper class .
729	Creates a new instance of the given wrapper class .
730	Converts the given path to system .
731	Get path .
732	Splits the given filename into a directory .
733	Returns relative path .
734	Registers a specific class .
735	Sets the action config .
736	Starts the robot .
737	Configures default defaults .
738	Register the madvoc container .
739	Excludes the given jars .
740	Includes the specified jars .
741	Includes included entries .
742	Exclude entries .
743	Scans a jar file .
744	Scans the given root directory .
745	Returns the bytecode of a class .
746	Scan the given paths .
747	Scans the files .
748	Creates a new JDBC transaction .
749	Returns the default scope for the given type .
750	Gets or creates a new one or creates a new one if necessary .
751	Creates a new madvoc scope with the specified type .
752	Decode a char array .
753	Prepare a CSRF token .
754	Ensure that the token is valid .
755	Check a CSRF token from the session .
756	Creates a new BeanCopy
757	Make a copy of this bean .
758	Visits a property .
759	Initialize the entity reference
760	Resolve scope .
761	Registers a bean definition .
762	Registers a bean .
763	Removes a bean from the registry .
764	Resolve bean names for a given type .
765	Registers the given bean with the given name and parameter types .
766	Registers a property injection point .
767	Registers a setIniteInjectionPoint .
768	Registers a method injection point .
769	Registers an initial init method .
770	Registers a destroy method .
771	Registers a provider with the given name and method name .
772	Registers a provider with a given name .
773	Iterate through all beans of a given type .
774	Defines the parameters .
775	Intercepts the action request .
776	Resolves Java version number .
777	Adds an instruction to the stack .
778	Checks that the given method index is valid .
779	Returns field name .
780	Get advice method name .
781	Load special method arguments .
782	Load static method arguments .
783	Loads the method arguments from a virtual method .
784	Loads a method argument at the given index .
785	Store a method argument .
786	prepare the return value for a method
787	Create method signature key .
788	Generate new array .
789	Store an instruction into an array .
790	Extract the encoding from a content type
791	Returns true if the flags are empty .
792	Resolve authorization token .
793	Requires authentication .
794	Prepares the response to the response .
795	Prepares the response with the given file name .
796	Gets all cookies in the request .
797	Read request body from request .
798	Read request body from stream .
799	Stores the current context path in the request context .
800	Stores the context path in the servlet context .
801	Checks if a parameter is a GET parameter .
802	Helper method to prepare parameter array .
803	Copy parameters to attributes .
804	Invokes the body .
805	Renders the body of the body .
806	Renders the body to a string .
807	Invokes all init methods .
808	Calls all destroy methods .
809	Creates a new bean instance .
810	Inject parameters .
811	Rewrite the action path .
812	Adds a header .
813	Add a property to the map .
814	Add base property .
815	Adds a profile property .
816	Get a profile property .
817	Resolves the given value .
818	Extracts the properties from a map .
819	Reads two bytes from a stream .
820	Hashes a password .
821	Checks if the given string is a password .
822	Copies all bytes from the stream .
823	Copies the maximum bytes from the stream to the given output stream .
824	Parse action .
825	Resolve action config .
826	Detect and register and register an alias .
827	Read the action interceptors .
828	Reads action filters .
829	Read package action path .
830	Read method action path .
831	Parse method alias .
832	Create an action runtime .
833	Sets the response headers .
834	Applies proxy to target class .
835	Inject the target object into a proxy .
836	Visit an annotation .
837	Resolve real name .
838	Resolve json name .
839	Looks up the type data for the given class .
840	Looks up the type data for the given class .
841	Determine the type data for a given class .
842	Returns the name of the given type .
843	Resolves the real name of the given type .
844	Gets the file content .
845	Copy the bootstrap methods .
846	Sets the major version and class name .
847	Puts a constant pool .
848	Put bootstrap methods .
849	Adds a constant field ref to the symbol .
850	Adds a constant reference to the symbol .
851	Adds a constant reference to the pool .
852	Adds a constant member to the map .
853	Adds a constant to the constant pool .
854	Adds a constant entry to the constant pool .
855	Adds a constant to the constant pool .
856	Adds a constant entry .
857	Adds a constant to the pool .
858	Add a constant name and type .
859	Adds a constant to the constant pool .
860	Adds a constant .
861	Adds a constant to the constant pool .
862	Adds a constant map entry .
863	Adds a dynamic constant to the bootstrap .
864	Adds a constant to the bootstrap method .
865	Add a dynamic reference to a dynamic reference .
866	Add a dynamic reference to the dynamic reference .
867	Adds a constant reference to a constant pool .
868	Adds a reference to the constant pool .
869	Adds a bootstrap method .
870	Adds the union of two types .
871	Generates a hash of a name .
872	Removes all entries from this map .
873	Returns all values with the given name .
874	Returns an iterator over the elements in the list .
875	Returns all entries in this map .
876	Grows the buffer .
877	Append a CharSequence to the buffer .
878	Visits an annotation .
879	overrides the visitor to create a proxy
880	Create the first chain delegate delegate .
881	Create the first chain delegate .
882	Parse the given string .
883	Pushes a field to the path .
884	Configure servlet context .
885	Execute the next method .
886	Returns an array of FieldDescriptors .
887	Creates a bean definition for the bean .
888	Convert jbTransactionMode to db .
889	Reads property .
890	Copies all elements from the given map into this map .
891	Appends a buffer to this buffer .
892	Writes the list of objects to a writer .
893	Writes this object to an output stream .
894	Writes the list of objects to the given output stream .
895	Gets a string from the map .
896	Returns the integer value associated with the given key .
897	Returns the value associated with the given key .
898	Returns the Double value associated with the given key .
899	Get a float value from the map .
900	Returns the value associated with the given key .
901	Adds a string to the map .
902	Sets the current folder .
903	Receive messages .
904	Updates the flags of a message .
905	Closes a folder if it exists .
906	Looks up a named parameter .
907	Creates an alias .
908	Validate action .
909	Add a violation .
910	Sets the raw data .
911	Sets the raw data for download .
912	Sets target input stream .
913	Sets target .
914	Sets target class .
915	Process the target class .
916	Create proxy class .
917	Defines the target class .
918	Creates a new instance .
919	Dumps the class in the debug folder .
920	Set the email address .
921	Set the email address .
922	Create a new email address .
923	Sets the email addresses .
924	Set the email address .
925	Adds a text message .
926	Creates a new email message .
927	Sets a header .
928	Returns the system property .
929	Returns a boolean value .
930	Returns an integer value as a long .
931	Returns a long value as a long .
932	Gets the parameter names .
933	Serialize a key value .
934	Look up a path by alias .
935	Resolve alias .
936	Resolve result path .
937	Resolve a result path string .
938	Gets the last index of the last slash .
939	Gets the last index of the last dot .
940	Gets the index of the dot after a slash .
941	Strips last camel word .
942	Resolves the schema name .
943	Resolve column descriptors .
944	Initializes this sketch
945	Calculate a mix of data
946	Performs a demix x y . y .
947	Calculate the key schedule
948	Initializes the key with the given message message .
949	Encrypt a block with a given offset .
950	Converts a byte array into a long array .
951	Removes the bounding box from the string .
952	Returns the path .
953	Zipped file
954	Gzip file .
955	Unzip a file .
956	List all the entries in a zip file .
957	Unzip a zip file .
958	Adds a file to the ZIP output stream .
959	Adds a ZIP file to a ZIP output stream .
960	Returns the field descriptor for the given name .
961	Returns the PropertyDescriptor for the given name .
962	Sets the bundle name for the request .
963	Sets the locale .
964	Gets the locale from the session .
965	Filters the parameters for the given bean name .
966	Add profiles .
967	Reads a little endian from a byte array .
968	Reads data from an input stream .
969	Reads a label .
970	Returns the bytecode offset for a type annotation .
971	Read element values .
972	Read verification type info .
973	Reads the bootstrap methods attribute .
974	Returns the constructor descriptors .
975	Returns the ctor descriptor for the given arguments .
976	Gets the request map .
977	Creates the request map .
978	Convert an array to a long array .
979	Initialize the decor .
980	Sets a consumer .
981	Adds a path to the search .
982	Adds a path to the search .
983	Add a pattern to the file .
984	Exclude patterns .
985	Adds a file to the list .
986	Find all files .
987	Initialize the files .
988	Returns an iterator over the files .
989	Resolve bean wire mode .
990	Resolve the bean name .
991	Gets the output writer .
992	Gets the output stream .
993	Returns the class name .
994	Gets the descriptor for a constructor .
995	Gets method descriptor .
996	Returns a descriptor for a method .
997	Append descriptor .
998	Returns the size of this field .
999	Parse the arguments and return the number of arguments .
1000	Mark this transaction .
1001	Commit the JTX .
1002	Rolls all resources .
1003	Request a resource from a transaction .
1004	Pop a name from the stack .
1005	Write a string .
1006	Writes a unicode character .
1007	Writes a character sequence .
1008	Sets the parsing error log level .
1009	Sets the region .
1010	Returns true if the value contains the given string .
1011	Registers a pseudo function .
1012	Lookup a pseudo function .
1013	Visit the destination .
1014	Visits an annotation .
1015	Generate static initial init block .
1016	Generate the proxy constructor .
1017	Process super classes .
1018	Find the last element in the range .
1019	Add a string to the output .
1020	Replace the instructions in the class file .
1021	Gets the attribute references .
1022	Registers the default types .
1023	Registers a type .
1024	Look up the type for a given class .
1025	Lookup SQL type .
1026	Creates a proxy for SOCK4s .
1027	Creates a new proxy for SOCK5 .
1028	Creates a proxy for HTTP connection .
1029	Get the total number of thread transactions .
1030	Count the number of threads with the given status .
1031	Associate a transaction .
1032	Convenience method for creating a new transaction
1033	Returns the resource manager for the given resource type .
1034	Creates a proxy object .
1035	Append method name .
1036	Aligns a string to a given size .
1037	Returns a string representation of the given object .
1038	Converts a string to a camel case .
1039	Formats a paragraph .
1040	Convert the given line to spaces .
1041	Escape a string .
1042	Unescapes the given string .
1043	Gets a bean by its name .
1044	Gets a bean by name .
1045	Initialize bean definition .
1046	Invokes a provider .
1047	Register a bean .
1048	Sets a bean property .
1049	Get bean property .
1050	Shuts down the container .
1051	Resolve parameters for a given method or constructor .
1052	Process the form .
1053	Gets the value of the property .
1054	Ends the parser .
1055	Create an element node .
1056	Adds a tag .
1057	Removes the last child node if it is empty .
1058	Returns the query string .
1059	Get action class name .
1060	Calculates the number of elements to the given value .
1061	Iterate over the collection .
1062	Iterate over an array of objects .
1063	Replaces the substring with the given substring .
1064	Replaces a substring with another .
1065	Replaces all occurrences of a string with another .
1066	Replaces the first substring with the given string .
1067	Replaces the first substring with the given substring .
1068	Replaces the last substring with the given string .
1069	Replaces the last substring with the given substring .
1070	Removes substring from string .
1071	Removes characters from a string .
1072	Checks if the given strings are empty .
1073	Checks if all strings are blank .
1074	Convert an object to a string array .
1075	Changes the first character .
1076	Converts a string to a title .
1077	Compress characters in a string .
1078	Returns true if substring starts with substring .
1079	Returns true if the string ends with the given character .
1080	Count the number of occurrences in the source string .
1081	Compares two strings .
1082	Returns the index of the first occurrence of a given string .
1083	Removes the leading character from the string .
1084	Strip trailing character from string .
1085	Strip a string from a string .
1086	Strip a string from a string .
1087	Strip a character from a string .
1088	Crop a string .
1089	Removes leading whitespace from a string .
1090	Removes all whitespace from a string .
1091	Returns the index of the first occurrence of a string .
1092	Joins a collection of objects into a string .
1093	Joins an array of objects into a string .
1094	Convert source string to string .
1095	Checks if the given character is at the given index .
1096	Surrounds a string .
1097	Prefix string with prefix .
1098	Adds a string to a string .
1099	Cut the first occurrence of a string .
1100	Cut the substring from the string .
1101	Cut a string .
1102	Cut a string .
1103	Cut a string and suffix .
1104	Inserts a string into a string .
1105	Creates a string with the specified number of times .
1106	Reverse a string .
1107	Returns the longest common prefix of two strings .
1108	Returns the common prefix of the given strings .
1109	Shortcut to short .
1110	Converts a string to upper case .
1111	Removes quotes from a string .
1112	Converts a byte array to a hexadecimal string .
1113	Converts a string to a byte array .
1114	Detect quote character .
1115	Visit a value .
1116	Visit a enum .
1117	Visit an annotation .
1118	Registers a type descriptor .
1119	Registers an entity .
1120	Removes an entity descriptor .
1121	Creates an entity instance .
1122	Sets the target interface .
1123	Inject target field .
1124	Looks for annotated properties .
1125	Detect database and configure database .
1126	Flushes the output stream .
1127	Writes a byte to the output stream .
1128	Removes session id from URL .
1129	Get the encoded name .
1130	Serializes this buffer to a byte array .
1131	Writes the data source to a file .
1132	Writes the data source to an output stream .
1133	Appends an argument to a string .
1134	Prepend an argument .
1135	Changes the return type .
1136	Stores the whitespace .
1137	Register a type converter .
1138	Lookup a type converter .
1139	Selects a query and returns a list of nodes .
1140	Selects a collection of selectors .
1141	Processes selectors .
1142	Selects the first node matching the query .
1143	Walk all descendants in a list of descendants .
1144	Walks the given root node .
1145	Selects the given node and adds it to the result .
1146	Filter the current results .
1147	Unpack a packed map .
1148	Fills buffer .
1149	Creates a page of data .
1150	Removes the select .
1151	Removes from from from sql .
1152	Removes last order by .
1153	Decode a HTML string .
1154	Detect name .
1155	Build the ORDER BY clause .
1156	Builds a page s page .
1157	Resolve column names and properties .
1158	Find by column name .
1159	Returns the column descriptor with the given property name .
1160	Get property name .
1161	Get column name .
1162	Returns the value of the id of the given object .
1163	Sets the id value of the given object .
1164	Returns the key value for the given object .
1165	Appends a string to the list .
1166	Sets the index .
1167	Expand the capacity .
1168	Calculates the length of the array .
1169	Creates a message which will be added to the target bean definition .
1170	Creates a scoped proxy bean .
1171	Invokes the loop .
1172	Initialize the map .
1173	Filter file .
1174	Sets the watch file .
1175	Start polling .
1176	Process a directory change event .
1177	Adds an enumeration .
1178	Compute the size of the field info .
1179	Put field info .
1180	Creates a target object .
1181	Writes a property to the given injection point .
1182	Decorate a page .
1183	Parses the page content .
1184	Writes the decoded page content .
1185	Writes the region to the page content .
1186	Start the server .
1187	Runs the given process .
1188	Returns a store for the given session .
1189	Create gzip response stream .
1190	Initializes the hint .
1191	Append alias .
1192	Append column name .
1193	Adds a rule to the list .
1194	Applies the rule to the rule .
1195	Processes the include .
1196	Processes the given value .
1197	Gets the pseudo class name .
1198	Adds all elements from the given collection to this collection .
1199	Returns the insertion point for the given element .
1200	Bind an annotation to the given class .
1201	Registers an action configuration .
1202	Lookup an action config .
1203	Adds a new action config .
1204	Sets system properties .
1205	Validates that the given value matches the specified value .
1206	Find the last table .
1207	Replace the elements in the table .
1208	Registers the session data .
1209	Gets the session map .
1210	Initialize this class .
1211	Adds an advice init method .
1212	End the bundle .
1213	Add profiling information .
1214	Extracts profiles and adds them to the given key .
1215	Helper method to add additional profiles .
1216	Convert a type descriptor to a class name .
1217	Convert a type descriptor to a name .
1218	Convert a type descriptor to a signature .
1219	Convert a type to a type name .
1220	Adds all consumers to this consumer .
1221	Creates a collection .
1222	Convert value to single element collection .
1223	Convert value to collection
1224	Convert a collection to a collection .
1225	Convert a primitive array to a collection .
1226	Adds a new line number .
1227	Visits this label .
1228	Puts forward forward to the given byte vector .
1229	Add forward references to the source instruction .
1230	Resolve forward references .
1231	Marks the given subroutine .
1232	Adds the given subroutine to the given subroutine .
1233	Compare two strings .
1234	Fixes the given character .
1235	Adds a byte to this vector .
1236	Puts two integers into the vector .
1237	Put a short value into this vector .
1238	Put a 16 - bit integer into the vector .
1239	Adds two 16 - bit integers .
1240	Put an int into the buffer .
1241	Put four bytes into this vector .
1242	Put a long into this vector .
1243	Put a byte array into this vector .
1244	Increases the size of the buffer .
1245	Authenticate user via http session .
1246	Authenticate user via token .
1247	Authenticate user via basic auth .
1248	Returns the default message for the given key .
1249	Gets the resource bundle .
1250	Gets the element at the given index .
1251	Sets the id of the entity .
1252	Saves the given entity .
1253	Updates the given entity .
1254	Updates a property .
1255	Updates the specified property .
1256	Finds an entity by id .
1257	Finds an entity by property .
1258	Finds an entity from the database .
1259	Deletes an entity from the database .
1260	Delete an entity from the database .
1261	Returns the number of entities in the database .
1262	Increases the specified property with the given delta .
1263	Decreases the specified property .
1264	Returns a list of entities that are related to the given object .
1265	Lists all entities in the database .
1266	Clears the cache .
1267	Returns a set of entries .
1268	Sets the value for the given key .
1269	Removes the value from the map .
1270	Get the current stack trace .
1271	Get the stack trace from the given exception .
1272	Returns the stack trace of the given exception .
1273	Gets an array of exception chain .
1274	Convert an exception to a string .
1275	Convert an exception chain to a string .
1276	Builds a human - readable message .
1277	Unwrap a wrapped Throwable .
1278	Registers the Madvocator as consumer .
1279	Accepts a madvoc component class .
1280	Gets the system class loader .
1281	Gets a resource as a stream .
1282	Gets a resource as a stream .
1283	Returns an input stream for the given class .
1284	Gets the stream as an input stream .
1285	Adds a new route chunk .
1286	Find or create a child or create a new one .
1287	Parse request parameters .
1288	Convert value to collection .
1289	Invokes the setter method .
1290	Sets the element at the specified index .
1291	Creates a bean for the given bean property .
1292	Extract the type from the bean property .
1293	Stops the authentication .
1294	Starts the authentication token .
1295	Converts a local date to a Date object .
1296	Converts a local date time to a calendar .
1297	Define proxy .
1298	Adds a check to the list .
1299	Resolves the given class .
1300	Adds all checks for the given class .
1301	Collects the annotation checks for the given property .
1302	Collect annotation checks .
1303	Copy default check properties .
1304	Encode a URI part .
1305	Encodes a string .
1306	Encodes the scheme .
1307	Encodes the host .
1308	Encodes the URI port .
1309	Encodes the path .
1310	Encodes the query string .
1311	Encodes the query parameter .
1312	Encodes the fragment .
1313	Retrieves the properties of a class .
1314	Returns an array of PropertyDescriptors .
1315	Returns the set of cookies from the set of cookies .
1316	Unzip the response .
1317	Closes the response .
1318	Filter the given scope .
1319	Prints the routes .
1320	Encrypt a byte array .
1321	Decrypt a byte array .
1322	Convert map to bean .
1323	Convert a list to a bean .
1324	Setter method .
1325	Generate map .
1326	Compares two column descriptors .
1327	Sets the default header .
1328	Sends a request to the server .
1329	Send a request .
1330	Adds default headers .
1331	Read the cookies from the response .
1332	Adds the cookies to the http request .
1333	Sends an email .
1334	Sets the subject of a message .
1335	Sets the sent date .
1336	Set headers .
1337	Sets the recipients .
1338	Sets the recipients .
1339	Adds body data to message .
1340	Sets the content part .
1341	Creates an attachment body .
1342	Extracts the content type from a header .
1343	Saves the result set .
1344	Close all result sets .
1345	Closes the query .
1346	Close the connection .
1347	Sets the number of rows that should be fetched .
1348	Sets the maximum number of rows for the query .
1349	Executes the update .
1350	Execute count query
1351	Returns a set of generated keys .
1352	Gets the query string .
1353	Creates a new instance of the specified aspect class .
1354	Creates a collection from an iterator .
1355	Creates a stream from an iterator .
1356	Compares two objects .
1357	Sets the default wiring mode .
1358	Prints the message to stdout .
1359	Get the caller class name .
1360	Shortcut for class name .
1361	Excluded types .
1362	Serialize the given object to a given target .
1363	Serialize an object to a string .
1364	Clone object via serialization .
1365	Writes an object to a file .
1366	Reads an object from a file .
1367	Convert an object to a byte array .
1368	Convert byte array to Object
1369	Resolves the mapped types for the given class .
1370	Creates the table names for the given types .
1371	Read the value of the column .
1372	Cache the given result set .
1373	Resolve provider definition .
1374	Applies the entity to the table name .
1375	Validate connection .
1376	Renders the given view .
1377	Locates the target page for the given path .
1378	Gets the writer .
1379	Gets the output stream .
1380	Writes content to response .
1381	Sets the content type .
1382	Print string .
1383	Login .
1384	Returns the token as JSON .
1385	Login via basic auth .
1386	Logout user .
1387	Convert a URL to a container file .
1388	Create a directory .
1389	Create a directory .
1390	Copy file .
1391	Copies a directory to a directory .
1392	Moves a file to a directory .
1393	Moves a directory .
1394	Deletes a directory .
1395	Reads UTF - 8 chars from a file .
1396	Read characters from a file .
1397	Writes a character array to a file .
1398	Writes a string to a file .
1399	Append a string to a file .
1400	Reads a number of bytes from a file .
1401	Writes a byte array to a file .
1402	Append a byte array to a file .
1403	Copies a file to a directory .
1404	Deletes a file .
1405	Creates a temporary directory .
1406	Returns true if the file is binary .
1407	Checks if the source directory is identical .
1408	Checks if the source file is a file copy .
1409	Prints usage .
1410	Resolves an action method .
1411	Register an action .
1412	Registers a path alias .
1413	Moves to the next iteration .
1414	Creates a new CharArraySequenceSequenceSequenceSequenceSequence .
1415	Executes the target method .
1416	Matches the upper case of the input string .
1417	Returns a CharSequence that can be used as a char array .
1418	Returns an array of URLs for the given class .
1419	Set the bcc recipient address .
1420	Registers a type serializer for a given type .
1421	Lookup a serializer for a given type .
1422	Parse a request from an input stream .
1423	Returns the first value of the request parameter .
1424	Returns the values of a parameter with the given name .
1425	Get a file upload .
1426	Gets the uploaded file upload .
1427	Initialize this instance .
1428	Parse template .
1429	Finds the end of macro .
1430	Count the number of escapes in a macro .
1431	Build query string from multi - map .
1432	Parse query string .
1433	Prepare header parameter name .
1434	Extract media type .
1435	Returns the HTML representation of the given node .
1436	Generates the inner HTML for the given node .
1437	Sets the parameters from the servlet context .
1438	Resets the state of this instance .
1439	Sets the lazy parser .
1440	Returns the mapped type for the given path .
1441	Parse a string as a list of objects .
1442	Parse a string as a map .
1443	Resolves a lazy value to a Supplier .
1444	Skip an object .
1445	Parse a string .
1446	Parse string content .
1447	Parse a unicode .
1448	Parse unquoted string content .
1449	Parse a number .
1450	Parse array content .
1451	Creates empty constructor .
1452	Create a simple method wrapper .
1453	Returns raw type name .
1454	Resolve a reference from a property descriptor .
1455	Resolves the references to the given values .
1456	Read all references from an annotation .
1457	Builds the default references for the given method .
1458	Build the default reference for a property descriptor .
1459	Removes duplicate names .
1460	Convert references to bean references
1461	Converts an annotation value to an array of beans .
1462	Run the JoddJoy
1463	Finds a method from the given class and returns it .
1464	Finds a constructor with the given parameter types .
1465	Resolve all interfaces of a class .
1466	Compare two parameters .
1467	Force access to the given object .
1468	Returns a new instance of the given class .
1469	Returns all superclasses of a given type .
1470	Returns the child class of a given object .
1471	Returns the jar file for a given class .
1472	Sleeps the current thread .
1473	Sleep the current thread .
1474	Wait for an object .
1475	Creates a daemon thread factory .
1476	Gets the value from the supplier .
1477	Visits a parameter .
1478	Visit an annotation .
1479	Visit a type annotation .
1480	Visits a parameter .
1481	Visit a field instruction .
1482	Visits a method instruction .
1483	Visit an invocation instruction .
1484	Visit a jump instruction .
1485	Visit a multi - array instruction .
1486	Visit a try catch block .
1487	Visits a local variable .
1488	Convert properties to a writer .
1489	Process the input stream .
1490	Returns the next element .
1491	Moves the cursor to the next element .
1492	Join two arrays .
1493	Joins an array of arrays .
1494	Resizes the buffer to a new array .
1495	Append an element to the buffer .
1496	Removes an array from the buffer .
1497	Returns the index of the first occurrence of the given value .
1498	Returns the index of the first occurrence of the given value .
1499	Returns the index of the first occurrence of a byte array .
1500	Enable XHTML mode .
1501	Parses the content of the given content .
1502	Performs the parsing .
1503	Compute the maximum stack and local stack .
1504	Ends the current basic basic basic basic basic basic basic block .
1505	Collect attributes .
1506	Inject target object .
1507	Registers a pseudo class .
1508	Lookup a pseudo class .
1509	Invokes the given action .
1510	Gets all the names of the bean .
1511	Visits all properties .
1512	Checks if the given property is equal to the given rule .
1513	Resolve all methods for a given class .
1514	Reads filter config parameters .
1515	Sends the bundle file to the response .
1516	Looks up the bundle file for the given bundle id .
1517	Looks up the gzip bundle file .
1518	Registers a bundle .
1519	Creates a digest for a string .
1520	Create bundle .
1521	Resets stapler .
1522	Fixes relative URLs .
1523	Update column .
1524	Create table ref name .
1525	Gets the db session .
1526	Convert a value to a single element array .
1527	Parse a signature for a signature .
1528	Returns the set of setInjection points for a given class .
1529	Checks if the given property type matches the given property type .
1530	Open a connection .
1531	Open a transaction .
1532	Closes the transaction .
1533	Commits a transaction .
1534	Rolls the current transaction .
1535	Creates a new Properties object from a file .
1536	Creates a new Properties object from a String .
1537	Loads properties from a string .
1538	Returns a subset of properties .
1539	Create a Properties object from a classpath .
1540	Gets a property from a map .
1541	Resolve all variables .
1542	Resolves a property .
1543	Resolve scope .
1544	Get transaction mode .
1545	Registers an annotation .
1546	Read transaction annotation .
1547	Matches the given node .
1548	Determine if this node matches the given node .
1549	Accepts a node at the given index and index .
1550	Unescape attribute .
1551	Build the JRE packages .
1552	Clone this node .
1553	Detach this node from its parent .
1554	Add child nodes .
1555	Inserts a child node at the specified index .
1556	Inserts a new child .
1557	Inserts a new child of this node .
1558	Inserts a new child .
1559	Inserts a new node in the list .
1560	Removes all child elements from this node .
1561	Returns the child node with the given name .
1562	Returns an array of child nodes that match the given predicate .
1563	Checks this node s children .
1564	Initializes the child element nodes .
1565	Initialize sibling names .
1566	Initialize child nodes .
1567	Changes the owner document .
1568	Returns the previous sibling name .
1569	Get the text content of this node .
1570	Returns the HTML representation of this document .
1571	Get the inner HTML representation of this document .
1572	Visit all child nodes .
1573	Get the CSS path .
1574	On decoded tag .
1575	On id attribute start .
1576	Defines a decora tag .
1577	Adds a proxy to the proxied Axis .
1578	Adds a package to the mappings .
1579	Adds the root package of the given action class .
1580	Returns the root package for the given action path .
1581	Resolve validation message .
1582	Returns a copy of this BeanReferences .
1583	Add a named property file .
1584	Iterates through all targets .
1585	Iterate through all targets and in the given scope .
1586	Iterates through all targets in the given scope .
1587	Extract parameter values from parameters .
1588	Create target targets .
1589	Creates an action method argument .
1590	Notifies the session creation .
1591	Notifies the session destruction .
1592	Adds the given value to the list .
1593	Adds all elements in the given array to this list .
1594	Removes a list from the list .
1595	Resolve target .
1596	Sets the target .
1597	Converts a value into a string .
1598	Add a new action filter .
1599	Returns the pseudo function name .
1600	Resolve all the properties for a given type .
1601	Creates a Socks4 proxy socket socket .
1602	Returns the number of attributes .
1603	Gets all action results .
1604	Checks if the given character is equal to the given character .
1605	Returns the index of the first character in the source string .
1606	Returns the index of the first equal to the given index .
1607	Add command line arguments .
1608	Sets environment variable .
1609	Run the process .
1610	Invokes the given listener .
1611	Copy the values from the given frame .
1612	Get abstract type from API format .
1613	Get abstract type from descriptor .
1614	Sets the input frame .
1615	Returns the abstract type for the given local block .
1616	Sets the local variable .
1617	Pushes the given abstract type onto the output stack .
1618	Pushes a descriptor to the symbol table .
1619	Remove the elements from the output stack .
1620	Pop the stack from the given descriptor .
1621	Adds an initialized type .
1622	Gets the initial type of an abstract type .
1623	Writes an abstract type .
1624	Removes all entries from the cache .
1625	Schedules prune .
1626	Visit a module .
1627	Visit a nested host .
1628	Visit an outer class .
1629	Visit an annotation .
1630	Visit a nest member .
1631	Visit a class .
1632	Visit a field .
1633	Get the current thread session .
1634	Close the current thread .
1635	Creates the execution array .
1636	Invokes the action method .
1637	Returns the request body .
1638	Calculates the index of the first item in the given page .
1639	Calculates the index of the first item of a page request .
1640	Returns true if the given value matches the given value .
1641	Convert a char array to a byte array .
1642	Finds the first difference between two characters .
1643	Resolve node name .
1644	Resolve attribute name .
1645	Renders an attribute .
1646	Loads properties from a file .
1647	Load properties from a file .
1648	Load properties from an input stream .
1649	Load props from map .
1650	Load properties from a map .
1651	Load properties from classpath .
1652	Returns the value for the given key .
1653	Sets a value for a profile .
1654	Extract properties from target map .
1655	Extract properties from target map
1656	Extract sub props from target map .
1657	Returns the inner map with the given prefix .
1658	Adds an inner map .
1659	Resolve active profiles .
1660	Returns the names of all profiles .
1661	Gets the profiles for a given property .
1662	Add a property injection point .
1663	Adds a SetInjectionPoint to the set .
1664	Add a MethodInjectionPoint .
1665	Add init method points .
1666	Add destroy method points .
1667	Resolve proxy class .
1668	Inject target object .
1669	Get target wrapper type .
1670	Returns the field descriptor for the given field .
1671	Returns the type of the field .
1672	Returns the key type of the key .
1673	Returns the component type .
1674	Creates a JsonResult from an object .
1675	Create a JsonResult .
1676	Resolve http method name .
1677	Matches a string .
1678	Resolve loading strategy .
1679	Resolve a resource loading .
1680	Loads a class .
1681	Returns the URL for the given name .
1682	Wait for the queue .
1683	Detect the annotation type .
1684	Builds an InjectionPoint .
1685	Processes the given type .
1686	Returns an array of URLs for the given class loader .
1687	Sets the bean .
1688	Updates the bean .
1689	Load property descriptor .
1690	Returns the getter for the given property .
1691	Returns the setter for this property .
1692	Connect to database .
1693	Adds an iterator to the list .
1694	Prints the logo .
1695	Stops the joyite .
1696	Creates a socket .
1697	Creates an SSLSocket .
1698	Gets the default SSL socket factory .
1699	Get socket factory .
1700	Creates a random string from the specified chars array .
1701	Generates a random number of characters .
1702	Returns a random number of characters .
1703	Creates a new array instance .
1704	Inject value into target object .
1705	Convert value to target type .
1706	Visit a service .
1707	Creates a default type cache .
1708	Sets the value for the given type .
1709	Returns all method descriptors .
1710	Convert a hostname to an IP address .
1711	Gets an ip address as an integer .
1712	Determine if the input string is valid .
1713	Get host name .
1714	Download bytes from a URL .
1715	Downloads a string from the given URL .
1716	Download file .
1717	Inject the target request .
1718	Inject the action from the given action request .
1719	Connect to a host .
1720	Connect to a host .
1721	Gets the index of the primitive class name .
1722	Loads a class using the specified class loader .
1723	Loads an array class by its component type .
1724	Shuts down all registered resources .
1725	Returns a binary search for the given array .
1726	Returns a binary search for the given array .
1727	Excludes the given names .
1728	Add additional rules .
1729	Includes the specified template .
1730	Sets the start tag .
1731	Register a component .
1732	Resolve the column s SQL type .
1733	Preprocess sql string .
1734	Create a new ResultSetMapper .
1735	Find the generated key with the given type .
1736	Populate generated keys .
1737	Creates and returns the bean .
1738	Set bean .
1739	Sets query parameters .
1740	Sets the specified objects .
1741	Inserts the given chunk after the previous chunk .
1742	Lookup an entity type .
1743	Returns the table descriptor for the given column reference .
1744	Resolves the table name for the given entity reference .
1745	Returns the class of the given object .
1746	Appends missing whitespace .
1747	Returns an enumeration of the file parameter names .
1748	Include a page .
1749	Gets the URL for the given request .
1750	Gets the request URI from the request .
1751	Resolve parameter names .
1752	Start the Pite container .
1753	Stops the Pite container .
1754	Add a subject to the email .
1755	Method allow to filter the email ID .
1756	Filter from email address .
1757	Filter the recipient address .
1758	Method allow to filter email address .
1759	Add a bcc recipient address .
1760	Add flags to the email filter .
1761	Add a flag to the email filter .
1762	Method filter for received date .
1763	Method allow to filter email date .
1764	Apply a filter to an email filter .
1765	Combine an email filter .
1766	Combine an email filter .
1767	Apply a filter to the email filter .
1768	Concatenates a search term .
1769	Encodes a byte array .
1770	Convert value to byte array .
1771	Determines if the request is eligible for gzip .
1772	Validates the given object .
1773	Validate given target object .
1774	Adds a profile to the profile .
1775	Configures the specified profiles .
1776	Matches profiles .
1777	Parse request body body .
1778	Returns the milliseconds in milliseconds .
1779	Returns a new Julian date .
1780	Subtract a Julian date from another .
1781	Sets the integer .
1782	Initializes the parser .
1783	Emits a comment .
1784	Report an error .
1785	Create pbkkdf2 hash .
1786	Generates PBKDF2 .
1787	Convert hex string to byte array .
1788	Resolve provider definitions .
1789	Sets the name of the email attachment .
1790	Sets the content id from the attachment .
1791	Resolves the content type .
1792	Parse a signature .
1793	Compute the size of the symbol table .
1794	Writes the module attributes .
1795	Decodes the given string using UTF - 8 encoding .
1796	Decode query string .
1797	Start the database .
1798	Check connection provider .
1799	Visit a method signature .
1800	Visit all super classes .
1801	Create a method signature .
1802	Converts a collection of objects into a CSV string .
1803	Convert a line to an array of strings .
1804	Resolves a CtorInjection point for a given class .
1805	Creates a class reader .
1806	Returns the cached advice class reader for the given proxy .
1807	Encrypt a string .
1808	Decrypt a string .
1809	Get a logger by name .
1810	Sets the cookie name .
1811	Create an action request .
1812	Creates and returns the bean wrapper .
1813	Destroy a bean .
1814	Called when the bean is destroyed .
1815	Gets the received emails .
1816	Start the ClusteredService .
1817	Run the report .
1818	Prints an error message .
1819	Prints the rate of messages .
1820	Maps a file to a mapped byte buffer .
1821	Closes the archive .
1822	Performs the number of tasks .
1823	Returns the position of this log .
1824	Inserts the given vector into the buffer .
1825	Appends padding to the end of the message .
1826	Closes the archive .
1827	Poll the error message .
1828	Stops a replay request .
1829	Called when an image is available .
1830	Event event .
1831	read channel status
1832	read channel status
1833	Sets the limit .
1834	Appends a buffer to the buffer .
1835	Polls the subscription .
1836	Maps an aeron directory to a file .
1837	Returns snapshot of this stream .
1838	Creates an unsafe header .
1839	Set the key buffer .
1840	Adds a buffer to the counter .
1841	Sets the connection .
1842	Try to connect .
1843	Sends a close session request .
1844	Starts recording request .
1845	Sets the stop recording .
1846	Replace the message .
1847	Sets the stop replay request .
1848	Request a list of recordings .
1849	Adds a list of records for the given URI .
1850	Adds a list of recording records .
1851	Extend recording message .
1852	Get recording position .
1853	Gets the stop position request .
1854	Sets the list of listeners .
1855	Returns true if this channel matches the given tag .
1856	Returns the destination address for the given channel URI .
1857	Returns a description of this channel .
1858	Add a destination .
1859	Inserts a packet .
1860	Find a ControlToggle .
1861	Sets the value of a parameter .
1862	Returns the channel tag .
1863	Gets the entity tag .
1864	Add session id .
1865	Get tag from string .
1866	Appends padding to the buffer .
1867	Updates the producer limit .
1868	Allocates a counter to a new buffer .
1869	Returns label name .
1870	Returns the number of available bytes in the given buffer .
1871	Clears the attributes of this channel string .
1872	Validates the URI string .
1873	Sets the prefix .
1874	Sets the media URI .
1875	Sets the control mode .
1876	Sets the term length .
1877	Sets the term offset .
1878	Sets the linger value for the connection .
1879	Open datagram channel .
1880	Closes the channel .
1881	Checks if the buffer is valid .
1882	Receive an address from the receiver .
1883	Sets the retransmit action .
1884	Process the timeout .
1885	Returns the string representation of the given status .
1886	Allocates a counter .
1887	Resets the vector to this vector .
1888	Validates this buffer .
1889	Computes the length of the message vector .
1890	Calculates the producer window length .
1891	Checks that the socket buffer is allowed .
1892	Validates the given page size .
1893	Validate the session id range .
1894	Validate the unblock timeout .
1895	Set the error code .
1896	Resets the internal state .
1897	Encodes cluster members .
1898	Add member status to the cluster .
1899	Close member publications .
1900	Checks if the current quorum is active .
1901	Returns the quorum position for the given rank .
1902	Reset log positions .
1903	Checks if the given position is reachable .
1904	Checks if the given list of members are on the given list .
1905	Returns true if the cluster has the majority of the given candidate .
1906	Determine the member .
1907	Validates member members
1908	Returns true if two cluster members are identical .
1909	Returns true if the candidate is an unanimous candidate .
1910	Checks to see if a quorum is candidate .
1911	Checks if a member is not duplicated .
1912	Returns the index of the member with the given id .
1913	Removes a member from an array .
1914	Get the max member id .
1915	Maps CNC CNC CNC CNC file to a CNC file .
1916	Checks if the Cn Cn Cn Cn Cn file is active .
1917	Check if cnc file is active .
1918	Check if cnc connection is active .
1919	Request the driver termination .
1920	Reads the frame length from the buffer at the given offset .
1921	Writes the frame length to the buffer .
1922	Writes a frame type .
1923	Write frame flags .
1924	Writes the given term to the buffer .
1925	Writes a frame term id to the buffer .
1926	Find counter id by recording id .
1927	Find counter id by session id .
1928	Get recording id from counter .
1929	Checks if a given counter is active .
1930	Set an application - specific feedback message .
1931	Reload the file .
1932	Returns the last term .
1933	Create a new recovery plan .
1934	Create a Recovery plan from the snapshot .
1935	Append a new term .
1936	Appends a snapshot .
1937	Commits a log position .
1938	Sets a tombstone entry .
1939	Closes the connection .
1940	Inserts the given vector into the buffer .
1941	Unblock the log .
1942	Gets the channel channel .
1943	Set the channel .
1944	Checks that the given term is valid .
1945	Checks the given page size .
1946	Sets the current active term count .
1947	Computes the position of a new term .
1948	Compute log length .
1949	Stores the default frame header .
1950	Applies default header to log .
1951	Rotates the log .
1952	Initialise the tail with the given partition id .
1953	Returns the offset of the tail of the term .
1954	Returns the raw tail of the tail of the given metadata .
1955	Sets the raw tail tail of the given partition .
1956	Set the token buffer .
1957	Allocates counter .
1958	Find the counter id from the given counters .
1959	Checks if the given counter has a replay state .
1960	Gets the snapshot recording id from the given counter .
1961	Convert flags to a string .
1962	Set the channel .
1963	Offers a buffer to the cluster .
1964	Wrap an atomic buffer .
1965	Commits the buffer .
1966	Aborts the buffer .
1967	Entry point for the MediaDriver .
1968	Close all resources .
1969	Returns the position of this frame .
1970	Allocates a new counter to a new counter .
1971	Find the counter id for the given service .
1972	Returns snapshot of current counters .
1973	Allocates a counter .
1974	Closes this instance .
1975	Dispatches a recording descriptor .
1976	Adds a new slab .
1977	Sets the value at the given index .
1978	Add statistics .
1979	Calculates the row ranges .
1980	Convert array type to array .
1981	Convert a struct type into a struct type .
1982	Annotate a message .
1983	Ends the previous bit packed .
1984	Reads a message .
1985	Read a list of footer from the file .
1986	Reads a summary file from a file .
1987	Reads the footer from a file .
1988	Reads the next row group .
1989	Reads the next row group from the given block .
1990	Reads a dictionary .
1991	Adds a new instance to the ParquetWriter .
1992	Removes a writer .
1993	Updates the allocation based on the total number of allocations .
1994	Registers the given scale callbacks .
1995	Starts the stream .
1996	Start a new block .
1997	Start a new column .
1998	Writes a dictionary .
1999	Write data page .
2000	Writes a chunk of data .
2001	Ends a block .
2002	Copies the input stream to the given position .
2003	Ends the file .
2004	Merges the metadata files into a parquet file .
2005	Merges the specified files into a file .
2006	Writes a job summary file .
2007	Merge a file meta data .
2008	Reads the current value .
2009	Returns true if the given schema is null .
2010	Returns a coalesce of the given objects .
2011	Returns the value of the given schema .
2012	Creates a ThriftMetaData object from a Map .
2013	Convert thrift class to ThriftMetaData object
2014	Gets the extra meta data .
2015	Write null value .
2016	Writes a new page .
2017	Initializes the data from a page .
2018	Allocates the values buffer .
2019	Checks an enum by index .
2020	Calculate bit width for delta blocks
2021	Throws an exception if the given exception is an exception .
2022	Gets the statistics for the given type .
2023	Returns a builder for a given primitive type .
2024	Merges the statistics .
2025	Returns the non null value of the given schema
2026	Creates a new TaskAttemptContext instance .
2027	Invokes a method .
2028	Prints the members of the members of the members .
2029	Merge fields from another group .
2030	Initializes the counter with the given reporter .
2031	Get a filter from the configuration
2032	Get all footers from the given collection of files .
2033	Generates a list of Parquet splits from the given row group .
2034	Writes a record to the writer .
2035	Throws an exception if the field index is valid
2036	Serializes a descriptor to a string .
2037	Creates a new Direct CodecFactory .
2038	Removes missing required fields .
2039	Checks a set field .
2040	Read a file meta data from an input stream .
2041	Closes the record writer .
2042	Sets the schema for the given job .
2043	Adds a parameter to the parquet type .
2044	Throws an exception if the column is not supported .
2045	Checks if the given long is an int .
2046	Creates a schema mapping from an arrow schema .
2047	Creates a schema mapping from ParquetSchema .
2048	Creates a schema mapping from an arrow schema .
2049	Writes the header to the stream .
2050	Skips the next record .
2051	Writes an object to the given configuration
2052	Removes the entry from the cache .
2053	Adds a new value to the cache .
2054	Returns the current value for the given key .
2055	Writes a value to the given schema .
2056	Writes a value to the output stream .
2057	Sets the globals .
2058	Write content to file .
2059	Returns an input stream for the given filename .
2060	Returns a unbound record filter for a given column path .
2061	Convert a schema to a Thrift schema .
2062	Helper method to create a list wrapper wrapper .
2063	Creates a group type .
2064	Gets the merged key - value metadata .
2065	Create a ParquetInputSplit for the given split split .
2066	Gets the fields of a record .
2067	Resolves the requested schema .
2068	Gets input files .
2069	Checks that the input files are valid .
2070	Get the list of input files from a directory .
2071	Returns an unbound record filter for a page .
2072	Creates a list consumer for a given type .
2073	Initialize the partition .
2074	Merges the given tuple into a single tuple .
2075	Sum up a tuple .
2076	Read a struct .
2077	Reads a map entry .
2078	Write an integer .
2079	Read a little endian integer from the given offset .
2080	Sets the schema for the given job .
2081	Creates a new topic if it exists .
2082	Duplicate a pipeline
2083	Creates a stage bean .
2084	Create interceptors .
2085	Create interceptor .
2086	Parse an Avro schema .
2087	Convert milliseconds to days .
2088	Get Avro schema from a header .
2089	Updates v1 format .
2090	Returns the length of the buffer .
2091	Copy blobstore resources .
2092	Resets the state of this object .
2093	Reports a thread to the gauge .
2094	Registers the gauge for the given thread .
2095	Stores control hub configuration .
2096	Performs the login against the current user .
2097	Performs the upgrade if necessary .
2098	Updates the upgrade if needed .
2099	Upgrade stage .
2100	Updates the services if needed .
2101	Upgrade stage .
2102	Gets all fields that are not null .
2103	Returns true if the given name is a system class .
2104	Adds an element to the list .
2105	Adds an element to the list .
2106	Returns the value or the default value if not present .
2107	Adds the reported errors if needed .
2108	Get a descriptor from a file descriptor .
2109	Gets all file descriptors .
2110	Populates all default values for the given file descriptor .
2111	Gets the descriptor for the given message type .
2112	Convert a protobuf field to a Sdc field .
2113	Creates a protobuf message from a record .
2114	Converts a field to protobuf message .
2115	Converts a list of configs to a proxied config .
2116	Check connection .
2117	Convert kudu type to field type .
2118	Create field .
2119	Intercepts a list of records .
2120	Returns the current text .
2121	Adds missing configurations to a stage .
2122	Parses the response .
2123	Adds the response headers to the record .
2124	Writes response header to record .
2125	Write response header to record .
2126	Saves the metadata file .
2127	Configure the client
2128	Parse the response headers .
2129	Increments the source offset by the given amount .
2130	Parses a paginated result .
2131	Adds the response headers to the response .
2132	Resolve headers .
2133	Processes the response .
2134	Determine if the given property is defined .
2135	Convert a DataParserException to a DataParserException .
2136	Convert an exception to a DataGeneratorException .
2137	Gets the credentials .
2138	Creates a preview with the given stage output .
2139	Copy the buffer to the buffer .
2140	Removes redundant duplicates .
2141	Clears the batch .
2142	Find the next line in the file .
2143	Resolves a chunk of multi - line chunks .
2144	Close connection .
2145	Escape a string .
2146	Gets the flow control settings .
2147	Gets the channel provider .
2148	Puts a batch to the consumer .
2149	Compile the given string .
2150	Extracts the digest from the given string
2151	Adds a dictionary from an input stream .
2152	Adds a dictionary from a reader .
2153	Stops the window .
2154	Rolls the current data window .
2155	Serialize object to string .
2156	Deserialize a string from a string .
2157	Deserialize an object from a file .
2158	Writes the given record to the output .
2159	Evaluates an EL expression .
2160	Generate inner field from a list of fields
2161	Get the table name from the metadata record .
2162	Get the name of the database .
2163	Get the internal field value
2164	Get the location from the metadata record .
2165	Get the custom location from the metadata record .
2166	Get the Avro schema from a record .
2167	Get the data format from the metadata record .
2168	Creates a new FieldMetadataBuilder .
2169	Validate partition information .
2170	Generates a partition path .
2171	Serializes an Avro schema to a Hadoop
2172	Sets the parameters .
2173	Gets the configuration .
2174	Parse a timestamp from a string .
2175	Returns a formatted string with the given arguments .
2176	Start a batch context
2177	Checks if record contains Solr fields .
2178	Filters a list of field names from a list of fields .
2179	Send an event to handler .
2180	Parse a jar name from a jar file .
2181	Parse a dependency from a URL .
2182	Returns a new instance of CouchbaseConnector .
2183	Closes the pipeline .
2184	Validates Couchbase configuration .
2185	Gets the label from a string .
2186	Verifies that a dependency definition exists .
2187	Reads a secret from the vault .
2188	Get the CDC operation type from the header .
2189	Write document .
2190	Build subdoc mutation .
2191	Generates the SQL statement for the given table .
2192	Configures the configuration .
2193	Takes a message from the producer and returns it .
2194	Commits the given offset .
2195	Sets the error message .
2196	Injects a given stage .
2197	Get the list of stages
2198	Get the publisher definition .
2199	Format column name .
2200	Formats the given value .
2201	Get pipeline configuration information .
2202	Create a draft pipeline .
2203	Returns a list of pipelines filtered by the filter .
2204	Imports a pipeline envelope .
2205	Gets directory path .
2206	Get the operation code from the record .
2207	Get the path for the given column
2208	Returns an enriched event from the queue .
2209	Gets a runner from the queue .
2210	Returns the runner for the given idle time .
2211	Returns a runner to the pipeline .
2212	Destroys the runner .
2213	Validates that the container is not destroyed .
2214	Checks if the stream exists .
2215	Gets the last shard id .
2216	Process the queue .
2217	Handle SQL exception .
2218	Get the hash code for the given record .
2219	Compare two files .
2220	Retrieves the PID from the given process .
2221	Extract fields from a record .
2222	Returns the UserGroup object for the given user .
2223	Roll the current stats .
2224	Returns a snapshot of this statistics .
2225	Ensure that the directory exists .
2226	Performs a batch of records .
2227	Writes a batch of records to a batch .
2228	Writes the records to the iterator .
2229	Trigger a no more data event
2230	Detects a new partition .
2231	Update record for HDFS
2232	Processes a single key - value pair .
2233	Returns true if the given stage is the same .
2234	Main entry point .
2235	Configure client .
2236	Resolve headers .
2237	Get the http method .
2238	Fill null types .
2239	Gets the value of a field from a record .
2240	Load schema from registry
2241	Registers a schema .
2242	Load schema from registry
2243	Gets the schema id for the given subject .
2244	Load schema from registry
2245	Write schema id .
2246	Detect schema id .
2247	Get default values from schema
2248	Parse all records from a payload .
2249	Logs the report details .
2250	Get bad records .
2251	Initialize the schema .
2252	Returns the outward edge of the given vertex .
2253	Gets the inward edge of a vertex .
2254	Serialize offset map .
2255	Deserialize the offset map .
2256	Queues the report
2257	Gets the report .
2258	Checks if the backup checkpoint exists .
2259	Saves the offsets to the main offset file .
2260	Deletes the given blob .
2261	Handles an error .
2262	Handles archive .
2263	Returns a live file reader .
2264	Release the reader .
2265	Sets the DPM base URL .
2266	Add default header .
2267	Parse a date .
2268	Encode a string
2269	Get client .
2270	Initializes the device database .
2271	Get the table metadata .
2272	This method is used to create a bulkIner .
2273	Create an event builder .
2274	Build a schema from the given fields .
2275	Convert an operation code to an operation type .
2276	Add jars to the job .
2277	Add jars to the job .
2278	Check field order by name .
2279	Checks if the given field name matches the given field name .
2280	Gets the offset for a file offset .
2281	Start premain method .
2282	Gets the parallelism .
2283	Run a query .
2284	Convert fields to Map .
2285	Get the table description
2286	Validates that the table can be inserted .
2287	Get the column type for the field
2288	Returns true if the field is nullable
2289	Get the schema for the table
2290	Get the column properties
2291	Gets the class for the given type name .
2292	Initializes AerospikeClient .
2293	Get topic .
2294	Convenience method for upgrade .
2295	Returns an input stream for the file .
2296	Gets the output stream .
2297	Returns true if this file exists .
2298	Parse a string representation of a file .
2299	Validates that all the services are supported .
2300	Creates a new aggregator .
2301	Gets the unit unit unit .
2302	Create aggregator data .
2303	Creates a group by name .
2304	Start the data provider .
2305	Stops the aggregator .
2306	Rolls the aggregator data .
2307	Acquires a LoginManager .
2308	Release the login manager .
2309	Converts a glob pattern to a regular expression .
2310	Lists objects in Amazon S3 .
2311	Stop the snapshot .
2312	Produces an empty batch of runners for idle runners .
2313	Creates the failure snapshot .
2314	Converts a record to a bound statement .
2315	Sets the configuration map .
2316	Generate lookup key .
2317	Handles partitioning .
2318	Reads a line from the reader .
2319	Roll a new timer .
2320	Enable DPM authentication .
2321	Disables the DPM .
2322	Normalize dpm url .
2323	Retrieve a user token from the server .
2324	Logs the user in the web .
2325	Update token file .
2326	Update dpm properties
2327	Returns a schema field for a field .
2328	Creates a schema for a schema .
2329	Get the decimal scale or a decimal value .
2330	Returns the default value for the given schema .
2331	Initialize metrics if necessary
2332	Compare two files .
2333	Returns the index of the specified group with the given name .
2334	Returns a list of group names .
2335	Returns true if the given string is escaped .
2336	Determines if the given character is escaped .
2337	Checks if the given string is inside a character class .
2338	Count the number of open parens in a string .
2339	Extracts groups from a named pattern .
2340	Replaces all occurrences of the given pattern with the given replacement string .
2341	Gets the query .
2342	Refresh the schema for the given schema and table .
2343	Returns true if the transaction is expired .
2344	Returns the offset of this file .
2345	Fast forward forward .
2346	Gets the empty stage .
2347	Convert a string to an appropriate number .
2348	Parse a part .
2349	Parse values .
2350	Returns the primary keys .
2351	Create custom field mappings .
2352	Returns SQL type name .
2353	Gets the table name .
2354	Set primary keys .
2355	Handle SQL exception .
2356	Process the pipeline .
2357	Prepare the pipeline context for the pipeline .
2358	Finishes the pipeline execution .
2359	Flattens a record into a Map .
2360	Create a Detached stage runtime .
2361	Execute the action .
2362	Gets the columns from the given record .
2363	Gets the condition for a partition .
2364	Validates that the given offset is stored in the given table .
2365	Returns the list of requested definitions .
2366	Gets non - empty arguments .
2367	Gets the operation .
2368	Convert bytes to display .
2369	Scans the current file to find the live file .
2370	Get the number of pending files .
2371	Checks if the given name is whitelisted .
2372	Returns true if the expected version matches the expected version
2373	Main entry point .
2374	Propagate runtime configuration .
2375	Validates the report description .
2376	Create a new JdbcRecordWriter .
2377	Create a JdbcRecordWriter .
2378	Updates a list of values in the list .
2379	Extract named groups from raw data .
2380	Commit a consumer .
2381	Creates an embedded SDC instance .
2382	Sets fields in record .
2383	Gets all the remote pipelines from the remote store .
2384	Converts an AckCollector to ack collector .
2385	Factory method for creating a new gauge .
2386	Gets the parameters for the given operation .
2387	Generate header attributes .
2388	Validate a record .
2389	Removes temporary parquet file .
2390	Get an InputStream from a record .
2391	Get a DataFileReader from an input stream .
2392	Write parquet .
2393	Checks if input is input .
2394	Checks if input is input encrypted .
2395	Check input decrypted input .
2396	Checks if input is input decrypted .
2397	Prepares the given field .
2398	Sets the parent pattern .
2399	Appends a replacement to the string builder .
2400	Returns a map of named names .
2401	Replace all properties with the given replacement string .
2402	Adds the avro schema for the given configs .
2403	Returns the value of a global variable .
2404	Create the start event record .
2405	Create a stop event record .
2406	Fixes the offset column and returns the offset
2407	Extract value from field value
2408	Execute an alter table .
2409	Execute the alter table .
2410	Retrieve a description of a database .
2411	Executes the query .
2412	Executes a query .
2413	Executes a pipeline .
2414	Iterates over all pipelines .
2415	Gets the offset commit trigger .
2416	Checks if the pipeline is on record error .
2417	Accepts a pipe .
2418	Get the insert id for the given record .
2419	Get value from field path .
2420	Sets the fragment in the record .
2421	Sets the document in the record .
2422	Sets the N1QL query row in the record .
2423	Handles a full file data format .
2424	Returns true if the given group is incomplete .
2425	Helper method to set the exception class loader .
2426	Sets the creator .
2427	Log out logout .
2428	Sets the exceptions .
2429	Replace all variables in the path .
2430	Ensure that the directory is allowed .
2431	Main entry point .
2432	Returns the path for the given record .
2433	Rename the final path to the final name .
2434	Checks if the record should be rolled back .
2435	Matches a string with the given pattern .
2436	Returns a map of file names .
2437	Gets the remaining wait time .
2438	Gets the offsets for a given offset .
2439	Creates and initializes the stage library .
2440	Create a new instance of stage library
2441	Creates a new instance of stage library .
2442	Gets the value of the metric .
2443	Finds the header end of the RFC 62616 header .
2444	Gets the body size .
2445	Saves a byte buffer to a temporary file .
2446	Creates a new SSL server socket factory based on the keystore .
2447	Returns the mime type for a file .
2448	Processes a session .
2449	Stops the server .
2450	Sets the routes .
2451	Send this response to the given output stream .
2452	Send body body .
2453	Creates a response with a fixed length and total bytes .
2454	Returns whether or not the gzip should be used .
2455	Set cookie .
2456	Unload the cookies from the queue
2457	Decodes the given base64 value .
2458	Encodes the given cookie value .
2459	Sets the table name .
2460	Extracts the username from a principal .
2461	Registers the spring session repository .
2462	Get principal name from the session .
2463	Gets a session from the session .
2464	Get the JNDI name from the model node .
2465	Gets the canonical name of a method .
2466	Registers a Synchronized synchronization .
2467	This method is called when the list of SynchronizedSyncs has completed .
2468	Returns the current transaction
2469	This method is called by subclasses
2470	Determines if the given persistence unit is in the cache .
2471	Gets the server config from the server .
2472	Decrement the read lock count
2473	Increment the read lock count
2474	Adds a service to the registry .
2475	Called when we have expired .
2476	Deploys the search dependency .
2477	Make the top level bda bda bda bda bda .
2478	Creates the JSEA meta data .
2479	Sets the config name and file name .
2480	Gets security meta data .
2481	Gets the servlet url mapping .
2482	Gets the servlet class mapping .
2483	Resolve the binding .
2484	Returns the list of available connections .
2485	Parse core environment element element .
2486	Parse process id .
2487	Get the path address from the given operation node .
2488	Set the path address to the operation .
2489	Returns the value of the attribute value .
2490	Returns whether the given operation is included in the given operation .
2491	Creates a composite operation .
2492	Create a Add operation on the given address .
2493	Create an operation with the given address and index .
2494	Creates a read attribute operation .
2495	Creates a write attribute operation .
2496	Creates an undefine attribute .
2497	Gets the context .
2498	Adds a URL context factory for the given scheme .
2499	Removes a URL context factory from the given scheme .
2500	Load validator providers .
2501	Modifies the deployment .
2502	Configures the endpoint servlet .
2503	Modify the context root .
2504	Gets the transport class name from the deployment .
2505	Sets the runAs for the given principal .
2506	Removes the runAs identity from the security context .
2507	Process all servlets .
2508	Inject a property with the given name and value .
2509	Determine if the argument types match the given argument types .
2510	Finds a method based on the given name and property name .
2511	Finds a field with the given name and type .
2512	Initialize the options .
2513	Derives the purpose information from the request .
2514	Run standalone report .
2515	Collect JAX report .
2516	Register a resource adapter .
2517	Unregisters a resource adapter .
2518	Register transformations .
2519	Write parameters to an output stream .
2520	Read an exception from an input stream .
2521	Get lock owner .
2522	Release a lock .
2523	Adds a log object to the server .
2524	Adds the CDI flag to the deployment unit .
2525	Gets the component view .
2526	Invokes the given endpoint .
2527	Get the component view method .
2528	Returns true if the method matches the given parameters .
2529	Creates a resource resource .
2530	Gets the EJB security meta data .
2531	Gets the domain .
2532	Ensures that the given security domain is identical .
2533	Sets the IDL name .
2534	Gets the absolute path .
2535	Creates a JNDIName from the given string .
2536	Processes the xml deployment
2537	Handle a request .
2538	Checks if this object is in a transaction .
2539	Returns the transaction registry .
2540	Returns the connection factory .
2541	Gets last component .
2542	Returns true if the name is empty .
2543	Returns a NameNotFoundException .
2544	Creates a naming exception .
2545	Creates a naming exception .
2546	Creates a new CannotProceedException .
2547	Returns a naming enumeration from a collection of objects .
2548	Recursively binds a name to a given name .
2549	Gets the activeMQ component control .
2550	Parse connection attributes .
2551	Creates a component instance .
2552	Gets the virtual file .
2553	Resolves the runtime name .
2554	Create listener builder .
2555	Get a primitive analysis
2556	Shuts down the component .
2557	Gets a list of url patterns .
2558	Get servlets meta data .
2559	Gets the servlet mappings from a JBossWebMetaDataMetaData .
2560	Gets the securityConstraints from a JBossWebMetaDataMetaData .
2561	Get login config meta data .
2562	Get the context parameters from the JBossWebMetaDataMetaData .
2563	Gets the web resource collections .
2564	Gets the init params .
2565	Creates a new security constraint .
2566	Creates new web resource collection .
2567	Creates a new servlet meta data .
2568	Creates a new servlet mapping .
2569	New auth constraint meta data .
2570	Creates a new UserDataConstraintMetaDataMetadata .
2571	New param value .
2572	Returns a new ParamValueMetaData instance .
2573	Registers the session interceptors for the given component .
2574	Process injection targets .
2575	Shutdown the container .
2576	Get the JNDI name from the model node .
2577	Resolves an attribute .
2578	Gets the pattern type .
2579	Tests whether the given resource adapter is managed by the given resource adapter .
2580	Determine if the given resource adapter can be used for external pools .
2581	Get activeMQMQ server name from properties .
2582	Returns default persistence unit name .
2583	Start the activity .
2584	Unregister this activity .
2585	Suspend the server .
2586	Resume the server .
2587	Called when an invocation is completed .
2588	Called when a transaction is created .
2589	Start the controller .
2590	Unbound resources .
2591	Returns the capability name for the given capability base .
2592	Create a list of resources .
2593	Get all the class loaders from the deployment unit .
2594	Checks if the given persistence unit is class transformer .
2595	Returns true if the given persistence unit is two phase bootstrap .
2596	Returns true if the default data source should be used .
2597	Determines whether or not the property is skipped .
2598	Gets the ORB for the given server .
2599	Initializes the ORB .
2600	Initialize the connection handles
2601	Sets the current naming store .
2602	Validate default values
2603	Check parameter type .
2604	Looks up the defaultValue annotation .
2605	Validate base type .
2606	Gets the deferred entity managers .
2607	Returns a string representation of the transaction status .
2608	Add cache dependencies .
2609	Extract database dialects .
2610	Analyze database dialect .
2611	Identifies the dialect .
2612	Checks if database exists .
2613	Convert a string to a schedule date .
2614	Sets the node name .
2615	Mark the deployment unit .
2616	Read parameters from an input stream .
2617	Write the result to the output stream .
2618	Writes an exception to the output stream .
2619	Performs a lookup .
2620	Start the SFSBbB .
2621	Called when the SFSBatch is finished .
2622	Returns the current SFS call stack .
2623	Push the current SFS call stack .
2624	Pop the current SFS call stack .
2625	Get the current SFS call .
2626	Determine the dependencies for the deployment .
2627	Processes managed beans .
2628	Process phase listeners .
2629	Returns the IDL name for a given class .
2630	Inserts an object into an array .
2631	Convert Java name to IDL identifier
2632	Returns true if the given string is a reserved IDL keyword
2633	Returns the signature for a given class .
2634	Returns the signature of a method .
2635	Returns the identifier for a primitive type .
2636	Returns the batch permission for the given name .
2637	Gets the transaction scoped entity manager .
2638	Adds the given key to the map .
2639	Convert a security role to a ModelNode .
2640	Returns the most recent entity version .
2641	Gets the timers from the given id .
2642	Returns the directory for the given timed object id .
2643	Adds a new listener to the specified scope .
2644	Remove a listener .
2645	Fires a Naming event .
2646	Returns a consumer that will close the value .
2647	Add a private credential .
2648	Returns an object instance for the specified reference .
2649	Adds a transaction interceptor for the given view .
2650	Subtract a substring from a string builder .
2651	Creates a transport configuration .
2652	Add an EAR prefix to a standalone resource adapter .
2653	Gets the root deployment unit .
2654	Returns the service name .
2655	Creates a new view configuration .
2656	Create an InjectionSource
2657	Returns the view interceptors for the given method .
2658	Add a view interceptor to the viewFactory
2659	Add an interceptor to the given view .
2660	Returns all client interceptors for a given method .
2661	Adds a client interceptor to the client .
2662	Adds an interceptor to the client .
2663	Puts a private data for the given type .
2664	Fires an unexpected element .
2665	Gets the EJbEndpoints from the deployment unit .
2666	Gets the POJO endpoint .
2667	Gets the endpoint name .
2668	Gets the endpoint class name .
2669	Returns the servlet metadata for the given name .
2670	Returns the required attachment with the given key .
2671	Gets optional attachment from deployment unit .
2672	Gets the JBossWebMetaData from the deployment unit .
2673	Gets the JBossWebWebServiceMetaData component meta data .
2674	Gets the EJB endpoint metadata for the given class name .
2675	Gets the context root from the deployment .
2676	Returns the class for the given name .
2677	Returns a URL for the given name .
2678	Returns a collection of resources matching the given name .
2679	Lists the servlet resources for a given path .
2680	Closes the current entity manager .
2681	Returns the EntityManager associated with the given name .
2682	Registers cleanup listener .
2683	Processes WAR .
2684	Update server config .
2685	Returns true if all fields are public .
2686	Creates a new HTTP endpoint .
2687	Creates a new GWT deployment model for the given deployment unit .
2688	Determine if the deployment is a JAXRS deployment
2689	Sets the next timeout .
2690	Set the timer state .
2691	Merge the deployment data .
2692	This method is called when the deployment is required
2693	Add a dependency to the remote view
2694	Returns a set of all container interceptors .
2695	Determine if the specified method is level level .
2696	Checks that one element is required .
2697	Returns the type of the given class .
2698	Returns the component type at the given index .
2699	Gets the keystore resource .
2700	Gets the resource definition resource definition .
2701	Gets the trust manager resource .
2702	Parse a name from a string .
2703	Converts an ins string into a vector representation .
2704	Parse a name component .
2705	Shutdown the IR object .
2706	Converts a CORBA servant to a reference object
2707	Authenticate the given username and password .
2708	Determine if the type matches the given class .
2709	Lookup a binding by name .
2710	Unbind a JNDI binding .
2711	Instantiate a bean .
2712	Configure properties .
2713	Dispatches a lifecycle joinpoint .
2714	Returns the current selector context .
2715	Convert a name to a bean name .
2716	Returns the service name for a given class .
2717	Returns the class with the given name .
2718	Processes the annotations .
2719	Post processing steps .
2720	Validates the given descriptor .
2721	Create the deployment descriptor .
2722	Create web application descriptor .
2723	Gets the auth method .
2724	Deploys the service descriptor .
2725	Handles a stateless session .
2726	Creates a class for the given class .
2727	Gets an anonymous object id .
2728	Gets the list of PersistenceProviders .
2729	Clears the given set of deployment providers
2730	Adds a specific persistence provider to the deployment list .
2731	Find the parent class loader for a given class loader .
2732	Process the deployment .
2733	Adds the persistence unit to the deployment .
2734	Sets annotation indexes for the deployment unit .
2735	Gets the adapter adaptor adaptor for the deployment .
2736	Returns the shared PersistenceProviderAdaptor for the given deployment unit .
2737	Lookup the persistence provider for a deployment .
2738	Returns the classes that are annotated with the given URI .
2739	Build the EJB archive meta data .
2740	Builds the enterprise bean meta data .
2741	Refresh participant .
2742	Get the container analysis for a given class .
2743	Lookup the container for a given class .
2744	Creates a new container for the given class .
2745	Get IDL module name .
2746	Converts an integer to a hexadecimal string .
2747	Returns a hexadecimal representation of a long .
2748	Determine if a method is accessor .
2749	Determine whether a method is a mutator .
2750	Returns true if the method is non - app exceptions .
2751	Returns the name of an accessor .
2752	Returns the name of an attribute .
2753	Determines the operation names that are mapped to an operation .
2754	Fixes the case names of the analysis .
2755	Escape an IP name .
2756	Parse an XML environment element .
2757	Parse the default context propagation element .
2758	Process attributes .
2759	Returns a list of PersistenceProvider with the given module name .
2760	Creates an add operation handler for the given child type .
2761	This method is called when the deployment is deployed
2762	Write an attribute .
2763	Gets the methodInff .
2764	Creates a session .
2765	Infers the name of a message .
2766	Registers a set of endpoint handlers .
2767	Returns the job names for the given job name .
2768	Initialize the job .
2769	Returns the URI of the request .
2770	Creates a ResolveResult from a URL .
2771	Looks up the named object .
2772	Binds an object to the named object .
2773	Call unbind method .
2774	Returns an enumeration with the specified name .
2775	Calls the destroy .
2776	Destroy a subcontext .
2777	Calls a naming context .
2778	Create a subcontext .
2779	Lookup a link with the given name .
2780	Adds a property to the environment .
2781	Removes a property from the environment .
2782	Add transformations to the builder .
2783	Parse a credential .
2784	Remove a security domain .
2785	Lookup JNDI for a given context name .
2786	Creates a ModularReference for a given type and factory .
2787	Create a new ModularReference instance .
2788	Creates a new ModularReference instance .
2789	Gets a LocalIDLLLLif object .
2790	Wait for a security domain .
2791	Compute the masked password
2792	Initializes the security vault .
2793	Start the security session .
2794	Prints the configuration to the console .
2795	Display the vault configuration .
2796	Returns the vault configuration .
2797	Returns true if the given value is not null .
2798	Get the deployment name for an activation .
2799	Insert a value into a Any object .
2800	Indicates whether the given JNDI permission implies the given permission .
2801	Gets the actions .
2802	Gets the log name .
2803	Sends an attribute change notification .
2804	Returns the CORBA object for a CORBA object .
2805	Returns the value of the given type .
2806	Returns the context service name .
2807	Returns the set of interceptors .
2808	Adds an interceptor to the EEM module .
2809	Adds a dependency .
2810	Returns a list of interceptors for the given method .
2811	Returns a list of interceptors for a given method .
2812	Adds an interceptor to the specified timeout .
2813	Add an interceptor to the AroundConstructorFactory
2814	Adds a preConstructor to the specified priority .
2815	Adds a preDestroy interceptor to the given priority .
2816	Adds a pre - pass interceptor to the interceptor .
2817	Add a pre - activate interceptor to the service .
2818	Sets the component factory .
2819	Remove JNDI aliases from a list of bindings .
2820	Accepts the EJB client context .
2821	Returns the context service name for the given component .
2822	Returns the context service name of a module .
2823	Get BindInfo for the given environment name .
2824	Get BindInfo for a given JNDI name .
2825	Returns a cache that is not logged in .
2826	Gets the value members .
2827	Returns an array of values for this type code .
2828	Creates the subsystem root .
2829	Parse the configuration element .
2830	Start the application .
2831	Add WeldInteganti .
2832	Returns the JobOperator service name .
2833	Add a component to the deployment .
2834	Add a message destination .
2835	Gets the views for the given view type .
2836	Gets the components of a component .
2837	Get the views for the given component .
2838	Resolve message destination name .
2839	Builds the transformers .
2840	Reject attribute with default value .
2841	Renames an attribute .
2842	Pop the identity from the context cache .
2843	Loads the module ids .
2844	Checks if the version is missing .
2845	Computes the slot for the JSF version .
2846	Returns the constant type code for a constant .
2847	Adds a type code to the map .
2848	Create a package definition for a package .
2849	Add all interfaces in a container
2850	Add abstract values to the abstract values
2851	Add a class .
2852	Adds an interface definition .
2853	Add a ValueDefinition to a ValueDefinition .
2854	Adds an exception definition .
2855	Gets class level .
2856	Checks if JTS is enabled .
2857	Initializes the naming store .
2858	Closes the root context .
2859	Check if the given method is allowed .
2860	Checks if the transaction is in the transaction .
2861	Get all component classes .
2862	Gets the timers for the transaction .
2863	Gets extra parameters .
2864	Extract parameters from the configuration .
2865	Convert a type to a Class .
2866	Convert a value to an Enum .
2867	Get the type types of values .
2868	Checks if the given type names are equal .
2869	Returns the next binding .
2870	Returns true if there are more bindings .
2871	Creates a new binding .
2872	This method is called when a health check is received .
2873	Closes health monitor .
2874	Returns the reference for the given locator .
2875	Returns the handle for the given locator .
2876	Returns an enum value from the model node .
2877	Skips the given amount of bytes .
2878	Throws an exception if not found .
2879	Adds a component description .
2880	Add a set of classes to the deployment class loader .
2881	Unbind the given name .
2882	Lookup a name .
2883	Returns a list of all the names of this class .
2884	Returns the bindings for the given name .
2885	Add a factory to the registry .
2886	Saves the context properties to the given context .
2887	Add IO subsystem .
2888	Create the welcome content handler .
2889	Get a bean from the pool .
2890	Calculates the operation analysis .
2891	Collects the metrics for a given resource .
2892	Do the deployment deployment .
2893	Performs the deployment .
2894	Publish the web app .
2895	Stops the web app .
2896	Start the Weld container .
2897	Registers an endpoint config .
2898	Retrieve a timeout .
2899	Called after the timer processing .
2900	Get all methods of a given class
2901	Returns the declared fields of the given class .
2902	Gets the constructor for the given class .
2903	Gets the method with the specified name and parameters .
2904	Adds the messaging active messages to the migration mode .
2905	Returns true if the parameter should be allowed to be ignored .
2906	Migrate generic transport classes .
2907	Cancels this task .
2908	Run the task if it is running .
2909	Sets the global property .
2910	Checks if the given expression can be executed .
2911	Estimates the number of conditions .
2912	Find all classes in the directory .
2913	Gets all classes that implement the given interface .
2914	Gets the generic multivalue type .
2915	Evaluate this record .
2916	Determine the type for the given field .
2917	Updates the record .
2918	Find record by ID
2919	Returns the minimal set of nodes for the given sharded query .
2920	Translates the flattened AND clause into a list where clause is left equal to the same order .
2921	Add the ORDER BY BY clause
2922	Extract sub queries .
2923	Checks if the given ID is from the cluster .
2924	Handle a class with index only .
2925	Determine if the given class is a class hierarchy .
2926	Get order direction .
2927	Returns true if there are multiple indexes in the given key .
2928	Returns the best index for the given indexes .
2929	Builds an IndexDescriptor for the given fulltext .
2930	Returns the common factor between two indexes .
2931	Creates a new instance of field handling strategy .
2932	Checks if the user is allowed or not .
2933	Checks if the rule is defined .
2934	Returns compact server status .
2935	Initialize system database .
2936	Load local databases .
2937	Remove a member from the cluster .
2938	Selects lock manager .
2939	Assigns lock manager from cluster .
2940	Commits the transaction .
2941	Rolls the transaction .
2942	Updates the identity after record changes .
2943	Updates the record cache .
2944	Prepare file creation if necessary .
2945	Moves atomic move file to target .
2946	Gets disjoint patterns .
2947	Determine if the local node is local .
2948	Add characters to the builder .
2949	Returns true if the connection is connected .
2950	Merges two buffers from two buffers .
2951	Split a short into two bytes .
2952	Execute the command .
2953	Adds the given key to the document .
2954	Removes the specified key from the map .
2955	Run the command .
2956	Executes the first query .
2957	Creates a new file .
2958	Checks to see if the region is allowed .
2959	Replaces the content of this file .
2960	Executes a command .
2961	Ends the request .
2962	Add a host to the server
2963	Start a request .
2964	Gets the database .
2965	Returns a connection with the given channel id .
2966	Kill the given connection .
2967	Interrupts the given channel id .
2968	Disconnect the given channel id .
2969	Pushes the distributed configuration to the client
2970	Swaps the entries at the specified index .
2971	Release locks .
2972	Synchronize all entities in the database .
2973	Update metadata .
2974	Returns the last record iterator .
2975	Returns the next character .
2976	Executes the query .
2977	Executes on asynchronous replication .
2978	Registers the given compression algorithm .
2979	Get the number of open files .
2980	Returns true if this expression is indexed by the given operator .
2981	Moves the buffer to the specified position .
2982	Fills the buffer .
2983	Executes the last step and returns the last step .
2984	Execute the full script .
2985	Evaluates the record .
2986	Executes the graph .
2987	Loads the configuration from the database .
2988	Parses the OCommandRequest .
2989	Execute the request .
2990	Updates the schedule .
2991	Adds an index definition .
2992	Sets the expression for the expression .
2993	Convert a document to a map .
2994	Gets the collate for the given document .
2995	Gets the escaped string .
2996	Advances the probe .
2997	Executes the command .
2998	Build ODocument from file .
2999	Check if the password matches the hash function .
3000	Returns the hash of the given input string .
3001	Checks if the given algorithm is supported .
3002	Creates an index .
3003	Returns an iterator over all vertices in the graph
3004	Get all edges in the graph
3005	Returns the partition key .
3006	The scheduler timeout .
3007	Gets features .
3008	Checks if the changes are up to the given page .
3009	Parse the timeout .
3010	Parse lock strategy .
3011	Creates a cluster .
3012	Free the cluster .
3013	Start the cache .
3014	Shutdown the database .
3015	Returns an OScriptResultSet with the given entity .
3016	Grants access to the given resource .
3017	Revoke an access .
3018	Processes the given record .
3019	Bind the parameters .
3020	Reset the table .
3021	Returns the index of the given item .
3022	Spread a random integer .
3023	Creates an index .
3024	Drops all indexes .
3025	Returns the index of the global index .
3026	Returns the linked class
3027	Returns the document as a stream .
3028	Removes a listener .
3029	Registers a database .
3030	Timeout the response .
3031	Returns a copy of this database .
3032	Tries to merge the given value into this one .
3033	Replace the tree with the given object .
3034	Transform result into map .
3035	Executes the command .
3036	Closes all resources .
3037	Called when a storage is unregistered .
3038	Returns a set of function names .
3039	Returns a set of collate names .
3040	Returns a set of command names .
3041	Gets the field size and type from the current position .
3042	Write status .
3043	Write headers .
3044	Write records to response .
3045	Write record to response
3046	Sends the response to the response .
3047	Sends a stream to the response .
3048	Opens a new ODB database object .
3049	Closes the database .
3050	This method is called when the collection is changed .
3051	Completes a component operation .
3052	Pushes the given component counters .
3053	Pushes the write cache to the snapshot .
3054	Pushes a new storage counter to the snapshot .
3055	Pushes the WALCCounters from the snapshot .
3056	Pushes the specified component counters .
3057	Stops the write cache .
3058	Stop the fuzzy checkpoint timer .
3059	Stop the full checkpoint timer .
3060	Stops the commit timer .
3061	Stop the wal record timer .
3062	Stop the wal flush timer .
3063	Parses an OSQL statement .
3064	Initialize receive messages .
3065	Initialize disconnect timer .
3066	Removes the record from the database .
3067	Sets a property .
3068	Removes a property .
3069	Checks if a class exists in the schema .
3070	Wrap the given cursor .
3071	Define a single vertex attribute .
3072	Define an edge attribute .
3073	Get new record entries by class name .
3074	Gets the new record entries by the given cluster id .
3075	Add an index entry .
3076	Merge two sets .
3077	Processes the given record .
3078	Returns true if the index can be executed .
3079	Prepare a set of keys .
3080	Writes a page to the cache .
3081	Reads a page .
3082	Truncate the segment .
3083	Open the file .
3084	Check if the given node is active .
3085	Gets the new node strategy .
3086	Checks if the execution mode is asynchronous .
3087	Checks if the given cluster is read - only .
3088	Get a map of servers .
3089	Get the servers .
3090	Checks if the given server is contained in the given collection .
3091	Checks if a server contains a given cluster .
3092	Gets the master servers .
3093	Gets all configured servers .
3094	Get all clusters on the given server .
3095	Get all clusters owned by the given server .
3096	Get the cluster owner .
3097	Gets the cluster name .
3098	Gets the configured servers .
3099	Returns all registered servers .
3100	Gets the data centers .
3101	Gets the write quorum .
3102	Checks if the cluster is sharded .
3103	Gets the list of servers .
3104	Returns the data center of a given server .
3105	Get global read quorum .
3106	Gets the write quorum .
3107	Gets the cluster configuration .
3108	Gets the data center .
3109	Clear initialization stack .
3110	Returns an indexed index .
3111	Drops an index .
3112	Adds a new vertex to the graph .
3113	Adds an edge to the graph .
3114	Gets the OrientVertex .
3115	Returns an iterable over all vertices of the given class .
3116	Get all edges of the given class .
3117	Gets an edge .
3118	Use this to reuse .
3119	Shuts down the database .
3120	Returns the type of this vertex .
3121	Gets the vertex type .
3122	Create a new vertex type .
3123	Drop a vertex type .
3124	Gets the edge type .
3125	Create an edge type
3126	Returns the OrientElement associated with the given id .
3127	Drop a key index .
3128	Creates an indexed key index .
3129	Removes an exception listener .
3130	Fires an exception event .
3131	Stop monitoring .
3132	Register a MBean with the given storage id .
3133	Unregister a MBean
3134	Fetch write cache .
3135	Fetch the system statistics for all threads .
3136	Fetch component statistics from component .
3137	Compress a string
3138	Returns the configuration property .
3139	Detach an object from the repository .
3140	Gets the version of the object .
3141	Execute SQL query .
3142	Marks the object as dirty .
3143	Unset the dirty flag .
3144	Returns all index types .
3145	Returns a set of engine engines .
3146	Gets the missing nodes .
3147	Gets the conflict responses .
3148	Get the best group group group .
3149	Compute quorum response
3150	Gets the received responses .
3151	Gets execution plan .
3152	Returns true if the predicate is allowed .
3153	Returns the library for the given database .
3154	Release a database engine .
3155	Returns the next page .
3156	Updates the size of the bag .
3157	Returns the value at the given index .
3158	Determine if the index can be used by the ORDER BY clause .
3159	Returns the index of the index within the given index .
3160	Jump to white spaces .
3161	Jump to the specified index .
3162	Sets the fetch plan .
3163	Enqueue a repair record .
3164	Cancel a record
3165	Enqueue a new cluster
3166	Gets the dependencies for a pattern .
3167	Creates a pojo from the given class name .
3168	Registers the given collection of entity classes .
3169	Registers all entities in the given class .
3170	Sets the class handler .
3171	Acquires a database .
3172	Get number of available connections .
3173	Acquires a database .
3174	Executes the database .
3175	Returns an iterator with the given class loader
3176	Checks if the cache configuration is valid .
3177	Create a vertex from a JSON document .
3178	Create an edge from a JSON document .
3179	Convert an element to a JSON object .
3180	Convert an element to an object node .
3181	Executes an import .
3182	Returns the status of the current job .
3183	Gets the active data centers .
3184	Extract the algorithm from a cipher string .
3185	Creates an OymmetricKey from the given key .
3186	Create an asymmetric key from a file system .
3187	Create a new OSymmetric key from an input stream .
3188	Encrypt the given byte array using the given encryption algorithm .
3189	Saves the key to a stream .
3190	Saves a keystore to a keystore
3191	Set child context .
3192	Adds an object to the unique result .
3193	Get the value as object .
3194	Authenticate a database .
3195	Get the value from the map .
3196	Gets the record .
3197	Read the current record .
3198	Get the transaction graph
3199	Get the OrientGraph
3200	Setup database pool .
3201	Gets a property .
3202	Stops the transaction .
3203	Parse a statement .
3204	Gets the next token .
3205	Returns the token at the given index .
3206	generate ParseException
3207	Gets all vertices in the graph .
3208	Removes this vertex from the graph .
3209	Adds an edge to the graph
3210	Adds an edge to an edge .
3211	Get the connection class name .
3212	Get the connection for the specified field .
3213	Process broken records .
3214	Returns a map of all OConsole methods .
3215	Executes a task on the local node .
3216	Get the number of nodes with the given status .
3217	Backup the underlying stream .
3218	Wait for next retry .
3219	Returns the argument at the specified position .
3220	Returns the number of parameters in the request .
3221	Connect to the remote server .
3222	List databases .
3223	Gets the server information .
3224	Check if the database exists
3225	Drops database .
3226	Free the database .
3227	Release a database .
3228	Get the cluster status
3229	Executes the index .
3230	Gets the ODB graph .
3231	Parses retry .
3232	Save the record .
3233	Delete the record .
3234	Gets the authentication header .
3235	Authenticate a user .
3236	Checks if the given username is authorized .
3237	Run the server .
3238	Adjusts the beginning of the start line .
3239	Set the bucket pointer .
3240	Gets the bucket pointer .
3241	Ends an atomic operation .
3242	Acquires an exclusive lock .
3243	Change the maximum amount of memory used in memory cache .
3244	Locate the server .
3245	Read parameters .
3246	Shuts down the log .
3247	Adds an item to the map .
3248	Removes the entry from the map .
3249	Acquires an entry .
3250	Returns the value associated with the given key .
3251	Removes all entries from the cache .
3252	Closes the file .
3253	Empty read buffers .
3254	Adds a task to the buffer .
3255	Called after read .
3256	Puts an entry in the read buffer .
3257	Returns the closest power of the given value .
3258	Processes an event .
3259	Convert the value to the underlying object .
3260	Convenience method to convert all of the objects in the map .
3261	Gets the object serializer for the given type .
3262	Initialize the shutdown queue .
3263	Returns OEngine by name .
3264	Simplified method .
3265	Executes the query and returns the profiling statistics .
3266	Adds a new reader to the reader list .
3267	Authenticate OAuth token .
3268	Creates the metadata .
3269	Attempt to acquire a read lock .
3270	Returns the vertex at the given direction
3271	Returns the id of this graph .
3272	Sets the value of the current element .
3273	Removes a property from the graph .
3274	Clears the cache .
3275	Deletes the contents of this file .
3276	Ends the batch .
3277	Creates a new vertex .
3278	Parse strategy .
3279	Gets the positions of the embedded collection .
3280	Executes the command .
3281	Fixes a link to a link .
3282	Fills the record .
3283	Set the version .
3284	Get the record type .
3285	Initializes the database instance .
3286	Print the exception stack trace .
3287	Executes an index query .
3288	Convert the link to record .
3289	Register command
3290	Create server user configuration from user document .
3291	Analyze the given condition .
3292	Create indexed property .
3293	Attaches the given object to this object .
3294	Gets the index class .
3295	Sets the next item in the sequence .
3296	Truncates the table .
3297	Add a base class .
3298	Adds the polymorphic cluster ids to the index .
3299	Convert a link to a stream .
3300	Releases a pointer to the pool .
3301	Check indirect memory leaks .
3302	Clears the pool .
3303	Convert a byte array to an int .
3304	On open database .
3305	Installs the clusters of the given class .
3306	Dumps the distributed servers .
3307	Returns the index of the first element in the array .
3308	Returns the index of an object in the array .
3309	Returns a set of all clusters that have been resolved .
3310	Handle the search .
3311	Gets the counter counter .
3312	Report a tooltip .
3313	Parses the fetch plan .
3314	Parse no cache .
3315	Optimized sort .
3316	Returns the status of the batch .
3317	Executes the command .
3318	Handle JVM error .
3319	Performs an index value .
3320	Rolls the given micro - transaction .
3321	Executes the command .
3322	Registers a new cluster .
3323	Set property .
3324	Executes the schema .
3325	Executes the database .
3326	Delete record .
3327	Callback method for the hooks .
3328	Delete document from document .
3329	Counts the number of views in the database .
3330	Count the number of classes in the database .
3331	Activate on current thread .
3332	Register an encryption algorithm .
3333	Returns the relative position of the given position .
3334	Parses the next word .
3335	Parses the next word .
3336	Parses the next chars .
3337	Parses optional keyword .
3338	Check if the parser is a separator .
3339	Executes the SQL command .
3340	Clear configuration files .
3341	Returns the offset as an offset .
3342	Extracts the token from the request .
3343	Acquires an access token .
3344	Copy access token .
3345	Returns true if there are more characters .
3346	Reads a line from a byte array .
3347	Reads a line from the input stream .
3348	Skips the given number of bytes .
3349	Skip n bytes .
3350	Ensures that the given offset is valid .
3351	Performs a merge sort sort .
3352	Swap the elements of the two n - th elements .
3353	Performs a quick sort algorithm .
3354	Hashes a 32 - bit integer .
3355	Hashes a long value .
3356	Writes a byte buffer to the file .
3357	Truncates the contents of the file .
3358	Sets the position of this file .
3359	Called by consumer refresh .
3360	Waits for the current tasks to complete .
3361	Returns a stream that matches the given query .
3362	Returns a set of compaction targets that are compaction .
3363	Deletes the snapshot .
3364	Returns the hash code for a field .
3365	Returns true if two fields are equal
3366	Removes all references that are referenced by the given schema .
3367	Called when the announcement is completed .
3368	Called when a cycle is finished .
3369	Read header tags .
3370	Extracts the primary key from the given object .
3371	Clear all entries in this set .
3372	Reads ordinals from the input stream .
3373	Returns the size of the bit set .
3374	Gets the field value for a field .
3375	Copies the contents of this byte array into another byte array .
3376	Copies data from srcPos to destPos .
3377	Compares two byte arrays .
3378	Copies all segments from src to dest .
3379	Copies data from srcPos to destPos .
3380	Reads all bytes from an input stream .
3381	Writes data to an output stream .
3382	Ensures that the segment has already been allocated .
3383	Returns the index of the given field .
3384	Calculates the total size of a list of select buckets .
3385	Returns true if there is no collection of collections
3386	Generate the files for the given directory .
3387	Generate the head of the hschema .
3388	Returns true if the key matches the given ordinal path .
3389	Returns the record key for the record .
3390	Create a field path for a primary key .
3391	Create a field path for hash index .
3392	Create a field path for a prefix .
3393	Adds an object to the map .
3394	Initializes the average words .
3395	Returns true if the specified key contains the specified key .
3396	Returns the percentage of the current cardinality .
3397	Adds a field for a given type .
3398	Orders the given schemas in the given collection .
3399	Initializes this instance with the default major major version defaults .
3400	Returns the value at the given index .
3401	Returns all records that match the given field name and value .
3402	Returns a map of records that match the given field name and value .
3403	Sets the matched match paths .
3404	Sets the key paths for the given elements .
3405	Calculates the index .
3406	Restores the latest version from the previous state .
3407	Runs the cycle .
3408	Excludes the given key index .
3409	Removes all referenced objects from this object .
3410	Writes the hblob header to the stream .
3411	Calculates the heap footprint of a particular type
3412	Writes the data to the buffer .
3413	Write a fixed length integer .
3414	Write a fixed length .
3415	Returns an ordinal .
3416	Sorts the sorted order .
3417	Generates a hash for a given key .
3418	Returns the hash of the given key .
3419	Resize storage .
3420	Finds a free ordinal .
3421	Initializes the list of pointers to write .
3422	Compares the given key .
3423	Grows the internal key array .
3424	Returns the hash code for the given key .
3425	Returns an empty key array with the given size .
3426	Checks if two fields are equal
3427	Finds a match for the given key .
3428	Swap the current ReadStateHelper .
3429	Returns the size of the hash table .
3430	Runs a compaction cycle .
3431	Writes a snapshot to an output stream .
3432	Writes the delta to the output stream .
3433	Adds a collection of schema names to a collection .
3434	Normalizes a field path .
3435	Reindex the hash index .
3436	Finds the matching elements matching the query .
3437	Triggers an asynchronous refresh with a random delay .
3438	Triggers async refresh .
3439	Add a type diff to the table .
3440	Calculates the difference between two types .
3441	Writes a VLong to the output stream .
3442	Writes a VInt to the output stream .
3443	Write a VInt to a byte array .
3444	Read a VInt from the input stream .
3445	Reads a VLong from the input stream .
3446	Helper method to add a child view to this view .
3447	Refresh the size of loading views .
3448	Updates the UI .
3449	Handles pull event .
3450	Overrides over the given view .
3451	Adds a rule .
3452	Adds a function to the rule .
3453	Creates a new rule builder .
3454	Creates a new rule .
3455	Returns a builder for this rule .
3456	Returns a builder with the given result type .
3457	Creates a new rule builder .
3458	Creates a new rule with the given facts .
3459	Creates a new instance of this Rule .
3460	Returns an instance of the given rule .
3461	Returns the first field of the given annotation .
3462	Gets the first annotated method .
3463	Gets an annotation from the given class .
3464	Registers an audit rule .
3465	Updates the status of a rule .
3466	Gets the rule status map .
3467	Returns a new rule with the given result type .
3468	Adds a new action .
3469	Adds a new action .
3470	Resets the default value .
3471	Returns a new rule with the given fact type .
3472	Gets the pojo rules .
3473	Reads an empty line or end of the table .
3474	Convert a list of services to an array
3475	Get port from the build configuration
3476	Extracts port mapping from config .
3477	Parse the port mapping .
3478	Adds the port if not null .
3479	Removes the first port from the list .
3480	Adds missing parts .
3481	Appends an image stream to the target file .
3482	Determine whether the given port or not .
3483	Returns the port of the given service name .
3484	Get the host and port from the given service name .
3485	Put a value in the map if it does not exist .
3486	Merges the given map into the given map .
3487	Merges two maps .
3488	Put all values in the map if they are not null .
3489	Wait until a pod is ready .
3490	Validate the given string .
3491	Convert an entity to a list of ItemsList
3492	Gets the resource version .
3493	Checks if a given pod is ready .
3494	Gets the current context from the config .
3495	Checks if a route has a given name .
3496	Checks if a resource has a resource with the given paths .
3497	Read and validate and validate the fragment .
3498	Convert map to EnvVarList
3499	Merges two resources .
3500	Merges the map and removes them from the original map .
3501	Returns true if the pod is local or not .
3502	Reads configuration from a file .
3503	Adds a port if it is valid .
3504	Gets the json configuration string .
3505	Returns the plugin configuration for the given system .
3506	Returns the configuration for a given secret .
3507	Downloads the given URL to a file .
3508	Compare two strings .
3509	Appends a profile with the given profile .
3510	Looks up a profile with the specified name in the given directory .
3511	Read all profiles from the classpath .
3512	Read all profiles from the classpath .
3513	Finds the profile yaml file for the given directory .
3514	Returns a list of metadata paths for the given file extension .
3515	Creates a list of profiles from an input stream .
3516	Get image pull policy .
3517	Checks if OpenShift mode is open .
3518	Get replica count .
3519	Returns the first child element with the given name .
3520	Installs a template .
3521	Removes tag by name .
3522	Apply namespace .
3523	Applies a project to the project .
3524	Applies a project request to the project .
3525	Returns the namespace for the given entity .
3526	On apply error .
3527	Creates the Kubernetes .
3528	Extracts the Kubernetes .
3529	Get environment variables
3530	Returns the seconds in milliseconds .
3531	Parses the given duration in milliseconds .
3532	Scans the files in the build output directory .
3533	Disable OpenShift features .
3534	Checks if the given service is in the given list .
3535	Parses the given input stream .
3536	Returns the generator context .
3537	Extract the generator config from the generator .
3538	Gets the maven enric context .
3539	Extract the enric config from the resource .
3540	Returns the default icon .
3541	Recursively copy app config files .
3542	Get a Properties from a URL
3543	Get Spring bootstrap version from Maven project .
3544	Creates a list of service objects .
3545	Perform the enrich .
3546	Gets the raw configuration .
3547	Returns a flattened map from the source map .
3548	Extract the watcher config from the watcher .
3549	Get a single template from the list of Kubernetes
3550	Retrieve the build date from docker8 .
3551	Gets the value of a property .
3552	Returns an unmodifiable map .
3553	Returns a list of processors for the given type .
3554	Adds the builder to the builder .
3555	Get from mode .
3556	Gets the name of the image .
3557	Gets the registry .
3558	Returns whether or not online is online .
3559	Gets the external service URL for the given service .
3560	Returns a boolean from global properties .
3561	Creates a JestClient instance .
3562	Create internal node .
3563	Scans all plugin classes .
3564	Creates an AmericanExpressRewards balance from the JSON string .
3565	Retrieves the payard balance balance .
3566	Create a PayPal payment resource
3567	Performs a GET request .
3568	Sends a POST request to the server .
3569	Creates a new VenmoConfiguration from JSON object .
3570	Collects the device data from the fragment .
3571	Collects device data from the device .
3572	Collect the payment device data from the server .
3573	Get PayPal client metadata id
3574	Checks if the signature is valid .
3575	Get a string value from a json object .
3576	Parses a list of payment methods from the request body .
3577	Gets the browser config for the browser .
3578	Gets the browser agreement configuration .
3579	Performs a GET request .
3580	Submits a HTTP POST request to the main thread pool .
3581	Performs a POST request .
3582	Start a request .
3583	Appends a local payment to the page .
3584	Adds a listener .
3585	Removes a listener .
3586	Performs a billing agreement with the given amount .
3587	Called when the activity is completed .
3588	Parses PayPal account .
3589	Converts a list of words into a dictionary .
3590	Removes word from dictionary .
3591	Convert Korean tokens to Java strings .
3592	Extracts Korean phrases from a sentence .
3593	Detokenize a list of tokens .
3594	Fetches data from a channel .
3595	Join a list of NAL units .
3596	Join a list of NAL units into a buffer .
3597	Returns the profile for the given integer .
3598	Normalizes the taps .
3599	Reads the next marker to the stream .
3600	Reads the next marker from the stream .
3601	Returns the maximum available frame .
3602	Modifies a file .
3603	Copy files from src to dst .
3604	Gets the duration of a track .
3605	Convert a frame to a time value .
3606	Convert a time value to a frame .
3607	Computes the total number of edited timestamps .
3608	Calculates the edit time for the edited movie .
3609	Get the qt player frame number from a movie
3610	Convert a movie frame to milliseconds
3611	Convert the timecode to a timecode frame
3612	Formats a timecode to a timestamp
3613	Calculates a 7 bit integer .
3614	Set a value from a list .
3615	Returns true if this color space matches the given color space .
3616	Return the size of a given size
3617	Creates a new Demuxer from the input stream .
3618	Reads an integer from the buffer .
3619	Create a WAV header
3620	Create a WAVHeader from a WAV header .
3621	Parses the audio decoder config .
3622	Encodes the symbol .
3623	Reads the decoder image markers .
3624	Splits a movie to a movie .
3625	Decode a frame .
3626	Sets the big endian .
3627	Determines a pair of blocks .
3628	Encode a video frame
3629	Encode a long value to a byte array .
3630	Returns the length of the EML encoded length .
3631	Adds a packet to the stream .
3632	Positions the file .
3633	Decode a bit .
3634	Decodes a bit from the input stream .
3635	Gets the next marker marker .
3636	Returns the SampleFrequency for a integer integer .
3637	Sets the prediction for the given point .
3638	Start a block of a block
3639	Compute the coefficients of a block
3640	Calculates the number of blocks
3641	Concatenates bits from two bits .
3642	Rewind a 32 - bit integer .
3643	Rewind a range of integers in reverse order .
3644	Sets the key frame in the frame .
3645	Get the image buffer from the buffer
3646	Returns the id of the given gain change point
3647	Convert a byte array into an integer array .
3648	Convert an int array to a byte array .
3649	Converts a buffer to a float buffer .
3650	Deserialize a float from a float buffer .
3651	Interprets the input stream into an output buffer .
3652	Interprets the input buffer into an output buffer .
3653	Returns the size of the video .
3654	Build the map out map .
3655	Builds the map map to be used in the map
3656	Reads a batch from a ByteBuffer .
3657	Read a 32 - bit integer .
3658	Calculates the median deviation of a matrix .
3659	Encode a picture .
3660	Encode the IDR frame
3661	Encode a PFrame .
3662	Returns a collection of supported codecs .
3663	Gets the supported tags .
3664	Adds a reference to the list .
3665	Gets the internal reference .
3666	Flushes all references .
3667	Loads a library from the given appname .
3668	Unpack a library .
3669	Deletes temporary files .
3670	Returns the default layout for the given number of channels
3671	Get the audio channel at the specified index .
3672	Creates a new VideoPacket .
3673	Gets the version information .
3674	Returns the default time base .
3675	Creates a new Demuxer instance .
3676	Play a video from a file .
3677	Displays a video frame at the given time .
3678	Make a codec descriptor .
3679	Prints an option .
3680	Registers a factory for the HttpServer .
3681	Generates a unique unique identifier .
3682	Creates a new AudioResampler .
3683	Gets the video frame rates .
3684	Gets the supported video format .
3685	Gets the supported audio sample rates .
3686	Gets the supported audio formats .
3687	Gets the supported audio channel layouts .
3688	Sets a flag .
3689	Sets a flag .
3690	Gets the decoder .
3691	Gets the stream .
3692	Gets the muxer format .
3693	Make a filter graph .
3694	Gets the type of the filter .
3695	Returns a ByteBuffer representing a ByteBuffer .
3696	Constructs an AudioFrame from the given AudioFormat .
3697	Resample image .
3698	Validates the given image .
3699	Validates the given picture .
3700	Returns the filter graph for this filter .
3701	Gets the metadata for this video .
3702	Get the CPU architecture from a string .
3703	Gets the CPU architecture from a string .
3704	Get OSFamily from a string .
3705	Get OS family from a string .
3706	Play a sound .
3707	Loads a library with the specified major version .
3708	Sets the loaded library .
3709	Tries to load a given library .
3710	Initialize search paths
3711	Checks if the given library is already loaded .
3712	Records the screen .
3713	Deletes the reference .
3714	Gets the stream at the given position .
3715	Returns the muxer for this stream .
3716	Make a set script transaction .
3717	Decodes a base58 - encoded string .
3718	Generates a random string .
3719	Get a transaction
3720	Returns all transactions for a given address
3721	Returns all transactions in the given address .
3722	Gets the list of block headers .
3723	Get a block by signature
3724	Send a transaction
3725	Send a script to a private key
3726	Compile a script .
3727	Write an array of primitive arrays .
3728	Flush the buffer .
3729	Writes object to memory .
3730	Reads a class .
3731	Writes the given object to the output buffer .
3732	Set mmF data
3733	Returns the specificity of a given class .
3734	Resizes the store to the given size .
3735	Removes a bit from the map .
3736	Write ASCII string .
3737	Sets the output stream .
3738	Returns a JSON representation of the FST configuration .
3739	Returns a structure that can be used to construct the structure .
3740	Calculates the size of an object .
3741	clear all cached objects
3742	Gets the object input stream .
3743	Gets an object input stream .
3744	Returns a copy of the input stream .
3745	Gets the object output stream .
3746	Register a cross platform class mapping
3747	Get the name of a class .
3748	Write an integer to the stream .
3749	Writes an unsigned integer .
3750	Writes a big - endian integer packed into the stream .
3751	Write an array .
3752	Writes a buffer to the buffer .
3753	Gets the cached field info for this field .
3754	Called when an object is written .
3755	Called when an object has been written .
3756	Get the FSTClazzInfo for the given reference
3757	Write an array .
3758	Set a string to the buffer .
3759	Write primitive array .
3760	Finish tracking changes .
3761	Snapshot changes .
3762	Registers an object for writing .
3763	Serializes an object to a byte array .
3764	Reads a byte array from a byte array .
3765	Reads a byte array from the buffer .
3766	Reads an integer from the stream .
3767	Removes the specified number from the queue .
3768	Sets the thread pool .
3769	Start Cassandra .
3770	Clean data for embedded cassandra cassandra cassandra cassandra cassandra cassandra cassandra cassandra cassandra cassandra cassandra cassandra cassandra cassandra cassandra cassandra cassandra cassandra cassandra cassandra cassandra cassandra cassandra cassandra cassandra cassandra cassandra cassandra cassandra cassandra cassandra cassandra cassandra cassandra cassandra cassandra cassandra cassandra cassandra cassandra cassandra cassandra cassandra cassandra cassandra cassandra cassandra cassandra cassandra cassandra cassandra cassandra cassandra cassandra cassandra cassandra cassandra cassandra cassandra cassandra cassandra cassandra
3771	Copy the given resource to a directory
3772	Print the information about the current thread .
3773	Tests if remote port is available .
3774	Returns an empty subscriber state .
3775	Gets the opx descriptors from the classpath .
3776	Calculate the output shape
3777	Performs the logical conjunction of a complex ndarray .
3778	Returns true if the ndarray is satisfied
3779	Computes and returns true if the specified condition is true
3780	Performs the OR operation on the ndarray
3781	Applies a condition to a number where the condition is satisfied
3782	Returns the first index of the first element in the array
3783	Returns a FlatProperties object as a FlatProperties object .
3784	Create FunctionProperties from FlatProperties .
3785	Converts a collection of FunctionProperties into a FlatBuffer .
3786	Sets the exception .
3787	Sets the exception if it is not null .
3788	Merges two coordinates .
3789	Partition a list of data
3790	Convert nd4j type to nd4j type
3791	Shutdown the transport .
3792	Get the current device architecture
3793	Convert a column matrix to an image
3794	Pooling operation
3795	Create a CompressionDescriptor from a ByteBuffer
3796	Partition a list of batches into a batch .
3797	Validates the concatenation .
3798	Sets the data type .
3799	Performs a range of numbers
3800	Flattens a collection of matrices
3801	Binary product of the input tensor
3802	Create a complex ndarray
3803	Create a new complex array with the given value
3804	Creates a new complex array with the given value
3805	Determines if this object should be replicated .
3806	Subtracts two complex numbers .
3807	Calculates a complex number .
3808	Return the ceiling of a complex number .
3809	Returns the negation of a complex number .
3810	Returns the absolute value of a complex number .
3811	Power of a complex number .
3812	Get Aeron context .
3813	Binaryarization .
3814	Sample a dataset
3815	Returns the memory footprint of this matrix
3816	Convert an exception to a string .
3817	Convert a full hostname to a simple hostname .
3818	Convert an array of strings to a comma separated string .
3819	Converts a byte array into a hexadecimal string .
3820	Gets a comma separated list of strings .
3821	Splits the given string into an array of strings .
3822	Splits a string into an array of strings .
3823	Find the next separator in the given string .
3824	Escapes the given string .
3825	Joins a collection of strings using a separator .
3826	Converts a string to a camelized string .
3827	Replaces all tokens in the given template with the given map .
3828	Gets the stack trace .
3829	Invert a matrix
3830	Get a BigInteger .
3831	Determine if the data is on the host side .
3832	Determine if the object is active .
3833	Creates the shape information for the data buffer
3834	Create the shape information for the given shape
3835	Returns true if the given shape is a vector .
3836	Get the order of ndarray
3837	Returns the offset for the given shape
3838	Convert an array of indices to an index
3839	Gets a short from the buffer .
3840	Allocate the data buffer .
3841	Copies data from a buffer to a buffer .
3842	Gets a constant buffer .
3843	Returns the uri uri .
3844	Multiply power
3845	Log ndarray
3846	max of ndarray
3847	Max of two arrays
3848	Minimal min function
3849	Compute min of two arrays
3850	Stops the ndarray
3851	expm1
3852	Logs the log1 p1 .
3853	Prepare the bounds
3854	Adjusts the scheme to be used by the given parameters
3855	Returns next data set .
3856	Performs a QR decomposition .
3857	Builds the allocation shape from a DataBuffer
3858	Checks if the given name exists in the environment variable .
3859	Reads data from an input stream .
3860	Checks the tail of all events that have been queued .
3861	Create ndarray from numpy pointer
3862	Create an ndarray from a file
3863	Allocates a dummy pointer
3864	Attaches an object to the lock .
3865	Returns true if the server is started .
3866	Execute the given operation
3867	Flush queue .
3868	Returns an input stream for the resource .
3869	Get the device id for a given thread
3870	Attaches a thread to a device .
3871	Get the next device .
3872	Returns the operating system name .
3873	Calculates the ARCH type .
3874	Publish an ndarray
3875	Starts the instrumentation application .
3876	Create a DataBuffer
3877	Intercepts int data type .
3878	Add two complex numbers .
3879	Processes the message .
3880	Average pooling .
3881	Performs a convolution2 convolution .
3882	Resets the internal state .
3883	Returns the name of the given Op
3884	Returns the new array for the given variable name
3885	Get the shape of this variable
3886	Evaluate this function
3887	Compress a double array
3888	Expand a complex ndarray
3889	Center a complex array
3890	Truncate a complex ndarray
3891	Pads a complex number to a complex number .
3892	Returns the maximum element of a vector .
3893	Broadcast an array
3894	Processes a vector .
3895	Returns the gamma .
3896	Returns the square root of a square .
3897	Computes the cbrt of a BigDecimal .
3898	Returns the root of the power of the specified power .
3899	Returns the expraction of the given number .
3900	Returns the expiry of this value .
3901	Returns the power of x y .
3902	Rounds a number to a power of the given number .
3903	Returns the sin .
3904	Returns the tangent tangent .
3905	Calculates the cosine of a power .
3906	Calculates the sinh of a given number .
3907	Calculates the tanh tan .
3908	Returns the arcs of the given x .
3909	Calculates the arcs of a given number .
3910	Calculate Gamma .
3911	Determine the value of a power of the given probabilities .
3912	Scale a BigDecimal .
3913	Scales a BigDecimal .
3914	Convert error error to decimal .
3915	Sets the function for the given id .
3916	Get input inputs for given function
3917	Update an array for a given variable
3918	Set the shape for a variable
3919	Associate an array with the given variable
3920	Gets property .
3921	Add a property to the network
3922	Add outgoing arguments for given function
3923	Add arguments for given variables .
3924	Checks if the given function has any arguments .
3925	Evaluate the input and return the result .
3926	Create a new variable
3927	Create an array variable with the given variable
3928	Create a array with zeros like array
3929	Remove an argument from the function .
3930	Set the gradient for the given variable name
3931	Average pooling operation .
3932	Add a gruell
3933	Execute the given list
3934	Start a loop .
3935	Execute the given function
3936	Executes the given function with the given name .
3937	Execute backward and end result
3938	Add a variable to the place holder .
3939	Allocates a memory pointer .
3940	Returns the length for the given data type .
3941	Convert a data type to a string representation .
3942	Get the data type from the context
3943	Get the op number
3944	Destroy all workspaces for the current thread
3945	Print the allocation statistics for the current thread .
3946	Performs a matrix .
3947	Receive an ndarray
3948	Execute the accumulation function
3949	Performs a threshold .
3950	Gets the node name from the input node .
3951	Invoke a scalar operation
3952	Assert that no workspaces are open .
3953	Returns the log likelihood of the given labels
3954	Request to tick
3955	Tries to request to access to the current state .
3956	Releases to TeState
3957	Get the current access state .
3958	Build the environment .
3959	This method sends the clipboard to the clipboard
3960	Initialize the current dataset
3961	Initialize host collector
3962	Returns the device pointer for the given data buffer .
3963	Synchronize data buffers for device side .
3964	Applies the gradient to the history
3965	Synchronize the allocation point to host .
3966	Convert an ndarray to an index
3967	Gets properties for this function .
3968	Returns true if there is place holder inputs .
3969	Execute SDVariable
3970	Format an ndarray
3971	Imports a given TFGraph .
3972	Convert a complex NDArray to a Blob .
3973	Load a complex ndarray .
3974	Saves the object to the database .
3975	Copy the real real data to the given array
3976	Copy the imaginary data to the given array .
3977	Sets the difference between two numbers .
3978	Assigns this element to another .
3979	Returns the rows of a matrix
3980	This method is used to put a complex ndarray into a complex number .
3981	Puts a column into a complex array
3982	Subtract two complex ndarray
3983	Add another ndarray
3984	Subtract two complex numbers .
3985	Adds two complex numbers .
3986	Assigns the given number to a complex number .
3987	Returns a complex ndarray
3988	Compute eigenvalues .
3989	Computes the generalized eigenvalues of A
3990	Returns the maximum element of the specified complex array .
3991	Copy two complex ndarray .
3992	Multiply a scalar vector .
3993	Processes a skipGram message .
3994	Returns the count of nonzero count
3995	Performs a reduction .
3996	Gets the no - arg constructor .
3997	Gets the constructor for the given class .
3998	Invokes a method handle with the given parameters .
3999	Returns the first annotation of the given type .
4000	Returns the declared annotation of the given class .
4001	Returns true if the given class is present on the given class .
4002	Creates a proxy for the given result .
4003	Loads the entity from the given entity .
4004	Save a pojo .
4005	Creates a new MemcacheService instance .
4006	Gets the metadata for the given kind .
4007	Query for keys only .
4008	Performs a hybrid query .
4009	Performs a normal query .
4010	Query a projection query
4011	Returns the count of the query .
4012	Partition the iterator to the given iterator .
4013	Loads the keys from the given keys .
4014	Print a message .
4015	Create a key for a given pojo .
4016	Compare two objects .
4017	Convert raw key to a Key object .
4018	Convert a typed key to a raw key .
4019	Gets the kind of the given class .
4020	Returns true if the given type is missing .
4021	Determine if the given type is a super type .
4022	Get the direct super types of the given type .
4023	Capture the given type .
4024	Gets the translator .
4025	Gets the populator .
4026	Gets the index instruction annotation .
4027	Determine if the given method is of interest .
4028	Gets the declared properties .
4029	Gets the key metadata .
4030	Returns the result for the given key .
4031	Executes the next round .
4032	Fetches pending entities .
4033	Adds the discriminators for the given class .
4034	Register a translator .
4035	Returns the component component type .
4036	Get the key type from the map .
4037	Returns a forward path from the given path .
4038	Returns the final path .
4039	Returns a string representation of this node .
4040	Returns the depth of this path .
4041	Put all updates in the cache .
4042	clear all keys in the cache
4043	Caches the given buckets if not present .
4044	Fetch all values from a collection
4045	Gets the keys of a collection of buckets .
4046	Recursively find the key fields in the class hierarchy .
4047	Sets the key for the given entity .
4048	Sets the id of a pojo .
4049	Gets the key of the parent .
4050	Registers a translator .
4051	Returns true if two types are common .
4052	Transforms the given owner to a supertype .
4053	Returns the annotation with the given annotation .
4054	Add all values from this session .
4055	Loads the given key and returns the result .
4056	Execute the next round .
4057	Translates a raw result into a Map .
4058	Fetches the given set of keys .
4059	Loads the entity from the Cloud Datastore .
4060	Creates a raw key .
4061	Returns raw key .
4062	Returns the id value for the given key .
4063	Creates a key - safe key from a string .
4064	Returns a new transactional transaction .
4065	Performs a transactional transaction .
4066	Executes a work .
4067	Returns true if the given value matches the given value .
4068	Returns an object that can be used to retrieve an object of the object .
4069	Returns an AsyncDatastore .
4070	Gets the metadata for the given object .
4071	Allocates the given incomplete key .
4072	Opens an object .
4073	Closes the context .
4074	Convenience method to convert indexes to indices .
4075	Create a ref .
4076	Retrieves the object from the cache .
4077	Add a value to the list .
4078	Determines if this Future is done .
4079	Generates the IF conditions for the given class .
4080	Called by the engine .
4081	Gets the container with the specified type .
4082	Get the Stat for a given kind .
4083	Unwraps the given exception .
4084	Gets the translator .
4085	Returns the root translator for the given class .
4086	Creates a translator .
4087	Loads the property from the given container .
4088	Gets the value from the given container .
4089	Sets the value of a property .
4090	Saves the property .
4091	Gets value .
4092	Writes all extensions .
4093	Writes a category .
4094	Write content categories .
4095	Process a string .
4096	Returns an iterable of bids from the response .
4097	Returns the bid with the given id .
4098	Updates the list of bids from the response .
4099	Removes all bids from the response .
4100	Returns an iterable that iterates over the given filter .
4101	Read extensions .
4102	Determines if the token is null or empty .
4103	Registers an extension with the given class .
4104	Register an extension with a field name
4105	Process the fields .
4106	Process the fields .
4107	Updates the given object with the given update .
4108	Returns a list of objects filtered by the given predicate .
4109	Returns the current name of the current token .
4110	Reads an object from the parser .
4111	Reads an array of field names .
4112	Peek the next token from the parser .
4113	Writes an integer field .
4114	Writes a list of strings to a JsonGenerator .
4115	Writes a list of integers to the given field .
4116	Writes a list of longs to the given field .
4117	Writes the given list of Enums to the JSON generator .
4118	Convert a base URL to a URL .
4119	Fixes a base query target URL .
4120	Gets the host name .
4121	Returns the host of the host .
4122	Gets the page from the given URL .
4123	Load a list of Strings from storm conf
4124	Extract configuration element from configuration .
4125	Returns the protocol for the given URL .
4126	Generate a WAR - info byte array .
4127	Extract refresh URL from a string .
4128	Get the metadata for the given target URL .
4129	Filter metadata .
4130	Add a scheduled URL to the queue .
4131	Clean up field name .
4132	Gets the charset from the BOM .
4133	Extracts the charset from the content .
4134	Gets the charset from the input buffer .
4135	Parses the content of a byte array .
4136	Sets a value for a given key .
4137	Gets the first value of the first non - null value .
4138	Convert cookies into a list of cookies
4139	Checks the cookie to see if the cookie matches the URL .
4140	Returns the cache key for the given URL .
4141	Get robot rules set from cache .
4142	Extracts the meta tags from the document .
4143	Acknowledges the given tuple with the given URL .
4144	Filters the given URL against the metadata .
4145	Filters the rules in the URL .
4146	Reads rules from a file .
4147	Remove query elements from the URL .
4148	Loads the NavigationFilter from storm conf file .
4149	Adds a record format to the output stream .
4150	Returns the number of queries that should be sent to the minimum time .
4151	Returns true if the query should be triggered .
4152	Load ParseFilters from storm conf file .
4153	Append a new node to the document .
4154	Ignore whitespace .
4155	Process processing instruction .
4156	Add a comment .
4157	Add a cdata character .
4158	This method is called by DTD .
4159	Start a namespace mapping .
4160	Returns the canonical value for the given tuple .
4161	Removes the text from the given text .
4162	Checks the duration for a custom interval .
4163	Loads the URL filters from storm conf file .
4164	Set the number of items
4165	Resolve size and state and state .
4166	Sets the drawable drawable .
4167	Sets the angle of the wheel .
4168	Updates the selected position .
4169	Invalidates the wheel for the given position .
4170	Converts the given position to a wheel position .
4171	Update the angular velocity .
4172	Get the contrast color for a map entry .
4173	Clamp the given value to the upper limit .
4174	Writes the coveralls data to a JSON file .
4175	Returns the data as a ByteBuffer .
4176	Sets a string .
4177	Makes a string array and converts it to an array .
4178	Create an ArrayCharChar from a String .
4179	Creates an array from an array of strings .
4180	Create a char array from a String array .
4181	Gets the time interval offset from a record .
4182	Shows this frame .
4183	Shows the frame if it is not an icon .
4184	Calculates the size estimate for a grid .
4185	Prints a Grib1 file .
4186	Creates a new unit name .
4187	Creates a new unit name .
4188	Make plural form .
4189	Returns true if the given date is included .
4190	Returns the intersection of this date range .
4191	Extend this range .
4192	Extend the interval .
4193	Sets the start date .
4194	Sets the end date .
4195	Sets the duration .
4196	Recalculates the duration of the duration .
4197	Add a MapBean
4198	Prints the error with the given input .
4199	Returns the name of the extension .
4200	Returns a string representation of the parameters .
4201	Parses raw data from raw data .
4202	Compute the bounds of the bounding box
4203	Synchronize the UI
4204	Compute chunking .
4205	Register a directory .
4206	Process events .
4207	Sets the reference to the reference date .
4208	Open a feature dataset .
4209	Wrap a NCDDF dataset .
4210	Determine if the given feature type is OK or not .
4211	Determine the feature type .
4212	Writes a catalog .
4213	Render a catalog .
4214	Gets the CSS CSS .
4215	Get the user head .
4216	Make a dynamic catalog .
4217	Add global services to the catalog .
4218	Initialize the global Credentials .
4219	Gets the content as a String .
4220	Sends a string to the given URL .
4221	Get the front page .
4222	Make a catalog .
4223	Extract geospatial coverage
4224	Returns a single dataset or null if not found
4225	Returns true if two vertices are equal .
4226	Creates a new unit ID .
4227	Parse an attribute spec .
4228	Reads the top - level header from the file .
4229	Converts two shorts into an int .
4230	Convert an array of bytes to an int .
4231	Gets a date from a julian day .
4232	Makes sure that the name is valid .
4233	Returns true if the name is a valid network object name .
4234	Open a CcdfFile .
4235	read record data from a section
4236	Read records from a record .
4237	Fills non - record variables .
4238	Convert a time index into a time structure .
4239	Create a time structure from a calendar .
4240	Checks if the given string has a time template
4241	Adds a function to the server side .
4242	Gets a boolean .
4243	Get the BTF function
4244	Loads a new server side .
4245	Get the level name for a single level .
4246	Get the level description for a single level .
4247	Gets the metric unit for a particular level .
4248	Gets the projection type .
4249	Determine if a record is vertical coordinate
4250	Determine if a record is a layer .
4251	Create a coordinate transform from an AttributeContainer .
4252	Create a dummy transform variable .
4253	Returns a projection object for the given coordinate transformation .
4254	Main method for testing
4255	Saves the state of the info window .
4256	Returns a Chronology with the specified zone .
4257	Writes the count .
4258	Write an atomic array .
4259	Write bytes .
4260	Writes a byte array to stdout .
4261	Finishes initialization .
4262	Converts a DateRange to a Calendar .
4263	Create a GDS2 object from a byte array .
4264	Parse text into DDS format .
4265	Parses the text and returns the result .
4266	Swap the grid header .
4267	Reads the data as a float array .
4268	Main method for testing .
4269	Writes an annotation
4270	Writes the headers to the output stream .
4271	Writes the operations to the file .
4272	Reads all files in a directory .
4273	Scans a log file .
4274	Gets the data type for the grid .
4275	Returns the grid with the specified param .
4276	Reads the data and returns a float array .
4277	Unpack data .
4278	Gets the grid points .
4279	Unpack Grib1 data .
4280	Unpacks the Grib2 data from the input stream .
4281	Prints the grid data
4282	Get the next byte .
4283	Creates a new calendar date .
4284	Constructs a CalendarDate from a given Date .
4285	Constructs a calendar date from milliseconds .
4286	Creates a CalendarDate with the given milliseconds .
4287	Parse a Udunits string .
4288	Returns the difference between two fields .
4289	Creates an atom variable from the data set .
4290	Initialize the download .
4291	Escape a string .
4292	Creates slices from a list of ranges .
4293	Unwraps the given file
4294	Returns true if the dimension contains variable length .
4295	Compute the effective shape for the specified dimension .
4296	Add a date
4297	Performs the multiplication of this unit .
4298	Divide the given unit .
4299	Divide this unit to another .
4300	This method returns the current unit of this unit .
4301	Converts this unit to a derived unit .
4302	Convert a float array to a derived unit .
4303	Converts a derived unit to another unit .
4304	Returns the canonical representation of this unit .
4305	Reads the contents of a section .
4306	Reads the data set from the data set .
4307	Flatten a list of station names .
4308	Find a service by name .
4309	Returns the size of the gate .
4310	Returns the start of the gate .
4311	Returns the number of gates for the specified datatype .
4312	Writes an XML document to an output stream .
4313	Returns the preferred layout for the given target container .
4314	Verifies that the given path is a descendant of the given path .
4315	Generate proxy datasource .
4316	Returns a CalendarDateUnit for a given calendar name .
4317	Returns a new instance of a CalendarDateUnit with the given Calendar .
4318	Returns a new instance of a calendar period .
4319	Returns the offset from the given reference date .
4320	Returns a calendar date based on the given value .
4321	Returns the quantity dimension of this unit .
4322	Determine if the file is valid
4323	Read a map of station names .
4324	Reads an array of data .
4325	Read an array of ints from a regular expression .
4326	Reads the data to a byte array
4327	Returns the elevation of a given angle .
4328	Calculate the step for the range
4329	Calculates the azim distance between two angles .
4330	Calculates the data from a byte array .
4331	Calculates the nyvent
4332	Creates a vertical transform for this dataset .
4333	Sets the debug flags .
4334	Sets the index mode .
4335	Reads the x yyyy coordinates from the given variable .
4336	Checks to see if the given variable is missing .
4337	Get the LatLon bounding box
4338	Finishes the structures .
4339	Append a string to a StringBuffer .
4340	Pads a string to a string .
4341	Returns an integer padded with the specified width .
4342	Returns a long padded with the specified width .
4343	Formats a byte size .
4344	Print a double .
4345	Prints the difference between two digits
4346	Returns a string representation of the shape
4347	Fills the slice .
4348	Returns a string representation of this constraint .
4349	Compose two slices .
4350	Compute a slice at the specified index .
4351	Dumps the number of bytes in a byte buffer .
4352	Dump the contents of a ByteBuffer .
4353	Returns the Earth ellipsoid for the given name .
4354	Returns the ellipid for the given epsgid .
4355	Decode variable data .
4356	Decode variable data .
4357	Extracts the URLs from the given URL .
4358	Get the text content of the given URL
4359	Filter input stream
4360	Reads data from a variable into a byte array .
4361	Adds all of the attributes to the list of attributes .
4362	Removes an attribute .
4363	Removes an attribute with the given name ignoring case .
4364	Gets the offsets in the time units .
4365	Add a ActionSourceListener to this ActionCoordinator
4366	Get a standard date from a string
4367	Gets the standard date from the given text .
4368	Gets the date origin .
4369	Returns the date as a Date object .
4370	Convert a double value to a Date object .
4371	Calculates the value from a date .
4372	Convert a double value to a standard date string .
4373	Get the grid spacing in meters .
4374	Adds the dimensions to the network .
4375	Adds a coordinate axis .
4376	Creates and returns true if needed .
4377	Adds the GDS parameters to the variable .
4378	Adds a coordinate system variable .
4379	Calculate the L2 coordinate
4380	Calculates the Pereographic projection .
4381	Creates the projection projection .
4382	This method is used to create the GeoGostation from the MGS coordinate system .
4383	Calculates the x and y coordinates
4384	Read a dataset .
4385	Read a Dataset .
4386	Reads metadata from a URL .
4387	Get the level of the level .
4388	Checks to see if a file is valid .
4389	Writes a byte array to the output stream .
4390	Sets the clear name .
4391	Returns the coordinate name for the given axis .
4392	Returns the coordinate name for the given axis .
4393	Build the error message .
4394	Builds a DAP exception .
4395	Break up the levels of levels .
4396	Create a z coordinate axis .
4397	Create new variables
4398	Create a coordinate axis based on the reference variable .
4399	Removes a float from a float .
4400	Writes the Gribdf to the output file .
4401	Wraps the given ncdfdfFile .
4402	Open a NetcdfFile
4403	Clear all coordinate systems
4404	Returns the coordinate axis with the given type .
4405	Returns the coordinate axis with the given full name .
4406	Returns the coordinate system with the given name .
4407	Find a coordinate transform by name .
4408	Determine if we need to enhance .
4409	Sets the values of a variable
4410	Sets the values of a variable
4411	Creates an array with the given string values .
4412	Returns the offset of this matrix .
4413	Gets the file with the given filename .
4414	Get all features in the bounding box
4415	Recursively discarding data .
4416	Adds information from threddsMetadata to this instance .
4417	Adds a new documentation documentation for the given type .
4418	Removes the documentation for the given type .
4419	Get the maximum number of bytes starting from start .
4420	Determine if the cdfdfFile isMine .
4421	This method is used to get the xml file
4422	Break the conversion attribute names .
4423	Creates a comma - separated comma separated string .
4424	Creates the CoordinateSystem objects for the given NetcDF dataset .
4425	Recursively find the coordinate axis .
4426	Recursively finds coordinate system names .
4427	Makes the coordinate system and builds coordinate systems .
4428	Make sure that all coordinate systems have the same coordinate system .
4429	Returns true if the coordinate axis is a coordinate axis
4430	Add a coordinate variable to the specified dimension .
4431	Subtracts the data from the given dataset .
4432	Sets the filter .
4433	Marks the given dataset .
4434	delete all datasets
4435	Initialize once .
4436	Counts the counter with the given value .
4437	Adds a new symbol .
4438	Compares this table with the given column .
4439	Compare two boolean rows .
4440	Returns the group scope .
4441	Pass a map to a DAP attribute map .
4442	Returns true if the given parameters are valid .
4443	Returns true if there are more elements .
4444	Register a class with the specified name .
4445	Registers a DSP in the registry .
4446	Returns true if the dsp class is registered in the registry .
4447	Unregisters a DSP
4448	Creates a new Grib22 .
4449	Calculates the forecast time in hours
4450	Get the forecast time offset from a record .
4451	Gets the VertUnitType for the given code .
4452	Finishes this node .
4453	Sorts the nodes in the tree .
4454	Gets the data for the given partition .
4455	Returns the variable with the specified attribute .
4456	Find a variable with a given attribute .
4457	Returns the name of a variable with the given attribute .
4458	Returns the first variable with the given attribute .
4459	Finds a Structure from a Structure .
4460	Returns true if the dataset contains a record structure .
4461	Gets the value of a global attribute .
4462	Get the feature type from a dataset .
4463	Gets the variable name from a dataset .
4464	Returns the coordinate of a coordinate .
4465	Determine the distance between two points .
4466	Returns the coordinates of this coordinate axis .
4467	Creates a new coordinate axis with the specified range .
4468	Finds the index of the closest point in the bounds .
4469	Returns the full name of this node .
4470	Add an action .
4471	Returns the matched path .
4472	Main entry point
4473	Returns the index of the first match .
4474	Add a source to the cache
4475	Print cache contents .
4476	Stop loading loading .
4477	Stop the background loading of the given URL
4478	HTTP GET method
4479	Make a HTTP method .
4480	Returns a random float from the given type .
4481	Returns the number of elements in the specified range .
4482	Reads data from a variable .
4483	Gets the provider for a given URI .
4484	Read the stations table .
4485	Returns the index of the given row .
4486	Removes the data variable with the given name .
4487	Calculates the cloudH2H2H2 constraint
4488	Reads the data from a section .
4489	Sets the number of colors .
4490	Calculates the transform for the screen .
4491	Convert a URI to an auth scope .
4492	Called when the grid is finished .
4493	Returns true if this factor is a reciprocal of this factor .
4494	Get a catalog from a directory .
4495	Finds the index of the input stream .
4496	Read metadata from a URL .
4497	Reads metadata from the given dataset .
4498	Adds the metadata to the metadata .
4499	Validate metadata .
4500	Read a CatalogGenConfigElement .
4501	Read a dataset source .
4502	Read a dataset .
4503	Read dataset filter element .
4504	Read result service element .
4505	Create a catalog config element .
4506	Create a dataset source element .
4507	Create a datanamer element .
4508	Creates a dataset filter element .
4509	Create a DocumentService element .
4510	Returns true if the flag is set .
4511	Constructs the menu .
4512	Adds the items to the menu .
4513	Load parameters from a table .
4514	Parse parameter .
4515	Gets the parameter with the given name .
4516	Reads the contents of a file .
4517	Read bytes from an input stream .
4518	Replace the file template with the given name .
4519	Sets the station information .
4520	Accepts the input .
4521	Show the format information about the formatter .
4522	Gets the bitmap from the GribFile
4523	Sets the ncdf file .
4524	Sets the debug flags .
4525	Parse the name of a name .
4526	Determine if a structure is a group .
4527	Determine the numerical length of a variable length in the DODF dataset .
4528	Get a shared dimension .
4529	Constructs a list of dimensions from a given dods array .
4530	Determine whether the given type is unsigned .
4531	read data from server
4532	Get an image from the classpath
4533	Get an image from the given path
4534	Creates a cursor with the specified name .
4535	Read data from a file .
4536	Reads a data from a layout .
4537	Reads a data filled with the given data .
4538	Make a primitive array .
4539	Convert byte array to UTF8 .
4540	Convert char array to byte array .
4541	Convert a byte array to a byte array .
4542	Extract the data from a ParsedSection .
4543	Creates an array structure from a section .
4544	Get a scalar string .
4545	Get a scalar structure from the given index .
4546	Gets an array of members from a record .
4547	Compute the structure of a DAP variable .
4548	Adds dimensions to the network .
4549	Creates a new CrawlableDatable Datasource object .
4550	Normalizes a path .
4551	Add a dataset to the cache .
4552	Add a dataset scan
4553	Finish building the dataset .
4554	Creates the datasets .
4555	Gets the typical dataset .
4556	Make a dataset .
4557	Parses a dataset .
4558	add a new point
4559	Get the bb upper point .
4560	Gets the bb - lower lower bounds .
4561	Validate this dataset .
4562	Determine if this filter matches the given dataset .
4563	Add all station point features from the dataset .
4564	Parse a constraint .
4565	Evaluate and return true if this is a top level clause .
4566	Print a constraint .
4567	Determine the ncdf file from an XML file .
4568	Sets shared dimensions .
4569	Checks if there is no more dimensions in the list
4570	Recursively searches a group with the given name .
4571	Read the Xlink content .
4572	Gets the standard uri .
4573	Sets the projection .
4574	Add a component to this layout .
4575	Invalidates the specified container .
4576	Remove a component from this LayoutMap .
4577	Returns the minimum size for the given parent container .
4578	Layout the specified target .
4579	Determine if a coordinate system is a radial coordinate system .
4580	Get the maximum radius
4581	Open a URL connection to a URL .
4582	Converts the given geographic coordinates to a GPS coordinate .
4583	Convert a GPS coordinate to Earth .
4584	Convert GOes into geographic coordinates .
4585	Convert the scan geometry to a sweep angle .
4586	Convert the sweep angle to a scan .
4587	Sets the coordinate coordinates .
4588	Writes a point dataset to a file .
4589	Rewrite a point dataset .
4590	Returns an ArraySequence object for the given member name .
4591	Returns the full name of this node .
4592	Returns the unique ID of the unique identifier .
4593	Returns the access for the given type .
4594	Finds a dataset by its name .
4595	Gets the catalog .
4596	Returns a list of metadata for the specified metadata type
4597	Finds a service by name .
4598	Gets the variables associated with a given vocabulary .
4599	Find all catalog references in a list of datasets .
4600	Escapes a path .
4601	This method adds the deviation to the array .
4602	Interpolate a double array
4603	Compute the Rho of a latitude .
4604	Get the detail information .
4605	Creates a structure from the given parameters .
4606	Create a missing variable .
4607	Create a parameter for a parameter
4608	Add global attributes .
4609	Returns the size of stn variable .
4610	Get an array of 1D array
4611	Returns the current state of a yyyy table .
4612	Determines if the yyyy syntax is expected .
4613	Prints the symbols in the stack .
4614	Read DMR data from the input stream .
4615	Reads the error message .
4616	Read data from the input stream .
4617	Reads the header from the input stream .
4618	Convert ISO 8601 string to Date
4619	Read a table from a file .
4620	Transforms a group into a target group .
4621	Gets the stn file .
4622	Initializes the file .
4623	Returns the beginning of the index for the given index .
4624	Returns the index of the end of the given index .
4625	Creates a collection of all runtime groups .
4626	set the edit value
4627	Get the data type from the format format .
4628	Convert a GPS coordinate to a LAF coordinate .
4629	Converts a unit into a string .
4630	Removes the name from the given name .
4631	Determines if a unit is unitless .
4632	Creates a note for a note .
4633	Returns the variable id for a given var note .
4634	Parse the DODCDF data .
4635	Find a DodsVVV .
4636	Determine the data VDSV for the given DDS .
4637	Find a child by index
4638	Gets the parent group .
4639	Returns the dimension at the specified index .
4640	Returns the index of the dimension with the given name .
4641	Gets the units attribute .
4642	Returns the shape as a section .
4643	Creates a slice of this variable .
4644	Sets the enum type .
4645	Reads data from a list of ranges .
4646	Reads a scalar string .
4647	Reads the data from the reader .
4648	Reads the contents of the file .
4649	Writes the CDL document to the output .
4650	Returns a string representation of this variable .
4651	Sets the data type .
4652	Sets the dimensions .
4653	Reset the shape
4654	Sets the dimensions of this variable .
4655	Resets dimensions .
4656	Sets the dimension at the specified index .
4657	Sets the cached data .
4658	Returns a list of dimensions
4659	Set the bounding box
4660	Finishes the vertices .
4661	Get all datasets in the database .
4662	Determine if the given path matches the DSP extension .
4663	Open the CDDF dataset .
4664	Build DMR dataset .
4665	Recursively build a sequence of type variables .
4666	Build the dimension references .
4667	Finds a matching enum type from the DAP node .
4668	Gets the core dimension .
4669	Scans a buffered file
4670	Process a buffer as a dataset as a dataset .
4671	Handle a POST request .
4672	Get the transform .
4673	Returns true if the map is rotated or not .
4674	Returns the area of the map area .
4675	Converts a point to screen coordinates .
4676	Moves the map from the map .
4677	Zoom zoom level
4678	Recalculate the location from the bounding box
4679	Adds a listener to the list .
4680	Removes a listener
4681	Sends an event to all registered listeners .
4682	Sends an event to all listeners .
4683	Prints a command to the output
4684	Print a command
4685	Print a variable data
4686	Prints a variable section .
4687	Print a structure data structure .
4688	Writes the array to the given output stream .
4689	Print an array .
4690	Writes the ncdfFile to the given writer .
4691	Read a double attribute .
4692	Adds a parameter to the transformation transform .
4693	Main entry point for debugging .
4694	Reads the contents of a datap .
4695	Returns true if the record is positive .
4696	Returns true if this unit is compatible with another unit .
4697	Returns a label with the given quantity ID .
4698	Set bit offset .
4699	Read bits from the input stream .
4700	returns a 2 - bit integer
4701	Open a connection .
4702	Gets the DAS file .
4703	Get the DDS for the specified CE
4704	This method is used to get the complete CE .
4705	Converts the given projection to a LatLng point .
4706	Processes the idvv dataset .
4707	Convert a DateRange to a DateRange
4708	Determine if the file is valid .
4709	Handles the GPS information .
4710	Handles sensor information .
4711	Reads the root element from the given location .
4712	Clean up XML data .
4713	Escape a string .
4714	Escapes a string .
4715	Unescape a string .
4716	Reverse a string .
4717	Converts a string to backslash .
4718	Add feature global attributes
4719	Swap two bytes from a byte array .
4720	Swap two bytes from a byte array .
4721	Swap two bytes from a byte array .
4722	Swap two float values
4723	Swap the value of a double .
4724	Convert a short to a byte array
4725	Convert an integer to a byte array .
4726	Convert a long to a byte array .
4727	Create a subset of the vertical transformation .
4728	Returns the XML document as XML .
4729	Computes the C - A C
4730	Output stream .
4731	Writes the features to the file .
4732	Add levels to the list
4733	Adds the dimensions to the network .
4734	Adds the level to the network .
4735	Finds the coordinate transform for a coordinate .
4736	Returns the index of the given record .
4737	Exit the timer .
4738	Gets file .
4739	Returns the file or null if not already cached .
4740	Show the cache files .
4741	Removes all files from a directory .
4742	Calculates the bearing between two points .
4743	Calculates the bearing between two points .
4744	Main method for testing
4745	Searches for a point from a given Earth .
4746	Searches for a point from a point .
4747	Get a LatLLocation object from the given latitude and distance .
4748	Load a picture in the thread .
4749	Load a picture .
4750	Loads the source picture from the image
4751	Stop loading image loading
4752	Stop loading of this image
4753	Gets the size of the image .
4754	Set the buffered image
4755	Returns the standard URI of this dataset .
4756	Make a data descriptor .
4757	Transfer information from a list of data descriptors .
4758	Count the number of bits .
4759	Compares two DataDescriptors .
4760	Loads the file header .
4761	Loads the data from the stream .
4762	Returns the field with the given name .
4763	Get a double value by name .
4764	Get the string values for a field .
4765	Get a boolean field by name .
4766	Returns the name of the field .
4767	Returns an array of field names .
4768	Demonstrates how to dump Dbase data .
4769	Returns a map of attributes .
4770	Sets an attribute .
4771	Remove an attribute .
4772	Returns the parent group .
4773	Returns the parent of this node .
4774	Gets the short name .
4775	Returns the path of this node .
4776	Returns the path of this node .
4777	Compute the FQN .
4778	Determine if this node is top level .
4779	Build data from the server .
4780	Associates a collection .
4781	Get a list from a key .
4782	Returns the value associated with the given key .
4783	Reads the data from a file .
4784	Print the variables in the DSP .
4785	Print a compound instance .
4786	Writes a DOM Element to a String .
4787	Writes the element to a file .
4788	Writes the element to the given output stream .
4789	Writes an element to a writer .
4790	Create a dimension element .
4791	Extracts the coordinate transform into a coordinate matrix .
4792	Gets an integer array as int array .
4793	Gets a new unit .
4794	Creates a unit .
4795	Returns the base unit db .
4796	Generate a derived unit db .
4797	Returns the SIton instance .
4798	Find the coordinate element at the specified target .
4799	Finds the index of the closest point in the axis .
4800	Sets the coordinates of the coordinate axis .
4801	Open a feature dataset .
4802	Open a feature dataset .
4803	Adds the given dataset to NetcdfData .
4804	Read the data from a file .
4805	Parse the given parts .
4806	Returns the canonical form of the given string .
4807	Normalize units .
4808	Compile the dataset .
4809	Finish the metadata .
4810	Returns the value associated with the specified key .
4811	Adds the specified key to the map .
4812	Returns the current date .
4813	Print XML attributes .
4814	Print an XML attribute .
4815	Determine if the attribute is a special attribute .
4816	Prints the dimension references .
4817	Determine if a file is a valid area
4818	Set the area attributes .
4819	set the navigation type
4820	Get the cal type from a string .
4821	Sets the calibration attributes .
4822	Finds coordinates for a table .
4823	Returns the coordinate name for the given axis .
4824	Returns the coordinate axis for the given axis .
4825	Finds the coordinate axis based on the given type .
4826	Returns the dimension of the given axis .
4827	Find the best coordinate system .
4828	Finds the dependent axis for the given axis .
4829	Returns the variable at the given index .
4830	Deserialize server version .
4831	Reads a marker .
4832	Writes a marker to the stream .
4833	Throw a fatal error .
4834	Create a dataset .
4835	Main method for testing
4836	Gets the string representation of a member .
4837	Returns a copy of the parameters .
4838	Sets the list of stations
4839	Sets the selected station
4840	Redraw the panel
4841	Deserialize this rectangle .
4842	Serializes the rectangle .
4843	Add this unit to another unit .
4844	Add a unit .
4845	Adds a symbol for a symbol .
4846	Gets the unit by its id .
4847	Add a new unit by name .
4848	Add a unit by symbol .
4849	Adds a unit to the map .
4850	Add a menu to the menu .
4851	Searches the first record in the file starting at the given position .
4852	Reads a scalar variable .
4853	This method is used to serialize the data in the network .
4854	Gets the values of the parameter .
4855	Creates a copy of the projection .
4856	Open a feature dataset .
4857	Open a feature dataset
4858	Open a dataset .
4859	Add a Ncdfdf dataset to a NetcdfData
4860	Removes duplicate properties .
4861	Adds a new partition .
4862	Creates a Grib collection from the index .
4863	Gets a RegExpand on a dataset name .
4864	Gets a RegExpand on the target path .
4865	Write a QueryCapability to a file .
4866	Reads the data structure from a file .
4867	Sets the shape of the specified image .
4868	Sets the buffered image
4869	Zoom to the screen .
4870	Paint the component .
4871	Extracts the forecast information from a string .
4872	Decode the date information from a datetime format .
4873	Convert an integer integer into a numeric integer format .
4874	Get the number of days for the given month .
4875	Convert vertical coordinate to vertical coordinate .
4876	Reverses a 16 - bit integer array .
4877	Get the grid packing name
4878	Get data type
4879	Read data from an input stream .
4880	This method is used to write data to an output stream .
4881	Gets the tag .
4882	Returns the next image
4883	Returns the size of the DAP type .
4884	Returns the sum of the elements in the array .
4885	Set the spatial grid size
4886	Sets the overlap .
4887	Clears the grid .
4888	Marks the specified area in the specified area .
4889	Find the intersection of the specified rectangle .
4890	Find the intersection of a point
4891	Finds the closest closest point in the grid .
4892	Get the Euclidean distance from a point
4893	Gets the base unit .
4894	Search for a service type .
4895	Returns the service type for the given path
4896	Returns the service type from the given path .
4897	Checks if the given location is a DODAP file .
4898	Checks if the given location is a DAP file .
4899	Sends data to the output stream .
4900	Returns the suffix of the given fqn
4901	Returns the prefix of the fully qualified name .
4902	Locates a file .
4903	Locates a file relative to a relative path .
4904	Extracts bytes from a buffer .
4905	Returns the structure path of the given variable .
4906	Returns null or null if empty .
4907	Joins a string array into a string .
4908	Returns true if the given path is a drive letter
4909	Returns a list of protocols from the given URL .
4910	Converts the given indices into a slice of slices .
4911	Converts a given offset into a slice of slices .
4912	Returns true if the slices are contiguous
4913	Returns true if the slice is a single point
4914	Convert a list of slices to an index
4915	Read data from the input stream
4916	Sets the station information .
4917	Sets short names .
4918	Read a feature collection from a catalog file .
4919	Adds a declaration to this group .
4920	Updates the list of groups .
4921	Returns the DAP variable with the given name .
4922	get axis type
4923	Gets the stat type .
4924	Subtracts the coordinates from the lon axis .
4925	Gets the ranges .
4926	Sets the default properties .
4927	Gets the session id .
4928	Sets the maximum number of redirects .
4929	Sets whether or not the session should be used .
4930	Closes this object .
4931	Sets the authentication and proxy credentials .
4932	Track a session .
4933	Sets the global credentials provider for the given scope .
4934	Validate the catalog
4935	Creates an index based on the input array .
4936	Compute the stride .
4937	Creates a new section .
4938	Reduce the index
4939	Returns a new index with the specified dimension .
4940	Returns a new index of this index .
4941	Returns a new index consisting of the specified dimensions .
4942	Gets the index iterator for the given array .
4943	Returns current element .
4944	Sets the index to the current index .
4945	Sets a new dimension .
4946	Sets the index of this index .
4947	Returns the name of the time interval .
4948	Convert a calendar to a calendar .
4949	Returns a list of date - based date - time formats .
4950	Creates the parameters from a DMPP .
4951	Returns a list of station stations
4952	Create a station station .
4953	Gets the names of the station keys .
4954	Gets the dates .
4955	Returns the index of the station with the given ID .
4956	Returns the file type .
4957	Add a number of indentation .
4958	Set the indent depth .
4959	Reads the index from a single file .
4960	Add a directory scan
4961	Determines if there is a scan .
4962	This method is used to scan the first time of the first file .
4963	Sets debug flags .
4964	Add a new variable .
4965	Writes the variables to the output stream .
4966	Validate the given XML document .
4967	Returns a string representation of this constraint .
4968	Sets the original variable .
4969	This method is used to read data from the input stream
4970	Reads all data from the given section
4971	Determines if all variables are required .
4972	Convert an array to an ArrayStructure .
4973	Recursively convert the members to a member .
4974	Finds a variable from an org . org . org . org . org . org . org . org . org . lang . org . org . org . org . org . org . org . org . org . org . org . org . org . org . org . org . org . org . org . lang . org . org . org . org . org . org . org . org . org . org . org . org . org . org . org . org . org . org . org . org . org . org . org . org . org . org . org . org . org . org .
4975	Determine if the given variable has data structure .
4976	Enhances the given mode .
4977	Check if the resource control is authorized
4978	Create an empty sequence from the given sequence .
4979	Creates an ArraySequence from the given sequence .
4980	Creates a sequence variable for the requirement .
4981	Add vertical coordinate attribute
4982	read XML asynchronously
4983	Reads an XML document from a XML document .
4984	Reads a catalog from a XML document .
4985	Write an invocation to an output stream .
4986	Get a MetadataConverter for a given key
4987	Returns a dimension name .
4988	Performs the multiplication of this unit .
4989	Divide this unit by another .
4990	Convert an array to a derived unit .
4991	Returns true if this unit is compatible with the derived unit .
4992	Write a single geometry .
4993	Write a point .
4994	Writes a line to a XML string .
4995	Writes the polygon as XML .
4996	Pull an attribute from a node .
4997	Gets the subnodes of a parent node .
4998	Parse the response .
4999	Pass a node to a DAP node .
5000	Returns a subset of the given variable .
5001	Creates an ArrayStructure from an ArrayStructure .
5002	Sets a member array .
5003	Creates an array structure from a structure .
5004	Get the geometry type .
5005	Make a station feature from a structure .
5006	Compiles a CEAST node .
5007	Compile a filter .
5008	Records a dimref .
5009	Creates an ArrayView for the given index .
5010	Determine if this rectangle is contained in this rectangle .
5011	Extend the bounding box .
5012	Extend this rectangle .
5013	Returns the LatLngRect that intersects the specified bounds .
5014	Adds two arrays .
5015	Returns true if two arrays are conformable .
5016	Determines if two dimensions are equal .
5017	Convert an array to an array
5018	Copies the given array to an array .
5019	Copies the elements from the array to the result .
5020	Copies the contents of an array into an array .
5021	Get the minimum and maximum values
5022	Sets the value of a double array .
5023	Returns a catalog builder for this catalog .
5024	Returns a projection adapter for the given projection .
5025	Unescape DAP identifier
5026	URL - decode a string .
5027	Unescape URL .
5028	escape a string
5029	remove backslash
5030	Tokenize an escaped name .
5031	Returns the index of the given character .
5032	Converts a backslash to a URI .
5033	Read an atomic scalar .
5034	Gets the path of the given cursor .
5035	Returns the UIDDefaults of a class
5036	Returns the class of the given component .
5037	Compile this dataset .
5038	Compile a dataparray array .
5039	Compiles a DAP structure .
5040	Compile a sequence array .
5041	Compile a sequence .
5042	Read a little endian long .
5043	Returns the field with the given name .
5044	Returns the value of the field with the given name .
5045	Sets the value of a field .
5046	Adds a field to the table .
5047	Add a CheckBox field .
5048	Add a date field .
5049	Adds a double field .
5050	Adds an integer field .
5051	Adds a password field .
5052	Add a text field .
5053	Adds a TextField to a TextField .
5054	Add a TextArea field .
5055	Adds a heading to the table .
5056	Add a component to this layout .
5057	Adds an empty row .
5058	Find the active frame .
5059	Gets the cell spacing .
5060	Gets the factors .
5061	Multiplies this dimension .
5062	Returns an array of factors .
5063	Returns true if this dimension is a reciprocal of this dimension .
5064	Returns true if this factor is a dimensionless dimensionless .
5065	Creates a new Grib1 param table .
5066	Factory method to create a Grib1ParamT .
5067	Add parameter lookup table lookup .
5068	Add parameter table .
5069	Raises this unit to the given amount .
5070	Convert a float array to a derived unit .
5071	Initialize the unit table
5072	Create a vertical variable .
5073	Peek the name from the descriptor .
5074	Read a short from a byte array .
5075	Read an int from a byte array .
5076	Read a float from the descriptor .
5077	Read a double .
5078	This method is called by an alias .
5079	Add a symbol .
5080	Creates a Converter for conversion .
5081	Sets the structure data .
5082	Set the feature data .
5083	Draws all shapes in the given graphics context .
5084	Get the shapes for the current feature .
5085	Processes the input stream .
5086	Read buffer from input stream .
5087	Reads more bytes from the input stream .
5088	Reads bytes from the input stream .
5089	Skip n bytes .
5090	Adds the dimensions to the ccdfFile .
5091	Determine the coordinate index for the given record .
5092	Determine if the file is valid .
5093	Initializes the CDF file .
5094	Reads a variable from a section .
5095	Reads a single row data .
5096	Creates a dataset from a dataset .
5097	Convert a variable to a type
5098	Fires a map area event
5099	Set the map area area .
5100	Set the area of the map area .
5101	Set the map area of the map area .
5102	Sets the projection .
5103	Add the actions to the menu .
5104	Redraw the timer
5105	Changes the screen size
5106	Sets the selected variable .
5107	Returns a double value at the given offset .
5108	Reads a double .
5109	Gets the object at the given index .
5110	Returns the detector ID for a given entity .
5111	Reads a scaled integer .
5112	Returns the first parameter with the given name ignoring case .
5113	Returns true if there is one element in the list
5114	Sets the byte order of the binary .
5115	Get the number of time steps per file .
5116	Returns the file name for the given index .
5117	Get file names .
5118	Get the DDF file path
5119	Returns the full path for the given filename .
5120	Adds a Chsub .
5121	Convert a reference date to a time coordinate .
5122	Reads the WMS product header from a file .
5123	Get uncompressed data from uncompressed data .
5124	Adjusts the code for a special graphic symbol .
5125	Searches for a circle
5126	Reads the message header from a file .
5127	Gets the code of the vector arrow .
5128	processes the code
5129	generate code for unlinked vectors
5130	Convert a set of levels to an array of levels .
5131	Gets the levels of the dual interpolation levels .
5132	Adds a variable .
5133	Adds a parameter .
5134	Uncompressed byte array
5135	Get a number from a byte array .
5136	get a number from a byte array
5137	Convert a byte array into an object .
5138	Performs a DMR request .
5139	Gets the request state .
5140	Sends an error message .
5141	An anchor point .
5142	Stretch the canvas .
5143	Returns the bounds of this rectangle .
5144	Returns the bounds of the last rectangle .
5145	Format a date - only date - only formatter .
5146	Replace data variables in the structure .
5147	Ensure the memory size is okay .
5148	Read two integers from a file .
5149	Read a 32 - bit integer from a file .
5150	Reads four bytes from a file .
5151	Read two bits from a file .
5152	Read a 32 - bit integer from a file .
5153	Read a 4 - 4 - 4 - 4 - 4 - 4 - 4 - 4 - bit 4 .
5154	Calculates a 32 - bit floating point number .
5155	Read a 32 - bit integer from a file .
5156	Count the number of bits in a bitmap .
5157	Returns a copy of this projection
5158	Returns a string representation of the WKS .
5159	Escape a string .
5160	Unescape a string .
5161	Splits a string into a list of paths .
5162	Creates an FMRInvocation from the file system .
5163	Gets the special service special handling .
5164	Returns the number of projected components .
5165	Gets the reference time .
5166	Factory method to create an array structure .
5167	Main index .
5168	Read a Grib1 record .
5169	Determine if the given netdfdf file is a mine file .
5170	Create a projection projection from a dataset .
5171	Acquires an area .
5172	Returns true if this date is before the given date .
5173	Returns true if this date is before the given date .
5174	Returns true if the given date is after the given date .
5175	Sets the value at the specified index .
5176	Adds a new coordinate system to this variable .
5177	Sets the units of this variable .
5178	Returns the units associated with this variable .
5179	Initializes this instance .
5180	Read a catalog .
5181	process datasets
5182	Reads all catalog files in a directory .
5183	Returns true if the given lon is between the given lon .
5184	Convert a latitude to a string .
5185	Convert a long to a string .
5186	Compares a quantity by name .
5187	Returns the selected dataset .
5188	Sets the selected dataset .
5189	Creates a tree path from the given node .
5190	Open the catalog .
5191	Set the catalog location
5192	Sets the catalog .
5193	Determine the coordinate alias for a coordinate .
5194	Write a VInt .
5195	Write characters .
5196	Reads characters from the input stream .
5197	Sets debug flags .
5198	Adds a member to the list .
5199	Hide the given member .
5200	Returns a list of member names .
5201	Returns the member with the given name .
5202	Read the bitmap .
5203	Restores the state of the BAM .
5204	Get the selected rows .
5205	Returns the index of the model .
5206	Get the array for the given member .
5207	Get a scalar value for a member .
5208	Get a double array as a double array .
5209	Get a scalar value from a member .
5210	Get a java array as a float array .
5211	Returns the byte as a byte .
5212	Get the byte array as a byte array .
5213	Get a scalar integer from a member .
5214	Get an int array as an int array .
5215	Get a short short from a member .
5216	Get a java array as a short array .
5217	Get a scalar value for a member .
5218	Get a long array as long array .
5219	Get a char from a member .
5220	Get a char array as a char array .
5221	Write a dataset .
5222	Determines if a dataset is available
5223	Creates a copy of this dataset .
5224	Transfer metadata from dataset .
5225	Gets the inheritable metadata .
5226	Adds a product to the list .
5227	Show the missing number of missing times .
5228	Returns the number of missing counts for the missing record .
5229	Find and return the record for the given time .
5230	Returns a dump of this grid .
5231	Creates a long name for the parameter .
5232	Subtracts the coordinates of the longitude axis .
5233	Compares two byte arrays .
5234	Parse the DMR document .
5235	Process attributes from a dataset .
5236	Adds the given list to the partition collection .
5237	Sets the gaussian coordinates .
5238	Parse a variable selector .
5239	Convert a section to a string .
5240	Determines if a box contains a box
5241	Close this method .
5242	Executes the request .
5243	Identifies the encoding for the encoding .
5244	Returns the name of the axis with the given dimension .
5245	Sets the input stream .
5246	Reads a character from the stream .
5247	Start the task
5248	Parse a string .
5249	Excludes the given uri .
5250	Converts a string to null .
5251	Joins the given prefix .
5252	Checks if the given dataset is valid .
5253	Copy information from another collection .
5254	Returns a list of file names .
5255	Sets the index file .
5256	Gets the index file in cache .
5257	Close the index file .
5258	Returns the number of counters .
5259	Adds a global attribute .
5260	Add a global attribute .
5261	Deletes a global attribute .
5262	Renames a global attribute .
5263	Adds a variable attribute .
5264	Add a variable attribute .
5265	Removes an attribute from this variable .
5266	Renames a variable .
5267	Determine the file type for the file .
5268	Writes the header to the output stream .
5269	Writes the members of the WFS .
5270	Returns the XML document as XML file .
5271	Returns the XML document as XML document .
5272	Send a DSR header .
5273	Send the DXR data to the output stream .
5274	Sends an error .
5275	Close the connection .
5276	Flushes the output stream .
5277	Returns a copy of this projection .
5278	Returns true if the element is contained in the list .
5279	Returns the element at the specified index .
5280	Shift this range to a range .
5281	Reads data from the file .
5282	Reads data .
5283	Returns a subset of this vector .
5284	Returns an iterable of catalogs .
5285	Cleans up the tracker .
5286	Sets the GPS values .
5287	Returns a DataChunkIterator for the specified section .
5288	Make a double array .
5289	Gets the dataset boundary boundary .
5290	Check the requested variables .
5291	Get a dataset source
5292	Gets the path for a given location .
5293	Given a list of vertices add vertices to the network .
5294	Read the pi file .
5295	Finishes the download .
5296	This method is used to transfer local metadata to public metadata
5297	Transfer metadata from another dataset .
5298	copy inherited metadata from dataset
5299	Sets the contributors .
5300	Adds a dataset to this dataset .
5301	Removes a dataset from this catalog .
5302	Replace a dataset in the catalog .
5303	Add a new service
5304	Removes a service .
5305	Sets the list of services local .
5306	Removes the local metadata from this dataset .
5307	Get a user property .
5308	Validates the dataset .
5309	Returns a list of descriptor names .
5310	Constructs the path from the servlet request .
5311	Gets the capabilities .
5312	Gets a feature .
5313	Checks the parameters for an error .
5314	Handles the http request .
5315	Get the capabilities for the given URL .
5316	Returns the size of the object .
5317	Returns the last modified date .
5318	Adds a dataset to the dataset .
5319	Returns a file .
5320	Sends a string to the response .
5321	Sets the content length in the response .
5322	Get the URI of the request .
5323	Gets the request path .
5324	Gets the request path .
5325	Gets a parameter from the request .
5326	Saves the files .
5327	Writes a directory to a directory .
5328	Set bit offset .
5329	Make a nested bit counter uncompressed
5330	Counts the number of bits in the table .
5331	Append a new line .
5332	Returns a XML document that contains all the features in the XML document .
5333	Gets the capabilities document .
5334	Returns the record at the specified position .
5335	Returns the coordinate at the specified index .
5336	Adds an item to the list .
5337	Handles an exception .
5338	Returns the slice at the specified index .
5339	Move the index to the next index .
5340	Get the number of NCEP processes from the GCE file .
5341	Checks if the given endpoint is a CDM endpoint
5342	Set the attribute value .
5343	Factory method to create a GDS1G1G1 GDS1G1 .
5344	Copies the input stream to the output stream .
5345	Reads the contents of a file .
5346	Reads the contents of a file into a byte array .
5347	Writes a string to an output stream .
5348	Copy a file to the output stream .
5349	Copy a buffer to the output stream .
5350	Recursively copies all files in a directory .
5351	Reads a file into a byte array .
5352	Reads a file .
5353	Writes a string to a file .
5354	Writes a string to a file .
5355	Writes an input stream to a file .
5356	Handle a DODSonse exception .
5357	This method is used to handle a DODS HTTP response .
5358	Sends a bad URL to the server .
5359	Gets the download .
5360	Print the catalog .
5361	Prints the status of the server .
5362	Prints the error page .
5363	Returns the reference date .
5364	Read vlen array .
5365	Read ncdfData from ncdfString
5366	Opens a NcdfCollectionReader to a NcdfCollection .
5367	returns all characters in a string
5368	clean up a byte array
5369	filter a string
5370	Filter 7 bits from a string .
5371	Makes sure that the name is valid .
5372	Match two strings .
5373	Pads the given string to the given string .
5374	Pads a string to a string .
5375	Removes substring from string .
5376	Removes a character from a string .
5377	Removes a character from a string .
5378	Collapses whitespace characters .
5379	Replaces all occurrences of a string in a string .
5380	Replaces all occurrences of a string with the given string
5381	Replaces all occurrences of a string with the given value
5382	Substitute a string with a substring .
5383	Takes a string and returns a substring .
5384	Removes all characters from a StringBuilder .
5385	Unplace a character in a string builder .
5386	Replaces all occurrences of a StringBuilder in a StringBuilder .
5387	Substitute a substring to a string builder .
5388	Removes characters from a string .
5389	Processes a collection update event .
5390	Check state .
5391	Updates the data .
5392	Determine unique templates .
5393	Gets the datasets .
5394	Release resources .
5395	Creates a deep copy of the given structure .
5396	Convert an ArrayStructure to an array .
5397	Copy a StructureStructure to an Array
5398	Creates a copy of the given StructureData .
5399	Convert a StructureData object to an array .
5400	Get the forecast time size in hours
5401	Creates a new coordinate axis with the specified range .
5402	Create a TableAnalyzer .
5403	Returns the first feature type .
5404	Analyze the dataset .
5405	Initializes the nc file .
5406	Gets the latitude for a gaussian .
5407	Swap a byte array from a byte array .
5408	Swap two bytes from a byte array .
5409	Swap a char from a byte array .
5410	Searches for all variables in the dataset .
5411	Adds a parameter to the coordinate transformation .
5412	Returns the common parent of this group .
5413	Returns true if this group is a parent group .
5414	Sets the parent group .
5415	Adds a dimension to this group .
5416	Adds a dimension to this group .
5417	Adds a group to this group .
5418	Adds an enumeration to this group .
5419	Adds a variable to this group .
5420	Removes the specified dimension .
5421	Create a relative group .
5422	Converts an attribute to a DDS alias field name
5423	Print the DAS object .
5424	Returns the variable with the given name .
5425	Writes data to a grid .
5426	Replace the missing values in the array with the missing values .
5427	Replaces missing values with zero values .
5428	Gets the x - start shift from the given coordinates .
5429	Writes the data to the grid
5430	Writes the exception report .
5431	Returns the version of the ncqlib
5432	Create top index file .
5433	Returns the type of the GRI collection .
5434	Update the Grib collection
5435	Update leaf collection .
5436	Create a GRICollection from a file .
5437	Create a GribCollection from a data file .
5438	Open a Grib collection .
5439	Returns true if the given pattern matches the pattern .
5440	Adds a triple to the RDF .
5441	Finds the value for the given key and url .
5442	Makes sure that all triples are known .
5443	Loads a CDM file .
5444	Insert a triple into the trie .
5445	Gets the datasets local .
5446	Finds a dataset by its name .
5447	Set the project projection
5448	Get the shapes for the given graphics .
5449	Generate shapes for a feature .
5450	Compares the given string .
5451	Starts the progress monitor .
5452	Determines if the given collection index file exists .
5453	Normalizes two coordinates .
5454	Sets an object at the given index .
5455	Returns the structure data at the specified index .
5456	Copy the structures from the given record .
5457	Get scalar object .
5458	Convert a scalar double to a double .
5459	Convert a scalar integer .
5460	Get a scalar float .
5461	Get a scalar byte .
5462	Get a short from a record .
5463	Get a scalar character .
5464	Get a scalar string .
5465	Get an ArrayStructure from a record .
5466	Get an ArraySequence object from a record .
5467	Get an array object .
5468	Returns the minimum value of the given value .
5469	Evaluate an expression .
5470	Returns a string representation of this constraint .
5471	Returns true if the given node is referenced .
5472	Evaluates whether the variable matches the given filter .
5473	Returns the number of expansion entries in the given structure .
5474	Compute the enums .
5475	Compute the groups .
5476	Compile a constraint .
5477	Determine if the given file is valid
5478	Make the actions system .
5479	Returns the byte order of the byte order .
5480	Set byte order .
5481	Returns the key with the given name .
5482	Find a file header by name .
5483	Returns the header of a file .
5484	Print parts .
5485	Gets the data pointer for the given part .
5486	Reads the DMFL data .
5487	Reads a word from the file .
5488	Convert a bitstring into a binary array .
5489	Convert a bit integer to a string .
5490	Writes the ncdfdfFile to a channel
5491	Parse a base element .
5492	Parse a grid element .
5493	Parse the aliases .
5494	Decode the key descriptors .
5495	Replies the data descriptors .
5496	Get the dataset name .
5497	Get the CFFature type
5498	Returns true if two floats are equal .
5499	Returns true if the given node is a reference .
5500	Parse a unit from a string .
5501	Props an object of an object .
5502	Determine if a variable is tiled .
5503	Determine the best time from the complete time .
5504	Converts a LatLon coordinate to a projection
5505	show TimeSeries
5506	Convert an attribute list into a Map .
5507	Gets the value of this property .
5508	Returns a numeric value at the given index .
5509	Writes CDL definition .
5510	Sets the attribute value .
5511	Sets the attribute values .
5512	Sets the values from an array .
5513	Starts the scan .
5514	Generate the catalog schema for the target dataset
5515	Schedules a message .
5516	Sets the tred datasource .
5517	Jdbc datasource
5518	jred datasource
5519	Sets the dataset .
5520	Prepare the GUI .
5521	Creates the NetCdfFrame
5522	Convert a list of coordinates to a full name .
5523	Returns the first coordinate axis which is greater than the first rank .
5524	Finds the axis with the specified type .
5525	Gets the projection .
5526	Returns true if the GeoXY is a GeoXY axis .
5527	Returns true if there is a regular axis .
5528	Returns true if the set is subset of the set .
5529	Determine if a list contains a list of coordinates .
5530	Checks if the given axis exists in the coordinate axis .
5531	Returns true if the specified list contains the specified dimensions .
5532	Determine if the given list contains the axis .
5533	Determine if the axis has an axis
5534	Clones the DAG node .
5535	Returns the selected bean .
5536	Returns the selected beans .
5537	Returns the list of selected values .
5538	Set the selected bean .
5539	Restores the state of the state from the store .
5540	Returns the unknown unit .
5541	Closes the stream .
5542	Returns true if the given variable is an extra variable .
5543	Determine if the given variable is a coordinate .
5544	Determine the coordinate axis for the given coordinate .
5545	Add data variables to a table
5546	Add parent join data to the parent
5547	Create a station feature from a structure data structure .
5548	Creates the node map .
5549	Get a SimpleUnit factory .
5550	Factory method to create a SimpleUnit instance .
5551	Create a unit from the given string .
5552	Determines if two strings are compatible with exceptions .
5553	Returns true if the given unit is a DateUnit
5554	Returns true if the given string is a time unit .
5555	Gets the conversion factor .
5556	Convert a value to another unit .
5557	Returns true if this unit is unknown .
5558	Returns the value of this unit .
5559	Creates a new Relation clause .
5560	Create a new top level clause .
5561	Create a sub - clause .
5562	Creates a Graster image from an array
5563	Crawl a catalog .
5564	Crawl a dataset .
5565	Crawl a direct dataset .
5566	Gets the file or cache if it exists .
5567	Gets the file or cache if it exists .
5568	Enable debugging .
5569	Gets a list of files .
5570	Close the file .
5571	Sets the file position .
5572	Flush the buffer .
5573	Reads a byte from the file .
5574	Reads a short from the input stream .
5575	Read an int from the stream .
5576	Reads an integer from the input stream .
5577	Reads a long from the stream .
5578	Reads a float from the input stream .
5579	Reads a double from the stream .
5580	Reads a string from the stream .
5581	Read n bytes from the stream .
5582	Writes a boolean array to the stream .
5583	Writes a short array to the stream .
5584	Writes a char array to the stream .
5585	Writes an array of integers to the stream .
5586	Writes a long array to the stream .
5587	Writes a float array .
5588	Writes a double array .
5589	Writes a string to the output stream .
5590	Writes a character array to the output stream .
5591	Search for forward bytes in the buffer .
5592	Append query string to a string buffer .
5593	create a collection
5594	Find the index .
5595	Checks if this directory is a leaf .
5596	Constructs the children of this node .
5597	Scan all children in the directory .
5598	Read the m files from the index
5599	Returns a list of grids .
5600	Acquires a file cacheable .
5601	Remove a file from the cache
5602	Removes a file from the cache .
5603	Release a file cache .
5604	Calculates a 4 - bit integer .
5605	Update the element in cache .
5606	Clears the cache .
5607	Make the vertical transform for a grid dataset
5608	Returns true if the global is global
5609	Returns true if the z axis is positive .
5610	Finds the x - axis index for the given coordinates .
5611	Returns the index of the x - axis index based on the bounding box .
5612	Returns the index of the XY index for the given latitude .
5613	Returns the index of the first coordinate in the map .
5614	Returns the position of the item
5615	Returns the item for a pixel
5616	Iterates over all files in a directory .
5617	Get remote files
5618	Returns the name of the sub center for the given sub center .
5619	Returns a CalendarPeriod instance from a string .
5620	Returns a new instance of CalendarPeriod .
5621	Creates a CalendarPeriod from a String .
5622	Subtract the difference between two dates .
5623	Gets the conversion factor .
5624	Returns the value in milliseconds .
5625	Returns the offset between two dates .
5626	Sync the nc file .
5627	init tables
5628	Add data root extension to the map
5629	Returns the longest path matching the given request path .
5630	Find the data root .
5631	Convert a data root to a DataRoot
5632	Returns the CalendarRange for the given calendar .
5633	Reindex a list of coordinates .
5634	Creates a new NcdfFileWriter .
5635	Creates a new group .
5636	Adds an enum type to the group .
5637	Delete an attribute from the group .
5638	Rename a group attribute .
5639	add record structure
5640	Aborts the underlying stream .
5641	Writes the BeanParser to a PrintWriter .
5642	Extracts the ThreddsMetadata from the database .
5643	Divide this unit into another .
5644	Converts this unit to a derived unit .
5645	Converts a derived unit to another unit .
5646	Convert a nested variable to a nested array
5647	Convert a top - level variable to a DODS variable .
5648	Convert a DodsVVVV to an array
5649	Close all databases .
5650	Open the database .
5651	Convert an integer value to a joda period .
5652	Ensure that the array has enough space .
5653	Returns the string at the specified index .
5654	Create a catalog for a directory .
5655	Create proxy datasource .
5656	Get the coordinate type .
5657	Factory method to create a Grib2P2 .
5658	Calculates the time at the start position .
5659	Applies the given value to the scale factor .
5660	Parse a local concept from a file .
5661	Adds a local concept .
5662	Removes the line from the input .
5663	This method stores the information for the given table .
5664	Writes the grib1 table to the output file .
5665	Writes the lookup table .
5666	Show local concepts .
5667	Main entry point .
5668	Returns the dataset source .
5669	Recursively expand the catalog .
5670	Expand all datasets in the dataset .
5671	name of the dataset
5672	Creates a dataset list .
5673	Tries to find the named dataset .
5674	Loads a picture from the image .
5675	Stop loading of the specified URL
5676	Sets the status change .
5677	Called when the source image is loaded .
5678	Create a new thread in thread .
5679	Gets the size of the image .
5680	Get the scaled size string
5681	Gets the merged parts .
5682	Creates the header for the given station station .
5683	Determine the list of required groups .
5684	Checks if part is valid .
5685	Sets the root directory .
5686	Marks the root directory .
5687	Get the cache file .
5688	Cleans the files in the directory .
5689	Remove all files in the directory
5690	Determine if a big buffer is a buffer .
5691	Factory method to create a new Coordinate Axis Axis Axis
5692	Make a copy of this axis .
5693	Returns true if this type is numeric .
5694	Returns information about this dataset .
5695	Retrieve the calendar from an attribute .
5696	Sets the list .
5697	Returns the selected selection .
5698	Increment the selected selection .
5699	Returns the model index of this table .
5700	set the current index
5701	Sort a string array .
5702	Swap the elements of a string .
5703	Returns a file or null if it exists
5704	Rotate the specified coordinates .
5705	Create an XML store from a file .
5706	Create an XML store from input streams .
5707	Create an XML store from a resource .
5708	Create a standard filename for the given app name .
5709	Saves the preferences .
5710	Saves the preferences to an output stream .
5711	Write an atomic variable .
5712	Writes the data structure to the serializer .
5713	Writes the data structure to the serializer .
5714	Serialize a DataSequence
5715	Write a record to the serializer .
5716	Determines if the file is valid .
5717	Get the WmoID
5718	Reads a record for a record .
5719	Returns the data at the specified index .
5720	Gets the data array of data points .
5721	Decode the data in the grid .
5722	This method is used to read an instance of a scalar variable
5723	Create a grid file .
5724	Estimates the size of a grid file .
5725	Generates a network file .
5726	Set the list of stations
5727	Sets the selected station .
5728	Selects a new station with the specified point .
5729	Selects the closest station to the given point .
5730	Returns the selected station .
5731	Returns the project name for the given type .
5732	Get the list of stations for the given bounding box .
5733	Returns a station with the given name .
5734	Get the data iterator for a station .
5735	Get the data iterator for a station .
5736	Reads the data from the input file .
5737	Returns the dot product of this vector .
5738	Returns the norm of this matrix .
5739	Normalizes this matrix .
5740	Sets the services from the given iterable .
5741	Returns the parameter with the given id .
5742	Returns the local parameter .
5743	Adds a new prefix .
5744	Adds a symbol .
5745	Returns the first prefix of the given string .
5746	Returns true if the given source is an email .
5747	Returns a double parameter .
5748	Calculates the CRC of the data
5749	Determine if the buffer is bigger than 0 .
5750	Returns the index of a field by name .
5751	Returns the time range name .
5752	Get the time coordinate .
5753	Sets the next polygon .
5754	Sets the prev polygon .
5755	Returns the property with the given name .
5756	Sets the current projection .
5757	Sets the coordinate axis based on the given parameters .
5758	Registers an IOFdfFile .
5759	Register an IOServiceProvider .
5760	Registers the given class with the specified target class .
5761	Returns true if the Iospervice is registered .
5762	Remove the IOService provider .
5763	Returns true if the file is open .
5764	Opens a new network file in memory .
5765	Creates an IncdfFile with the given data .
5766	Opens a NetCdfFile in memory .
5767	Opens a NetcdfFile in memory .
5768	Returns the global attribute with the given name ignoring case .
5769	Converts the network to ncdfdf .
5770	Writes CDL data to output stream .
5771	Writes CDL data to a PrintWriter .
5772	Write CDL .
5773	Adds an attribute to this group .
5774	Adds an attribute to this group .
5775	Adds a group to this group .
5776	Adds a dimension to this group .
5777	Removes a dimension from this group .
5778	Adds a variable to this group .
5779	Adds a variable to this group .
5780	Adds a string variable to the group .
5781	Removes a variable from the group .
5782	Sends an IOSP message .
5783	Make a record structure .
5784	Finishes this context .
5785	Reads the contents of a variable section .
5786	Reads a variable from a file .
5787	Read variables from a list of variables .
5788	Read a dataset from a variable section .
5789	Make the full name of a CDM node .
5790	Returns a full full name with the given name .
5791	Returns true if the mFile is included in the filter .
5792	Checks if the file is excluded .
5793	Filter and return true if the MFileFilter is true .
5794	Append a value to a Vector .
5795	Dispatch check value .
5796	Convert a string value to a string .
5797	Checks if a string is a byte .
5798	Checks if a string is a short .
5799	Convert a string to an integer
5800	Checks whether a string is an unsigned integer .
5801	Convert a string to a float .
5802	Convert a string to a double .
5803	Gets the data type .
5804	Determine if the given dataset is visible .
5805	Returns true if the given string is a valid boolean .
5806	Returns true if the given string is a valid alphanumeric string .
5807	Returns true if the specified alphanumeric string is valid .
5808	Returns true if path is a file path .
5809	Converts a Unicode code point to a hexadecimal string .
5810	Returns the value of a parameter .
5811	Compare two grids .
5812	Processes the input stream .
5813	Reads the buffer from the buffer .
5814	Removes quotes from a string .
5815	Marks all variables in the stack .
5816	Writes ncdf data to the dataset
5817	Gets the value from thrredds config .
5818	Writes the CDL document to the output .
5819	Creates and returns the station s stations .
5820	Validates this ResultService .
5821	Gets the zimuth from the message .
5822	Returns the elevation of the message .
5823	Returns the latitude of this MEs .
5824	Returns the longitudes associated with this ME .
5825	Returns the altitudes of this MEs .
5826	Gets the azimuths .
5827	Returns the elevation of the gauge .
5828	Returns a subset of the given member names .
5829	Returns a subset of the given variable .
5830	Adds a member variable to this structure .
5831	Sets the member variables .
5832	Sets the parent group .
5833	Calculates the element size .
5834	Reads the data at the given index .
5835	Reads a data structure from a dataset .
5836	Returns a StructureDataIterator for this Structure .
5837	Get data category
5838	Gets the class name .
5839	Add a parameter .
5840	Gets the header .
5841	Convert a LatLon coordinate to a projection
5842	Get the version number from a string .
5843	Determine whether zis is positive or not .
5844	Delete the next file .
5845	Set the color scale parameters
5846	Renders the plan
5847	Returns true if this group is a child of this group .
5848	Returns the message type
5849	Installs all cell renderers in the given table .
5850	Sets the API key .
5851	Creates a new Label .
5852	Creates a label with the given lines .
5853	Creates a label with the given value .
5854	Connect to a cloud socket .
5855	Parse the CloudSql types .
5856	Connect to the given host .
5857	Removes a logger from the registry .
5858	Compiles all source codes .
5859	Compiles a class from a string .
5860	Adds a source code to the compiler .
5861	Read the graphic data .
5862	Get the next frame .
5863	Gets the list of person names .
5864	Initialize listeners .
5865	Returns the person with the given id .
5866	Adds a message to the map .
5867	Sets the person id .
5868	Creates and returns a view model .
5869	Creates a view model for the given view .
5870	Loads the countries .
5871	Load the list of subdivisions .
5872	Creates a new property field .
5873	Returns an immutable copy of this property .
5874	Creates a Java ViewStep for a Java View .
5875	Factory method to create a FxmlView .
5876	Clears the given map .
5877	Create the event listeners .
5878	Accessible for a callable .
5879	Loads a ViewTuple from a FXML file .
5880	Create fxml path .
5881	Query for a style mapping row
5882	Get a pixel value from the image
5883	Get the pixel values for a PNG image
5884	Validate the image
5885	Creates the image for the coverage data .
5886	Set the tile data .
5887	Executes the query and returns a Cursor
5888	Wraps the query
5889	Executes the query and returns the result .
5890	Executes a query .
5891	Convert a Cursor to a TResult
5892	Get the feature row
5893	Register a new table with the given table name
5894	Retrieve the tile row
5895	Get the coverage data
5896	Get the coverage data for the tile
5897	Get the coverage data for the tile
5898	Get the coverage data for the requested tile .
5899	Get the results of the coverage data
5900	Get the results in the tile matrix
5901	Get the results of the coverage data in the bounding box
5902	Get the tile matrix for the coverage data .
5903	Get the double value for the tile row
5904	Sets the icon for the given geometry type
5905	Get the icon for a geometry type
5906	Open the bindings database .
5907	Convert byte array to Bitmap
5908	Convert bitmap to byte array
5909	Create the table metadata
5910	Delete the table
5911	Get the table metadata for the specified GeoPackage .
5912	Get the GeoPackage ID
5913	Create a TableMetadata from a Cursor
5914	Create extension .
5915	Returns the feature row for the given cursor .
5916	Returns a raw query with the specified selection arguments .
5917	Query for the query
5918	Query for the geometry envelope
5919	Count the number of geometries in the envelope .
5920	Query for rows
5921	generate WHERE clause
5922	Query for feature bounding box
5923	Count the number of features in the bounding box
5924	Query for feature envelope
5925	Query for feature IDs
5926	Counts the number of objects in the specified range .
5927	Sets the compressed data for a bitmap .
5928	Set bitmap data .
5929	Sets the compression compression .
5930	Returns the number of tile tiles in the map
5931	Adjust the bounding box
5932	Adjust the bounding box
5933	Adjusts the bounding box for the tile in the tile grid
5934	Adjusts the bounding box of the GeoPackage bounding box
5935	Get the bounding box for the tile level
5936	Get the tile grid for the specified zoom level .
5937	Query for a specific tile .
5938	Query the tile cursor for the given zoom level .
5939	Get the zoom level for the specified length
5940	Get the approximate zoom level for the specified length .
5941	Query for the tile grid
5942	Delete tile .
5943	Counts the number of tiles in the given zoom level .
5944	Determine if the tile matrix is Google Maps
5945	Gets the pixel value of the image .
5946	Gets the pixel values from a byte array .
5947	Validate the image type
5948	Create image data .
5949	Set the pixel value at the given position
5950	Gets the GeoPackage by name .
5951	Gets the current row .
5952	Move the invalid cursor to the next invalid position .
5953	Query by base feature id
5954	Delete style mapping
5955	Get a rectangle with the given width and height
5956	Get a rounded rectangle bounding box .
5957	Deletes missing databases .
5958	Creates and closes the GeoPackage database .
5959	Check if the database is valid
5960	Validate database .
5961	Validate database .
5962	Validate database .
5963	Validate the database header
5964	Check database header
5965	Add external databases .
5966	Adds the databases to the database .
5967	Imports a GeoPackage .
5968	Get the GeoPackage metadata
5969	Get the GeoPackageMetadata at the given path .
5970	Create a new geometry metadata
5971	Populate GeometryMetadata
5972	Delete the GeoPackage
5973	Creates or updates the geometry .
5974	Update the geometry metadata
5975	Count the number of rows in the table
5976	Create a GeometryMetadata from a cursor .
5977	Updates the rows in the table .
5978	Draw a single tile .
5979	Gets the simple attributes for the given IDs .
5980	Performs the integrity check .
5981	Get the UserMapping DAO
5982	Get SimpleAttributes DAO
5983	Returns the mappings for the given baseRelation .
5984	Returns the mappings for the given extended relation .
5985	Checks if the base mapping exists in baseId
5986	Get the count of the userCustomCursor
5987	Register a CursorWrapper wrapper for the table
5988	Read a table .
5989	Get the tile from the requested bounding box
5990	Draws a tile from the results of the tile .
5991	Reprojects a tile to the requested tile .
5992	Retrieve the tile results for a bounding box
5993	Calculates the draw size of the drawable .
5994	Sets density .
5995	Sets the line paint
5996	Sets the Polygon Paint
5997	Draws the tile at the specified coordinates .
5998	Draw the tile at the specified location
5999	Draws a tile for the feature index
6000	Query for feature count
6001	Query for features in the bounding box
6002	Query for feature indexing
6003	Query for features in the bounding box
6004	Draw a tile for all features
6005	Simplified method .
6006	Get the point paint for a feature style
6007	Get the line paint for a feature style
6008	Get the polygon for a feature style
6009	Get the paint paint for a feature
6010	Get the style for the feature style
6011	Get the style for the style
6012	Get paint for a style row
6013	Get the paint for a feature id
6014	Put the bitmap for the icon row
6015	Creates and returns the bitmap for the icon
6016	Wrap a ContentValues
6017	Creates a bitmap for this layer .
6018	Recycle the canvas .
6019	Get the bitmap for a layer
6020	Get the canvas for a layer
6021	Create the bitmap and canvas for the layer
6022	Get the style mapping DAO
6023	Get the style DAO
6024	Get the icon DAO
6025	Get the feature style for the feature table
6026	Get the styles for the feature table
6027	Get the style for the feature table
6028	Get the icons for the feature table
6029	Get the icon for the feature table
6030	Get the feature styles from a feature row
6031	Get feature styles from feature table
6032	Get the styles for a feature row
6033	Get the icons for the feature row
6034	Get the styles for a feature
6035	Get the icons for a feature
6036	Sets the feature styles .
6037	Sets the styles for a feature table
6038	Sets the icons for the feature table
6039	Set the feature styles for a feature row .
6040	Sets the feature styles .
6041	Set the styles for a feature row
6042	Sets the styles for a feature table .
6043	Set the style for a feature row
6044	Set the style for a feature row
6045	Sets the default style for a feature table
6046	Sets the icons for the feature row .
6047	Sets the icons for the feature table .
6048	Set the icon for the feature row
6049	Sets the icon for the feature row
6050	Sets the default icon for the feature table
6051	Get or insert a style
6052	Gets the icon for the icon .
6053	Inserts the style mapping row
6054	Delete the table style mapping
6055	Delete the table icon .
6056	Delete the table mapping table
6057	Delete the table mapping
6058	Delete the style mapping
6059	Returns all the style ids for a feature table
6060	Get all icon icons for a feature table
6061	Get all style ids for a feature table
6062	Get all icon ids for the feature table
6063	Gets the image bytes .
6064	Flushes the output stream .
6065	Get the pixel value
6066	Read pixels .
6067	Draw the feature in the tile
6068	Draw a line .
6069	Draw a polygon
6070	Add a line to the path .
6071	Add polygon
6072	Returns the cache for the given table .
6073	Removes a feature from the table .
6074	Clear all features in the cache .
6075	Get the cached table style
6076	Gets the icon icon .
6077	Get the RTree Index Table DAO
6078	Set the width
6079	Set the height
6080	Calculates the derived dimensions .
6081	Calculates the density of the tile density for a specific tile .
6082	Read blob value .
6083	Read a table
6084	Get the color or create a new color .
6085	Validate the color
6086	Creates a color from a hex color .
6087	Get the GeoPackageManager
6088	Set the progress
6089	Returns the index for the given types .
6090	Index the feature row .
6091	Delete a collection index .
6092	Delete the feature index for the given row
6093	Delete the feature index for a given geometry id .
6094	Delete the specified feature index
6095	Returns true if the location is indexed .
6096	Returns a list of all the features in the order .
6097	Query for feature index results
6098	Returns the number of features in the feature table .
6099	Get the bounding box
6100	Query for feature index
6101	Get the indexed feature index .
6102	Get internal file .
6103	Gets the file path .
6104	Returns the geometry type .
6105	Sets the geometry type .
6106	Checks if the url is bounding box
6107	Replace x z z z z z z z
6108	Checks if the URL is XYZ
6109	replace the bounding box
6110	Replace the bounding box
6111	Get the geometry data
6112	Index the feature row
6113	Update the last indexed time
6114	Deletes the feature index .
6115	Delete the index
6116	Returns true if the last change is indexed .
6117	Queries the geometry table
6118	Query the cursor for the feature
6119	Count the number of features in the bounding box
6120	Query the geometry envelope
6121	Counts the number of geometries in the envelope
6122	Query for the feature bounding box
6123	Count the number of features in the bounding box
6124	Get the feature bounding box
6125	Get the geometry metadata .
6126	Get the feature row from a cursor .
6127	Get the feature row for the given geometry metadata .
6128	Get the tile dao for feature table
6129	Get the FeatureDao for the tile table
6130	Get the bounding box
6131	Query by base id and related id
6132	Returns a list of all unique base IDs .
6133	Returns a list of unique IDs .
6134	Delete user mapping by baseId
6135	Delete user mapping by id
6136	Delete records by id and related id
6137	generate where where id and related id
6138	Create a GeoPackage
6139	Delete the metadata
6140	Rename the metadata
6141	Rename the name
6142	Get all the GeoPackageMetadata
6143	Get the GeoPackageMetadata
6144	Get the GeoPackageMetadata
6145	Get or create a GeoPackageMetadata
6146	Check if the database is external path
6147	Get the external package
6148	Get metadata by name .
6149	Get metadata by name like name .
6150	Get metadata by name
6151	Create a GeoPackageMetadata from the cursor
6152	Called when the view has been created .
6153	Adds a parallax view to the view .
6154	This method is called by the LayoutInflater .
6155	Create a custom view .
6156	This method is called by subclasses
6157	Find the logback config file from system properties .
6158	Get a resource from the class loader .
6159	Automatically auto - config
6160	Sets the status of a resource search .
6161	Convert socket address to string .
6162	Creates an executor service .
6163	Start all converters .
6164	Submits the event to the rollover .
6165	Add a substitution property .
6166	Gets a property .
6167	Compiles the given node into a converter .
6168	Emit an Eopt node .
6169	Tries to parse a Curentry token .
6170	Escape characters .
6171	Convert a fixed date to a regular expression .
6172	Start the event .
6173	Ends the evaluator .
6174	Initialize the context
6175	Create a context selector from a context string .
6176	Sets up properties .
6177	Gets the mounted external storage directory .
6178	Gets the database directory path .
6179	Returns the absolute path of the file .
6180	Evaluate logging event .
6181	Gets the value of the discriminator property .
6182	Updates the mask if necessary .
6183	Get the chain of filters .
6184	Creates the key managers .
6185	Create trust managers .
6186	Creates a KeyStoreFactory from system properties .
6187	Extracts the location from a system property .
6188	Returns the URL for the given location .
6189	Determine if the chain is a chain of converters
6190	Stop the logback context .
6191	Prints the errors in the given context .
6192	Prints the warnings of the given context .
6193	Print a warning message .
6194	Handle the first line of throwable
6195	Gets the entry from the live map .
6196	Called when a key is ended .
6197	Creates a FormatInfo object from a string .
6198	Rename a file .
6199	Checks if source file is on the same file system .
6200	Gets environment variable .
6201	Get a system property .
6202	Sets the MDC property map .
6203	Outputs the MDC for each MDC .
6204	Extracts the stack trace from the given exception .
6205	Checks if the class is in the framework .
6206	Adds a new status .
6207	Adds a listener to the console .
6208	Lookup an implicit action .
6209	Gets the applicable action list .
6210	Sets the class loader .
6211	Gets the system property .
6212	Get a boolean value from system properties .
6213	Parse the given name .
6214	Returns an array of MethodDescriptors for the given class .
6215	Returns an array of PropertyDescriptors for a given class .
6216	Start the appender .
6217	Add onConsoleStatusListener instance .
6218	Ends the definition of a property .
6219	Returns the discriminator value for the given event .
6220	Determine if the given event is discarded .
6221	Start the shutdown hook .
6222	Registers a logback hook .
6223	Get enabled protocols .
6224	Determine the enabled cipher suites .
6225	Returns an array of strings which are included in the given array .
6226	Convert string to Scope
6227	Sets the properties in the interpreter context .
6228	Adds an appender to the list .
6229	Removes the given appender from the appender list .
6230	Detach an appender by its name .
6231	Records the parent level of this logger .
6232	Call all appenders on the logger .
6233	Detaches the given appender from this application .
6234	Create a child logger by name .
6235	Calls the combo filters .
6236	Logs slf4j event
6237	Creates a new socket .
6238	Creates missing parent directories .
6239	Returns the integer value as integer .
6240	Convert integer to a Level
6241	Returns the number of URLs in the given resource .
6242	Gets a URL for a given resource .
6243	Gets the class loader for the given object .
6244	Returns the class loader for the given class .
6245	Gets the class loader for the given class .
6246	Start the appender .
6247	Returns the log tag for the given event .
6248	Start element .
6249	Gets the separator index of a given name .
6250	Evaluate logging event
6251	Returns the name of the client thread .
6252	Checks if two files are on the same file store .
6253	Starts the mail .
6254	Appends an event to the queue .
6255	Sends the message to the layout .
6256	Add a MDC value pair to the value map
6257	Create a converter for a given keyword
6258	Create a composite converter .
6259	Determine the compression mode .
6260	Configure the configuration .
6261	Configure the configuration .
6262	Configures the input stream .
6263	Build interpreter .
6264	Determines the SAX configuration .
6265	Do the configuration .
6266	Get a property .
6267	Sets the name of this context .
6268	Returns true if the given context has status listener .
6269	get last reset date
6270	Parse the parser .
6271	Gets the effective converter map .
6272	Returns the file header .
6273	Returns the file footer .
6274	Start the appender .
6275	End the appender .
6276	Returns a copy of the client .
6277	Adds a new client to the server .
6278	Removes a client .
6279	Returns a copy of the context map .
6280	Gets the value of a method of a class .
6281	Determines the decision chain .
6282	Determines if the operating system is a Linux operating system .
6283	Initialize the LoggerContext
6284	Returns all files in a folder that match the given regular expression .
6285	Prints the status .
6286	Converts a string representation of a human readable string to a numeric value .
6287	Get the logback database .
6288	Clears expired logs .
6289	Check if the last check is expired .
6290	Submits a new logging event to the database .
6291	Helper method to add secondary sub - sub - sub - appends .
6292	Binds SQL logging event .
6293	Converts an object to a string .
6294	Compute the mask for the given event .
6295	Merges the properties from the event to the event map .
6296	Insert exception .
6297	Returns the number of prefix length in this path .
6298	Returns the effective level .
6299	Sets a property .
6300	Determines whether the given class is instantiated .
6301	Returns the child value of the child .
6302	Process an include include tag .
6303	Open a URL to an input stream .
6304	Removes the head and end elements from the stream .
6305	Returns true if the server should be started .
6306	Returns true if the exception is transient .
6307	Set default hosts .
6308	Ensure that the local index is already present .
6309	Synchronously synchronously .
6310	Checks if the mirror is needed .
6311	Wait for a task
6312	Lists offline indexes on offline .
6313	Convert an input stream to a string .
6314	Convert input stream to byte array
6315	Consumes the connection and closes the connection .
6316	Returns a list of host names that are up up .
6317	Sets the type for the query .
6318	Starts the cursor .
6319	Puts a value into the cache .
6320	Gets the value from the cache .
6321	Waits for all threads to complete .
6322	Compares two version strings .
6323	Reports an exception .
6324	Copies a directory to a directory .
6325	Initializes the properties from the given file .
6326	Gets the value of a static field .
6327	Gets a method by its name .
6328	Returns a percentage of the given value .
6329	Format a double .
6330	Formats a long .
6331	Reads a JSON syntax character .
6332	Returns the hex value of a byte .
6333	Writes a JSON string .
6334	Write a JSON integer .
6335	Write a double .
6336	Reads a JSON string .
6337	Reads numeric characters from the stream .
6338	Reads a JSON integer .
6339	Reads a double .
6340	Reads a JSON encoded JSON .
6341	Executes a method call .
6342	Invokes a request .
6343	Enqueue a method call .
6344	Gets a file from a file .
6345	Updates the decoration .
6346	Refresh the repository view
6347	Returns the repository history view
6348	Opens an editor based on its contents .
6349	Reports an authentication failure .
6350	Prompts the authentication .
6351	Creates the default page .
6352	Start the thread
6353	Sets the keepalAlive flag .
6354	Sets whether this element should be ignored .
6355	Sets the owner .
6356	Adds a new condition factor to the list .
6357	Creates a condition term .
6358	Returns true if this condition matches the given condition .
6359	Get the DDL content for the given rule source .
6360	Loads the DSL config file .
6361	Reads the configuration from the given stream .
6362	Gets the menu .
6363	Adds a response body .
6364	Adds a new href .
6365	Inserts a new href .
6366	Removes the href .
6367	Adds the properties .
6368	Gets the href .
6369	Returns the status .
6370	Get the stack frame for the given value .
6371	Determine if a class is a subtype of a class .
6372	Returns true if the given list contains the given proposal .
6373	Clone a node .
6374	Resets the input stream .
6375	Create the actions .
6376	Adds a connection to this connection .
6377	Gets the value of a property .
6378	Removes a connection .
6379	Sets the location property .
6380	Sets the property value .
6381	Sets the size of the gauge .
6382	Dumps the given constraints .
6383	Adds a lock entry .
6384	Adds a child to this vertex .
6385	Remove a child .
6386	Initialize the cache .
6387	Stop this bundle .
6388	Get a string from a resource bundle .
6389	Get the resource bundle .
6390	Gets the form builder formatter .
6391	Sets the date time .
6392	Set the date time
6393	Create an error status .
6394	Logs an error .
6395	Adds a field editor .
6396	Adjust the grid layout .
6397	Apply font font .
6398	Calculates the maximum number of columns .
6399	Initialize the fields .
6400	Fire a property change event .
6401	Sets the active editor .
6402	Add to the wizard .
6403	Determine dialect .
6404	Creates a context for the given user context and locator .
6405	Save the file .
6406	Creates the listeners for the table .
6407	Create the table .
6408	Adds a value to the given URL .
6409	Adds a new entry .
6410	Adds a token to this node .
6411	Add a node to this node .
6412	Sets the file .
6413	Adds a new condition .
6414	Adds a state token to the resource URI .
6415	Returns true if the condition matches the given condition .
6416	Returns the property .
6417	Returns the status .
6418	Sets the property .
6419	Gets the last line of text .
6420	Gets the last non - dash line .
6421	Binds a binding to a given id .
6422	Binds the given id to the given id .
6423	Returns a message with the given id .
6424	Creates the process .
6425	Create the process sample sample .
6426	Returns the runtime identifier .
6427	Visit a Rete .
6428	Visits a node .
6429	Returns the dot id for the given object .
6430	Adds a property .
6431	Adds a set .
6432	Create a locator for a given resource URL .
6433	Get the presentation Reconciler
6434	Returns true if this status is equal to the same status .
6435	Returns true if the condition contains the given condition .
6436	Create a condition factor .
6437	Add the pages .
6438	Performs a HTTP DELETE request .
6439	Performs a HTTP POST request .
6440	Gets the status of a job .
6441	Executes the pull operation .
6442	Handles pull results .
6443	Sets the value at the given index .
6444	Adds an active lock .
6445	Removes proposals from the given prefix .
6446	Reads the prefix .
6447	Calculates the rows from the root vertex .
6448	Draw the border .
6449	Returns the edit part for the given model element .
6450	Returns the image descriptor for the given path .
6451	Declare an image .
6452	Add a vertex at the given depth .
6453	Returns the index of the given vertex .
6454	Gets the width of the table .
6455	Dumps the vertices to stdout .
6456	Optimize the optimization .
6457	Loads the RETE model from the input file .
6458	Initialize the graphical viewer .
6459	Draws the graph .
6460	Get a DroolsBreakpoint .
6461	Sets the href .
6462	Returns true if the server can talk to the server .
6463	Copy the specified properties to the destination .
6464	Examine a multi - status response .
6465	Extract properties from a multi - status map .
6466	Gets the content .
6467	Returns an enumeration of all active locks .
6468	Returns the specified property .
6469	Performs HEAD request .
6470	Issue a lock .
6471	Move the specified destination .
6472	Check the location in the server .
6473	Refresh lock .
6474	Removes the specified properties .
6475	Removes the specified property .
6476	Sets the content of a file .
6477	Sets the specified properties .
6478	Sets the property .
6479	Unlock a lock .
6480	Updates the document .
6481	Request version control .
6482	Deletes this node .
6483	Examine the status code .
6484	Returns true if the property has a child with the given name .
6485	Writes the request body .
6486	Converts a byte array to a hexadecimal string .
6487	Converts an array of integers into a hexadecimal string .
6488	Sets the flag for all properties .
6489	Sets whether the property is a property .
6490	Sets the property .
6491	Strips the last word from a prefix .
6492	Updates the rules tree .
6493	Writes this message to the given output stream .
6494	Performs the step over the current thread .
6495	Mark parser errors .
6496	Skip whitespace .
6497	Adds a file to the web server .
6498	Commit file changes .
6499	Gets the age attribute .
6500	Gets the content length .
6501	Gets the maximum number of forward forwards .
6502	Gets the overwrite flag .
6503	Gets whether or not the request is queued .
6504	Gets the timeout .
6505	Sets a property .
6506	Sets the timeout .
6507	Open DDL file
6508	Parse a file .
6509	Gets the metadata .
6510	Strip object metadata .
6511	Adds tokens to the tree .
6512	Gets the children of the given text .
6513	Gets the children of the given object .
6514	Adds a child node to the list .
6515	Prints the tree .
6516	Prints a node .
6517	Prints the number of tabs .
6518	Reads a JsonValue from a string .
6519	Returns the image descriptor for the given id .
6520	Invokes the proxy .
6521	Sets a request header field .
6522	Create the rule launcher .
6523	Create rule .
6524	Creates the rule flow .
6525	Creates the java file launcher .
6526	Returns the selected IUuable units .
6527	Create an image .
6528	Gets the field name .
6529	Gets the evaluator .
6530	Gets the value of the alpha node .
6531	Adds properties from the given resource .
6532	Sets the baseline control .
6533	Bind a member to the given location .
6534	Returns a locator with the specified name .
6535	Optimize the graph .
6536	Initialize the controls .
6537	Validates the page .
6538	Generate an entity tag .
6539	Returns the opposite of this vertex .
6540	Validate a list of otp
6541	Checks to see if the given user is authorized .
6542	get username from file
6543	Adds a key to a file .
6544	Verify an OATH OATH
6545	Clear the password .
6546	Returns the public key of the given string .
6547	Returns true if the given string is a valid OTP format .
6548	Creates an evaluation .
6549	Create an evaluation .
6550	Clears the cache .
6551	Returns true if this class is a JDK 8 .
6552	Returns the package name of the given object .
6553	Returns the package name of a class .
6554	Returns a unique descriptor for the given object .
6555	Get the argument class .
6556	Determine if two classes are equal .
6557	Determine the appropriate method for the target object .
6558	Returns the value of the specified property .
6559	Returns a map of property descriptors for the given class .
6560	Get a PropertyDescriptor from a class .
6561	Gets the read method for the given name .
6562	Reads a character from the input stream .
6563	Parses a projection .
6564	select all nodes
6565	Returns the long value as long .
6566	Convert value to double .
6567	Convert value to BigInteger
6568	Convert value to BigDecimal
6569	Convert an object value to a string .
6570	Gets numeric type .
6571	Converts the given value to the given type .
6572	Convert value to integer .
6573	Returns the numeric between two types .
6574	Get the numeric type of two objects
6575	Creates an integer from the given type .
6576	Removes the evaluation .
6577	Generate an OGNL getter method .
6578	Generate an OGNL setter method .
6579	Flattens the tree .
6580	Initializes this node .
6581	Escape a character .
6582	Sets the root object .
6583	Gets the value of an expression .
6584	Sets the value of an expression .
6585	Sets the value of the given tree .
6586	Returns true if the expression is a constant .
6587	Returns default watch service id .
6588	Waits until the server is started
6589	Reads the file as a string .
6590	Reload the class loader .
6591	Get an archiver by name .
6592	Check the given archiver for the given archiver .
6593	Read file as string .
6594	Creates the project .
6595	Add system property .
6596	Add system property .
6597	Open a new folder dialog .
6598	Change the selected directory .
6599	Refresh the button state .
6600	Creates a file observer .
6601	Returns the selected folder .
6602	Creates a new folder .
6603	Checks if the given file is valid .
6604	Start a background job .
6605	Start a list .
6606	Ends the end tag .
6607	Handle motion .
6608	Gets the crop rectangle .
6609	Compute the layout .
6610	Register an RTE edit text
6611	Adds the span watcher to the text .
6612	Returns the view of the spinner .
6613	Returns a drop down view
6614	Convert Spanned text into RTF HTML .
6615	Calculates the set of characters within a paragraph .
6616	Create a unique file from the target folder .
6617	Determine the original file from the given Uri .
6618	Returns the namespace URI for the given name .
6619	Returns the local name of the given name .
6620	Sets an attribute .
6621	Sets an attribute .
6622	Get the font name for the given file path .
6623	Get the font name from the given file path .
6624	Adds new buffer to the buffer .
6625	Writes a byte array .
6626	Writes a byte to the stream .
6627	Reads data from an input stream .
6628	Writes this buffer to the given output stream .
6629	Returns a copy of this buffer as a byte array .
6630	Sets the font .
6631	Converts a path to Unix separators .
6632	Recompute the focus .
6633	Ensure that the highlight is visible .
6634	Center the highlighting for the highlighting .
6635	Resets the document locator .
6636	Validate the given string .
6637	Register an element type .
6638	Sets an attribute for a given element .
6639	Set a parent element with the given name .
6640	Returns the element type .
6641	Get an entity by its name .
6642	Cleans up the paragraphs .
6643	Applies the given value to the current selection .
6644	Checks if the given string is a valid IP address .
6645	Called when the operation is executed .
6646	Reduce the current edit .
6647	Replace all occurrences of the given search string .
6648	Gets the thread status for the given thread .
6649	Sets the decoded options .
6650	Returns true if the given thread can be decoded .
6651	Decode a file descriptor .
6652	Returns a set of all the fonts in the system .
6653	Gets the font fonts .
6654	Get system font names .
6655	Sets up the root element .
6656	Gets the reader for the input source .
6657	Returns an input stream for the given publicid and system id .
6658	Called when a new element has been changed .
6659	Expands all entities in a string .
6660	Lookup an entity .
6661	Restart the stack .
6662	Pop the top element .
6663	Parses the element stack .
6664	Returns the prefix of the given name .
6665	Returns true if the given prefix is foreign .
6666	Removes quotes from a string .
6667	Splits a string into an array .
6668	Determines the element of an element .
6669	Generate the name of a file .
6670	Save instance state .
6671	Unregister resources
6672	This method is called when the main thread is active .
6673	Remove the main thread .
6674	Gets the base matrix for the given bitmap .
6675	Calculates the maximum zoom level .
6676	Returns true if the given editor exists in the editor .
6677	Finds all the spans from the given paragraph
6678	Encode a URL .
6679	Decode query string .
6680	Picks a directory from a directory .
6681	Rotate a bitmap .
6682	Sets the output .
6683	Writes a character to the output stream .
6684	Writes a string to the output stream .
6685	Get boolean attribute .
6686	Escapes a string .
6687	Write namespace declarations .
6688	Write name .
6689	Creates a stream if it does not exist .
6690	Wait for the stream activation .
6691	Complete snapshot snapshot with missing instances .
6692	Wait for the next partition iterator .
6693	Gets a list of records .
6694	Performs an action with retry limit .
6695	Tries to run an action on the AWS API .
6696	Checks if the given bucket is accessible .
6697	Loads the transactions from the database .
6698	Trigger a wildcard expansion .
6699	Replaces all occurrences of a string with a new pattern .
6700	Deletes any characters in the input string .
6701	Adds a report report .
6702	Updates properties with given key .
6703	Returns the configuration properties .
6704	Creates an input stream based on the wro file name .
6705	Convert preProcessors to post processors .
6706	Compiles the given content .
6707	Reload the cache .
6708	Reloads the model .
6709	Returns a new HttpServletRequest that is included in the WroRequest .
6710	Create a transformer for a base name suffix .
6711	On error .
6712	Sends a redirect to the server .
6713	Processes a resource .
6714	Creates a handler that expands the given resource .
6715	Locates an input stream .
6716	Create the WroConfiguration from the servlet context .
6717	Registers change listeners .
6718	Process the request .
6719	Sets the Wro configuration .
6720	Identifies duplicate groups .
6721	Merge the given model .
6722	Locates the given uri .
6723	Apply post processors .
6724	Decorate the resource post processor .
6725	Processes a resource .
6726	Splits the given string into an array of options .
6727	Loads properties from an input stream .
6728	Parse properties from a string .
6729	Create a Wro manager factory .
6730	Persists resource fingerprints .
6731	Returns true if the given group is a target group .
6732	Extend plugin classpath .
6733	Returns the input stream as an input stream .
6734	Initialize the Wro manager factory .
6735	Sets the model transformer .
6736	Compile the HTML template .
6737	Processes a list of resources .
6738	Processes all resources and merges the given criteria .
6739	Runs the preProcessing process .
6740	Apply preProcessors .
6741	Decorate the processor .
6742	Persists the fallback storage .
6743	Returns all fields of the given object .
6744	Rewrite css uri .
6745	Computes the new image location .
6746	Add a model transformer .
6747	Serves the processing of a bundle .
6748	Initializes the aggregated folder path .
6749	Extract variables .
6750	Parse CSS .
6751	Replace all variables in the given map .
6752	Convert a resource to a preProcessor .
6753	Determine if the requested resource type satisfies the given resource type .
6754	Performs gzip response .
6755	Create a PathPatternProcessor for the given processor .
6756	Returns a path pattern that will be excluded from the given processor .
6757	Creates a new resource change handler .
6758	Store a given resource .
6759	Processes a CSS import .
6760	Filter a collection
6761	Returns whether the request should be minimized or not .
6762	Finds imported resources .
6763	Computes the absolute URL for the given resource .
6764	Converts a list of strings into a string .
6765	Get alias list .
6766	Creates the commands .
6767	Evaluates the given reader and closes the result .
6768	Evaluates a script .
6769	Process the bundle .
6770	Checks if the request is a handler .
6771	Creates the request path .
6772	Rename the input stream .
6773	Computes the destination folder for the given resource type .
6774	Process a group .
6775	Check if a change has changed .
6776	Locates a resource with the given uri .
6777	Creates a new object pool .
6778	Returns an InputStream for the given uri .
6779	Open a JAR file .
6780	Extract path .
6781	Checks if the request is minimized .
6782	Adds the given locator to the factory .
6783	Decorate a WroModelFactory .
6784	Adds a string to the import .
6785	Processes the given content .
6786	Log the summary .
6787	Processes a resource .
6788	Gets the read - write lock for the given key .
6789	Creates a process .
6790	Parses the properties into an array of properties .
6791	Get task info .
6792	Gets the compilation command .
6793	Parse header .
6794	Adds no cache headers to the map .
6795	Gets path info from a location .
6796	Gets the servlet path from the given location .
6797	Checks if the request matches the given path .
6798	Loads the pattern with the given key .
6799	Copy a reader to a writer .
6800	Creates a temporary file .
6801	Clean image url .
6802	Sets an attribute .
6803	Generates the data URI for the given input stream .
6804	Generate data URI .
6805	Sets the context .
6806	Unsetting the context
6807	Check group changes .
6808	Called when an exception is thrown .
6809	Checks if the given resource is changed .
6810	Updates the hash for the given group .
6811	Checks if the given resource has the given type .
6812	Creates a process .
6813	Encodes a serializable object .
6814	Processes the groups .
6815	Parse a group element .
6816	Create a group .
6817	Parse a resource element .
6818	Gets the resources for the given group .
6819	Logs to the given logger .
6820	Stop a timer .
6821	Returns a timer with the specified name .
6822	Get a named timer .
6823	Prints the saturation statistics .
6824	Wake up threads .
6825	Updates the state of the processing counters .
6826	Updates the state of the finished jobs .
6827	Updates the counter if it is greater than the given value .
6828	Performs the default visit .
6829	Instantiates the equivalency of the given property .
6830	Ensure that the input loading has finished .
6831	Restore saturation state .
6832	Returns true if the classification is inconsistent .
6833	Retrieves the taxonomy from the entity .
6834	Restores the instance taxonomy .
6835	Gets the evidence .
6836	Initializes the processor .
6837	Invalidate this reasoner .
6838	Gets the to add to the individual individuals .
6839	Removes all individuals from the taxonomy .
6840	Returns an UnsupportedOperationException .
6841	Removes an element from the array .
6842	Removes the element at the specified position .
6843	Returns the position of the element at the specified index .
6844	Returns true if the element is present in the array .
6845	Adds an element to the array .
6846	Throws an exception if the index is negative .
6847	Adds the timer to this timer .
6848	Add time application .
6849	Puts a key into the map .
6850	Removes the entry from the map .
6851	Increases the map .
6852	Shrinks the keys in the map .
6853	Saves the configuration to disk .
6854	Prints all declarations of a given taxonomy .
6855	Collect all entities from a given node .
6856	Clears the set .
6857	Combine multiple hashes .
6858	Combine two lists .
6859	Copies the input stream to an output stream .
6860	Creates and returns a new IntercompletableMonitor that will be used to determine whether or not .
6861	Processes a taxonomy .
6862	Submit an input to the queue .
6863	Append an elkObject to an appender .
6864	Marks the given class as computed .
6865	Adds a direct type node .
6866	Verifies that the given start position matches the given start position .
6867	Returns a set of elements that satisfy the given condition .
6868	Returns a set of elements that match the given function .
6869	Adds an element to the list .
6870	Removes an object from the list .
6871	Adds the statistics of the given class .
6872	Log memory usage .
6873	Set the configuration options .
6874	Shuts down the reasoner .
6875	Prints the header .
6876	Print the given values .
6877	Returns a string consisting of n characters .
6878	Add rule counter .
6879	Writes resource .
6880	Gets the ActionInputParameter .
6881	Gets the property descriptor for the given property path .
6882	Gets the required parameters .
6883	Is single value type?
6884	Adds a rel to the link .
6885	Sets the media type .
6886	Adds the link to the link .
6887	Adds a revision to the link .
6888	Adds a link param .
6889	Expand the URI with the given arguments .
6890	Gets the rels .
6891	Returns the list of revisions .
6892	Returns true if there are no required variables .
6893	Returns the value formatted as a String .
6894	Returns true if the property is hidden or not .
6895	Checks if the given property is included in the input .
6896	Returns whether or not the input property is implicit or not .
6897	Returns true if this request is required .
6898	Gets the default value .
6899	Returns the parameter name .
6900	Gets the property or parameter name .
6901	Determine vocab from mixin .
6902	Gets the query string .
6903	Append the form of the action
6904	Writes an input button .
6905	Append an input or selector .
6906	Adds all action descriptors to this builder .
6907	Returns the full URI template components .
6908	Returns the URI components from the given action descriptor .
6909	Returns the first node with the given name .
6910	Returns the first node with the given rel .
6911	Returns an iterator over the UberNode .
6912	Creates a PersistentHashMap from the given Iterable .
6913	Construct a PersistentTreeMap from an Iterable .
6914	Returns an empty PersistentTreeMap with the specified comparator .
6915	Returns a sorted set of entries in this map .
6916	Returns the last key .
6917	Construct a Xform from an iterable .
6918	Folds all items in the given iterable .
6919	Drop a predicate that takes a predicate as a predicate .
6920	Performs a fold with the given identifier .
6921	Converts a map entry into a Tuple2 .
6922	Matches the given item .
6923	Register all types in the given array .
6924	Returns the element at the specified index .
6925	Appends an element to the list .
6926	Concatenates the given iterable into a PersistentVector .
6927	Create a MutableSet from the given items .
6928	Create a MutableVector from the given items .
6929	Returns an unmodifiable set .
6930	Returns an immutable vector for the given items .
6931	Create an unmodifiable element from an array .
6932	Create a new indentation .
6933	Convert an array of objects to a string .
6934	Creates a lazy reference to the supplier
6935	Simplified method .
6936	Inserts a new item at the specified index .
6937	Returns a copy of the specified array .
6938	Suspend the transaction to the current thread .
6939	Initialize the async operation .
6940	Build a list of service descriptors from the deployment file .
6941	Validates a directory .
6942	Creates an inheritance link between two classes .
6943	Copies all methods from the given source to destination .
6944	Copies all methods from the given array to destination .
6945	Recursively recursively .
6946	Removes the SbbEntity with the current class loader .
6947	Returns whether or not notifications enabled .
6948	Gets all the resources that are referenced by this component .
6949	Installs the service .
6950	Uninstalls a service .
6951	Returns true if the given ra link is referenced by a resource link .
6952	Returns the usage parameters for a given SBBID .
6953	Reset all the usage parameters .
6954	Returns all profiles for the given profile table .
6955	Returns the activity for the given profile table name .
6956	Gets the profile by attribute name .
6957	Display the result .
6958	Convert array array to a string .
6959	Fires an event .
6960	Bind a name to this node .
6961	Unbind name .
6962	Lookup an object by name .
6963	Returns a map containing all the names of the name bindings .
6964	Returns the next event .
6965	Returns true if this trace level is higher than the other level .
6966	Extract a jar from a jar file .
6967	Copies the input stream to the output stream .
6968	Puts an object into the map .
6969	Attaches the given SbEntity to this node .
6970	Removes the given SbEntity from this node .
6971	Returns true if all the Sb entities are attached .
6972	Returns all the Sb entities attached to this node .
6973	Attaches a timer with the given ID .
6974	Removes the given timer from the cache .
6975	Returns true if there are no timers attached .
6976	Get the set of timers .
6977	Adds a name to the namespace .
6978	Remove a name from this context .
6979	Returns true if there is no names bound .
6980	Returns a set of names bound to this node .
6981	Sets the comparison attribute .
6982	Returns the value associated with the given name .
6983	Returns a copy of this node .
6984	Initialize notification info
6985	Send a usage notification
6986	Download a remote DU file from the deployment .
6987	Update the deployed components
6988	Installs the specified unit .
6989	Uninstalls a deployment .
6990	Process the internal deploy .
6991	Show the status of the deployment .
6992	Returns true if logging is enabled .
6993	Returns the logger for the given record .
6994	Returns the set of components that have the given component .
6995	Gets the Sb entity IDs .
6996	Gets the permissions .
6997	Gets the source code sources .
6998	Returns true if the given profile exists in the table .
6999	Removes the profile from the profile table .
7000	Update the configuration properties
7001	Called when the application is active
7002	Called when the application is stopping .
7003	Activate the entity adaptor
7004	Deactivates the entity .
7005	Schedules the end of all activities .
7006	Removes the entity .
7007	Get the resource adaptor interface .
7008	Called when a service is active
7009	Convert an ActivityHandle to an ActivityHandle .
7010	Called when an activity is ended .
7011	This method is used to update a resource .
7012	Verify configuration properties
7013	Called when the resource is stopping .
7014	Called when the object is active .
7015	Unconfigured resources .
7016	Unset the resource adapter context .
7017	Unset the F FaultTolerantContext for this instance .
7018	Build profile attribute map .
7019	Resume the event context
7020	Gets the activity context handles .
7021	Removes the MBean
7022	Get usage MBean MBean .
7023	Decorate the abstract class
7024	Fires an event .
7025	Fires an event .
7026	Returns the GetProfileCached from the SbbObject
7027	Gets the service usage parameter set .
7028	Get abstract methods from class .
7029	Gets all methods from an interface .
7030	Creates the object pool .
7031	Remove an object from the database .
7032	Returns true if the given notification source is owner of the given notification source .
7033	This method is called when an alarm is alive .
7034	Retrieve a usage parameter set by name .
7035	Returns the specs descriptor .
7036	Determine whether the given unit is accepted .
7037	Initialize the deployment
7038	Start the deployment
7039	Stop the deployment
7040	Returns the status of the deployment .
7041	Executes after commit actions .
7042	Executes after commit actions .
7043	Executes after rollback actions .
7044	Executes before commit actions .
7045	Executes before commit actions .
7046	Returns a set of defined tracer names .
7047	Creates a new tracer instance .
7048	Removes the replication data .
7049	Registers the editor .
7050	Process the SARL component .
7051	Returns the object pool .
7052	Create the object pool .
7053	Executes the given activity .
7054	Start an activity .
7055	End the activity .
7056	Checks the preconditions for the given event type .
7057	Fires an event
7058	Generates the concrete class .
7059	Make the getter method .
7060	Convert a string to an object .
7061	Sets the profile ID .
7062	Extracts the message from the result .
7063	Determines if the given object is contained in this entity .
7064	Checks if all child relations in the given collection .
7065	remove all elements from this collection
7066	Returns true if this level is higher than the given level .
7067	Resolve internal state .
7068	Removes all classes from the classpath .
7069	Records a profile call .
7070	Returns the profile object with the specified name .
7071	Activates a profile object on a transaction .
7072	Sets the value of this component .
7073	Generates the concrete activity context interface .
7074	Generate concrete methods .
7075	Sets the value of an activity attribute .
7076	Add a name binding .
7077	Removes all naming bindings from the application context .
7078	Remove a name binding from the cache .
7079	Attach a timer to the cache .
7080	Remove the timer from the cache .
7081	Attaches the given SbbEntity to the activity .
7082	Detaches a SBB entity from the activity .
7083	Gets the sorted set of SbEntityAttachment ids .
7084	Ends the activity context .
7085	Add a deployment .
7086	Gets the external dependencies of this component .
7087	Returns true if the dependency has been satisfied .
7088	Returns true if this unit has been deployed .
7089	Gets the install actions .
7090	Gets the uninstall actions .
7091	Determines if this component is referring to this component .
7092	Close a profile
7093	Gets the object name .
7094	Change the write mode .
7095	This method is called before the profile is set .
7096	This method is called after the profile has been set .
7097	Before getCmpField
7098	Called after getCmp field has been set
7099	Invoked when the management method is invoked .
7100	Called after a management method invocation .
7101	Deletes a directory .
7102	Create default constructor .
7103	Creates the default default default usage parameter set .
7104	Creates and sets the getter method .
7105	Create fire event methods .
7106	Returns the getSbbActivityContext interface .
7107	Adds the given expression to the list of cycles .
7108	Bind a key to the given object .
7109	Rebinds a named object from the specified name .
7110	Decorate the abstract class .
7111	Invokes the given method with the given arguments .
7112	Returns the real field name for the given field name .
7113	Sets the value of a field .
7114	Gets the value of a field .
7115	Sets the profile context .
7116	Initialize the profile .
7117	Unset the profile context
7118	Returns the profile local object .
7119	Fires an event if it is not updated
7120	Gets the ProfileSpperWrapper .
7121	Creates a new class with the given name and interfaces .
7122	Sets the inheritance link to the given class .
7123	Adds an annotation to the class file .
7124	Adds the member values to the annotation map .
7125	Returns an ActivityContext interface for the given activity object .
7126	Gets the class pool .
7127	Sets the deployment unit .
7128	Called when the application is undeployed .
7129	Start an activity .
7130	Checks if the given class is a class or interface .
7131	Returns all abstract methods of an interface
7132	Resolve an entity by its public id .
7133	Checks if tracer is valid .
7134	Handle a single profile query .
7135	Checks dependencies in the deployment .
7136	Create a temporary directory for the deployment .
7137	Gets the entity manager .
7138	Start the application .
7139	Switch to a class loader
7140	Performs a proxied proxy call .
7141	Checks if the transaction is in the current thread .
7142	Convert a time to a TTL .
7143	Returns true if the profile is visible .
7144	Gets the profile object from the current transaction .
7145	Returns a list of logger names that match the given regular expression .
7146	Reset logger levels .
7147	Clear all loggers .
7148	Add a new logger
7149	Add socket handler
7150	Remove a handler
7151	Convert tracer name to log4j logger name .
7152	Synchronize the logging level to the log4j .
7153	Assigns the log4j logging level .
7154	Resets the cache flags .
7155	Send a trace notification .
7156	Checks that a tracer name is valid .
7157	Writes the vendor data to the output stream .
7158	Reads an object from an input stream .
7159	Add a domain classloader to this classloader
7160	Get all the dependencies of this object .
7161	Find a class by name .
7162	Tries to locate a resource by name .
7163	Returns an enumeration of URLs for the given name .
7164	Create and register a profile MBean
7165	Resume a SLETE .
7166	Returns all the Sbids of this component .
7167	Returns all resource adaptor entities for the given component .
7168	Initializes the Slee .
7169	Shutdown the Slee .
7170	Validate transition transition .
7171	Generate named usage parameter setter .
7172	Updates the given field with the given value .
7173	Builds the Polydbc .
7174	Add a value to the query .
7175	Executes a transaction .
7176	Create a region request from a string .
7177	Returns the region of this rectangle .
7178	Resolves the rectangle with the specified dimensions .
7179	Determine the type of on the annotation .
7180	Sets the list of viewing hints for this resource .
7181	Add a view to this resource .
7182	Sets the renderings .
7183	Add a renderings to this resource .
7184	Merges a list of profiles .
7185	Merges this image with another .
7186	Creates a rotation request from a string .
7187	Creates a new SizeRequest from a string .
7188	Initializes the adb bridge .
7189	Get the xml dump of the device
7190	handlePopBox
7191	Pushes the device to the device
7192	Cleans up temporary files .
7193	Pull a dump of data from the device
7194	Get the crash log .
7195	Detaches all whitespace characters .
7196	Prints the given number of spaces .
7197	Tokenizes the text .
7198	Converts a text to a Markdown .
7199	Escape special characters in a text editor .
7200	Adds an exception to the queue .
7201	Closes the statement .
7202	Find the fully qualified name of a given type .
7203	Writes the class to the given file .
7204	Write a bit vector to the output stream
7205	Appends a bit vector to a bit vector .
7206	Reads the data from an input stream .
7207	Gets a list of objects for a given path .
7208	Gets a list of objects from a path .
7209	Sets the klov report object
7210	Add screen capture capture .
7211	Sets a system property .
7212	Create a Selector with a single property .
7213	Selects a selector as a selector .
7214	Extract validation annotation data .
7215	Retrieve all annotations for a given property .
7216	Returns the annotations for the given property .
7217	Gets the PropertyDescriptor for the given name .
7218	Performs a lookup .
7219	Convert a map to an object .
7220	Create a new object from a map .
7221	Convert a value map into an object .
7222	Converts an object to a map .
7223	Convert object to map .
7224	Gets the values of the annotation .
7225	Creates a composite validator .
7226	Initializes the list of Validators and adds them to the registry .
7227	Lookup a validator in the registry .
7228	Apply validation meta data to a validator .
7229	Removes the property from the map .
7230	Sets the current thread .
7231	Returns the number of entries in the cache .
7232	Hash the given object .
7233	Returns default options .
7234	Open database .
7235	Put all values in the database .
7236	Removes all the specified keys from the database .
7237	Searches the keys in the database .
7238	Load all keys from the database .
7239	Closes the database .
7240	Reduces an array of doubles from an array .
7241	Reduces a double array by using an object .
7242	Returns the variance of a double array .
7243	Returns the mean .
7244	Invoke a method access from an object .
7245	Reduces the values of a float array .
7246	Convert a timestamp to a UTC date string .
7247	Returns true if the given object matches the given criteria .
7248	Creates a Criterion with the specified value .
7249	Creates a criteria from a list of objects .
7250	Creates a Criteria object from a JSON string .
7251	Adds integers .
7252	Returns the maximum element in the array .
7253	Returns the first element of the given list .
7254	Returns the last element of a list .
7255	Returns the last element of the specified list .
7256	Sorts the first element in the list
7257	Returns the minimum element of a list .
7258	Returns the minimum element of an array .
7259	Processes an array of maps .
7260	Handles a collection of maps .
7261	Deserializes an object from a map .
7262	Returns the value associated with the given key .
7263	Creates the tool tip with the given name .
7264	Generate label value .
7265	Adds a hexadecimal value to the buffer .
7266	Processes the read queue .
7267	Processes the write queue .
7268	Start the process
7269	Returns a string at the given index .
7270	Sslashes a string starting at start start at start start .
7271	Returns true if the given string is in the given array .
7272	Add a character to a string
7273	Returns a concatenation of the given objects .
7274	Compacts a string .
7275	Split a string .
7276	Splits a string into a string .
7277	Splits a string with the given pipe .
7278	Splits a char array into a string array .
7279	Convert a string to camel case .
7280	Returns true if the given string is inside the given string .
7281	Convert a string to upper bar .
7282	Convert a number to a string
7283	Sort the given sorts .
7284	Sort list .
7285	Get the comparator .
7286	Returns a list of child comparators .
7287	Returns true if the given value is in the given map .
7288	Returns true if two boolean values are equal
7289	Compares two int arrays .
7290	Calculates the sum of integers .
7291	Rounds a number to a power of two bits .
7292	Sort list by fields .
7293	Sort a list of objects .
7294	Sets the value from a map .
7295	Converts an object to a List .
7296	Creates the SQL statement for the given table .
7297	Deep copy .
7298	Returns true if the given object has a string field with the given name .
7299	Checks if a string has a string field with the given name .
7300	Checks if a class has a field with the given name .
7301	Gets the first field from a class .
7302	Gets the sortable field .
7303	Compares this entry with the given entry .
7304	Compares the entry with the same priority .
7305	Sort the given list .
7306	Sorts the specified list by the specified field .
7307	Sort entries in the map .
7308	Sorts the given map into a collection .
7309	Sort keys .
7310	Sorts the given array using the specified sort order .
7311	Creates a comparator for the given field accessor .
7312	Creates a comparator that returns a comparator that can be used to sort objects .
7313	Returns the value associated with the given key .
7314	Gets the value associated with the given key .
7315	Increment the current order .
7316	Evicts the cache if necessary .
7317	Initializes the class if necessary .
7318	Allocate a buffer with the given size
7319	Determines if the processing loop should be done .
7320	Process the input channel channel .
7321	Determines if there are no more than one .
7322	Start monitoring .
7323	Start the process .
7324	Returns the value associated with the specified key .
7325	Gets the main query plan .
7326	Filter a group .
7327	Called by the timer .
7328	Flushes the file to disk .
7329	Cleans up the output stream .
7330	Adds the next buffer to the output stream .
7331	Writes the given buffer to disk .
7332	Initialize the output stream .
7333	Put all values into the store .
7334	Converts a key to byte array .
7335	Reads the validation data for a given property .
7336	Extracts all validators from a string .
7337	Reads validation meta data .
7338	Extracts the validator meta data from the given field .
7339	Extracts all validators from annotations .
7340	Convert annotation data to ValidatorMetaData .
7341	Splits a string .
7342	Splits a string with whitespace .
7343	Splits a string by delimiters .
7344	Remove characters from a string .
7345	Splits the given string into a string array .
7346	Parse a double from a buffer .
7347	Parse an int from a buffer .
7348	Parse a long from a buffer .
7349	Get property by path
7350	Gets fields from an object .
7351	Returns the type of the property .
7352	Injects a property into an object .
7353	Sets the index of a property .
7354	Gets a collection property .
7355	Returns the value of the specified property .
7356	Gets the value of a property .
7357	Initialize this message .
7358	Creates a message for the given key .
7359	Create a message .
7360	Convert message keys to array .
7361	Gets the subject .
7362	Parse text .
7363	Sends a HTTP request .
7364	Deletes a database .
7365	Creates a database .
7366	Returns a list of UUIDs .
7367	Lists resources .
7368	Trigger replication .
7369	Query the value of the query .
7370	Sets the ordering of this view .
7371	Synchronize all documents in the database
7372	Returns a design document from the database .
7373	Gets all design documents from the desk .
7374	Retrieves a DesignDocument from a document .
7375	Saves the replicator document .
7376	Returns the document document .
7377	Returns all Replicator documents .
7378	Removes the document .
7379	Returns the object with the given id .
7380	Returns a list of documents for a given query .
7381	Returns true if the document contains the given id .
7382	Performs bulk operation .
7383	Performs a PUT request .
7384	Performs an HTTP PUT request .
7385	Performs a POST request .
7386	Performs a DELETE request .
7387	Validates response .
7388	Sets the response to the http request .
7389	Adds an attachment .
7390	Returns the changes of the feed .
7391	Read next row .
7392	Convert a double to a string .
7393	Shuts down the resources .
7394	Writes the given byte array to the output stream .
7395	Adds tags to the metric index .
7396	Verify temporary tables .
7397	Gets the project id for the given namespace .
7398	Checks if a request is a query .
7399	Send authentication request .
7400	Gets the request verb .
7401	Generates the subject access review .
7402	Process the request result .
7403	Handles a request failure .
7404	Initializes the configuration .
7405	Find scheduled jobs .
7406	Creates a list of buckets based on the given buckets .
7407	Ends the exchange .
7408	Find all data from the given bucket .
7409	Constructs buckets from a given step .
7410	send a message
7411	send message
7412	Sends a message to the topic
7413	Performs a scan .
7414	Sets the value of a property .
7415	Adds a file to the zip file .
7416	Replaces the zip file with the given text .
7417	Builds the zip file .
7418	Generate metrics for a given component .
7419	Fetch content from content .
7420	Fetch content from order item
7421	Uploads a transformation to a file .
7422	Generate the metrics for the given components .
7423	Creates a new directory .
7424	Ends the parent .
7425	Register an adaptor for a given type .
7426	Registers an attribute with the given type .
7427	Prepare the template .
7428	Adds a new domain object to the sip .
7429	Sets a property .
7430	Adds a child object .
7431	Returns a supplier for a directory .
7432	Copy the contents of the given input stream to the given output stream .
7433	Parse a file .
7434	Parse a reader from a reader .
7435	Returns all elements in a parent element .
7436	Returns a stream of nodes in a given parent element .
7437	Gets the first child element of the given parent element .
7438	Returns a stream containing all child elements of the given parent element .
7439	Validates the given XML schema against the given XML schema .
7440	Main entry point .
7441	Sets content from stream .
7442	Loads content from a resource .
7443	Processes a zip file entry .
7444	Encodes the given string .
7445	Set signature for access key
7446	Removes all whitespace characters from the given array .
7447	Sign signature .
7448	Sets the data to the recorder .
7449	Completes multipart upload .
7450	Sets the favorite notifications .
7451	Adds a notification state .
7452	Returns true if the session has expired .
7453	Gets a notification .
7454	Gets the addreses for a notification .
7455	Returns the Addressee object for a given notification id
7456	Gets the events for a notification .
7457	Gets an event .
7458	Returns the URL for a single notification .
7459	Returns the entry with the given id .
7460	Gets the authentication token .
7461	Returns the number of notifications .
7462	Adds new categories to the list .
7463	Fetches the SSP for the given portlet request .
7464	Creates notification with error message .
7465	Maps the given portlet request to a NotificationResponse .
7466	Map a notification entry .
7467	Attach the actions to the SSP .
7468	Convert a link to a URL .
7469	Retrieve the notification category from the portlet request .
7470	Returns the default notification source for the portlet request .
7471	Performs readNotification .
7472	Reads a notification response from a file .
7473	Retrieve the schoolId from the request .
7474	Extracts the user id from SSP
7475	Invokes the notification .
7476	Gets the attributes map .
7477	Normalize the polynomial .
7478	Returns true if the box is contained within the box .
7479	Computes the closest point to the point
7480	Returns the sign of a point .
7481	Sets the observations from the Se3 .
7482	Sets the rotation .
7483	Converts a polygon into a polygon .
7484	Converts a polygon into a quadrilateral polygon .
7485	Computes the bounding box of the quadrilateral
7486	Computes the rectangle of the polygon .
7487	Computes the center of a quadrilateral .
7488	Computes the average point of a polygon .
7489	Computes the convex hull .
7490	Removes all points from the polygon
7491	Returns the average error error for the given point .
7492	Computes the area between two polygons .
7493	Returns true if the quadrilateral contains a point .
7494	Returns true if the triangle contains a point .
7495	Returns the intersection of two lines .
7496	Returns the intersection of two lines .
7497	Returns the intersection of two lines .
7498	Returns the intersection between two lines .
7499	Computes the intersection between two polygons .
7500	Returns true if the given ellipse contains the given coordinates .
7501	Returns the intersection of two rectangles .
7502	Gets the value at the given index .
7503	Converts a matrix to a quaternion .
7504	Calculates the rotation matrix .
7505	Sets the rotation matrix .
7506	Returns the rotation matrix .
7507	Calculates the rotation matrix .
7508	Sets the rotation matrix .
7509	Convert an Euler to a matrix .
7510	Calculates the rotation matrix .
7511	Sets the slope .
7512	Extracts the rotation coordinate from the motion .
7513	Sets the transform for the initial transformation .
7514	Interpolates the input .
7515	Solves the SVD .
7516	Solves a point on a point .
7517	Returns the length of the side of a side .
7518	Returns true if this point is inside a point .
7519	Converts a Conicuric image into a matrix .
7520	Converts a conicussian general image into a matrix .
7521	Converts a conicola into a Parabola .
7522	Converts a Parabola to another .
7523	Divide p .
7524	Converts a GeoTuple into a matrix .
7525	Converts a matrix to a GeoD tuple .
7526	Sets the parameter vector .
7527	Returns the distance between two angles .
7528	Returns true if the line is intersect .
7529	Returns true if the plane contains a plane .
7530	Returns true if the line is intersect .
7531	Interpolate two angles .
7532	Extracts the quaternion from the QQ
7533	Computes the polygon .
7534	Sets the motion to motion .
7535	Converts a Segment into a homography matrix .
7536	Converts a Segment into a homography matrix .
7537	Computes the axis axis of the axis .
7538	Compares two segments .
7539	Convert a latitude to a unit vector .
7540	Computes the circle between two points .
7541	Returns the radius of a circle .
7542	Returns the closest point to the closest point in the line .
7543	Returns the closest point from a line .
7544	Returns the origin of a plane .
7545	Returns the closest point in the line .
7546	Returns the closest point for a point .
7547	Transforms a Segment .
7548	Transforms a Segment .
7549	Returns true if this quadratic is equal to the given tolerance .
7550	Returns the acute angle between two lines .
7551	Convert a line to a line parameter .
7552	Convert a line into a line .
7553	Converts a line segment from src segment to another .
7554	Converts a LineSegment into a LineSegment .
7555	Convert a point to a line .
7556	Convert a point to a line parameter .
7557	Convert a line parameter to a line .
7558	Convert a line parameter to a line .
7559	Convert a line parameter to a line .
7560	Converts a PlaneNormalization into a plane .
7561	Converts a plane to a plane .
7562	Converts a plane to a plane .
7563	Convert a point to a 3D matrix .
7564	Converts a plane to world .
7565	Returns true if this dimension is equal to the specified tolerance .
7566	Creates a copy of this object .
7567	Returns the norm of the vector .
7568	Computes the tangent of a point .
7569	Returns true if the element is uncountable .
7570	Returns true if the parameter is equal to the given tolerance .
7571	Returns the center of the point .
7572	Returns the acute angle between two lines .
7573	Returns true if the point is positive .
7574	Creates a list of points from a point .
7575	Converts a point to E .
7576	Computes two vectors .
7577	Returns true if the sign is identical .
7578	Sets the position of this object .
7579	Convert an ellipse to an ellipse .
7580	Computes the point of a point .
7581	Computes the angle of a point .
7582	Computes the tangent from an ellipse .
7583	Computes the tangent between two lines
7584	Gets the corner of a corner .
7585	Returns the distance between two lines .
7586	Returns the Euclidean distance between the line and p .
7587	Returns the Euclidean distance between two points .
7588	Returns the distance between the plane .
7589	Returns the distance between the given point .
7590	Returns the Euclidean distance between two lines .
7591	Returns the distance between two lines .
7592	Returns the Euclidean distance between two points .
7593	Returns the Euclidean distance between the specified point and point .
7594	Returns the Euclidean distance from a polygon .
7595	Returns the squared distance from a polygon .
7596	Returns the origin of a line .
7597	Returns the Euclidean distance between the given point .
7598	Returns the distance between the given point .
7599	Adds a transform to the path
7600	Returns the closest point in the line .
7601	Returns the closest point in the ellipse
7602	Computes the polynomial curve .
7603	Creates a random vector .
7604	Computes the perpendicular norm of a plane .
7605	Compares two vectors .
7606	Normalize a vector .
7607	Creates a matrix from a vector .
7608	Convert a matrix to a real vector .
7609	Returns the Euclidean distance between the specified coordinates .
7610	Sets the ellipse .
7611	Normalizes this vector .
7612	Computes the triangle between two points .
7613	Computes the quadrilateral .
7614	Computes the simple polygon
7615	Computes the mean .
7616	Order the points in a list of points
7617	Computes the normal normalization of a point .
7618	Returns true if the polygon is convex .
7619	Multiply a point .
7620	Returns the maximum value .
7621	Returns the Euclidean distance between two points .
7622	Returns the Euclidean distance between two points .
7623	Generate a random point from a plane .
7624	Returns a list of points from a given point .
7625	Returns a list of points from a given point .
7626	Computes the mean .
7627	Calculates the mean .
7628	Invalidates all credentials for the given collection .
7629	Invalidates all cached entries in the cache .
7630	Combines a collection of strings into a set of strings .
7631	Returns a list of features supported by the server .
7632	Gets the list of configuration files .
7633	Returns the features of the server .
7634	Parses the include XML file .
7635	Parse feature manager .
7636	Downloads jsons from a product
7637	Gets a set of Liberty features from a JSON file .
7638	Checks if the list of Open Liberty features are installed .
7639	Determines if the collection contains the given collection ignoring case .
7640	Returns the next product version .
7641	Extracts the symbolic name from a jar file .
7642	Gets the install jar jar jar .
7643	Checks if a file is a replacement jar file .
7644	Extract the version from the file name .
7645	Compare two versions .
7646	Executes product info .
7647	Checks to see if the given artifact is a Spring - boot - boot - version jar file .
7648	Gets the property of a property .
7649	Determines if the file is working in the current environment .
7650	Move back to center .
7651	Compares two objects .
7652	Loads a string from a string .
7653	Throws an exception
7654	Verifies the approval .
7655	Returns a new puzzle with the specified target .
7656	Calculates the distance to the current position of this node .
7657	Prints a formatted message to the console .
7658	Writes a formatted message to the console .
7659	Makes sure that the number of items are not available
7660	Print a variable .
7661	Returns a random integer from a given range
7662	Returns a uniform distribution from a given range .
7663	Returns the number of poisson distribution
7664	Computes the number of elements in a double array .
7665	Prints the distribution
7666	Capitalizes the first character .
7667	Capitalize the first character .
7668	Fixes a path .
7669	Convert a Criteria to a String
7670	Returns token sent to cookie .
7671	Extracts the authorization token from the request .
7672	Extracts the auth token from a cookie list .
7673	Registers Guice binding .
7674	Gets all the permissions from a role entry .
7675	Add a projection to the list
7676	Convert JobInfo to JobDetail .
7677	Convert a trigger to a Trigger
7678	Sets the repeat count interval values .
7679	Sets the start time for the trigger .
7680	Send mail item to queue
7681	Writes the buffer to the output stream .
7682	Initializes the scheduler .
7683	Gets the fields of a class .
7684	Gets the field map .
7685	Returns a response for the given exception .
7686	Configure encryption .
7687	Generates attributes hash from attributes .
7688	Generates a new token string .
7689	Sends a mail item .
7690	Generate strong password .
7691	Change the password .
7692	Returns the user with the given username .
7693	Hashes a password .
7694	Verifies that the account name is valid .
7695	Verifies the password strength .
7696	Provides the search model .
7697	Called when the transaction is successful .
7698	Handles an error .
7699	Starts the transaction .
7700	Configure field by name .
7701	Checks if the service is authorized .
7702	Parse a field .
7703	Gets the response .
7704	Create an equal expression
7705	Create a NOTEqual expression
7706	Create a less than or less than expression
7707	Create a less than or equal to the given value
7708	Create a greater than or equal to the given value
7709	Create a greater than or equal to the given value
7710	Creates a restriction with the given value
7711	Create an IN expression
7712	Adds a namespace to the factory .
7713	Returns a copy of this resource .
7714	Adds a new relation to this resource .
7715	Returns a copy of this resource .
7716	Returns a copy of this resource .
7717	Returns true if the given byte array can be decoded .
7718	Encode a string .
7719	Compares two readers .
7720	Move file to dst .
7721	Tries to create a new file .
7722	Gets the base name of the file .
7723	Add padding .
7724	Returns the short name of a class .
7725	Returns all super types of a given class .
7726	Verify a password .
7727	Reads a string from the system .
7728	Appends a byte to the buffer .
7729	Appends a byte array to the buffer .
7730	Returns a copy of the given array .
7731	Returns a new Fraction .
7732	Subtract two Fraction .
7733	Returns a fraction of this Fraction .
7734	Divides this Fraction .
7735	Returns the maximum value of a long .
7736	Returns the minimum value of a long .
7737	Throws an IllegalArgumentException .
7738	Fetches the Meteo data for the given latitude and latitude and latitude .
7739	Fetches the content of the Meteooo data .
7740	Fetches a Meteooo data from the given latitude and returns it .
7741	Returns a list of point forecast for the given hours .
7742	Finds the nearest forecast for a given date .
7743	Fetches the weather data for the given forecast query .
7744	Create a simple long term forecast .
7745	Create a long term forecast
7746	Creates a new Location object from a string representation .
7747	Fetches information about available data .
7748	Create a wind symbol name for a point .
7749	Returns the Beaufortent level for the given point .
7750	Create a URI from a string .
7751	Returns true if the given date is a sun or not .
7752	Returns the point forecast for the given date .
7753	Gets the best fit forecast for a given date .
7754	Fetches weather data for a given latitude and latitude and latitude .
7755	Fetches the weather data for a given latitude and language .
7756	Executes the database .
7757	Invokes a string .
7758	Acquires an object .
7759	Gets a Referenced object .
7760	Gets a wrapper for a given class .
7761	Gets the configuration for the given class .
7762	Returns true if the configuration is enabled .
7763	Returns an iterator over the delegate class loader .
7764	Returns the decoder for the given bootstrap configuration .
7765	Gets all services for a given interface .
7766	Gets the module for the given interface .
7767	Acquires an input stream .
7768	Returns the size of this DataSource .
7769	Gets the wrapped data .
7770	Returns the component index .
7771	Returns the prefix at the given index .
7772	Indicates whether the compiler is colored .
7773	Sets the regular expression .
7774	Performs loop loop .
7775	Subtracts a subexpression from a subexpression .
7776	Intersects a runtime subexpression from the runtime .
7777	Dispatches a runtime subexpression .
7778	Clones the arcs in the given state .
7779	Recursively recursively .
7780	Marks a subtree .
7781	Compute nfa node
7782	Parse a substring .
7783	Performs a deltraverse .
7784	Generates a non - word sequence .
7785	Clone a word .
7786	Scans a reference number .
7787	Parse a bracket .
7788	Parse a plain text .
7789	create a new lacon
7790	Called by subclasses
7791	Generate a vector .
7792	Gets the color for a character .
7793	Generates a pseudo color .
7794	Performs a subrange of the given state .
7795	Go through all the colors in the given NFA .
7796	Add a colorchain to the color chain .
7797	Removes the colorchain from an arc .
7798	Dump colors .
7799	Sets the start token .
7800	Parse prefixes .
7801	This method is used to process a sequence of characters .
7802	Returns the color for the given codepoint .
7803	Initializes the state set .
7804	Returns the last set of noprogress .
7805	Returns a set of Unicode set for the given character .
7806	Returns the Unicode set for the given class name .
7807	Sort the arcs in order .
7808	Returns a human readable string representation of the flags .
7809	Returns a new state .
7810	Moves all outs from old state .
7811	Moves all insins from old state .
7812	Copies from old state to new state .
7813	Copies all outouts from old state to new state .
7814	Drops a state from a state .
7815	Frees a state .
7816	create a new arc
7817	Determine the state of a state .
7818	Sets the pseudo color colors .
7819	Dump the nfa state
7820	Dumps the state of a state .
7821	Dumps the arcs in the given state .
7822	Dumps the arcs of an arc .
7823	Prints an arc .
7824	Optimize the algorithm .
7825	Determine the flags of this group .
7826	Combine two Arc constraints .
7827	Clean up state .
7828	Marks the given state as reachable .
7829	Marks the given state as reachable .
7830	Removes empty empty empty state .
7831	Moves an arc to an empty state .
7832	Gets the rule parameters .
7833	Gets the interpreter plugins .
7834	Gets the report plugins .
7835	Get the rule selection .
7836	Run the command line .
7837	Returns the error message .
7838	Gather standard options .
7839	Gathers tasks from the given task factory .
7840	Gets the task names .
7841	Interprets the command line .
7842	Gets the command line .
7843	Executes a task .
7844	Read properties from properties file .
7845	Prints usage .
7846	Gets the home directory .
7847	Creates the plugin class loader .
7848	Returns a set containing all the ids contained in this cell .
7849	Returns a set of ids that intersects with the specified coordinates .
7850	Returns the URI for the given target .
7851	Add a route to the router .
7852	Returns the number of routes .
7853	Add a route to the router .
7854	Add a route to this router .
7855	Add route .
7856	Returns true if any of the given request path is matched .
7857	Returns the equality of the given property .
7858	Get store file name .
7859	Compare two folders .
7860	Compares two entries .
7861	Compare two Bookmarks .
7862	Sets the servlet class .
7863	Returns a list of dependency dependencies .
7864	Finds a class by its name .
7865	Parse authorization header .
7866	Returns a new instance of ProtectedFunctionMapper .
7867	Maps a method to a class .
7868	Gets the mapping for a function .
7869	Resolve a function .
7870	Sets the values of this object .
7871	Resolve a variable by name .
7872	Parse a file .
7873	Parse a jar file .
7874	Parse tag files from tag file .
7875	Processes the given JSP document using the given JSP file .
7876	Create a Compiler instance
7877	Get a resource as a stream .
7878	Calculates the last modification timestamp .
7879	Determine the class loaders .
7880	Checks if the given classloader is a parent class loader .
7881	Start loading with the given name
7882	Read the stream header .
7883	Gets a pagination result .
7884	Creates a MetaKey from a string .
7885	Fill the requirements
7886	Get the TagFileInfo for this tag .
7887	Parse the implicit tld .
7888	Gets checksum for a file .
7889	Get size of file .
7890	Validates the channel name .
7891	Seeks to the input stream .
7892	Locates the block at the given position .
7893	Get a list of Maven artifacts
7894	Updates the state of the opt .
7895	Calculates the amount of bytes for the first byte
7896	Calculates the long list of longs .
7897	Calculates the normal price for the given position .
7898	Throws an exception .
7899	Throws an exception .
7900	Scans jars in web .
7901	Scans the tag library for a tag .
7902	Add a new JspServletWrapper .
7903	Gets the parent class loader .
7904	Set a bytecode .
7905	Returns the birth time for the given name .
7906	Saves the bytecode for a given class name .
7907	Compile all jsps files .
7908	Initialize the classpath .
7909	Start the background thread .
7910	Stops the thread .
7911	Run the compiler .
7912	Finds channel instance by name .
7913	Finds a channel by its name .
7914	Updates the deploy group cache .
7915	Returns a list of deployments .
7916	Copies the given input stream to the output stream .
7917	Parse the content of a JSP reader .
7918	Parse the attributes from a JspReader .
7919	Parse quoted string .
7920	Add include directives
7921	Parse the named attribute and body .
7922	Add an attribute .
7923	Adds a child node to this node .
7924	Returns an iterator over the attributes .
7925	Finds all children of this node .
7926	Returns an iterator with the given name .
7927	Returns the base coordinates .
7928	Returns the alias for the given variable name .
7929	Sets thread thread .
7930	Unset the thread
7931	Finds a new PrintStream .
7932	Write optional field .
7933	Write a field to a StringWriter .
7934	Adds an element to the parent element .
7935	Adds the first element to the parent element .
7936	Writes the BodyContent to a Writer .
7937	Sets the writer .
7938	Allocates the buffer .
7939	Maps the declarations to the given page .
7940	Gets the same parent .
7941	Registers a storage provider .
7942	Streams an input stream from the data store .
7943	Display a monitor .
7944	Check if the request is authenticated .
7945	Finish output stream .
7946	Creates a Gson Graph instance .
7947	Encode the symbol .
7948	Returns an unmodifiable map of meta data .
7949	Get the Throwable from the request .
7950	Checks if the check is a checkum .
7951	Finishes the stream .
7952	Returns the exception .
7953	Evaluate an EL expression .
7954	Creates the prefix from osgi properties .
7955	Check if a file is XML .
7956	Parses the taglib file and returns the tag info
7957	Loads the tag file .
7958	Removes proto type files from the output vector .
7959	Main entry point .
7960	set uri .
7961	Scan all the files in the given base directory
7962	Locates the uri root .
7963	Initializes the system class loader .
7964	Moves the next position in the chain .
7965	Returns true if this scanner matches the given string .
7966	Checks if the given string matches the optional whitespace .
7967	Skip characters until the specified character is reached .
7968	Skip escape until escape is found .
7969	Skip the end of the end of the tag .
7970	Parse a token .
7971	Removes the current file from the stack .
7972	Returns an unclassified coordinates .
7973	Filter the aspect information for a given predicate .
7974	Gets the id ids for the given aspect information .
7975	Sets the schema resource .
7976	Sets the DTD resource prefix .
7977	Encode a prefix .
7978	Convert a node to a tree .
7979	Merges the errors from the given BindingResult .
7980	Initialize binder .
7981	Scans the ChannelAspectFactory and returns a map of ChannelInfo instances .
7982	Unqualified method .
7983	Invokes a custom tag .
7984	Gets a byte array from the buffer .
7985	Returns an array of ints .
7986	Converts a collection of artifact results into Aether result .
7987	Gets the resource as a stream .
7988	Validates the tag library .
7989	Pushes a stream to the stream .
7990	Returns the encoding of the given jar file .
7991	Scan XML declaration .
7992	Reports a fatal error .
7993	Get the real path of a file .
7994	Gets a URL for a resource .
7995	Gets the resource as stream .
7996	Returns the paths of the given path .
7997	Logs a message .
7998	Add a filter .
7999	Gets the buffer size .
8000	Get memory usage .
8001	Sets the preset dictionary .
8002	Move the compressed data to the buffer .
8003	Fills the sliding window .
8004	Process pending bytes .
8005	Returns the length of the match with the specified distance .
8006	Gets the length of the match .
8007	Verifies that this matches the given match .
8008	Moves the read position .
8009	Recycle the response .
8010	Flush the buffer .
8011	Clears the buffer .
8012	Flush the output stream .
8013	Closes the stream .
8014	Write string .
8015	Allocates char buffer .
8016	Throws a javac error .
8017	Returns the key from the given meta data .
8018	Generate the class file .
8019	Compile the page .
8020	Deletes the generated files .
8021	Initialize java compiler
8022	Determine if the given path is in the system .
8023	Quote a character .
8024	Generate declarations .
8025	Compile the list of tag handler pool .
8026	Generate the XML log .
8027	Generate common postamble .
8028	Generate the postamble .
8029	Generate the page .
8030	Generate handler attributes
8031	Reads properties from an input stream .
8032	Export channel .
8033	Validate the tag library
8034	Get the handler for the given class .
8035	Parse a string representation of an expression .
8036	Selects the previous property group .
8037	Checks if the given URI is a JSP page
8038	Print a comment .
8039	Prints a string .
8040	Prints a string .
8041	Print a single line .
8042	Convert an expression to an XML expression .
8043	Validates the given scope .
8044	Escape a string .
8045	Validate the expressions
8046	Get the class name for the tag file .
8047	Convert a path to a Java package name .
8048	Splits a path into a string .
8049	Converts a Java identifier to a Java identifier .
8050	Makes a character in a string .
8051	Checks if the given string is a Java keyword .
8052	Adds a property to the map .
8053	Convert a modifier to a string .
8054	Returns a sorted set of metadata values .
8055	Runs the model .
8056	Gets the basename of a file .
8057	Puts a value into the cache .
8058	Loads a database from the database .
8059	Build metrics collection .
8060	Resolves a number .
8061	Writes a string to a CodedOutputStream .
8062	Returns the TTL for the given rollup .
8063	Create prepared statements .
8064	Track delayed metrics .
8065	Track delayed aggregated metrics .
8066	Get an unversioned integer from the stream .
8067	Put an unversioned Double or longed Double .
8068	Get all properties .
8069	Creates the container .
8070	Schedules all slots for this shard .
8071	Clear the slot from the running slot .
8072	Adds a listener to the emitter .
8073	Removes an event listener .
8074	Removes an event .
8075	Emit an event for the given event .
8076	Returns all registered listeners for the given event .
8077	Returns the unique name of the cluster
8078	Appends a rollup event to the stream .
8079	Parse a file name .
8080	Starts the server .
8081	Get the RollupType for the given scale .
8082	Get IOContainer from configuration .
8083	Updates the TTL map for the given granularity .
8084	Compute the maximum lengths for each output .
8085	Formats the headers in a comma - separated format .
8086	Formats the maximum values in the given array .
8087	Register metrics .
8088	Sets the thread pool name .
8089	Adds a metric to the metric index .
8090	Get complete metric names .
8091	Gets tokens from locator .
8092	Performs an operation on the Datastore .
8093	Calculates the granularity from the given intervals .
8094	Calculates the granularity of a given number of points .
8095	Sets the server time .
8096	Gets unique hosts .
8097	Get the maximum number of connections per host .
8098	Gets the metric column families .
8099	Insert metrics .
8100	Insert metrics .
8101	Gets the locators for the given granularity .
8102	Fetch metric names from Elasticsearch .
8103	Returns the regex that matches the given query string .
8104	Start the storage manager .
8105	Stops the file upload .
8106	Returns true if the given locator is currently in the batch layer .
8107	Determine if the given locator is currently active .
8108	Determine if the given locator is currently active .
8109	Returns true if the specified locator is a delayed locator for a given slot .
8110	Sets the locator for a given item
8111	Creates a map that maps the specified granularity to the specified range .
8112	Returns a range of ranges for the given granularity .
8113	Inserts the given collection .
8114	Insert metrics into a column family .
8115	Determine if the metric is delayed .
8116	Gets the bound statement for a given metric .
8117	Gets metadata values .
8118	Returns the serializer for a given type .
8119	Checks if the given headers are valid .
8120	Checks if the given headers is valid
8121	Inserts a batch of objects to Elasticsearch .
8122	Validates the aggregated metrics .
8123	Performs the check .
8124	Returns an instance of the Extractor
8125	Returns true if the operating system matches the given name .
8126	Starts the archive .
8127	Stops the RabbitMQ process .
8128	Gets the default default instance .
8129	Add a list of ice servers
8130	Add ice servers .
8131	send a message
8132	Send message to all peers
8133	Gets the value of the deiterecheme property .
8134	Gets the value of the userDefined property .
8135	Gets the value of the userDefinedAnyField property .
8136	Sets the value of the apiFolder property .
8137	Gets the value of the multimediaAnnotation property .
8138	Gets the value of the status property .
8139	Gets the status indicator property .
8140	Gets the value of the statusHP property .
8141	Gets the value of the importModus property .
8142	Gets the value of adddddddd .
8143	Gets the waehrung property .
8144	Gets the value of the bodenbelagagag .
8145	Sets the value of the region property .
8146	Sets the value of the area property .
8147	Sets the value of the address property .
8148	Sets the value of the description property .
8149	Sets the value of the rentCollection property .
8150	Sets the value of the surnameAds property .
8151	Sets the value of the phone1 property .
8152	Sets the value of the phone2 property .
8153	Sets the value of the contactName property .
8154	Sets the value of the phoneInfo property .
8155	Sets the value of the main email property .
8156	Sets the value of the EmailEmail property .
8157	Sets the value of the externalId property .
8158	Sets the value of the agentId property .
8159	Sets the value of the Ener property .
8160	Sets the value of the jahrgang property .
8161	Sets the value of the gbaederr property .
8162	Sets the value of theBueroType property .
8163	Checks if the given value is numeric .
8164	Sets the value of gebietee property .
8165	Sets the value of the gruppe property .
8166	Sets the value of the agent property .
8167	Gets the value of the property property .
8168	Sets the value of the standoff property .
8169	Gets the value of the userDefine property .
8170	Sets the value of zeitin .
8171	Gets the value of the zimmer property .
8172	Gets the value of the haus property .
8173	Gets the value of the property .
8174	Gets the value of the Gravgewer .
8175	Gets the value of the property .
8176	Gets the value of the Sonstige property .
8177	Gets the value of the zinsinetter property .
8178	Gets the value of the terrain property .
8179	Sets the value of uffag .
8180	Sets the value of the wennungief property .
8181	Gets the country iso2 country code .
8182	Gets the country ISO country code from the ISO3 country .
8183	Gets the country code from a country .
8184	Gets the country ISO country code from iso2 .
8185	Gets country name .
8186	Translates country name .
8187	Gets the value of the annotation property .
8188	Sets the value of the category property .
8189	Gets the value of the pdf property .
8190	Sets the value of the Aktion property .
8191	Sets the value of the realstate property .
8192	Sets the value of pethode .
8193	Downgrades the OpenImmo document to a new version .
8194	Updates the OpenImmutableDocument version .
8195	Gets the value of the content property .
8196	Gets the field names .
8197	Sets the value of the blick property .
8198	Sets the value of the pausmeter property .
8199	Sets the value of the monatsmetrymole .
8200	Gets the parkplator property .
8201	Sets the value of the lastenaufugger property .
8202	Sets the zustand property .
8203	Gets the value of the property .
8204	Handle validation event .
8205	Dump this record to a writer
8206	Returns the value at the given position .
8207	Print the contents of this record .
8208	Sets the value at the given position .
8209	Sets the value of the ctype property .
8210	Sets the value of the hath property .
8211	Gets the value of the einjection property .
8212	Sets the value of the keller property .
8213	Sets the value of the grundst property .
8214	Sets the value of the gchlch attribute .
8215	Sets the value of the HallenType property .
8216	Gets the value of the werhaler property .
8217	Gets the value of teilunger .
8218	Updates the version of the OpenImmoleDocument .
8219	Gets the value of the probe property .
8220	Gets the value of the wunschch property .
8221	Sets the value of the artwork property .
8222	Sets the value of the modus property .
8223	Gets the value of the emailSonstag property .
8224	Gets the value of the telSonstige property .
8225	Sets the value of the handler property .
8226	Downgrades the OpenImmo document to a new version .
8227	Sets the value of the apiTrust1 property .
8228	Sets the value of the apiTrust2 property .
8229	Sets the value of the apiTrustField property .
8230	Gets the value of the row property .
8231	Sets the value of the dinzipped property .
8232	Gets the value of the atom property .
8233	Gets the value of the objectKategorieType property .
8234	Gets the value of the object property .
8235	Gets the haus category property .
8236	Gets the value of theusststungsets property .
8237	Gets the value of the vermarks property .
8238	Gets the value of the interessent property .
8239	Sets the value of wert .
8240	Sets the value of ackerland property .
8241	Sets the value of bauerstungs .
8242	Sets the value of the bootsstaende property .
8243	Sets the value of the property .
8244	Sets the value of the camping property .
8245	Sets the value of the object property .
8246	Sets the einameter property .
8247	Sets the einfield value .
8248	Sets the value of einzelFinder .
8249	Sets the value of the bag property .
8250	Sets the garten property .
8251	Sets the value of the gastronome property .
8252	Sets the value of the gewer property .
8253	Sets the value of the hotel property .
8254	Sets the value of the industry property .
8255	Sets the value of the einmeunging property .
8256	Sets the value of the kleerewer property .
8257	Sets the value of the lager property .
8258	Sets the value of the ehrfamihaus .
8259	Sets the value of the object property .
8260	Sets the value of the parkhaus property .
8261	Sets the value of the producer property .
8262	Sets the value of the Reihenhaus property .
8263	Sets the value of the stellaaset property .
8264	Sets the value of the velocity property .
8265	Sets the value of the WBD property .
8266	Sets the value of the annotation property .
8267	Gets the value of the wohnung property .
8268	Gets the value of the grundstue property .
8269	Gets the value of the einzelset property .
8270	Gets the value of the HallenagerProperties property .
8271	Gets the value of the parken property .
8272	Gets the value of the freizeitemit .
8273	Gets the value of the objekuator .
8274	Gets the value of the StellPlacerRestart .
8275	Sets the maximumDurations property .
8276	Gets the value of the feature property .
8277	Sets the value of the zimmertype property .
8278	Updates the OpenImmoleDocument version .
8279	Sets the value of the deine angle property .
8280	Sets the value of the erwwaer property .
8281	Sets the value of solarheit property .
8282	Sets the value of pellezunging property .
8283	Sets the value of the gas property .
8284	Sets the value of the oel property .
8285	Sets the value of the ferner property .
8286	Sets the value of the strom property .
8287	Sets the value of kohle property .
8288	Generates a random string .
8289	Generates a random string of letters .
8290	Generates a random number of characters .
8291	Gets the wennungungor property .
8292	Sets the value of the ledzer property .
8293	Sets the value of the object property .
8294	Gets the value of the feed property .
8295	Sets the value of the mobert property .
8296	Gets the value of the serviceleifen .
8297	Sets the value of the subAdministrativeArea property .
8298	Sets the value of the city structure property .
8299	Sets the value of the locality structure property .
8300	Downgrades the version of the OpenImmoDocument .
8301	Updates the OpenImmo document version .
8302	Sets the value of the latitude property .
8303	Gets the value of the field property .
8304	Updates the document version .
8305	Gets the value of the adType property .
8306	Sets the value of the payload property .
8307	Sets the value of Placement property .
8308	Gets the value of the datenator .
8309	Gets the value of the kliminlage .
8310	Gets the value of the image property .
8311	Sets the priceType property .
8312	Sets the value of the new development availability property .
8313	Sets the value of the directions property .
8314	Sets the value of the co2 rating property .
8315	Sets the value of the energy rating property .
8316	Sets the value of viewingDetails property .
8317	Sets the property of the property .
8318	Sets the value of pictures property .
8319	Sets the value of the probe bar attribute .
8320	Performs an upgrade .
8321	Sets the value of the parken property .
8322	Sets the value of the alter attribute .
8323	Sets the value of the freizeType property .
8324	Sets the value of the teleonart property .
8325	Sets the value of the emailart property .
8326	Sets the value of the outlook property .
8327	Sets the value of the option property .
8328	Creates a simple simple simple field .
8329	Gets the value of the Fehler .
8330	Sets the value of the Erlangeckt .
8331	Gets the value of the stpSonstag property .
8332	Gets the value of the value of the value property .
8333	Sets the minimumDurations property .
8334	Sets the value of the zinsType property .
8335	Gets the value of the photo property .
8336	Sets the value of the metadata property .
8337	Sets the value of the projects property .
8338	Sets the properties of the feed property .
8339	Downgrades the given document to another version .
8340	Upgrade the given document .
8341	Gets the value of the immulie property .
8342	Gets the value of the object property .
8343	Gets the value of the FehlerList .
8344	Gets the value of the status property .
8345	Sets the value of SonstigeType property .
8346	Sets the value of the dinzzu property .
8347	Gets the value of the danzen property .
8348	Gets the value of the distanzen property .
8349	Returns true if the given exception is compatible with the declared exceptions .
8350	Sets the bindings .
8351	Bind a prefix to a namespace URI .
8352	Remove a binding .
8353	Returns true if the given string is an open tag .
8354	Consumes a comment token .
8355	Consumes the beginning of a comment .
8356	Returns the index of the given token .
8357	Initialize logging .
8358	Start a namespace mapping .
8359	Adds an iterator to the composite .
8360	Adds an option .
8361	Add a string option .
8362	Add an integer option .
8363	Add a long option .
8364	Add a double option .
8365	Add a boolean option .
8366	Parse the command line arguments .
8367	Creates a new instance of the given class .
8368	This method is called by the throttle limit .
8369	Sets the target object .
8370	Initializes the object .
8371	Finds a matching method that matches the given parameter .
8372	Convert an integer to a string .
8373	Serializes an object to a byte array .
8374	Deserializes a byte array .
8375	Returns the child element with the given name .
8376	Get the text value of a child element .
8377	Gets the child elements of an element .
8378	Returns true if the node matches the desired name .
8379	Returns true if the node matches the given node name .
8380	Sets the length of a string .
8381	Monitor a release listener .
8382	Add a listener to the registry .
8383	Stop monitoring thread .
8384	Calculates the phone number for the given mobile number .
8385	Start a prefix mapping .
8386	Ends a namespace mapping .
8387	Adds a callback to the future .
8388	Parse the jar file .
8389	Get the text color of the item
8390	Sets the values .
8391	Get the color of the selected item
8392	Sets the text size .
8393	Gets the x value of the x in bounds .
8394	Gets the introspection from the classpath .
8395	Gets the keywords in the servlet library .
8396	Get arguments for a keyword
8397	Returns the documentation for a keyword .
8398	Starts a remote server .
8399	Stops the remote server .
8400	Starts the remote server .
8401	Convert a file to a JSON string
8402	Convert a file to a JSON string .
8403	Converts an input stream to a JSON string .
8404	Converts properties to JSON .
8405	Convert properties to json .
8406	Converts the given values into a JSON string .
8407	Converts a set of properties to a String .
8408	Convert properties to json .
8409	Returns the radius of a shadow .
8410	Builds a new ApacheCspFetcher .
8411	Find the issuer for the certificate .
8412	Executes the Markdown .
8413	Preprocess Markdown files from the input directory .
8414	Substitute variables in a template .
8415	Extracts the title header from the list .
8416	Adds the title to the HTML file .
8417	Replace variables .
8418	Updates the relative paths in the HTML file .
8419	Copy files from a directory to another directory .
8420	Checks if the given path is needed .
8421	Wrap the content of a slider .
8422	Fills up up up up the view .
8423	Fade the sliding down down the view .
8424	Calculate the percentage
8425	Called when the view has changed
8426	Gets the launch intent .
8427	Launch the activity .
8428	Get todo list .
8429	Get FactSheet list .
8430	Download file from response .
8431	Build HTTP client .
8432	Create access control entity
8433	Update data model .
8434	Create a full export
8435	Get a list of export resources
8436	Sets the token provider .
8437	Sets the client credentials .
8438	Process a multipart request .
8439	Get a list of bookmarks .
8440	Adds the given graph to the graph
8441	Writes the given graph to the given graph .
8442	Sets the rulesets .
8443	Closes the client .
8444	Execute a SELECT statement .
8445	Create a Dataset graph
8446	Limit the number of threads
8447	Resize the geometry .
8448	Sets the rotation .
8449	Sets the gravity .
8450	Strip profiles .
8451	Sets the text with the specified style .
8452	Adds a source to the image .
8453	Adds an image to the image .
8454	Parse command line arguments .
8455	Prints usage information for a given object .
8456	Extracts the time unit from a string .
8457	Parses the given target object into a Java Bean .
8458	Executes a slide .
8459	Executes a slide .
8460	Interpret the given PPTXML file .
8461	Sort a list of rectangle by size .
8462	Renders the given text .
8463	Gets the xml xml file for a slide .
8464	Determine if the mouse event is in the screen .
8465	Sets the selector that intersect the specified element with the specified height .
8466	Executes the given message .
8467	Executes the given message .
8468	Returns a file with the given name .
8469	Gets a temporary directory .
8470	Create a log value map .
8471	Log a message with a TRACE level .
8472	Log a TRACE event .
8473	Log a message .
8474	Log a message with a debug event .
8475	Logs a message .
8476	Logs a message with an INFO level .
8477	Record an exception with a default exception .
8478	Log a message .
8479	Log a message with a warning level .
8480	Logs a message with an error .
8481	Logs an error with an error .
8482	Add a context to the context .
8483	Serialize Steno event
8484	Write key - value pairs .
8485	Serializes the throwable to a JSON representation .
8486	Returns the log value .
8487	Gets the caller data .
8488	Encode a value to a given encoder .
8489	Create a database .
8490	Remove mappings .
8491	Parse save attributes .
8492	Save the data to the cell .
8493	Refresh sheet from context
8494	Parse the save attribute string .
8495	Get save attributes from a row
8496	get save attribute from list
8497	Sets the save attributes in the row .
8498	Sets save attributes for a sheet .
8499	Sets save attributes for a row
8500	Prepare the context and restore the data from a cell
8501	Format a number .
8502	Add shift attributes .
8503	Sets the workbook .
8504	Get the workbook workbook .
8505	Returns the formula evaluator .
8506	Recalculates the maximum column count .
8507	Loads a WebSheet from the input stream .
8508	Loads a web sheet .
8509	Load work sheet by name .
8510	Export this export .
8511	Do the save .
8512	Do submit submit .
8513	Populate the component .
8514	Get the current sheet configuration .
8515	Reads the serialized document .
8516	Returns the locale for the given component .
8517	Get the picture .
8518	Get the cell helper .
8519	Get the picture helper .
8520	Returns the validation handler .
8521	Get the chart helper .
8522	Convert shared form formulas to the shared form .
8523	Helper method to convert a Ptg array to a row .
8524	Helper method to convert a list of PtgList to a watch list .
8525	Creates a single Ptg array for a single primitive .
8526	Gets the serialized row list from the current row .
8527	Returns a list of serialized rows
8528	Fix a reference to a refRelative row .
8529	Builds a dynamic row for a reference .
8530	Build a dynamic row for a area .
8531	Get the background color from a plot area .
8532	Get a color from a shape .
8533	Find the automatic fill color .
8534	Gets the XColor from the schema color .
8535	Convert RGB color to XSS color
8536	Gets the XColor with the specified index .
8537	Convert XSSF color to RGB color .
8538	Convert XSSF color to a tuple
8539	Get the background color from a cell
8540	Gets the component name from a component .
8541	Populate the attributes for the given component .
8542	Match param meter
8543	Sets a property on an object .
8544	Gets the value of a property .
8545	Sets the control attributes .
8546	Find validation attributes .
8547	Sets the fonts for the given cell .
8548	Setup the FacesCell
8549	Sets the picture style for the given cell .
8550	Initialize the chart map .
8551	Get the chart title
8552	Sets the style for a chart
8553	Create a 3D chart .
8554	Setup the bar style
8555	Initialize the XSSF file map .
8556	Gets the chart id from a chart .
8557	Initialize the anchor map
8558	Generate a single XSSF chart
8559	Transform a collection object into a collection object .
8560	Gets the full name from the row .
8561	Rebuild the upper level formula .
8562	Setup the upper level for a cell .
8563	Builds the shift formula .
8564	Gather rows by full name .
8565	Change index number .
8566	Change the final length of an upper level .
8567	Change index number in hidden column
8568	Sets the full name in the row .
8569	Gets the original row number from the hidden column .
8570	Sets the original row number in the row .
8571	Finds parent rows from shift map .
8572	Finds the row mappings from the given key .
8573	Finds an item in a collection .
8574	Builds the current configuration from the source sheet .
8575	Returns true if the given row index is a static row .
8576	Returns true if the given row is a static row reference .
8577	Replace expression with cell name .
8578	Index merged regions .
8579	Get a list of skipped regions from a sheet
8580	Adds the skip cell to the list of cells in the list .
8581	Build sheet comment .
8582	Builds a cell comment from a cell .
8583	Build the sheet configuration .
8584	Gets the sheet configuration .
8585	Build form command from sheet configuration .
8586	Checks if the last cell is blank .
8587	Build sheet .
8588	Checks the last row .
8589	Builds command list from sheet comments .
8590	Sets the parent command .
8591	Checks if there is one command in the list .
8592	Match command to sheet config .
8593	Copy template .
8594	Build command list .
8595	Process a method line .
8596	Process command line .
8597	Move comment to map .
8598	Create config command .
8599	Build map attribute map .
8600	Get sheet configuration from configuration .
8601	Set footer .
8602	Sets the body of a sheet configuration .
8603	Set header .
8604	Delete a row .
8605	Removes the ranges from the shift map .
8606	Find full name list .
8607	Gets the first command from parts .
8608	Insert an empty object into the context .
8609	Deletes an object from the context .
8610	Prepare collection data in a collection .
8611	Index command range .
8612	Checks if a row is allowed .
8613	Inserts each template into the template
8614	Evaluate normal cell .
8615	Evaluate user formula .
8616	Checks if the string is a user formula .
8617	Sets the comment .
8618	Evaluates a script .
8619	Remove all rows in the given sheet .
8620	Removes a single row from a sheet .
8621	Removes the cached cell for the given row .
8622	Remove rows from the body .
8623	Loads the picture from the current cell .
8624	Loads the chart view .
8625	Assembles the new value .
8626	Gets the cell value of a cell .
8627	Get the cell value from a cell
8628	Returns the string value for the poi cell
8629	Gets the string representation of the cell .
8630	Set a cell value
8631	Sets the string value of a cell .
8632	Sets the value of a cell .
8633	Sets the value of a cell .
8634	Sets the numeric value of a cell .
8635	Copy rows from source sheet to dest .
8636	Copy a single row .
8637	Copy a cell .
8638	Copy cell value from source cell .
8639	Copy the cell style .
8640	Clone a comment .
8641	Create a comment anchor .
8642	Creates or adds a comment to a cell .
8643	Match comment settings .
8644	Get the VML drawing from a cell .
8645	Get a CT shape from a cell .
8646	Gets the cell style from a source cell .
8647	Convert a poi cell .
8648	Gets the row column index from a component .
8649	Gets the initial row initial rows .
8650	Gets the FacesRow from the given row .
8651	Gets the FacesCell from the given body .
8652	Gets the poi cell from a sheet .
8653	Gets the Skey from a poi cell .
8654	Get the tie cell in the map .
8655	Gets the current data context name .
8656	Evaluates the given expression and returns the result .
8657	Evaluates the expression .
8658	Sets the row index .
8659	Removes a row from source .
8660	Merge row mapping from another row .
8661	Recovers all serial rows from a sheet .
8662	Get the chart type
8663	Convert a string to a BasicStroke .
8664	Initializes the chart data from XSSFF .
8665	Set up chart data .
8666	Initialize the XSSFF anchors map .
8667	Initialize XSSFFFairs map for a sheet .
8668	Gets the chart id from the chart .
8669	Gets the chart id from a child node .
8670	Build each item in the collection
8671	Save the data in this cell .
8672	Recalculates the formula .
8673	Get a POI cell from a tab .
8674	Returns the cell with the given row index .
8675	Restore data context .
8676	Get last collect collection object .
8677	Determine if the full name is needed .
8678	Restore data context .
8679	Shift row ref .
8680	Sets the first row reference .
8681	Sets the last row .
8682	Builds the cells for a row .
8683	Builds a single cell .
8684	read object from stream
8685	Build the categories list .
8686	builds the series in the chart
8687	Build chart series .
8688	Gets the color list from a list of dpts .
8689	Gets the dptt from a list of dptt .
8690	set the command index map
8691	Gets the pictures map from a workbook .
8692	Get a map of all the pictures from a sheet
8693	Index a picture in a map .
8694	Generate style style .
8695	Generate the style for a chart
8696	Gets the anchor size .
8697	Gets the pattern .
8698	Gets the chart .
8699	Recovers this cell .
8700	Get the row style for a cell .
8701	Returns the font style for the given cell .
8702	Gets the cell font color .
8703	Returns the decoration for the given font .
8704	Get the style of a cell
8705	Gets the column style .
8706	Get the text style for the cell .
8707	Gets vertical alignment .
8708	Calculates total height .
8709	Sets the style for the given cell .
8710	Get the input type from cell type
8711	Returns a set of all the paths for the given path .
8712	Gets a resource as a stream .
8713	Removes prefix from resource .
8714	Evaluate the input string .
8715	Returns the bean with the given name .
8716	Join short array .
8717	Rounds a double to a given number .
8718	Get the tab type .
8719	Gets the style of the tab .
8720	Returns the default date pattern .
8721	Gets the decimal separator by default locale .
8722	Gets the thousand separator by default locale .
8723	Sets the tie command aliases list .
8724	Build the list of functions that should be used to change events .
8725	Build watch list for given cell .
8726	Add a row to watch list .
8727	Checks if the given string is a command string .
8728	Parse the widget widget attributes .
8729	Gets attribute key in map .
8730	Parse validation attributes .
8731	Determine the pair position of the pair .
8732	Parse command attributes .
8733	Parse cell attributes .
8734	Parse validation attributes .
8735	Splits an attribute string .
8736	Parse special attributes .
8737	Process calendar attributes .
8738	Process select item attributes .
8739	Gather special attributes .
8740	Parse a comment to map .
8741	Find the first non - cell name position in the string .
8742	Remove characters from input string .
8743	Returns the Excel column name for the Excel column .
8744	Convert column name to integer .
8745	Gets the cell by name .
8746	Convert height units to pixel width
8747	Checks if a string is a valid date .
8748	Parse a date .
8749	Check if string is numeric .
8750	Determine if the character should be continued .
8751	Sets a property on an object .
8752	Compares two columns .
8753	Returns true if the given range is inside a range .
8754	Clear hidden columns in the given sheet .
8755	Delete the hidden columns from the row .
8756	Deletes the cell from the given row .
8757	This method is called when the application is running .
8758	Refresh the error message .
8759	Validate the cell with the given row .
8760	Validate the validation bean .
8761	Check the error message from the context .
8762	Validate all rules for a single cell .
8763	Do validation .
8764	Validates the given target .
8765	Validate the current page .
8766	Validate the row in the current tab .
8767	Validate a row .
8768	Refresh the cached cells in the current page .
8769	Refresh the cached cells in the row .
8770	Sets the submit mode in the view map .
8771	Performs validation .
8772	Clear all fields .
8773	Load header rows .
8774	Loads header row from configuration tab
8775	Fills the max column cells in the table .
8776	Gets the style column style .
8777	Returns the width style for the given column .
8778	Load header row from configuration
8779	Gets the width of a column in a cell .
8780	Clear the workbook .
8781	Initialize the tabs .
8782	Load data .
8783	Refresh data for the current sheet .
8784	Refresh data for a row
8785	refresh data from row
8786	Returns the index of the tab with the given name .
8787	Loads a work sheet .
8788	Prepare work sheet .
8789	Sets the first data table page .
8790	Saves the object to the view map
8791	Setup the row information .
8792	Load body rows .
8793	Assembles the body row .
8794	Refresh cell .
8795	Process the refresh cell .
8796	Create dynamic columns .
8797	Add a repeat row .
8798	Refresh body rows in the body range .
8799	Sets the unsaved status flag .
8800	Returns true if the status is unmodified .
8801	Returns the common constructor for the given type .
8802	Write input stream to output stream .
8803	Write a long .
8804	Writes a string .
8805	Sets the traffic stats tag .
8806	Adds a bitmap .
8807	Adds a file descriptor .
8808	Removes a parameter with the given name .
8809	Add a header to the request .
8810	Clear the result .
8811	Call this to play the playback .
8812	Called by the application .
8813	Bind to the stream .
8814	Unbind the radio sound .
8815	Removes the listener from the playback .
8816	Stores the image to disk .
8817	Convert a stream to a string .
8818	Converts an input stream to a string .
8819	Sends the content to the stream .
8820	Returns the number of available bytes .
8821	Closes the input stream .
8822	Reads a single byte from the input stream .
8823	Reset the stream .
8824	Sends the start part .
8825	Sends the disposition header .
8826	Sends the content type header .
8827	Sends the transfer encoding header .
8828	Sends the end of the header .
8829	Send end .
8830	Sends the given parts to the output stream .
8831	Calculates the length of an array of bytes .
8832	Checks if the given URI is a redirect .
8833	Sends the response to the server .
8834	Sets the date header .
8835	Sets the date and cache headers .
8836	Sets the content type header .
8837	Closes the channel .
8838	Sends the disposition header .
8839	Sends the contents of this file to the given output stream .
8840	Installs the cache .
8841	Returns the working directory .
8842	Get the cached response .
8843	Returns an input stream for the request .
8844	Resets the buffer .
8845	Get the WebSocketContext for a keystore .
8846	Validates the keystore and password .
8847	Replace the current scale type .
8848	Stop listening listeners .
8849	Gets the pending intent .
8850	Disconnect the given URL connection .
8851	Bind to the service .
8852	Unbind the service .
8853	Sets the view changes .
8854	Makes sure that the proxy is open .
8855	On accept data .
8856	Called when the client has been released .
8857	Waits for loading .
8858	Set text or hide text .
8859	Hides soft input .
8860	Shows soft input .
8861	Toggles soft input from textView .
8862	Calculates pixels width .
8863	Called when an exception is thrown .
8864	Clear the cache for a given url
8865	Populates the image with the specified url .
8866	Cancel image loading .
8867	Create image consumer .
8868	Sets the image .
8869	Sets the loading image
8870	Starts an image loader .
8871	Cache a bitmap .
8872	Release a buffer .
8873	On prepare request .
8874	Add a parameter to the builder .
8875	Try to connect to the core .
8876	Calculates the MD5 hash of a string .
8877	Returns the String identifying the given CUDA .
8878	Returns the String identifying the given CUAS status
8879	If the given result is a CudaStatus .
8880	Checks if the result is a CudaException .
8881	Adds a lexeme .
8882	Adds the ending .
8883	Returns the estimated estimate for the given word form .
8884	Prints the description of this token .
8885	Verify and set the kamols attribute .
8886	Convert an attribute values to a Kamols markup .
8887	Verify an avar attribute .
8888	Removes the punctuation markup from the given tag .
8889	Gets the metrics .
8890	Gets the query string .
8891	Processes the JSON node .
8892	Parse a JSON string
8893	Get the connection config
8894	Perform metrics request .
8895	Create a new GC4 code reader .
8896	Create a new GC4 code set .
8897	Create a new GC column set .
8898	Create a new GC code reader .
8899	Create a new GC code reader .
8900	Create a new GC10 column set .
8901	Get the ID of the passed column element .
8902	Get the value of the passed row with the passed ID .
8903	Get the column with the passed ID .
8904	Get all key IDs from a column set .
8905	Get the key with the passed ID .
8906	Check if the passed column is a key column .
8907	Create a new column .
8908	Create a new key .
8909	Sets the number of lines to skip .
8910	Add a column .
8911	Create a new GC code writer .
8912	Create a new writer writer .
8913	Create a new GC column writer .
8914	Create a new GC code writer .
8915	Create a new GC code writer .
8916	Create a new GC - column writer .
8917	Get the validator validator .
8918	Get the validator validator .
8919	Get the validator for the GC column set .
8920	Get the validator validator .
8921	Get the validator validator .
8922	Get the validator validator .
8923	Send the logs to server
8924	Sets the context .
8925	Get the log level .
8926	Gets the capture .
8927	Sets the maximum log file size .
8928	Prepend a message to a message .
8929	Appends the stack trace to the log .
8930	Create a JSON object .
8931	Logs current location
8932	Sets the user identity .
8933	Get a byte array from a file
8934	Start the location updates .
8935	Size of the given region .
8936	Computes the size of a given region .
8937	Computes the size of the given region .
8938	Reads a snapshot record from the stream .
8939	Dumps the statistics .
8940	Gets the time values for the given index .
8941	Convert a file to a chart
8942	Returns the pool for the given server name
8943	Get the pool for the given JMX object
8944	Checks if the given region is in the server
8945	Get a member by name
8946	Returns a list of host names from the JMX server .
8947	Looks up the IP address for the given host .
8948	Checks if the given data is an error .
8949	Executes the given function .
8950	Flattens a collection to a flattened collection .
8951	Execute a query .
8952	Creates a bridge listener for the consumer .
8953	Creates a bridge listener for a delete event .
8954	Handle exception .
8955	Gets the list of on region filters .
8956	Export data .
8957	Returns a set of host names from the JMX server .
8958	Executes a function on a region .
8959	Get the app name from the given resources .
8960	Constructs the security properties
8961	Get a region by name .
8962	Gets a region by name .
8963	Calculates the comparison between two checksums .
8964	Determines if the given value is inserted at the given index .
8965	Close the stream .
8966	Parses the given directory to a CVS file .
8967	Main method for testing .
8968	Returns a new JMX instance .
8969	Stop all members on the host
8970	Shutdown a member
8971	Shuts down the JMX system .
8972	Shuts down all member zones .
8973	Stores a pagination map .
8974	Reads the results of the specified page .
8975	Imports a region .
8976	Checks the remote locators and locators
8977	Executes the check hash map .
8978	Builds the checksum map .
8979	Returns the value of the given column .
8980	Returns true if this type is a type of integer types .
8981	Serializes an object to a byte array .
8982	Deserialize a byte array .
8983	Creates an instance of the given class .
8984	Check for table id .
8985	Check for fields .
8986	Checks if the given element is a super type .
8987	Gets the schema .
8988	Hook java .
8989	Emits the getId .
8990	Returns the query as an Observable
8991	Checks that the given column name is equal to the given field object .
8992	Returns the value of the given string .
8993	Capitalizes a string .
8994	Returns true if this type is a type of the given type .
8995	Create a builder for descending order
8996	Reads the temperature from the device .
8997	Get CORS method .
8998	Print a message .
8999	Print error message .
9000	Returns a list of all icon fonts .
9001	Returns a list of all icons .
9002	Creates the layout layout .
9003	Gets the background decoration .
9004	Raises the power of a power of a power .
9005	Sets this matrix .
9006	Compute the power of a power .
9007	Returns the power of the power of the given index .
9008	Returns the exponent of a power .
9009	Returns the power of the given number .
9010	Performs Newton Newton .
9011	Calculates the arctan for a given number .
9012	Performs an approximate approximation of the given fractional transformation .
9013	Returns the square of the given number .
9014	Print pi digits .
9015	Convert a time to a string .
9016	Sets the limits .
9017	Add a value to the gauge .
9018	Print the histogram .
9019	Add another .
9020	Subtract a complex from another .
9021	Multiply this complex .
9022	Divide another .
9023	Set the values of this matrix .
9024	Get a row from the matrix .
9025	Get a column from this matrix .
9026	Sets the matrix .
9027	Returns the transpose of this matrix .
9028	Add this matrix to this matrix .
9029	Subtracts this matrix from this matrix .
9030	Multiply a matrix .
9031	Multiply this matrix .
9032	Print the values of this matrix .
9033	Sets the image .
9034	Validate the coefficients
9035	Compute the next position .
9036	Clear all fields .
9037	Parses the given SLDI descriptor .
9038	Parses the given SldDescriptor .
9039	Validate the given layer descriptor .
9040	Validate the XML .
9041	Calculates the area of a region .
9042	Set the values of this matrix .
9043	Sets the matrix .
9044	Returns the inverse of this matrix .
9045	Returns the determinant of this matrix .
9046	Returns the norm of this matrix .
9047	Solves the linear equation of b .
9048	Print the matrix .
9049	Performs forward elimination .
9050	Performs forward substitution .
9051	Performs back substitution .
9052	Finds the best solution .
9053	Convert a square matrix to a square matrix .
9054	Returns the next random value .
9055	Sets the initial state of the root node .
9056	Compute the next false false .
9057	Throws an exception if the position is not changed .
9058	Computes the next negative position .
9059	Checks the interval between two points .
9060	Adds the given addend value to the current sum .
9061	Multiplies two bits .
9062	Raises the power of the given base .
9063	Initializes the iteration .
9064	Get the SLDManager .
9065	Convert a long value to a char array .
9066	Decompose the bits .
9067	Print this object to a stream .
9068	Validates the given floating point value .
9069	Validates the floating point value .
9070	Validates the double exponent value .
9071	Validate the double exponent value .
9072	Create SldGwt service .
9073	Returns the next random random value .
9074	Returns the next random value .
9075	Returns the next random ratio .
9076	Creates a new SieveSieve .
9077	Returns an array of distinct prime factors .
9078	Initialize the root node .
9079	Compute the next position .
9080	Throws an exception if the position is not changed .
9081	Sets the JavaFX application .
9082	Sets the configuration from a file .
9083	Set the default configuration
9084	Initialize the FXM Loader .
9085	Set the latitude for the reverse geocode .
9086	Extracts the host address from a service .
9087	Returns the AttributeDefinition matching the given UUID .
9088	Evaluates the given attribute definition for an attribute definition .
9089	Sanitizes a string .
9090	Sets the address to address .
9091	Applies the filters to the map .
9092	Returns a collection of names for the given type .
9093	Returns a collection of instances matching the given name .
9094	Returns a list of all to all of the users .
9095	Gets the meta data as a decimal .
9096	Change the password for a user .
9097	Gets all users .
9098	Get gravatar for email
9099	Get gravatar for user
9100	Populate fields from Elasticsearch
9101	Gets the elasticsearch field type .
9102	Create a new flow step .
9103	Updates the flow step .
9104	Get flow step by id
9105	Get FlowStep by step
9106	Gets all steps in a flow .
9107	Delete a flow step
9108	Delete a flow step
9109	Populate the form fields .
9110	Close the application .
9111	Handle the response .
9112	Called when the connection is closed .
9113	Gets the list of ECHO messages from the return value .
9114	Get all personal inventory items
9115	Create a new TableRecord .
9116	Delete a form container .
9117	Gets the flow history for the form .
9118	Gets the fields of the form and fields .
9119	Get the most recent fields for the given form .
9120	Locks the form container .
9121	Unlock the form container .
9122	Unlock a form container .
9123	Map a form container to a FormContainer .
9124	Convert a string to a list of roles .
9125	Creates a new form definition .
9126	Updates a form definition .
9127	Get a form definition by id .
9128	Get a FormDefinition by name .
9129	Returns a list of all the instances of the given user .
9130	Delete a form definition .
9131	Get storage key from form .
9132	Initializes XmemcachedClient .
9133	Shuts down the memcached client .
9134	Converts a string to a long .
9135	Convert a document to a PDF file .
9136	Get the field values for the given form
9137	Creates a flow step entry .
9138	Create flow rule .
9139	Creates a new FlowStepRule .
9140	Update flow step entry .
9141	Update flow step rule .
9142	Updates the view rule .
9143	Move the flow entry up to a flow entry .
9144	Moves a flow entry down .
9145	Delete a flow entry .
9146	Delete flow rule .
9147	Delete the view rule
9148	Initialize session data .
9149	Gets all user queries .
9150	Gets all roles .
9151	Get service ticket as string .
9152	Create a FieldMask
9153	Create a FieldBarc Code .
9154	Create a FieldSpinner .
9155	Create a FieldSlider .
9156	Create a Field Table .
9157	Updates a FieldMask .
9158	Updates a field in a form field .
9159	Updates a decimal field .
9160	Updates a decimal field .
9161	Updates a field .
9162	Gets a field by name .
9163	Gets the fields with the given form name and log .
9164	Gets the fields of a form type .
9165	Delete a Field .
9166	Force delete field .
9167	Gets the table meta data .
9168	Updates a field value .
9169	Get or create an index .
9170	Create a new flow
9171	Updates a flow .
9172	Get flow by id
9173	Get flow by name
9174	Delete a flow
9175	Delete a flow
9176	Updates a global field value .
9177	Get all global field values
9178	Gets the id and title of the form definition .
9179	Decrypt an init packet .
9180	Closes the connection .
9181	Initialize a new request
9182	Gets exception message .
9183	Creates a new admin user .
9184	Gets an access token .
9185	Get user profile info
9186	Execute HTTP POST request .
9187	Executes a POST request .
9188	Gets the JSON response handler .
9189	Returns true if the connection is valid
9190	Get the HTTP client .
9191	Gets the path to be used by the system property .
9192	Closes the database .
9193	Returns a FluidList for a given view .
9194	Sends a form to the flow
9195	Event handler .
9196	Handle a message .
9197	Sends a message to the server .
9198	Sends a message to the server .
9199	Closes the session .
9200	Executes native SQL query .
9201	Request license .
9202	Apply a license
9203	Create a Field from a Map
9204	Create a ParagraphText .
9205	Create a ParagraphText .
9206	Create a FieldSelect with multi - choice values
9207	Create a FieldDateTime
9208	Updates a field in a text field .
9209	Updates a ParagraphText .
9210	Updates a FieldDateTime .
9211	Updates a Field .
9212	Updates a field value .
9213	Create a field value .
9214	Get Configuration by key
9215	Gets all configurations .
9216	Create an attachment .
9217	Get an attachment by id .
9218	Delete an attachment .
9219	Delete an attachment .
9220	Parse jar file .
9221	Sets the class loader .
9222	Validates the rule .
9223	Throws an exception .
9224	Checks the rule element .
9225	Get schema node from file path .
9226	Throws an exception .
9227	Throws an exception .
9228	Convert the given value to the given instance .
9229	Creates a new cli interface .
9230	Create a cli instance .
9231	Parse command line arguments .
9232	Parse command line arguments .
9233	Returns a builder with the given path .
9234	Remove a footer from the footer
9235	Returns the value of the interpolation at the specified point .
9236	Calculates the gradient of a gradient - noise vector .
9237	Calculates a noise value .
9238	Calculates a noise value .
9239	Calculates the cubic interpolation of a cubic curve .
9240	Calculates the elliptic curve for a given function
9241	Sets the bounds .
9242	Process the event .
9243	Performs the process .
9244	Gets account id .
9245	Apply rules to rule .
9246	Get the event serializer
9247	Create a file .
9248	Creates a directory .
9249	Restores the value of the original value .
9250	Creates the implementation .
9251	Adds an object to the list .
9252	Sets a property .
9253	Gets an array of String properties .
9254	Returns the next state for the given action name .
9255	Removes the keys from the map .
9256	Gets the object for the given type .
9257	Gets a parameterized type .
9258	Returns the type of the given type variable .
9259	Print stack trace .
9260	Print stack trace .
9261	Converts an object to a remote object
9262	Run the task .
9263	Sets the task .
9264	Called when the task is accepted .
9265	Called when the task is rejected .
9266	Called when the task has started .
9267	Called when the task has completed .
9268	Stops the task .
9269	Get the job from the queue .
9270	Adds a job to the queue .
9271	Converts a name to a BlockingMode .
9272	Resolves the state of this instance .
9273	Sets the readers .
9274	Adds a catalog reader to the catalog .
9275	Copy the readers from the catalog .
9276	Creates a new catalog .
9277	Loads the system catalog files .
9278	Parse a catalog .
9279	Parses pending catalog files .
9280	Parse the catalog file .
9281	Process an unknown token .
9282	Parse all the catalogs .
9283	Resolves a DCType .
9284	Resolves the document .
9285	Resolves a system .
9286	Resolves a local URI .
9287	Resolves the subordinate catalog .
9288	Convert a system identifier to an absolute URI .
9289	Normalize URI .
9290	Convert a byte to a hex string .
9291	Adds the given entry to the catalog .
9292	Creates a SoftValueRef .
9293	Fire on a Throwable .
9294	Add a Throwable to this event .
9295	Creates the delegate implementation .
9296	Compares two Timer tasks .
9297	Returns the value of this property .
9298	Returns the object at the specified index .
9299	Sets the object at the given index .
9300	Removes the object from the list .
9301	Add a new entry type .
9302	Returns the entry type .
9303	Returns the entry count for the given type .
9304	Returns the entry at the given index .
9305	Set the class loader for a thread .
9306	Swap the elements in the queue .
9307	Removes a node from the tree .
9308	Cleans up the timeout .
9309	Loads a class .
9310	Preload the protocol .
9311	Returns a URLStreamHandler for the given protocol .
9312	Check the JBoss protocol packages .
9313	Returns the value of the property .
9314	Creates the implementation .
9315	Make a synchronized counter .
9316	Creates a new LongCounter with the given counter .
9317	Determine if the extension is in the extension namespace .
9318	Checks if a notification is required .
9319	Rebinds the specified name from the specified name .
9320	Get the object instance for the specified object .
9321	Substitute a string to a string buffer .
9322	Splits a string into an array of strings .
9323	Join a byte array .
9324	Writes the object to the given buffer .
9325	Returns the value of this property .
9326	Creates a new instance .
9327	Returns the value associated with the given key .
9328	Returns the value associated with the given key .
9329	Removes an entry from the map .
9330	Flush the timer .
9331	Returns a list of all the keys in the cache .
9332	Sets the resolution .
9333	Returns the entry for the given key .
9334	Gets all children with the given tag name .
9335	Returns the first child element with the given name .
9336	Get an optional child element with the given tag name .
9337	Get the content of an element .
9338	Get the unique content of a given element .
9339	Gets the string content of an optional element .
9340	Sets the maximum queue size .
9341	Sets the blocking mode .
9342	Set the blocking mode .
9343	Execute the specified task .
9344	Resolves the external system .
9345	Resolves the external catalog .
9346	Resolves an external system .
9347	Resolves an external public public key .
9348	Query a resolver
9349	Appends a vector to a vector .
9350	Resolve all system entries for a given system .
9351	Resolve the given system id .
9352	Resolve all resolution for a given system .
9353	Resolve all local system names .
9354	Resolve all subordinate catalogs .
9355	Read a catalog from a file .
9356	Reads a SAX document from an input stream .
9357	Connect to the file .
9358	Returns an OutputStream for writing .
9359	Sets the next node .
9360	Handles deletion of a node .
9361	Returns the value of this header .
9362	Creates a new snapshot entry .
9363	Sets the right index .
9364	Returns the logger for the given class .
9365	Appends a list of objects to a string .
9366	Get class name .
9367	Returns the string representation of this object .
9368	Returns the names of the properties .
9369	Returns a property group by name .
9370	Returns a constructor that matches the given argument type .
9371	Returns a copy of the given object .
9372	Returns a reference to the specified class .
9373	Initialize the context .
9374	Update jndi cache .
9375	Returns a set of keys .
9376	Returns a set of entries .
9377	Removes a PropertyListener from this PropertyListener .
9378	Fires a property added event
9379	Fire a property removed event .
9380	Fires a property changed event
9381	Fire a property changed event .
9382	Convert a property name to a property name .
9383	Loads properties from the specified property reader .
9384	Loads properties from the given class name .
9385	Gets a property group by index .
9386	Returns true if the entity has been resolved .
9387	Resolves a system ID from the system .
9388	Try to resolve the given system ID as a URL .
9389	Resolves a classpath resource .
9390	Sets the value of this element as a document .
9391	Normalize publicId .
9392	Encodes a public identifier .
9393	Decode an ID .
9394	Replaces all occurrences of a string with another .
9395	Start the timer .
9396	Returns the elapsed time .
9397	Marks a StopWatch to a StopWatch .
9398	Compares two HashCode objects .
9399	Generates a hash code for a byte array .
9400	Generates a hash code for an array of objects .
9401	Initializes the internal state .
9402	Sets the value of the field .
9403	Returns the next token .
9404	Initialize the formats .
9405	Adds a new vertex to this graph .
9406	Sets the root vertex .
9407	Removes a vertex from the graph .
9408	Performs a depth - first traversal through the graph .
9409	Performs a DFS traversal .
9410	Finds a vertex by its data .
9411	Finds all cycles in the graph .
9412	Normalizes the given string .
9413	Parse the given XML string .
9414	Parse an input stream .
9415	Parse the given input source .
9416	Create an Element with the given name .
9417	Resolve qualified name .
9418	Copy attributes from srcElement .
9419	Returns true if the given node has children .
9420	Gets the children of the given node .
9421	Gets the text content of a node .
9422	Gets the child elements of the given node .
9423	Returns the parent element of the given node .
9424	Adds a resource to the pool .
9425	Read a catalog from an input stream .
9426	Read a catalog from a file .
9427	Get the host address
9428	Resolve an entity from a public entity .
9429	Sets a system property .
9430	Displays information about the given class .
9431	Produces a description of a class .
9432	Strip package name .
9433	Gets the package name .
9434	Tries to load a class .
9435	Returns the primitive wrapper for the given class .
9436	Gets all interfaces from a class .
9437	Returns all interfaces of a class .
9438	Returns true if the given class is a primitive wrapper .
9439	Instantiates the given class using the expected class loader .
9440	Returns the getter for a given attribute .
9441	Gets the attribute setter for a given attribute .
9442	Convert a parameter to a Java class .
9443	Get a system property .
9444	Gets the filenames for the given property .
9445	Removes all weak objects from the queue .
9446	Returns an iterator over this set .
9447	Creates a URL for the given protocol .
9448	Returns a copy of this map .
9449	Add a bound property listener .
9450	Removes a bound property listener .
9451	Returns true if the given string is null or empty .
9452	Finds a PropertyEditor for the given type name .
9453	Registers an editor with the given name and editor name .
9454	Convert a text value to a primitive type .
9455	Returns the class loader for the specified thread .
9456	Returns the ApplicationDeadlockException if any .
9457	Schedule a new timeout
9458	Handles the workout .
9459	Create a new context with the given name and name .
9460	Lookup an object by its name .
9461	Checks if the given object is an instance of the given class .
9462	Append the information about a class .
9463	Get the transition by name
9464	Read the properties file .
9465	Gets the verbosity .
9466	Query whether or not the default catalog is relative to the resource .
9467	Queries the catalog files .
9468	Get catalog files .
9469	Queries the preferred preferred .
9470	Query whether or not a static catalog or not .
9471	Resolves an input stream .
9472	Resolves the given href .
9473	Make an absolute URI .
9474	Returns the class for the given object stream .
9475	Invokes the setter method .
9476	Gets the local name of the element .
9477	Returns the namespace URI for a given node .
9478	Returns the namespace URI of the element .
9479	Creates a list from an enumeration .
9480	Returns an input stream for the given filename .
9481	Loads properties from a file .
9482	Returns a map of properties to a Map .
9483	Adds an edge to this graph .
9484	Adds an outgoing edge to this vertex .
9485	Adds an incoming edge to the graph .
9486	Returns true if the edge has an edge .
9487	Removes an edge from this graph .
9488	Finds the edge between the destination .
9489	Returns the edge of the given edge .
9490	Returns the cost of this vertex .
9491	Recursively jar files .
9492	Returns true if there are no more elements .
9493	Fire an event .
9494	Install Jvm type provider .
9495	Recursively removes all files in the given folder .
9496	Dispatches an action on the FX thread .
9497	Gets the event stream for the given type .
9498	Create fxml path .
9499	Convert a collection of rights to a stream .
9500	Converts a collection of rights to a stream
9501	Converts a collection of rights to a stream .
9502	Converts a collection of rights to a stream .
9503	Gets the allowed robots .
9504	Checks if the command is generated
9505	Main method .
9506	Main entry point .
9507	Returns the sum of the degree of this word .
9508	Convert superclass arguments to map .
9509	Initiates a JdbcResourceLoader .
9510	Checks the datasource parameters .
9511	Create an iterable for a given type .
9512	Create an array with the given class .
9513	Returns a list of the given class .
9514	Returns a collection of instances of a given type .
9515	Returns a list of all of the given class .
9516	Creates a left with the given type .
9517	Create a right value
9518	Throws an IllegalArgumentException .
9519	Validates the given type .
9520	Create a Try with a given type .
9521	Connect to database with given url and password .
9522	Runs the given SQL in the database .
9523	Query in the database .
9524	Returns a boolean array as a boolean array .
9525	Filter by example
9526	On upgrade .
9527	Backup this table .
9528	Restore this table .
9529	Sets the empty text .
9530	Dump the table to a CSV file .
9531	Unescapes CSV
9532	Returns a list of values from a CSV row .
9533	Returns a map of comma separated values
9534	Convert map to CSV
9535	Joins a list of strings .
9536	Joins a list of strings .
9537	Read database model from index
9538	Write to index
9539	Checks if the entity has a id field .
9540	Get the base DAO model for the given entity .
9541	Gets the bind type .
9542	Imports a database .
9543	Backup all tables
9544	Restores all tables from a CSV file .
9545	Creates the index file .
9546	Creates a query using the given entity manager .
9547	Creates a typed query .
9548	Renders the query .
9549	Delete a record .
9550	Saves an object to the database .
9551	Updates the given object .
9552	Add a where items are not in the list
9553	Add a subquery to the builder .
9554	Returns the next active stack .
9555	Gets an empty instruction stack .
9556	Adds a plan to this plan .
9557	Select a plan with the given policy .
9558	Selects a plan at random position .
9559	Sets the plan variables for the given choice .
9560	Gets the belief at the given index .
9561	Gets the list of bytes .
9562	Gets the children of this node .
9563	Grows a byte array .
9564	Creates a new logger .
9565	Updates the step .
9566	Set the goals .
9567	Pauses the user input .
9568	Initialize the optimization pools .
9569	Initializes the intention selection threads .
9570	Start the intention selection threads .
9571	Shutdown the intention selection threads .
9572	Register a Guard extension .
9573	Resets all variables .
9574	Loads the specified agent type .
9575	Processes the plan type and adds them to the catalog .
9576	Create agents in the catalog .
9577	Loads a class from the given class .
9578	Loads the specified class .
9579	Compares two objects .
9580	Returns the usage of the program .
9581	Parse the command line arguments .
9582	Parse the command line with the given option .
9583	Evaluate an agent with the given agent id .
9584	Returns the object at the specified index .
9585	Find an object with the given name .
9586	Adds an object to the queue .
9587	Returns the object at the given index .
9588	Adds an object to the queue .
9589	Removes the element from the queue .
9590	Gets the type .
9591	Returns true if the given belief is equal to the given belief set .
9592	Main method for testing
9593	Converts a string to a byte array .
9594	Post a goal .
9595	Sends a message to the agent .
9596	Sends a message to the specified agent .
9597	Gets the goals .
9598	Creates a new belief set .
9599	Adds a new beliefset to this beliefbase .
9600	Evaluate a query .
9601	Suspend the agent .
9602	Returns the field with the given name .
9603	Registers the neighbours of the given number of neighbors .
9604	Creates a random name .
9605	Runs the agent .
9606	Checks if execution is valid .
9607	Removes all agents from the set .
9608	Handle a goal .
9609	Send a shutdown message .
9610	Sets whether the given agent is idle .
9611	Moves the specified pin from two pin numbers .
9612	Initializes the internal state .
9613	Wait until all agents have been started .
9614	Finishes all agents .
9615	Returns true if all pools are idle .
9616	Returns the pool id for the given agent id .
9617	Pick an expression .
9618	Sets the expression .
9619	Creates an expression for the given attribute .
9620	Returns a join recursively .
9621	Finds a join with the given property .
9622	Checks if the response is reached .
9623	Gets upload stream .
9624	Handles a request .
9625	Checks if the given parameter with the given name exists .
9626	Get parameter .
9627	Parse parameters .
9628	Configure transaction manager .
9629	Get target file .
9630	Writes an artifact .
9631	Sets the instance field value .
9632	Gets constructor .
9633	Returns a string representation of the descriptor .
9634	Gets the method for the given method .
9635	Returns the type of the field .
9636	Get dependency value .
9637	Save the current file .
9638	Sets a default link .
9639	Sets the default link template .
9640	Parse the links from the response .
9641	Adds links to the response .
9642	Adds links to the body .
9643	Parse a link object .
9644	Gets or adds or adds the value to the map .
9645	Handles the capabilities .
9646	Checks if the given method is allowed .
9647	Register instance processors .
9648	Register an instance factory .
9649	Register an instance processor .
9650	Register a class processor .
9651	Returns an instance of managed class .
9652	Adds an argument to the list .
9653	Create target file list .
9654	Gets the XML representation of this node .
9655	Initialize this template .
9656	Determines if the given template has a reference to the given file .
9657	Create a Parameterized TemplateModel from a Reader .
9658	Create a parameterized template model from a file .
9659	Sets the request path .
9660	Gets an observable from the given start index .
9661	Returns the scope of the given string .
9662	Sets the value of a field .
9663	Adds an appender to the given logger .
9664	Removes an appender from the logger .
9665	Removes the values from the logger .
9666	Reads the formal parameters .
9667	Parse model model .
9668	Resolve proxies .
9669	Get all files in a directory .
9670	Parse a directory .
9671	Returns true if the model is fully resolved .
9672	Find all EObjects from a ResourceSet .
9673	Sets the model directories .
9674	Sets the file extensions .
9675	Sets the model resources .
9676	Reads the next record .
9677	Sets the parameter array .
9678	Sets boolean .
9679	Execute a large update statement
9680	Convert a string to an instance
9681	Merge a Velocity template .
9682	Gets the model directory .
9683	Gets the template directory .
9684	Writes the value to the response .
9685	Start the application .
9686	Configure the window .
9687	Prints the view .
9688	Writes the contents of the input stream to the given output stream .
9689	Invokes the method on the interface .
9690	Attaches the given request to this instance .
9691	Detaches this request .
9692	Returns the cookies associated with this request .
9693	Dump the current request context
9694	Gets the list of invocations .
9695	Set parameters from EventStream .
9696	Sets the remote host .
9697	Get parameter from stream stream .
9698	Removes a prefix from a path .
9699	Returns the common directory of two directories .
9700	Convert relative path to relative absolute path .
9701	Convert relative path to absolute relative path .
9702	Returns the depth of the given file .
9703	Dumps an error .
9704	Send JSON object .
9705	Adds a parameterized template .
9706	Add a list of parameters to the model .
9707	Initialize this template .
9708	Finds all parameter templates in the given directory .
9709	Enable or disable the save button .
9710	Dialog .
9711	On delete .
9712	Creates a new instance of the given class .
9713	Gets the files in the fit .
9714	Returns the summary of the total number of files
9715	Gets the summary row summary .
9716	Get a summary row for a file
9717	Creates a new instance of a managed class .
9718	Gets the setup class .
9719	Returns the model directories .
9720	Returns the model resources .
9721	Sets the collection of candidates .
9722	Load configuration document .
9723	Called when an error occurred .
9724	Determine if the given parameter is an object .
9725	Reads the parameters from the given HTTP request .
9726	Reads a JSON document from the given input stream .
9727	Extract parameter value from fit cell .
9728	Gets the hints property .
9729	Determine if the request is an XML request
9730	Checks to see if the request is Android .
9731	Refresh the entity .
9732	Returns all properties with a given annotation .
9733	Returns the annotation on the given property .
9734	Log message .
9735	Lookup the information for a given domain .
9736	Returns true if the parser has a parser for the given node .
9737	Get managed class .
9738	Gets a managed method .
9739	Process not contained exception .
9740	Process a message .
9741	Get a boolean value from a column label .
9742	Returns true if the argument is a wrapper for the given class
9743	Serialize this servlet response .
9744	Get cookie by name .
9745	Add a cookie .
9746	Removes cookie .
9747	Returns an iterator over the cookies .
9748	Returns the target file list producer .
9749	Adds a new field .
9750	Compiles the class .
9751	Verifies that the image has been saved .
9752	Gets the file name .
9753	Ensures that the given URI has a trailing slash .
9754	Performs the login with the given username and password .
9755	Gets the http servlet request .
9756	Invoke managed method .
9757	Executes a transaction .
9758	Executes an immutable transaction .
9759	Returns all files in the directory .
9760	Returns the last file .
9761	Returns the concrete configuration for the given parser .
9762	Returns true if the given requestPath starts with the given path .
9763	Returns a list of factories for the given type .
9764	Gets the http session .
9765	Serialize the file to the output stream .
9766	Reads the meta data .
9767	Handle a request .
9768	Clean up resources .
9769	Remove stale event stream .
9770	Handles allowed methods .
9771	Process the blob upload .
9772	Deletes the data from the server .
9773	Extract column parameters .
9774	Gets the argument names .
9775	Schedules a periodic task .
9776	Cancel a timeout .
9777	Loads repository configuration .
9778	Returns the next file .
9779	Load the application configuration .
9780	Print the welcome banner
9781	Prints the stopped banner .
9782	Create Chameleon .
9783	Register a shutdown hook .
9784	Trigger notification .
9785	Handles the trigger event .
9786	Insert and replace the given row .
9787	Returns the counts of all files .
9788	setter for score - sets
9789	getter for variant - gets
9790	setter for variant - sets
9791	getter for questionType - gets
9792	setter for questionType - sets
9793	getter for token - gets
9794	getter for depLabel - gets
9795	setter for depLabel - sets
9796	getter for semanticType - gets
9797	setter for semanticType - sets
9798	getter for sections - gets
9799	setter for sections - sets
9800	indexed getter for sections - gets an indexed value -
9801	indexed setter for sections - sets an indexed value -
9802	getter for uris - gets
9803	setter for uris - sets
9804	getter for types - gets
9805	setter for types - sets
9806	getter for targetType - gets
9807	setter for targetType - sets
9808	getter for rank - gets
9809	setter for rank - sets
9810	getter for queryString - gets
9811	setter for queryString - sets
9812	getter for candidateAnswers - gets
9813	setter for candidateAnswers - sets
9814	indexed getter for candidateAnswer - gets an indexed value -
9815	indexed setter for candidateAnswer - sets an indexed value -
9816	getter for query - gets
9817	setter for query - sets
9818	getter for hitList - gets
9819	setter for hitList - sets
9820	indexed getter for hitList - gets an indexed value -
9821	indexed setter for hitList - sets an indexed value -
9822	getter for abstractQuery - gets
9823	setter for abstractQuery - sets
9824	getter for searchId - gets
9825	setter for searchId - sets
9826	setter for docId - sets
9827	getter for offsetInStart - gets
9828	setter for offsetInStart - sets
9829	getter for offsetInSection - gets
9830	setter for offsetInSection - sets
9831	getter for beginSection - gets
9832	setter for beginSection - sets
9833	getter for endSection - gets
9834	setter for endSection - sets
9835	getter for aspect - gets
9836	setter for aspects - sets
9837	getter for triple - gets
9838	setter for triple - sets
9839	getter for sourceRelation - gets
9840	setter for sourceRelation - sets
9841	getter for subject - gets
9842	setter for subject - sets
9843	getter for predicate - gets
9844	setter for predicate - sets
9845	getter for IsObjectUri - gets
9846	setter for IsObjectUri - sets
9847	getter for operator - gets
9848	setter for operator - sets
9849	getter for operatorArgs - gets
9850	setter for operatorArgs - sets
9851	getter for concept - gets
9852	getter for score - gets
9853	getter for text - gets
9854	setter for text - sets
9855	getter for id - gets
9856	setter for id - sets
9857	getter for name - gets
9858	getter for abbreviation - gets
9859	setter for abbreviation - sets
9860	setter for concept - sets
9861	getter for variant - gets
9862	setter for variant - sets
9863	getter for namedEntityTypes - gets
9864	setter for namedEntityTypes - sets
9865	getter for conceptType - gets
9866	setter for conceptType - sets
9867	getter for occurrences - gets
9868	setter for occurrences - sets
9869	getter for conceptss - gets
9870	setter for conceptss - sets
9871	getter for originalText - gets
9872	setter for originalText - sets
9873	getter for arguments - gets
9874	setter for arguments - sets
9875	getter for label - gets
9876	setter for label - sets
9877	Returns the index of the next clear bit .
9878	Sets the bit at the given index .
9879	Free the buffer .
9880	Creates a new cache value .
9881	Rehash the given array into a new array .
9882	Returns the HELM2 representation of HELM2 .
9883	Check parent parhesis .
9884	method to add the details
9885	Returns the string representation of this object .
9886	Adds an element to the MonomerNotation
9887	main method for testing
9888	check the polymer id
9889	method to check the polymer id
9890	Check connection details
9891	Checks if a string is valid
9892	Checks if a string is repeated .
9893	method to check if a peptide or not
9894	Convert this notation to a JSON string .
9895	get a PolymerNotation with the given string
9896	Returns the current grouping .
9897	Gets the HELM2 document .
9898	method to return HELM2
9899	Convert connection to HELM22 .
9900	Convert groupings to a string
9901	Convert this annotation section to a string .
9902	Get all PolymerNotation ids
9903	Get a PolymerNotation with the given ID
9904	set the polymer elements
9905	Convert a string to a Conversion
9906	Sets the annotation .
9907	set count
9908	Determine the MonomerNotation
9909	method to find the MonomerNotation in a group
9910	Determine the HELME Entity
9911	Gets the value .
9912	method to parse the HELM2
9913	set the nucleotide contents from a nucleotide
9914	Defines the ambiguity .
9915	Returns the statistics for this worker .
9916	Creates an ADiGraph from a collection of edges .
9917	Create an ADiGraph from a collection of nodes .
9918	Initialize the internal paths .
9919	Returns a sorted list of nodes in the graph .
9920	Subscribes a pattern to a pattern
9921	Get the number of subscribe messages .
9922	Unsubscribe an event .
9923	This method is used to send a message to the server .
9924	Send a message to the server .
9925	Returns true if the queue is available
9926	Send a shutdown message .
9927	Returns a throwable for the given exception .
9928	Unlock run state .
9929	Creates a new worker .
9930	Tries to add a worker .
9931	Registers a worker .
9932	Unregisters a worker .
9933	Called when a worker is active .
9934	Runs a worker .
9935	Wait for a work queue .
9936	Returns the number of non - negative tasks .
9937	Returns the common submitter queue .
9938	Determines if a task has completed .
9939	Submits a ForkJoinTask .
9940	Make a common fork pool .
9941	Waits for this operation to complete .
9942	Build a string .
9943	Returns the statistics of this thread pool .
9944	Create a new Array
9945	Returns a copy of this list
9946	Iterates over all elements of the given iterable .
9947	Folds all elements of the given iterable to the given iterable .
9948	Folds a list of elements from a List .
9949	Adds a task to the queue .
9950	Converts nullable to Option
9951	Creates a long hash map from the given keys and values .
9952	Returns an empty ListMap with the specified equality .
9953	Creates a new ListMap from the given elements .
9954	Creates a new ListMap from the given keys and values .
9955	Returns a set of keys .
9956	Normalizes a resource name .
9957	Marshals a bound value .
9958	Returns a new CharSequence .
9959	Returns a binary search for the given list .
9960	Returns a binary search for a given list .
9961	Sends an email .
9962	Sends an email
9963	Binds a route binding .
9964	Binds a handler to the pattern .
9965	Returns true if the tag has the given role .
9966	get int from Long
9967	Remove duplicate strings .
9968	Parses the given string .
9969	Executes the run .
9970	Log a user .
9971	get login user
9972	Gets the login user from the session .
9973	Checks if the password matches the given salt .
9974	Saves the member in the cookie .
9975	Gets the login key .
9976	Get a cookie from a cookie .
9977	Forward to the given path .
9978	Append file separator .
9979	Returns a long value from the request .
9980	Log a debug message .
9981	Get the caller information for the caller .
9982	Convert a char array to a simple byte array .
9983	Converts a CharSequence into a simple byte array .
9984	Convert a byte array to a simple char array .
9985	Converts a CharSequence into a byte array .
9986	Returns the locale data for the given locale .
9987	Schedules the given number of seconds .
9988	Crops an image to a file .
9989	Executes the given invocation .
9990	Invokes the given DirectInvocation .
9991	Gets the REST operations .
9992	Render an error message .
9993	Render an error message .
9994	Generate a template for a given view .
9995	Parse path .
9996	Render data tables .
9997	Render empty data tables .
9998	Sets the list of items .
9999	Sets the redirect to the page .
10000	Returns all providers in the given injector .
10001	Returns the current method name .
10002	Compact memory .
10003	Propagate a MetricsCollection .
10004	Encode a string .
10005	Get charset .
10006	Copies the input stream to the output stream .
10007	Copy bytes from input stream to output stream .
10008	Copies data from an input stream to a Writer .
10009	Copies the contents of the given reader to the given output stream .
10010	Copy characters from the input stream to the writer .
10011	Copies the reader from the given reader to the given output stream .
10012	Copies the given reader to the given output stream .
10013	Compare two input streams .
10014	Compare two characters .
10015	Executes the pipeline .
10016	Returns the SQL for the given group name .
10017	Unmarshal a string .
10018	Unzip a zip file .
10019	Returns a new instance of PermissionDialog .
10020	Called when the dialog is pressed .
10021	Register a core value type .
10022	Returns true if the given regular expression matches the given regular expression .
10023	Checks if a string is mobile .
10024	Checks if a string is a phone number
10025	Checks if the given string is a birth day .
10026	Checks if a string is a valid URL .
10027	Checks if a string is a date time .
10028	Apply the filter .
10029	Encodes a string using UTF - 8 encoding .
10030	Decodes a string into a byte array .
10031	Converts a hexadecimal string into a byte array .
10032	Read properties from an input stream .
10033	Reads content from an input stream .
10034	Reads the content of a file .
10035	Writes a byte array to a file .
10036	Copies a directory into a directory .
10037	Serializes a Document to a String .
10038	Get a document from a file .
10039	Builds a Document from a string .
10040	Create a Document from an input stream .
10041	Validate an XML signature .
10042	Sign a DOM document .
10043	Returns true if the given class is a cache - safe way .
10044	Returns true if the given class is a primitive array .
10045	Returns true if the given class is a primitive array .
10046	Returns the primitive type if the given class is primitive .
10047	Returns true if the given class is assignable to the right hand side .
10048	Returns true if the given value is assignable .
10049	Returns an array of all interfaces for the given object .
10050	Returns all interfaces of the given object .
10051	Write properties to temp file .
10052	Extract variables from a URI .
10053	Set permission .
10054	Create a Druid plugin
10055	Bind an extension to the specified extension point .
10056	Returns the context for the given type .
10057	Convert primitive type to integer .
10058	Convert an object to a given type .
10059	Convert a user defined value to a given type .
10060	Gets a query parameter .
10061	Gets a cookie parameter .
10062	Gets a session parameter .
10063	Initialize Druid datasource .
10064	Sets shared variable .
10065	Sets a parameter .
10066	Sets the parameter for the given field .
10067	Shows the permission .
10068	Checks if the given values are granted .
10069	Determine if the given value is denied or not .
10070	Find records by query .
10071	Finds the first record .
10072	Returns true if the given model is new .
10073	Returns true if the given method declares an exception .
10074	Removes all entries from the queue .
10075	Sets the value for the given key .
10076	Matches a string with the given pattern .
10077	Reads the arguments from the given arguments .
10078	Gets protobuf entity .
10079	Returns true if the given class is a protobuf entity .
10080	Gets all protobuf attributes of a class .
10081	Gets the field getter method .
10082	Gets the pojo setter .
10083	Returns the object mapper .
10084	Get the JsonFactory .
10085	Convert object to json .
10086	Sets the borders .
10087	Retrieve a user record from the database .
10088	Copy the attribute values to the target object .
10089	Copy the attributes from the target object .
10090	Get a property .
10091	Set a property .
10092	Adds the app to the window
10093	Saves the current token .
10094	Gets the access token .
10095	Gets the default class loader .
10096	Gets a resource with the specified name .
10097	Gets a resource as a stream .
10098	Returns an input stream for the given class .
10099	Initialize the values from the given URI .
10100	Initializes the scheme .
10101	Initialize path .
10102	Sets the scheme .
10103	Sets the userinfo string .
10104	Sets the host .
10105	Sets the port .
10106	Append path .
10107	Sets the query string .
10108	Sets the URI .
10109	Returns a string representation of the URI .
10110	Creates a PreparedStatement using the given iterator .
10111	Initialize this application .
10112	Get the muffin .
10113	Set the muffin .
10114	Get the contents of the clipboard .
10115	Set the clipboard contents .
10116	Opens an input stream to a file .
10117	Loads all services for a given type .
10118	Sets the parameters for the given operation .
10119	Gets the service parameters .
10120	Returns the parameterized operation with the given id .
10121	Finds a service by class .
10122	Parses the given response and converts it into an object .
10123	Returns an iterator over the elements in this buffer .
10124	Returns the encoding of the XML .
10125	Returns the parent logger .
10126	Creates a proxy for a connection .
10127	Get authorization code
10128	Visit a package declaration .
10129	Visit a class declaration .
10130	Visit an ExecutableDeclaration .
10131	Gets an option from a map .
10132	Returns a filter that filters all the given modifiers .
10133	Gets a filter for a given kind .
10134	Creates and returns a combined filter which matches this filter .
10135	Creates and returns a filter that matches this filter .
10136	Returns the map as a Map .
10137	Make the given constructor .
10138	Prepares an MBean object from an MBean object .
10139	Replaces slash with hyphenation with hyphenation
10140	Convert a byte array to a hexadecimal string
10141	Returns the indexes for the given name .
10142	Parse the given SQL string into a named SQL statement .
10143	Converts a collection of nonProtobuf objects to a protobuf .
10144	Sets the field value .
10145	Sets a pojo field value .
10146	Filter this file .
10147	Create a proxy for a ResultSet
10148	Map a list of expected labels to the expected state .
10149	Extract state from a list of values
10150	Returns the generic supertype of the specified class .
10151	Performs the polling .
10152	Performs the polling .
10153	Returns the declared field of the given class .
10154	Returns the declared methods of the given class .
10155	Returns the declared method with the given name and parameter types .
10156	Returns all declared methods of the given class .
10157	Gets all constructors of the given class .
10158	Dumps a byte .
10159	Returns the index of the first occurrence of the specified substring .
10160	Removes all characters from a string .
10161	Cleans up state .
10162	Initialize audit .
10163	Initializes the message queue .
10164	Initialize the password validator .
10165	Initialize the password authenticator .
10166	Resolves a locale code .
10167	Lookup a locale for a locale .
10168	Creates a proxy for a statement .
10169	Removes all elements from this queue .
10170	Adds an element to the queue .
10171	Removes the element from the stack .
10172	Get the input stream for this file .
10173	Parse the command line arguments
10174	Matches tokens .
10175	Moves the contents of the file .
10176	Returns true if this rectangle is inside another rectangle .
10177	Returns true if this rectangle contains the specified coordinates .
10178	Returns the intersection of this rectangle .
10179	Returns the union of this rectangle .
10180	Returns a copy of this rectangle with the same coordinates .
10181	Returns a copy of this rectangle with the given other .
10182	Gets the width of the given column .
10183	Gets the row of the row .
10184	Returns the bounds of the bounds of the cell .
10185	Calculates the columns
10186	Calculates the rows in the grid .
10187	Unwraps the wrapped Throwable .
10188	Main entry point .
10189	Called when the code is updated .
10190	Copy instructions to the internal buffer .
10191	Renders the instructions .
10192	Initialize the application .
10193	Returns a partial copy of this query parameter .
10194	Adds a child to this node .
10195	Clear children .
10196	Returns the next solution .
10197	Add instructions to the body .
10198	Adds the instructions to the parent .
10199	Called when the work panel changes .
10200	Register a work panel .
10201	Updates the flag flags .
10202	Creates a new type .
10203	Evaluates whether the given term is a variable .
10204	Optimized instructions .
10205	Compares two collections .
10206	Process the request .
10207	Render the pagedList .
10208	Renders a button .
10209	Resets the state of this model .
10210	Initializes the model .
10211	Returns the value associated with the given key .
10212	Returns the index of the given key .
10213	Sets the value at the specified index .
10214	Removes the specified object from the map .
10215	Removes the element at the specified index .
10216	Returns true if the given property has a property .
10217	Sets the specified property .
10218	Returns the value of the specified property .
10219	Returns true if the given wrapper is assignable to the given wrapper type .
10220	Initialize the setter methods .
10221	Returns the decision tree for the given state .
10222	Initialize the lookup table .
10223	Unify the given query and statement .
10224	Unify two terms .
10225	Unify a variable .
10226	Compile a query .
10227	Find the maximum number of arguments in a clause .
10228	Allocate local variable registers for a query .
10229	Gather the position and occurrences of this clause .
10230	Displays a compiled predicate .
10231	Displays the given query .
10232	Puts a 32 - bit integer into a byte buffer .
10233	Returns a string as a string .
10234	Returns the string representation of this attribute .
10235	Sets the value of the attribute .
10236	Reads the content .
10237	Checks if a class exists .
10238	Returns true if the given class is a subtype of a class .
10239	Determine if a class is a subtype of a class .
10240	Returns true if the given parent class is a sub - type of a child class .
10241	Returns the class for the given class name .
10242	Creates a new instance of the given class .
10243	Creates a new instance of the given constructor .
10244	Calls a method on the given object .
10245	Calls a method on an object .
10246	Calls a static method .
10247	Gets the constructor for the given class .
10248	Returns the setter method that matches the given property name .
10249	Create a new Queue Queue .
10250	Returns a new Queue that wraps the given Queue .
10251	Get the type from an object .
10252	Resets the state .
10253	Returns the current state of the current node .
10254	Creates an instance of an int range .
10255	Add a supported time zone .
10256	Adds an alternate dimension to the table .
10257	Adds a dimension table to the table .
10258	Find all free variables in a query .
10259	Returns the set of free variables in the query .
10260	Compares two objects .
10261	Writes an object to a file .
10262	Reads a stream as a string .
10263	Creates a search node .
10264	Generate the indentation of the trace .
10265	Allocate the arguments for a function .
10266	Returns true if the given variable is the last body of the function .
10267	Returns the major classification for a given property .
10268	Determines if the given property has the same classification .
10269	Determine the best decision on the given output property .
10270	Returns a new Functor with the given name and arguments .
10271	Returns a new variable with the given name .
10272	Executes the action .
10273	Returns the list at the specified index .
10274	Sets the texture .
10275	Paints the image .
10276	Creates a buffered image .
10277	Creates a new graphics context .
10278	Create a binary image
10279	Creates and returns a new image .
10280	Sets the queue search algorithm .
10281	Performs a depth bounded search .
10282	Performs the search algorithm .
10283	Starts the prolog parser .
10284	Returns a clause of this Prolog .
10285	Reads the tokens from the input stream .
10286	Parse a function .
10287	Parse a list of functions .
10288	Returns the argument list .
10289	Parse a variable .
10290	Parse an integer literal .
10291	Parse a double - point literal .
10292	Parse a string literal .
10293	Peek a directive .
10294	Interns an operator .
10295	Initializes the built - ins table .
10296	Returns the next token .
10297	Peek the next token from the stream .
10298	Binds this session to the current thread .
10299	Rolls the transaction .
10300	Collect the given iterator to the target collection .
10301	Reserves a call point .
10302	Convert time to milliseconds .
10303	Returns the number of years in milliseconds .
10304	Returns the ticks with the given hours .
10305	Returns a tick with the specified minutes set .
10306	Returns a new tick with seconds .
10307	Returns the tick with the given year .
10308	Returns the ticks with the given month .
10309	Returns the tick with a given date .
10310	Calculates the milliseconds starting from the given year .
10311	Gets the month of the year .
10312	Reads bytes from the input stream .
10313	Applies the sequence to the given key .
10314	Returns the entry for the given key .
10315	Puts an entry into the hash table .
10316	Rebuild the table .
10317	Called when the action is pressed .
10318	Sets the next available availability .
10319	Sets the previous state .
10320	Sets the finished state .
10321	Returns a new instance of WAMResolver for the given symbol table .
10322	Returns an iterator over the set of variables .
10323	Computes the expected value for the given probabilities .
10324	Returns the probabilities for the given integers .
10325	Sets the tick values .
10326	This method should be called by the ServletHandler .
10327	Creates a URL from a URI .
10328	Returns a map of the request information .
10329	Gets the headers .
10330	Gets the cookies .
10331	Gets the request parameters .
10332	Returns the request scope .
10333	Returns the current page scope .
10334	Returns the current session scope .
10335	Returns the application scope .
10336	Get the user principal .
10337	Render the HTML page .
10338	Converts a map of properties to HTML table .
10339	Performs the search algorithm .
10340	Sets the current screen state .
10341	Walks the given term .
10342	Compares two objects .
10343	Updates the registers .
10344	Notifies all registered listeners .
10345	Remove a clause from this clause .
10346	Returns true if the given context is a top - level function .
10347	Returns an array containing all the elements in this sequence .
10348	Sets the arguments .
10349	Get fixity .
10350	Determines if this is an Infix .
10351	Compares two op symbol .
10352	Handle a property change event .
10353	Register a workflow controller .
10354	Returns an enum factory for the given class .
10355	Create a component factory instance .
10356	Returns the storage cell for the given variable .
10357	Returns true if this variable is bound .
10358	Sets the attribute at the given index .
10359	Sets the attribute at the given index .
10360	Returns the attribute set for the given column .
10361	Returns the attribute set for the given row .
10362	Internal insert method .
10363	Creates a new instance of TimeRange .
10364	Creates a new type .
10365	Returns true if the given value is a valid instance .
10366	Creates the initial context for the given term .
10367	Updates the registers .
10368	Returns the value of this variable .
10369	Returns the goal of the search node .
10370	Joins the given forward path to the given forward path .
10371	Returns a list of blocks for the given block .
10372	Returns the properties for the given resource .
10373	Sets the rate .
10374	Read bytes from the input stream .
10375	Skips the given number of bytes .
10376	Gets the disjunctions of the given disjunction .
10377	Get an int from a byte array .
10378	Writes an int to a byte array .
10379	Writes a 24 - bit integer to a byte array .
10380	Get a 24 - bit integer from a byte array .
10381	Get a short from a byte array .
10382	Writes a short to a byte array .
10383	Returns the tree search state for the given operator .
10384	Returns an iterator over all the operators in the tree .
10385	Returns the id of this attribute .
10386	Returns the value of this attribute .
10387	Sets the value of this attribute .
10388	Convert a string to an array of strings .
10389	Convert a string array to a list of strings
10390	Convert a name to camel case .
10391	Convert a string to a lower case .
10392	Returns the current configuration .
10393	List the handlers .
10394	Returns the call point for the given function name .
10395	Creates a new call point address .
10396	Returns true if this attribute is a sub category .
10397	Returns the id of this node .
10398	Returns the value at the specified level .
10399	Returns last value .
10400	Serializes the hierarchy attribute .
10401	Deserialize the attributes from an input stream .
10402	Computes the heuristic of the heuristic .
10403	Modify a c .
10404	Add an error message .
10405	Handle error errors .
10406	Writes the given string to the output stream .
10407	Classifies the decision tree .
10408	Compares two objects .
10409	Returns an iterator over the elements in this list .
10410	Returns the inverse of the given value .
10411	Returns the inverse of the given value .
10412	Returns the log base version of the given value .
10413	Returns the log version of the given value .
10414	Returns the integer log base value for the given value .
10415	Returns the log base version of the given value .
10416	Gets the number of characters in an integer .
10417	Gets the number of characters in a long .
10418	Calculates the number of characters in the given integer value .
10419	Sets the head of the function .
10420	Emits the code to the given byte buffer .
10421	Sets the current screen .
10422	Returns true if the predicate evaluates to true .
10423	Gets a property .
10424	Returns the properties for a key .
10425	Returns an iterator that can be used to iterate over the keys .
10426	Create array properties .
10427	Sets the rate rate .
10428	Evaluate the argument .
10429	Loads the properties file .
10430	Gets the properties from the system properties .
10431	Gets the properties from the classpath resource .
10432	Gets properties from cwd .
10433	Called when a functor is done .
10434	Returns the value of this variable .
10435	Sets the substitution .
10436	Creates a queue of nodes .
10437	Clean up resources .
10438	Appends an event to the socket .
10439	Fires the connector thread .
10440	Initialize the printers .
10441	Commits the global transaction .
10442	Rolls a transaction .
10443	Requests a write operation to the given transaction .
10444	Adds a cached operation to the cache .
10445	Acquires a global write lock .
10446	Release the global write lock .
10447	Enlist the resource with the given session .
10448	Checks if the given rule node is present in the rule set .
10449	Inserts an element into the queue .
10450	Retrieves the element from the queue .
10451	Puts an element into the queue .
10452	Inserts the specified element into the queue .
10453	Returns the next object .
10454	Get a property as a boolean .
10455	Get a property as Integer .
10456	Gets the property as long .
10457	Call a mixin .
10458	Sets the addition visitor to be added .
10459	Traverses a check node .
10460	Returns the byte array for the given call point .
10461	Execute the query and extract the bindings from the given query .
10462	Decode a heap .
10463	Capture the memento .
10464	Restores the values from the given object .
10465	Retrieves the value of an attribute from the cache .
10466	Put an attribute into the cache .
10467	Returns all field names for a given class .
10468	Executes the command .
10469	Offers an element to the queue .
10470	Removes an element from the queue .
10471	Creates a search node .
10472	Creates a priority queue .
10473	Creates a new TermWalker from the tree .
10474	Returns a goalWalker for a goal .
10475	Creates a new TermWalker for a positional term .
10476	Creates a new termWalker for a goal predicate .
10477	Returns a new termWalker for the given positional terms .
10478	Load properties from an input stream .
10479	Returns a Properties object from a file .
10480	Returns a Properties object from the given URL .
10481	Returns a Properties object for a given path .
10482	Compute the size of the grid .
10483	Initializes the font metrics .
10484	Add a PropertyChangeListener
10485	Add a PropertyChangeListener
10486	Remove a PropertyChangeListener
10487	Fire a property change event .
10488	Creates a new DoubleRange instance .
10489	Performs a fade .
10490	Shows the horizontal bar .
10491	Shows the left vertical bar .
10492	Shows the right vertical bar .
10493	Sanitize radio controls .
10494	Waits for the given thread .
10495	Waits until the given timeout expires .
10496	Executes the command .
10497	Appends the classpath to the command line .
10498	Creates a new instance of the specified type .
10499	Prints the introduction .
10500	Initializes command line reader
10501	Evaluate the program .
10502	Evaluate the query .
10503	Returns a MultiTypeData object for the given boolean value .
10504	Returns a MultiTypeData object for the given byte value .
10505	Returns a MultiTypeData object for the given character .
10506	Returns a MultiTypeData object for a short type .
10507	Returns a MultiTypeData object for the given integer value .
10508	Returns a MultiTypeData object for the given long value .
10509	Returns a MultiTypeData object for the given float value .
10510	Returns a MultiTypeData object for the given double value .
10511	Construct a MultiTypeData object from a string .
10512	Returns a MultiTypeData object for the given value .
10513	Convert multi type data to object .
10514	Set a value in the page context .
10515	Clear all data from the map .
10516	Expands the given key to the new array .
10517	Internal insertion method .
10518	Compares two objects .
10519	Parse operators .
10520	Returns the operators with the given fixity .
10521	Checks if the given operator is a fixity .
10522	Make a new search node .
10523	Pads a string to a string .
10524	Returns the parsing errors .
10525	Gets the options in force .
10526	Returns the usage of this command .
10527	Adds trailing pairs .
10528	Adds options to the given properties .
10529	Adds an option to the map .
10530	Takes a free - argument list of free arguments as a system property .
10531	Checks if the argument is valid .
10532	Compares the given iterator and returns the error message .
10533	Returns an enumeration of options .
10534	Gets the options .
10535	Sets the stemmer .
10536	Get the actual stemmer .
10537	Returns the stem of the given word .
10538	Main entry point .
10539	Creates a new instance of a float range .
10540	Resets the initial state .
10541	Trace the environment frame
10542	Returns a trace frame that will be used as a string
10543	Call an internal function .
10544	Returns the next stack frame .
10545	backtracking
10546	Add a trail to the list
10547	Uninds a reference to a trail .
10548	Tidy up to the trail .
10549	unify two words
10550	Unify a constant .
10551	Prints a slot .
10552	Generates a random start state object .
10553	Checks if the given puzzle is solved .
10554	Returns a new child board with the given operator .
10555	Returns an iterator which can be used to iterate over all possible operators .
10556	Returns a string representation of the board .
10557	Swap a tile to an illegal location .
10558	Swap two occupied tiles
10559	Converts a string to a list of characters .
10560	Creates an empty state from a character list .
10561	Convert a log record to a log message .
10562	Convert a logging level to a log4j .
10563	Requeue an element .
10564	Requeue an element to the queue .
10565	Increments the size of the queue .
10566	Decrement the size of the queue .
10567	Called when the size of the size of the threshold is greater than the threshold .
10568	Returns the names of all contexts in the context .
10569	Returns the names of all bindings in the context .
10570	Add a property to the environment .
10571	Removes a property from the environment variable .
10572	Gets the garbage collection of garbage collection .
10573	Match a literal
10574	Resolve a mixin .
10575	Pushes a variable reference to the stack .
10576	Sets the maximum height for the given row .
10577	Updates the maximum column width .
10578	Executes the given action .
10579	Returns a new node with the given successor .
10580	Performs an action .
10581	Submits a built - ins in the given clause .
10582	Initialise the symbol table .
10583	Runs the top level checker .
10584	Returns a string representation of the list .
10585	Computes the comparison between two numbers .
10586	Sets the running thread .
10587	Sets the running thread .
10588	Called when the application is terminated .
10589	Inserts an element into the heap .
10590	Convenience method to ceiling the number of log 2 .
10591	Update the minimum element .
10592	Compares two nodes .
10593	Inserts nodes into a new node .
10594	Restart the cache .
10595	Returns a set of objects matching the given method .
10596	Returns a collection of elements that match the given method .
10597	Find all solutions in the given collection .
10598	Returns the next element in the sequence .
10599	Restore the values from the given object .
10600	Returns the value of the specified property .
10601	Sets the value of a multi type data .
10602	Associates a property .
10603	Capture the memento .
10604	Removes the first element from the queue .
10605	Convert the input modifiers to a string .
10606	Converts a string to an integer .
10607	Converts a string to a date .
10608	Checks if a string is a date .
10609	Checks if a string is a time .
10610	Determine if a string is a date time .
10611	Returns a token source for the given string .
10612	Returns a token source for the given file .
10613	Returns a token source for the input stream .
10614	Returns true if the given instruction is a constant .
10615	Determine if the given instruction is a variable
10616	Determine if the given instruction is non - argument
10617	Get the children of this node .
10618	Returns the argument at the given index .
10619	Get the children of this function .
10620	Returns a string representation of the arguments .
10621	Retrieve the summary .
10622	Retrieve records from the given schema .
10623	Execute query .
10624	Emits a byte buffer .
10625	Sets the basic type .
10626	Consumes the given input stream .
10627	Prints a variable binding .
10628	Expand a set of solutions to a map
10629	Runs the process .
10630	Reads a packet from the server .
10631	Returns the current time .
10632	Calculates the uuid for this timestamp .
10633	Update the track info .
10634	Update the playlist .
10635	Renders the final output .
10636	Handles a resource request .
10637	Handles the event request .
10638	Fires start music request .
10639	Initializes the parser .
10640	Start the stream .
10641	Shuts down the connection .
10642	Resets the parser .
10643	Parses incoming packets .
10644	Process a packet .
10645	Sets the option .
10646	Creates a new chat with the specified user .
10647	Initialize this object .
10648	Resets this object .
10649	Sets a property .
10650	Adds a filter to the list .
10651	Process request .
10652	Resets all properties .
10653	Initialize the socket .
10654	Sends a packet to the server .
10655	Returns the next packet .
10656	Open the stream .
10657	Gets the information about the descriptor .
10658	Returns true if the given descriptor contains the given descriptor .
10659	Adds a callback to the event lifecycle callback .
10660	Shuts down the timer .
10661	Compares two files .
10662	Clean up a direct byte buffer .
10663	Returns true if entry is valid .
10664	Returns a null key .
10665	Compares two objects .
10666	Returns the entry for the given key .
10667	Resizes the table .
10668	Adds all mappings to the given map .
10669	Removes the specified key from the map .
10670	Returns the entry for the given key .
10671	Removes an entry from the map .
10672	Adds an entry to the table .
10673	Creates delegate delegate to delegate .
10674	Encode a binary value .
10675	Encodes a byte array into a hexadecimal string .
10676	Encodes the given string as Base64 .
10677	Encodes a byte array into a Base64 encoded string .
10678	Iterate over the collection .
10679	Sets the controller controller .
10680	Sets the controller .
10681	Sets the controller changeable controller .
10682	Sets the controller controller .
10683	Broadcast a list of available Playlists .
10684	Handle command resources .
10685	Handle volume .
10686	Handles the jump command .
10687	Handles select track .
10688	Returns the cache for the given thread name .
10689	Get a request cache .
10690	Gets alt field .
10691	Filters a map from the source map .
10692	Returns the shard path for a shard .
10693	Adapts the given object to a JCR session .
10694	Invokes a method on the target object .
10695	Deletes the content of the given path .
10696	Update an object with the specified properties .
10697	Sets the ping interval .
10698	Schedules ping task .
10699	Adds all options .
10700	Checks if the option has been used .
10701	Parse the command line arguments .
10702	Prints usage .
10703	Parse the command line arguments .
10704	Initializes the connection .
10705	Send a start request to the server .
10706	Returns the compression handler .
10707	Request stream compression .
10708	Start compression .
10709	Notifies that the connection has been closed .
10710	Notifies the reconnection .
10711	Register a SASL mechanism .
10712	Returns a list of SASLMechanism .
10713	Returns the outputPluginBehavior
10714	Log an INFO message .
10715	Logs an error .
10716	Logs a message .
10717	Create a start event
10718	Create start event .
10719	Notifies all listeners .
10720	Returns true if the given resource has a given resource
10721	Returns true if all resources are contained in the given source .
10722	Returns true if the given list of resources contains a given list of resources .
10723	Provides a list of resources for the given resourceIDs .
10724	Gets the cached map .
10725	Get cache key .
10726	Removes the cached object from the cache .
10727	Put the item into storage .
10728	Returns a map containing all the files in the classpath .
10729	Includes a file .
10730	Include a jar file .
10731	Adds a SASL mechanism to the server .
10732	Adds a set of SASL mechs to the server .
10733	Creates the debug messages .
10734	Activates the secure post processing .
10735	Register common events .
10736	Registers an event listener .
10737	Registers an event ID .
10738	Performs a blocking operation .
10739	Unregisters an event ID .
10740	Checks if the given event is available .
10741	Create a new dse session .
10742	Create a player error
10743	Start playback .
10744	Stop player playback
10745	Executes a command
10746	Create a playlist from the provider
10747	Create a playlist answer from a playlist .
10748	Appends post fix .
10749	Add a query parameter .
10750	Add a query parameter .
10751	Add a query parameter .
10752	Add a query parameter .
10753	Get the Playlist from an event model
10754	Launch the Arduino button pressed .
10755	Checks if the start button is running .
10756	Checks if the given URL exists .
10757	Browse the browser button .
10758	Create an image from the given path .
10759	Main entry point .
10760	Sets this array with the specified values .
10761	Exports this configuration to a HashMap .
10762	Returns the value at the given index .
10763	Get the value associated with a key .
10764	Returns the value as an integer .
10765	Returns the value as a double .
10766	Returns the value as a string .
10767	Create a command resource .
10768	Verifies that the command is valid .
10769	Verifies that the capabilities are available .
10770	Verifies the given command .
10771	Executes the given batch of statements .
10772	Returns all subclasses of the given class .
10773	Returns all subclasses of a given class .
10774	Searches the given class and returns the set of classes .
10775	Searches the given directory in the given directory .
10776	Search for a jar file .
10777	Returns a list of resources .
10778	Returns the total number of maps .
10779	Process a packet .
10780	Get volume from event model
10781	Issue an error with a page .
10782	Create an error response .
10783	Checks if the given entity is a target .
10784	Sets the login flag .
10785	Decorate a Set .
10786	Sets the name of this group .
10787	Update state
10788	Returns a collection of groups that belong to this roster .
10789	Appends RSM element to query element
10790	Parse RSM data .
10791	Filters a list of objects from the list of objects .
10792	Create a leave event .
10793	Reload the roster .
10794	Create a roster entry .
10795	Returns a collection of all entries contained in the roster .
10796	Returns the presence of the presence of a user .
10797	Sets offline presence .
10798	Fires a roster changed event .
10799	Set the digest .
10800	This method is used to create a resource .
10801	Create a player request .
10802	Get time passed in event model
10803	Registers listener for updates .
10804	Initialize the properties
10805	Reloads the properties file .
10806	Parse a StreamError .
10807	Parse mechanisms .
10808	Parse compression methods .
10809	Parse a Packet extension .
10810	Decodes a string value .
10811	Verifies the given event model .
10812	Get the play state from a resource model
10813	Returns the secret key for the given subdomain .
10814	Checks if the given subdomain is allowed .
10815	Adds a new entry to the map .
10816	Returns the key set .
10817	Returns a collection of values .
10818	Removes all entries from the map .
10819	Returns the HashEntry for the given key .
10820	Returns the hash code for the given key and value .
10821	Creates an entry for the hash entry .
10822	Check whether the presence indicator is present .
10823	Sets whether the scene is present .
10824	Updates the presence .
10825	Send a message to the collector .
10826	Generate script .
10827	Initialize the output directory .
10828	Loads properties from a file .
10829	Writes a file to a file .
10830	Get the progress
10831	Decorate the given collection .
10832	Returns a collection of service resolver .
10833	Gets the configuration .
10834	Returns thread pool .
10835	Create a stop music .
10836	Verifies that the stop music is stopped .
10837	Gets a DSE cluster .
10838	Adds a connection listener .
10839	Add a packet listener to receive packets .
10840	Add a packet listener to receive a packet .
10841	Notifies all listeners that a packet has been sent .
10842	Adds a packet interceptor to the pipeline .
10843	Fires all registered interceptors .
10844	Convert a parameter to an object .
10845	Called when a connection is lost .
10846	Returns the id of the current thread .
10847	Returns true if the node is valid .
10848	Gets the key for the given value .
10849	Gets the value at the specified index .
10850	Lookup a node at the given index .
10851	Lookup a node in the tree .
10852	Compares two objects .
10853	Returns the least node at the given index .
10854	Returns the most node at the given index .
10855	Returns the next greater than the given node .
10856	Returns the most recent node at the given index .
10857	Returns the lowest node at the given index .
10858	Copies the color from to a node .
10859	Returns true if the node is red .
10860	Returns true if the node is blacklisted .
10861	Gets the grand parent .
10862	Returns the parent node at the given index .
10863	Returns the right child of the given node .
10864	Returns the left child of the given node at the given index .
10865	Rotates the left child at the given index .
10866	Rotate a node .
10867	Determine the black tree .
10868	Performs RedBlack delete .
10869	Checks that the given object is not null .
10870	Insert a new value into the map .
10871	Checks if the given key exists in the map .
10872	Determines whether the given value contains a value .
10873	Returns the value associated with the specified key .
10874	Removes the specified key from the map .
10875	Removes all entries from the map .
10876	Returns a set of keys in this map .
10877	Returns a collection of values contained in this map .
10878	Returns a filtered set of all entries in this map .
10879	Copies all entries from this map into a new map .
10880	Removes expired entries from the cache .
10881	Removes the cache from the cache .
10882	Activates the trust manager .
10883	Gets a player request for a playlist .
10884	Initializes a roster store .
10885	Open a roster store .
10886	Returns a collection of IP addresses that match the given address .
10887	Returns the address of a subnet .
10888	Export this object to a HashMap .
10889	Import a track info from a hash map .
10890	Adds all the given classes .
10891	Execute application .
10892	Prints the list .
10893	Prints usage information .
10894	Main entry point .
10895	Create a MuteEvent from source and target
10896	Create a MuteEvent from a Identification object .
10897	Gets the schema by name .
10898	Writes a file to a file .
10899	Returns true if the script is in the jar file .
10900	Adds an option .
10901	Gets the schema fields .
10902	Returns the field with the given name .
10903	Returns the package name of the package .
10904	Map content to values .
10905	Create an event listener
10906	Sets the current state .
10907	Iterate over the specified collection .
10908	Performs an iteration .
10909	Get track info from event model
10910	Exports this instance to a HashMap .
10911	Imports a resource from a resource model .
10912	Returns an image of the error image
10913	Get the image
10914	Gets the response from a URL .
10915	Reverses the source map from source map .
10916	Multipesian multiplication function .
10917	Start the daemon .
10918	Returns the object to the pool .
10919	Creates ended event .
10920	Get the current track .
10921	Updates a new Playlist with the specified tracks .
10922	Shuffles a playlist .
10923	Verifies that the capabilities can be played .
10924	Export this instance to a HashMap
10925	Escapes a string .
10926	Called by the server .
10927	Serializes this object to a JSON stream .
10928	Runs the pipeline .
10929	Handles event .
10930	Join all queues .
10931	Sets a property .
10932	Removes a property .
10933	Adds a principal .
10934	Removes a principal .
10935	Remove the root window closing .
10936	Called when the user has been encountered .
10937	Handles presence event .
10938	Returns true if the resource model is permanent .
10939	Sets the name of this roster .
10940	Returns true if the given key contains the given key .
10941	Returns true if the HashMap contains the specified value .
10942	Adds a new value to the map .
10943	Removes all entries from this HashMap .
10944	Returns the hash code for the given object .
10945	Returns true if keys are equal .
10946	Returns true if two values are equal .
10947	Ensures that the specified capacity is available .
10948	Calculates the new capacity .
10949	Creates an iterator over the entries .
10950	Load a row from a stream
10951	Register the module
10952	Initialize the AddOn .
10953	Notifies the reconnection failure .
10954	Notifies all reconnections in the connection .
