0	Convert sina XML to a list of URLs .
1	Download a website .
2	downloads a file from a website
3	Format text with ANSI escape codes .
4	Print a log message
5	Log a message and exit .
6	Print a message and exit .
7	Detect OS .
8	Download a video by its ID .
9	get info from xml
10	get video url
11	Get the M3U URL
12	Validate given text .
13	Downloads the cbs file and downloads it
14	Download a stream
15	download video by id
16	Returns a list of strings matching patterns
17	Parse a query parameter .
18	Get content from url .
19	POST content to url
20	Parse hostname and port .
21	Get roomid by URL
22	Get the title for the topic
23	Download WANmen files
24	download wanmen in json_content
25	Check if a task has a task .
26	Get the event buffer .
27	Creates a new snowflake connection
28	Get AWS credentials
29	Return the value of a field
30	Copy the SQL to the database
31	Bulk dump a table
32	Execute the upload .
33	Get the maximum partition for a table .
34	Get a mysql connection
35	Print the current state of a task
36	Restart worker threads
37	Get client .
38	Translate data to target_language .
39	Retrieve an instance .
40	Create an instance .
41	Patch an instance .
42	Delete an instance .
43	Get a database .
44	Creates a new database .
45	Patch a database .
46	Delete a database .
47	Export an instance .
48	Starts the sql proxy process .
49	Stop the cloud proxy .
50	Returns the version of the sql proxy .
51	Create a connection to the database .
52	Retrieve a connection
53	Delete the database .
54	Returns a CloudSqlProxyRunner instance
55	Get the database hook
56	Cleanup database hook .
57	Reserve a free TCP port .
58	Normalize the job id .
59	Get an error code from an error .
60	Delete all DagRun objects
61	Delete all task instances
62	Set the state of all DAGs .
63	Print performance statistics .
64	Check the status of all tasks .
65	Invoke the Lambda function
66	Creates evaluation operations .
67	Create directories in path .
68	Convert string to float if possible .
69	Make a naive datetime .
70	Make a naive datetime .
71	Create datetime .
72	Get a connection to druid broker
73	Return a requests . Session object .
74	Sends a request to the given endpoint
75	Check the response .
76	Run a prepped request and check response .
77	Context manager .
78	Decorator to add a session to the decorated function .
79	Reset the database .
80	Return the exception message .
81	Wrapper for fetch_records .
82	Get a Pandas DataFrame from the database .
83	Run a SQL query .
84	Insert rows into table .
85	Create a Cosmos Cosmos client .
86	Checks if a collection exists .
87	Creates a collection .
88	Check if a database exists .
89	Creates a new database .
90	Deletes the specified database .
91	Delete a collection .
92	Insert a list of documents
93	Delete a document
94	Get a single document
95	Gets a list of documents in a database .
96	Get a function by name .
97	Creates a new function .
98	Update a function .
99	Uploads a function to Google Cloud .
100	Deletes a function by name .
101	Return a list of statuses for all dependencies .
102	Returns True if all dependencies are met
103	Return a list of all failure reasons .
104	Parse S3 config file
105	Retrieves the session credentials .
106	Get a connection .
107	Flush the buffer .
108	Return the filename of a zipfile .
109	Return a list of file paths .
110	Construct a TaskInstance
111	Launches the DagFileProcessor .
112	Send the termination message .
113	Exit the DAG processor .
114	Start the DagFileManager .
115	Start the worker process .
116	Start the DAG .
117	Refresh DAG directory .
118	Print stats to the log .
119	Clear missing import errors .
120	Log file processing statistics .
121	Set the file_paths .
122	Wait until all files are finished .
123	Heartbeat process processing .
124	End the process .
125	Creates a new SSH client
126	Creates a new transfer job .
127	Retrieves information about a transfer job .
128	List all transfer jobs .
129	Updates a transfer job .
130	Delete a transfer job .
131	Cancels a transfer operation .
132	Pause a transfer operation .
133	Resume a transfer operation .
134	Wait for a transfer to be completed
135	Returns a list of TaskReschedule objects for the given task instance .
136	Return the number of open slots .
137	Run a command and return the output .
138	Remove an option from the airflow configuration .
139	Get airflow section
140	Allocates the keys in the project .
141	Begin a transaction .
142	Commit a project .
143	Perform a lookup operation .
144	Rollback a transaction .
145	Run a query .
146	Get an operation by name .
147	Delete an operation .
148	Poll until the operation is done .
149	Exports entities to a bucket .
150	Import file from storage .
151	Publishes a message to a target .
152	Returns the name of the hostname .
153	Connect to language service .
154	Analyzes a document .
155	Annotate a document .
156	Classify a document .
157	Returns a list of template fields for the given full name .
158	Role for template field .
159	Disposes the database connection pool .
160	Prepare classpath .
161	Check if task_id exists
162	Detect whether the credential variable is in the configuration .
163	Convert an Alchemy object to a dictionary .
164	Yield successive chunks from a list .
165	Reduce an iterable into chunks .
166	Chain multiple tasks together .
167	Pretty print table .
168	Render the log filename .
169	Get a connection to the API .
170	Wait for an operation to complete .
171	Coerce the content to a string .
172	Handle an operator execution .
173	Run the pig .
174	Fetch the state of a celery task
175	Return the number of tasks per process .
176	Get the number of tasks per fetch process .
177	Set the value of the variable
178	Return a connection to the ml client .
179	Create a new ML engine .
180	Retrieves a single job .
181	Wait for a job to finish .
182	Creates a new version .
183	Set the default version
184	Get a list of versions for a project .
185	Deletes a version .
186	Creates a model in the specified project .
187	Get a model by name .
188	Writes batch data to DynamoDB .
189	Integrate the executors modules
190	Get the default executor .
191	Get an executor
192	Called when an error occurs
193	Get a mssql connection
194	Trigger a dag .
195	Delete a dag .
196	Get task information .
197	Get all pools .
198	Create a new pool .
199	Delete a pool .
200	Create or update a container group .
201	Retrieves the state and exit code for the specified instance .
202	Gets the messages for the specified instance .
203	Get logs for a container .
204	Delete a container group .
205	Check if a container exists .
206	Decorator to apply default parameters .
207	Construct the ingest query
208	Get a message from the Redis server .
209	Find all DagRuns .
210	Get all task instances .
211	Get TaskInstance
212	Get the previous DagRun .
213	Get the previous scheduled dag run .
214	Update the state of the task .
215	Verify the integrity of the workflow .
216	Perform a jenkins request .
217	Convert a task context into a dictionary .
218	if conditionally set conditionally
219	Send a metric .
220	Query a metric .
221	Get the dag associated with the given dag_id .
222	Kills the given zombies .
223	Bag of a DAG
224	Collect all DAGs in the given dag folder .
225	Return a report of the DAG stats .
226	Add datetime to datetime .
227	Format a datetime object .
228	Check if this file exists .
229	Return True if this file is a valid directory .
230	Clear task instances .
231	Return the number of attempts to run .
232	Generate Airflow command .
233	Get the current task state .
234	Record the task instance as failed
235	Refresh the TaskInstance from the database .
236	Clear the XCom data .
237	Return the key for this object .
238	Check if this task is done .
239	Returns the datetime of the next retry .
240	Returns True if the job is ready to be ready .
241	Check if the task pool is full .
242	Retrieves the DagRun object .
243	Push value to XCom .
244	Execute XCom .
245	Initialize the run context
246	Closes logging .
247	Get a connection to the cloud
248	Start an instance .
249	Set machine type .
250	Get an instance template
251	Insert an instance template .
252	Get instance group manager manager .
253	Patch an instance group manager .
254	Wait for an operation to complete .
255	Check if a bucket exists .
256	Creates a bucket
257	Check if a bucket exists .
258	List prefixes for a bucket .
259	List keys in a bucket .
260	Check if a key exists .
261	Get an object from S3 .
262	Reads the contents of a key .
263	Select a key from S3
264	Check if a wildcard key exists .
265	Get a key from S3 .
266	Upload a file to S3
267	Load data from a string .
268	Upload a file to S3
269	Uploads a file - like object to S3
270	Copy an object to S3 .
271	Query cassandra using cassandra .
272	Convert a value into a dictionary .
273	Sends an email .
274	Creates a speech client .
275	Recognize audio .
276	Execute the query .
277	Load entry point plugins
278	Validate a plugin object .
279	Skip a list of tasks
280	Establish a connection to the store .
281	Check if a file exists .
282	Upload a file
283	List files .
284	Execute the query
285	Uncompress a file into a temporary directory .
286	Query the mssql database
287	Decorator to add metrics to cli action logging .
288	Build the metrics for the given function
289	Create a cgroup from a path .
290	Delete a cgroup .
291	Parses the given hostname .
292	Perform an API call .
293	Get a Salesforce connection
294	Make a query to the database
295	Describe an object .
296	Get the available fields for an object
297	Get object from Salesforce
298	Convert a column to a timestamp
299	Write query results to a file .
300	Return MongoClient object .
301	Get mongo collection
302	Replace multiple documents .
303	Returns True if the email has a mail attachment .
304	Retrieve mail attachments by name .
305	Download the mail attachments for a given name .
306	Get attachments by name .
307	Get the file and payload
308	Put records in the queue
309	Return the status of a task instance .
310	Sends an email .
311	Sends an email using SMTP .
312	Convert datetime value to UTC .
313	Check if a blob exists .
314	Check if a given blob exists .
315	Create a blob from a string .
316	Reads a file into text .
317	Delete a blob
318	Emulate MLSD .
319	Get FTP connection .
320	List files in directory
321	Retrieve a file from FTP .
322	Stores a file from the remote storage .
323	Get the modification time of a file .
324	Executes the DiscordWebhookHook .
325	Get a connection object .
326	Check if a directory exists .
327	Check if a file exists .
328	List files and files .
329	Creates a new directory .
330	Load a file from the server .
331	Create a file from a text file .
332	Load a file from a stream .
333	Get storage client .
334	Copy a blob to another bucket .
335	Download an object from a bucket .
336	Upload a file to a bucket
337	Check if a blob exists .
338	Check if an object has been updated
339	Delete a blob .
340	List blobs in a bucket .
341	Get the size of an object .
342	Retrieve the checksum of a blob .
343	Retrieve the MD5 hash of an object
344	Create a bucket .
345	Compose one or more objects in a bucket .
346	Check if secondary training status changed .
347	Returns a string representing the secondary training status message .
348	Upload files to S3 using S3 .
349	Configure S3 resources
350	Check if an S3 URL exists
351	Get a log client .
352	Create a training job .
353	Create a new hyperparameter tuning job .
354	Create a new transform job .
355	Create an endpoint
356	Describe a training job .
357	Check the status of a SageMaker job .
358	Check the status of a training job .
359	Starts the dataflow hook .
360	Run migrations .
361	Run migrations .
362	Delete an instance .
363	Creates an instance .
364	Creates a table .
365	Delete a table .
366	Update a cluster .
367	Prepare the hive command
368	Prepare hiveconf .
369	Load data from Pandas DataFrame .
370	Create a hql file .
371	Creates a hmsh client
372	Check if a named partition exists .
373	Check if a table exists .
374	Get a connection to the hive server
375	Return the results as a dict
376	Write the results to a CSV file .
377	Execute a query and return the results
378	Return a pandas dataframe from the results
379	Get client .
380	Get the endpoint
381	Send Dinging message
382	Bind parameters to an operation .
383	Escape a string .
384	Cast string field to bq_type
385	Validate the value of the given key .
386	Get a BigQueryConnection object .
387	Get the BigQuery service .
388	Checks if a table exists .
389	Creates an empty table .
390	Patch a table .
391	Cancels the running job .
392	Run a table delete .
393	Run a table .
394	Grant view access to a dataset .
395	Get a dataset .
396	Get a list of datasets .
397	Insert rows into a table .
398	Run an operation .
399	Execute a sequence of parameters .
400	Returns the next result of the query .
401	Execute a postgres query
402	Create intermediate directories .
403	Create a queue
404	Send a message to a queue .
405	Run the command .
406	Finalize the config file .
407	Main entry point .
408	Build the HTML header .
409	Build SVG container
410	Build the JSSART chart
411	Create x axis
412	Create y axis
413	Return a connection to the database
414	Logging decorator .
415	Decorator for gzipped requests .
416	Get the last DagRun
417	Create a dag .
418	Execute the message
419	Returns a json response
420	Open a file .
421	Generate a cache key .
422	Get a VideoIntensityService client .
423	Annotate a video .
424	Get API key .
425	Returns a requests session
426	Execute the API endpoint
427	Build a dict of opsgenie s payload .
428	Execute the alert hook .
429	Return a connection object
430	Runs a query
431	Returns the state of the query execution .
432	Check the status of the query .
433	Return a pysftp connection
434	Handle a rate limit exception .
435	Make a call to Zendesk
436	Fetch partitions from a table .
437	Get information about a table .
438	Get the location of a table .
439	Returns the status of a cluster .
440	Deletes a cluster .
441	Describe snapshots for a cluster .
442	Restores a cluster from a cluster
443	Creates a snapshot of a cluster .
444	Execute the API call
445	Create a new job flow
446	Filter files by size .
447	Filter files with ignored extensions
448	Execute the query
449	Get a pool .
450	Create a new pool .
451	Delete a pool .
452	Convert a dictionary to a protobuf .
453	Wait for an operation to finish .
454	Get the details of an operation .
455	Append a label to a cluster_labels .
456	Create a cluster .
457	Get a cluster
458	Get Discordhook endpoint
459	Builds the message to be sent to the user .
460	Execute the webhook
461	Encrypt a plaintext .
462	Import a table .
463	Imports the given query .
464	Exports a table .
465	Get a connection to the speaker .
466	Synthesize audio .
467	Closes logging .
468	Return a list of init containers .
469	Get environment variables .
470	Get worker secrets .
471	Get security context .
472	Get extra links
473	Perform a heartbeat .
474	Launch a parallel process .
475	Launches the DagFileProcessor process .
476	Return True if the job is done .
477	Exit process .
478	Update the import errors .
479	Process a DAG run .
480	Change the state of a task instance .
481	Get the number of concurrency maps .
482	Change the state of a task_instances .
483	Enqueue tasks with queued state
484	Find all executable task instances in simple_dag .
485	Change the state of all tasks that failed to execute .
486	Process events from the database .
487	Process a file .
488	Update the status of the task status .
489	Manage the executor state .
490	Return the DAG run for the given date .
491	Return a dictionary of tasks to run .
492	Populate the status of the trag run for the given run_date .
493	Set all dag runs to failed .
494	Execute the DAG run .
495	This method is called when the job runs .
496	Get client .
497	Get an instance .
498	Apply a function to an instance .
499	Creates an instance .
500	Updates an instance .
501	Delete an instance .
502	Get a database .
503	Create a database .
504	Update a database .
505	Delete a database from an instance .
506	Check if the attachment exists .
507	Prepare additional properties .
508	Connect to the cluster
509	Check if a table exists .
510	Check if a record exists .
511	Build the track status command
512	Submit an application .
513	Process Spark submit logs .
514	Process the Spark driver log .
515	Get the task runner .
516	Wait for the job to finish .
517	Execute a mysql query
518	Configure a csv file .
519	Write the local schema to the database .
520	Return the column type dict .
521	Map mysql_type to strings
522	Execute the SQoop
523	Decorator to add a lineage to the pipeline .
524	Parse the dejson payload
525	Get a list of dates between start_date and end_date
526	Scale time units
527	Returns the number of days since the current time
528	Initialize a role in database .
529	Delete a role
530	Get the roles of a user .
531	Return a set of all permissions for the current user .
532	Checks if the user has a role
533	Check if a permission has a given permission .
534	Delete faulty permissions .
535	Merge permission and view menu
536	Update the permissions view .
537	Synchronize the view permissions for the given dag_id .
538	Create permissions for all DAGs
539	Return the Fernet object .
540	Get the partition for this table .
541	Returns an AwsGlueCatalogHookHookHookHookHook .
542	Get a message from the queue
543	Return a connection to the hdfs server .
544	Get a connection to the Airflow WebHDFHook
545	Check if the HDFS path exists .
546	Upload a file to HDFS .
547	Connect to pinot broker
548	Get the connection URI
549	Convert a datetime object to a dictionary .
550	Convert time to a dictionary .
551	Get a redis connection
552	Get data from the database .
553	Runs the given SQL statement .
554	Set the autocommit flag .
555	Insert rows into a table .
556	Serialize a cell into a string .
557	Return the health of the scheduler
558	Get extra links
559	Get cloudant session .
560	Execute SlackhookHook .
561	Get credentials .
562	Return an authorized HTTP .
563	Decorator to catch http exceptions .
564	Fallback method to default project_id
565	List of unfinished tasks .
566	Prepare the connection command
567	Convert pic to torch .
568	Normalize a tensor .
569	Resize a PIL image .
570	Pad image with padding .
571	Crop an image .
572	Resize an image .
573	Flip an image .
574	Compute the perspective of a PIL Image .
575	Flips an image .
576	Crops the given image .
577	Adjust the brightness of an image .
578	Adjust the contrast of an image .
579	Adjust the saturation of an image .
580	Adjust the hue of an image .
581	Adjust a PIL image .
582	Rotate an image .
583	Transform an image to a PIL image .
584	Convert an image to grayscale .
585	Save tensor to disk .
586	Find classes in a directory
587	Read an image file
588	Reads an info file .
589	Read matches files .
590	Compute accuracy .
591	Setup print function .
592	Download a URL to a file .
593	List all directories .
594	List files with suffix .
595	Download a file from Google Drive
596	get parameters from an image
597	Get parameters
598	Generate random parameters .
599	Returns a function that computes parameters .
600	Generate parameters
601	Download and verify the file .
602	Download all the files in the folder .
603	Download and save the raw files .
604	Get the current theme name .
605	Run autocompletion .
606	View preferences page .
607	Get the list of themes
608	Parse the full search query
609	Parse and return the response
610	Gradient function .
611	Multivariate multivariate distribution .
612	Calculate the log probability .
613	Benchmark HMC .
614	Decorator to expand docstring attributes .
615	Generate a name for a distribution .
616	Build a custom RVs for the given distribution .
617	Convert distribution into a random variable .
618	Create a random variable for distribution .
619	One step of the model .
620	Calculate the forecast .
621	Maximize x along axis .
622	Fail if x is finite .
623	Fail if x is greater than the given rank .
624	Calculate event size .
625	Evaluate a single - hot function .
626	Getter function for convert_to_tensor function .
627	The size of the mixture family .
628	Get the next interceptor .
629	A decorator that wraps the decorated function .
630	A convenience wrapper around tape .
631	Generate a toy logistic data .
632	Plots the decision curve .
633	Build the input pipeline .
634	Check the map_values .
635	Traces a state in a state .
636	Call the given function with the given arguments .
637	Call a function with the given arguments and gradient .
638	Converts from_structure to_structure .
639	Transform a log - likelihood function into a context .
640	Perform a leapfrog step .
641	Perform metropolis hastings step .
642	Simulate the Hamiltonian Monte Carlo state .
643	Transform a tensor .
644	Create a TensorFlow Transformer .
645	Convert x to Tensor .
646	Creates a scale operator .
647	Creates a random walk function .
648	Creates a random walk function .
649	Expand x to event rank .
650	The entropy lower bound .
651	Convert logits to tf .
652	Validate args and labels .
653	Check if TensorFlow is installed .
654	Compute logistic regression .
655	Compute features and labels .
656	Cholesky covariance .
657	Compute the standard deviation of x .
658	Calculate the variance .
659	Make a list of positive axis labels .
660	Squeeze x along axis .
661	Compute the tensor .
662	Inverse of inv .
663	Creates a tensor transition matrix .
664	Gradient noise transition .
665	Generate a sample of Halton sequences .
666	Get permutations for num_results .
667	Get the indices for the tensor .
668	Calculate base expansion size .
669	Return a list of all primes below n .
670	Return the eps for a given dtype .
671	Hager algorithm .
672	Fix a step size .
673	Perform a bracket search .
674	HagerZHangLine search .
675	Internal wrapper for the inner search .
676	Prepare arguments for evaluation .
677	Convert a list of values into a printable .
678	Calculate the quadrature of a polynomial .
679	Compute the softmax quantiles .
680	Check if param is a batch of tensors .
681	Determine the shape of the batch event .
682	Interpolate grid locations .
683	Interpolate a grid .
684	Scale a linear operator .
685	Concatenate tensors .
686	Compute the log - vector matrix .
687	Compute the log - sum of a tensor .
688	r Compute the tensor matrix .
689	Extract log probabilities .
690	Marginalized log probabilities .
691	Proximal posterior posterior posterior .
692	Posterior mode .
693	Choose random directions .
694	Sample next step .
695	Call fn if fn is a float .
696	Right padding .
697	One step implementation .
698	Build a tf . prior .
699	Builds the factorized variance distribution .
700	Minimize a loss_fn .
701	Compute the mean and variance of a time series .
702	Computes the initial value of a masked time series .
703	Broadcast batch shape .
704	Takes a list of distributions and a set of distributions .
705	Summarize distributions .
706	Calculate empirical statistics .
707	Expand the trailing dimension to the last dimension .
708	Convert observed time series to observed time series .
709	Mix over posterior draws .
710	Return the range of the interval .
711	Return a function that computes the statistic for all distributions .
712	Returns a function signature for a distribution function .
713	Resolves distribution names in dist_names .
714	Get required arguments for a function .
715	Computes the KL divergence between two distributions .
716	Build the graph .
717	Resolve the distribution graph .
718	Compute the entropy of all distributions .
719	Decorator to check if x is in dist .
720	Summarize sequences .
721	Visualize reconstruction .
722	Visualize inputs .
723	Summarize distribution parameters .
724	Summarize inputs .
725	Create a multivariate Normal Diagram .
726	Return the zero state of the input batch .
727	Call lstm .
728	Call the model .
729	Generate the likelihood .
730	Reconstructs input .
731	Sample static prior .
732	Sample dynamic prior .
733	The batch shape of the model .
734	Tensor of batch shape .
735	Make a state space model .
736	Sample a prior time space .
737	Compute minimum event ndims .
738	Gets the size of a vector .
739	Wrapper around argsort .
740	Sort an array .
741	Convert x to ndtr .
742	One - dimensional tensor .
743	Create ndtri .
744	Log - ND Trunc .
745	Logical series .
746	Calculate the error .
747	Computes the log_cdf_laplace .
748	Compute the log probability of text messages .
749	Benchmark text messages .
750	Determines if the marginal GP is univariate .
751	Returns the marginal distribution .
752	Get the index points for this GaussianProcess instance .
753	Create an IAF layer .
754	Perform one step of the kernel .
755	Returns bootstrap results .
756	Returns the outer squared difference between x and y .
757	Compute the value and batch_jacobian .
758	Prevent the second derivative of x .
759	Compute the distribution of x .
760	Split a covariance .
761	Decompose model from posterior distribution .
762	Decompose observed time series .
763	Decompose a forecast distribution .
764	Convert a dense tensor to a SparseTensor .
765	Decorator to apply operator operator .
766	Return a string representation of a tensor .
767	TensorShape .
768	Returns the sample shape .
769	Sample value .
770	Evaluate the expression .
771	Return the numpy array as numpy .
772	r Conjugate the norm of a prior .
773	Create a default MLP template .
774	Calculate unit norm .
775	Log - norm of x .
776	Log normalization .
777	Return the common dtype of a list of args .
778	Create a function that returns a summary statistic .
779	Broadcast tensor to target_tensors .
780	PDF at peak .
781	Calculate the effective sample size .
782	Calculate the effective sample size .
783	Reduce a single state reduction .
784	Return the size of x along axis .
785	Helper function for _cast_arg .
786	Lognormalization scheme .
787	Compute quantiles .
788	Return a new _Mapping .
789	Return a new _Mapping object removed from this mapping .
790	Merge two values .
791	deep_tuple
792	Loubles tensor .
793	Find the best interval indices .
794	Generate slice bounds by doubling double precision .
795	Sample from chain with shrinkage .
796	Slice slice sampler .
797	Returns a set of values for a random variable .
798	Return the log - probability function for a model .
799	Get inputs from source_kwargs .
800	Multi - layer convolution layer .
801	Build a tree .
802	Decorator to check if value is None .
803	Returns True if there is no u - turn .
804	Leapfrog model .
805	Calculate the log probability of the joint log probability .
806	Generate random Bernstein -lli tensor .
807	Creates default loc .
808	Default function for default mean field norm .
809	Default multivariate normal function .
810	Deserialize a function .
811	Serialize a Lambda function .
812	Broadcasts a structure from from_structure to one .
813	Convert a nested structure to Tensor if possible .
814	Convert args to tensor .
815	Apply a function to the given arguments .
816	Return a dict of attributes for TensorLike .
817	Creates a mixture prior .
818	Pack images .
819	Download a file to the root directory .
820	Build fake input functions .
821	Validate the block sizes .
822	Check if inputs are broadcast .
823	Truncate multivariate normal .
824	Bernoulli .
825	Create a normal layer .
826	Poisson distribution .
827	Mala Euler method .
828	Calculate drift parts .
829	Computes log acceptance correction .
830	Call the volatility function with the given state .
831	Helper function to broadcast volatility .
832	Make AR transition matrix .
833	Compute sample shape .
834	Apply fn to x .
835	Call fn and return the result .
836	Deprecated .
837	Generate samples from the joint distribution .
838	Allocate latent Dirichlet allocation .
839	Create Dirichlet network .
840	Return a list of string representations of a set of topics .
841	Loads newsgroups dataset .
842	Build fake input functions .
843	Build the inputs for the vocab .
844	Minimize the gradient .
845	Add control variables to the codebook .
846	Saves numpy arrays of images
847	Visualize training images .
848	Loads the Bernoulli mist dataset .
849	Convert a dtype to a numpy dtype .
850	Return a tftype .
851	Check if dtype is a boolean .
852	Check if dtype is complex .
853	Return the maximum value of a dtype .
854	Get the name of a tftype .
855	Return the size of a dtype .
856	Assert that all items have the same base type .
857	Assert that tensors are the same type .
858	Minimize an objective function .
859	Compute the Nelder - Mead algorithm .
860	Return a function that accepts a simplex and objective values .
861	Expand an objective function .
862	Helper function to extract a contraction function .
863	Shrink a simplex .
864	Replace the replacement at the given index .
865	Check if simplex is converged .
866	Prepare arguments to be passed to the objective function .
867	Prepare arguments for a simplesimplex .
868	Prepare arguments for the graph .
869	Evaluate an objective function .
870	Plots weight factors and standard deviations .
871	Plots out out - out prediction of input data .
872	Build fake data .
873	Get the configuration .
874	Create a TensorFlowConfig from a dictionary .
875	Matrix multiplication .
876	Helper function for standard deviation .
877	Assign a log - mean value to a variable .
878	Make a columnar .
879	Random RADemacher .
880	Random Rayleigh distribution .
881	Pick a boolean condition .
882	Finish the log probability for a single fiber .
883	Finish the probability of a single fiber .
884	Apply rotation to x .
885	Undo batch normalization .
886	Validates BatchNormalization layer .
887	Slice a single param into a single batch .
888	Convert a slice of parameters into a dictionary .
889	Return a new Distribution with the given parameters .
890	Apply slice_overrides to dataset .
891	Batch slice of a distribution .
892	Fit model to model .
893	Returns a function that returns a function that evaluates to a fixed - norm .
894	Prepare arguments for training .
895	Return the number of columns in x .
896	Decorator for static_fn .
897	Copy docstring to original_fn .
898	Get a boolean value .
899	Return the rank of the input shape .
900	Returns a case - insensitive case .
901	Context manager .
902	Calculate the standard deviation of a mixture .
903	Creates a tensor .
904	Make a diagonal scale .
905	Determine the batch shapes from loc and scale .
906	Check if scale is a diagonal scale .
907	Check if a scalar distribution is compatible .
908	Pad mixture dimensions .
909	Picks a boolean condition .
910	Move dimension to destination .
911	Check if x is non - negative integer form .
912	Check if two dynamic shapes are equal .
913	Try to get static value .
914	Check if dt is known .
915	Check if dt is known .
916	Return the largest integer of a dtype .
917	Return the smallest integer in the given dtype .
918	Check if dt is an integer - like object .
919	Check if categorical event shape is valid .
920	Calculates the number of permutations of log combinations .
921	Rotate x .
922	Pick a tensor from cond .
923	Prefer static broadcast shape .
924	Generate a new seed
925	Create a tridiag problem .
926	Get dimension size .
927	Convert a quadrature grid to a tensor .
928	Get the arguments for the parent frame .
929	Expand input to tensor .
930	Creates output_tensor with output_tensor .
931	Validate the rightmost dimensions .
932	Validate perm .
933	Return the shape of the event .
934	Concatenate x and other .
935	Return the dimensions of x .
936	Merges two tensors .
937	Returns a TensorShape with the given rank .
938	Assert that static target_shape and dynamic_shape are equal .
939	Adjust the sample shape .
940	Return a new BackwardPassState object .
941	Perform backward smoothing update .
942	Return a function that returns a single step of the Kalman filter .
943	r Linear Gaussian update .
944	Kalman transition matrix .
945	Return a function that computes the kalman mean and observation mean .
946	Build a function that computes the covariance of the covariance recursively .
947	Build a function that computes the kalman sample .
948	Propagate mean .
949	Propagate covariance matrix .
950	Perform the backward smoothing filter .
951	Sample n timeseries .
952	Calculate posterior marginal marginal marginal marginal values .
953	Compute the joint mean .
954	Compute the joint covariance matrix .
955	Push latent variables to observations .
956	Log normalization .
957	Return the tensor .
958	Rotate samples .
959	Sample from the distribution .
960	Creates a copy of a function .
961	Remove keys with val from a dict
962	Replace dict with OrderedDict .
963	Get samples from dist .
964	Return True if x is a namedtuple .
965	Choose the base case .
966	Choose a subset of the accepted values .
967	Safe sum .
968	Computes the value and gradients .
969	Call fn with result and gradients .
970	Like smart_loop .
971	Perform a trace_fn .
972	Return a new setter that will be replaced with innermost results .
973	Creates a wrapped getter with the innermost results .
974	Enables parameters in a kernel .
975	Replace event shape in input shape .
976	Replace event shape with event shape .
977	Check if the shape is valid .
978	Returns True if any of the converged inputs are true .
979	Get initial state arguments .
980	Perform a line search .
981	Returns a function that restricts along the given axis .
982	Update the position with the next objective .
983	Checks if convergence is converged
984	Broadcast value to target .
985	Calculate the harmonic number .
986	Define default exchange function .
987	Get field from kernel results .
988	Calculate the exchange states .
989	Variance scaling term .
990	Return a function that returns the forward log - likelihood function .
991	Return a function to transform a bijector .
992	Return the inverse transform function function .
993	Perform one step of the kernel .
994	Return a list of tuples matching cond .
995	Computes the secant2 .
996	Second 2 .
997	Perform the inner - update algorithm .
998	Update the function with the given trial and gradient .
999	Brings a minimum and maximum objective function .
1000	Compute the bisect of the given value .
1001	Return a bisect on the interval .
1002	Determines if two arrays are finite .
1003	Helper function to determine whether the wolfe is satisfied .
1004	Return the squared difference between two values .
1005	Create a new step - policy policy for a list of steps .
1006	Single step implementation .
1007	Compute the log acceptance correction .
1008	Perform one step on the Hamiltonian .
1009	Returns a bootstrap results .
1010	r Bayesian Resnet .
1011	Resnet block .
1012	Create a directory encoder .
1013	Creates a decoder for tensors .
1014	Creates a directory prior to logit .
1015	Sample the Markov chain .
1016	Deep exponential family .
1017	Create a tf . d .
1018	Trainable gamma .
1019	Load NIPPS paper .
1020	Initialize params .
1021	Return the kl divergence of two layers .
1022	Read image from file .
1023	Download sprites .
1024	Create a single character .
1025	Create a sequence of frames .
1026	Create a random sequence .
1027	Create a dataset .
1028	Validate distributions .
1029	Flatten kernels into a list of kernels .
1030	Flatten a list of multiplicand kernels .
1031	Build fake data .
1032	Count the number of integers in arr .
1033	Find the binning of edges .
1034	Compute histogram .
1035	Calculate quantiles of x .
1036	Get the ndims of x .
1037	Insert and expand dimensions into x .
1038	Make a list of axis indices .
1039	Move dimensions to flat end .
1040	Sort tensor .
1041	Builds a set of state space models .
1042	Amariance .
1043	Compute the k - likelihood .
1044	Jensen .
1045	Pearson .
1046	Squeeckerer .
1047	Compute the triangular matrix .
1048	r Compute the power of the tensor .
1049	Compute the logarithm .
1050	Computes the jeffreys .
1051	Modified G .
1052	Calculate dual CSiszar .
1053	Symmetrized CSiszar function .
1054	Calculate the Monte Carlo ciszar .
1055	Helper function for ciszar .
1056	Raise a ValueError if x is not expected .
1057	Helper for batch_gather .
1058	Broadcast an event with params and params .
1059	Implementation of expectation_importance_sampler .
1060	Broadcast an event with samples and samples .
1061	Minimize an optimization function .
1062	Return control inputs for the inverse Hessian .
1063	Update the inverse Hessian .
1064	Compute the inverse update term .
1065	Matrix multiplication .
1066	Compute the tensor product of two tensors .
1067	Transpose a tensor .
1068	Pad x with ndims .
1069	Compute the sum of x dimensions .
1070	Computes the square root of x .
1071	Get the common dtype from arg_list .
1072	Minimize a bfgs .
1073	Get the initial state of the LBFGS optimizer results .
1074	Get the search direction .
1075	Creates an empty queue for the given element .
1076	Push queue to queue .
1077	Return a PSD mask of x .
1078	Return True if x is greater than the given threshold .
1079	Generate a correlation matrix .
1080	Computes the weights of the correlation matrix .
1081	Compute the Clopper - pear - pear - Pearson confidence intervals .
1082	Estimate the true volumes of the decomposition .
1083	Implementation of Von Mises Series .
1084	Calculate the value_and_gradient function .
1085	One step of a population .
1086	Minimize the objective function .
1087	Calculate initial arguments .
1088	Find the best value in a population .
1089	Check whether a population is converged .
1090	Generate a starting population .
1091	Perform binary crossover .
1092	Get the set of mutations for a given population .
1093	Generate random mixing indices .
1094	Ensure tensor is a list .
1095	Convert to tl .
1096	Computes a soft threshold .
1097	Clips a tensor by the given value .
1098	Build pipeline pipeline .
1099	Plot generated images .
1100	Convert a list of tokens into a string .
1101	Call the LSTM .
1102	Call the encoder .
1103	Compute the tensor of x .
1104	Compute the inverse of the tensor .
1105	Compute the rank of a matrix .
1106	Pin a tensor .
1107	Computes the solver .
1108	Calculate the inverse LU matrix .
1109	Recursively reconstruct the assertions .
1110	Constructs assertions for L1 .
1111	Return the block diagonal of a SparseTensor .
1112	Validate a matrix .
1113	Gradient of negative log likelihood .
1114	Fit a model to a model .
1115	Generate slices .
1116	Generate a mask .
1117	Mask a dense tensor .
1118	Create an array of input order .
1119	Create a list of degree degrees .
1120	Create input masks .
1121	Creates a masked initializer .
1122	Build the graph .
1123	Call the autoregressive layer .
1124	Draw samples from num_samples .
1125	Create a zero - dimensional multivariate normalization .
1126	Return a function that takes a time series .
1127	Convert params to weights .
1128	Return the depth of a graph .
1129	Return the highest order of dependencies .
1130	Generate a function that takes a list of named_chains and returns the best order .
1131	Build the graph .
1132	Calculate the variational loss .
1133	Optimal posterior posterior .
1134	Builds a function that returns a function of the last day of the simulation .
1135	Builds the matrix of effects to residuals .
1136	Build a transition matrix .
1137	Build a temporal transition noise .
1138	Build a constrained transition noise .
1139	Check if observation data is empty .
1140	Validate observation data .
1141	Adds a new scheduler to the current value .
1142	Set the checkpoint .
1143	Set gradient clip .
1144	Optimize the model .
1145	Set training summary .
1146	Set the value summary .
1147	Create an optimizer .
1148	Set the training data for this model .
1149	Set a summary trigger trigger .
1150	Reads training data sets .
1151	Get news2020 samples
1152	Download Glove w2v .
1153	Compiles the optimizer .
1154	Fit the model to data .
1155	Evaluate the model .
1156	Predict new features .
1157	Get MNIST dataset .
1158	Preprocess MNIST data .
1159	Get the end trigger type
1160	Set validation optimizer .
1161	Return the value of the field .
1162	Call a BigDL function
1163	Call Java function .
1164	Convert an RDD to Java object .
1165	Convert Python object into Java object .
1166	Get an activation layer by name .
1167	Create a bigdl from an NDArray .
1168	Get the label tensor .
1169	Read an image file .
1170	Write to disk .
1171	Get an image from the viewer .
1172	Converts the local image frame to an image .
1173	Returns the label tensor for this image .
1174	Get the predictions for the image .
1175	Predict on input x
1176	Train the optimizer .
1177	Performs a BigDImageTransform operation .
1178	Save a keras model to disk .
1179	Build Keras model
1180	Predict the class distributed with the given data RDD .
1181	Set weights on the tensor .
1182	Get weights for the layer .
1183	Save tensorflow to file .
1184	Execute the training .
1185	Load a torch file .
1186	Load Keras backend .
1187	Create a Criterion from jcriterion .
1188	Load weights from json file .
1189	Load training images .
1190	Build Keras model .
1191	Returns the input shape .
1192	Returns the output shape .
1193	Get MNIST dataset .
1194	Read data_dir .
1195	Get bigDL classpath .
1196	Check if pyspark is newer than 2 .
1197	Export a checkpoint file .
1198	Save a dictionary of variables to a bigd file .
1199	Expand a tensor .
1200	Precompute symbols in trie .
1201	Simple simple attention layer .
1202	Attention .
1203	Compute BLEU scores .
1204	Get the log file .
1205	Log an utterance .
1206	Summarize gradients .
1207	Write weights to disk .
1208	Read data from a JSON config file .
1209	Train an EvalModel from a config file .
1210	Interactively interact with an agent .
1211	Convert labels to onehot .
1212	Convert labels to onehot .
1213	Configure a session .
1214	Load the model .
1215	Get the momentum variable .
1216	Update graph variables .
1217	Round the f1_score function .
1218	Process a word .
1219	Convenience function for stacking layers .
1220	Create Bi - RNN .
1221	Create RNN layer .
1222	Create a stacked highway layer .
1223	Build an embedding layer .
1224	A cudnn gru .
1225	Create a CUNN compatible GRU .
1226	Create a LSTM .
1227	Create a cudnn compatible lstm .
1228	BUD layer .
1229	Wrapper for cudnn_lstm .
1230	BUD layer .
1231	Create a variational dropout layer .
1232	Build the network .
1233	Build a word layer .
1234	Build basic network .
1235	Train model on data .
1236	Predict on batch .
1237	Make sentence vector from list of sentences .
1238	Make a vector of tags .
1239	Compute BLEU measure .
1240	Verify a SC URL
1241	Extract certificates from a string .
1242	Verify certificates chain .
1243	Verify request signature .
1244	Verify the certificate chain .
1245	Returns JSON representation of all controls .
1246	Return a list of Microsoftbot controls .
1247	Return a list of telegram controls .
1248	Return a list of alex controls .
1249	Entry point for DeepPavlov settings .
1250	Wraps a function with a default graph .
1251	Wraps keras backend .
1252	Compute accuracy .
1253	Round accuracy .
1254	Initializer for pretrained embedding .
1255	Read a data file .
1256	Create a default agent .
1257	Convert x to one - hot k .
1258	Pretty print metrics .
1259	Populate the default settings directory .
1260	Load the model .
1261	Save the model to disk .
1262	Get the training op .
1263	Search for a word .
1264	Make the default operation costs .
1265	Start the timer .
1266	Handle incoming request .
1267	Run the agent .
1268	Generate the response .
1269	Process intent request
1270	Handle a launch event .
1271	Handle an unsupported message .
1272	Prints the representation of the struct .
1273	Convert loss loss to PDL .
1274	Build a chainer .
1275	Interactively interact with the given configuration .
1276	Predict on a given file .
1277	Reads a text file .
1278	Import a function from a string .
1279	Decorator to register a metric
1280	Get a metric by name .
1281	Return the decay type corresponding to the label .
1282	Return the best value for the best fit .
1283	Encode tokens .
1284	Read the requirements file .
1285	Calculate the log loss .
1286	Export weights to hub .
1287	Show details in dictionary
1288	Return an ecommerce agent
1289	Main entry point .
1290	Download a file to dest_url
1291	Unpack a file
1292	Download the given URL to download .
1293	Recursively updates the editing_dict recursively .
1294	Add a path to a URL .
1295	Set a query parameter .
1296	Generate alex response .
1297	Return the JSON representation of the control .
1298	Return the card action for the card .
1299	Return JSON representation of the control .
1300	Generate a msbot framework
1301	Calculate the F1 F1 F1 score .
1302	Calculate recall at k_pred .
1303	Check if GPU is available .
1304	Recursively parse a config property .
1305	Parse the config file
1306	Expand a user s absolute path .
1307	Create a Component from a dictionary .
1308	Main loop .
1309	Delete a conversation .
1310	Refresh expired certificates
1311	Verify the signature chain
1312	Handle a request .
1313	Return a class from a string .
1314	Decorator to register model class .
1315	Get a model by its name .
1316	Get GLM regularization path .
1317	Creates a GLM model .
1318	Create an H2Cluster object from a dictionary .
1319	Shutdown the H2O instance .
1320	Check if the server is running .
1321	Show the status of the cluster .
1322	List all jobs .
1323	Return the list of time zones
1324	Fill properties from h2cluster object
1325	Get metalearner parameters
1326	Run a test_func on the sandbox .
1327	Retrieve a summary of a frame .
1328	Delete a frame by key .
1329	List model builders .
1330	Validate model parameters .
1331	Compute metrics for a given model and frame .
1332	Get model metrics .
1333	Delete a model by key
1334	Prints the cached data
1335	Run EC2 instances .
1336	Terminate instances .
1337	Stop instances .
1338	Start instances .
1339	Reboot instances .
1340	Wait for SSH to complete .
1341	Return the full name of a function .
1342	Searches for code from given frame .
1343	Return the function signature as string .
1344	Wrap text with indentation .
1345	Wait for the job to finish .
1346	Train the model .
1347	Fit the model .
1348	Get parameters as a dictionary
1349	Signal handler .
1350	Wipe the output directory .
1351	Remove RSandbox directory
1352	Try to scrape the port from the output file .
1353	Scrape cloud size from stdout
1354	Terminate the JVM .
1355	Stop the cluster .
1356	Get the IP of this node .
1357	Get the port of the node .
1358	Return the ROC of the model .
1359	Determine the size of the model .
1360	Calculate absolute error .
1361	H2 mean squared error .
1362	Calculate the absolute error .
1363	Calculate the H2O - Exponential variance score .
1364	Assert that a variable is a type .
1365	Fail if v matches regex .
1366	Raises H2ValueError if the argument is not satisfied .
1367	Extract the arguments from the source file .
1368	Check if var is of vtype
1369	Get a string representation of a type .
1370	Get source code for lambda function .
1371	Checks if a variable is a valid type .
1372	Checks if the variable is in the list .
1373	Get the configuration .
1374	Read config file .
1375	Generate a list of paths to log files .
1376	Execute the job .
1377	Store model progress .
1378	Recalculate model parameters .
1379	Estimate the completion time of the progress .
1380	Guess the next poll interval .
1381	Compute progress at time t .
1382	Calculate the time at x_target .
1383	Write text to stdout .
1384	Compute the width of all widgets .
1385	Get the size of the terminal
1386	Set the encoding .
1387	Fit the encoder for the given frame .
1388	Return an H2OFrame with the given frame id .
1389	Refresh the cache .
1390	Return the type of the frame .
1391	Return a list of all columns that have a certain type .
1392	Print a summary of the H2O .
1393	Print information about the Frame .
1394	Return a new DataFrame with only the rows .
1395	Multiply a matrix .
1396	Return a list of levels .
1397	Return the number of levels
1398	Set the level of the table .
1399	Set the set of domains for this range .
1400	Rename columns .
1401	Set column names .
1402	Set the column name .
1403	Check if an item is in an array .
1404	Generate a row - fold column .
1405	Get a stratified kfold column .
1406	Print the structure as a string .
1407	Return the CSV as a pandas dataframe .
1408	Remove the column at index i .
1409	Compute the quantile of this DataFrame .
1410	Concatenate a list of frames .
1411	Bind columns to the DataFrame .
1412	Add new rows to this frame .
1413	Splits the data into multiple splits .
1414	Return a new QuerySet with the given columns .
1415	Fill in h2o .
1416	Impute values of a column .
1417	Merges two columns .
1418	Compute the value of the relevel .
1419	Insert missing values .
1420	Compute the variance .
1421	Compute the correlation between two sequences .
1422	Compute the distance between two vectors .
1423	Return the factor as a factor .
1424	Split a string into multiple rows .
1425	Return a new H2OFrame that matches pattern .
1426	Return a substring with a substring .
1427	Return a new row with the given set .
1428	Compute the entropy .
1429	Return the number of substrings of the given path .
1430	Create a table expression .
1431	Plot a histogram .
1432	Compute the sort of words .
1433	Substitute a pattern with replacement .
1434	Get the toupper expression .
1435	Return the expression that matches the given pattern .
1436	Create a new row with NaN .
1437	Return the difference between two frames .
1438	Create a new DataFrame containing the NaNs .
1439	Compute the minute expression .
1440	Create a new H2O .
1441	Random stratified split .
1442	Return a new column with a cut .
1443	Return the index of the maximum value .
1444	Apply a function to an axis .
1445	Parse text .
1446	Parse a file .
1447	Move the cursor .
1448	Unparse the token stream .
1449	Size of the centroid .
1450	List of centers
1451	A list of the centers standard deviations .
1452	Connect to a server
1453	Make a request to the API .
1454	Check the version of the cluster .
1455	Lazy import .
1456	Upload data to a file .
1457	Import data from a file .
1458	Import a Hive table .
1459	Import an SQL Table
1460	Imports an SQL table
1461	Parse raw setup .
1462	Return a deep copy of the data .
1463	Get an estimator .
1464	Get a grid
1465	Retrieve a single frame
1466	Download a POJO to a POJO .
1467	Download data to a CSV file
1468	Download all H2O logs to directory .
1469	Export a frame to a file .
1470	Return a list of H2Oo objects .
1471	Execute a demo function
1472	Load h2o dataset .
1473	Creates metrics from predicted data .
1474	Upload a new key to a file
1475	Upload a custom metric function .
1476	Validate a frame id .
1477	Convert a number of bytes into a human readable string .
1478	Normalizes a slice .
1479	Check if a slice is normalized .
1480	Use mojo to predict a dataframe from a dataframe .
1481	Takes a csv file and generates genmodel .
1482	Mark a function as deprecated .
1483	Wait for the future to finish .
1484	Performs deepfeatures on the test_data
1485	Print the summary of the model
1486	Show the hyperparameters table
1487	Get the hyperparameters for the given id
1488	Get a dictionary of hyperparameters .
1489	Return a Grid object for this object
1490	Returns the F1 of each model .
1491	Returns the importances of the model
1492	Project the prediction of the test data .
1493	Make a screeplot plot
1494	Translate name to lowercase .
1495	Recursively dedent text .
1496	extract run info from a file
1497	Entry point for extractGLRM runtime .
1498	Close the H2O session .
1499	Get the session id
1500	Start logging .
1501	Prepare data payload
1502	Prepare file payload .
1503	Log a transaction .
1504	Log the end transaction .
1505	Log a message .
1506	Process a HTTP response .
1507	Print msg if verbose is True .
1508	Get the TopML model for a project .
1509	Download a Mojo from the leader .
1510	Download the model from the leaderboard .
1511	Fit the mean and standard deviations
1512	Apply transform to X .
1513	Inverse of X .
1514	Extract true string from string .
1515	Find the node_name and remove the node_name
1516	Find git hash branch
1517	Determine if a build timeout is found
1518	Find the build failure
1519	Find the build id
1520	Extract job build URL from a URL string .
1521	This function is called by the test suite
1522	Save the test info to the console
1523	Update the summary file
1524	Write file content to fhandle .
1525	Writes a Java message
1526	Loads all java messages to ignore .
1527	Normalize enum constants .
1528	Find synonyms for a word .
1529	Poll the job status .
1530	Save this Assembly to a J2o .
1531	Fit the assembly to a frame
1532	Find the percentile of a sorted list
1533	Return the default params .
1534	Get actual params .
1535	Perform deep features on the test data .
1536	Get the scoring history for the current model .
1537	Prints the model details
1538	Compute variable imports .
1539	The residuals of the freedom .
1540	A dictionary of model coefficients .
1541	Downloads the project from the given path .
1542	Download the MOJO to a MOJO .
1543	Get model details .
1544	Check that the targets are expected .
1545	List of cross validation models
1546	Example of G2 Gradient estimator .
1547	Example of the DeepLearning model .
1548	Example of the generalized linear regression .
1549	Wait for a keypress .
1550	Return the cell data as a pandas DataFrame .
1551	Print the table .
1552	Start a JVM instance .
1553	Find the j2o server .
1554	Yields paths to HAR_JAR_PATH .
1555	Get the hit ratio table
1556	Create a csv writer .
1557	Return the path to the given URI .
1558	Convert a directory path into a URI .
1559	Parse a list of functions .
1560	Generate API documentation .
1561	Discover modules .
1562	Write API documentation to outdir .
1563	Write the index to outdir .
1564	Convert table to list .
1565	Load dictionary from file .
1566	Add new Java java messages to the dict .
1567	Update the message dictionary with the specified action
1568	Extract a message from a file .
1569	Save dictionary to file .
1570	Print a dictionary to stdout .
1571	Parse command line arguments .
1572	Print usage information .
1573	Locate all python files .
1574	Find spell comments in a file .
1575	Main entry point
1576	Apply transformation to the pipeline .
1577	Collect all failed tests
1578	Extracts the output from the test suite .
1579	Plot the ROC curve .
1580	Compute the confusion matrix .
1581	Check if a deep water model is available
1582	Removes data back to the specified monthToKeeps
1583	Return a dictionary of all registered endpoint names .
1584	Update site forward .
1585	Return the JSON data .
1586	Comment a user .
1587	Get user and password .
1588	Like the authenticated user .
1589	Like the media with the given hashtag .
1590	Check if user is not bot
1591	read lines from file
1592	Schedule a new schedule .
1593	Define this message .
1594	Downloads an existing file .
1595	Guess service name from spec_path .
1596	Updates a power shell command .
1597	Deletes a subscription by ID .
1598	Creates or updates an existing application definition .
1599	Returns the URI for the given request .
1600	Get a connection object
1601	Perform a request .
1602	Execute script actions .
1603	Checks a front door name availability .
1604	Purge deleted items .
1605	Get the authorization server .
1606	Validate the request URI .
1607	Get the CLI profile
1608	Retrieve credentials for a given resource .
1609	Resolve a request .
1610	Checks a local name availability .
1611	Open an HTTP request .
1612	Set the timeout for the request .
1613	Set a request header .
1614	Retrieves the response headers .
1615	Send a request .
1616	The status of the request .
1617	Returns the status of the request .
1618	The response body .
1619	Set the client certificate .
1620	Send a PUT request .
1621	Set a request header
1622	Send the given request body .
1623	Get the response .
1624	Get a readable identifier from a string .
1625	Get serialization name .
1626	Verify a face to a person .
1627	Adds a job to the batch .
1628	Get entry properties from XML .
1629	Get all children from node .
1630	Find the namespaces from the given child .
1631	Parse a ServiceBus namespace XML string .
1632	Return ServiceBusRegion instance from XML string .
1633	Parse a namespace availability response .
1634	Convert an XML string to a Metadata object .
1635	Replaces run content in a runbook .
1636	List domain recommendations .
1637	Update a kb .
1638	Retrieves the members of a user .
1639	Build a package from a github PR number .
1640	Imports data from LRO .
1641	Publishes a new Launch .
1642	Renew the lock .
1643	Replaces a word .
1644	Adds a value to a secret resource .
1645	Gets storage account properties .
1646	Gets the keys of a storage account .
1647	Regenerates the keys for a storage account .
1648	Creates a new storage account .
1649	Updates a storage account .
1650	Deletes a storage account .
1651	Queries a storage account name .
1652	Gets the properties of a hosting service .
1653	Creates a hosted service .
1654	Deletes a hosted service .
1655	Creates a deployment .
1656	Deletes a deployment .
1657	Switches a deployed deployment .
1658	Change the configuration of a deployment .
1659	Updates the status of a deployment .
1660	Upgrade a deployment .
1661	Perform a walk of upgrade domains .
1662	Reboot a role .
1663	Deletes a role instances .
1664	Retrieves availability of a specified service .
1665	Lists the certificates for a given service .
1666	Gets the certificate for a service .
1667	Adds a certificate to a service .
1668	Deletes a certificate .
1669	Gets a management certificate .
1670	Adds a certificate to the subscription .
1671	Deletes a management certificate .
1672	Gets the affinity group properties .
1673	Creates a new affinity group .
1674	Deletes an affinity group .
1675	List Subscription operations .
1676	Creates a reserved IP address .
1677	Deletes a reserved IP address .
1678	Associates a reserved IP address .
1679	Disassociate a reserved IP address .
1680	Gets a reserved IP address .
1681	Gets a Persistent VMR role .
1682	Creates a virtual machine deployment .
1683	Adds a role to a role .
1684	Updates a role .
1685	Deletes a role .
1686	Captures a role .
1687	Start a new role .
1688	Start a set of roles .
1689	Restart a role .
1690	Shutdown a role .
1691	Shutdown a set of roles .
1692	Adds a DNS server to the specified deployment .
1693	Updates a DNS server .
1694	Deletes a DNS server .
1695	Fetches a list of resource extensions .
1696	Replicate a VM .
1697	Unplicate a VM image .
1698	Share a virtual machine .
1699	Creates a new VM image .
1700	Deletes a VM image .
1701	Returns a list of VM images .
1702	Updates a VM image .
1703	Adds an OS image .
1704	Updates an image .
1705	Updates an OS image from the specified image reference .
1706	Deletes an OS image .
1707	Retrieves a data disk .
1708	Adds a virtual disk .
1709	Updates a virtual disk .
1710	Deletes a data disk .
1711	Adds a disk .
1712	Updates a disk .
1713	Deletes a disk .
1714	Retrieves the summary for a management group .
1715	Build the receiver .
1716	Fetch the next message batch .
1717	Renew the lock .
1718	Creates or updates a new virtual machine scale set .
1719	Converts a placement group to a single placement group .
1720	Sends a screen text to the user .
1721	Creates a new key .
1722	Import a key .
1723	Updates a key .
1724	Sets a secret .
1725	Creates a certificate set .
1726	Create an instance from a connection string .
1727	Get a subscription .
1728	List all subscriptions for a given topic .
1729	Sends multiple messages .
1730	Return a Sender instance .
1731	Create receiver .
1732	Create a Receiver for the receiver .
1733	Parse the response from an async operation response .
1734	Perform a GET request .
1735	Perform a PUT request .
1736	Wait for an operation to complete .
1737	Retrieves the status of a request .
1738	Adds the content - type header to the request .
1739	Validate the input package .
1740	Retrieves the certificates for a vault .
1741	Gets all regions .
1742	Lists the namespaces .
1743	Retrieves a namespace .
1744	Creates a new namespace .
1745	Deletes a namespace .
1746	Check if a namespace is available .
1747	List all topics .
1748	List all notification hubs
1749	List all Relays
1750	Get the metrics rollups for a metric .
1751	Get the metrics rollups for a topic .
1752	Get the metrics rollups for a notification hub .
1753	Get the metrics rollups for a relay .
1754	Create an Environment .
1755	Create a new virtualenv with the given packages .
1756	Creates a new SQL Server .
1757	Sets the server password .
1758	List server quotas .
1759	Gets the event log for a server .
1760	Creates a new firewall rule .
1761	Updates a firewall rule .
1762	Deletes a firewall rule .
1763	List all firewall rules for a server .
1764	Lists all service objectives in a server .
1765	Creates a database .
1766	Updates a database .
1767	Delete a database .
1768	List databases .
1769	List agreements for a domain .
1770	Close the message handler .
1771	Close the receiver .
1772	Get the current session state .
1773	Set session state .
1774	Receive deferred messages .
1775	Merge an existing reservation .
1776	Validate the bearer token .
1777	Purge the specified table .
1778	Return an error handler .
1779	Creates a queue .
1780	Deletes a queue .
1781	Gets information about a queue .
1782	Creates a new topic .
1783	Gets a specific topic .
1784	Creates a new rule .
1785	Gets the specified rule .
1786	Returns a list of all rules for the specified topic .
1787	Creates a new subscription .
1788	Returns information about a specific subscription .
1789	Returns a list of all subscriptions for the specified topic .
1790	Sends a message to a specific topic .
1791	Unlocks a message .
1792	Send messages to a queue .
1793	Unlocks a message .
1794	Receive a message from a queue .
1795	Receive a message from a topic .
1796	Creates an event hub .
1797	Updates an event hub .
1798	Retrieves information about an event hub .
1799	Sends an event to a hub .
1800	Adds content - type header to service bus .
1801	Get the authorization string .
1802	Check if token is expired .
1803	Retrieves a token from the access control system .
1804	Add query and query parameters to request .
1805	Reset a service principal .
1806	Deletes the message .
1807	Unlock the message .
1808	Renew the lock .
1809	Adds headers to the request .
1810	Return the batch body as a dictionary .
1811	Retrieves the cluster health information .
1812	Retrieves the cluster health information .
1813	Unprovision an application type .
1814	Retrieves a list of tasks .
1815	Submit a new property batch .
1816	Handle HTTP errors .
1817	Starts a new WebSite trace operation .
1818	Lists the differences between a slot and slot .
1819	Swap a slot .
1820	Retrieve events for a given event type .
1821	Adds a face from a stream .
1822	Handle redirect .
1823	Creates a new migration .
1824	Publish events to a topic .
1825	Move resources to another resource group .
1826	Set the profile .
1827	List the query results for a management group .
1828	Create a queue .
1829	Delete a queue .
1830	Create a topic .
1831	Delete a topic .
1832	Creates a subscription .
1833	Create an instance from a connection string .
1834	Get entity properties .
1835	True if the lock has expired .
1836	Creates a new session .
1837	Creates a new subscription .
1838	Exports the request rate for the specified parameters .
1839	Handle the output queue .
1840	Bulk add tasks to the results queue .
1841	Process the task collection .
1842	Build the configuration .
1843	Reset a user s password .
1844	Start an environment .
1845	Create a message from the response .
1846	Converts an etree element into a Rule object .
1847	Convert an XML entry to Queue .
1848	Convert an XML entry to a topic object .
1849	Convert an XML subscription entry into a Subscription object .
1850	Create a new certificate .
1851	Deletes a certificate .
1852	Get a client from the CLI profile .
1853	Creates a client from a dictionary .
1854	Creates a client from an auth file .
1855	Parse an EnumerationResults XML response .
1856	Get entry properties from XML element .
1857	Delete a certificate .
1858	Returns a QueueClient .
1859	List all queues .
1860	Get a specific topic .
1861	List available topics .
1862	Receive deferred messages .
1863	Settle a deferred message .
1864	Get a Site .
1865	Creates a new website .
1866	Deletes a website .
1867	Updates a website .
1868	Restart a website .
1869	Get historical usage metrics .
1870	Retrieves the MetricDefinitions for a website .
1871	Retrieves the publish profile .
1872	Gets the publish profile .
1873	Updates a registry policy .
1874	Creates a new Cloud Service .
1875	Check if the job collection name exists .
1876	Gets a job collection .
1877	Complete a backup .
1878	Cancel scheduled messages .
1879	Send all pending messages .
1880	Reconnect the sender .
1881	Get the certificate from the publish settings file .
1882	Load cached cookies
1883	Calculate terminal width
1884	Return the cut prefix .
1885	Print a message to the terminal .
1886	Format a file size .
1887	Format the elapsed time .
1888	Create a status line .
1889	Print progress bar .
1890	Generate segment numbers .
1891	Iterate over segments .
1892	Waits for a given number of times .
1893	Add a segment to the segment .
1894	Put a value into the queue .
1895	Get parameters from the SWF file .
1896	Extract the nonce from the last redirect URL .
1897	Find vpid from url .
1898	Parse JSON data .
1899	Parse XML data .
1900	Parse a query string .
1901	Search for nested dictionaries .
1902	Spawn a subprocess .
1903	iterate over tags
1904	Parse an xml file and return video and video representations
1905	Determine the JSON encoding of a sample .
1906	Parse a JSON response .
1907	Parse xml .
1908	Parse cookies .
1909	Parse headers .
1910	Parse query parameters .
1911	Get the error message .
1912	Create a LogRecord object .
1913	Login to LiveEdu account
1914	Load support plugin .
1915	Update the query s query string
1916	Iterate over tags from file .
1917	Yields all required dependencies .
1918	Check if file output exists .
1919	Create the output pipeline .
1920	Create an http server .
1921	Iterate over http requests .
1922	Output a stream of streams .
1923	Output stream passthrough .
1924	Opens a stream .
1925	Write stream to output file
1926	Read data from a stream .
1927	Handle the given stream .
1928	Fetch streams
1929	Retrieves streams for a plugin .
1930	Resolve a stream name
1931	Format the stream names .
1932	Handles the command line .
1933	Print the loaded plugins
1934	Authenticate using Twitch .
1935	Load plugin plugins .
1936	Setup global arguments .
1937	Setup console
1938	Setup the http session
1939	Load plugins .
1940	Setup HLS - Link options .
1941	Log current versions .
1942	Return stream id from text .
1943	Return a list of streams from the given text .
1944	Set the value of an option
1945	Get an option by key .
1946	Set an option for a plugin .
1947	Get the value of a plugin .
1948	Resolve a URL .
1949	Load plugin plugins .
1950	Convert a string to an integer .
1951	Validate that value starts with string .
1952	Validate that value ends with string .
1953	Validate that string contains a string .
1954	Creates an attribute with the given value .
1955	Apply a function to each value in a dictionary .
1956	Apply a function to each value in a dictionary .
1957	Validate a URL .
1958	Find an element by xpath .
1959	Find all elements in xpath .
1960	Attempt to extract the player s url from the response .
1961	Parse M3U data .
1962	Return the supported player name .
1963	Authentication of the user .
1964	Extract stream_id from html .
1965	Extract stream_info from HTML .
1966	Login to the website .
1967	Add a function to the map .
1968	Make a call to the API .
1969	Start a new session .
1970	Get information about a media .
1971	Create the API .
1972	Compress a string .
1973	Format a single character .
1974	Format a string as a string .
1975	Reads number of bytes from the buffer .
1976	Return the value of this code .
1977	Return the explanation of the code .
1978	Sets the decoding table .
1979	Sets the length table .
1980	Print a table of code strings .
1981	Read a tuple from the stream .
1982	Return an explanation of the bit value .
1983	Compute the value at the given index .
1984	Return the span of a given index
1985	Return value at index .
1986	Return the mnemonic .
1987	return the mnemonic
1988	Compile the actions table .
1989	Evaluate action .
1990	Make hexadecimal data
1991	Process the stream .
1992	Reads the metadata block .
1993	Read uncompressed data .
1994	Register a block type .
1995	Replace virtual value with virtual value .
1996	Read prefix array .
1997	r Calculate a monochrome .
1998	Polychrome image
1999	Create an arrow table from ava file .
2000	Decorator to patch a function .
2001	Add virtual columns to the PMR .
2002	Add virtual motion vectors to the model .
2003	Generate a graphviz graph
2004	Return a pandas Series containing the values of each column .
2005	Apply a mapper to the data .
2006	Auxiliary application .
2007	Open multiple files .
2008	Read data from SAMP message .
2009	Create a DatasetObject from an astropy table .
2010	Create a DataFrame from arrays
2011	Create an array from scalars .
2012	Convert pandas dataframe into a DataFrame
2013	Load data from CSV file .
2014	Create a server instance .
2015	Generate Zeldovich model .
2016	Concatenate dfs
2017	Create a column virtual range .
2018	Opens a dataset
2019	Evaluate a dataset .
2020	Decorate a function as a callable .
2021	Return a set of variables that depend on the previous selection .
2022	Execute a task .
2023	Sorts the pairs .
2024	Return info from file .
2025	Clears the canvas
2026	Wait for the last plot to finish .
2027	Open a document
2028	A context manager for writing to a file .
2029	Split arrays into masks .
2030	Apply a NOP expression to the output .
2031	Compute the first occurrence of an expression .
2032	Compute the mean of an expression .
2033	Compute the sum of each expression .
2034	Calculate the standard deviation of an expression .
2035	Calculate the covariance matrix .
2036	Calculate the minmax of an expression .
2037	Calculate the minimum of an expression .
2038	Calculate the median of an expression .
2039	Plot a matplotlib figure .
2040	Calculate healpix counts using healpix .
2041	Plot the HEALPix matrix .
2042	Plot a 3D DataFrame .
2043	Return the dtype of an expression .
2044	Get the private directory
2045	Get the state of the current state
2046	Set the state of the table .
2047	remove virtual meta data
2048	Write virtual meta data .
2049	Write the meta data to disk .
2050	Return a list of subspaces .
2051	Set variable with given name .
2052	Evaluate a variable
2053	Evaluate a selection mask .
2054	Convert the DataFrame to a dictionary .
2055	Return a copy of this DataFrame .
2056	Convert to pandas . DataFrame
2057	Convert this DataFrame to an arrow table .
2058	Convert to an astropy . Table
2059	Add a column to the DataFrame .
2060	Rename a column .
2061	Add virtual columns to polar .
2062	Add virtual columns to cartesian coordinates .
2063	Add virtual columns to cartesian coordinates .
2064	Add virtual columns to cartesian
2065	Add virtual columns to the matrix .
2066	Add virtual columns to cartesian coordinates .
2067	Add virtual columns to the cube .
2068	Add a virtual column to the table .
2069	Delete virtual column by name .
2070	Add a variable to the table .
2071	Delete a variable
2072	Return the last n elements .
2073	Print the head and tail of the table .
2074	Describe the dataframe .
2075	Concatenate two IPython notebooks .
2076	Set the current row .
2077	Returns a list of column names
2078	Trim columns from the DataFrame .
2079	Return a new DataFrame with the specified indices .
2080	Extract a subset of the DataFrame .
2081	Return a random sample from the distribution .
2082	Split this RDD into individual components .
2083	Split this TimeSeries into chunks .
2084	Sort the values by a given column .
2085	Apply virtual_column to the DataFrame .
2086	Undo a selection .
2087	redo a selection
2088	Returns True if the selection can be undone .
2089	Select a new expression .
2090	Select non missing values .
2091	Return a new DataFrame with columns removed .
2092	Selects a rectangle .
2093	Select box .
2094	Selects a circle .
2095	Select an ellipse .
2096	Apply a SelectionLasso .
2097	Returns an inverted selection .
2098	Set a selection .
2099	Execute a new selection
2100	Find a valid name .
2101	Return the root nodes of the expression graph .
2102	Generate graphviz output for graphviz
2103	Add a column to the table .
2104	Encode a column .
2105	returns the data
2106	Length of the array .
2107	Vertical stacking of two DataFrames .
2108	Concatenate two DataFrames .
2109	Export the table to HDF5 .
2110	Add a column to the DataFrame .
2111	Patch a DataFrame .
2112	Register a function .
2113	Fill missing values .
2114	Returns the day of x
2115	Return the day of the year .
2116	Return True if x is leap year False otherwise .
2117	Return the year of the year
2118	Return a pandas Series of months .
2119	Return the month name of the month .
2120	Return the day of x .
2121	Return the day name of x .
2122	Return the weekof year of year
2123	Determine the hour of the year
2124	Return the dt of x .
2125	Compute the second of the second time series
2126	Convert x to string .
2127	Concatenate two strings .
2128	Return True if x contains a string .
2129	Return the number of occurrences of x .
2130	Return the index of elements in x .
2131	Get a column from x .
2132	Return index of substring in x .
2133	Create a ColumnStringArrow from x .
2134	Convert x to a column string .
2135	Pad x with padding .
2136	Return a copy of x .
2137	Return the index of x in x .
2138	Return index of substring in x .
2139	Return a new column with padding .
2140	Convert x to string .
2141	Slice a sequence of strings .
2142	Return a ColumnStringArrow from x .
2143	Create a column string .
2144	Convert x to a column .
2145	Return the autotype of an array .
2146	Return the data as a numpy recarray .
2147	Write properties to file .
2148	Write a comment to file .
2149	Write properties to file .
2150	Iterate properties from a file - like object .
2151	Convert a file to newline support .
2152	Show installed versions .
2153	Rename keyword arguments .
2154	Set the global fftlib library .
2155	Track a beat .
2156	Apply pitch - correction to audio .
2157	Convert frames to samples .
2158	Convert samples to frames .
2159	Convert time series to frames .
2160	Convert a midi to a note .
2161	Convert hz to mel .
2162	Convert melitudes to Hz
2163	Generate Fourier frequencies .
2164	Calculate the frequencies for a cqt .
2165	r Calculate the frequency frequencies for each melis band .
2166	Compute A - weighted weighting .
2167	Generate time - like times - like timeseries .
2168	Return samples of an array of frames .
2169	r Compute the CQT for each channel .
2170	Compute the pseudo - Fourier Transform using the CQT .
2171	Perform an ICQT filter on a CQ .
2172	Wrapper around cqt filter .
2173	Trim the cqt response from a list of bins .
2174	Compute cqt response .
2175	Calculate an exponentially - downsampling count .
2176	Perform an exponential - downsample of a signal .
2177	Calculate cost for DW .
2178	Backtracking algorithm .
2179	Compute the Viterbi function .
2180	r Compute the discriminative function .
2181	Generate a transition matrix .
2182	Generate a transition loop .
2183	Generate transition cycle .
2184	r Compute the transition state .
2185	Calculate onset onset strength .
2186	Compute full - spectral onset strength .
2187	Backtrack onset tracking
2188	Calculate onset strength .
2189	Write times to a csv file .
2190	Write audio data to file .
2191	Get a colormap .
2192	Plot audio data .
2193	Set current image .
2194	Returns the coordinates of a mesh .
2195	Raises an exception if the axes is not None .
2196	Set axes based on axes
2197	Return the FFT bins .
2198	Calculate mel frequency basis .
2199	Calculate CQT bins .
2200	Calculate the coordinates of chromosomes .
2201	Convert n frames to time .
2202	Estimate a tuning tuning using piptrack .
2203	Calculate the parabolic interpolation
2204	Compute the harmonic coefficients .
2205	r Compute the harmonic of the STFT .
2206	Compute the Fourier Transform .
2207	Stretch the stft by the time domain .
2208	Perform pitch shift using a pitch shift .
2209	Clip an audio array with zeros .
2210	Return True if signal is nonsilent
2211	Trim a signal from a signal .
2212	Split a signal into samples .
2213	Phase transition generator .
2214	Convert amplitude to dB .
2215	Compute magnitude spectrogram from input data
2216	Compute the beats from a file .
2217	Perform decomposition decomposition .
2218	Apply n - - similarity filter to segments .
2219	Internal layer implementation .
2220	r Calculate the melian freqs
2221	Generate the chroma bands
2222	Decorator to wrap numpy . window .
2223	r Calculate the frequency of a frequency domain .
2224	r Calculate the frequency lengths of a set of frequency lengths
2225	Merge a CQ merge into bins .
2226	Calculate the bandwidth of a window .
2227	Convert a window into a nxarray .
2228	Multipate BIRate FB .
2229	Calculate the center frequencies and sample rates
2230	Fill in x with window_sq .
2231	Compute the sum of a window .
2232	Diagonal filter .
2233	r Compute the spectral centroid .
2234	r Compute spectral rolloff .
2235	r Calculate the spectral flat frequency .
2236	Compute the spectrogram for each frame .
2237	Calculate the zero crossing rate .
2238	Calculate the spectrogram of a spectra .
2239	Compute the chroma histogram using CQT
2240	Calculate Mel spectrogram
2241	Compute the Jaccard distance between two integers .
2242	Given a list of intervals return the index of the best match .
2243	Matches intervals between two intervals
2244	Match intervals .
2245	Match events .
2246	r Compute salience pressure .
2247	r Compute harmonic harmonics .
2248	Calculate the harmonic energy at a given frequency range .
2249	Calculate the harmonic harmonics .
2250	Load a sound file .
2251	Load audio file .
2252	Convert numpy arrays to mono .
2253	Resample audio to target_sr .
2254	Compute the autocorrelation of a signal .
2255	Perform LPC decomposition .
2256	Generate a sample of clicks .
2257	r Calculate a tone .
2258	Compute chirp .
2259	Get all files in a directory .
2260	Stretch the audio .
2261	Process command line arguments
2262	Perform an HPSS analysis on a WAV file .
2263	Compute beat track - strength metric .
2264	Run the beat track algorithm .
2265	Calculate beat local score for given onset .
2266	Determine the track of the beat tracking .
2267	Find the last beat .
2268	Convert a recurrence matrix to lag .
2269	r Convert a lag matrix to recurrence .
2270	Decorator to apply a function to a time - lag filter .
2271	Subsegment data into n_segments .
2272	Perform Agglomerative clustering .
2273	r Compute a path - weighted path - wise path .
2274	Run onset detection .
2275	Create a frame of data .
2276	Validate audio buffer .
2277	Validate x .
2278	Pad data to size .
2279	Sorts a 2D array .
2280	Normalize the input vector .
2281	Return the local maximum of x .
2282	Pick a peak over an array .
2283	r Parse rows .
2284	Roll a sparse matrix .
2285	Convert a numpy array to a float .
2286	Convert an index set to a slice .
2287	Synchronize the data with the given indices .
2288	Multiply a softmask .
2289	Generate a tiny float
2290	convert frames to video
2291	Read a single PNG image .
2292	Get a single frame .
2293	Write cv2 frames to file_dir .
2294	Helper function to track the progress of a function .
2295	Generates a progress bar for parallel processing .
2296	Flip an image .
2297	Rotate image .
2298	Clip bounding boxes .
2299	Scales bounding boxes .
2300	Crop an image .
2301	Pad image with padding .
2302	Pad image to multiple images .
2303	Calculate size and height
2304	Resize image .
2305	Resize an image .
2306	Resize image .
2307	Register a file handler .
2308	Convert a priority integer to a priority enum .
2309	Dequantize an array with min_val
2310	Display an image
2311	Visualize bounding boxes .
2312	Read flow from file .
2313	Write flow data to file .
2314	r Dequantize flow data .
2315	Load the state_dict into the model .
2316	Load checkpoint from file .
2317	Convert weights to CPU
2318	Save a checkpoint to file .
2319	Initialize optimizer object .
2320	Initialize the logger .
2321	Get current learning rate .
2322	Register a new hook .
2323	Run a workflow .
2324	Register training hooks .
2325	Convert a video .
2326	Resize a video .
2327	Cut video .
2328	Concatenate video videos
2329	Read a list of lines from a file .
2330	Read a dictionary from a file .
2331	1D convolutional layer .
2332	Create an object from a dictionary .
2333	Wrapper around imread . imread
2334	Create an ANTsImage from bytes .
2335	Write image to file .
2336	Convert color image to gray .
2337	Convert gray to BGR
2338	Cast an iterable to a type .
2339	Check if a sequence is of expected type .
2340	Slice a list of integers .
2341	Decorator to check prerequisites .
2342	Calculate the average .
2343	Convert input to devices .
2344	Convert a color into a tuple .
2345	Return the time of a timer .
2346	Starts the timer .
2347	Return the elapsed time since the last call .
2348	Return the duration of the check .
2349	Display a flow
2350	Convert a flow to RGB .
2351	Make a color wheel .
2352	Compute accuracy .
2353	Scatter a set of tensors .
2354	Convert inputs to kwargs .
2355	Perform the actual request .
2356	Return the JSON as JSON .
2357	Return the response as text .
2358	Handle a callback .
2359	Handle multiple requests .
2360	Make a request to the API .
2361	Start the master
2362	Normalize task v2 .
2363	Parse yaml file .
2364	Return the wheel distribution name .
2365	Returns the basename of the archive .
2366	Add additional requirements .
2367	Convert an egg - info .
2368	Create a message .
2369	Create a message with suggested actions .
2370	Creates an attachment
2371	Create an attachment
2372	Create an attachment .
2373	Create a new trace .
2374	Setter for telemetry client .
2375	Read one or more keys .
2376	Writes changes to store .
2377	Delete one or more keys .
2378	Create an index from Cosmos API result .
2379	Create a dictionary from the store .
2380	Sanitize a key .
2381	Create database and container .
2382	Get the database if it exists .
2383	Get or create a container .
2384	Fills Qna event data .
2385	Returns a conversation reference
2386	Get the name of the step .
2387	Check if the given channel is supported .
2388	Returns True if the card can be supported .
2389	Get the channel id .
2390	Check if an emulator token is a valid emulator token .
2391	Create an attachment for a card .
2392	List of parameters .
2393	Mirror the definition .
2394	Return the inverse gate .
2395	Set the control value for a classical register .
2396	Make a copy of this dataset .
2397	Return QASMIFIF instruction .
2398	QASM instruction
2399	Run a circuit .
2400	Perform a pass on a pass .
2401	Return a list of all the passes in the list .
2402	Dump all the passes to a dict
2403	Create a flow controller .
2404	Creates the upper bound of the u base .
2405	Get parameters for a single gate .
2406	Return the matrix of a single gate .
2407	r Compute the einsum matrix .
2408	Compute the einsum of a list of indices .
2409	Helper function for calculating einsum index labels .
2410	Convert a circuit circuit to a DAGCircuit .
2411	fit_fit_fit function
2412	fit_fit_fit function
2413	Plot the coherence .
2414	Shape the RO data .
2415	Plots the R data and error bars .
2416	Split a list of runs into a list of gates .
2417	Compose U3 .
2418	Convert YZYZ to ZYZ .
2419	Validate input state .
2420	Trim the image .
2421	Get the span of a gate .
2422	convert a circuit to an instruction
2423	Run Transpiler .
2424	Find the best subset of the network .
2425	Create a new Barrier .
2426	Average the observed data .
2427	Process a bit_id
2428	Process custom unitary node .
2429	Processes gate nodes .
2430	Process CNOT node .
2431	Process Measure nodes
2432	Process a condition .
2433	Create the operator class .
2434	Return the duration of the given channels .
2435	Return the start time of the channel .
2436	Return the stop time for the given channels .
2437	Return an iterable of instruction instructions .
2438	Check that the value is of type .
2439	Recursively dump additional data
2440	Load additional data
2441	Create a deserialization schema .
2442	Validate instance against schema .
2443	Decorator for validation .
2444	Dump the model to a dictionary .
2445	Load data from a dictionary .
2446	Perform qft Fourier Transform .
2447	Return a partial trace vector
2448	Vectorize a density matrix
2449	r De - vectorize the input matrix .
2450	Convert a polynomial to a list of operands .
2451	Puts a numpy array into real values
2452	Return the outer product of two vectors .
2453	The concurrences of a state .
2454	Calculate the shannon entropy .
2455	Compute the Shannon entropy of a state .
2456	Calculate mutual information .
2457	r Compute the entanglement of a state .
2458	Compute EOF entropy .
2459	Flatten a schedule .
2460	Shift a schedule by time .
2461	Insert a new child component into a schedule .
2462	Append a child to the parent .
2463	Create a 3 gate .
2464	Return the backend status .
2465	Start the simulation .
2466	Return the time remaining in seconds .
2467	Disassemble a QObject into a circuit .
2468	Computes the Hamming distance between two strings .
2469	Return a quaternion from a rotation axis .
2470	Create a quaternion from an euler angles .
2471	Normalize the quaternion .
2472	Convert the image to a matrix .
2473	Return the zeromposition of the orbit .
2474	Process the data to keep the number of occurrences
2475	Plot a histogram .
2476	Check the type of value .
2477	Check if j is in range .
2478	Check if a matrix is a square matrix .
2479	Check if matrix is a diagonal .
2480	r Return True if op is symmetric .
2481	Check if matrix is Hermitian matrix .
2482	r Check if a matrix is positive definite .
2483	r Check if a matrix is a square matrix .
2484	Check if matrix is a unitary matrix .
2485	Convert data to choi
2486	Convert data to superop
2487	Convert input data to Kraus operators .
2488	Convert input data to input .
2489	Convert input data to PLM .
2490	Convert data to Stinespring .
2491	Convert input data to Operator .
2492	Convert an operator to a NumPy array .
2493	Convert data to Operator representation .
2494	Convert data to choi .
2495	Convert data to superop .
2496	Convert krais data to a channel .
2497	Convert Choi - Map to Kraus sets .
2498	Convert a series of stines to Kines .
2499	Convert stine to stoi form .
2500	Convert a list of kraits into stines .
2501	Convert kraits to superop
2502	Convert data to a polynomial .
2503	Convert data to chi .
2504	Revervel product of two matrices .
2505	Transform data to tensor .
2506	Check that input_dim is n - qubit .
2507	Hide tick lines and labels .
2508	Set x - axis labels .
2509	Clear all points .
2510	Add vectors to the vector
2511	Add an annotation
2512	Render the plot .
2513	Plots the front .
2514	Render the panel .
2515	Compute the K -K decomposition of a unitary matrix .
2516	Return the top of the layer
2517	Return the mid - place string
2518	Return the text
2519	Length of the rectangle
2520	Return the parameters for a symbolic instruction .
2521	Generate a label for an instruction .
2522	Return a latex representation of this parameter .
2523	Compile a circuit .
2524	Add deprecation warnings .
2525	Return local hardware information .
2526	Check if a connection exists .
2527	Check the status of a job .
2528	Create a numpy array with constant amplitude .
2529	Calculate square .
2530	Create triangle with phase amplitude .
2531	Calculate the cosine of an array .
2532	Replace the gaussian width with zeroed width .
2533	Generate a Gaussian .
2534	Compute the derivative of a Gaussian .
2535	Generate a Gaussian distribution .
2536	Default pass manager .
2537	Default pass manager .
2538	Return True if the given register is a classical register .
2539	Return a mirror of the circuit .
2540	Return the inverse circuit .
2541	Append an instruction to the circuit .
2542	Attach an instruction .
2543	Add registers to circuit .
2544	Raise QiskitError if there are duplicates .
2545	Checks that the given qubits are within the circuit
2546	Check cargs are valid
2547	Check that the circuit is compatible
2548	Return a string representation of the QR code .
2549	Draw the circuit .
2550	Total gate operations .
2551	Width of all registers
2552	Count the number of instruction instructions .
2553	r Return the number of connected components .
2554	Bind a circuit to a new circuit .
2555	Bind a single parameter .
2556	Draw a pulse drawer .
2557	Search for forward naps .
2558	Map free gates .
2559	Calculate the distance between gates .
2560	Score a single step .
2561	Copy metadata from source_dag to target_dag .
2562	Transform a gate according to layout .
2563	Generate swap gates .
2564	Run Transpiler .
2565	Add a physical qubit to the coupling graph .
2566	Add an edge to the graph .
2567	Create a new subgraph with the given nodes .
2568	List of physical qubits .
2569	Returns True if the graph is weakly connected .
2570	Compute the distance matrix .
2571	Return the distance between two qubits .
2572	Compute the transpile of a circuit .
2573	Add a cu1 gate .
2574	Return the inverse of the instruction .
2575	Apply q_ifs to each gate .
2576	Apply c_if to classical gates .
2577	Subscribe to an event .
2578	Dispatch an event .
2579	Unsubscribes a callback .
2580	Publish an event .
2581	Initialize the circuit .
2582	Define the definition of the gate .
2583	Return the gates to uncompute the gates to be uncompute .
2584	Calculate the angles of a complex complex complex .
2585	Evaluate multiplex gates .
2586	Returns True if value is a virtual value .
2587	Return a copy of this layout .
2588	Combine two layouts into a dictionary .
2589	Create a toffoli gate .
2590	Insert a schedule into this schedule .
2591	Check if the given name is fenced .
2592	Convert a list of gates into integers .
2593	Run the Transformer .
2594	Update layers .
2595	Create a Pauli operator group .
2596	Create a Pauli instance from a label string .
2597	Initialize the QMatrix .
2598	Return a new Pauli product .
2599	Convert the circuit to an Operator .
2600	Return the circuit as an instruction .
2601	Update the qubits .
2602	Update the x .
2603	Insert Paulis into the tensor .
2604	Append a newaulis .
2605	Delete all qubits .
2606	Generate a random boolean matrix .
2607	Create a Pauli operator .
2608	Compute the measurement outcome and outcome
2609	Add samples to the classical memory .
2610	Add a measure to the classical memory .
2611	Add a reset state .
2612	Validate the initial state vector .
2613	Initialize the tensor .
2614	Get the state vector .
2615	Validate circuit sampling .
2616	Run a job .
2617	Run a job
2618	Validate the circuit .
2619	Validate initial unitary .
2620	Initialize the unitary matrix .
2621	Get unitary .
2622	Run a job
2623	Validate the circuit .
2624	Return True if obj is a bit type .
2625	Run the Transpiler .
2626	Check if interval is overlapping .
2627	Shift the interval by time .
2628	Shift the timeslot by time .
2629	Get the start time of the given channels .
2630	Return the stop time of the given channels .
2631	Return True if this timeslots are mergeable .
2632	Return a new TimeslotCollection with merged Timeslot .
2633	Shift the timeslot by a given time .
2634	Report the issue to the given commit .
2635	Process rho .
2636	Plot the state of a state .
2637	Create a Rzz gate .
2638	Swap two gates .
2639	Initialize the backend .
2640	Create the program graph .
2641	Return the next edge of the pipeline .
2642	Selects the remaining circuit .
2643	Return the best available qubit .
2644	Run the program .
2645	Return a list of instruction instructions .
2646	Inverse the gate .
2647	Apply q_ifs to each gate .
2648	Apply c_if .
2649	Check if the matrix is unitary .
2650	Return the conjugate operator .
2651	Transpose operator .
2652	Return the power of this operator .
2653	Return the shape of the output .
2654	Convert a circuit to an operator operator .
2655	Update the swap mapper layer .
2656	Separate bitstring into pieces
2657	Format level zero memory .
2658	Format memory of a level 1 memory .
2659	Format a list of memory2 memory .
2660	Format counts as a dictionary .
2661	Formats a state vector
2662	Format a matrix .
2663	Decorator to ensure that the job is submitted .
2664	Submit the job to the scheduler .
2665	Return the status of the job .
2666	Return True if the interval is included in the range .
2667	Plot the multochrome data
2668	Get the set of qubit modes for this user .
2669	Get the default measurement frequencies .
2670	Perform a QR circuit .
2671	Plot the state of a state
2672	Return the number of k choices
2673	Return the lex index of a list .
2674	Plot the state of a tensor .
2675	Returns a list of unique hardware backends .
2676	The op node
2677	Create a sample of constant pulse .
2678	Return a new zero pulse pulse .
2679	Create a SamplePulse .
2680	Create a new sawtooth pulse .
2681	Create a SamplingPulse .
2682	Sample a cosine pulse .
2683	Sample a sinus .
2684	Create a sample of a Gaussian pulse .
2685	Return the derivative of a sample .
2686	Generate a SamplePulse .
2687	Calculate the distance of the axis .
2688	Generate a string representation of the QR code .
2689	Return an instance of backend_cls .
2690	Rename a register .
2691	Removes all op nodes named opname .
2692	Add a quantum register .
2693	Add a classical register .
2694	Add a wire to the graph .
2695	Verify that the condition is valid .
2696	Return the bits in a condition .
2697	Adds an op node to the graph .
2698	Apply an operation back to the DAG node .
2699	Check that the given edge map registers are valid .
2700	Check the validity of a wiremap .
2701	Map condition in wire_map .
2702	Extend the back register with the given dag .
2703	Compose the DAG .
2704	Check that the wires are valid .
2705	Given a node return a mapping between the edge and the successors of the given node .
2706	Compute the predecessor map for the input circuit .
2707	Topological sort nodes .
2708	Return an iterator over all edges .
2709	Returns a list of nodes of the op .
2710	Return all gate nodes .
2711	Returns a list of nodes matching the given names .
2712	Return two quads .
2713	Return the predecessors of a node .
2714	Return predecessors of a quantum register .
2715	Return the ancestors of a node .
2716	Return all successors of a quantum node .
2717	Remove an op node from the DAG .
2718	Removes all ancestors of a node .
2719	Removes all descendants of a node .
2720	Removes non - ancestor nodes from the DAG .
2721	Removes all nodes of a node from the DAG .
2722	Retrieve the layers of this DAGCircuit .
2723	Construct a DAGCircuit .
2724	Iterate over MultiGraph layers .
2725	Collect all gates on namelist .
2726	Iterate over all nodes on a wire .
2727	Count the number of operations .
2728	Return a summary of the tensor .
2729	Create a tomography basis .
2730	Prepare Pauli measurements .
2731	Generate tomography set .
2732	Process a tomography set .
2733	Create tomoset circuit .
2734	Generate data for tomography .
2735	Calculate the marginal counts for each qubits .
2736	Fit to TOMography data
2737	Calculate Leastsq fit .
2738	Compute the projection of a list .
2739	Linear linearization .
2740	Compute the eigenvalue of the eigenvector
2741	Calculate Wigner data .
2742	Perform a measurement on the circuit .
2743	Check the status of a job .
2744	Monitor the status of a job .
2745	Compute Euler angles .
2746	Simplify U3 gate .
2747	Add all qubits to the dag .
2748	Print the table of qubits in the table .
2749	Builds the jobs history .
2750	Plots the job history .
2751	Draw the pulse .
2752	Add a cu3 gate .
2753	Build a Bell circuit
2754	Transpilation .
2755	Generate a transpile circuit .
2756	Execute a circuit .
2757	Return the drive channel .
2758	Return the control channel .
2759	Return the measure channel .
2760	Return the first channel in the queue .
2761	Generate input state .
2762	Assemble a set of experiments .
2763	Unset the logger .
2764	Plot the state of a state .
2765	Process the fidelity between two channels .
2766	Handle input .
2767	Pop the stack from the stack .
2768	Push a file to the stack .
2769	Run the DAG circuit .
2770	Returns the bound method for an instruction .
2771	Convert an acquired instruction into a dictionary .
2772	Convert frame change .
2773	Convert a persistent value to a persistent value .
2774	Convert a drive instruction .
2775	Convert a snapshot instruction .
2776	Update the annotations of a pulse .
2777	Decorator for sampling functions .
2778	Filter backends .
2779	Resolve a backend name .
2780	Convert a dag into a QuantumCircuit .
2781	Make a dictionary observable from a matrix .
2782	Update the symtab .
2783	Verify that a bit is declared .
2784	Verify that the expression is valid .
2785	Verify that the object is a gate or gate .
2786	Verify that the register is valid .
2787	Verify that the object is a bitlist .
2788	Find the column in the input token .
2789	Set the debug flag .
2790	Parse data .
2791	Run the analysis .
2792	Parse the Qasm file .
2793	Add crz gate .
2794	Generate basis state from string
2795	r projector density matrix .
2796	Calculate purity .
2797	Run the commutation set
2798	Generate the HTML for a backend
2799	Update backend info .
2800	Generate the jobs pending pending .
2801	Runs the Cx dag .
2802	Get a single backend
2803	Shape of the bipartite shape .
2804	Get register specifications .
2805	Truncate a float .
2806	Return a LaTeX document .
2807	Get image depth .
2808	Calculate the page size and return it .
2809	Load schema from file .
2810	Get a validator for a given schema .
2811	Load schemas and validators .
2812	Validate JSON data against a schema .
2813	Return a formatted representation of the error .
2814	Computes the majority of a vote .
2815	Morph an unajority .
2816	Generates a latex source from a circuit .
2817	Draw a matplotlib circuit .
2818	Random unitary operator .
2819	Generate a random density matrix .
2820	Generate a matrix representation of a matrix .
2821	Random density matrix
2822	Generate random density matrix
2823	Returns a list of call names .
2824	Return the power of this tensor .
2825	Composes the subsystem with another .
2826	Convert a circuit to a superoperator .
2827	Runs the DAG .
2828	Convert a circuit into a QObject .
2829	Unroll a dag .
2830	Perform the decomposition of the gate .
2831	Create the gate definition .
2832	Check if the value is a collection of types .
2833	Check the type of the value
2834	Validate atol .
2835	Set the rtol value .
2836	Reshape the inputs .
2837	Get input dimensions .
2838	Get output dimensions .
2839	Return a copy of the data .
2840	Return a copy of this tensor .
2841	Determine the default dimensions .
2842	Multiply tensor product .
2843	Deserialize the value .
2844	Serialize the data to the schema .
2845	Check the type of the choices .
2846	Calculate the fidelity of two states .
2847	SVD operator
2848	Return the inverse of the snapshot .
2849	Set label .
2850	Indicate whether this matrix is a unitary .
2851	Convert to an operator .
2852	Convert this circuit into an Instruction .
2853	Initialize an operator from input data .
2854	Return enum enum for model .
2855	Patch strptime and calendar imports .
2856	Get locale map .
2857	Get locale data .
2858	Check if tokens are valid .
2859	Split a string .
2860	Parses a string into a date object .
2861	Parse a date string .
2862	Check if date_string is applicable .
2863	Translate a date string .
2864	Parse a string using a format string .
2865	Creates and returns an AMMO generator .
2866	Convert an exception to a netC exception code .
2867	Convert exception string to HTTP code .
2868	Read the configuration file .
2869	Compose the configuration .
2870	Get information about all streams .
2871	Compose the stepper configuration
2872	Log stdout and stderr .
2873	Expand time in seconds .
2874	Read stepper wrapper
2875	publish the stepper info
2876	Generate a file name .
2877	Read the stepper info .
2878	Writes cached options to file
2879	Make stepper file .
2880	Given a list of rps schedule return a Composite object .
2881	Return the rps at time t .
2882	Execute a subprocess
2883	Decode monitoring .
2884	Make a list of points for the given label .
2885	Publish a key .
2886	Count the number of matched codes in a dictionary .
2887	Stop the pool .
2888	Read all data from the StPD file .
2889	Initialize logging .
2890	Add user - defined options
2891	Load the core configuration
2892	Try to gracefully gracefully gracefully
2893	Collect data from the queue
2894	Notify listeners
2895	Get a marker .
2896	Parse duration string .
2897	Start the agent on localhost .
2898	Start the agent .
2899	Try to discover the jeter UDP UDP port .
2900	Parse JMX XML .
2901	Terminate the process .
2902	Read data from lines .
2903	Create a criterion from the given string .
2904	Load configuration from a file .
2905	Create a new startup config file .
2906	Check disk space
2907	Check that the memory is available .
2908	Get terminal size
2909	Get the right line
2910	Truncate a line array .
2911	Render the left panel
2912	Render terminal screen .
2913	Add an info widget .
2914	Fill the rectangle with spaces .
2915	Calculate the length of a line .
2916	Create a load plan .
2917	Returns a string representation of the level .
2918	Add an info widget
2919	Make a request to the writer
2920	Load all plugins
2921	Returns the plugin with the given type .
2922	Returns a list of all plugins of the specified plugin type .
2923	Collect a file .
2924	Add an artifact file to the collector .
2925	Create a temporary filename and return its name .
2926	Load configuration files .
2927	Write configuration to file .
2928	Get all options from a section .
2929	Find all sections with a prefix
2930	Parse a chunk of stat data
2931	Get phantom info .
2932	Prepare the client for monitoring .
2933	Poll agent data .
2934	Send data to all listeners .
2935	Detect the configuration .
2936	Internal helper to handle data
2937	Parse the output of agents .
2938	Subscribe to given channels .
2939	Run the event loop .
2940	Close the connection .
2941	Perform a single request .
2942	Submit a new order
2943	Retrieve an order .
2944	Retrieves a specific position .
2945	List all assets .
2946	Get an asset by symbol
2947	Create a joining sub - plan .
2948	Returns a copy of the dict with the given key type .
2949	Get a dict parameter from obj .
2950	Construct an event logger .
2951	Construct a JSON - formatted log - event logger .
2952	Read configuration from a file .
2953	Get the configuration for a repository .
2954	Format a configuration dictionary into a string .
2955	Get a pipeline by its name .
2956	Get all pipelines
2957	Get the next event from the queue .
2958	Execute a pipeline .
2959	Wait for all processes to finish .
2960	Creates a field definition .
2961	Build the execution plan .
2962	Build a plan .
2963	Build a sub - pipeline .
2964	Return the pipeline named by name .
2965	Construct publish commands .
2966	Set a new release tag .
2967	Create a pipeline context definition .
2968	Create an input selector schema for a given config .
2969	Decorator to create an output selector schema .
2970	Print a block of text .
2971	Download file from S3 .
2972	Upload a file to S3
2973	Context manager to ensure user - code error is thrown .
2974	Create a new directory .
2975	A context manager that ensures that the user code is usable .
2976	Creates a DagsterLog .
2977	True if all steps have been successful .
2978	True if all steps are skipped .
2979	Get transformed values .
2980	Return the transformed value .
2981	Return the failure data .
2982	Creates a config dictionary .
2983	Check if config value is a valid dataset .
2984	Check if a config value is valid .
2985	Execute the core transform .
2986	Decorator to configure an existing type .
2987	Decorator for creating a resource definition .
2988	Create EventV2 .
2989	Coalesce the execution plan into a dictionary .
2990	Get connection parameters .
2991	Create a new connection to the database .
2992	Creates a Cursor object .
2993	Close the database .
2994	Convert model dict to MDL
2995	Convert a list of MDL objects into a list .
2996	The default form field
2997	Convert value to MDL
2998	Apply relation filters .
2999	Compute the NFPs .
3000	Compute the NFPs .
3001	Compute the best optimal subproblem .
3002	Determine optimal optimal partitions .
3003	Calculate the C1 and C1 and C1
3004	Initialize the pool .
3005	Calculate the size of the hash .
3006	Serialize MinHash to buffer .
3007	Deserialize a LeanMinHash from buffer .
3008	Update the hash with the given b .
3009	Merge two MinHash objects .
3010	Union of MinHash objects .
3011	Index entries .
3012	Query all indexes with minhash and size
3013	Calculate the minhash of the input vector
3014	Remove a value from the cache .
3015	Update the register
3016	Count the number of samples .
3017	Merges two HyperLogLogs .
3018	Clear the register
3019	Compute the apk score .
3020	Compute the k - k - th - k - th k - th k - th - th - th k - th - th - th k - th - th - k - th - th - test - k - th - k - th - th - k - th - th - th - 1 - 1 - 1 .
3021	Index all hashes in the cache .
3022	Return a list of k permutations .
3023	Close all caches .
3024	Create a storage storage instance .
3025	Create an unordered storage object .
3026	Return the user data .
3027	Set the state of social login .
3028	Return preferred text .
3029	Parse a scoped selector .
3030	Parse a statement .
3031	Parse the value .
3032	Advance the next line .
3033	Parse a configurable reference .
3034	Augments the given exception with the given traceback .
3035	Convert a string to markdown format .
3036	Finalize the session .
3037	Ensure a function is wrapped .
3038	Decorate a function .
3039	Format a value .
3040	Clears the current configuration .
3041	Bind a parameter to the gin config .
3042	Query the parameter for the given binding key .
3043	Returns True if the given function has a parameter name .
3044	Get the argspec for a function .
3045	Get the names of positional parameter names .
3046	Get all positional parameter names .
3047	Retrieve default values for a function fn .
3048	Context manager for creating a new configuration scope .
3049	Decorator to configure a decorator .
3050	Return an operative config string .
3051	Parse configuration statements .
3052	Register a file reader function .
3053	Parse a config file .
3054	Parse config files and return a list of configuration files .
3055	Parse the given value .
3056	Finalize the configuration .
3057	Iterate over nested values .
3058	Iterate over all configurable values .
3059	Set a constant .
3060	Create constants from Enum .
3061	Returns a list of selectors matching the given partial selector .
3062	Get all matches .
3063	Return the selector for the complete selector .
3064	Convert a dictionary to a SP search query .
3065	Parse the Retry - After header .
3066	Validate the value .
3067	Return the property description as a dictionary .
3068	Set the value .
3069	Get a thing by idx .
3070	Initialize the object .
3071	Set default headers .
3072	Prepare the HTTP request .
3073	Get details about a thing .
3074	Process a message
3075	Execute POST request
3076	Remove an action .
3077	Start the TCP server .
3078	Return the action description as a dictionary .
3079	Start the task .
3080	Finish the task .
3081	Return the event description as a dictionary .
3082	Try to get the IP address
3083	Returns a list of all the IP addresses .
3084	Set the value .
3085	Notify an external update .
3086	Return a thing description as a dict .
3087	Sets the href prefix .
3088	Get property description as dict .
3089	Get action descriptions .
3090	Get all event descriptions .
3091	Add a property .
3092	Remove a property
3093	Get the value of a property
3094	Returns the properties as a dictionary .
3095	Sets a property
3096	Get action by name .
3097	Add an event .
3098	Add an event to the list of available events .
3099	Perform an action .
3100	Remove an action .
3101	Add an available action .
3102	Remove a subscriber .
3103	Add an event subscriber to the list of available events .
3104	Remove an event subscriber
3105	Notify a property .
3106	Notify an action .
3107	Notify about an event .
3108	Annotate the model with the given annotations .
3109	Perform an update on the database .
3110	Bulk insert .
3111	Perform an insert .
3112	Creates a new model and returns it .
3113	Build a postgres insert query
3114	Checks if a field is a MagicalField .
3115	Get the list of fields to update the model .
3116	Send signals to model .
3117	Sends the delete signal .
3118	Create a new expression that is not None .
3119	Resolve the expression with the given args .
3120	Return the value as a SQL string .
3121	Return a copy of this instance .
3122	Add additional joins to the model .
3123	Check if the given field is a HStoreField .
3124	Insert values into the table .
3125	Creates a required hstore constraint .
3126	Execute the required hstore requirement .
3127	Drop a required hstore constraint .
3128	Returns the constraint name for the required field .
3129	Overrides the SQL create_create_create_index_create method .
3130	Create a custom command .
3131	Return the database base class .
3132	Prepares the database .
3133	Prepare the value for the field
3134	Form the SQL for the query .
3135	Return a list of sql statements for insert .
3136	Rewrite insert action .
3137	Return the SQL rewrite of the query .
3138	Rewrite the INSERT statement .
3139	Build conflict target
3140	Get model field by name .
3141	Format field name .
3142	Return the string representation of a field .
3143	Creates a unique constraint for a given model .
3144	Rename a hstore .
3145	Drops the unique constraint for a given model .
3146	Generate unique constraint name .
3147	Iterate over the unique keys for the given field .
3148	Add a condition to the request .
3149	Return the SQL for this field .
3150	Return the level of the tdist 959595 level .
3151	Calculate the variance of two samples .
3152	Compute the T - score between two samples .
3153	Check if two samples are significant
3154	Topological sorting .
3155	Generate N queens
3156	Play a board .
3157	Select the next candidate .
3158	Play a random game .
3159	Filter benchmarks based on base_vercs .
3160	Recursively expand benchmarks name .
3161	generate string table
3162	Initialize benchmarks .
3163	Returns the domain of the knot .
3164	Fetch messages from a channel .
3165	Parse the posts .
3166	Get information about a user .
3167	Fetch items
3168	Fetch RSS entries
3169	Setup command argument parser .
3170	Fetch items by category
3171	Returns a list of bug bugs .
3172	Gets comments for a given bug ids .
3173	Returns history of given bug ids .
3174	List attachments .
3175	Get a list of issue notes .
3176	Fetch merge requests
3177	Get a list of merge notes .
3178	Get merge versions
3179	List all merges in the repository .
3180	Fetch a merge .
3181	Get merge versions .
3182	Fetch a merge .
3183	Get notes for a given item .
3184	List emojis .
3185	Retrieve a list of eojis .
3186	Calculate time to reset the rate limit .
3187	Get paginated items from GitLab .
3188	Init rate limit .
3189	Setup command line argument parser
3190	Fetch messages from a specific date
3191	Generate metadata id from metadata
3192	Returns the number of members in the chat .
3193	Fetch information about a channel .
3194	Get information about a user .
3195	Setup command argument parser
3196	Get the timestamp of the metadata
3197	Parse a csv file .
3198	Parse bug details .
3199	Parse HTML .
3200	Logout from Bugzilla .
3201	Returns metadata about the server
3202	Get a list of Bugzilla bugs .
3203	Returns a list of bug ids .
3204	Get information about a bug .
3205	Fetch events
3206	Fetch events from a group
3207	List events for a group .
3208	Get comments for a group .
3209	Get VRS values for a particular event .
3210	Fetch a question
3211	Fetch comments for a question
3212	Builds a question object from the soup
3213	Get all questions from the API .
3214	Get the html question
3215	Get comments for a post .
3216	Parses the question
3217	Parses the answer information of an answer
3218	Returns the number of pages in a HTML question
3219	Parse the update info .
3220	Fetch reviews
3221	Parse reviews .
3222	Fetch latest reviews .
3223	Get the server version .
3224	Get the reviews for the last item .
3225	Return the next group item .
3226	Execute a command
3227	Execute a command from the archive
3228	Execute the given command .
3229	Setup the command argument parser .
3230	Fetch the issue data .
3231	Fetch attachments
3232	Fetch all messages for a given issue .
3233	Fetch activities for a given issue .
3234	fetch user data
3235	Get information about a user .
3236	Get a single issue .
3237	Get items for a given issue .
3238	Get the URL of the project
3239	Fetch items from the API
3240	Get paginated subscriptions
3241	Find the group id
3242	Perform a GET request
3243	Setup command argument parser
3244	Generate a unique uuid .
3245	Wrapper for fetch .
3246	Fetch all files from an archive
3247	Find all backends in the given top_package
3248	Fetch items from the backend
3249	Fetch metadata from archive
3250	Filter out classified data .
3251	Parse arguments .
3252	Set authentication arguments .
3253	Set archive arguments
3254	Set the output arguments .
3255	Run the backend
3256	Initialize the archive manager .
3257	Get the timestamp of the metadata
3258	Parse mbox file .
3259	Fetch messages from a mailing list .
3260	Copy a mbox to a temporary file
3261	Validate a message .
3262	Convert a dictionary to a dictionary .
3263	Get a message from the file .
3264	Fetch items
3265	Fetch commits
3266	Parse a git log file .
3267	Initialize the git repository .
3268	Setup the command argument parser .
3269	Parse the stream .
3270	Clone a repository
3271	Count the number of objects in this repository .
3272	Return True if this repository is detached .
3273	Update this repository .
3274	Get commits from the repository .
3275	Return a list of git rev - list of branches .
3276	Returns the git log for this repository .
3277	Run git show command .
3278	Wrapper for fetch_pack .
3279	Return list of commits in a pack .
3280	Update local references
3281	Discovers references in the remote repository .
3282	Update a ref .
3283	Execute a subprocess .
3284	Read the stderr from the subprocess .
3285	Run git command .
3286	Fetch items from Twitter .
3287	Fetch items from category
3288	Fetch tweets from the API .
3289	Setup the command argument parser
3290	Fetch hits for given category .
3291	Fetch hits
3292	Parses the hit string and returns a json dictionary
3293	Fetch hits for given keywords .
3294	Get the timestamp of a metadata item .
3295	Determine the metadata category .
3296	Fetch pull requests
3297	Fetch repo info
3298	Get all reactions for a given issue number .
3299	Get reaction reactions
3300	Get a list of assignees from the issue list .
3301	Get the list of reviews for a pull request .
3302	Get hashes for a pull request .
3303	Get reactions for a pull review comment .
3304	Get a user by login
3305	Get all the reactions for an issue .
3306	Get a list of issues .
3307	Return a generator of pull requests .
3308	Return the name of the repository .
3309	Get a list of Reviewers for a pull request .
3310	Get all pull commits .
3311	Get reactions from a pull comment .
3312	Get a user by login
3313	Get the orgs for a login
3314	Get the rate limit .
3315	Get the rate limits for tokens .
3316	Choose the best API token .
3317	Checks if the current rate limit is reached .
3318	Update the current rate limit .
3319	Initialize metadata .
3320	Store an entry in the archive .
3321	Retrieve an entry .
3322	Create a new archive
3323	Creates a hashcode for the given payload and headers .
3324	Verify the integrity of the archive .
3325	Load metadata from the database .
3326	Return the number of rows in the archive
3327	Create the archive .
3328	Remove an archive .
3329	Searches for archived archives .
3330	Search archive files .
3331	Search all files in the directory .
3332	Returns the type of the compressed file .
3333	Generate months between two dates .
3334	Convert a message to a dictionary .
3335	Remove illegal XML chars .
3336	Convert xml to dict
3337	Return a generator of issues from JSON .
3338	Returns a list of open issues .
3339	Get information about an issue .
3340	Get information about a user .
3341	Make a request to Redmine
3342	Fetch dock data
3343	Fetch items from the repository
3344	Get the contents of a repository .
3345	Map custom fields
3346	Filter custom fields .
3347	Parse a raw page of issues .
3348	Get issues from a given URL .
3349	Get all issues for a given date
3350	Get comments for an issue .
3351	Returns a list of field names .
3352	Fetch items
3353	Returns a list of jobs
3354	Get all builds for a particular job .
3355	Return a generator of questions from a raw page
3356	Return a generator of questions
3357	Setup command line arguments
3358	Fetch items for a given category .
3359	Get the most recent timestamp from a list of reviews .
3360	Fetch all pages in the reviews API .
3361	Returns all pages in a namespace
3362	Return recent pages .
3363	Fetch messages .
3364	Parse JSON output .
3365	Return True if message is in list of chats .
3366	Returns a list of updates .
3367	Fetch items from a group
3368	Add metadata to item
3369	Parse an article .
3370	Wrapper for fetch .
3371	Fetch an article
3372	Fetch data from remote server
3373	Fetch data from archive
3374	Create a http session .
3375	Setup the rate limit handler .
3376	Sleep for rate limit .
3377	Update the rate limit .
3378	Parse a Supybot log file .
3379	Retrieve all Supybot archives .
3380	List all Supybot archives
3381	Parse the SUPYBot stream .
3382	Parse a SUPYbot timestamp .
3383	parse supybot message
3384	Fetch topics
3385	Parse the topics page .
3386	Get information about a topic .
3387	Get a specific post .
3388	Fetch items from the feed
3389	Return a generator that yields all the tasks in the json .
3390	Parse the JSON output .
3391	Get a generator of tasks .
3392	Retrieve transactions associated with a list of transactions .
3393	Retrieve a list of users .
3394	Sets a list of phids .
3395	Make a call to the Phabricator API .
3396	Generate metadata id from metadata
3397	Parse the contents of a JSON summary .
3398	Get the contents of the search query
3399	Get historical content for a given content .
3400	Parse the result .
3401	Generates a URL for the capabilities
3402	Read a given URL .
3403	Reads a string into an etree .
3404	Parses the result .
3405	Build the URL .
3406	Get elements of complex_type element .
3407	Construct a schema from a list of elements .
3408	Generate a description of a feature type .
3409	Execute a complex_data_with_reference
3410	Gets the movie list .
3411	Gets the TV list .
3412	Get movies .
3413	Retrieves the health information .
3414	Retrieves the alternative titles .
3415	Retrieves the credits .
3416	Gets external ids .
3417	Retrieves the keywords .
3418	Retrieve recommendations .
3419	Gets the release dates .
3420	Retrieves a list of releases .
3421	Gets the translations for a resource .
3422	Gets similar movies .
3423	Retrieve reviews .
3424	Retrieves the changes .
3425	Gets the upcoming jobs .
3426	Retrieves information about the currently playing time .
3427	Gets a list of popular URLs .
3428	Gets the top rated entries .
3429	Gets the account states .
3430	Creates a rating .
3431	Retrieves the movie credits for a movie .
3432	Retrieves the TV credits for a TV .
3433	Retrieves information about a credit id .
3434	Gets information about the TV .
3435	Retrieves information about a resource .
3436	Retrieves a list of movies .
3437	Retrieves information about the device .
3438	Get movie list of movies .
3439	Creates a new token .
3440	Gets a valid OAuth token .
3441	Creates a new session .
3442	Update a guest session .
3443	Gets the rated movies .
3444	Retrieves the status of an item .
3445	Create a list .
3446	Remove an item .
3447	Clear a session .
3448	Gets the content ratings for a project .
3449	Gets similar tags .
3450	Retrieves information on the air .
3451	Retrieves the series information .
3452	Retrieves the credits for a season .
3453	Get external ids .
3454	Retrieves information about a series .
3455	Get credits .
3456	Get external ids .
3457	Set attributes to values
3458	Retrieves information about a movie .
3459	Gets the collection details .
3460	Get information about the TV .
3461	Gets the person information .
3462	Gets company information .
3463	Gets the keywords from the API .
3464	Retrieves a list of multiple values .
3465	Normalize a string .
3466	Takes a list of refs and returns a tuple of ngrams
3467	Takes a reference set and returns a tuple of n - grams .
3468	Calculate the error of an error .
3469	Align two blocks .
3470	iterate over all descriptors in a module
3471	Register a list of JSON objects .
3472	Register a new descriptor .
3473	Prints the given string .
3474	Return True if the given descriptor is a descriptor .
3475	Convert to json
3476	Get the current coordinate .
3477	Calculate the atomic angle of the sphere .
3478	The surface area of the surface .
3479	Create a molecule object from a molecule .
3480	Convert obj to ConstDescriptor .
3481	Return a new instance with missing values .
3482	Return a new DataFrame with new values removed .
3483	Return tuple of keys and values .
3484	Return the object as a dictionary .
3485	Get the name of this field .
3486	Decorator for debugging .
3487	Decorator for synchronizing functions .
3488	Print a progress message .
3489	Print a message to stdout .
3490	Fail an exception .
3491	Get a random file .
3492	Set a temporary file .
3493	Remove all temporary files
3494	Get a fixed path
3495	Returns a list of parameters required for the given method .
3496	Merge options for a method .
3497	Add command line options .
3498	Terminate all tasks .
3499	Add a task to the queue .
3500	Wait for all threads to finish .
3501	Count the number of tasks .
3502	Read S3 access keys from environment variables
3503	Read S3 keys from commandline .
3504	Read S3 keys from config file
3505	Initialize S3_keys .
3506	Connect to S3
3507	List all buckets
3508	Like os . walk .
3509	Perform local walk .
3510	Expand source parameters .
3511	Upload a single file to the pool .
3512	Put files into storage .
3513	Create a bucket .
3514	Update the privilege property
3515	Print all files in S3
3516	Download a single file from S3
3517	Get files from S3
3518	Copy a single file to S3
3519	Copy files from source to target .
3520	Delete all files in S3
3521	Return a list of relative paths for a given directory .
3522	Sync files from source to target directory .
3523	Compute the md5 hash of a file .
3524	Returns the md5 hash of the file .
3525	Ensure that the target directory exists .
3526	Checks to see if a remote key is consistent
3527	Determine if path matches the filter_path .
3528	Perform an S3 walk .
3529	Conditionally return a list of objects
3530	Get the permissions for a file .
3531	Look up an object .
3532	Read a chunk of data from a file .
3533	Upload a file to S3 .
3534	Verify that the downloaded file is inconsistent .
3535	Write chunk data to file .
3536	Copy a file to S3 .
3537	Run the application .
3538	Validate a format string
3539	Pretty print objects .
3540	Handler for listing buckets .
3541	Create mb bucket
3542	Handler for put_files .
3543	Handles get_files
3544	Print files .
3545	Dsync handler
3546	cp_files handler
3547	Move multiple files
3548	Delete files from S3
3549	Duplication handler
3550	Handle the total size of the S3 handler .
3551	Match date string .
3552	Match time .
3553	Match delta to delta
3554	Check that value is a dict .
3555	Discover the gateway .
3556	Listen for messages .
3557	Read from the hub .
3558	Push data to the broker .
3559	Generate a key .
3560	Catch exception handler .
3561	Include rollbar .
3562	Add a log handler to the log .
3563	Return the request object .
3564	Initialize rollbar .
3565	A decorator that returns a lambda function .
3566	Report a message to Rollbar .
3567	Search items by title .
3568	Create log logger .
3569	Build the person data .
3570	Add lambda context data to dictionary .
3571	Add request data to data .
3572	Check if the given frame is added to the project .
3573	Recursively build request data
3574	Build server data .
3575	Build the JSON payload .
3576	Run the server .
3577	Compose Chinese characters .
3578	Decompose a Chinese letter .
3579	Determine if a letter has a Hangul letter .
3580	Attach a word to a word
3581	Check if an exception is inside an exception .
3582	Check if the node is inside a lambda function .
3583	Get all elements of a node .
3584	Clones inside an exception .
3585	Check if the given node is a superclass .
3586	Check if the node is an error .
3587	Check if the node is a default argument .
3588	Check if the node is a function decorator .
3589	Return True if node is an ancestor of the given frame .
3590	Return the parent of the given node .
3591	Decorator to register checks messages .
3592	Return an iterable of strings from a format string .
3593	Get an argument from a call node .
3594	Check if the given node is inherit from standard exceptions .
3595	Decorator to catch exceptions .
3596	Check if a function is decorated .
3597	Return True iff func is decorated with the given qnames .
3598	Find an exception handler node .
3599	Check if the given node is an import block .
3600	Return the exception handlers for the given node .
3601	Return True if node is an exception handler .
3602	Check if class is abstract .
3603	Infer the node with the given context .
3604	Return the type of assign node .
3605	Check if the given node is registered .
3606	Check if the node is annotated .
3607	Return the fully qualified names of a module .
3608	Get the absolute name of an import node .
3609	Return a string representation of the tree .
3610	Generate the graph for import
3611	Visitor for imports .
3612	Visitor for importfrom node .
3613	Check if the import is correct .
3614	Records an import node .
3615	Checks the import order .
3616	Check if a relative import is a relative import .
3617	Add a message to the import tree .
3618	Check if a module is deprecated .
3619	Add a message to the preferred module .
3620	Add external dependencies .
3621	Filter the dependencies of the module .
3622	Return a list of default options .
3623	Insert the default options .
3624	Returns True if the attribute is visible .
3625	Get the callbacks for a node .
3626	Visit a node .
3627	Check that all messages are consistent .
3628	Check for call nodes .
3629	Check if a boolean is valid .
3630	Check if the mode is valid .
3631	Handle messages .
3632	Print all the messages
3633	Get the title of a node .
3634	Set default options .
3635	Return True if the given node is shown .
3636	Add a class node .
3637	Get all ancestors of a given node
3638	Get all instances of the given class .
3639	Extracts the classes of the given class .
3640	Return the classdiagram and classdiagram .
3641	Visitor for importfrom node .
3642	Create a classDiagram object for the given class .
3643	Read diagram definitions .
3644	Determine if owner should be ignored .
3645	Return list of names that match the given attribute .
3646	Return True if the node is no member of the given class .
3647	Return True if the given node is a parent of the given type .
3648	Returns True if name is a variadic name .
3649	Return True if the variable is not a context variable
3650	Visit an attribute node .
3651	Check for assignments .
3652	Check if the function is callable .
3653	Visit a UnaryOp node .
3654	Iterate over the interfaces of a node .
3655	Build a project from a list of files .
3656	A package node .
3657	Initialize a function definition .
3658	Handle assignment names .
3659	Handle assignment attributes .
3660	Visit all imported modules .
3661	Visit an importfrom node .
3662	Compute the module for the given mod_path
3663	Handle imported module .
3664	Generate an ansi code .
3665	Colorizes a message using ansi codes .
3666	Register the linter .
3667	Handle incoming messages .
3668	Display the given layout .
3669	Handle a message .
3670	Open a graph .
3671	Create a node .
3672	Create an edge .
3673	Check for new format nodes .
3674	Process a non - raw string .
3675	Number of sections .
3676	Number of sections .
3677	Render a table .
3678	Default default table .
3679	Add a renamed message .
3680	Register all messages from a checker .
3681	Registers a message .
3682	Check that the given symbol exists .
3683	Raises an InvalidMessageError if the symbol is not a duplicate symbol name .
3684	Raise an InvalidMessageError .
3685	Get the message definitions for the given message id or symbol .
3686	Get a display string for a message .
3687	Print the help message for the given messages .
3688	List all registered messages
3689	Start the builder .
3690	Return CPU count .
3691	Adds messages to a report
3692	Temporarily fix python import path .
3693	Load plugin modules .
3694	Load plugin configuration .
3695	Set an option .
3696	Register a checker .
3697	Disable all reports .
3698	Enable Python import mode .
3699	Returns a list of all checkers .
3700	Returns a sorted list of checker names .
3701	Prepare checkers .
3702	Expand a list of modules .
3703	Set the current module .
3704	Check if an AST node is a valid Python module .
3705	Report the evaluation .
3706	Handle a help message
3707	Print the full documentation
3708	List messages
3709	List check groups
3710	Normalizes given text .
3711	Return module and frameid .
3712	Decode line .
3713	Check if the base name is in blacklisted files .
3714	Load plugins from a directory .
3715	Generate a comment
3716	Format an option value
3717	Format a section .
3718	Format a list of options .
3719	Inserts a child at the given index .
3720	Append a child to this node .
3721	Returns the parents of this node .
3722	Format a given layout .
3723	Compute table content
3724	Generate the content for this node .
3725	Collects all lines from a module .
3726	Handle an ignored message .
3727	Register a report
3728	Make report sections .
3729	Add stats to self . stats .
3730	Get setters property name .
3731	Get setters property .
3732	Returns whether the return value is a constant
3733	Return a list of possible exc types .
3734	Process a module .
3735	Process a module .
3736	Process comments .
3737	Return True if stmt is a from_future .
3738	Checks if the given parent is in a loop .
3739	Return the overridden method definition .
3740	Get the extra information for a node .
3741	Detect if the given node is in a global scope .
3742	Return True if name_node is assigned locally .
3743	Mark a node as consumed .
3744	Visit a global variable .
3745	Ignore a class scope .
3746	Check if the node is homonym of the upper function .
3747	Check for unpacking .
3748	Recursively check metaclasses .
3749	Get all packages in a directory
3750	Install pylint .
3751	Install the installation .
3752	Creates a table showing the differences between stats and old_stats .
3753	Entry point for the hypervisor .
3754	Append a stream to this stream .
3755	Compute the similarity indices for each line .
3756	Display the number of lines in sims .
3757	Find common lines .
3758	Iterate over all possible simmas .
3759	Iterate through the stripped lines .
3760	Create a dictionary with index numbers .
3761	Check if a definition is equivalent to the definition .
3762	Checks the equality of two nodes .
3763	Determine if two parameters have the same default value .
3764	Determine whether the parameters are different .
3765	safe infer_call result
3766	Add a node to the scope .
3767	check for classdef
3768	Check if a node is consistent .
3769	Check that the given node is valid .
3770	Check if a function is called .
3771	Checks if the given function is a superclass .
3772	Leave a function definition .
3773	Check for slots in slots .
3774	Visitor for name .
3775	Check that all the accessed members are accessed .
3776	Check if the given node is abstract .
3777	Check if the method is valid .
3778	Checks if the given node is a mandatory method parameter .
3779	Check if the body is a raise .
3780	Check for bad exception context .
3781	Visit functiondef nodes .
3782	Display the layout
3783	Check if the node is a typing tuple .
3784	Check if the node is an Enum class .
3785	Check if a class is a dataclass .
3786	Initialize the parser .
3787	Visit a classdef node .
3788	Called when a class definition is created .
3789	Visit an if node .
3790	Check if the condition is too long .
3791	Check the docstring of a node .
3792	Return the formatted representation of this Field .
3793	Return True if the token is a trailing comma .
3794	Check if the node is an elif .
3795	Checks if the given node is simplified .
3796	Check if a stop iteration is inside a generator .
3797	Check if an exception is inherited from the stopiteration module .
3798	Check that the next iteration is raised .
3799	Check for nested blocks .
3800	Return a dict with duplicated types .
3801	Checks whether or not the isinstance .
3802	Checks that a comparison node is used .
3803	Determines if the given node is an OR and and and is a condition .
3804	Check whether the return statements are consistent .
3805	Check if a return is end of a function .
3806	Check for loops .
3807	Check if output format is available .
3808	Get diadefs
3809	Write package packages .
3810	Emits all classes .
3811	Set the printer .
3812	Set the printer to a file .
3813	Return whether this module is emitted .
3814	Format the help message .
3815	Get environment variables .
3816	Run pylint .
3817	Run a pylint command .
3818	Get cycle list .
3819	Get the source code .
3820	Generate the graph
3821	Format a section .
3822	Register a message handler .
3823	Disable a message .
3824	Enable or disable a message .
3825	Return the symbol symbol of a message .
3826	Check if a message is enabled .
3827	Add a message .
3828	Print the global options and switches .
3829	Print the checker documentation .
3830	Calculate the length of a given line .
3831	Return a line of indentation hints .
3832	Return indent for token .
3833	Handle line start .
3834	Return valid indentations .
3835	Handle hanging indentation .
3836	Return a continuation .
3837	Push a token onto the stack .
3838	Handle a new line .
3839	Checks if the given keyword is a list of parentheses .
3840	Return True if the token is valid .
3841	Check for equality spaces .
3842	Check if token is within a space .
3843	Visit a default statement .
3844	Check for multiple statements .
3845	Check the number of lines .
3846	Check the indentation level .
3847	Return True if the node is in an iterating context .
3848	Check if the node is a conditional import .
3849	Visit a name node .
3850	Add an indexing exception .
3851	Add information about an attribute .
3852	Visit an exception handler .
3853	Check for raise .
3854	Find the pylintrc file .
3855	Validate value .
3856	Expand the default value of the option .
3857	Match an option .
3858	Register an option provider .
3859	Called when the provider is set
3860	Set global option .
3861	Generate configuration options .
3862	Load the configuration file
3863	Load command line options .
3864	Add a help section .
3865	Format the help message .
3866	Load all default values
3867	return the name of an option
3868	Return the definition of an option .
3869	Iterate over all sections and their values .
3870	Check if a function is a method call .
3871	Check if the node is a complex format string .
3872	Visit the logging module .
3873	Visitor for ImportFrom node .
3874	Visit an import node .
3875	Visitor for calls .
3876	Check that the format string is interpolated .
3877	Return True if the node is in loop .
3878	Return the parent loop node .
3879	Return True if the loop is early .
3880	Get property names and names .
3881	Determine the name of a function .
3882	Generate a report for each node type stats .
3883	Determine if a node is redefined by decorator .
3884	Check if a call is a single argument .
3885	Check if starred targets are assigned .
3886	Check for nonlocal and global variables .
3887	Check if call is abstract .
3888	Check if a node is on a loop .
3889	Check if a node is in a loop .
3890	Initialize the parser .
3891	Check if expr is a valid string .
3892	Visit a lambda node .
3893	Visitor for Assert node .
3894	Add duplicate keys .
3895	Check if the node is unreachable .
3896	Checks if the node is not in the main loop
3897	Check if the call is a valid generator .
3898	Visit an assignment name .
3899	Check if the name is valid .
3900	Check if a node is a valid docstring .
3901	Check if a literal is comparison .
3902	Initialize a subgraph .
3903	Parse a subgraph .
3904	Add a message to the parser .
3905	Add checker to checker
3906	Walk an astroid .
3907	Add a relationship between two objects .
3908	Get a relationship from a given object .
3909	Get the attributes of a node .
3910	Get all the methods of a node .
3911	Add an object to the diagram .
3912	Return class names .
3913	List of class definitions .
3914	Get a class by its name .
3915	List of module objects .
3916	Get a module by its name .
3917	Get a module by its name .
3918	Add a dependency to a module .
3919	Delete this grant .
3920	Return the query for the given model .
3921	Get user by username .
3922	Fetch object by access token or refresh token
3923	Set token for token
3924	Store a grant .
3925	Get a specific client .
3926	Prepare a request .
3927	Initialize the extension .
3928	Add a remote application .
3929	Make a request to the API
3930	Authorize an OAuth2 token
3931	Handle an OAuth1 response .
3932	Handle OAuth2 response .
3933	Handle an authorized response .
3934	Deprecated method .
3935	Hashes token .
3936	Make a client with the given token .
3937	Make an OAuth client .
3938	Context manager to temporarily activate OAuth .
3939	Confirm an authorization request .
3940	Handle a request token handler .
3941	Get client secret
3942	Get the request token secret .
3943	Get the access token for a request .
3944	Get the default realms for a client .
3945	Get realms of a request .
3946	Get the redirect URI for the given token .
3947	Get the RSA key for a client .
3948	Validate client key .
3949	Validate request token .
3950	Validate access token .
3951	Validate the given timestamp .
3952	Validate redirect_uri .
3953	Validate the realms .
3954	Validate a verifier .
3955	Verify request token .
3956	Verify the realms
3957	Save an access token
3958	Save a request token .
3959	Save a verifier
3960	Get the error URI .
3961	Confirm an authorization request .
3962	Verify a request .
3963	Extract the credentials from the Authorization header .
3964	Check if client is authenticated .
3965	Authenticate a client .
3966	Authenticates a client .
3967	Get the scopes for a refresh token .
3968	Confirm a refresh token .
3969	Return default redirect URI .
3970	Get default scopes .
3971	Invalidate an authorization code for a grant .
3972	Save authorization code .
3973	Save a bearer token
3974	Validate a bearer token .
3975	Validate client id .
3976	Validate a grant .
3977	Validate the grant type .
3978	Validate a refresh token .
3979	Validate response type .
3980	Validate scopes .
3981	Validate username and password .
3982	Revoke an access token .
3983	Return default data for QAPI request .
3984	Recursively convert keys to strings
3985	Change the Authorization header .
3986	Register this application to a remote application .
3987	Create a new application .
3988	Extract the parameters from a Flask request .
3989	Convert text to bytes .
3990	Decode text to unicode .
3991	Create a response .
3992	Return a list of cached clients .
3993	Add a remote app to the cache .
3994	Add a remote application .
3995	Checks if the certificate has expired .
3996	Generate the PSA verification .
3997	Check private key .
3998	Check if private key is invalid .
3999	Check if private key is wrong
4000	Check all of the get_revoked
4001	Check for duplicate revocation certificates .
4002	Create a X509 certificate .
4003	Create a certificate .
4004	Decorator that turns a function into a function .
4005	Load the certificate locations .
4006	Set the password callback .
4007	Use the certificate chain to use SSL .
4008	Set the certificate to use .
4009	Set the certificate to use .
4010	Add an extra chain certificate .
4011	Use this method to use a private key file .
4012	Use this method to use the private key .
4013	Load the client certificate list .
4014	Set the SSL verification depth .
4015	Load a temporary dh file .
4016	Sets the cipher list .
4017	Sets the client CA list .
4018	Add a client CA to the current context .
4019	Set the callback for the SSL server .
4020	Set the TLS version of TLS .
4021	Set the NPN select callback .
4022	Set the SSL protocols .
4023	Set the callback for the ALPN transport .
4024	Set the OCSP callback .
4025	Set the OCSP server callback .
4026	Set the OCSP client callback .
4027	Set the SSL context .
4028	Get the host name .
4029	Set the host name .
4030	Receive data from the socket .
4031	Read bytes from the buffer .
4032	Read bytes from the BIO socket .
4033	Renew the connection .
4034	Shutdown the connection .
4035	Get the list of cipher names .
4036	Return a list of client certificates .
4037	Set the SSL shutdown state .
4038	Get a random string from the server .
4039	Get a random character from the pool .
4040	Return the master key .
4041	Export a keying material .
4042	Get a session .
4043	Get the name of the cipher .
4044	Returns the current cipher bits .
4045	Returns the current SSL cipher version .
4046	Returns the protocol version name .
4047	Get the next negotiated Protocol .
4048	Set the SSL protocols .
4049	Get the negotiated ALPN protocol .
4050	Create a new BIO object .
4051	Return a string representation of a bio .
4052	Set an ASN time boundary .
4053	Convert a timestamp into an ASN time object .
4054	Get an elliptic curve by name .
4055	Dump a public key to a PEM file .
4056	Load a public key .
4057	Sign the given data with the given digest and digest .
4058	Verify a signature .
4059	Dump a CRL to a file .
4060	Converts the key to a cryptography key .
4061	Generates a new RSA key .
4062	Check if this key is valid .
4063	Load curves from lib .
4064	Load curves from lib library .
4065	Convert to EC key .
4066	Derives the name of the certificate .
4067	Get the components of a certificate .
4068	Returns the short name of the certificate .
4069	Get the data of the certificate .
4070	Convert certificate to cryptography .
4071	Set the public key .
4072	Return the public key .
4073	Get the name of the certificate .
4074	Add a list of extensions to the client .
4075	Return a list of X509Extension objects .
4076	Verify a certificate .
4077	Convert certificate to cryptography .
4078	Set the version of the certificate .
4079	Get the public key .
4080	Set the public key .
4081	Sign the given digest with the given digest .
4082	Returns the signature of the certificate .
4083	Compute the digest of a certificate .
4084	Set the serial number .
4085	Get the serial number of a certificate .
4086	Calculate the amount of time after a certificate .
4087	Calculate the amount of time between this certificate and amount .
4088	Returns True if the cache has expired .
4089	Returns the name of the issuer .
4090	Set the name of the issuer .
4091	Get the name of the certificate .
4092	Set the certificate name .
4093	Add one or more extensions to this certificate .
4094	Return the X509Extension of this certificate .
4095	Add a certificate to the store .
4096	Add a CRRL to the certificate store .
4097	Set the certificate time .
4098	Initialize the store .
4099	Return an X509StoreContextError .
4100	Verify the certificate .
4101	Set the serial number .
4102	Returns the serial number of the certificate .
4103	Set the reason of this certificate .
4104	Returns the reason for this certificate .
4105	Set the revocation date .
4106	Convert certificate revocation list to a cryptography library .
4107	Retrieves a list of revocation objects .
4108	Return the issuer of this certificate .
4109	Sign the certificate with the given digest .
4110	Exports the certificate .
4111	Returns the type name of the object .
4112	Set the CA certificates .
4113	Exports the certificate .
4114	Sign a message with the given digest .
4115	Verify a key .
4116	Encode the SPKI .
4117	Gets the public key .
4118	Set the public key .
4119	Create an exception from the error queue .
4120	Convert obj to bytes .
4121	Creates a helper function for printing tokens .
4122	Get metadata from config .
4123	Iterate over all issues in the board .
4124	Get the annotations for a card .
4125	Get all boards
4126	Get list of open lists .
4127	Get a list of cards .
4128	Get all comments for a given card .
4129	Build the API URL .
4130	Wrapper for getter .
4131	Convert link field to dict
4132	Get issues by query
4133	List pull requests
4134	Aggregate remote issues .
4135	Helper function to get a configuration value
4136	Return a dictionary of template templates .
4137	Validate the configuration .
4138	Return True if the given issue is in the configuration .
4139	Create a table from a grid
4140	Execute a command and return the result .
4141	Return an integer as an integer .
4142	Pull issues from the project .
4143	Get data from url
4144	Get a collection from the API
4145	Find the unique UUID for the given issue .
4146	Merge two fields into a single task .
4147	Build uas_config overrides from targets .
4148	Parse a sprint string
4149	Get credentials from the client .
4150	Calculates the F - R - R - R - R - R - R - R - R - R - R - R - R - R - R - R - R - R - R - R - R - R - R - R - R - R - R - R - R - R - R - R - R .
4151	Calculate p - values for each gene .
4152	Calculate the corrected term correction .
4153	Compute the Z score of a DataFrame .
4154	Plots heatmap from DataFrame .
4155	Adjust spines for the given axes
4156	Prepare the argument parser
4157	Subrank command parser .
4158	Adds the command parser to subparsers
4159	Argument parser .
4160	Compute enrichment_score for each gene .
4161	Generate a ranking metric tensor .
4162	Calculate the ranking metric for a DataFrame .
4163	Compute the GP value of the gaussian distribution .
4164	Compute the significance of the enrichment scores .
4165	Returns a pandas DataFrame with the name and description
4166	Returns a pandas DataFrame with the name and description
4167	Return dataset s attributes .
4168	Return filtered filters
4169	Perform a query against the database
4170	Simulate GSEA analysis .
4171	Single sample GSEA
4172	run prerank algorithm
4173	Generate a replot from GSEA .
4174	Set the number of cores .
4175	Load gene sets
4176	Returns a list of libraries available to the database .
4177	Download and store gene sets
4178	Compute the heatmat .
4179	Save results to file .
4180	Load gene expression data
4181	Run analysis .
4182	Run GSEA analysis .
4183	Iterate over samples permu
4184	Runs ssgsea .
4185	save the results to a file
4186	Run GSEA analysis .
4187	Generate Enrichr
4188	Parse enriched gene sets
4189	Parse gene lists .
4190	send a list of gene ids
4191	Check the number of genes recognized by the user .
4192	Get the set of genes .
4193	Run enrichr
4194	Creates a cube
4195	Generate Icosphere .
4196	Create a torus image
4197	Draw plane edges .
4198	Create a cube_hires .
4199	Retrieve color values from a color file .
4200	check if var is a list
4201	Make a list of lists
4202	write a filter script
4203	Generate LS3 loop .
4204	Generate close vertices
4205	Creates a script for closing holes .
4206	Creates a glitch on the non - Managed faces .
4207	Creates a filter of the smoothed borders .
4208	Translate a vector to a vertex
4209	Rotate a script .
4210	Apply a scale to a script .
4211	r Compute the polynomial of a cylinder .
4212	Wrap a string to a cylinder
4213	Make a script around a script .
4214	Transform a script to a torus curve .
4215	Convert vc to TeX
4216	Convert mesh to FC .
4217	Generate uniform mesh resampling .
4218	Generate a Screened Poisson projection .
4219	Compute voronoi s voronoi .
4220	Generate a filter .
4221	Generate a filter by Vertex
4222	Generate a conditional face function .
4223	Generate a conditional vertex function .
4224	Generate cylindrical vertices .
4225	Simple wrapper for spherical vertices
4226	Join the script .
4227	Rename the current mesh .
4228	Change the current layer .
4229	Duplicate the current layer .
4230	Delete lower layer .
4231	Handle an error .
4232	Start filter script .
4233	Add a new layer to the layer .
4234	Delete a layer .
4235	Save the filters to a file .
4236	Run a meshlab script .
4237	Calculate the star calculations .
4238	Hausdorff Distance Distance
4239	Generate a Poisson disk .
4240	Generate mesh element
4241	Generate a clustering .
4242	Creates a flat plane filter .
4243	Generate a Trivial Triangulation .
4244	Generate a Voronoi diagram .
4245	Measure topological measures .
4246	Parse the topology log file .
4247	Parse Hausdorff log file .
4248	Generate a VT - color transformation for the given script .
4249	Generate Voronoi filter .
4250	Generate a cyclic rainbow .
4251	Compute the m^2 .
4252	Calculate the cross product of two vectors .
4253	Multiply scalar .
4254	Creates a new per vertex attribute .
4255	Writes faces to faces .
4256	Generate a set of point sets
4257	A lambda filter .
4258	Generate a depth filter
4259	Sort a polylines file
4260	Measure the topology
4261	Measure geometry and measure geometry .
4262	Measure the dimension of a file .
4263	Convert filename to lowercase .
4264	Patch the request class .
4265	Return the upload configuration for the given user .
4266	Configure uploads .
4267	Return the configuration .
4268	Returns the URL for the uploaded file .
4269	Return the path to a file .
4270	Check if the given extension is allowed .
4271	Resolve a conflict with the given basename .
4272	Get the version info from the vprof file
4273	Remove duplicate objects .
4274	Returns the difference between two objects .
4275	Format object count .
4276	Trace memory usage .
4277	Return a list of the code events .
4278	The overhead of the object .
4279	Compute the memory overhead of the process .
4280	Profile the package .
4281	Profile the module .
4282	Profile the function .
4283	Run the simulation .
4284	Return a set of all modules in a package .
4285	Run a function in parallel .
4286	Return the type of a run object
4287	Initialize the module .
4288	Initialize the package name .
4289	Initialize the function object .
4290	Replace sys . argv with the current run object .
4291	Sample a frame .
4292	Insert a stack into the stack .
4293	Fill the sample count
4294	Formats a tree node
4295	Generate a call tree .
4296	Retrieve the package information .
4297	Profile the module .
4298	Profile the function .
4299	Transform profiler stats into a sorted list .
4300	Profile the package .
4301	Profile the module .
4302	Profile the function .
4303	Initialize the database .
4304	Show guestbook .
4305	Add a new entry .
4306	Handler for profiler .
4307	Starts the HTTP server .
4308	Handle the root homepage .
4309	Handle static files .
4310	Handle GET requests .
4311	Handle POST request .
4312	Send a response .
4313	Check if the module_path is a standard directory .
4314	Record a line event .
4315	Generator that yields lines without standard library .
4316	Update the heatmap .
4317	Return list of skipped lines .
4318	Profile the package .
4319	Format a heatmap .
4320	Profile a module .
4321	Profile the function .
4322	Run profilers .
4323	Run a function and return the result .
4324	Predict probabilities of X .
4325	Predict the log probability of X .
4326	Fit the model .
4327	Count the number of documents in analyzed_docs .
4328	Sort features in vocabulary .
4329	Limit features in the corpus .
4330	Fit model to data
4331	Transform the Dataset .
4332	Convert Scaler to Scikit .
4333	Fit model to model
4334	Wrapper around predict_predict .
4335	Compute the linear regression .
4336	Fit the model
4337	Fit the model .
4338	Compute the score of the model .
4339	Fit the estimator .
4340	Return the score of the estimator .
4341	Train K - Means clustering .
4342	Predict the KMeans on X .
4343	Predict classifier .
4344	Check if an RDD is in expected_dtype .
4345	Fit the vocabulary
4346	Compute the mean and variance of a dataset .
4347	Fit the SVD to X
4348	Apply the transformer to the SparseSVD .
4349	Yield blocks from an iterator .
4350	Block an iterator over a tuple of dtypes .
4351	Block an RDD .
4352	Apply a function to each RDD .
4353	Return the shape of the dataset .
4354	Convert RDD to numpy array .
4355	Apply a function to each column .
4356	Returns True if the stat is in the given mode .
4357	Return True if path is only root write
4358	Check the configuration file
4359	Read configuration from file .
4360	Run a command as a shell .
4361	Execute a command .
4362	Execute a command via SSH
4363	Validate the contents of the device .
4364	Return headers .
4365	Return the response body .
4366	Return the URL for the device .
4367	Get the URL for the IFTTT application .
4368	Return the text of a Packet .
4369	Print the discovery
4370	Discover devices .
4371	Execute the device
4372	Send a confirmation to the device .
4373	Process a device .
4374	Execute the given device .
4375	Run the discovery .
4376	Convert a Transaction object into a Transaction object .
4377	Find the ledger file .
4378	Check compatibility for compatibility .
4379	Return the long description of the README . md file .
4380	Create a precalculatedTextMeasurer from a JSON file .
4381	Get the default measurement measure .
4382	Generate a badge .
4383	Generates the supported Unicode characters .
4384	Encode characters using encodings .
4385	Returns a mapping of characters to character_to_length .
4386	Write a JSON file to a JSON file .
4387	Convolve a gaussian image .
4388	Returns a 2D Gaussian kernel
4389	Convert an image to grayscale .
4390	Main function for pyssim .
4391	Calculate the SSIM value .
4392	Compute the SSIM .
4393	Destroy the container .
4394	Set the code version .
4395	Returns the status of the cluster .
4396	Print the current status
4397	Convert a connection to a node .
4398	Attempt to bind the connection to the server .
4399	Called when a new connection is received .
4400	Handle incoming messages
4401	Wrapper for the utility function .
4402	Returns True if the given node should connect to this node .
4403	Connect a node to a node .
4404	Called when a connection is received .
4405	Invoked when an outgoing message is received .
4406	Called when a connection is disconnected .
4407	Add a new node to this node .
4408	Remove a node from the pool .
4409	Sends a message to the given node .
4410	Destroy the server .
4411	Add an item to the queue .
4412	Put an item into the heap .
4413	Get an item from the heap .
4414	Try to acquire a lock .
4415	Returns True if the lock is acquired .
4416	Release a lock .
4417	Decorator to handle exceptions .
4418	Decorator for views that require a request
4419	Set a connection to the websocket
4420	Create Elasticsearch index .
4421	Migrate historical indexes .
4422	Remove metadata from report
4423	Saves report to Kafka
4424	Extract XML from a file object .
4425	Parse an aggregate report file
4426	Convert parsed reports to csv file .
4427	Parse an aggregate report file .
4428	Get the supported IMAP capabilities .
4429	Save the results to a directory .
4430	Generate a report of results .
4431	Email the results .
4432	Save the report to Splunk
4433	Save crimes to Splunk .
4434	Decode a base64 - encoded string .
4435	Get base suffix list
4436	Get the reverse name of an IP address .
4437	Convert human readable timestamp to datetime .
4438	Retrieve the GeoIP database for a given IP address .
4439	Get information about an IP address .
4440	Convert an email message to an ISO8 format .
4441	Convert string to list .
4442	Parse a file
4443	Drain all subscriptions .
4444	Publish a message .
4445	Publish a request .
4446	Publish a message .
4447	Subscribe to the given subject .
4448	Unsubscribe from a ssid .
4449	Send ping messages .
4450	Select next server .
4451	Process an error message .
4452	Handle an operation error .
4453	Construct command line arguments .
4454	Process a pong .
4455	Process a message .
4456	Process a info dict .
4457	Process CONNECT message .
4458	Flush all pending data .
4459	Read incoming data .
4460	Performs coactivation analysis .
4461	Decode images .
4462	Load features from a numpy array .
4463	Load features from images .
4464	Calculate Pearson correlation .
4465	Compute the dot product of the image .
4466	Select features based on feature selection .
4467	Get studies by grouping masks .
4468	Get the feature order
4469	Classify dataset .
4470	Classifier classifier .
4471	Fit the classifier .
4472	Set the class weight
4473	Perform a cross validation .
4474	Fit the sklearn model .
4475	Average images within a region .
4476	Get random voxels
4477	Get n_top words .
4478	Pearson correlation
4479	Calculate the FDR value
4480	Load activations from file .
4481	Creates an image table
4482	Return a list of studies .
4483	Add one or more features to the feature table .
4484	Get feature names .
4485	Get feature counts by threshold .
4486	Loads a pickled dataset .
4487	Save the object to a file .
4488	Retrieve the image data .
4489	Get feature data .
4490	Return the names of the columns in the dataframe
4491	Get the ids that match the given features .
4492	Search features in the DataFrame .
4493	Get ids by expression
4494	Convert DataFrame to CSR
4495	Mark a function as deprecated .
4496	Apply the transform to a matrix
4497	Convert xyz coordinates to matrices .
4498	Apply a transformation to a coordinate .
4499	mask the image
4500	Get image mask .
4501	Load images from files .
4502	Save an image to a file .
4503	Set the logging level .
4504	Expand an address
4505	Return a list of tokens .
4506	Parse an address .
4507	Calculate near - duplicate hashes .
4508	Convert dict to python object
4509	Get prices for a ticker .
4510	Get a pandas dataframe for a given ticker .
4511	Get bulk news .
4512	Perform a request .
4513	Get the bearer token .
4514	Perform an HTTP request .
4515	Get a list of tracks .
4516	Get a specific artist .
4517	Get artist s albums .
4518	Get top tracks .
4519	Retrieve the artists related to a spotifier .
4520	Returns a list of artists identified by their ids .
4521	Fetch a category .
4522	Get a list of playlists for a category .
4523	Retrieves a list of categories .
4524	Return a list of featured plays .
4525	Returns a list of available releases for the current user .
4526	Returns a list of recommendations .
4527	Returns a list of artists that match the given ids .
4528	Get album s albums .
4529	Get a list of albums .
4530	Return the total album albums .
4531	Get the artists related to this artist .
4532	Return the currently playing track .
4533	Get the current player .
4534	Return list of available devices .
4535	List tracks .
4536	Replace tracks in a playlist .
4537	Reorder tracks in a playlist .
4538	Create a playlist .
4539	Get a list of playlists .
4540	Get a list of tracks .
4541	Get a list of tracks .
4542	Generate OAuth2 URL .
4543	Get an album .
4544	Get a single artist .
4545	Get a track .
4546	Get user details .
4547	Return a list of albums .
4548	Return a list of Artist objects .
4549	Search for songs .
4550	Return the ID from a string .
4551	Raises an exception if a function has attribute .
4552	Create a client from an HTTP client .
4553	Generate URL for OAuth2 .
4554	Return the attributes as a dictionary .
4555	Return the query string .
4556	Build a list of playlists .
4557	Get all tracks .
4558	Resume playback .
4559	Transfer audio to the device .
4560	Retrieve a new spotify object .
4561	Get the current status .
4562	Convert the month to a string .
4563	Updates the code URLs in the PyFunctions directory .
4564	Return True if version_yaml is newer than version_yaml .
4565	Check if the current branch is a dev version .
4566	Check if the version is deprecation .
4567	Backup the configuration .
4568	Restore the backup file .
4569	Determine if the line is to be ignored .
4570	Handle the options list .
4571	Extract base from element .
4572	Format a string to_format .
4573	Access the request .
4574	Returns the HTTP status code .
4575	Check that the given domain is valid .
4576	Checks if the given domain is a subdomain .
4577	Check if an IP4 address is valid .
4578	Check if the given IP is a valid IPv4 range .
4579	Check if the given URL is valid .
4580	Load the configuration file .
4581	Stores a random time
4582	Handle the entry management .
4583	Check if entry is a URL .
4584	Prints the header .
4585	Determine the file decision .
4586	Set the domain to the given domain .
4587	Sets the URL to the file .
4588	Print the logo .
4589	Format the domain .
4590	Extracts the domain from the file .
4591	Test the database to test the database .
4592	Returns the URL of the file .
4593	Switch the current state of the given variable .
4594	Get the expiration date .
4595	Parse the status file .
4596	Get the structure file .
4597	Creates a directory if it does not exist .
4598	Delete all directories .
4599	Set the path to the config file .
4600	Load the configuration file .
4601	Install the production configuration .
4602	Install the IANA configuration file .
4603	Install the PSL configuration .
4604	Install the directory structure file .
4605	Merge upstream configuration values
4606	Load the configuration file .
4607	Split the version string .
4608	Check the status of two versions .
4609	Check if this version is a cloned version .
4610	Handle non - exist index .
4611	Return the directory of the analytic host .
4612	Generate the unified file .
4613	Returns the status file .
4614	Determine if the domain is not generated .
4615	Process the extension .
4616	Load the public database .
4617	Convert a regular expression into a regular expression .
4618	Return a sorted list of elements .
4619	Load the global database .
4620	Return the referer for the given extension .
4621	Extract the extensions and referer from the internet .
4622	Update the database .
4623	Mine the link .
4624	Retrieves information from the backup file .
4625	Backup mining information .
4626	Add elements to the database .
4627	Remove the element from the database .
4628	Returns a list of all the files in the database .
4629	Run the miner .
4630	Get file content
4631	Write content to file .
4632	Gets the information of a record .
4633	Update the expiry date .
4634	Handle referer not found .
4635	Initialize the before header info .
4636	Construct the header .
4637	Print the header .
4638	Construct a dictionary of data .
4639	Extract the size from the header .
4640	Colorify data .
4641	Print data to disk .
4642	Print the data .
4643	Save the file to disk .
4644	Calculate the current time .
4645	Format the execution time .
4646	Return the list of files to delete .
4647	Return the list of databases to delete .
4648	Delete all files .
4649	Compute the hash of the file .
4650	Compute the hash of the data .
4651	Get the hash of the file .
4652	Executes the command .
4653	Remove a key from the dictionary .
4654	Rename a key .
4655	Merge two dictionaries .
4656	Write the dictionary to a file .
4657	Save the current dictionary to a yaml file .
4658	Return the path separator .
4659	Writes data to file .
4660	Read the file .
4661	Return the main list
4662	Merge two dictionaries .
4663	Returns a list of elements that match the regex pattern .
4664	Match the data
4665	Return a new string with replace_with .
4666	Increment the number of tests .
4667	Calculate the percentage .
4668	Outputs the status of the report .
4669	Test if the given URL is valid .
4670	Check if a domain is valid .
4671	Check if the element is a subdomain .
4672	Returns the status of the test .
4673	Format historical formating errors .
4674	Retrieve the database file .
4675	Save the current database to the database .
4676	Get the timestamp of the file .
4677	Returns the contents of the database .
4678	Check if the database is present .
4679	Initialize the database .
4680	Backup the database .
4681	Check if element is in the database .
4682	Returns True if the element is older than or not .
4683	Get the expiration date of the element .
4684	Add a new element to the database .
4685	Set permissions for travis .
4686	Run Travis command .
4687	Get the ns lookup index .
4688	Test whois .
4689	Get the status code .
4690	Return the status of the test .
4691	Return the currently running object
4692	Return a list of standard paths
4693	Return package names .
4694	Iterate over unused import lines .
4695	Find unused imports .
4696	Yield line numbers
4697	Yield undefined name and module name .
4698	Yield line numbers from messages .
4699	Generator for duplicate key numbers .
4700	Create a dictionary of key - value pairs .
4701	Run pyflakes .
4702	Extract the package name from a line .
4703	Return True if the given line is a multiline import statement .
4704	Return True if the given line is a multiline statement .
4705	Filter from import statement .
4706	Break an import statement into a line .
4707	Filter source code .
4708	Convert a list of messages into a dictionary of messages .
4709	Remove undefined name from markstar import .
4710	Remove duplicate key from lines .
4711	Check if a dictionary entry exists
4712	Return True if value is a literal .
4713	Generate line numbers from a source file .
4714	Filter lines that are not useless .
4715	Return the indentation of a line .
4716	Return the end of the line .
4717	Filter source code .
4718	Split a comma separated string .
4719	Return True if filename is a python file .
4720	Return True if filename is in exclude
4721	Find files in filenames .
4722	Entry point for autoflake .
4723	Parse the ObtainLeaseResponse payload .
4724	Write this lease to a stream .
4725	Write this CancelRequest to a stream .
4726	Reads the CancelResponsePayment .
4727	Create a new name .
4728	Read this object from the file stream .
4729	Write this object to a stream .
4730	Creates a Digest .
4731	Read the application information .
4732	Write the information for this application .
4733	Create an application specific information .
4734	Reads the DerivationParameters from the input stream .
4735	Write this DerivationParameters object to the stream .
4736	Reads the request payload .
4737	Write this request to the stream .
4738	Reads the GetResponsePayload payload .
4739	Write the response to the stream .
4740	Reads signature verification request .
4741	Write the object to the stream .
4742	Parse SignatureVerifyResponse payload .
4743	Process a request .
4744	Builds an error response .
4745	Process a template attribute .
4746	Retrieves a list of attributes from a managed object .
4747	Get the attribute value from a managed object .
4748	Sets the attributes on a managed object .
4749	Sets the attribute on the managed object .
4750	Checks if the given policy is allowed for the given object .
4751	Write this request to the stream .
4752	Create a new secret .
4753	Set the configuration setting .
4754	Load server configuration file .
4755	Process a bind parameter .
4756	Process cryptographic usage mask .
4757	Read a Long integer from the stream .
4758	Write the Long integer to the stream .
4759	Validate that the value is a valid integer .
4760	Read a BigInteger value .
4761	Writes the value to the stream .
4762	Validate the parameter .
4763	Validate that the value is of type
4764	Read a boolean value from the stream .
4765	Writes the boolean value to the stream .
4766	Write Boolean value to stream .
4767	Validate the parameter .
4768	Read the Interval value from the stream .
4769	Validate that the value is valid .
4770	Returns the encryption data .
4771	Set the key wrapping data .
4772	Validate the key .
4773	Validates that the secret data is valid .
4774	Validates that the opaque data is valid .
4775	Converts a string name to a tag .
4776	Convert an attribute tag to its name .
4777	Get bitmask from list of enumerations .
4778	Get a list of enumerations from a given bit mask .
4779	Returns True if the given enumeration is a bitmask .
4780	Reads a new keypair request .
4781	Write this template to a stream .
4782	Reads the CreateKeyPairResponse payload .
4783	Write this CreateKeyPairResponse to a buffer .
4784	Reads the attribute list .
4785	Write the attribute list to the output buffer .
4786	Read the GetAttributeListResponse payload .
4787	Write the response to a buffer .
4788	Return a list of all files in a directory
4789	Scan the policy directory .
4790	Run the simulation .
4791	Get the certificate from the connection
4792	Get extended key usage from a certificate .
4793	Get common names from a certificate .
4794	Get client identity from certificate .
4795	Reads the create request payload .
4796	Write the create request to the stream .
4797	Reads the create response payload .
4798	Write the response payload to the stream .
4799	Convert a Python object into a key .
4800	Reads the EncryptedResponsePayment .
4801	Reads the DeriveKeyRequest payload .
4802	Write the contents of this DeriveKeyRequest .
4803	Returns whether the given attribute is supported .
4804	Check if attribute is deprecated .
4805	Returns True if attribute is applicable to the given object type .
4806	Returns True if attribute is multivalued .
4807	Get value from configuration file .
4808	Reads CheckResponsePayload payload .
4809	Write the CheckResponse to the stream .
4810	Reads an AttributeReference object from the input buffer .
4811	Write this AttributeReference to the output buffer .
4812	Read attributes from an input stream .
4813	Writes the attributes to the given stream .
4814	Read the nonce from the stream .
4815	Write the nonce to the stream .
4816	Reads the username and password credentials .
4817	Write this username and password to a stream .
4818	Reads the device credentials from the input stream .
4819	Write this message to a stream .
4820	Reads a credential from the input stream .
4821	Write this credential to the stream .
4822	Reads the MACSignatureKey information .
4823	Write the MAC signature information to the stream .
4824	Reads the keywrap data from the input stream .
4825	Write this object to the stream .
4826	Reads the KeyWIPPING specification .
4827	Write this object to the stream .
4828	Reads the extension information .
4829	Write the extension information to the stream .
4830	Creates an extension .
4831	Read this revocation reason from the stream .
4832	Write this revocation reason .
4833	Validate the revocation code .
4834	Read the ObjectDefaults object .
4835	Write this object to the output buffer .
4836	Read DefaultsInfo object .
4837	Write the DefaultsInfo object to the output buffer .
4838	Reads the RNGParameters object from the input buffer .
4839	Write this KMipParameters object to a buffer .
4840	Read the ProfileInformation object .
4841	Write the ProfileInformation object to the output buffer .
4842	Write the ValidationInformation structure to a buffer .
4843	Reads the CapabilityInformation object .
4844	Write this CapabilityInfo object to a buffer .
4845	Stop the server .
4846	Start the connection service .
4847	Read request payload .
4848	Write this partition to a file .
4849	Reads the response payload .
4850	Write the response to the stream .
4851	Creates a symmetric key .
4852	Creates an asymmetric key pair .
4853	Compute the HMAC data using the given algorithm .
4854	Encrypt a plaintext .
4855	Encrypts a plaintext .
4856	Encrypts a plaintext .
4857	Decrypts the ciphertext with the given key .
4858	Generate a RSA key pair .
4859	Encrypt a key using the encryption method .
4860	Create RSA private key .
4861	Verify a message .
4862	Reads the signature payload from the input stream .
4863	Write this SignatureResponse to the stream .
4864	Parse the GetUsageAllocationRequestRequest .
4865	Convert protocol version to KMIP version .
4866	Read the ProtocolVersion version .
4867	Write this partition to a stream .
4868	Reads the Authentication object from the stream .
4869	Write this Authentication object to the stream .
4870	Reads the request payload from the input stream .
4871	Reads a Certificate object from the stream .
4872	Write this certificate to a stream .
4873	Authenticate to the SLUGS server .
4874	Reads the response payload .
4875	Write the response to the stream .
4876	Start the connection .
4877	Read the RekeyResponse payload .
4878	Returns True if profile is supported .
4879	Derive a key from an object .
4880	Fetch attributes for a batch .
4881	Retrieves a list of attributes for a specific device .
4882	Perform a query .
4883	Creates a signature for the given data .
4884	Open the proxy .
4885	Closes the proxy .
4886	Creates a new Key .
4887	Creates a new key pair .
4888	Register a managed object .
4889	Create a new rekey .
4890	Generate a key using the given unique identifiers .
4891	Locate managed objects .
4892	Checks the status of a resource .
4893	Get a managed object .
4894	Get attributes for a managed object .
4895	Activate the managed object .
4896	Revoke a managed object .
4897	Perform MAC operation on Kmip
4898	Build a CryptographicParameters object from a dictionary .
4899	Builds an EncryptionKeyInfo object .
4900	Build a MACSignatureKey object from a dictionary .
4901	Build a KeyWrapSpecification object .
4902	Builds the list of attributes .
4903	Builds a name attribute .
4904	Reads the query request payload .
4905	Write the query payload to the output buffer .
4906	Write this object to a stream .
4907	Reads the GetAttributesResponse payload .
4908	Writes the response to the given buffer .
4909	Get a single entry point .
4910	Get all ephemeris groups in a group
4911	Return a list of all entries in the given group
4912	Load the module .
4913	Create an EntryPoint instance from a string .
4914	Start live server
4915	Generate project files .
4916	Generate the controller .
4917	Generate action source code .
4918	Generate the form .
4919	Generate a model .
4920	Generate macro .
4921	Create a directory .
4922	Rewrite a file with project name .
4923	Convert a value to a human - readable string .
4924	Check if the URL is valid .
4925	Encode a string .
4926	Decodes a string .
4927	Convert a Flask response to JSON .
4928	Return an absolute URL for the given endpoint .
4929	Load config from environment
4930	Add a user to the session .
4931	Return the current user
4932	Create the application .
4933	Register jinja templates .
4934	Register routes in app .
4935	Register error handler .
4936	Register hooks .
4937	Write a DataFrame to a CSV file .
4938	Read data from a CSV file .
4939	Serializes a dataframe .
4940	Deserialize a DataFrame into a DataFrame .
4941	Update this dataset from a dataframe .
4942	Update this object from raw data .
4943	URL of the contents of the file .
4944	Upload a dataframe from a DataFrame .
4945	Add a new user from raw data .
4946	Opens the intermediate dataset .
4947	Reads the intermediate dataset as binary .
4948	Read the data as text .
4949	Return a pandas DataFrame from the stream .
4950	Get an intermediate dataset .
4951	Get all experiments in a workspace .
4952	Get all datasets in a workspace
4953	Get a dataset
4954	Decorator to publish a workspace .
4955	Decorator for publishing a function .
4956	Decorator for registering types .
4957	Decorator to mark a function as return type .
4958	Decorator for attaching a function to a function .
4959	Find all globals in code .
4960	Return a copy of the pen .
4961	Look up a color name .
4962	Draw a cr .
4963	Compute the cubic Bernstein - Bernstein extension .
4964	Cubstein - Bernstein algorithm .
4965	Build a list of choices from the template .
4966	Returns a function that takes a list of command options .
4967	Decorator to register an item hook .
4968	Compose a dynamic sitetree .
4969	Initialize the cache .
4970	Empty the sitet
4971	Get an entry from the cache
4972	Update an entry in the cache .
4973	Set an entry in the cache .
4974	Initializes the cache .
4975	Resolve the tree alias .
4976	Returns True if the current app is an admin .
4977	Calculate the depth of an item
4978	Returns the current item for the given tree alias .
4979	Returns the URL for the given sitetree item .
4980	Initialize the sitet tree .
4981	Resolve the attribute of the current page
4982	Get the ancestor of the given item .
4983	Generate the menu .
4984	Checks if the given item is logged in .
4985	Build a breadcrumb path .
4986	Initialize the sitet tree
4987	Render children .
4988	Get the children of an item .
4989	Update the has_children property .
4990	Filter items based on navigation type .
4991	Get the first ancestor of a tree item .
4992	Adds a tree to the tree .
4993	Resolve variable name .
4994	Return a sitetree .
4995	Return the children of a sitetree .
4996	Render a sitetree .
4997	Render a sitetree .
4998	Render a sitetree .
4999	Create an alias for a tag .
5000	Returns the URL name for a model .
5001	Reregister the tree admin .
5002	Handler for redirects .
5003	Redirect to the next item .
5004	Redirect to the post item .
5005	Redirect the response to the response .
5006	Replace the tree item with the parent .
5007	Returns the model instance .
5008	Handle moving item .
5009	Save the item to the tree .
5010	Add the urls to the sitetree .
5011	Dumps the content of the model to a JSON file .
5012	Creates a new tree .
5013	Create a new tree item .
5014	Import the sitetree module .
5015	Return the model class .
5016	Create a Config from a mapping .
5017	Create a Config from a Python file .
5018	Create a Config from a TOML file .
5019	Create a Config object from an object .
5020	Generate ZipkinAttrs for a given span .
5021	Generate http headers for a new span .
5022	Return a new trace context .
5023	Starts this span .
5024	Stops the span of the current Span .
5025	Update binary annotations .
5026	Add an SA binary annotation .
5027	Override the name of the span .
5028	Create an Endpoint instance .
5029	Creates a new Endpoint with the given name .
5030	Create a V1Span object representing this span .
5031	Encode a protobuf list .
5032	Create a protobuf Span .
5033	Convert hexadecimal id to bytes .
5034	Convert a protobuf protobuf .
5035	Convert a zipkin endpoint into an Endpoint .
5036	Convert a dict to a protobuf . Annotations .
5037	Create an annotation .
5038	Create binary annotations .
5039	Create an endpoint .
5040	Creates a new Endpoint with the given service name .
5041	Create annotation list .
5042	Convert binary annotations into list .
5043	Create a new span .
5044	Convert a Thrift span to bytes .
5045	Encode a list of Thrift objects .
5046	Detect Span version and encoding .
5047	Encode spans to output_encoding .
5048	Deprecated . push_attrs .
5049	Encode a v2 span .
5050	Creates a json endpoint
5051	Encode a Span .
5052	Decodes the spans .
5053	Convert a Thrift endpoint into an Endpoint object .
5054	Decode thrift annotations .
5055	Convert a list of binary annotations into a dict .
5056	Decodes a Thrift span .
5057	Converts a trace_id to a string .
5058	Converts unsigned integer to lower hex .
5059	Writes a hex value to the stream .
5060	Preprocessor for date processing
5061	Set the transaction code .
5062	Sets the iph_id attribute
5063	Set the TNR value for the given tag .
5064	Parse the data and return a Tag instance .
5065	Parse a file .
5066	Join a string .
5067	Return JSON or text as text .
5068	Log a rate limit .
5069	Make a request to DBL .
5070	Get bot information .
5071	Get bots .
5072	Read a single packet .
5073	Write a message to the stream .
5074	Close all streams .
5075	Decode a string .
5076	Encode a term .
5077	Add a source address to the network .
5078	Send all pending messages to the queue .
5079	Set the callback for remote serviceHello .
5080	Stop the server .
5081	Clear all local services .
5082	Search for known services .
5083	Create SOAP message
5084	Discover the current logger .
5085	Returns the registered item manager .
5086	Return a list of all child relations of a model
5087	Return all child m2m relations for a model .
5088	Saves all child relations to the model .
5089	Create an object from a serializable data .
5090	Validate all the forms .
5091	Returns True if all forms have changed .
5092	Return a copy of the address .
5093	Generate a checksum for the address .
5094	Parse command line arguments .
5095	Create an argument parser .
5096	Prompt the seed .
5097	Validate signature fragments .
5098	Get a private key .
5099	Get the key for the given address .
5100	Creates a new key iterator .
5101	Create Kerl s Kerl .
5102	Aborb a sequence of bytes .
5103	Squeeze the given number of trits .
5104	Transform the state to the current state .
5105	Get digests command .
5106	Get all private keys .
5107	Prepares a multi - multisig transfer command .
5108	Add all non - zero values to the sequence .
5109	Return a list of trits .
5110	Helper function for _add_trits .
5111	Perform the addition of two strings .
5112	Output seed .
5113	Execute find_transactions command .
5114	Execute GetInputs command .
5115	Get new addresses command .
5116	Get information about transfer transfers .
5117	Promote a transaction .
5118	Create a replay command for a transaction .
5119	Send a transfer command .
5120	Send a retry command .
5121	Resolve an adapter specification .
5122	Send a request to the server .
5123	Log a message .
5124	Send an HTTP request .
5125	Interpret the response .
5126	Seeds a response .
5127	Add a digests .
5128	Get the address of the network .
5129	Generates an iterator over the address generator .
5130	Convert a digest to an address .
5131	Generate an address from a key iterator .
5132	Returns a list of transaction objects .
5133	Iterate over all available addresses .
5134	Get bundle bundles from a list of transaction hashes .
5135	Check if the codec is valid .
5136	Get codec info .
5137	Encode a byte string .
5138	Decodes the input .
5139	Finds all available addresses .
5140	Register a route .
5141	Create a Transaction object from a string .
5142	Return a dict representation of this Transaction .
5143	Return the signature validation .
5144	Set the state of the transaction .
5145	Get all the messages in this transaction .
5146	Return a list of trte strings .
5147	Group the transactions in the current transaction .
5148	Discover all commands in the given package .
5149	Execute the adapter .
5150	Apply filter to value .
5151	Returns the URL for the job .
5152	A list of validator errors .
5153	Return whether the bundle is valid .
5154	Create a validator .
5155	Get the errors for the bundle signatures .
5156	Return error if the group is valid .
5157	Traverse a bundle .
5158	Start IPython REPL .
5159	Generate a random seed .
5160	Get the digest of the key .
5161	Sign a bundle of inputs .
5162	Prints pretty representation of the class .
5163	Accepts a number of bytes .
5164	Return a squeeze of the given number of bits .
5165	Add context to an exception .
5166	Generate security level .
5167	Increment the legacy tag .
5168	The tag of this chain .
5169	Add a transaction to the bundle .
5170	Finalize the bundle .
5171	Sign the inputs .
5172	Sign the inputs at start_index .
5173	Create a list of input transactions for addy .
5174	Convert value to SI unit .
5175	Decompress G1 .
5176	Inverse of prime field
5177	Create an instance from a JSON file .
5178	Return a list of groups that match the given category .
5179	Return the synonym for a word .
5180	Expand abbreviations .
5181	Split text into descriptions .
5182	List of categories .
5183	Return a random colour .
5184	Plot the circuit .
5185	Return an instance of a builtin class .
5186	Create a new Timescale object from a given name .
5187	Create a new Striplots .
5188	Create a Color object from an image .
5189	Create a Legend object from a CSV file .
5190	Convert to csv .
5191	Returns the maximum width of the table .
5192	Get a decorator
5193	Get the attribute of a given c .
5194	Return the component of a legend .
5195	Generates a matplotlib plot .
5196	Create component from text .
5197	Return a formatted summary string
5198	Deprecated .
5199	Process a single row .
5200	Parse a CANstrat string .
5201	Returns True if all nodes in self are strict
5202	Return a list of unique residues .
5203	Calculate Intervals from top top to top .
5204	Clean longitudinal data .
5205	Read a PETREL file from a PETREL file .
5206	Build a list of dictionaries from data_dict
5207	Read text from CSV file .
5208	Create an image from an image .
5209	Create a StriplLog from a Log object .
5210	Parse a LAS3 string .
5211	Read from a file .
5212	Return a copy of Striplog .
5213	Writes the list to a CSV file .
5214	Convert tolas3 format .
5215	Plot the axis as an axis .
5216	Return a numpy array of values for a given field .
5217	Extract an attribute from a basis set .
5218	Returns a list of dictionaries that match the search term .
5219	Find all overlaps .
5220	Find gaps in the table .
5221	Return a copy of the strip .
5222	Align gaps .
5223	Return a copy of this interval .
5224	Return a new Striplog with the given other .
5225	Intersect two Striplog objects .
5226	Merge overlapping overlaps .
5227	Plot a histogram .
5228	Invert the Striplog object .
5229	Crop the Striplog .
5230	Compute the quality score for this curve .
5231	Convert hex color to RGB name
5232	Read an image from an image file .
5233	Override custom formatter .
5234	Returns a list of all jobs for the specified prefix .
5235	Parses a job .
5236	Update a token .
5237	Get all the allocations for a specific prefix .
5238	Fail a deployment .
5239	Pause a deployment .
5240	Get the health of a deployment .
5241	Drain a node .
5242	Drain a node .
5243	Set an eligible node .
5244	List files by id
5245	Generates a stream of data from a file .
5246	Stat a file
5247	Join the agent .
5248	Updates server addresses .
5249	Force a node .
5250	Returns a list of all nodes .
5251	Get all evaluationuations .
5252	Returns a list of namespace namespaces .
5253	Register a job .
5254	Create a new job .
5255	Dispatches a job .
5256	Revert a job .
5257	Rename a job .
5258	Deletes a job .
5259	Get the current configuration .
5260	Delete a peer from the server .
5261	Get all deployments .
5262	Get a random value from the mutator .
5263	Return the mutator for the given object .
5264	Get a random polyglot attack .
5265	Fuzzy fuzziness .
5266	Convert a buffer to a string .
5267	Start the server .
5268	Stop the server .
5269	Create a custom html file
5270	Serve fuzzcase .
5271	Fuzzy fuzzing .
5272	Spawn a command .
5273	Get the output of the process .
5274	Finish the process .
5275	Terminate the JFExecutor .
5276	Start the worker .
5277	Execute the given object .
5278	Decorator for json encoding
5279	Build a random string .
5280	Return the string representation of the grammar .
5281	Build the query string .
5282	Build a random value .
5283	Build the OptGram .
5284	Build the definition .
5285	Build a STAR .
5286	Shutdown the process .
5287	Run the signal and monitor the process to monitor .
5288	Start monitor .
5289	Return a random float .
5290	Add a definition to the schema .
5291	Add a definition to the given category .
5292	Generate the grammar .
5293	Try to fuzz the given element .
5294	Return the fuzzed string .
5295	Return a list of elements that are fuzzed
5296	Decorator to create a mutate object .
5297	Handle signal handler .
5298	Exit the shell .
5299	Handles the pause command
5300	Handle pause command .
5301	Stop the process
5302	Handle the command restart
5303	Returns a list of all Skype events .
5304	Set the mood of the user .
5305	Set the avatar of the user .
5306	Get metadata for a given URL .
5307	Get a single contact .
5308	Get a single user .
5309	Get a list of chat descriptors .
5310	Get a specific bot .
5311	Search for a user .
5312	Returns a list of all Skype requests .
5313	Create an object from raw data .
5314	Merge this object into this one .
5315	Merge an object into the cache .
5316	Perform a synchronous sync request .
5317	Read token from file .
5318	Write the token file .
5319	Verify a token .
5320	Refresh Skype token
5321	Get the user s username
5322	Get a new Skype registration token
5323	Synchronizes the endpoints from the API
5324	Check if a user exists
5325	Authenticate with given token .
5326	Authenticate using Skype API
5327	Configure messaging service
5328	Ping this email .
5329	Get chat chats .
5330	Get chat details .
5331	Create a new thread .
5332	Return the id of a user
5333	Return the id of the chat
5334	Iterate over a function and yield results .
5335	Convert text to unicode
5336	Detect the format of the given text .
5337	Parses text and returns metadata and content .
5338	Return a dict representation of this object .
5339	Load a YAML file .
5340	Export metadata to YAML
5341	Export metadata to JSON .
5342	Perform a fullmatch .
5343	Return a list of items .
5344	Return a list of sub - lists of sub - lists .
5345	Convert a new start to the pattern .
5346	Returns a list of arguments .
5347	Return list of lists matching pattern .
5348	plant a trie into a trie
5349	Convert a trie to a regular expression .
5350	Return the start and end indices of the slice .
5351	Insert string at index .
5352	Partition a single character .
5353	Return the list of spans for a given type .
5354	Shrink overlapping spans .
5355	Insert new spans .
5356	Return the current nesting level .
5357	Return the shadow of the span .
5358	Return the shadow of the link .
5359	Return a mapping of spans to spans .
5360	Deprecated .
5361	List of Parameter objects .
5362	The list of parser functions .
5363	List of templates .
5364	The list of wikilinks .
5365	Return the comments .
5366	The list of external links .
5367	Return all the sections of the document .
5368	Return a list of tables .
5369	Returns a list of lists matching pattern .
5370	Return a list of all tags .
5371	Iterate over all subspans .
5372	Return the list of ancestors of the given type .
5373	Return the parent of the given type .
5374	Return the mode of a list .
5375	Return the argument with the given name .
5376	Return a normalized name .
5377	Remove the first argument from the list of arguments .
5378	Remove duplicate arguments .
5379	Set an argument .
5380	Get an argument by name .
5381	Check if the command has an argument .
5382	Delete an argument by name .
5383	Return a string representation of a CRSC code .
5384	Search for an ellipsoid .
5385	Load a crs from a URL .
5386	Parse a GeoJSON file .
5387	Convert an EPSG code into a CRS object
5388	Convert an ESRI code into a CRS object
5389	Convert an rsr code to a crs code
5390	Convert a text format text into a crs
5391	Write record to file .
5392	Read a VLR from a stream .
5393	Parse vliff keys from vlrs .
5394	Parse geotiff tags .
5395	Get the signedness for an extra dimension .
5396	Return the id of the extra dimension .
5397	Create a new record from another point record .
5398	Copies fields from another record to another record .
5399	Append zeros if value is smaller than size .
5400	Returns the names of all dimensions .
5401	Create a new zeros .
5402	Read points from stream .
5403	Create a new Point instance from a compressed compressed file .
5404	The x dimension of the data .
5405	The y coordinate of the y dimension .
5406	Return the z dimension of the model .
5407	Add extra dimensions .
5408	Write the points to out_stream .
5409	Write data to file .
5410	Write file to destination .
5411	Build a dictionary of point formats .
5412	Build a dictionary of dtypes dtypes dtypes .
5413	Convert numpy dtype to point format .
5414	Returns the minimum file version for the given point format .
5415	Determines if a point format is compatible with the given version .
5416	Returns a list of vlrs matching the given type .
5417	Extracts the specified vlr_type from the model .
5418	Read a list of VLR objects from a stream .
5419	Return True if all files have same point format
5420	Return True if all files have the same dtype .
5421	Check if file signature is correct .
5422	Read the header from the stream .
5423	Read the VLRL list .
5424	Read points from file .
5425	Read compressed points data .
5426	Read the incoming waveform packet .
5427	Reads the evlrs .
5428	Warn if we are not at end_of .
5429	Opens alas file .
5430	Read a file .
5431	Create a las data structure from a header .
5432	Createlas data .
5433	Convert a Skylas object to a file .
5434	Merge multiple las files .
5435	Read and read alas .
5436	Return the date of the object .
5437	Set the date of the object .
5438	List of min and z coordinates .
5439	Set minimum and y values .
5440	A list of x and z coordinates .
5441	Set the maxs of the mesh .
5442	All scales .
5443	A list of x y coordinates .
5444	Read the file version .
5445	Convert a header to a new header .
5446	Unpack an array from an array .
5447	Pack the array with the given mask .
5448	Return a list of dimension names that have been lost .
5449	Dictionary representation of the Dimension
5450	Returns the total number of extra bytes .
5451	Return True if there is a waveform packet .
5452	Example of the satel integration library
5453	Calculate the checksum of a command .
5454	Print a hexadecimal message .
5455	Verify and return the checksum
5456	List the set bits in a string .
5457	Generate a query string .
5458	Example of async satel .
5459	Connect to the server .
5460	Start monitoring .
5461	Disarm disarm command .
5462	Send a clear alarm command .
5463	Turn ON output .
5464	Keep the alarm alive .
5465	Monitor the status of the device .
5466	Close the connection .
5467	Purge the database .
5468	Guess file type .
5469	Get file id for given path .
5470	Get a notebook .
5471	Create a notebook model from the database .
5472	Get a directory .
5473	Convert a list of file records into a model object .
5474	Create a directory model from a DB record .
5475	Create a file model from a database record .
5476	Save a notebook .
5477	Save a file .
5478	Rename a file
5479	Delete file .
5480	Ensure a user is in the database .
5481	Delete a user .
5482	Create a directory .
5483	Return True if table is in directory .
5484	Delete a directory .
5485	Check if a directory exists .
5486	Return a list of files in a directory .
5487	Return list of directories in a directory .
5488	Generate a where clause for a file
5489	Select a file from a user .
5490	Default field names .
5491	Get a file from the database .
5492	Get a file .
5493	Get the id of a file .
5494	Check if a file exists .
5495	Rename a directory .
5496	Save a file to the database .
5497	Generate notebooks .
5498	Remove remote_checkpoints from database .
5499	Generate remote_checkpoints .
5500	Generate notebooks .
5501	Reencrypt a row .
5502	Re - encrypt user content .
5503	Derive a single Fernet key from a password .
5504	Derive fallback encryption keys from a list of passwords .
5505	Generate a cryptography factory for a single password .
5506	Memoize a single argument .
5507	Get the name of a column .
5508	Convert fields from row to dict .
5509	Convert a row to a dictionary .
5510	Create a checkpoint from a notebook .
5511	Create a remote file .
5512	Delete a checkpoint .
5513	Get the content of a checkpoint
5514	List all checks for a path
5515	Rename all checkpoints .
5516	Delete all checkpoints at path .
5517	Remove all checkpoints from the database .
5518	Resolve a path to a sub - manager .
5519	Apply prefix to model .
5520	Decorator that dispatches the given path .
5521	Decorator for kwargs .
5522	Decorator to dispatch files to old backend .
5523	Handle changes .
5524	Get a file or directory .
5525	Normalizes API path .
5526	Split a path into a file path and name .
5527	Serialize an object to base64 encoding
5528	Read a file
5529	Decode unknown content .
5530	Decode a base64 encoded string into a file .
5531	Return all the directories in a path .
5532	Decorator for raising HTTPError .
5533	Create a user .
5534	Separate lists of files and files .
5535	Iterate over directories and files .
5536	Iterate over all files in mgr .
5537	Iterate over files with content .
5538	Re - encrypts all of the users .
5539	Reencrypt a single user .
5540	Re - encrypts all of the users .
5541	Unencrypt a single user .
5542	Create a temporary file with alembic settings .
5543	Upgrade an alembic database
5544	Sanitize a block .
5545	Add an instance to the pool .
5546	Load instances of embed_type .
5547	Insert an instance into the block .
5548	Load the embedded data .
5549	Validate data .
5550	Show the admin page .
5551	Converts the object to a dictionary .
5552	Hide the authenticated fields .
5553	Remove fields from the request .
5554	Get the published article .
5555	Returns a queryset of the queryset .
5556	Returns a queryset with the given title .
5557	Returns the null boolean attribute of the instance .
5558	Validate widget .
5559	Validate a zone .
5560	Validate a UUID
5561	Returns the admin s permissions
5562	Modify the group s permissions
5563	Validate author data .
5564	Save a zone .
5565	Get the data as a dictionary .
5566	Prepare data .
5567	Render the template .
5568	Get the settings for this Integration .
5569	The callback for the Facebook API .
5570	Get the settings for an integration .
5571	Update an integration settings .
5572	Signup .
5573	Build a maptag string .
5574	Render a zone .
5575	Save an image .
5576	Save the current section .
5577	Returns the extension of the image .
5578	Returns the URL for the media .
5579	Save the image .
5580	Save thumbnail .
5581	Return the MySQL database connection .
5582	Returns a BandwidthLimitedStream object .
5583	Read amount of bytes .
5584	Consume the amount of amt .
5585	Schedule a consumption .
5586	Process a scheduled retry .
5587	Calculate the projected moving rate .
5588	Record the consumption rate .
5589	Download a file from a bucket .
5590	Wait for a transfer to complete .
5591	Get callbacks for a given transfer .
5592	Return a dict with the keys in the given dictionary .
5593	Decrement the counter .
5594	Finalize the queue .
5595	Return True if filename is a special file .
5596	Acquire a tag .
5597	Release a lock .
5598	Adjust the chunk size .
5599	Enqueue a file - like write task .
5600	Create IO write task .
5601	Return the appropriate download manager class .
5602	Main function for multiprocessing .
5603	Writes data to fileobj .
5604	Queues a write request to the queue .
5605	Return whether the object is seekable .
5606	Uploads a file object to a bucket .
5607	Submit a transfer to a bucket .
5608	Copy a file to a bucket .
5609	Delete a submission .
5610	Shutdown the server .
5611	Cancel the current transfer .
5612	Wait for the transfer to complete .
5613	Reads the specified number of bytes from the given fileobj .
5614	Wrap the data into a file - like object .
5615	Return the appropriate upload manager class .
5616	Set the exception for this transfer .
5617	Set the result of the Future .
5618	Set the exception .
5619	Return the result of the future .
5620	Cancel the task .
5621	Submits a task to the given executor .
5622	Add a done callbacks to the future .
5623	Add a failure cleanup .
5624	Called when a job is finished .
5625	Submit a task to the executor .
5626	Add a callback to the future .
5627	Upload a file to S3 .
5628	Download a file from S3 .
5629	Iterate over step decorators .
5630	Parse a decorator step .
5631	Refact a step .
5632	Iterate over step function decorators .
5633	Parse a decorator step .
5634	Refact a step .
5635	Select the Python parser class .
5636	Get team membership objects .
5637	Creates a new team membership object .
5638	Updates a team membership object .
5639	Delete a group membership
5640	Returns the current fact
5641	Process incoming webhook data .
5642	Retrieve membership objects from a room .
5643	Delete a membership group
5644	Validate base_url .
5645	Check if string is a web URL .
5646	Opens a local file .
5647	Verify that an object is an instance of acceptable types .
5648	Creates a dictionary from a list of dictionaries .
5649	Check if the response code is expected .
5650	Validate json_data .
5651	Convert date to time .
5652	List room items .
5653	Create a room .
5654	Update a room .
5655	Delete a room
5656	Retrieve license objects .
5657	Get the created date .
5658	Get access token .
5659	Create a webhook .
5660	Updates a webhook .
5661	Delete a webhook .
5662	Ensure that the next_url is valid .
5663	Sets the wait_on_rate limit .
5664	Update the headers of the request .
5665	Convert a URL to an absolute URL .
5666	Send an HTTP request to the API .
5667	Perform a GET request .
5668	Return a generator for GET requests .
5669	Get items from the API .
5670	HTTP PUT request .
5671	Perform a DELETE request .
5672	Creates a new login .
5673	List items in a room .
5674	Creates a message .
5675	Delete a message
5676	Creates a new person object .
5677	Retrieves a person object .
5678	Update a person .
5679	Delete a person
5680	Get the current person object .
5681	List roles .
5682	Retrieve team objects .
5683	Create a new team .
5684	Updates a team .
5685	Delete a team
5686	Get a list of events .
5687	Serializes the given data .
5688	Get an access token .
5689	Get the last activity .
5690	Service webhook service .
5691	Get the public url of the ngrok server .
5692	Delete webhooks with given name
5693	Create a webhook .
5694	Create webhook .
5695	Parse the console .
5696	Iterate over all Telegram messages .
5697	Read telegram data from the queue .
5698	Create a DSMR protocol object .
5699	Create a serial connection to DSMR .
5700	Create a connection to DSMR reader .
5701	Handle incoming data .
5702	Called when the connection is lost .
5703	Handle a telegram .
5704	Parse telegram data .
5705	Get the version from a file .
5706	Ensure that the Python interpreter is a Python version .
5707	Return a list of packages in the specified directory .
5708	Create a command class .
5709	Return a Command for the given function .
5710	Run a command .
5711	Ensure that targets exist .
5712	Wraps a list of commands .
5713	Get the FileHandler class for package data .
5714	Get the data files that match the existing data specs .
5715	Get package data .
5716	Compile a regular expression .
5717	Iterate over a path .
5718	Translate a glob pattern .
5719	Join the translated parts into a string .
5720	Translate a glob part into a regular expression .
5721	Truncate a table .
5722	Write a table to the database .
5723	Write all indexes to a table .
5724	Write all triggers to a table .
5725	Write all constraints to a table .
5726	Writes the contents of the table to the file object
5727	Process a row .
5728	Write all indexes for a table .
5729	Write constraints to file .
5730	Write all triggers for a table .
5731	Return the number of items in the query .
5732	Enqueue data into the database .
5733	Start the task queue .
5734	Build AND predicate .
5735	Simple JSON serializer .
5736	Reconnect to the database .
5737	Execute a query and return the result .
5738	Connect to database
5739	Run the benchmark .
5740	Connect to the pool .
5741	Return a list of information about the given error number .
5742	Return the number of connections .
5743	Handle a MySQL connection failure .
5744	Generate a simple SQL expression .
5745	Build an UPDATE statement .
5746	Connect to the database .
5747	Sets up the database .
5748	Destroy the database .
5749	Starts a new step .
5750	Stop a step .
5751	Load start and stop values
5752	Disconnect from the API .
5753	Reconnect to the server .
5754	Connect to the server .
5755	Handle incoming messages .
5756	Stop the timers .
5757	Send a ping to the API .
5758	Check pong .
5759	Send data to the server .
5760	Unsubscribe from the server .
5761	Process a system message
5762	Callback handler .
5763	Default error handler
5764	Send data to the client .
5765	Resubscribe notifications
5766	Handle authentication data .
5767	Handle a configuration .
5768	Update timestamps for a channel .
5769	Reset the connection .
5770	Get all candles for a pair .
5771	Configure bitfinex
5772	Subscribe to tick .
5773	Unsubscribe from tick
5774	Subscribe to orderbook .
5775	Unsubscribe from orderbook .
5776	Subscribe to the raw order book .
5777	Unsubscribe from raw order book .
5778	Subscribe to trades .
5779	Unsubscribe from trades .
5780	Subscribe to candles .
5781	Unsubscribe from a pair .
5782	Authenticate the API .
5783	Cancel an order .
5784	Process a command .
5785	Process a device command .
5786	Process a Paho message .
5787	Create a DeviceType
5788	Publish an event
5789	Update a Device
5790	Returns a list of ClientStatus objects .
5791	List all bundles
5792	Create a new bundle
5793	Update a schema definition .
5794	Disconnects to the IBM IoT server .
5795	Called when a connection is received
5796	Subscribe to device events .
5797	Subscribe to device status
5798	Subscribe to device commands .
5799	Publish a command
5800	Called when a message is received .
5801	Called when a device is received .
5802	Called when a device status is received .
5803	Called when a client status message is received .
5804	Get the last event
5805	Get all events of a device .
5806	Make a call to the API
5807	Initiate a new mgmt request .
5808	Get the status of a request .
5809	Close the index .
5810	Returns the number of points in the specified coordinates .
5811	Returns a list of objects matching the given coordinates .
5812	Gets the bounding box .
5813	Delete data from index .
5814	Create an index from a stream .
5815	Load a byte array from the page .
5816	Delete an object .
5817	Check if the return value is 0
5818	Load application .
5819	Initialize the Flask extension .
5820	Serve the webicorn server .
5821	Convert value to native image URL .
5822	Crop an image .
5823	Crop an image .
5824	Process an image .
5825	Invert an image
5826	Called when the data is open .
5827	Process the placeholder image .
5828	Update the PPOi field .
5829	Update the PPOI field .
5830	Update the PPOI field .
5831	The default formfield widget .
5832	Convert obj to string .
5833	Autodiscover all supported apps .
5834	Unregisters a SizedImage subclass .
5835	Unregister a filter .
5836	Return the URL for the placeholder image .
5837	Builds filters and sizes for this field .
5838	Returns the root folder of the image .
5839	Returns the size of the downloaded root folder .
5840	Returns the path to the uploaded size
5841	Delete files matching the given regex .
5842	Preprocess the image .
5843	Preprocess image .
5844	Preprocess the image .
5845	Retrieve an image .
5846	Saves an image to disk .
5847	Return ppo as a string .
5848	Creates a resized image
5849	Render the template .
5850	Add the context to the context .
5851	Build a copy of the attributes .
5852	Get the resized path of a file .
5853	Return the path to the image file .
5854	Validate a list of sizes .
5855	Get the url of an image .
5856	Returns the rendition key set for the given key .
5857	Format an instruction .
5858	Format a function body .
5859	Decode a bytecode into an Instruction object .
5860	Decode a module .
5861	Mark a function as deprecated .
5862	Connect to the server .
5863	Close the connection .
5864	Read the result .
5865	Handle incoming requests .
5866	Parse the result of the agi result .
5867	Validate the response code .
5868	Reset all instances .
5869	Returns the list of instances
5870	Get the metadata for a package .
5871	Get all primary keys for a model .
5872	Deserialize the given value .
5873	Get an existing instance from the query .
5874	Get declared fields .
5875	Deserialize the schema .
5876	Split model kwargs into kwargs .
5877	Delete database .
5878	Snapshot a database .
5879	List all snapshots .
5880	Restore a snapshot
5881	Delete a snapshot
5882	Rename a snapshot .
5883	Replace a snapshot .
5884	Shuffle the indexes .
5885	Clean textacy .
5886	Apply a function to data .
5887	Create a function to process text .
5888	Processes text .
5889	Process text .
5890	Calculate the maximum length statistics .
5891	Return a DataFrame of token counts .
5892	Map parameter type name to string .
5893	Parse interface definitions .
5894	Return the inverse of the bidict .
5895	Update the log with the given arguments .
5896	Return a copy of this bidict .
5897	Return a copy of the graph .
5898	Return True if other is equal to other .
5899	Yield an iterable of values .
5900	Clears the application .
5901	Move the node to the end of the tree .
5902	Write text to a temporary file .
5903	Search for contacts .
5904	Merge arguments into config .
5905	Load address books .
5906	Prepare search queries for given arguments .
5907	Create a new contact
5908	Return a list of birthdays .
5909	Execute phone subcommand
5910	Executor for list_contacts
5911	Executes a subcommand for a vhardcard .
5912	Executor for remove contact
5913	Execute source subcommands for a vCard
5914	Executor for merging vCard lists .
5915	Executor for globus subcommands .
5916	Get action for given alias .
5917	Convert a boolean value to a boolean value
5918	Create a new contact object .
5919	Create an object from a file .
5920	Create a contact object from a user input .
5921	Create a new contact from an existing contact
5922	Return a list of names from the vCard .
5923	Add a category
5924	Parse a type value .
5925	Convert list to string .
5926	Try to convert a string to a date .
5927	Compare two UIDs .
5928	Search all contacts
5929	Search all contacts in contact name
5930	Search for all contacts with a given query .
5931	Search the address book .
5932	Get a dictionary of uids .
5933	Get the short UID for the given uid
5934	Find VCard files .
5935	Load VCard files .
5936	Get the ABHook by name .
5937	Return available architectures .
5938	Return a dictionary of available architectures .
5939	Return an inspect . argspec .
5940	Parse command line arguments .
5941	Helper function for safe input .
5942	Encode a value to the output file .
5943	Guess type from kwargs
5944	Add commands to the parser .
5945	Decorate a function with a new name .
5946	Decorate a function as argument .
5947	Prompt user for confirmation .
5948	Return a new Query with the given parameters .
5949	Create a new pattern with the given parameters .
5950	Return a cached result
5951	Return the first item of the query
5952	Delete all entities in the query .
5953	Handle deletion of entity .
5954	Execute redis .
5955	Estimate the amount of work in LaTeX .
5956	Perform a search .
5957	Count the number of entries in the database .
5958	Return a connection to an object .
5959	Convert a string to a list of strings .
5960	Refresh the indices of the model .
5961	Clean old indexes .
5962	Add an object to the registry .
5963	Get a key from the registry .
5964	Writes data to redis .
5965	Save the object to the database .
5966	Deletes the object from the database .
5967	Retrieve a single instance from the database .
5968	Register a reduction function .
5969	Open a semaphore .
5970	Get CPU count
5971	Send a result back to the result queue .
5972	Process worker threads .
5973	Add a call item to the queue .
5974	Ensure that the executor is running .
5975	Wrap non - pickled objects .
5976	Start the server .
5977	Duplicate a file descriptor .
5978	Get a reusable executor .
5979	Wait for jobs to finish .
5980	Generate a dictionary containing information about the process .
5981	Prepare process
5982	Close all open file descriptors
5983	Kill the given process .
5984	Terminate a child process .
5985	Get the exit codes for all the workers .
5986	Format the exit codes .
5987	Main entry point for the semaphore .
5988	Make sure the semaphore tracker is running .
5989	The event processor .
5990	Disassemble the program .
5991	An interactive console .
5992	Split a string into a list of arguments .
5993	Get the stack and line number of frames .
5994	Run all registered hooks .
5995	Discard the current state .
5996	Get an integer value .
5997	Get an integer value .
5998	Process commands .
5999	queue startfile
6000	Find the next token in a string
6001	Print an error message .
6002	Read a single line .
6003	Close the connection .
6004	Disassemble a byte string .
6005	Disassemble a byte string .
6006	Count the number of frames in a given frame .
6007	Get the call function name .
6008	Print the stack trace of the given process object .
6009	Lookup a subcommand by name .
6010	Handle short help
6011	Add a subcommand to the list of commands .
6012	Run a subcommand .
6013	Start debugging .
6014	Show a list of commands .
6015	Get line information .
6016	Find debugged frame
6017	Map thread names to thread ID .
6018	Get an integer .
6019	Parse on and off .
6020	Set the value of the debugger .
6021	Run set_int setting .
6022	Show show_on on or off .
6023	Show the integer value .
6024	Show the value of a setting .
6025	Check if line is a def statement .
6026	Check if the given line is a class definition .
6027	raise debuggerQuit .
6028	Determine if the terminal is running .
6029	Check if a color is dark .
6030	Return the signature of a frame .
6031	Return a list of all the expressions
6032	Given a frame return the string representation of the display .
6033	Return a string representation of the job .
6034	Read a single message .
6035	Show session information
6036	Log a subcommand .
6037	Find and set the debug frame
6038	Print a simple array with a list of lists
6039	Look up a signal by num .
6040	Look up a signal .
6041	Determine if a signame is valid .
6042	Set a replacement for a signal .
6043	Check if all the sighandlers are valid .
6044	handle signal signals
6045	Handles actions .
6046	Set print_method setter .
6047	Handle a signal .
6048	Return module name from filename .
6049	Search for a file in a list of directories .
6050	Search py_script
6051	Return a list of all python files in the given callername .
6052	Write a message to the output .
6053	Run the program .
6054	Columnize a list of commands .
6055	Called when an exception is raised .
6056	Close the connection .
6057	Write a message to the server .
6058	Complete an identifier .
6059	Write a string to the database .
6060	Add frames to ignore .
6061	Return the absolute path to filename if possible .
6062	Return the filename of the debugger .
6063	Returns True if the tracer is started .
6064	Determine if a frame is stopped .
6065	Set the next frame to stop .
6066	Print the stack trace for the given f .
6067	Locate filename .
6068	Check if the function name is in the correct frame .
6069	Delete a breakpoint
6070	Delete a breakpoint by its number .
6071	Enable all breakpoints .
6072	Enable a breakpoint by number .
6073	Delete all breakpoints associated with filename and line number .
6074	Open the parser .
6075	Read a line from the input .
6076	Ask the user for confirmation .
6077	r
6078	r
6079	Convert a query to a Future .
6080	Attempts to restore the original login .
6081	Loads a module .
6082	Iterate over all documents in the project .
6083	Entry point for the CLI .
6084	Convert a JSON file to a stream .
6085	Open a file or csv file .
6086	Yield dates in a stream .
6087	Convert string to float .
6088	Guess file encoding .
6089	Stream lines from a file .
6090	Transcode a file to UTF - 8
6091	Open a CSV file .
6092	Read CSV file .
6093	Entry point for Transcode .
6094	Establish a connection to the server .
6095	Save token to file .
6096	Perform an HTTP request .
6097	Perform a DELETE request .
6098	Wait for the project to finish .
6099	Return the root URL of a given URL .
6100	Save a new token
6101	Perform a JSON request .
6102	Send a POST request to the API .
6103	Change the path with the given path .
6104	Get the default account .
6105	Returns the documentation for the server .
6106	Wait for a job to complete .
6107	Perform a GET request .
6108	Print result as CSV .
6109	Read parameters from file .
6110	Simplify a document .
6111	Create a project with a list of documents .
6112	Upload the docs from a JSON file .
6113	Entry point for the CLI .
6114	Upload a project to the server .
6115	Upload a file to the server .
6116	Entry point for the script .
6117	Creates a User object from the given credentials .
6118	Login to the API .
6119	Login page .
6120	Get data for a resource .
6121	Fetch data per period
6122	Load the view .
6123	Initialize the view .
6124	Handle GET requests .
6125	Handle incoming messages
6126	Update the menus
6127	Return a list of static file handlers .
6128	Process a JSON message
6129	Called when a DOM node changes
6130	Create the widget .
6131	Initialize the widget
6132	Destroy the widget .
6133	Called when a child is added .
6134	Remove child from widget .
6135	Iterate over all child widgets .
6136	Set attribute of widget .
6137	Update the proxy .
6138	Notify about a change .
6139	Perform xpath search .
6140	Initialize the object .
6141	Initialize widget .
6142	Set HTML source
6143	Handle changes .
6144	Handle a block .
6145	Handle new children .
6146	Read the contents of a file .
6147	Display error message and exit .
6148	Display error parsing .
6149	Get product by name
6150	Creates a new session .
6151	Reset the store .
6152	Gets all stores matching the search term .
6153	Set delivery system
6154	Retrieves a specific menu .
6155	Add item to basket
6156	Adds a pizza to the basket
6157	Adds a side to the basket
6158	Remove an item from the basket
6159	Set payment method .
6160	Process a payment .
6161	Make a GET request
6162	Make a POST request
6163	Call API with given verb
6164	Add an item to the menu .
6165	Add an exit .
6166	Draw the menu .
6167	Process user input .
6168	Select the selected item .
6169	Creates a new Menu instance from the given menu data .
6170	Return the top limit of a DataFrame .
6171	Return the top of a DataFrame .
6172	Convert string column to datetime .
6173	Convert datetime to strftime .
6174	Change a column in a DataFrame .
6175	Cast a column to a new column
6176	Rank values in a DataFrame .
6177	Perform a waterfall on a DataFrame
6178	Perform math operations on a DataFrame
6179	Round a column to a given number of decimals .
6180	Change the absolute values of a column .
6181	Pivot dataframe .
6182	Pivot data by group
6183	Group columns by aggregations .
6184	Compute the cumulative sum of a column .
6185	Add a missing row to a DataFrame .
6186	Decorator to catch exceptions .
6187	Log a message to a function .
6188	Log the execution time of a function .
6189	Decorator to log output shapes .
6190	Rename a DataFrame .
6191	Compute the cumulative sum of a DataFrame .
6192	Return a DataFrame with columns grouped by their columns .
6193	Get a value from a function call .
6194	Remove old entries from cachedir entries .
6195	Roll up a DataFrame .
6196	Compute the maximum value of a column .
6197	Compute the minimum value of a column .
6198	Fill missing values with given value .
6199	Add an offset to a date object .
6200	Add a number of months to a date object .
6201	Add nb_years to a date object
6202	Parse a date string .
6203	Filter DataFrame by date_col .
6204	Change a column in a DataFrame .
6205	Evaluate a family .
6206	Get learning updates .
6207	Get training parameters .
6208	Add free parameters to the network .
6209	Sample the first glimpse .
6210	Prepare the network .
6211	Compute the tensor .
6212	Apply a function to this dataset .
6213	Vectorize the target set .
6214	Print statistics about the training set .
6215	Train the network .
6216	Sample from input .
6217	Compute alignments .
6218	Compute the context vector .
6219	Concatenate multiple tensors .
6220	Pad the dataset .
6221	Yields the rmsprop .
6222	Prints the report
6223	Run the model .
6224	Run the monitor .
6225	Build the dummy variables for the loop .
6226	Perform a scan step .
6227	Multiprocessize parameters .
6228	Wrapper for if train .
6229	Skip epochs .
6230	Load model parameters .
6231	Train the model .
6232	Run a training step .
6233	Run validation step .
6234	Report a score to the network .
6235	Returns the current dataset .
6236	Apply a function to this tensor .
6237	report the usage information
6238	Compute tensor .
6239	Create variables from a dataset .
6240	Compute the shared value of theano .
6241	Stack encoders .
6242	Stack decoding layers .
6243	Encodes x .
6244	Return the decoded representation of x .
6245	Creates a 2D Gaussian
6246	Register a layer .
6247	Monitor the mean .
6248	Return a list of all parameters .
6249	Setup the variables .
6250	Compute and return a MapDict .
6251	Save model parameters to path .
6252	Load parameters from file .
6253	Report information about the network .
6254	Register new parameters .
6255	Register updates .
6256	Register new training updates .
6257	Register monitors .
6258	Calculate the norm of multiple tensors .
6259	Serialize elt to file_obj .
6260	Load elements from a file - like object .
6261	Load model parameters from path .
6262	Create HTTP request elements .
6263	Decodes user_state parameter .
6264	Parser for X credentials .
6265	Filter request elements .
6266	Log in .
6267	Normalize a dictionary .
6268	Convert a list of items to a dictionary .
6269	Parse the body of the query body .
6270	Resolve provider class
6271	Create a cookie .
6272	Save the cookie .
6273	Get cookie data .
6274	Return the response data .
6275	Generate a signature .
6276	Serialize the value to JSON .
6277	Check if the token is valid .
6278	Expire the given number of seconds
6279	Serialize this credentials into a string .
6280	Return True if content is a binary string .
6281	The content of the response .
6282	Create OAuth elements .
6283	Add the email address to the user .
6284	Decorator for login .
6285	Perform authentication .
6286	Generate a session key .
6287	Set a session key .
6288	Generate random CSRF generator .
6289	Log a message .
6290	Return True if the given status is in the given category .
6291	Split url into base and query parameters .
6292	Decorator to enable cors for the given application .
6293	Set CORS headers .
6294	Returns the kors argument dictionary for the application instance .
6295	Convert an object into a string .
6296	Ensure inst is an iterable .
6297	Return True if two values are close to another .
6298	Mark a function as deprecated .
6299	Deserialize a string .
6300	Create an AudioSegment object from a file .
6301	Create an AudioSegment from a numpy array .
6302	Execute a command and write it to out .
6303	Filter silence to silence .
6304	Compute the FFT of this TimeSeries .
6305	Generate frames from the stream .
6306	Normalizes the amplitude of the audio segment .
6307	Return a new AudioSegment with the same segments .
6308	Resample the stream .
6309	Serialize the state to a string .
6310	Compute the spectrogram .
6311	Given a list of candidates and a list of candidates return the first one .
6312	Given an onset sample idx find the offset front of the offset front .
6313	Calculate the offset id after the given onset front .
6314	Takes an offset_front_front_id and returns a list of offsets that correspond to the given offset_id .
6315	Given an onset and an offset return a list of tuples that overlap the given offset .
6316	Update the segmentation mask .
6317	Return the front id of a front index .
6318	Yield all the front ids that have been yielded .
6319	Return a list of offsets corresponding to the given offsets .
6320	Remove gaps from the segmentation mask .
6321	Remove front vectors that are smaller than size .
6322	Break back - matched fronts into a dictionary of matches .
6323	Merge adjacent segments .
6324	Split masks into masks .
6325	Downsampling of two masks .
6326	This is the main function for the SA .
6327	Bandpass filter
6328	Lowpass filter
6329	Convert a list of responses to a tf input .
6330	Expand dataset and standardize it .
6331	Check if two elements are equal .
6332	Group the features in the audit Ranks .
6333	Load confusion matrix from audit file .
6334	Convert a list of responses to tf input .
6335	Update pip_index_url from environment variables .
6336	Autodetect the requirements files .
6337	Resolve all open streams .
6338	Resolve a list of streams by property .
6339	Resolve streams by predicate .
6340	Raise an error .
6341	Push samples to the stream .
6342	Push a chunk to the stream .
6343	Get information about the stream .
6344	Open the stream .
6345	Calculate the time correction .
6346	Return the child of the element .
6347	Next sibling .
6348	The previous sibling of this element .
6349	Set the name of the LSL .
6350	Set the value .
6351	Append a child to this element .
6352	Create a new child element with the given name .
6353	Return a copy of elem .
6354	Prepend a copy of the element to this element .
6355	Remove a child node .
6356	Return the results of the LSL resolver .
6357	Parses word .
6358	\ x1b [ 1mNAME \ x1b [ 0mNAME \ x1b [ 0mNAME \ x1mNAME \ x1b [ 0mNAME \ x1b [ 0mNAME \ x1 \ x1b [ 0mNAME \ x1b [ 0mNAME \ x1mNAME \ x1b [ 0mNAME \ x1b [ 0mNAME \ x1mNAME \ x1mNAME \ x1mNAME \ x1b [ 0mNAME \ x1b [ 0mNAME \ x1mNAME \ x1mNAME \ x
6359	Compute the n - grams of a token .
6360	Yield processors from a pipe
6361	Execute a function over an iterable .
6362	Make a fuzzy word .
6363	do fuzzy fuzzy
6364	Index a word .
6365	Extract all relation relations .
6366	Show help for all available commands .
6367	Show the database info .
6368	Show the database key .
6369	Get geohashes
6370	List all housenumbers
6371	Index a document
6372	Get scores for a word .
6373	Show the difference between two strings
6374	Send a request and return the response .
6375	Iterate over a list of requests .
6376	Read bits from an array .
6377	Convert a list of types to a bitarray .
6378	Convert a slice value to a Slice .
6379	Find files in a directory .
6380	Implements the elements of an iterable .
6381	Iterate over items in a list of items .
6382	Multiply a signed signal .
6383	Returns the log2cimal of x .
6384	Return True if the given number is a power 2 .
6385	Create a case statement .
6386	Declare the default statement .
6387	Register the interface for the given object .
6388	Called when the simulation is complete .
6389	Log a change .
6390	Render a HWProcess .
6391	Automatically add agents to the interfaces .
6392	Get the parent clk
6393	Yield elements from iterable .
6394	Group items by fn .
6395	Flatten an iterable .
6396	Merge nested elements from ifContainer .
6397	Remove unconnected signals .
6398	Check if the procedure is a simple assignment .
6399	Merges two processes .
6400	Given a list of processes return a list of processes .
6401	Called when a write request is received .
6402	Serialize units to disk .
6403	Get the name of a list of statements .
6404	Given a list of statements return a list of statements where each driver is a list of statements and a list of statements where each driver is a statement .
6405	Define a signal .
6406	Synthesize the architecture .
6407	Determines the maximum id of a stm .
6408	Returns the maximum number of statements in a proc .
6409	Write data to the simulation .
6410	Change direction of interface .
6411	Load declarations .
6412	Get all the signals for this interface .
6413	Returns the fully qualified name of the entity .
6414	Returns the bit length of the interface .
6415	Return sensitivity by operation .
6416	Evaluate the given operator .
6417	Convert signed bits to the specified type .
6418	Reinterpret bits to a hStructT .
6419	Return the number of words between start and end .
6420	Group blocks by word index .
6421	Pretty print interfaces
6422	Generates frames from a TransTuple .
6423	Iterate over the TransPart objects .
6424	Pack data into a dictionary
6425	Clean meta data .
6426	Find enclosure for statements .
6427	Find the sensitivity sequences in the given list .
6428	Get the RTL context
6429	Called when the node is reduced .
6430	Handle merging of two statements .
6431	Check if two statements are merged .
6432	Merge two statements .
6433	Merges two lists .
6434	Reduce a list of statements .
6435	Called when a parent event is dependent .
6436	Set the parent stm .
6437	Register the parent stm .
6438	Destroy this statement .
6439	Create a register for a given dtype .
6440	Wrapper for _signature .
6441	Clean up all internal connections .
6442	Iterate over the fields of a struct or HStructor .
6443	Unpack data from structT .
6444	Convert this array to a signed value .
6445	Add a sensitivity to the simulation .
6446	Evaluate conditions .
6447	Connect a subSimUnit to a subSimUnit .
6448	Create a update updater for a new value .
6449	Returns a function that updates the next item in the next item .
6450	Instantiate a vector .
6451	Initialize the HWProcess for the given HWProcess .
6452	Evaluate a parameter .
6453	Sets this parameter .
6454	Creates a HStruct object from an interface map .
6455	Finalize the memory .
6456	Determine the auto - index cascade operation
6457	Convert a value into a ValueCluster .
6458	Copies a signal to the specified type .
6459	Try to interpret a signal .
6460	Recursively walk the parameters of an interface .
6461	Return a list of connections connected to a packed Packet .
6462	Pack an interface into an interface .
6463	Convert a ROM into a list of processes .
6464	Convert this unit to an Rtl .
6465	Register an interface in the context .
6466	Reduce a sig and val .
6467	Reduce a sig .
6468	Get the base name scope .
6469	Returns True if the unit is serialized .
6470	Create HDL type for given type .
6471	Convert an IfContainer into an HDL .
6472	Get base condition .
6473	Return a SimBitsTensor for a given width .
6474	Return the name of a constant .
6475	Cuts off the driver of the receiver .
6476	Load the bit address from an array .
6477	Load fields from HDL struct .
6478	Load from hdl type .
6479	Return the width of this array .
6480	Iterate over all the transitive flattens .
6481	Convert a value to a signed number .
6482	Merge two statements .
6483	Get indentation .
6484	Raises ValueError if obj does not exist
6485	Register a parameter .
6486	Update parameters from otherObj .
6487	Register a unit .
6488	Register an interface .
6489	Register an array .
6490	Return the single driver
6491	Evaluate the expression .
6492	Create an operand with the operands .
6493	Return a new context with the given indent .
6494	Try to connect an interface to an interface .
6495	Connect clk to all units
6496	Propagate clk n and rst_n
6497	Propagate clk and rst
6498	Propagate all rst_n nodes in obj .
6499	Propagate rst_nodes to all units
6500	Iterate over bits in a signal .
6501	Serialize exclude evaluation
6502	Private method for serialize .
6503	Serialize the params for this unit .
6504	Get the full name of the object
6505	Recursively create an association .
6506	Prepare a unit for a unit .
6507	Convert a unit into a SimModel .
6508	Recursively reconnect signals from the model
6509	Compute the VCD of a simulation .
6510	Initialize onT write callback .
6511	Connect the signal to this port .
6512	Register a signal .
6513	Connect this target to the driver .
6514	Get the signature of this node .
6515	Returns True if sig is ev dependent on process .
6516	Add a process to the event queue .
6517	Add a processor to the scheduler .
6518	Schedule an event to wake up .
6519	Schedule the apply values .
6520	Perform conflict strategy .
6521	Run combine processes .
6522	Run all the sequences in the sequence .
6523	apply values to signal
6524	Reads the value of a signature .
6525	Write an Rtl signal .
6526	Add a new process to the event loop .
6527	Simulate the synthesised unit .
6528	Factory function to create operands .
6529	Convert a list of statements into a list of operands .
6530	Create a child process .
6531	Computes the Hamming distance between two hashes .
6532	Compute the hash of an image .
6533	Calculate the distance between two images .
6534	Set up the device .
6535	Update the device state .
6536	Mute the volume .
6537	Increase the volume .
6538	Decrease the volume down .
6539	Set the volume level .
6540	Reset the piece .
6541	Returns the piece at the given square .
6542	Remove a piece at the given square .
6543	Set piece at given square .
6544	Determine if a move is a kill .
6545	Checks if the game is active .
6546	Check if game is over .
6547	Checks if the current position is a checkmate
6548	Returns True if the current position is a fourfold repetition .
6549	Remove a move from the stack .
6550	String representation of the chessboard .
6551	Push a move onto the stack .
6552	Calculate the Zobrist hash of the board .
6553	Gets the symbol
6554	Create a Color instance from a given symbol .
6555	Return the UI as a string .
6556	Create a chess instance from a string .
6557	Parse the contents of a string .
6558	Parse a single commit
6559	Context manager for loading a config from a CLI .
6560	Execute a command - line interface with the given configuration .
6561	Add an argument to an argparse . ArgumentParser .
6562	Load configuration from file .
6563	Generate a yaml file .
6564	Generate markdown file .
6565	Cast a string to the appropriate type .
6566	Returns a list of all dates between the given date .
6567	Parse a date string .
6568	Load a CSV file .
6569	Set missing rates
6570	Compute missing rates .
6571	Get the rate for the given date
6572	Convert amount to currency
6573	Slice an iterable into a list of lists .
6574	Interpolate a list of frames
6575	Read n bytes from file .
6576	Write a record to the file .
6577	Return a map of words between start and end .
6578	Return the comment area of the file .
6579	Add an array to the file .
6580	Close the file .
6581	Compute the position for a given TDB .
6582	Close the file .
6583	Load the PCK data
6584	Compute the segment .
6585	Visit a function call .
6586	Check if binary operator is within logging .
6587	Check if a dictionary is enabled .
6588	Check for joined strings .
6589	Check for debugging .
6590	Handle exceptions .
6591	Detect logging level .
6592	Get the name of an exception handler .
6593	Get the id attribute of the given value .
6594	Check if the node is a bare exception .
6595	Check for exc_info .
6596	Delete the file if it exists .
6597	Decorator for registering the database file widget .
6598	Returns the rendered PDF .
6599	Returns a response to the response .
6600	Quote a string .
6601	Configure mongodb .
6602	Convert string to underscore
6603	Auto - create indexes for mcs .
6604	Parse a CSV file .
6605	Load a file .
6606	Parses a line into a PriceModel instance
6607	Translate a symbol
6608	Load the symbol map .
6609	Get session
6610	Add a new price
6611	Import prices from a CSV file .
6612	Show latest prices for symbol
6613	List all prices
6614	Download prices .
6615	Prune old price entries
6616	Get a session for the price database
6617	Add a new symbol map .
6618	List price maps .
6619	Get symbol by symbol
6620	Read lines from a file .
6621	Map entity to price
6622	Map a price model to a price model
6623	Read configuration file .
6624	Returns the path to the config file .
6625	Create the user config file
6626	Get the config file path .
6627	Get the current configuration .
6628	Set the value of an option .
6629	Get an option from the configuration .
6630	Save the configuration to the file .
6631	Parse a symbol
6632	Adds a price to the market .
6633	Add a price entity to the database .
6634	Download and save Price model
6635	session
6636	Returns a list of prices .
6637	Get prices on a namespace
6638	Remove all symbols that have been created
6639	delete all prices for a security symbol
6640	Download the price data for symbol .
6641	Get securities
6642	Partial partial function .
6643	Update bound_args
6644	Recursively descend the tree .
6645	Decorator to remove nested nodes .
6646	Check if student parts have equal length .
6647	Check if the AST matches the AST .
6648	Test if text contains text .
6649	Test if package has an import .
6650	Test if text contains text .
6651	Check if print call has printout .
6652	Check if the user has an error .
6653	Checks if the student is selected
6654	Check function calls .
6655	Get the result from the process
6656	Apply a new state to the state .
6657	Test if an instance is an instance of the solution process .
6658	Return a new dictionary with empty values .
6659	Create a child node .
6660	Get a parser from a tree .
6661	Test if a context loop is detected .
6662	Checks if the state has context with the correct name .
6663	Check if a student has a part .
6664	Check if there is a part at the given index .
6665	Check the arguments of a function .
6666	Raise a child call .
6667	Calculate the true anomaly .
6668	Initialize the Ldap3 login manager .
6669	Initialize LDAP configuration .
6670	Adds a new ldap3 server .
6671	Remove an LDAP connection .
6672	Cleans up the connection .
6673	Authenticate using LDAP .
6674	Attempt to authenticate a user .
6675	Authenticate user with search_bind .
6676	Get a list of groups for a user .
6677	Get LDAP user information .
6678	Get user information for a given user .
6679	Search for an LDAP object .
6680	Return an LDAP connection
6681	Creates a connection object
6682	Create a ldap3 connection
6683	Destroy a connection .
6684	Search for collections .
6685	Search for labels
6686	Search for collections .
6687	Search for all jobs .
6688	Speak the database .
6689	Announce the device .
6690	Update Google Drive credentials
6691	Update headers
6692	Check for secrets
6693	Download a file .
6694	Download url and stream
6695	Update authorization token
6696	Get or create a folder .
6697	Read response from response .
6698	Get bucket
6699	Update the secrets file
6700	Initialize the client .
6701	Load secrets from cache
6702	Show the logs for the given name .
6703	List the image logs .
6704	create folder at endpoint_id
6705	Initialize transfer client
6706	Search all available containers
6707	Show client status .
6708	Add a variable
6709	Remove a variable
6710	Activate the given backend
6711	Delete a backend .
6712	Update base base and secrets .
6713	Return basic auth header .
6714	Generate a signature .
6715	Generate a header signature .
6716	Make a DELETE request
6717	Send HEAD request .
6718	Wrapper for GET requests .
6719	Return True if certificates are enabled
6720	Remove an image
6721	Get the current version .
6722	Get install_requirements
6723	Get the singularity version
6724	check if installed is installed
6725	Get the absolute path of the installed package .
6726	Get thumbnail image
6727	Run a command
6728	Get metadata
6729	Update the secrets
6730	Print the output of a Docker container .
6731	Kill the registry
6732	List logs for a container
6733	Returns a list of names of all registered collections
6734	Update the secrets
6735	Update the secrets
6736	Get an instance of the client .
6737	Run ipython .
6738	Get manifest definitions
6739	Get manifest
6740	Get download cache location .
6741	Extract environment variables
6742	Update the gitlab base .
6743	Update secrets .
6744	Get metadata .
6745	Get client settings .
6746	Get or update a setting .
6747	Updates a setting .
6748	Generate an authorization signature
6749	List all builders .
6750	Load a template
6751	Get IP address
6752	Build an instance
6753	List all containers
6754	List all Containers
6755	Entry point for registry registry .
6756	Entry point for the registry .
6757	Initialize the database
6758	return json template
6759	List all shared endpoints
6760	List endpoints
6761	List files at endpoint
6762	Get shared link
6763	Read client secrets .
6764	Retrieve services .
6765	Delete an object .
6766	Delete a bucket
6767	Destroy an instance
6768	Get all subparsers .
6769	Generate a random string .
6770	Get a temporary directory .
6771	Extract a tar archive .
6772	Extract a tarball from a directory .
6773	Returns the SHA256 hash of a file .
6774	Read a file .
6775	Read a JSON file .
6776	clean up files
6777	Upload an image
6778	Get or create a collection .
6779	Get a collection by name
6780	get container by name
6781	List all containers
6782	Inspect a container
6783	Rename an image
6784	Move an image
6785	Remove an image
6786	Add an image to the registry
6787	Push an image
6788	Parse a recipe from a recipe .
6789	Find a single recipe by filename .
6790	Create a tar . gz . tar . gz . tar . gz . gz
6791	Run the build
6792	Update blob metadata .
6793	Normalize a container name .
6794	Return whether the error stream should be colored .
6795	Emit an error message
6796	Write a message to a stream .
6797	Display a table
6798	Push an image
6799	Get template
6800	get the manifest
6801	try to get a template
6802	Update client secrets
6803	Return a string representation of the given class .
6804	Context manager for handling s3 errors .
6805	Create a proxy object .
6806	Generate a URL for a user .
6807	Generate the gravatar url
6808	Check if the given email has a gravatar .
6809	Generate a gravatar profile
6810	Generate chimera blocks
6811	Compute chimera block quaternions .
6812	Enumerate a molecule .
6813	Enumerate a molecule .
6814	Normalizes a molecule .
6815	Apply transformation to molecule .
6816	Convert a mol object into a canonical order
6817	Validate molecules .
6818	Disconnect the metal structure .
6819	Convert a molecule into a molecule .
6820	Enumerate all Tautomers in a molecule .
6821	Convert a Tautomer into a list of Tautomer objects .
6822	Standardize a molecule .
6823	Return the parent of a molecule .
6824	Return the largest fragment of a molecule .
6825	Return a copy of the molecule .
6826	Return a copy of a molecule .
6827	Return the charge of a molecule .
6828	Return the super parent of a molecule .
6829	Entry point for MolVS commands .
6830	Remove fragments from the molecule .
6831	Choose the largest fragment from a molecule .
6832	Integrate an IVP .
6833	Get GitHub stats
6834	Get members of organization
6835	Get teams of organization .
6836	Gets the list of repositories
6837	Count the number of unique contributors for a repo .
6838	Count the number of pull requests for a repo .
6839	Get all the issues for a repository
6840	Get the contents of a repository .
6841	Get the license for a given repo
6842	Get all the commits
6843	Writes the organization data to a json file
6844	Write totals to file .
6845	Write languages .
6846	Ensure the directory exists .
6847	Remove languages .
6848	Get a list of organizations .
6849	Create a GitHub session .
6850	Check API limits .
6851	Connect to GitHub .
6852	Query repositories .
6853	Prompt user for organization .
6854	Writes the structure to a file
6855	Create a Project from a GitLab repository .
6856	Create a Project object from a dict .
6857	Return github license object .
6858	Gets the data for all repositories .
6859	Retrieve all releases from the repository
6860	Get all referrers
6861	Retrieve data from url
6862	Writes a json file
6863	Write reference data to file .
6864	check data consistency
6865	Writes data to file
6866	Writes references to file .
6867	Parse a METECODE JSON file .
6868	Takes a URL and returns a JSON response .
6869	Process a JSON file .
6870	Login to GitHub .
6871	Gets the members of the organization
6872	Write logins to file
6873	Create a stashy session .
6874	Connect to a Gitlab server .
6875	Query repositories .
6876	Clone a git repo .
6877	Compute the hours of a given sloc .
6878	Removes all values from a dictionary .
6879	Read a query from a file .
6880	Query GitHub from a file .
6881	Submit a graphQL query
6882	Wait for a reset .
6883	Handles the countdown .
6884	Load data from file .
6885	Saves the data to a file .
6886	Creates a TFS connection
6887	Creates a project analysis client .
6888	Create a TFS client .
6889	Create a git client .
6890	Create a TFS Git Git Client .
6891	Retrieve Git Repos for a project .
6892	Get a list of Tfvc repositories for a project .
6893	Get the year commits .
6894	Calculate the total commits .
6895	Write the last year to a file
6896	Configure backend instances .
6897	Get a MetricsInterface interface .
6898	Record timing information .
6899	Context manager for timing information .
6900	Decorator to add a timer to the function .
6901	Generate a tag .
6902	Log timing information .
6903	Log a histogram .
6904	Roll the leaderup .
6905	Create an enum instance .
6906	Convert database value to enum .
6907	Convert value to python type .
6908	Get the name of the value .
6909	Recursively resolve the given path .
6910	Projects a list of tuples into a dictionary of cells .
6911	Calculate the mean value
6912	Increment the rate .
6913	Return the mean rate .
6914	Mark a new value .
6915	Serialize a metric
6916	Serialize a metric into a list of tuples .
6917	Generate a metric string .
6918	Send a metric string to the buffer .
6919	Retrieves an online configuration value .
6920	Ensure data is valid UTF - 8 .
6921	Get or set a default value .
6922	Return a map of ledger codes to GUIDs
6923	Get a list of divisions .
6924	Map exact invoice numbers to foreign invoice numbers .
6925	Solve the Sudoku .
6926	Creates a view handler .
6927	Creates a form view .
6928	Creates a HTTP method view .
6929	Creates an API view .
6930	Creates a generic API view
6931	Decorator to inject a model view set into a viewset .
6932	Connect to a UnixFile descriptor .
6933	Called when the reader is ready .
6934	Close the socket .
6935	Called when a connection is lost .
6936	Register a watch .
6937	Remove a watch .
6938	Setup a watch .
6939	Setup the watch .
6940	Get the next event .
6941	Touch the message .
6942	Update self . interval .
6943	Called when the timer is finished .
6944	Close all connections .
6945	Return True if all connections are starred .
6946	Establish a connection to the NNSQd server .
6947	Query the topic for lookupd .
6948	Set the maximum number of connections .
6949	Called when a message is raised .
6950	Register a callback for the given name .
6951	Remove a listener .
6952	Calls all registered listeners
6953	Publish a message to the given topic .
6954	Set feature transform mode
6955	Run the prediction on the input data .
6956	Calculate theta of a site s .
6957	Parse a log file .
6958	Remove unpaired fastq pairs .
6959	Merge default adapters .
6960	Run trimmomatic .
6961	Read a depth file .
6962	Run coverage report .
6963	Set the template file
6964	Set the main channel names .
6965	Get user channel information
6966	Render a Jinja2 template .
6967	Render the template .
6968	Set the channel channels .
6969	Update the main loop sink .
6970	Set the secondary channel for a given source .
6971	Update the attributes of the component .
6972	Set the compiler channels .
6973	Set raw inputs .
6974	Set secondary inputs .
6975	Set extra inputs .
6976	Parse coverage header string .
6977	Parse assembly .
6978	Get the content of a sequence .
6979	Filter contigs by comparison .
6980	Returns the assembly length .
6981	Write the assembly to a file .
6982	Writes the assembly report to a file .
6983	Remove inner forks from text .
6984	Check for inner fork insanity checks .
6985	Run sanity checks on a pipeline .
6986	Parse a pipeline .
6987	Get the source lane of a fork .
6988	Extracts the lanes from a string .
6989	Establish a linear connection to a list of processes .
6990	Establish a connection to another process .
6991	Add unique identifiers to pipeline .
6992	Remove unique identifiers from pipeline links .
6993	Checks the required files .
6994	Return mapping from header to position
6995	Convert seconds to hours minutes .
6996	Convert a string into a float
6997	Get the pipeline processes
6998	Clear inspect info .
6999	Update barrier status status .
7000	Retrieve log from file .
7001	Assign resources and memory allocations to disk .
7002	Update process statistics .
7003	Parse the log file .
7004	Update inspect .
7005	Display the screen .
7006	Updates the top line .
7007	If the right left left left left right left left left right left right left right left left left left right right
7008	Get last n lines
7009	Retrieve static information about the pipeline .
7010	Reads the dotDag file .
7011	Get the hash of the pipeline .
7012	Get the next flow command path .
7013	Split sequences into separate sequences .
7014	Main entry point for the pipeline .
7015	Implements brew_innuendo .
7016	Return an instance of brew .
7017	List all available recipes .
7018	Validates a pipeline string
7019	Build the upstream pipeline .
7020	Build the pipeline fragment .
7021	Define the pipeline string .
7022	Run auto - pipeline .
7023	Return component string .
7024	Write report to file .
7025	Main entry point for trimming .
7026	Fix the name of the contigs in assembly .
7027	Remove temporary fastq files
7028	Parse files
7029	Parse log file
7030	Iterate over the entries in the database .
7031	Get the ID of a contig
7032	Generate data for plotting .
7033	Writes the report data
7034	Run assembly report
7035	Parse assembly file .
7036	Get summary statistics
7037	Get window labels
7038	Calculate GC properties .
7039	Calculate the GC sliding window .
7040	Run skesa .
7041	Write a report to a report
7042	Get the index of a biased list
7043	Perform trim range analysis .
7044	Determine optimal trim position and optimal trim position
7045	Get the summary information from a file .
7046	Check health of a summary file .
7047	parse bowtie log
7048	Parse a process name string .
7049	Add a dependency .
7050	Search for a template in the tree .
7051	Build the header
7052	Build the footer .
7053	Set channels for all processes .
7054	Set the init process
7055	Set the secondary channels
7056	Set status channels .
7057	Convert a resource dict into a string .
7058	Generate a container configuration string
7059	Returns a string representing the parameters of the process .
7060	Returns a string with the parameters merged together .
7061	Generates the manifest .
7062	Set the configuration parameters .
7063	Write a dag to a file
7064	Render the pipeline .
7065	Write the configuration files .
7066	Export params to stdout .
7067	Export the directives as JSON
7068	Fetch container tags
7069	Build the graph .
7070	Set kers based on max read lengths .
7071	Run metaSPAdes .
7072	Get the report id for the next flow .
7073	Update the tracewatch .
7074	Update the log watch status .
7075	Send a live report
7076	Send a POST request to the report .
7077	Close connection to web server
7078	Convert the adapter fastqc file into a tabular .
7079	Entry point for fastqc .
7080	Sends the output to the output file .
7081	Main function to run the mash command .
7082	Add software versions .
7083	Parse Mash output .
7084	Print a message to stdout .
7085	Parse the list of processes
7086	function to collect processes
7087	Guess the compression type of a file .
7088	Get the range of a qual_str
7089	Return a list of encoding strings that are in a range .
7090	Parse the coverage table .
7091	Filter assembly file based on coverage .
7092	Remove contigs from a bam file .
7093	Evaluate the minimum coverage .
7094	Calculate assembly size .
7095	Main entry point for assembly mapping .
7096	Converts CamelCase to CamelCase
7097	Return a mapping of Process classes to classes .
7098	Process a newick file
7099	Perform a quick hull algorithm .
7100	Map W samples to next data .
7101	small median filter
7102	Compute Krusk - Krusk - Krusk
7103	Compute the SMM
7104	Compute the NCCs
7105	Gaussian filter .
7106	Compute the n - squares distance between the data X
7107	Circular shift in X
7108	r Compute embedded space in X .
7109	Create matplotlib figure .
7110	Plot boundary boundaries .
7111	Plots a set of labels .
7112	Plot groundtruth data .
7113	Plot a tree .
7114	Get feature segments .
7115	Compute the 2D Fourier Transform of a list of feature segments .
7116	r Compute the similarity of a feature matrix .
7117	Fit the scatter matrices .
7118	Fit the scatter_center to the data
7119	Read references from an audio file .
7120	Find estimator .
7121	Save estimations to file .
7122	Returns a list of all the algorithms that are boundary types .
7123	Get the configuration for a set of parameters .
7124	Get dataset files .
7125	Read the hierarchy labels from a jam file .
7126	Get the duration of a feature file .
7127	Write a REFAX file .
7128	Get the file path to the dataset .
7129	Aligns a set of beat intervals and labels .
7130	Estimate the tempo and frames
7131	Read beat annotations .
7132	Compute the beats synchronously .
7133	Read features from file .
7134	Write the features file .
7135	Returns a list of all parameter names .
7136	Compute framesync times .
7137	Get the frames of the feature .
7138	Get the features .
7139	Selects the features from the given file .
7140	Validate MSAF .
7141	Performs postprocessing .
7142	Run the command - line tool .
7143	Print the mean of the results .
7144	Compute estimated results .
7145	Compute information gain .
7146	Process a track .
7147	Return the name of the results file .
7148	Processes input file and returns results .
7149	Adds a new config variable to the root .
7150	Compute features for a file .
7151	Process features in a file .
7152	Gaussian cost function
7153	Normalize a F .
7154	Normalize a F .
7155	Normalize X .
7156	Calculate the time frames for a specific event .
7157	Remove empty segments from times and labels .
7158	Generate audio clicks .
7159	Convenience function for creating new labels .
7160	Process segmentation levels .
7161	Align the end - hierarchy between two dictionaries
7162	Compute the distance between a node .
7163	Estimate the K - Means K - Means
7164	Get data from X
7165	Run k - means .
7166	Compute the BIC of the data
7167	returns the magnitude of X
7168	Read the boundaries from a json file .
7169	Load the bounds from a json file .
7170	Read segments from a json file .
7171	Reads a json file and returns a numpy array .
7172	Compute the 2D FFT
7173	Compute the most frequent labels .
7174	Filter activation matrix .
7175	Get the boundaries module module .
7176	Returns the module module for the given labels_id .
7177	Run a hierarchical segmentation algorithm .
7178	Run a flat file on the input data .
7179	Run the algorithms .
7180	Process a track .
7181	Process audio .
7182	update W matrix
7183	Main entry point .
7184	Decorator to return a coroutine function .
7185	Create accumulator accumulator .
7186	Sets the current task .
7187	Spool the given iterable .
7188	Read lines from an input stream .
7189	Wrap a push url .
7190	Translate a Google Translate API .
7191	Return the translation table for the given language .
7192	Print the translation table .
7193	Remove nodes from a network
7194	Save a network to a pandas . DataFrame .
7195	Construct a Network from an HDF5 file .
7196	Set the variable in the network .
7197	Aggregate variable accessibility variables .
7198	Get node ids from kdtree
7199	Plot the graph .
7200	Initialize pois .
7201	Find the nearest pois within a given category .
7202	Count the number of nodes in the graph .
7203	Remove tags from a node
7204	Make an osm query using the given query .
7205	Build a query for a node .
7206	Perform an OSM query on a node .
7207	Check if the value is a regex expression .
7208	Compare two values .
7209	Wrap a function and return the result .
7210	Compare two strings .
7211	Trigger methods on instance .
7212	Returns True if the request matches the given request .
7213	Get a matcher by name .
7214	Initialize a matcher .
7215	Set the body .
7216	Sets the JSON response
7217	Set the value of a key .
7218	Appends functions to the list .
7219	Trigger request handlers .
7220	Set URL matcher .
7221	Matches headers .
7222	Matches for given headers .
7223	Matches the given headers .
7224	Sets the Content - Type header .
7225	Add query parameters to the request .
7226	Sets the body of the request .
7227	Sets JSONMatcher .
7228	Matches the request .
7229	Open a file
7230	Persist the session .
7231	Set the error .
7232	Create a response object and return it .
7233	Match incoming request .
7234	Activate asynchronous coroutine .
7235	Set the mock engine .
7236	Enable network connections .
7237	Create an HTTP mock .
7238	Remove a mock
7239	Activate the mock
7240	Disable the mock engine
7241	Return True if the request should be used .
7242	Match a request .
7243	Make a copy of this request .
7244	Activate engine .
7245	Context manager for context manager .
7246	Add an interceptor to the engine .
7247	Remove an interceptor by name .
7248	Get a setting from a connection
7249	Return the SQL for this column .
7250	Set original value to original value .
7251	Generate a placeholder for the value .
7252	Get a column by alias .
7253	Returns the placeholder value for the given value .
7254	Takes a YAML file and returns a copy of the data
7255	Compute base regression .
7256	The covariance matrix
7257	Recursively find all nonterminals in the tree .
7258	Calculate the weighted average of the tree .
7259	r Compute the covariance matrix .
7260	Explicitly explained variance .
7261	Compute the regression .
7262	Find the best root of the tree .
7263	set the temperature
7264	Calculate branch counts
7265	Calculate the cost of a branch
7266	Attach merge cost to tree .
7267	Optimize coalescent time scale .
7268	Convert a profile to a sequence .
7269	Normalize a profile .
7270	Setter for GTR
7271	Set the GTR model
7272	Set the sequence length
7273	Assign sequences to leaf nodes
7274	Prepare the tree .
7275	Calculate nodes and parents .
7276	Calculate the dist2 root of the tree .
7277	Reconstruct the ancestral sequences
7278	Returns the mutation matrix for the given node .
7279	Return expanded sequence .
7280	Create the Fitch profiles
7281	Compute the Fitch state of a node .
7282	Find the intersection of two arrays .
7283	get the sequence LH
7284	Calculate the ancestral likelihood of this tree .
7285	Convert node length to GTR .
7286	Optimize the branch length .
7287	Optimize the branch length .
7288	Returns the optimal path length for a node .
7289	Optimize sequences and branch length .
7290	Reconstruct the AlignalAlignment from the tree .
7291	Return Q Q .
7292	Creates a new Gaussian Grr .
7293	Return the standard model .
7294	check the GTR rate matrix
7295	Compute the probabilistic probability of a sequence
7296	Calculate optimal T .
7297	Optimize optimal T - T .
7298	Calculate the probability of a profile .
7299	Evolve the profile at time t .
7300	Return the log - likelihood of a sequence .
7301	Set branch length
7302	Visualize the clock model
7303	Plots the root to the given axes
7304	Recursively resolve polytomies
7305	Print the log - likelihood .
7306	Add coalescent prior to the tree
7307	Find the best root of the tree .
7308	Assert a tree .
7309	Create GTR model
7310	Read a VCF file .
7311	Reconstruct ancestral sequences .
7312	Calculate the FWHM for a given distribution .
7313	Create a new delta distribution .
7314	Multiply distributions from distributions .
7315	Assign dates to the tree
7316	Setup the TreeRegression
7317	Perform a maximum likelihood tree .
7318	Calculate the likelihood of the tree .
7319	Convert timestamps to human - readable date
7320	Returns the date due to the given node .
7321	Returns the maximum region of a node .
7322	Returns the minimum interpolation of an interpolation object .
7323	Calculate the median interp object .
7324	Get a numeric date
7325	Create a DataFrame from a given regression data .
7326	Connect to guacd server
7327	Close the connection .
7328	Receive an instruction .
7329	Send data to the server .
7330	Send an instruction .
7331	Perform a handshake .
7332	Encode unicode string to UTF - 8
7333	Load terminator from an instruction .
7334	Encode an argument .
7335	Encode this instruction .
7336	Return the URL for the class .
7337	Returns the URL of the instance .
7338	Returns the URL for the class .
7339	Download the contents of the vault .
7340	Retrieve the parent object for this job .
7341	Prompt user for credentials .
7342	Login to Solve .
7343	Display the current user .
7344	Print a user s logged in .
7345	Return a new QuerySet with the given filters .
7346	Return a new sequence with a range of chromosomes .
7347	Return a copy of this query with a given chromosome .
7348	Retrieves a list of facets .
7349	Process filters
7350	Return the next element .
7351	Execute a query .
7352	Execute a dataset .
7353	Entry point for the solve .
7354	Download a vault folder from a remote path .
7355	Construct a new instance from a dictionary .
7356	Logout the user .
7357	Make a request to the API .
7358	Retrieve the child object for this task .
7359	Cancels the job .
7360	Parse snpeff record .
7361	Convert a row to a dictionary .
7362	Get credentials from Netbio .
7363	Save the configuration to a file .
7364	Formats the given value
7365	Normalize a tabular data .
7366	Build a row .
7367	Build a single line .
7368	Return row attributes .
7369	Format a table .
7370	Create a new dataset .
7371	Validate a vault path .
7372	Upload files to vault
7373	Validate Vault path .
7374	Validate API host URL .
7375	Add files to the manifest .
7376	Annotate records .
7377	Evaluate the expression .
7378	Setter for the format_name .
7379	Register a new output format handler .
7380	Format data according to the provided format .
7381	Wrapper for tabulate .
7382	Get the user config directory .
7383	Return system configuration directories .
7384	Read the default config file .
7385	Read configuration files .
7386	Absolute path to user config file
7387	Return system config files
7388	Return a list of file paths .
7389	Write default config file .
7390	Read config files .
7391	Truncate a string .
7392	Replace strings with replace .
7393	Call multiple commands .
7394	Apply options to a command .
7395	Apply an option to a command .
7396	Initialize the options .
7397	Run the fixer .
7398	Run the clean command .
7399	Truncate string to max_field_width
7400	Format a list of numbers .
7401	Format row .
7402	A vertical vertical table adapter .
7403	Generate a table from data .
7404	Render a template file
7405	Returns True if type is numeric .
7406	Check if type is a boolean
7407	Returns True if type is a binary type .
7408	Generate a key using the given template .
7409	Generates a private key pair .
7410	Return a list of objects matching the specified template .
7411	Insert image into qr image .
7412	Export panels .
7413	Return the first weekday
7414	Return the count of repeats .
7415	Repeat repeat times in start_repeat .
7416	Perform biweekly operations .
7417	Handle a single chunk event .
7418	Iterate over all variants of a study .
7419	Export verified variants .
7420	Exports a MST variant file
7421	Update a user .
7422	List str variants of a case .
7423	Get information about a variant .
7424	Get a variant .
7425	View for verification .
7426	Manage CLinvar submissions .
7427	All cancer variants .
7428	Add a variant to a variant .
7429	View for an evaluation .
7430	Display a classification .
7431	Upload a new gene panel .
7432	Download verified excel files
7433	Given a list of gene ids return a mapping of gene ids .
7434	Add incompletePenrance information .
7435	Link the gene IDs to the gene datasets .
7436	Send a matchmaker request .
7437	Retrieve a list of connected nodes .
7438	Get the coordinate coordinates for a chrom and position
7439	Determines the sub category based on the reference and variant lengths .
7440	Get the length of a variant .
7441	Determine the end of a variant
7442	Parse coordinate coordinates .
7443	Print out information about chromabands .
7444	Create a panel .
7445	View for a panel .
7446	Displays a panel .
7447	Edit a gene .
7448	Save delivery report to case .
7449	Return a dictionary of ho terms matching the given query .
7450	List users whitelist .
7451	Build a phenotype object from the adapter .
7452	Retrieve a gene
7453	Convert a query to a list of JSON objects .
7454	Show the institute .
7455	Show transcripts .
7456	Return the events for a given month .
7457	Parse variants .
7458	Get variants of STRs .
7459	Generate a variant for a variant .
7460	Add a variant to an SV variant .
7461	Parse a variant into a variant
7462	Return the export header for variants .
7463	Get variant information
7464	Get predictions from a list of genes .
7465	Generate a variant case .
7466	Find the bai file for a bai file .
7467	Retrieve observations for a particular variant
7468	Parse a gene .
7469	Convert a transcript object into a string .
7470	Return the end position of a variant .
7471	Returns the frequency of the variant
7472	Add clins to clins object
7473	Return the link to the database for a variant
7474	Return the link to the cosmic_ids .
7475	Return the beacon link to the given variant object
7476	Return the URL of the URL for the variant .
7477	Return a human - readable representation of the spidex .
7478	Get the expected inheritance of a variant
7479	Return the callers for a variant
7480	Return a list of cancer variants .
7481	Export a CLAR variable into a dictionary .
7482	Returns a dict with the clinvar submission for a variant .
7483	Returns a dictionary containing the ACMG data for a variant .
7484	Post a variant to a variant .
7485	Translate the evaluation into an ACMG object .
7486	Upload gene symbols from a file .
7487	Generate a xlsx document for verified variants .
7488	Export all genes
7489	Parse a clinvar session data into a dictionary .
7490	Parse the case info
7491	List all genes .
7492	Build a ped .
7493	Scrape variants .
7494	Get a specific case .
7495	Show scala view collections .
7496	Create an institute .
7497	Update institute institute .
7498	Get file handle .
7499	calculate net net
7500	Get the next and previous and previous values
7501	Ensure that the year is valid .
7502	returns the day of the week
7503	Parse case data .
7504	Add ped information .
7505	Parse the individual into a dict
7506	Parse individual samples .
7507	Parse a config .
7508	Parse a ped file .
7509	Build the evaluation object for a variant .
7510	Generate mitochondrial variants report .
7511	Return True if pvs is a pathogenic term .
7512	Determine if the user is likely to be a likely pathogenic term .
7513	Determine if two terms are likely Benign
7514	Return a prediction of the acmg terms .
7515	Add gene panels to the variant object
7516	Fetch variants from the case .
7517	Get all variants in the sanger database .
7518	Retrieve a single variant .
7519	Get gene variant variants
7520	Return a list of verified events .
7521	Returns the causalatives of the institute .
7522	Check all causal variants of a case .
7523	Generator for all causal variants of a variant
7524	Delete variants for a case .
7525	Collect variants of a variant
7526	Gets all variants that are evaluated in a case .
7527	Retrieve a region of a case .
7528	Retrieve variants for a given sample .
7529	Connect to a MongoDB server .
7530	Return a list of submission objects from the variant form .
7531	Generate the header for the clinvar submission .
7532	Takes a list of submission objects and returns a list of CSV lines
7533	Load transcripts from the database
7534	Create a gene panel .
7535	Build an Exon .
7536	Delete gene panel .
7537	Delete all indexes
7538	Delete a user from database .
7539	Delete genes collection .
7540	Remove exons from a build
7541	Delete a case .
7542	Show individuals .
7543	Parse MatchMaker matches .
7544	Show cases .
7545	Load a user from the store .
7546	View function .
7547	Build an institute object .
7548	Delete an event .
7549	Create an event .
7550	Fetches events for a specific case .
7551	Get events for a user .
7552	Add a phenotype to the institute .
7553	Remove a phenotype term from an institute .
7554	Create a comment for a case .
7555	Parse individual genotypes .
7556	Check if a chromosome is valid .
7557	List HPO terms .
7558	Export transcripts .
7559	Load all exons
7560	Get a region of a case .
7561	Return all events for a given month .
7562	Return a queryset of inactive events .
7563	Parse requirements file
7564	Return the gene for the given panel .
7565	Update a panel panel .
7566	Create a new gene panel
7567	Export panel object from store .
7568	Return archive information .
7569	Migrate the case to an archive .
7570	Migrate a scenario to an archive
7571	Scrape a case .
7572	Load HGNC gene objects .
7573	Run HPO .
7574	Create a Flask application .
7575	Initialize extensions .
7576	Register blueprints .
7577	Configure coverage .
7578	List aliases .
7579	Build a panel object
7580	Export verified variants .
7581	Export variants .
7582	Returns a VCF entry .
7583	Serve MongoDB server .
7584	Generates an MD5 key for a list of strings .
7585	Initialize the application .
7586	Initialize the database .
7587	Indexes indexes .
7588	Setup the Scout database .
7589	Run Scout setup .
7590	Set up the database .
7591	Show institute information .
7592	Return a list of genetic models .
7593	Show gene panels .
7594	Add institute to database
7595	Update the institute data for the given institute .
7596	Return institute object
7597	Return True if the date is a valid date
7598	Parse a date into a datetime object .
7599	Get gene IDs .
7600	Parse rank score entry .
7601	Create a new user .
7602	Check connection to MongoDB .
7603	Initialize scout .
7604	Load a delivery report .
7605	Add a user to the database .
7606	Implements pileup .
7607	Load exons from database .
7608	Update charges for a case .
7609	Add links to a gene .
7610	List all genes .
7611	Parse a single line
7612	Parse HGNC genes .
7613	Retrieves the open clinvar submission for a user and institute .
7614	Updates the clinvar submission for the given clinvar_id .
7615	Returns the clinvar subm_id for the given submission_id .
7616	Add variants and case data to clinvar submission .
7617	Close a clinvar submission .
7618	Retrieve all clinvar submissions for a user .
7619	Delete a clinvar object
7620	Convert a case to a dict of local variables .
7621	Parse hpo output .
7622	Display all genes .
7623	Show a single gene .
7624	List genes .
7625	Check if panels exist
7626	Load clinical SNV variants for a case .
7627	Load a scout file
7628	Decorator used to render a function into a template .
7629	Returns the institute and case for the institute .
7630	Return a list of institute institutes .
7631	Get the HGNC ID for a given gene .
7632	Update a panel .
7633	Load disease terms .
7634	Load the disease terms from the omim map .
7635	Parse the variant frequencies
7636	Parse the frequency .
7637	Parse variant frequencies
7638	Show users .
7639	Build a HGNC gene
7640	Build gene panel object
7641	Load omim panel .
7642	Compare existing MIM panels
7643	Update the version of the MIM file
7644	Add a gene panel to the database .
7645	Retrieve a panel object .
7646	Delete a panel
7647	Fetch a gene panel by ID .
7648	Get gene panels .
7649	Build gene_to_panel_map from a case object
7650	Update a panel .
7651	Add a pending panel to the panel .
7652	Apply all pending changes to the panel
7653	Return a set of clinical symbols for a case .
7654	List cases .
7655	Send a record .
7656	Load indexes .
7657	Update indexes .
7658	Drop all indexes
7659	Build a MongoDB variant query .
7660	Build query parameters for a case .
7661	Add clinsig query
7662	Add coordinates to the mongo query
7663	Add gene and gene filters
7664	Drops the database .
7665	Parse a panel file .
7666	Build a clnsig object from the info dict
7667	Load a single gene bulk .
7668	Load transcript from database .
7669	Insert multiple exon objects into the database .
7670	Retrieve a gene by identifier .
7671	Get HGNC ID for a given symbol .
7672	Get all genes with the given symbol
7673	Fetch all genes
7674	Return the number of genes in a given build
7675	Drop all genes in the database .
7676	Drop all transcripts .
7677	Drop the exons collection .
7678	Get all transcripts for a given build .
7679	Given a build symbol return a Gene object
7680	Get gene by symbol
7681	Get all genes by alias .
7682	Get all ensembl genes
7683	Get the HGNC symbol for a given alias .
7684	Add HGNC id to the result .
7685	Build a dictionary of coding intervals
7686	Update the omim gene panel .
7687	List all cases for a institute .
7688	Return the details of a case .
7689	View for matching matches .
7690	Send matches to MME .
7691	Delete a matchmaker from MME .
7692	Return HTML for a case report .
7693	Render a case report .
7694	Display a case diagnostic .
7695	Show phenotype items .
7696	Handles phenotypes actions .
7697	View for events .
7698	Show the status of a case .
7699	Assign a case .
7700	List HPO terms .
7701	Mark a variant as a validator .
7702	Mark a variant as solved .
7703	Send a delivery report .
7704	Share a specific case .
7705	Re - run a simulation .
7706	Show the research .
7707	Sends an attachment to a VCF .
7708	Get a multiqc report .
7709	Search for cases .
7710	Generate the report content .
7711	Generate coverage report .
7712	Get all clinvar submissions for a user .
7713	Export MT files to Excel .
7714	Update the synopsis .
7715	Get diseases from HPO terms .
7716	Convert a VCF to a cable closure .
7717	Return the case information for a case .
7718	Return a list of unevaluated variants in the given institute .
7719	Add a MME .
7720	Send request to MME
7721	Returns a list of matches for the MME .
7722	Local MatchMaker node .
7723	Update gene information .
7724	Parse the callers
7725	Build a transcript
7726	Load institute into database .
7727	Parse the CADD entry for a variant .
7728	Create a case .
7729	Updates a variant
7730	Updates the variant rank .
7731	Update the variants of a variant
7732	Update compound objects
7733	Update compound variants .
7734	Update compounds on a case .
7735	Load a variant into the database .
7736	Insert a variant into the database .
7737	Load variants into the database .
7738	Create a case for a case .
7739	Share a customer with a collaborator .
7740	diagnose a case .
7741	Marks the checked status of a case .
7742	Called when a variant is verified
7743	Get all sanger orders ordered by user .
7744	Validate a variant .
7745	Mark a variant as solved .
7746	Update dismiss variant event .
7747	Set ACMG for a variant .
7748	Parse the ids
7749	Parses simple id and alt values
7750	Generate an MD5 key for a document .
7751	Convert HNC IDs to HGNC IDs .
7752	Return a variantid from a variant_obj .
7753	Return the number of cases in the institute .
7754	Get a list of dynamic genes .
7755	Fetch a case .
7756	Delete a case .
7757	Add a case to the database .
7758	Replace a case .
7759	Update the caseid of a case .
7760	Builds the evaluation term for a variant .
7761	Get evaluations for a variant
7762	Parse the transcripts
7763	Parse ensembl gene query results .
7764	Parse ensembl_transl_transl_query output
7765	Parse ensembl line
7766	Parse ensembl gene lines .
7767	Parse ensembl exons .
7768	Parse exon request .
7769	Initialize logging .
7770	Parse an omim line
7771	Parse MIM output .
7772	Extract phenotypes from a genemap file
7773	Command - line tool .
7774	Convert string to float
7775	Returns a calendar view for the month .
7776	Formats a day
7777	Return the month name .
7778	Popover information .
7779	Return panel information .
7780	Parse a single gene info
7781	Parse gene_lines .
7782	Parse a gene panel file .
7783	Show diseases .
7784	Drop HPO terms .
7785	List all users .
7786	Parse the conservations .
7787	Parse the conservation score .
7788	Get general case information .
7789	Return a list of cases grouped by status .
7790	Returns a HttpResponse with the given context .
7791	Get the year and month from the querystring
7792	Check for cancelled events for the given date
7793	Fetch a hpo term
7794	Search HPO terms .
7795	Get a disease term .
7796	Fetch all disease terms for a given gene .
7797	Load a disease term into the database .
7798	Generate a list of gene IDs .
7799	Read an HDF5 file .
7800	Set up the frequency axis
7801	Setup time axis
7802	Read filterbank .
7803	Compute the location of the segment .
7804	Blank DC bin .
7805	Print header information .
7806	Calculate extent
7807	Plot the waterfall .
7808	Plot the time series data .
7809	Write the signaturebank to file .
7810	Calibration of the bandpass band .
7811	Converts data to a coarse - grayscale .
7812	Apply Mueller algorithm .
7813	Calibration of the waterfall data
7814	Convert a string to a Fortran string .
7815	This function takes a string and returns a list of filenames
7816	Find the closest value in xarr
7817	Rebin the input data .
7818	Unpack data into numpy .
7819	Calculate the difference between a waterfall .
7820	Plot the Stokes diode Diode Diode Diagram
7821	Generate the calibrated diode dietrate noise data
7822	Plots the gain offsets for the given differential flux .
7823	Open a file or directory
7824	Calculate selection range .
7825	Calculate the size of the audio file .
7826	Calculate the selection shape .
7827	Calculate start and end indices
7828	Calculate the set of frequencies
7829	Populate the timestamps
7830	Populate the frequency array
7831	Calculate the number of coarse channelization .
7832	Calculate the number of blobs
7833	Returns True if the chunk is heavy .
7834	Read data from the file .
7835	Read all data from the file
7836	Read a single row
7837	Read the data
7838	Update the header .
7839	Print information about the file .
7840	Writes the container to filenames .
7841	Writes the data to an HDF5 file .
7842	Write the data to an HDF5 file .
7843	Calculate the dimensions of a chunk .
7844	Detect the chunk dimensions .
7845	Grab the data for plotting
7846	Entry point for the command line tool .
7847	Read the first header .
7848	Find the number of data blocks in the file .
7849	Print the data block
7850	Plots a histogram
7851	Generate filter bank header .
7852	Find the size of the header
7853	Command line tool .
7854	Command line tool for creating HDF5 files .
7855	Folds the data for a given time series
7856	Integrates the waterfall
7857	Calculate fluxes .
7858	Calculate the center frequency
7859	Calculate the F ratio between two signals .
7860	Calculate the diode spectrum of a diode wavefall .
7861	Calculate the Tsys spectrum
7862	Calibrate fluxes for a given diode source
7863	Return the length of the header .
7864	Check if file is a filterbank .
7865	Add a new header to a file .
7866	Generate a signature string from a file .
7867	convert angle to sigproc angle
7868	Calculate the number of samples in a file .
7869	Save this frame as a dictionary .
7870	Create a sub - command parser .
7871	Create a parser for zonefile
7872	Remove comments .
7873	Add default name .
7874	Parse a single line
7875	Parse a list of lines into a dictionary .
7876	Parse a zone file .
7877	Quote a field .
7878	Parse a schema string .
7879	Convert a list of classes to a Python package .
7880	Generate the source code for a class .
7881	Decorator for auto_store .
7882	Convert a record to a dictionary .
7883	Load a record from a dictionary .
7884	Deserialize a JSON object from a string .
7885	Add a schema to the database .
7886	Return the schema associated with the given name .
7887	Return a dict representation of the field .
7888	Adds a mixin class to a class .
7889	Create a new record from a metacls .
7890	Generate a schema dictionary for a record .
7891	Get the root schema for a record .
7892	A generator for mr reader .
7893	Writes output to output_stream .
7894	Push an OrderedDict onto an OrderedDict .
7895	Perform a search query .
7896	Returns a filtered search result .
7897	Return a list of entities with the specified attributes .
7898	Returns an Entity object from the given href .
7899	Return the appropriate quote for the given q .
7900	Escapes a filter to a string .
7901	Returns the elementary rotation matrix
7902	Construct the covariance matrix
7903	Calculate the mean error of the vradiation .
7904	calculate standard error
7905	Calculate magnitude error
7906	Calculate magnitude error
7907	Make the plot
7908	Return the average number of transitions .
7909	Euclidean distance between two points .
7910	Transform coordinates to cartesian coordinates
7911	Transform spherical coordinates to spherical coordinates .
7912	Transform a covariance matrix .
7913	Return the error scaling factor .
7914	Make a matplotlib plot
7915	Make a matplotlib plot
7916	Evaluates the given functions .
7917	Decorator used to handle exceptions .
7918	Unquoted value .
7919	Apply a function to each element in the collection .
7920	Return a new QuerySet with only the elements that match the given function .
7921	Return a new Collection with the given function .
7922	Returns a new Collection with the elements of this collection .
7923	Returns a new Collection with the elements that do not occur .
7924	Zip two collections .
7925	Find a matching node .
7926	Return the path for serach .
7927	Iterate over groups .
7928	Parse regdescr string .
7929	Convert event tuple to string .
7930	Calculate a list of runs per register .
7931	Print the results to file .
7932	Write summary statistics to file .
7933	Report the state of the problem .
7934	Clean code .
7935	Round x to base .
7936	Split a list of indices into blocks .
7937	Update cache information .
7938	Calculate cycles per cycle
7939	Run the analysis .
7940	Run IACA analysis .
7941	Strip lines from a list of lines .
7942	Strip unreferenced labels .
7943	Select the best block .
7944	Prompts for store pointer increment
7945	Get userselect block from assembly file .
7946	Add markers to the assembly lines .
7947	Calculate assembly analysis .
7948	Entry point for the command line .
7949	Simulate the model .
7950	Generate an iterable of integers .
7951	Get the last modified datetime .
7952	Validate arguments .
7953	Main entry point .
7954	Entry point for merging pickle files .
7955	Create a symbolic symbol .
7956	Transform multidimensional declaration into 1d array .
7957	Transform a multidim into an array reference .
7958	Finds all the types of a given node .
7959	Force a function to return an iterable .
7960	Check that all datatypes are allowed .
7961	Set a constant .
7962	Substitute constant expressions .
7963	Returns a dictionary containing the variables sizes of the variables .
7964	Calculate relative offset .
7965	Remove duplicate destinations .
7966	Return the iteration length .
7967	Get the current loop stack
7968	Return a list of free symbols .
7969	Compile sympy accesses .
7970	Computes the relative distances between each variable .
7971	Convert global iterator to indices .
7972	Returns an iterator for the global iterator .
7973	Convert indices into a global iterator .
7974	Returns an iterator over the global variables .
7975	Print kernel information .
7976	Print the variables information .
7977	Print the constants information .
7978	Print the kernel code .
7979	Convert a math expression to a symbol .
7980	Get the indices of the ast .
7981	Get the base name of an array .
7982	Returns the index type of the loop .
7983	Build constant declarations
7984	Return array definitions .
7985	Return a list of nodes for loop .
7986	Helper function to build the array declaration
7987	Find inner loop_nest .
7988	Build the initial initialization for the kernel .
7989	Build a dummy call statement .
7990	Build a kernel function declaration .
7991	Build scalar declarations from kernel AST .
7992	Get the kernel definitions .
7993	Build a kernel call .
7994	Get the main code .
7995	Run IAC analysis .
7996	Generate the executable .
7997	Convert a string to sympy .
7998	Generate a unique identifier .
7999	Return the last modified datetime .
8000	Return a CacheSimulator instance .
8001	Calculate the bandwidth for the benchmark .
8002	Get compiler and flags .
8003	Parse a perfctr event string .
8004	Ensures that the range is contained within range .
8005	Return the header path
8006	align an iteration with CL boundary
8007	Returns the load count of all load levels
8008	Return the number of hits in the cache .
8009	Returns the total number of misses
8010	Returns the number of stores in the machine hierarchy .
8011	Return the number of evicts in the machine .
8012	Get information about the machine .
8013	Context manager to temporarily restore environment variable .
8014	Configure the argument group for the given arggroup .
8015	Print the results .
8016	Parse the markdown description .
8017	Attempt to retry the future .
8018	Builds a single purchase item .
8019	Record a purchase .
8020	Get the course data for a course
8021	Get the course content for the given course run .
8022	Update the unenrolled list of unenrolled users .
8023	Send a course refund notification .
8024	Sends an offer assignment notification .
8025	Get logger configuration .
8026	Retry the order of a request .
8027	Fulfill an order .
8028	Returns a SailthruClient .
8029	Get a key from the cache .
8030	Set the cache key .
8031	Get a configuration variable from the environment variable .
8032	Get the filename of the overrides .
8033	Get the value sorted by version .
8034	Get the version of EnergyPlus .
8035	Return a dictionary of file references .
8036	Populate dev from json data
8037	Returns a list of all external files
8038	Set default values for all tables .
8039	Prepare for extensible extensions .
8040	Get the extended name of the field .
8041	Return a dictionary mapping external references to external files .
8042	Get the value of a given column .
8043	Update value in database .
8044	Update record .
8045	Set default values .
8046	Add fields to this record .
8047	Remove an item from the list
8048	Insert value at index
8049	delete the record
8050	Register a record hook .
8051	Register a hook
8052	Create a re . regex .
8053	Return the duration between the given time .
8054	Serialize the event into a dictionary .
8055	Make a HTTP request to the server .
8056	Return a list of available services .
8057	Create a directory .
8058	Configure service .
8059	Register a CA .
8060	Set the recording state .
8061	Update the status of an event .
8062	Update agent state .
8063	Get the configuration file .
8064	Update the configuration .
8065	Check server authentication .
8066	Initialize logging .
8067	Show home page .
8068	Serve an image
8069	Run all processes .
8070	Parse anicalicalicalicalicalical calendar .
8071	Get all scheduled events
8072	Control loop .
8073	Control loop .
8074	Make an error response
8075	Make a response with a list of data .
8076	Get internal state .
8077	List upcoming events .
8078	Get an event .
8079	Delete a recorded event .
8080	Modify an event .
8081	Parse configuration parameters .
8082	Upload an event to ingest .
8083	Start capture .
8084	Render the HTML to a fragment .
8085	List of resources .
8086	Convert the resource to a dictionary .
8087	Create a fragment from a dict .
8088	Add content to self . content
8089	Add a new resource .
8090	Add a URL to the resource .
8091	Initialize the js library .
8092	Returns a list of all resources in the list
8093	Converts a resource to HTML .
8094	Handle GET requests .
8095	Render a standalone HTML response .
8096	Render the fragment to HTML .
8097	calculate p values
8098	Convert a list of values to one dimension .
8099	Given an error table and an error table return a tuple of values .
8100	Compute posterior chromatogram hypotheses .
8101	Calculate the final error table for a DataFrame .
8102	Extract a summary table from a pandas dataframe
8103	Compute error statistics .
8104	Calculate the cutoff .
8105	Run XGBoost on an input file .
8106	Infer the ipf .
8107	Infer peptide from input file .
8108	Infer proteins from a file .
8109	Perform subsample on input file .
8110	Reduce input files .
8111	Backpropagate OWR objects .
8112	Filter sqmass files
8113	Get a group by ID
8114	Create a group .
8115	Delete a group
8116	Get the members of a group
8117	Update a group s members .
8118	Returns the effective member count .
8119	Check if a group is effective .
8120	Modify Sphinx configuration .
8121	Create a new HDF5 dataset .
8122	Decrypt a file .
8123	Get stdin .
8124	Get the stdout of the command .
8125	Get the stdin from the stderr .
8126	Get the debug output .
8127	Yields stdout and closes it .
8128	Yield stdout and stderr .
8129	Yield stdin and stderr .
8130	Context manager for debugging .
8131	Delete account .
8132	List container contents
8133	Decorator to handle stdout .
8134	Decorator for writing to stdout .
8135	Log an error message .
8136	Print help message .
8137	Print the usage information .
8138	Print version information .
8139	Perform an HTTP request
8140	Post a new account .
8141	Delete the account .
8142	Upload a container .
8143	Emulate a HEAD request .
8144	Get an object .
8145	Puts an object .
8146	Post an object .
8147	Resolve an option from the given options .
8148	Returns a copy of the current context
8149	Write headers to file .
8150	Display information about a client .
8151	Generate a temporary URL .
8152	Quote a value as a string .
8153	List containers in a container .
8154	Get a client .
8155	Encrypt data using AES - 256 encryption .
8156	Decrypt an encrypted stream using the given key .
8157	Upload a directory structure .
8158	Put an account .
8159	Upload a container
8160	Generate the manifest .
8161	Create a container
8162	Get a temp url .
8163	Show information about a Trans - Id .
8164	Print help for the given command .
8165	Return True if buffer is empty False otherwise .
8166	Encrypt a key .
8167	Get the status of a repository .
8168	Get a pull request .
8169	Get pull requests .
8170	Set the published titles .
8171	Return a list of slider items .
8172	Render a hero slider .
8173	Acquire a read thread .
8174	Release the pool .
8175	Acquire the writer lock .
8176	Add a task to the registry .
8177	Remove a task from the registry .
8178	Returns the task with the given task_id .
8179	Return all the tasks in the queue .
8180	Convert the object to a dictionary .
8181	Create TaskConfig from dict .
8182	Execute a perceval job .
8183	Initialize the archive manager .
8184	Execute the job
8185	Execute the backend
8186	Creates an index
8187	Create a mapping from the index .
8188	Wrapper for json encoder
8189	Write a generator to a writer .
8190	Add a task to the scheduler .
8191	Cancels a task .
8192	Get all items in the cache .
8193	Validate the arguments
8194	Parse archive arguments .
8195	Perform a job and publish it to the queue .
8196	Schedule a job .
8197	Cancel a job task .
8198	Thread listener .
8199	Listen for jobs .
8200	Schedule the scheduler .
8201	Schedule a task .
8202	Cancel a scheduled task .
8203	Handle a successful job .
8204	Log a failed job .
8205	Build the arguments for the job .
8206	Read a secret
8207	Register view .
8208	Decorator for registering views .
8209	Redirect to the request .
8210	Get the view name .
8211	Get the version number from VERSION .
8212	Resolve a key from the database .
8213	Resolve the given URL scheme .
8214	Parse a path into a database schema .
8215	Parse a database URL .
8216	Parse a database URL .
8217	Create a new user .
8218	List all users .
8219	Create a new password change .
8220	Add the URL to the view .
8221	Parse a boolean value .
8222	Parse a string into an integer .
8223	Get parser class .
8224	Get settings from environment variables .
8225	Create a ModelDict from a model .
8226	Encode a string .
8227	Create a new field
8228	Create a validator from a data structure .
8229	Calculates the cartesian product of a list of parameters .
8230	Return a list of unique points .
8231	Modify logging arguments .
8232	Decorator for setting logging configuration .
8233	Create dirs for log config file .
8234	Return a list of all strings
8235	Rename a log file .
8236	Set the logger .
8237	Extract replacements from a trajectory .
8238	Display the progress bar .
8239	Checks if the argument parser is valid and replaces any string with the given name .
8240	Convert a parser to a StringIO object .
8241	Find the options in the given parser .
8242	Takes a dictionary and returns a dictionary with the values found in the dictionary
8243	Check if log configuration is set .
8244	Parse the log file .
8245	Convert a dictionary to a dictionary .
8246	Create logging handlers and tools .
8247	Finalize all tools .
8248	Start stdout .
8249	Write buffer to stream .
8250	Compares two results .
8251	Compares two parameters .
8252	Decorator to mark a function as run .
8253	Mark a function as deprecated .
8254	Decorator for setting kwargs .
8255	Decorator to remove deprecated keyword arguments .
8256	Decorator for retry functions
8257	Decorator to set prefix names .
8258	Add parameters to the trapezoid .
8259	Run the network
8260	Euler scheme
8261	Add parameters to the simulation .
8262	Compute the difference between two Lorenz distributions
8263	Create a storage service .
8264	Create a storage object .
8265	Add parameters to the simulation .
8266	Difference between two values
8267	Compact an hdf5 file .
8268	Return True if all parameters in a group in a group .
8269	Build the eqs for the model .
8270	Pre - build model .
8271	Build the model .
8272	Build and return the model
8273	Initialize pre - build .
8274	Initialize the graph .
8275	Add parameters to the simulation .
8276	Compute the fano factor for each spike .
8277	Compute the mean fano factor .
8278	Run the analysis .
8279	Add monitors to the network .
8280	Add monitors to the network .
8281	Make the path to the output folder .
8282	Plots the result .
8283	Print the graph and VRasters
8284	Analyzes the sedimentation analysis .
8285	get batch number
8286	Explore batch .
8287	The node vars for this node .
8288	Return the node function .
8289	Rename the field .
8290	Sets the details .
8291	Convert a node to a message .
8292	Remove a sub - tree from a node .
8293	Delete a node .
8294	Removes a node or leaf from the tree .
8295	Remove all nodes under the given branch .
8296	Translate a shortcut name into a python object .
8297	Add a prefix to the split list .
8298	Determine the type of a start node .
8299	Create a generic generic generic generic entry .
8300	Adds a new node to the tree
8301	Create a link under the given action .
8302	Check the name of the split_names .
8303	Creates a new instance if it does not exist .
8304	Creates or creates an instance of the given type .
8305	Set details on the root node .
8306	Iterate over nodes in the graph .
8307	Create an iterator for the given node .
8308	Perform a breadth - first search .
8309	Perform a fast search .
8310	Searches for a node by key
8311	Helper for backwards search .
8312	Children of this node .
8313	Add a group from the storage .
8314	Add a leaf from storage .
8315	Returns a list of directory names .
8316	Get debugging information .
8317	Retrieves the parent object .
8318	Add a group .
8319	Add a link .
8320	Remove a link .
8321	Add a leaf node .
8322	Remove the node from this node .
8323	Remove a child from this group .
8324	Return True if the given item contains an object .
8325	Return the value of the file .
8326	Get children .
8327	Get the groups
8328	Get the leaves .
8329	Get the list of links .
8330	Store a child in the group .
8331	Store the state of the trajectory .
8332	Load a child by name .
8333	Load data from the group .
8334	Add a parameter group .
8335	Register a parameter .
8336	Register a result group .
8337	Register a result group .
8338	Add a derived parameter group .
8339	Add a derived parameter .
8340	Register a configuration group .
8341	Register a configuration group .
8342	Evaluate the maximum fitness .
8343	Add configuration variables to the traj .
8344	Make a git commit
8345	Flatten a nested dictionary .
8346	Recursively nest a dictionary .
8347	Display a progress bar .
8348	Get the arguments of a function .
8349	Return a dict with kwargs from kwargs .
8350	Formats a timestamp
8351	Convert a TCP port to a TCP port .
8352	Ensure that the given path exists .
8353	Reset timer .
8354	Get the remaining remaining time .
8355	Return a copy of self .
8356	Remove a key from the annotations dictionary .
8357	Convert annotation to string
8358	Add a result to the result .
8359	Add a new result to the result .
8360	Create a shared data object .
8361	Store the request data .
8362	Get the data node .
8363	Return whether or not the shared result is supported .
8364	Create shared data .
8365	Safely manipulates the data in a trajectory .
8366	Re - acquire a lock .
8367	Send shutdown signal .
8368	Close the socket .
8369	Start the client .
8370	Send a REP request to the server .
8371	Acquire lock
8372	Listen for incoming requests .
8373	Put data to server
8374	Detect a fork .
8375	Handle data .
8376	Main loop .
8377	Receive data from the queue .
8378	Receive data from the server .
8379	Stores the given arguments .
8380	Store a message in the context .
8381	Store a list of trajectory references .
8382	Decorator to parse a configuration file .
8383	Collect a section of the parser .
8384	Collect configuration parameters .
8385	Get the kwargs from the config file .
8386	Add parameters to a traj .
8387	Convert a rule number to a numpy array .
8388	Make an initial state
8389	Plots a pattern in a file .
8390	Calculate cellular automaton pattern .
8391	Simulate all patterns .
8392	Sign updates .
8393	Get the overview group .
8394	Load data from the server
8395	Store the given message .
8396	Internal helper for handling Svc_load
8397	Check hdf5 properties .
8398	Store items in a serie
8399	Close the hdf5 file .
8400	Extracts the file information .
8401	Backup the given trajectory .
8402	Read a row from a row .
8403	Prepare and update the metadata for a traj .
8404	Load meta data
8405	Load a subtree from a branch .
8406	Raise an exception if the given version is not changed
8407	Fills the run table for the given traj .
8408	Load the explorations .
8409	Store the explorations table .
8410	Prepare the overview tables for the SRVC service .
8411	Stores the given Trajectory .
8412	Store a branch in the tree .
8413	Create a leaf node .
8414	Helper function for tree_load_load_node .
8415	Store the nodes in the tree .
8416	Helper method to handle all stored parameter values .
8417	Get or create a table from the where node .
8418	Get a node by name .
8419	Set all attributes to the ptitem .
8420	Reconstruct the native type of data item .
8421	Add or modify a row to the table .
8422	Recursively insert values into a row .
8423	Extract data from an HDF5 file .
8424	Truncate a string to max_length
8425	Create a new HDF5 group .
8426	Creates or returns a list of groups for the given key .
8427	Store attributes on an item .
8428	Load annotations from node .
8429	Store a group of traj groups .
8430	Adds load_data to the graph if necessary .
8431	Load metadata from a traj5 file .
8432	Extract missing flags .
8433	Add meta information to the table .
8434	Add information about the summary table .
8435	Store data in a store .
8436	Store a parameter or store it .
8437	Writes data to HDF5 .
8438	Write a shared table .
8439	Write dictionary to HDF5 group .
8440	Writes a dataframe to a group
8441	Writes data to another .
8442	Write data to HDF5 .
8443	Delete a link .
8444	Helper method for _delete_parameter .
8445	Write data into a pytable .
8446	Create a pytables table from data
8447	Helper for _all_table_col
8448	Return the largest length of a list of strings .
8449	Load data into a dictionary .
8450	Loads a Pbject table into a dictionary .
8451	Read shared data .
8452	Read a table or group .
8453	Read an HDF5 array .
8454	Load a new Trajectory .
8455	Make a set name .
8456	Set property values .
8457	Add a list of dynamic imports .
8458	Set the run index .
8459	Iterate over runs of the trajectory .
8460	Shrink the trajectory .
8461	Add a new parameter to the trajectory .
8462	Set a parameter .
8463	Lock the experiment .
8464	Get a value from all runs in the run .
8465	Returns True if name_or_id is completed False otherwise .
8466	Remove expanded parameter from disk .
8467	Copy from node to node_out
8468	Explicitly explore a build .
8469	Update the run information .
8470	Add information about a single run .
8471	Lock all parameters .
8472	Lock all derived parameters .
8473	Finalize the run .
8474	Wrapper for _load_data .
8475	Wrapper for f_load .
8476	Store the state of the trajectory .
8477	Create reverse wildcards .
8478	Merge multiple trajectories .
8479	Merge multiple run names into one run .
8480	Rename a full name .
8481	Merge derived parameters from other_trajectory .
8482	Merge links in other_trajectory .
8483	Merge config and environment variables .
8484	Automatically merges the object with the given name .
8485	Merge results from other_trajectory into rename_dict
8486	Migrate trajectory .
8487	Store the trajectory .
8488	Restore default values .
8489	Set the parameter access to the given index .
8490	Make a single run
8491	Return run names .
8492	Get run information .
8493	Find the index of all parameters matching the given name .
8494	Starts a run .
8495	Finalize the run .
8496	Set the start time
8497	Set the finished run .
8498	Wrapper for _construct_instance
8499	Return the parameter dictionary .
8500	Finalize the run .
8501	Get the configuration values .
8502	Return the results dictionary .
8503	Store the items in the trajectory .
8504	Fetch items from disk .
8505	Remove items from the node .
8506	Deletes links from an iterator .
8507	Remove all children from this node .
8508	Deletes items from the trajectory .
8509	Handles pooling management .
8510	Decorator for frozen pools .
8511	Configure pool .
8512	Configure frozen pool .
8513	Processes a single run .
8514	Retrieve frozen SCOOP data .
8515	Wraps a single scoop .
8516	Configure logging .
8517	Configure the niceness .
8518	Wrapper for SIGINT .
8519	Single run function .
8520	Wrap logging handler .
8521	Loads a class from a string .
8522	Create a class by name .
8523	Returns the length of the parameter .
8524	Converts the value to a string .
8525	Determine whether two values are equal .
8526	Return the range .
8527	Explorer the parameter .
8528	Expand the parameter list to explore .
8529	Check that the data is of the same type .
8530	Store the data in a dictionary .
8531	Load the parameter .
8532	Load the parameter .
8533	Compare two parameter values .
8534	Return True if the given data is supported .
8535	Serialize a sparse matrix .
8536	Build a tuple of names for the SPM parameter .
8537	Recursively reconstruct a sparse matrix .
8538	Load the parameter data
8539	Stores the data into a dictionary .
8540	Load data from a dictionary .
8541	Translate key name to value
8542	Return the value as a string .
8543	Convert data to a dictionary .
8544	Set the value of the variable .
8545	Get the value of the result .
8546	Set a single result .
8547	Return True if the item is supported .
8548	Store data into a dictionary .
8549	Load data from a dictionary .
8550	Set a single entry .
8551	Stores the pickle result .
8552	Load data from a dictionary .
8553	Merge all files in folder
8554	Upload a file to the remote session .
8555	Download a file
8556	Create a session .
8557	Merge multiple trajectories .
8558	Start a job .
8559	Multiply the product of two reals .
8560	Run the Euler integration
8561	Preprocess the results of a neuron .
8562	Add parameters to the experiment .
8563	Add an exploration .
8564	Execute pre - run pre - run pre - run
8565	Execute a network run
8566	Extract all sub - runs from the given traj .
8567	Execute all subruns of a network
8568	Add parameters of a traj .
8569	Build the network .
8570	Run the network .
8571	Run the experiment
8572	Generate a filename for a traj .
8573	Gets the next element from the chain .
8574	Merge all files in a folder .
8575	Handle a SIGINT signal .
8576	Read configuration from a file .
8577	Request a PIN code .
8578	Request access tokens from ecobee .
8579	Refresh access token .
8580	Get a list of thermostats .
8581	Writes tokens to file .
8582	Set HVAC mode .
8583	Set the fan min on a thermostat .
8584	Set hold temperature .
8585	Set climate hold .
8586	Delete a vacation .
8587	Resume a program .
8588	Send a message to thermostat .
8589	Set humidity .
8590	Generate a random delay
8591	Generate a timeout .
8592	Generate a timeout for a lease .
8593	Generate a renewal time .
8594	Return self as a dictionary .
8595	Reset attributes .
8596	Return the timeout for the given state and function .
8597	Set the timeout of the state
8598	Send a discover packet .
8599	Select the first offer .
8600	Send a request to the FSM .
8601	Set the timers for the current state .
8602	Handle an incoming packet .
8603	Determine if a NAK is received .
8604	Set initial timeout .
8605	Set BOUND state .
8606	Reset the lease .
8607	Set the state of the current state .
8608	Set the state of the game .
8609	Set the state of an ERROR .
8610	Called when a response is received .
8611	Raise a REQUESTING .
8612	Raise RENEWING .
8613	Raise REBINDING .
8614	Handle an offer .
8615	Handle an ACK request .
8616	Handle incoming packets .
8617	Handle incoming ACK .
8618	Handle a NAK .
8619	Handle incoming ACK .
8620	Handle a NAK .
8621	Called when the lease is renewed .
8622	Set the value of the query .
8623	Add a new expression to the query .
8624	Return a copy of the query with the given name and value .
8625	Get Nagios status
8626	Create output from command line .
8627	Main entry point .
8628	Validate a message .
8629	Read the names and data from a TDMS file .
8630	Add transformation to data .
8631	Convert TDMS to FCS .
8632	Compare two files .
8633	Create a patch
8634	Delete the next patch .
8635	Delete a patch .
8636	Check if file is in the given patch .
8637	Backup a file
8638	Add a file to the repository .
8639	Run the command .
8640	Create the directory if it doesn t exist .
8641	Copy this directory to dest .
8642	Link this file .
8643	Copy this file to dest .
8644	Returns the directory object .
8645	Backup a file
8646	Refresh the top patches .
8647	Unapply a patch .
8648	Unapply the top patch .
8649	Unapply all applied patches .
8650	Apply a patch .
8651	Applies the next patch to the database .
8652	Apply all patches applied to the database .
8653	Read the series file .
8654	Save the series data to disk .
8655	Add a patch .
8656	Insert patches into self . patch
8657	Add patches .
8658	Remove a patch .
8659	Return the patches after a patch .
8660	Returns the patches before the given patch .
8661	Returns a list of patches that match the given patch .
8662	Replace a patch .
8663	Create the directory .
8664	Check that the version file is supported .
8665	Add the argument to the given parser .
8666	Adds the argument to the given parser .
8667	Adds a parser to subparsers .
8668	Set the arguments for this parser .
8669	Add subparsers to the given parser .
8670	Check if file exists in the given patch .
8671	Check if a file is in the next patches .
8672	Revert a file .
8673	Import a patch
8674	Import patches .
8675	Store a way .
8676	Iterate over nodes that are missing
8677	Store a node
8678	Build a route object .
8679	Create route_long_name from relation tags .
8680	Get the agency id .
8681	Process the transport .
8682	Store a relation .
8683	Create dummy data .
8684	Patches a list of agencies .
8685	Create dummy trips for a trip .
8686	Write the data to a zip file .
8687	Write all buffered data to a destination .
8688	Build an agency .
8689	Generate stops .
8690	Generate shapes from nodes .
8691	Return a list of supported versions .
8692	Send an APU to the device .
8693	Authenticate a list of devices .
8694	Register a U2F .
8695	Authenticate a device .
8696	Registers a list of devices .
8697	Convert u to str
8698	Wrap a function with a function .
8699	Wrap the given class and decorator methods .
8700	Return True if filepath matches filepaths .
8701	Get the email address from an email address .
8702	Return the first entry in entry_tree .
8703	Convert markdown text to reST
8704	Start a flawless web server .
8705	Records an exception .
8706	Download a URL to an image
8707	Return an image from a string .
8708	Decorator for validator functions
8709	Check that size is smaller than size .
8710	Ensure that the width is bigger than the specified width .
8711	Ensure that the given height is bigger than the specified height .
8712	Parse the category for the given field .
8713	Parse totals .
8714	Get all the items from the source .
8715	Save an error .
8716	Parse the data from the source
8717	Parses the given item into a dictionary .
8718	Get an instance of the model
8719	Save an item
8720	Download a file
8721	Load the configuration file .
8722	Reads the csv file
8723	Validate the network access settings .
8724	Run a command in the container .
8725	Add files to the container .
8726	Add a file to the sandbox .
8727	Get all enrollments for a given course .
8728	Get all enrollments for a given course
8729	Get list of Enrollments for a section .
8730	Get all enrollments for a section
8731	Returns a list of Enrollments for a given regid .
8732	Enroll a user .
8733	Get all roles in an account .
8734	Get all roles in an Account
8735	Get the effective roles in an account
8736	Get a single role .
8737	Get a role by ID
8738	Get a single course .
8739	Get a course
8740	Get all courses in an account .
8741	Get all courses in an account
8742	Retrieve all published courses in an account .
8743	Get all published courses in an account
8744	Returns all courses for a given regid
8745	Create a new course .
8746	Updates a sis_course_id .
8747	Get an activity by its id .
8748	Returns a list of grades for the given account .
8749	Get statistics for an IIS term .
8750	Get activity by sis_id
8751	Returns a list of Assignments with the given id
8752	Get student summaries for a given course id .
8753	Get the student activity for the given user and sIS user .
8754	Get student messages for a given user .
8755	Get all external tools in an account .
8756	Get all external tools in a course .
8757	Create an external tool .
8758	Updates an external tool .
8759	Delete an external tool .
8760	Check that all required parameters are set .
8761	Get user details .
8762	Returns a list of users for the given course .
8763	Get the users for a given course
8764	Create a user .
8765	Get all logged - in user logs .
8766	Updates a user login .
8767	Extract the next link from the response .
8768	Get URL for a resource
8769	Get the full resource URL for a resource .
8770	Make a GET request
8771	Generic PUT request .
8772	POST a resource
8773	Generic DELETE request .
8774	Get a list of all Canvas admins .
8775	Create an admin .
8776	Create an admin by ID .
8777	Delete an admin .
8778	Delete an admin .
8779	Creates a grading standard for a given course .
8780	Get a section by ID .
8781	Get a section by ID
8782	Get all sections in a given course .
8783	Get all sections in a course
8784	Get all sections in a course .
8785	Get all sections in a course
8786	Create a section .
8787	Updates a section .
8788	Returns a list of Quizzes .
8789	Get a specific account .
8790	Get all sub accounts for a given account .
8791	Updates an account .
8792	Updates the SIS ID for the given account .
8793	Gets the SAS settings for an account .
8794	Updates SSOS settings for an account .
8795	Retrieves a term by its ID
8796	Imports a CSV file .
8797	Import a SIS archive .
8798	Returns the status of a SIS import
8799	Build the zip file .
8800	Returns a list of assignments for the given course .
8801	Updates an existing assignment .
8802	Get a list of report types .
8803	Get reports by given type
8804	Create a report .
8805	Create a new course provisioning report .
8806	Create an SIS export report
8807	Create a new report for unused courses .
8808	Get data from a report
8809	Get report status .
8810	Delete report .
8811	Move all detected images .
8812	Flip detections .
8813	Convert an object into a dictionary .
8814	Get the config .
8815	Return the empty value for the edit .
8816	Parse args and kwargs .
8817	Create metrics .
8818	Setup logging .
8819	Configure the registry .
8820	Create metrics .
8821	Get a metric by name .
8822	Handle homepage .
8823	Handle requests .
8824	Go to Wolfram .
8825	Fix the HTTPMessage .
8826	Make a request to WolframAlpha API .
8827	Return the information about the model .
8828	Iterate through all results in the pod .
8829	Encode data as JSON .
8830	Make a call to the API
8831	Make a GET request
8832	Make a DELETE request
8833	HTTP PUT operation .
8834	Make a POST request
8835	Process a disambiguation query .
8836	Group sentences by number of sentences .
8837	Disambiguate a PDF document .
8838	Disambiguate a query .
8839	Segment a text .
8840	Get language recognition .
8841	Get a specific concept
8842	Fit the model to the ensemble .
8843	Compute the accuracy of the ensemble .
8844	Fit the MDR to the MDR grid .
8845	Perform the fit and predict .
8846	Calculates the accuracy of a set of features .
8847	Fit the CMDR to features .
8848	Transform features .
8849	Compute the score between two targets .
8850	Use MDR to predict predictions .
8851	Wrapper for n - way models .
8852	Plots the MDR grid .
8853	Get the configuration from the hive .
8854	Retrieves a specific configuration value .
8855	Create a vector from an iterable .
8856	Create a vector vector .
8857	Compile the given file .
8858	Evaluate the form of a stream .
8859	Evaluate a string .
8860	Bootstrap repl module .
8861	Run the compiler .
8862	Factory for multi - dispatch functions .
8863	Add a method to a map .
8864	Adds a method to the MultiFunction .
8865	Get a method by key .
8866	Remove method from map .
8867	Remove a method by key .
8868	Check if v is a macro .
8869	Return line and column location .
8870	Decorator for parse_form .
8871	Raise an exception if there is no recur
8872	Recursively checks the tail of a node .
8873	Resolve a bare symbol .
8874	Resolve a form .
8875	Parse an AST .
8876	Whether or not the named variable should be used .
8877	Put a new symbol into the symbol table .
8878	Return a string representation of a list of functions .
8879	Return a string representation of a sequence .
8880	Return a human - readable representation of an object .
8881	Fallback function .
8882	Make sure all nodes are missing .
8883	Compile the form with the given form .
8884	Increment the Python module .
8885	Compile the given forms into a module .
8886	Compile bytecode into module .
8887	Return an EMPTY sequence from an iterable .
8888	Makes a string from a string .
8889	Demunge a string .
8890	Create a fraction .
8891	Create a logging handler .
8892	Create a map from kvs .
8893	Split a collection into n elements .
8894	Decorator to wrap a function with contextual information .
8895	Read a namespace .
8896	Read a collection .
8897	Read a list .
8898	Read a vector .
8899	Read a set .
8900	Read a map literal .
8901	Read a string .
8902	Read a symbol .
8903	Read a keyword .
8904	Read a meta .
8905	Read function definitions .
8906	Read a quoted comment .
8907	Expand a list of strings .
8908	Process a syntax quoted form .
8909	Read syntax quotes .
8910	Read a unquoted form .
8911	Read a DER form .
8912	Read a single character .
8913	Read a regular expression .
8914	Read macros .
8915	Read the next comment .
8916	Read the next token .
8917	Read expressions from a stream .
8918	Read text from a string .
8919	Reads a file .
8920	Update current location .
8921	Pushes a pushback back to the stack .
8922	Return the next token .
8923	Generate base64 bytecode .
8924	Get basecode bytecode from cache data .
8925	Return the path to the cache file .
8926	Hook to ensure that the modules are imported .
8927	Find and return a module spec .
8928	Compile a cached compiled template .
8929	Execute a Sass module .
8930	Execute the given module .
8931	Create symbol .
8932	Complete keyword arguments .
8933	Get or create a Keyword .
8934	Return a keyword object .
8935	Return a tuple of nodes and their dependencies .
8936	Load an attribute .
8937	Decorator to make a simple AST .
8938	Generate an AST from a collection of nodes .
8939	Add environment variables to the ast .
8940	Decorator to wrap a function with the ast .
8941	Decorator for generating a new PyAST .
8942	Check if v is dynamic
8943	Return True if v is a non - symbol .
8944	Convert an expression into an AST .
8945	Convert a function body into a function definition .
8946	Determine if the defsym should be used .
8947	Convert a DO node into a Py AST .
8948	Return the name of a function s .
8949	Convert function arguments into python AST .
8950	Converts a single node into an AST node .
8951	Convert a multi -arity function node to an AST node .
8952	Convert a function node to a PyAR AST .
8953	Convert if node to Py AST .
8954	Convert an If node to an ast .
8955	Convert an Invoke node to a PyInvoke AST .
8956	Convert a QUOTE node into a Python AST .
8957	Convert a recur node to an AST .
8958	Convert a recur to a PyAST node .
8959	Convert a SetBANG node to a Python AST .
8960	Convert a throw node to an AST .
8961	Convert a Try node into a pyast .
8962	Convert local node to ast .
8963	Convert a variable namespace to a python AST .
8964	Convert a variable node to a PyAR AST .
8965	Convert a Hyperopprop node to an ast node .
8966	Converts a non - class node into an ast .
8967	Convert a node into a PyHost form .
8968	Converts a constant value to a Python AST .
8969	Convert a collection literal to an AST .
8970	Generate PyAST node .
8971	Iterate over base modules .
8972	Return an ast . var .
8973	Create a new namespace variable .
8974	Create a set from iterable .
8975	Return a set of members .
8976	Visit an ExceptHandler node .
8977	Return node s value .
8978	Visit a function node .
8979	Visit a While node .
8980	Return a fresh AST node .
8981	Creates a new module .
8982	Return the first element of o .
8983	Return the rest of o .
8984	Get the nth value of a collection .
8985	Return the next nth - seq .
8986	Cons cons .
8987	Convert o to seq .
8988	Concatenate sequences .
8989	Associate an object with the given kvs .
8990	Return the conjugate of a collection .
8991	Return a partial of the wrapped function .
8992	Return the deref of an object .
8993	Compare two values .
8994	Divide x and y .
8995	Sort a collection .
8996	Returns True if k is in coll .
8997	Get a value from a dictionary .
8998	Convert an object into a Lisp object .
8999	Convert an object into a python dictionary .
9000	Return a string representation of an object .
9001	Return a list of arguments .
9002	Decorator for _TrampolineArgs .
9003	Decorator to set attributes on a function .
9004	Wrap a function with meta .
9005	Mark a function as a base function .
9006	Resolve an alias .
9007	Resolve a variable s alias .
9008	Adds generated python to the current namespace .
9009	Bootstrap dynamic variables .
9010	Interns a variable with the given value .
9011	Intern an unbound variable .
9012	Find a variable in namespace_sym .
9013	Find a variable in a namespace .
9014	Find a variable in the context .
9015	Add a default import .
9016	Add an alias .
9017	Return the intern of a symbol .
9018	Replace new_var with new_var .
9019	Return the first entry for the given symbol .
9020	Add an import .
9021	Return the import for a symbol .
9022	Add a reference to the symbol .
9023	Return the reference for a symbol .
9024	Assigns references to otherns .
9025	Set references to other Namespace .
9026	Get a namespace from the cache .
9027	Get a namespace by name .
9028	Return the namespace with the given name .
9029	Remove a namespace .
9030	Returns a completion matcher for completion .
9031	Autocomplete aliases .
9032	Complete imports and aliases .
9033	Return a list of interns for the given value .
9034	Return a list of references to the given value .
9035	Complete a string .
9036	Returns a tuple of the arguments for this expression .
9037	Create a list from a list .
9038	Create a list from a list .
9039	Returns a new representation with the given style .
9040	Decrypt a JWT token .
9041	Encrypt json using JWT .
9042	Delete an item from the cache
9043	Convert to a tuple .
9044	Close the stream .
9045	Parse a fiql string .
9046	Write a ndb model to file .
9047	Decode datetime objects .
9048	Decode a date .
9049	Decodes the given value .
9050	Default JSON encoder .
9051	Validate the release version string
9052	Generate a changelog .
9053	Return strongly connected components .
9054	Starts a topological sort .
9055	Set parent .
9056	Returns the parent expression
9057	Adds an operator to the current fragment
9058	Adds an element to the document .
9059	Create a new expression with the AND operator .
9060	Create an OR expression
9061	Log a function .
9062	Parse the received messages .
9063	Convert a list of tuples to OrderedDict
9064	Get a list of messages that match a value .
9065	Prepare message to send
9066	Flush all messages .
9067	Enable or disable a slide .
9068	Save current template .
9069	Load a leicacam file
9070	Get device information .
9071	Increment a file .
9072	Locate the JSON package .
9073	Parse the package json file .
9074	Handle an API error
9075	Validate the response .
9076	Generate indep vectors from two waves .
9077	Interpolate dep vector
9078	Returns the indices of the indep vector that overlap the waveform .
9079	Verify that two waves are compatible .
9080	Load the systemjs manifest
9081	Retrieve parameters for a module .
9082	Run a trace .
9083	Shorten a URL .
9084	Expand a short URL .
9085	Retrieve statistics for a given short URL .
9086	Retrieve statistics from the database .
9087	Get database statistics .
9088	Print a pypkg command .
9089	Evaluate the given command .
9090	Log a message
9091	Decorator for caching methods .
9092	Split an iterable into chunksize
9093	Split an iterable into chunks .
9094	Flatten an iterable .
9095	Signal handler for SIGINT
9096	Print table .
9097	Make a dummy type .
9098	Convert human readable string to integer .
9099	Authenticate to the server .
9100	Run the trace module .
9101	Lists all dependencies
9102	Add common entries to the plist .
9103	Make a multi - entry entry
9104	Convert comparison operators to words .
9105	Chunk noise data
9106	Parse chunk parameters .
9107	Write a touchstone file .
9108	Return a bounding waveform .
9109	Build the units .
9110	Create a wave operation .
9111	Calculate the running area of the run .
9112	Validate the bounds of a wave .
9113	Calculate the cosine of a wave .
9114	Return the cosine of the wave .
9115	Return the arcsine of a wave .
9116	Calculate the inverse of a wave .
9117	Calculate the average waveform .
9118	Return a new wave .
9119	Derivative of the waveform .
9120	Compute the Fourier Transform .
9121	Compute the Fourier Transform
9122	Compute Fourier transform .
9123	Compute the real Fourier Transform .
9124	Calculate the database DFT
9125	Compute the inverse Fourier transform .
9126	Compute the inverse Fourier Transform
9127	Compute the phase of a waveform .
9128	Compute the real Fourier Transform .
9129	Compute the integral of a waveform .
9130	Compute the group delay
9131	Return the logarithm of a wave .
9132	Return the naverage of a waveform .
9133	Return nintegral waveform .
9134	Return the maximum frequency of a waveform .
9135	Return the minimum frequency of a waveform .
9136	Phase the wave .
9137	Round a wave .
9138	Return the square root of a wave .
9139	Return a new waveform .
9140	Return a complex wave .
9141	Convert a wave to a float .
9142	Convert a wave to an integer .
9143	Calculate the value of a wave .
9144	Finds JSPM_packages .
9145	Get a short description from a string .
9146	Build an expression .
9147	Return the next delimiter .
9148	Return a list of functions in the expression tree .
9149	Pair delimiters .
9150	Parse an expression .
9151	Remove duplicate delimiters .
9152	Split text into groups .
9153	Convert a number to an engineering notation .
9154	Convert a number to a scientific notation .
9155	Convert a number to a string .
9156	Convert number to float
9157	Calculate peng number .
9158	convert meng to peng
9159	Return power .
9160	Calculate power suffix .
9161	Remove extra delims from an expression
9162	Convert a number to a scientific string .
9163	Convert number to scientific notation .
9164	Find sourcemap comment for a file .
9165	Determine if the app needs .
9166	Bundle the application
9167	Trace the given app .
9168	Return True if this dep_tree matches the tree .
9169	Format a hexadecimal string .
9170	Parse a docstring .
9171	Return a list of valid identifiers .
9172	Implementation of add_action .
9173	Split a line into parts .
9174	Checks if the init context is available .
9175	Return help text for builtin functions .
9176	Finds a function in the context
9177	Print a listing of all defined functions .
9178	Check if the argument is a flag .
9179	Process a list of arguments .
9180	Return the value of an argument .
9181	Invoke a single function
9182	Invoke the interpreter .
9183	Invoke the given command line .
9184	Parse a param declaration .
9185	Parse a return statement .
9186	Classify section name .
9187	Classify a line
9188	Join a list of paragraphs .
9189	Return a string representation of the main docstring .
9190	Convert value to a type .
9191	Convert a binary value into a binary type .
9192	Returns the size of the given type .
9193	Returns a string representation of the given value .
9194	Validate type .
9195	Check if the given type is known .
9196	Split a complex type into parts .
9197	Instantiates a complex type .
9198	Gets the type of the given type .
9199	Returns True if the given format is known .
9200	Injects a type into the registry .
9201	Loads a module into the registry .
9202	Determine if the spec is filled
9203	Add a parameter .
9204	Declare a typed return value .
9205	Register a custom return value .
9206	Convert a short - name to a short - name .
9207	Return the type of a parameter .
9208	Return the signature of the parameter .
9209	Format a return value .
9210	Convert a positional argument .
9211	Make sure that the spec is valid .
9212	Convert an argument to a value .
9213	Formats the error message
9214	Return a dictionary representation of the exception .
9215	Convenience function to check and execute all required parameters
9216	Parse list of validators .
9217	Find all instances in a container .
9218	Return a context object for the given module .
9219	Return the help text for a function .
9220	Decorator for registering a parameter .
9221	Decorator to mark a function as returnvalue .
9222	Decorator to add a type to a function .
9223	Decorator to mark the context as annotated .
9224	Annotate the decorated function .
9225	Decorator to mark the decorated function as an annotation .
9226	Returns a short description of a function .
9227	Load all tasks .
9228	Install crontab .
9229	Print tasks .
9230	Uninstall crontab .
9231	Create a new schema .
9232	Load project configs
9233	Save projects config data
9234	Define a singleton
9235	Returns a dictionary of all of the dependent projects .
9236	Decorator for the project handler
9237	Initialize the project .
9238	Wrapper for _setitem .
9239	Set an attribute on this object .
9240	Create an Origin from an iterable .
9241	Set the state to the given value .
9242	Set multiple values to new_values .
9243	Modify a function .
9244	Return a generator that yields n arguments .
9245	Decorator for calling functions .
9246	Apply a function to a pure function .
9247	View the fold .
9248	Return a list of Fold instances .
9249	Apply a function over the given state .
9250	Set the value to the given value .
9251	Apply the setter to the given iterable .
9252	Return the kind of the object .
9253	Main entry point .
9254	Return a new vector with another vector .
9255	Handle input .
9256	Advance robots .
9257	End the game .
9258	Prompt the user for a move .
9259	Play the game .
9260	Makes a move
9261	Winner of the game .
9262	Yields the potential winners of the board .
9263	Add an item to the queue .
9264	Open a spider
9265	Upload a chunk to S3 .
9266	Create a file object and return it .
9267	Get the state of an account .
9268	Get asset state
9269	Get information about a block .
9270	Get the hash of a block .
9271	Get the fee for a particular block index .
9272	Get the contract state .
9273	Get a raw transaction .
9274	Call get_storage method .
9275	Get the value of a transaction .
9276	Invoke a script .
9277	Invoke a function .
9278	Invoke a script .
9279	Send a raw transaction .
9280	Validate an address .
9281	Make a JSON - RPC call .
9282	Return True if s is a hash256 hash256 hash256 .
9283	Determine if a string is a hash160 .
9284	Encode invocation parameters .
9285	Decode the result of a InvocationResult .
9286	Decorator that marks a function as a decorator .
9287	Convert a datetime to a timezone .
9288	Apply this filter to a given datetime .
9289	Render the template .
9290	Render the Barcode .
9291	Calculate the checksum .
9292	Render code .
9293	Connect to the KVS server
9294	Main entrypoint .
9295	Download a file to S3
9296	Upload a file to S3
9297	Recursively down map_files
9298	Print the differences between the specified section .
9299	Parse environment variables .
9300	Set basic authentication parameters .
9301	Set API key .
9302	Get json content from folder
9303	Return a dictionary of schemas .
9304	Get the schema .
9305	Returns a RefResolver .
9306	Validate an object .
9307	Get valid examples .
9308	Retrieves the invalid examples .
9309	Returns the URL for the authorization user .
9310	Process a URL .
9311	Request access token .
9312	Get the user id .
9313	List files in folder
9314	Create a directory .
9315	Add a comment .
9316	Decode an object .
9317	Set the drop target .
9318	Start drag operation
9319	Set default tlw
9320	Inspect an object
9321	Show a shell
9322	Migrate a font
9323	Load a page
9324	Get parameter from tag .
9325	Send the message .
9326	Display a tooltip window
9327	handle mouse down event
9328	Mouse move event handler
9329	handle resize event
9330	handle key press events
9331	Delete selected objects .
9332	Duplicate the selected objects .
9333	Refresh the image .
9334	Calculate the best position of a widget
9335	Retrieves the data for an item
9336	Sets the data for an item
9337	Searches for pydata .
9338	Deletes an item .
9339	Deletes all data map
9340	Clear the table .
9341	set selection
9342	Get string selection
9343	Set client data
9344	Append a string to the frontend .
9345	Return a string representation of an object .
9346	Get a gui object
9347	Duplicate this object .
9348	Add child to sizer .
9349	Set the parent
9350	Tile the background .
9351	Erase background
9352	Draw the paint
9353	Find modules in rootpath .
9354	Return a sorted list of column headers
9355	Reset the view .
9356	Updates the values in the grid
9357	Updates column attrs .
9358	Sorts a column .
9359	Clear the grid
9360	Creates a combo box
9361	Begins edit for a given grid
9362	Ends the edit
9363	Determines if an event is accepted .
9364	Handles starting key events
9365	Decorator to register a form type .
9366	Enable the given value .
9367	Checks if the menu item is enabled .
9368	Enable the top menu .
9369	Check if the top menu is enabled .
9370	Remove an item from the menu .
9371	Submit the form .
9372	Set the tag of an object .
9373	Visit the html table .
9374	Return a documenter that can be used for the given object .
9375	Mangle a signature from a signature
9376	Import a module by its name .
9377	Autolink role .
9378	Display an alert dialog
9379	Display a text entry
9380	Function to select a font
9381	Display a color dialog .
9382	Display a directory dialog .
9383	Display a search dialog .
9384	Sets the item s children .
9385	Set the icon
9386	show the window
9387	Parse a resource file .
9388	Save rsrc to filename
9389	Build a window
9390	Build a GUI component .
9391	Connect to a component .
9392	Convert the name to the correct name .
9393	Set window data
9394	Import autosummary from docstring .
9395	load an object
9396	Inspect the given object
9397	Updates the selected object
9398	Updates the named object
9399	Show context menu
9400	Return the image representation .
9401	Decorator to add an expression filter .
9402	Decorator to add a node filter .
9403	Assert that the given path matches the given path .
9404	Assert that the given path is not present .
9405	Checks if the given path has the given path .
9406	Verifies that the given path has no current path .
9407	Select an option .
9408	Apply the filter to the given value .
9409	Return webdriver object .
9410	Return a string representation of the expression .
9411	Returns True if the given node matches the filters .
9412	Switch to the specified frame .
9413	Accept an alert .
9414	Accept a confirmation box .
9415	Shows a dialog box .
9416	Accept a prompt .
9417	Shows a prompt .
9418	Save the body of the page .
9419	Save a screenshot to disk .
9420	Raise server error .
9421	Return True if the given node matches the given value .
9422	Tells if a field has been checked .
9423	Tells if a field is not checked .
9424	Returns True if the element is unchecked .
9425	Returns True if there is no unchecked field .
9426	Assert that the query is text .
9427	Assert that there is no text .
9428	Assert that the given title matches the given title .
9429	Assert that the given title matches the given title .
9430	Check that the given title has the given title .
9431	Assert that the given title has no title .
9432	Find all matching entities .
9433	Find the first matching object .
9434	Return the inner content of a node .
9435	Return the inner text of a node .
9436	Normalize a URL .
9437	Creates a setter that will call the decorated function .
9438	Synchronization decorator .
9439	Check if an error is caught .
9440	Compares the results of the query .
9441	Checks if there is at least one item in the cache .
9442	Checks if the options dict is None .
9443	Generate a failure message .
9444	Returns True if the given count matches the given count .
9445	Normalize text .
9446	Normalize whitespace .
9447	Escape text .
9448	Returns true if the current session matches the current session .
9449	Resize the window .
9450	Start the WSGI application .
9451	Setter for cgetter .
9452	Set instance method .
9453	Setter for the class method .
9454	Traceback traceback .
9455	Return the source code for an object .
9456	Get the logger for the given instance .
9457	Setter for the logger .
9458	Call the API
9459	List of channels .
9460	List of users .
9461	Create a message .
9462	Translate a message from Slack API
9463	Send a Slack message
9464	Read messages from the channel .
9465	Start the bot
9466	Run Slack client .
9467	Return the difference between two dicts .
9468	Colorize a message .
9469	Set the name of the task .
9470	Run the runner on success .
9471	Prints the stats for the given stats .
9472	Called when a result is skipped .
9473	Convert a prefix to an IPv4 address .
9474	Decorator that checks if value is empty .
9475	Add a model
9476	Get all the values of this object .
9477	Load data from a dictionary .
9478	Convert the object to a dictionary .
9479	Parse configuration values .
9480	Parse the state data .
9481	Translate the configuration into a string
9482	Load all filters
9483	Find the YANG file for a YANG file .
9484	Convert a model into a dictionary .
9485	Get diff between two files
9486	Perform HTTP POST request .
9487	Returns the authorization code URI .
9488	Gets the token for the given code .
9489	Return query params as dict .
9490	Convert a URL to a URL .
9491	Build a URL .
9492	Handle exception logging .
9493	Create a response object .
9494	Make a redirect response .
9495	Make a JSON response .
9496	Get authorization code .
9497	Refresh a refresh token .
9498	Get an access token .
9499	Get authorization code from given URI .
9500	Handle get_token from request data .
9501	Returns the authorization object
9502	Open the I2c device for the specified bus .
9503	Read a single byte from the bus .
9504	Read a number of bytes from the bus .
9505	Read byte data from bus .
9506	Write bytes to the bus .
9507	Write byte data to the bus .
9508	Write the data to the bus .
9509	Get CDN URL .
9510	Creates a copy of the file .
9511	Create a local copy of the repository .
9512	Create a remote copy .
9513	Construct a File from a file info dictionary .
9514	Upload a file to the store .
9515	Create a file from a URL .
9516	Upload a file from a URL .
9517	Return a list of file CDN URLs .
9518	Construct a Group from a dictionary .
9519	Create a new group .
9520	Base operation .
9521	Iterate over the files in this sequence .
9522	Helper function for listing .
9523	Print a progress bar .
9524	Perform an upload request .
9525	Retrieves the home mode .
9526	Retrieve a list of cameras .
9527	Retrieve information about the camera .
9528	Retrieves a snapshot .
9529	Disable a camera .
9530	Retrieve a motion setting for a camera .
9531	Save a camera event .
9532	Update the camera settings .
9533	Return True if the given li is the last li .
9534	Yield list nodes with meta data
9535	Get lvl value from lxml .
9536	Get vMerge element
9537	Get the grid span span .
9538	Return the td at the given index
9539	Returns True if style is False False otherwise .
9540	Check if rpr is bold .
9541	Check if rpr is italics
9542	Return True if rpr is under the given rpr .
9543	Check if p is a title
9544	Yield text data for text run .
9545	Return information about relationship .
9546	Extract data from a zip file .
9547	Returns the ordered list type
9548	Build list .
9549	Builds a tr element .
9550	Build a table element .
9551	Get the content of a t tag .
9552	Remove tags from tree
9553	Find a dataset
9554	Load MNIST .
9555	Load CIFAR data .
9556	Plot images .
9557	Plots layers .
9558	Plot a set of filters .
9559	Generate samples from a list of arrays .
9560	Encodes a string in txt .
9561	Generate batches of classifier batches .
9562	Predict sequences of labels .
9563	Add conv layer weights .
9564	Encodes the input .
9565	Decode the tensor .
9566	Find the output layer .
9567	Return the score of the autoencoder .
9568	Return the predicted output .
9569	Return the predicted probability of x .
9570	Return the predicted logit .
9571	Compute the score of the model .
9572	Create a batch of features .
9573	Generate batches of target classes .
9574	Load the graph .
9575	Generate a random matrix .
9576	Generate a random vector .
9577	Find outputs matching patterns .
9578	Yield parameters matching the given patterns .
9579	Create a graph from kwargs .
9580	Returns a list of variables .
9581	Calculate accuracy
9582	Run theano scan .
9583	Build an Activation .
9584	Generate a reservoir of data .
9585	Set loss .
9586	Iterates over the training data .
9587	Run all monitors .
9588	Generate a hash of all layers .
9589	Build the graph for the given regularizers .
9590	List of inputs .
9591	Return the names of all variables in this model .
9592	Find layer by param .
9593	Compute the feed - forward function .
9594	Return the predicted output .
9595	Compute the score of the model .
9596	Save the model to a file .
9597	Load a model from a file .
9598	Compute the loss .
9599	Build the graph for the given regular expressions .
9600	The output size .
9601	Connect the given inputs and outputs .
9602	Bind the model to the given graph .
9603	Resolve input shapes .
9604	Resolve output shapes .
9605	Log the current layer .
9606	Log the total parameters .
9607	Format a string .
9608	Resolve a layer name from a list of layers .
9609	Find a parameter by its name .
9610	Add a bias .
9611	Convert the model to a dictionary .
9612	Calculate loggabor .
9613	Calculate the loggabor of an image .
9614	Add a tier to the list .
9615	Remove a tier by name .
9616	Get tier by name .
9617	Convert to an EAF .
9618	Add a point to the tier .
9619	Add interval
9620	Remove interval from tier
9621	Remove a point from the tier .
9622	Get intervals .
9623	Get all intervals
9624	Indent elements .
9625	Add an annotation to the tier .
9626	Add a new entry to the controlled vocabulary .
9627	Add a description to the controlled vocabulary .
9628	Add an external reference .
9629	Add a language .
9630	Add a lexicon reference
9631	Add a linguistic type .
9632	Add a media file .
9633	Add a locale .
9634	Adds a secondary file descriptor .
9635	Add a tier to the list .
9636	Cleans up time slots
9637	Remove annotations from the EAF
9638	Generate an annotation id .
9639	Generate a unique id
9640	Return a list of child tiers for the given id
9641	Get the full time interval .
9642	Returns the reference annotation data after the given time .
9643	Returns the reference annotation data before the given time .
9644	Get tier ids for a given ling_type
9645	Merge multiple tiers into the graph .
9646	Remove all annotations from a tier
9647	Remove a description from the controlled vocabulary .
9648	Remove a license
9649	Remove linked files from the document .
9650	Remove properties that match the given key .
9651	Remove a reference annotation from the tier
9652	Remove secondary linked files descriptors .
9653	Remove a tier by id
9654	Remove all tiers from a list of tiers .
9655	Rename a tier .
9656	Shifts annotations by time
9657	Run the algorithm .
9658	Print a debug message to stderr .
9659	Get base level .
9660	Get embedding levels .
9661	Compute explicit embed and override embedding .
9662	Calculate run length levels .
9663	Resolve weak types .
9664	Resolve neutral types .
9665	Reverse a contiguous sequence .
9666	Reorder resolved levels .
9667	Process the current file
9668	Convert from PySide2 .
9669	Add a new attribute .
9670	Command line interface .
9671	Makes sure the bindings are compatible .
9672	Show the GUI .
9673	Discover PyBlish GUI .
9674	Deprecated .
9675	Add entry to filemenu .
9676	Context manager for restoring a selection
9677	Temporarily restore the current time .
9678	Shows a messagebox that is not registered .
9679	Setup the types .
9680	Get cumulative data .
9681	Return list of values for single axis
9682	Draw a constant line .
9683	Load transform parameters .
9684	Reverse a mapping .
9685	Generate a range of floats .
9686	Add data to the map .
9687	Add the filter definitions .
9688	Add data to the configuration
9689	Burn the visualization
9690	Calculate left margin .
9691	Calculates the right margin .
9692	Calculate the top margin .
9693	Add a popup .
9694	Calculate bottom margin .
9695	Draw the graph .
9696	Makes a datapoint text element .
9697	Draw x labels .
9698	Draw y labels .
9699	Draw x guidelines for the label_height .
9700	Draw y guidelines .
9701	Draw title titles
9702	Render inline styles .
9703	Initialize SVG .
9704	Returns a list of all the stylesheet resources .
9705	Run a bot .
9706	Send data to the server .
9707	Connect to the server
9708	Respond to a channel .
9709	Return a list of patterns that match the pattern .
9710	Make a new nick
9711	Handle a ping .
9712	Called when the server is registered .
9713	Read data from the socket
9714	Register the robot .
9715	Run task runner .
9716	Decorator to check if the nick is a boss .
9717	Return a set of command patterns .
9718	Called when the user is successful
9719	Execute a command .
9720	Add a worker to the queue .
9721	Send an email notification for the current user .
9722	Send a password reset notification .
9723	Validate password strength .
9724	Verify that token is valid .
9725	Delete the user s avatar .
9726	Allow POST requests .
9727	Get the executor for this worker .
9728	Return an instance of the Docker client .
9729	Return the TLS client .
9730	The name of the service .
9731	Wrapper around docker .
9732	Execute a docker container .
9733	Poll the status of the task .
9734	Stop the Docker service .
9735	Filter for unique email addresses .
9736	Update the password .
9737	Update the password .
9738	Validate an email address .
9739	Create a new token .
9740	Delete token .
9741	Resolve initial confirmation email .
9742	Handle POST request .
9743	Update the expiry .
9744	Generate email context .
9745	Send notification .
9746	Handler for password reset email notification .
9747	Default email handler .
9748	Authenticate the request .
9749	Check if the token is expired .
9750	Publish a Bokeh plot .
9751	Process bokeh plots .
9752	Get CustomJS callback
9753	Returns the widget with the specified parameter name .
9754	Render a function
9755	A simple textinput .
9756	Given a list of objects return a list of namedtuples .
9757	Get the owner of a method .
9758	Parses the HTTP auth credentials
9759	Ping the server .
9760	Information about the server .
9761	Retrieves the health of the cluster .
9762	Convert a number of bytes to human readable string .
9763	Total CPU load
9764	Returns the memory in bytes .
9765	Get the current network .
9766	List of available volumes .
9767	Get a volume by its id .
9768	Get the size of a volume
9769	Get the volume usage of a volume .
9770	Returns the volume per volume .
9771	Returns the maximum disk temp .
9772	Get a disk by id .
9773	Login to the server
9774	Perform a GET request
9775	Execute GET request
9776	Update the contents of the entry .
9777	Returns a synoization object
9778	Return the storage object .
9779	Returns a context for a HipChat request .
9780	Get tenant token .
9781	Build the attrs
9782	Return an instance of INSTALLED_APPS .
9783	Return an instance of INSTALLED_APPS .
9784	Returns the global settings
9785	Handles GET requests
9786	Get value from configparser .
9787	Change a configuration value
9788	Migrate config file
9789	Start the web server .
9790	Wait for the server to finish .
9791	Get new access information .
9792	Check if token is present
9793	Set access credentials .
9794	Refresh access token .
9795	Create manifest table .
9796	Split a full path into bucket and prefix .
9797	Checks if a bucket is a glacier object .
9798	Extract run id from filename .
9799	Remove None values .
9800	Adds a run to the manifest .
9801	Check if a run is in a manifest .
9802	Extract schema from a URI .
9803	Fix schema name
9804	Parse contexts .
9805	Parse an unstructured event .
9806	Transform a single event line into JSON .
9807	Convert a Snowplow event into a dictionary .
9808	Determine the used template name for a given response .
9809	Print the context scope .
9810	Prints the context variables
9811	Format SQL into HTML .
9812	Convert Django context to HTML .
9813	Format a dictionary as HTML .
9814	Apply styling to text .
9815	Format an object .
9816	Prints the object to the stream .
9817	Get a token from a string .
9818	Get a list of nodes from a string .
9819	Convert latex to text .
9820	Set latex input directory
9821	Read the input file .
9822	Convert latex to text .
9823	Convert a string to a string .
9824	Convert a string to ASCII .
9825	Gets the organization information .
9826	Get a list of boards .
9827	Gets a list of members from the server .
9828	Updates the organisation s organisation .
9829	Remove a member from the cluster .
9830	Adds a member to the organization .
9831	Adds a member to the organization .
9832	Fetches list information for all networks .
9833	Adds a new card to this account .
9834	Gets the label information .
9835	Retrieves all check items .
9836	Updates a label .
9837	Updates a label .
9838	Returns the authorisation url
9839	Gets the card information .
9840	Retrieves a board .
9841	Gets a list from the server .
9842	Gets all checklists .
9843	Adds a comment .
9844	Add an attachment to a file .
9845	Adds a new checklist .
9846	Adds a label from a dictionary .
9847	Adds a label to the resource .
9848	Adds a member to the organization .
9849	Gets the group information .
9850	Get a list of cards .
9851	Get all organisations .
9852	Creates a new board .
9853	Decorator to dispatch a method .
9854	Returns information about the board .
9855	Gets a list of lists .
9856	Get a list of labels .
9857	Retrieves a card .
9858	Get all checklists .
9859	Retrieves an organization .
9860	Updates the board .
9861	Adds a new list .
9862	Adds a label .
9863	Gets all checklists .
9864	Returns the card
9865	Returns a list of items for this card .
9866	Updates a checklist .
9867	Adds an item to this check item .
9868	Removes an item from the check .
9869	Updates the name of the checklist .
9870	Updates the status of the card .
9871	Add authorization parameters .
9872	Check for errors .
9873	Build the URL to the Trello API .
9874	Fetch a JSON object
9875	Create an organisation .
9876	Create a board .
9877	Create a label .
9878	Create a new list .
9879	Create a new Card object from the given JSON data .
9880	Create a new Checklist .
9881	Create a new member .
9882	Get an organisation .
9883	Get a board .
9884	Get a list
9885	Get a card .
9886	Get a checklist
9887	Get a user .
9888	Extract the domain from a URL .
9889	Convert text to raw text .
9890	Convert text to raw text .
9891	Convert text into sentences .
9892	Set the password for a service .
9893	Split text with locations .
9894	Mark a regex in text .
9895	Mark the begin end of a regex .
9896	Main entry point .
9897	Create a Cipher object .
9898	Get AES mode .
9899	The priority of this algorithm .
9900	Check the encryption scheme .
9901	Called when a message is received
9902	Make an integer .
9903	Return a deferred for the connection .
9904	Handle CONNACK packet .
9905	Encode a string .
9906	Decode a string .
9907	Encode a 16 - bit integer into a byte array .
9908	Encode a length .
9909	Decodes a length string .
9910	Encode the header .
9911	Encode this packet into a string .
9912	Decode the packet .
9913	Encode the result into a byte string .
9914	Decode the packet .
9915	Decode a packet .
9916	Encode this message .
9917	Encode this message .
9918	Decode packet .
9919	Encode the message header .
9920	Encode this Message .
9921	Decode a packet .
9922	Decode a packet .
9923	Get the URL for vk .
9924	Make a request to the API
9925	Refresh the block .
9926	Formats the data
9927	Fit data to data .
9928	Fits k - means clustering .
9929	Fit a MeanShift to data .
9930	Fit the classifier .
9931	Predict clusters for data .
9932	Map clusters to clusters
9933	Sort the clusters by the given sort_by .
9934	Convert datetime to datetime
9935	Calculate the total number of points in a dictionary .
9936	Get the maximum time span of a dictionary .
9937	Unit picker .
9938	Pretty - print an element .
9939	Analyte a string
9940	Convert string name to massname
9941	Collate all files in in_dir into out_dir
9942	Enumerate a boolean array .
9943	Convert tuples to a boolean array .
9944	Fast smoothing
9945	Compute rolling gradients .
9946	Find minima of x and y
9947	r MeanShift clustering .
9948	Run k - means clustering .
9949	Clusters data with cluster labels
9950	Reads the defined SRMS file .
9951	Read the configuration file
9952	Read the latools config file and parse it .
9953	Print LATools configuration file .
9954	Copy an SRM table from the configuration file
9955	Create a configuration file .
9956	Change the default configuration .
9957	Exclude a filtered filter to downhole
9958	Return a copy of filtered filt
9959	Despike statistics .
9960	Create autorange plot .
9961	Create the Numpy arrays for each time range
9962	Calculate the ratio of the analytes .
9963	Calculate the calibration for the given parameters
9964	Compute sample statistics .
9965	A dictionary of the ablation times .
9966	Filter the elements of the focus
9967	Filter gradients by a threshold .
9968	Calculate the correlation between two points
9969	Filter correlations with a window .
9970	Add a new filter .
9971	Get model parameters
9972	Visualize histograms .
9973	Create a pandas DataFrame with summary statistics
9974	Load reference data .
9975	Look up the type of a T .
9976	List of atomic weights .
9977	Calculate atomic mass
9978	Generate keywords .
9979	Utility function to annihilate a stack .
9980	Remove duplicates from a stack .
9981	Calculate gaussian statistics .
9982	Gaussian distribution .
9983	Calculate standard deviation .
9984	Get the set of samples .
9985	Parse the data .
9986	Calculate background .
9987	Create background interpolation .
9988	Subtract background values from the data .
9989	Calculate ratio .
9990	Make a subset of samples .
9991	Filter gradients by percentile
9992	Fit a classifier .
9993	Apply classifier .
9994	Filter correlation with correlation .
9995	Apply filters on the data .
9996	Remove samples from the data .
9997	Return the filter status .
9998	Defragment a set of samples .
9999	Filter the number of removed samples .
10000	Plots gradient histograms for the given analytes .
10001	Plot the gradient cross - section of the analysis .
10002	Plots histograms of the current focus .
10003	Generate trace plots
10004	Draw the gradient plots for the analysis .
10005	Generate filtered reports
10006	Generate sample stats
10007	Get statistics for all samples
10008	Exports tracing data .
10009	Export traces to a directory .
10010	Saves log file .
10011	Exports the current dataset .
10012	Split a file into separate segments .
10013	Folds f with f and g .
10014	Make a plot of features and barplot
10015	Calculate the bayesian scale
10016	Scaler for median .
10017	Deterpike dispersion of signal
10018	r Decompose exponential decay .
10019	add a new filter
10020	Remove one or more variables .
10021	Clear the configuration .
10022	Remove unused components
10023	Return the filter name
10024	Make a boolean from a key
10025	Return an array of boolean components .
10026	Return a string representation of the component
10027	Decorator to log a function
10028	Write log file .
10029	Read log file
10030	A decorator for autologin .
10031	Get information about modem .
10032	Send an SMS message
10033	Parse a file - like object .
10034	Return a link to a notebooker .
10035	Generate a thumbnail for the thumbnail .
10036	Generate code div .
10037	Get code example .
10038	The URL for this widget .
10039	Returns the output file name .
10040	process a notebook
10041	Create a python file from the notebook .
10042	Return data download string .
10043	Create thumbnail .
10044	Parse the command line .
10045	Scale image .
10046	Save the thumbnail
10047	Copies the thumbnail figure to the image file .
10048	Returns the URL for the given nbfile
10049	Yield languages in db change
10050	Returns the default value for the given field .
10051	Process post processing .
10052	Processes the image .
10053	Refresh the cache .
10054	Return a list of all thumbnails .
10055	Create a thumbnail .
10056	Delete the image .
10057	Creates a Thumbnail .
10058	Returns a Thumbnail
10059	Delete a thumbnail .
10060	Called when a message is received .
10061	Subscribe to a given number .
10062	Return a set of state values .
10063	Register a provider
10064	Send a message to the broker .
10065	Creates a receiver blueprint for the given name
10066	Returns a list of all receiver blueprints .
10067	Receive a message
10068	Receive a status from the gateway
10069	Decorator for API methods
10070	Forward an object .
10071	Sign a transaction
10072	Estimate gas gas gas .
10073	Estimate the amount of gas used to call this method .
10074	Write data to the stream .
10075	Read a line from the serial port .
10076	Send an email .
10077	Return the message as a string .
10078	Check if the message has bad headers .
10079	Add an attachment .
10080	Registers given services .
10081	Creates a Config object from a module
10082	Registers given resources .
10083	Returns the value of the given key .
10084	Called when an exception is raised .
10085	Sets up the data manager .
10086	Calculate the N - dimensional N - dimensional N wavelength
10087	Calculate the Jacobian equation .
10088	Authenticate to the backend .
10089	Login to backend .
10090	Returns a list of domains .
10091	Get all elements from the backend .
10092	Patch an object .
10093	Perform a DELETE request .
10094	Checks if two files are on the same volume .
10095	Create junction directory
10096	Initialize the logger .
10097	Raise an error .
10098	Claim a list of file readers .
10099	Determine the correct column header .
10100	Claims a set of VCF files .
10101	Initialize population statistics .
10102	Claim the unclaimed file readers .
10103	Split data into lines .
10104	Return the prefix of the line terminator .
10105	Return line terminator .
10106	Seek to the next line .
10107	Seek to the previous line .
10108	Returns the tail of the file .
10109	Return the head of the file .
10110	Follow the file .
10111	Claims strelka files .
10112	Parse a VCF record .
10113	Create an ordered dictionary of sample tag values .
10114	Return a set of unique tag values .
10115	Join info_dict .
10116	Return the format field
10117	Return the sample field .
10118	Return a text representation of the sample .
10119	Add a sample tag value .
10120	Add or replace a new filter .
10121	List available categories .
10122	Generate a form for a product .
10123	Factory for creating staff products .
10124	Add an error for the given product .
10125	Memoise a function from a list of arguments .
10126	Generate model fields .
10127	Return a list of items that are pending .
10128	Send email .
10129	Iterate over OpenStreetMap objects .
10130	Parse OSM file .
10131	Iterate over OpenStreetMap .
10132	Returns True if the user passes the filter .
10133	Check if a user is met .
10134	Returns the remainder of a user .
10135	Filter queryset .
10136	Filter queryset by user .
10137	Filter the queryset .
10138	Filter the queryset .
10139	Pre - filter conditions .
10140	Decorator for functions that modify the cart .
10141	Create a cart for a given user .
10142	Extend the reservation duration .
10143	Apply a voucher to the cart .
10144	Validate the cart .
10145	Fix invalid errors
10146	Recalculate the discounts .
10147	Add a discount clause to this product .
10148	Create a report view .
10149	Return an iterator over the rows in the cell .
10150	Returns the form instance .
10151	Render data .
10152	List all reports .
10153	List items sold in invoice .
10154	Summarize sales .
10155	List all payments .
10156	Report all credit note refunds .
10157	Display the status of all products .
10158	Displays a list of discounts and discounts .
10159	Return a list of all invoice line items .
10160	Return a list of all invoices that have been paid .
10161	Displays credit notes .
10162	Displays all invoices .
10163	List attendees .
10164	Displays the list of speaker registrations .
10165	Create a list of invoices .
10166	Return a list of missing categories for the given user .
10167	Return the number of available credit notes .
10168	Return True if the user is sold out or not .
10169	View for viewing a user .
10170	Edits the profile form .
10171	Handle profile form .
10172	View for a specific product category .
10173	Handles product forms .
10174	Handle a voucher form .
10175	Checkout an invoice .
10176	View that handles an invoice access .
10177	Show the current invoice .
10178	View for manual payment form .
10179	Refund an invoice .
10180	Applies a credit note to an invoice .
10181	Amend staff registration .
10182	Extend a reservation
10183	Send invoice email .
10184	Render a badge .
10185	Render a badge
10186	Return a list of available discounts .
10187	Annotate a queryset with the past use of the current model .
10188	Returns a list of available products for the given user .
10189	Applies the payment to the invoice
10190	Sets the cancellation fee .
10191	Generate an access code .
10192	Lazy evaluation of a function .
10193	Get an object from a dotted name .
10194	Return invoice for given cart .
10195	Generate a manual invoice .
10196	Generate line items from cart .
10197	Apply credit notes to invoice .
10198	Check if user can view this invoice
10199	Refresh invoice from database
10200	Validates that the invoice has been paid .
10201	Updates the status of the invoice .
10202	Mark cart as paid .
10203	Returns True if the invoice has a cart .
10204	Update the invoice s validity .
10205	Mark the invoice as void .
10206	Refund the invoice .
10207	Send an email to an invoice
10208	Update the Processor .
10209	Flatten a field
10210	Print downloaded files .
10211	Download the download of the processor .
10212	Get project data
10213	Get all registered processors .
10214	Print the inputs for a given processor .
10215	Rundata data
10216	Upload files to a project .
10217	Upload a file
10218	Download processor results .
10219	Get all subclasses of a class .
10220	Get repo and project and project .
10221	Given a list of variants return a list of suggested phenotypes with suggested suggestions .
10222	Given a list of variant ids return a list of variant phenotypes that are merged with the suggested changes .
10223	Search for variants matching a coordinate query .
10224	Bulk search for variants by coordinates .
10225	Update the element s attributes .
10226	Remove duplicates from a sequence .
10227	Authenticate with Asana .
10228	Prompt the user for a list .
10229	Get the data for an issue .
10230	Move the issue data to the given namespace .
10231	Get task data .
10232	Get a Asana task by id .
10233	Save the corpus to disk .
10234	Apply a flag to the data .
10235	Decorator for transport tasks
10236	Flush all items in the queue .
10237	Create a task .
10238	Format a list of task numbers .
10239	Creates a task in the given workspace .
10240	List of available data types .
10241	Logs a debug message
10242	Initialize the serial port
10243	Sets the polling values .
10244	Combine measurement fields and return values .
10245	Render the readings since the given timestamp .
10246	Set the current context
10247	Calculate PF .
10248	set max demand period
10249	Set the password .
10250	Unpack struct
10251	Convert data to meter data
10252	Return a serialized dictionary of the field data .
10253	Calculate the CRC of a meter read
10254	split Ekm date into a named tuple
10255	Return the number of months buffer
10256	Sets the CT ratio
10257	Assign a schedule
10258	Assign season schedule
10259	set season scheduler parameters
10260	Assign a holiday to the calendar
10261	Request a set of schedules
10262	Extract schedule data
10263	Request the number of days
10264	Extracts the metadata for a given month .
10265	Reads a set of holidays .
10266	Extract holiday date
10267	Read the settings .
10268	write command message
10269	Request a password
10270	Update all observers
10271	Initialize the LCD lookup .
10272	send a request to the device
10273	Request A .
10274	Request B - RPC request .
10275	Add fields to fields .
10276	Calculate the field values .
10277	set the LCD command
10278	Set relay status
10279	Send a termination string to the serial port .
10280	Set pulse input
10281	set zero resettable kw
10282	Set the LCD
10283	Iterate over fields in a schema
10284	Iterate over all fields in a schema
10285	Return a list of paragraphs .
10286	Generate a random text .
10287	Return a string representation of the statistics .
10288	Colorize text .
10289	Show the given text .
10290	Return a summary of a test result .
10291	Parse command line arguments .
10292	Setup the result .
10293	Run the tests .
10294	Execute the transform .
10295	Transform a DescribeCase node into an astroid .
10296	Generator for transform description .
10297	Transform an example .
10298	Transform the body of the example body .
10299	Create an ast . ast node .
10300	Register path hook .
10301	Convert source code to code .
10302	Apply an argument parser .
10303	Load a module by name
10304	Load modules from a given path .
10305	Find all files under path .
10306	Return a function that checks the contents of the given location .
10307	Returns a function that checks for messages in the given location .
10308	Add a configuration file .
10309	Remove a config file
10310	Send a restart message .
10311	Create a Places instance .
10312	Get a process monitor .
10313	Create a Processmon service
10314	Refresh session .
10315	Remove expired nodes .
10316	Remove a node from the cluster .
10317	Get the timestamp of the node .
10318	Get information about all nodes .
10319	Refresh session .
10320	Increment the times modified
10321	Dereference a node
10322	Split a list into tokens .
10323	Check if path is bad
10324	Merges two messages .
10325	Creates a Query that matches the given value .
10326	Convert a token to a query .
10327	Return a constant .
10328	Apply a function to a function .
10329	Return an unsplated function as a function .
10330	Run a process and wait for it to finish .
10331	make a multi - threaded service
10332	Confirms the parser with the given parser .
10333	Create an alternative parser .
10334	Make an optional parser .
10335	Instantiate a new parser .
10336	Convert a parser to a regular expression .
10337	Create a new RepeatedRepeatedParser with the given parser .
10338	Replace parser with separator .
10339	Check the state of all states .
10340	Close the call .
10341	Check if the state is valid .
10342	Add a heartbeat .
10343	Wrap a multi - service service .
10344	Freezes a tensorflow from a checkpoint .
10345	Freezes a trained model .
10346	Save a graph to a file .
10347	Save graph_only from checkpoint .
10348	Save weights from checkpoint .
10349	Restore from checkpoint .
10350	Parse the given parser .
10351	Render a tag .
10352	Validate arguments .
10353	Return the context data for the given parent context .
10354	Parse template tag .
10355	Return the context data .
10356	Returns a TensorFlow session .
10357	Freeze caffe .
10358	Save tensorflow graph to Tensorflow .
10359	Convert a sequence into a list of rows .
10360	Return n items from iterable .
10361	Yield every element from an iterable .
10362	Removes duplicates from an iterable .
10363	Take an iterable and return it .
10364	Takes an iterable and returns the next iteration of the iterable .
10365	Split count items into bins .
10366	Convert an item to an iterable .
10367	Replace callables with exceptions .
10368	Return elements that are duplicated .
10369	Ensures that iterable is ordered by key .
10370	Swap a partition on a partition .
10371	Partition a dictionary .
10372	Get the first n queues
10373	Reset the iterator .
10374	Parse as_var and return as_var .
10375	Decorator for creating a template tag .
10376	Return the public keychain for the given chain path .
10377	Fetch the sqlite master record .
10378	Iterate over an object .
10379	Select an object
10380	Parse the given selector .
10381	Return a list of validators .
10382	Return parents of lhs
10383	Return all ancestors of lhs .
10384	Find siblings of lhs and rhs
10385	Parse nth child .
10386	Match all validators .
10387	Ping an ICMP port .
10388	Get request body .
10389	Expire the cache .
10390	Set the value of key .
10391	Get a value from the store .
10392	Return True if the key exists in the store .
10393	Checks if the given timestamp is valid .
10394	Deserialize a NistBeaconValue from a JSON string .
10395	Create a NistBeaconValue from an XML string .
10396	Return the rendered content .
10397	Apply fn to the logfile
10398	Returns a list of rows .
10399	Validate a token .
10400	Return the cryptography engine .
10401	Validate a token against a valid algorithm .
10402	Create a token .
10403	Counter 32 - bit counter .
10404	Counter 64 - bit counter .
10405	Calculate the duration .
10406	Setup the output module .
10407	Creates a list of sources
10408	Send a list of events to the bus .
10409	Start the watchdog watcher .
10410	Parse format string .
10411	Parse log line .
10412	Validates that the expiration is a valid date .
10413	Raises ValidationError if request is not provided .
10414	Verify the token
10415	Name of the browser .
10416	Warn if node is not local .
10417	Connects all the receivers
10418	Create a link for a record .
10419	Send an ACCESS notification .
10420	Send notification for a new request .
10421	Send an email notification .
10422	Send an access request .
10423	Send notification .
10424	Create a link .
10425	Validate token
10426	Revoke this link .
10427	Create an email .
10428	Get message by receiver and user .
10429	Confirms the email address .
10430	Accept a message .
10431	Reject this request .
10432	Create a secret link .
10433	Returns a new SHA512 hash .
10434	Verify a signature .
10435	Checks if the given record is an access token .
10436	Handle access request .
10437	Confirm an email address .
10438	Creates an SSH command client .
10439	Reverse column .
10440	Get the selected item .
10441	Set the selected items .
10442	Returns the version of the file .
10443	Set the version of the file .
10444	Initialize SSH connection
10445	Start the timer .
10446	Wait for events to finish .
10447	List linked links .
10448	Connect to the Riemann server
10449	Stop the connection .
10450	Empty the queue
10451	Called when events are received .
10452	Create an RPC client .
10453	Create an elasticsearch client
10454	Encodes an event into a protobuf .
10455	Encode a list of events .
10456	Decodes the given string into a protobuf message .
10457	Send a list of events .
10458	Generate file preview .
10459	Retrieve a file preview .
10460	Send a message to R_q queue
10461	Message loop .
10462	Returns True if self . time_delta is logged in .
10463	Respond to the mechanism .
10464	Abort the SASL message .
10465	Perform SASL preparation .
10466	Render the admin footer .
10467	Build payment parameters .
10468	Build register - card parameters .
10469	Creates a payment with an alias
10470	Get the version string
10471	Constructs the layout
10472	Called when the editor is finished .
10473	Configures the shortcuts .
10474	Activate the item
10475	Called when the selected item is selected .
10476	Navigate to the location
10477	Finalize options .
10478	Execute the resource .
10479	Run the cleaning command .
10480	Fetch all children
10481	Refresh the tree .
10482	Returns the icon for the given index
10483	Runs and returns a child process .
10484	Get the maximum file descriptor .
10485	Close the given file descriptor .
10486	Close open file descriptors .
10487	Redirect stream to target .
10488	Set widget attributes .
10489	Import an app module .
10490	Import all modules in INSTALLED_APPS .
10491	Process an include node .
10492	Return the URL for a gravatar image .
10493	Retrieve the URL for a gravatar image .
10494	Validate that the filesystem path is a valid file system path
10495	Validate a url
10496	Return the absolute path of a template .
10497	List objects in the bucket .
10498	Build the JSON for the workflow .
10499	Execute the GDX API .
10500	Archive project folder
10501	Create a directory .
10502	List files in the project
10503	Restore project from folder
10504	Create a new client .
10505	List files under path .
10506	Download file to specified path .
10507	Checks if the given path exists .
10508	Get the parent entity of a path .
10509	Create a directory .
10510	Upload a file to the storage .
10511	Delete a file .
10512	Validate the given path .
10513	Creates a new client .
10514	Create a new entity .
10515	Get entity details .
10516	Sets the metadata for an entity .
10517	Get metadata for an entity .
10518	Updates the metadata for an entity .
10519	Deletes the specified metadata for a given entity .
10520	List projects .
10521	Get project details .
10522	Creates a project .
10523	Deletes a project .
10524	Creates a folder .
10525	Get folder details .
10526	Deletes a folder .
10527	Upload a file to the server .
10528	Copies the content of a file .
10529	Download the contents of a file .
10530	Get the signed URL for a file .
10531	Emit a record .
10532	Returns the URL for the given service and version .
10533	Sets the headers for this request .
10534	Returns a copy of this request .
10535	Sets an exception .
10536	Return the list display name of the list .
10537	Adds a map job to a job .
10538	Run genotypeG files on GATK files .
10539	Run oncotator .
10540	Sort the list .
10541	A list of timestamps .
10542	Load export data from folder
10543	Shift time by time
10544	Calculate the sum of all elements
10545	Return a list of Rfxcom commands .
10546	Create a new user .
10547	Parse VN results
10548	Parse release results .
10549	Parse the production staff results
10550	Parse character results .
10551	Parse tags and return a list of tags
10552	Parse user results .
10553	Add multiple files to a tarball .
10554	Iterate over a list of file paths .
10555	Copy a local file to a temporary directory .
10556	Prepare parameters for Spark .
10557	Add docker - hyperparameters to the Docker master .
10558	Refresh the metadata
10559	Run MuTect using MuTect
10560	Create the resource
10561	Return a list of strm streams
10562	Export the device data to a directory .
10563	Search for VNDB .
10564	Parse search results .
10565	Add a stream to the dataset .
10566	Reset the apikey .
10567	Return a list of all users .
10568	Create BWA index files
10569	Return a ConnectorDB object .
10570	Add a stream to the database
10571	Add a new stream to the database .
10572	Insert a datapoint into the database
10573	Sync the database
10574	Start the sync .
10575	Stop reading .
10576	Download a URL to a local file .
10577	Uploads an S3am upload job to S3
10578	List labels for an ontology
10579	Print the hierarchy of the given ontology .
10580	Get the mean insert size for a BAM file .
10581	Get the docker container id .
10582	Run star index .
10583	Creates a new node in the database
10584	Export the stream to a directory .
10585	Return a device object representing the device .
10586	Get all labels for an ontology
10587	Get the hierarchy of an ontology
10588	Run a worker .
10589	Populates the parser with the given configuration data .
10590	Get the empty config
10591	Get the mount path .
10592	Add an option to the arg parser .
10593	Create an argument parser .
10594	Create a command to run the pipeline .
10595	Set the basic authentication .
10596	Raise an exception if the result is not 200
10597	Ping the server .
10598	Create a new vault .
10599	Update a crud .
10600	Delete a file .
10601	Subscribe to a stream
10602	Create a new user .
10603	Retrieve all devices in the device .
10604	Run cutadapt using reverse adapter
10605	Run samtools using samtools
10606	Run samtools index
10607	Runs the markdup on the BAM file .
10608	Run samblaster
10609	Mark duplicates in BAM files .
10610	Run picard sort sort
10611	Run baseRecalibrator
10612	Run kallisto
10613	Run rsem
10614	Get user affinity .
10615	Send a command to the websocket .
10616	Subscribe to a stream
10617	Connect to the server .
10618	Reconnect to the server .
10619	Re - subscribe to all subscribed subscriptions
10620	Called when the connection is opened .
10621	Called when the connection is closed .
10622	Called when a connection is lost
10623	Called when a message is received
10624	Ensure the websocket connection is alive .
10625	Run GATK SelectVariants to select VCF .
10626	Run GATK variant filtering
10627	Run GATK variant recalibrator .
10628	Apply recalibration to a GATK file .
10629	Run GATK combineVariants using GATK .
10630	Check if bam is quickcheck
10631	Load handlers from a dictionary .
10632	Write the configuration .
10633	Get the configuration .
10634	Get a term from ontology
10635	Perform ontology search .
10636	Suggest an ontology .
10637	Iterate over all descendants of an ontology .
10638	Iterate over all descendants of an ontology .
10639	Iterate over labels for a given ontology .
10640	Iterate over hierarchical terms .
10641	Run fastqc command
10642	Add a stream to the query
10643	Create the application .
10644	Start the Spark container .
10645	Start the Spark worker
10646	Start the HDFS worker
10647	Stop the worker .
10648	Check the status of the container .
10649	Tokenizer .
10650	Lookup the zone ID for the specified zone
10651	Fetch the configuration of a DNS zone .
10652	Merge all configuration records into a single XML .
10653	Validate changeset .
10654	Returns a list of best N members ranked by fitness score .
10655	Returns the fitness score .
10656	Returns the average cost_fn for each group .
10657	Return the median cost function of each group .
10658	Returns a dictionary with the parameters as a dictionary .
10659	Returns the members of the scheduler .
10660	Add a parameter .
10661	Generate next generation .
10662	Normalize options .
10663	Get environment variables .
10664	Wraps a callable and returns the result .
10665	Transform a list of packages into a list of packages .
10666	Transform result to unicode .
10667	Convert html to xhtml .
10668	Convert xhtml to HTML .
10669	Convert a document to a string .
10670	Open a document in a browser .
10671	Drop the tree .
10672	Drop this tag .
10673	Get element by id .
10674	Return a CssSelector that matches expression expr .
10675	Iterate over all loggers .
10676	Return a dictionary with the count of all python classes .
10677	Returns True if the current class is a single class
10678	Check if the current module is a single module
10679	Validate request parameters
10680	Validate the identifier .
10681	Decode a path .
10682	Escape an argument spec .
10683	Get the codec name for a given encoding .
10684	Detect BOM .
10685	Get the remote address of a forwarded address .
10686	Convert amount to decimal
10687	Create a BeautifulSoup from a string .
10688	Parse BeautifulSoup file .
10689	Convert a BeautifulSoup tree into a tree .
10690	Return the current traceback .
10691	Return the exception string .
10692	Render the summary .
10693	Generate plaintext traceback .
10694	Return the lines of the function .
10695	Render the source table .
10696	Tries to find the version of an egg .
10697	Get the locations of the index URLs .
10698	Find all versions of the project .
10699	Find an installed requirement .
10700	Sort a list of links .
10701	Get the Content - Type of a URL .
10702	Iterate over the links .
10703	Return True if the link is valid .
10704	Find data files in a package .
10705	Exclude files from src_dir
10706	Parse a requirements file .
10707	Join lines into a single line .
10708	Ignore comments .
10709	compile a marker
10710	Transformer node node .
10711	Return a new attribute node .
10712	Coerce value to number .
10713	Copies the current request context to the decorated function .
10714	Push the context onto the application stack .
10715	Remove the app context .
10716	Return a copy of this instance .
10717	Match the request .
10718	Pushes the request context onto the stack .
10719	Make a path relative to the given path .
10720	Returns True if dist is editable .
10721	Add a url - value preprocessor to the app .
10722	Register a function for url_defaults .
10723	Register an error handler .
10724	Decorator for streaming generator functions .
10725	Make a Flask response .
10726	Generate a URL for the given endpoint .
10727	Safely join the given filename .
10728	Get the root path of a package .
10729	Returns the jinja loader
10730	Run the completion script .
10731	Return the cookie domain name .
10732	Generate a cache key for a given link .
10733	Return True if name is Purelib
10734	Yield paths to uninstallation paths
10735	Raises an UnsupportedWheel if the given version is incompatible .
10736	Build a wheel and store it in output_dir
10737	Iterate over all symbols .
10738	Decorator to ensure fresh rates are refreshed .
10739	Add egg - info files .
10740	Write the delete marker file .
10741	Return True if we are running in a virtualenv
10742	Get the username
10743	Return a distutils scheme .
10744	Parse the Content - Control header
10745	Check if a request is cached .
10746	Cache a response .
10747	Update the zipimporter cache .
10748	Load the template .
10749	Install site - patch site .
10750	Save the file to disk .
10751	Convert a value into a value .
10752	Add filters to the given filter .
10753	Configure logging handler .
10754	Add handlers to the given logger .
10755	Configure a logger .
10756	Execute a file .
10757	Temporarily override the temporary directory .
10758	Return the URL and revision of the file .
10759	Get an item from an object .
10760	Generate the source code .
10761	Compile and compile templates .
10762	Return the default cache name .
10763	Find eggs in a zipfile .
10764	Find distributions on the given path .
10765	Declare a package name .
10766	Retrieves the mro from the given class .
10767	Find an adapter for ob .
10768	Ensure directory exists .
10769	Iterate over the entry points for the given group .
10770	Return True if this distribution is compatible with this package .
10771	Return the best matching dist .
10772	Evaluate a marker .
10773	Evaluate the given text .
10774	Format a log record .
10775	Formats a number .
10776	Parse a regular expression pattern .
10777	Returns a decimal value for the given precision .
10778	Returns the decimal precision .
10779	Get scientific notation elements .
10780	Calculate total seconds in seconds .
10781	Parse a list of requirements .
10782	Return a version of setuptools .
10783	Check that the requirement is valid .
10784	Fetch build egg
10785	Do a dice roll
10786	Convert string to price class
10787	Create a price object .
10788	Validate request .
10789	Get a method from the given arguments .
10790	Execute the given method .
10791	Deprecated .
10792	The blueprint
10793	Attach an error class to the form .
10794	Return an abstract dist .
10795	Add a requirement .
10796	Walk through all the requirements to install .
10797	Check if a requirement is installed .
10798	Return the order of dependencies to install .
10799	Get all namespace packages
10800	Encode obj into JSON .
10801	Tokenize a docstring .
10802	Merge html annotations .
10803	Copy annotations from src to dest .
10804	Compress tokens .
10805	Generator for serializing tokens .
10806	Expand tokens .
10807	Find the end of unbalanced_end .
10808	Replace whitespace in chunks .
10809	Recursively flatten elements .
10810	Split text into words .
10811	Return start tag .
10812	Return the end tag of an element .
10813	Serialize an HTML fragment .
10814	Fix ins and del tags .
10815	Extract a constant from code .
10816	Generate a cache URL .
10817	Recursively autolink elements .
10818	Kill conditional comments .
10819	Creates a Document from an HTML string .
10820	Ensure that the decorated function returns a JSON response .
10821	Get a treeWalker class for the given treeType .
10822	Export an svn repository
10823	Get the revision for a given location
10824	Raises an AssertionError if the decorated function is not imported .
10825	The name of the module .
10826	Return whether or not the application should propagate .
10827	Return the path to the instance .
10828	Update the template context .
10829	Handle HTTP exceptions .
10830	Return True if we want to trap HTTP exceptions .
10831	Handle an exception .
10832	Raise the routing exception .
10833	Dispatches and dispatches the request
10834	Creates a default response for the request .
10835	Create a url adapter .
10836	Inject url defaults to values .
10837	Yield unique values from an iterable .
10838	Parse a metadata key .
10839	Convert a requirement into a requirement string .
10840	Convert a pkgin_info file to metadata .
10841	Iterate over all available modules .
10842	iterate over all classes
10843	returns a list of method names
10844	Find the basename of a list of filenames .
10845	Return True if path is a module path .
10846	Walk a directory tree and return all subdirectories .
10847	Iterate over the paths of the module .
10848	Dumps default values for kwargs .
10849	Load default cls .
10850	Set multiple keys .
10851	Increment the value of key .
10852	Dump object to pickle
10853	Build a dictionary of options from a request .
10854	Populate the link with the link .
10855	Ensure the source directory exists .
10856	Remove a temporary source .
10857	Return the distribution for this package .
10858	Get the data from the request .
10859	Create headers from the response .
10860	Convert an iri into a native URI .
10861	Get the user cache directory .
10862	Return the user data directory .
10863	Return the path to the user logs directory .
10864	Return the full path to the user data directory .
10865	Return the list of directories for an application .
10866	Iterate over all Python modules .
10867	Restart the process with a new one .
10868	Convert a string to text .
10869	Find the CA bundle .
10870	Parse an HTML document .
10871	Parse the input stream .
10872	Parse the tree .
10873	Translate word into a list of words .
10874	Convert arguments to a list of tokens .
10875	Bind to the server .
10876	Print report message .
10877	Load bytecode from file .
10878	helper function to update stylesheet params
10879	Run a VCS command .
10880	Get the implementation version
10881	Return a list of distros for a given location .
10882	Find external links .
10883	Wrapper for local urlopen
10884	Process a URL .
10885	Return a set of absolute paths to absolute paths .
10886	Initialize pathinfo .
10887	Add a package .
10888	Add path to sitedir .
10889	Check if enable_user site is enabled .
10890	Add site - packages .
10891	Set shell completion .
10892	Alias for Symbols
10893	Set the default encoding .
10894	Force global eggs after the current installation .
10895	Fix sys . path
10896	Run a subprocess .
10897	Check to see if Pyrex is installed .
10898	Convert the source code to the language .
10899	Context manager for the application .
10900	Retrieves a resource
10901	Return user agent information .
10902	Returns True if name is a URL .
10903	Unpack a file .
10904	Download an HTTP URL .
10905	Check if a link is downloaded .
10906	Registers a currency code .
10907	Register currency exchange .
10908	Decode the response .
10909	Default template context processor .
10910	Render the given template .
10911	Render a template .
10912	Render a template string .
10913	Parse version string .
10914	Check if the given name is declared .
10915	Visit a name node .
10916	Visitor for inclusion node .
10917	Visitor for from_import node .
10918	Create a WHEL file .
10919	A decorator for atomic operations .
10920	Start a service factory .
10921	URL encoding .
10922	Return a list of distributions that match a requirement .
10923	Populates the requirements_set from the given args .
10924	Export the package to a temporary location .
10925	Perform an Amazon ProductLookup .
10926	Iterate over pages .
10927	Browse node .
10928	Return the children of this element .
10929	Get element from path .
10930	Get element s text .
10931	Get the date of the element .
10932	Get the price and currency .
10933	List price .
10934	Send a response to the controller .
10935	Build a response .
10936	Make an attribute getter for an attribute .
10937	Convert string to lowercase .
10938	Sort the given value .
10939	Perform a groupby .
10940	Evaluate a filter .
10941	Create a logger .
10942	Compares two strings .
10943	Verify a signature
10944	Derive a key from the secret
10945	Get the signature for the given value .
10946	Sign a value .
10947	Verify a signature .
10948	Unsign a signed value
10949	Sign a value .
10950	Validate a signed value .
10951	Dump an object to a string .
10952	Handle a server error .
10953	Return a list of installed packages .
10954	Require parents .
10955	Return all directories in base_path
10956	Prepare the response for the cache .
10957	Unign a record .
10958	Unpack a wheel file .
10959	Install the scripts for the given distributions .
10960	Assemble the graph .
10961	Redraw the canvas .
10962	Get a node by its ID .
10963	Handle directed graph changes .
10964	Handle incoming edges .
10965	Called when a component has changed .
10966	Handles left click events .
10967	Called when the diagram canvas has changed .
10968	Clears the diagram canvas
10969	Called when diagram is changed .
10970	Maps the graph to a new graph .
10971	Unlock the map model
10972	Map new elements to the diagram
10973	Set node style attributes
10974	Parses an x - dot file .
10975	Process font .
10976	Process an ellipse .
10977	Process a polygon .
10978	Process a polyline token .
10979	Process text .
10980	Process an image .
10981	Renders a GridFS file .
10982	Save object to file .
10983	Load the DOT file .
10984	Tests if the given point is within the bounding box .
10985	Draw the bounding box .
10986	Opens a new graph .
10987	Connect to the database .
10988	Parse the output of the dot code
10989	Create a new graph .
10990	Open file dialog .
10991	Save the model .
10992	Save the model to file .
10993	Configure the graph .
10994	Configure nodes
10995	Configure edges
10996	Display information about the robots .
10997	Add a new node .
10998	Add an edge .
10999	Add a new subgraph .
11000	Add a cluster .
11001	Request a single graph .
11002	Edit options
11003	Configure the dot code
11004	Callback to handle exit
11005	Move components to origin coordinates .
11006	Save the object to a file .
11007	Load data from a file like object .
11008	Save the dataset to a file .
11009	Load an object from a file .
11010	Creates a property on an object .
11011	Parse a text file .
11012	Returns the list of start words .
11013	Add a chain .
11014	Remove a chain by name
11015	Build a chain from a source .
11016	Generate a sentence from the chain .
11017	Create a new graph .
11018	Add a node to the graph .
11019	Delete a node
11020	Get a node by its ID .
11021	Delete an edge from the graph .
11022	Add an edge to the graph .
11023	Add a subgraph to the graph .
11024	Called when the graphviz executable is changed .
11025	Set the list of nodes .
11026	Parse a DOT file .
11027	Parse a DOT file .
11028	Build the top graph .
11029	Build a graph from the tokens .
11030	Get the unit and multiplier from seconds .
11031	Format a duration .
11032	Load path
11033	Create the UI for the graph
11034	Split a sequence .
11035	Split an iterable into chunks .
11036	Run the bot .
11037	Get all children of an object .
11038	Append a child to the object .
11039	Insert a node into the graph .
11040	Delete a child from an object .
11041	Called when a node is removed
11042	Called when the node changes
11043	Get label from object .
11044	Set label on an object .
11045	Called when label changes
11046	Initialize the widget .
11047	Update the editor .
11048	Add listeners to the object .
11049	Handle a new node .
11050	Called when a node changes .
11051	Add nodes to the graph .
11052	Called when an edge is replaced .
11053	Called when an edge is changed .
11054	Add edges to the graph .
11055	Parse an Xdot directive .
11056	Event handler for drawing
11057	Create a node .
11058	Return an edge object .
11059	Setup the MongoEngine proxy .
11060	Parse the drawing directive .
11061	Parse a label directive .
11062	Called when drawing is changed .
11063	Called when the component is changed .
11064	Called when the component is changed .
11065	Handles the right down event .
11066	Shows highlighting options .
11067	Draw the main layer .
11068	Checks if the given point is inside the polygon .
11069	Draw the main layer
11070	Handle an event .
11071	Run the loop .
11072	Returns the full page url for the view .
11073	Render links .
11074	Render SEO links .
11075	Returns True if candidate content type matches candidate .
11076	Select the correct content type .
11077	Rewrite a URL .
11078	Remove auth from url .
11079	Create URL identifier .
11080	Normalize host name .
11081	Discover all modules in a directory .
11082	Find all modules in a directory .
11083	Return a list of modules .
11084	List all classes in a module
11085	List all classes in a module
11086	Ensure directory exists .
11087	Add a blob to the blob .
11088	Validate a card number .
11089	Get the version of the git repository .
11090	Load a module .
11091	Add a path .
11092	Find a module by name .
11093	Split a line into a list of lines .
11094	Remove all namespace declarations from the root .
11095	Make sure the version is consistent .
11096	Create a new instance from a YAML specification .
11097	Merge this object into a new one .
11098	Execute all actions
11099	Create a new instance from a yaml file .
11100	Add Flask request details
11101	Emit a record .
11102	Add image_rendition to context .
11103	Add an entry to the account .
11104	Add download to queue .
11105	Start worker threads .
11106	Sets the value of k .
11107	Get a value from KVStore .
11108	Recursively retrieve the keys of a KVStore .
11109	Returns the index of a specific k
11110	Delete a key from k .
11111	Plots a heatmap of features .
11112	Add a number of months to the timestamp .
11113	Add a number of months to a date .
11114	Is the holiday period?
11115	Set a music service .
11116	Set a storage service .
11117	Read data from csv file .
11118	Load the configuration from a JSON file .
11119	Save data to a JSON file .
11120	Filter X by reference label .
11121	Calculate the mean of each label in X and y .
11122	Compute feature importance .
11123	Restores the session data .
11124	Merge two dicts .
11125	Decorator to register multiple functions .
11126	Decorator to add a method to a method .
11127	Find all registered blocks .
11128	Verify that a block is registered .
11129	Register a block .
11130	Unregister a block stream .
11131	Convert file to MP3
11132	Generate a reasonable version .
11133	Handle SSL redirect .
11134	Initialize celery .
11135	Queue an email .
11136	Parse the Accept header value .
11137	Parse a cache control header value .
11138	Parse a content type .
11139	Parse a Forwarded header value .
11140	Parse a comma - separated list .
11141	Parse a list of parameter names .
11142	Resizes an image to fit its width .
11143	Add a value to the link .
11144	Download a file from YouTube
11145	Connect to Google Drive .
11146	Upload a music file
11147	Connect to music folder
11148	Writes the sky parameters to file .
11149	Update filenames .
11150	Read ahphi absorption from file
11151	Scale the A_phi parameter
11152	Read Pure water absorption from file
11153	Read the pure water scattering from file .
11154	Read IOP from file .
11155	Write a |IOP| object to file .
11156	Build the b of the water area
11157	Build the total absorption
11158	Compute the total attenuation C
11159	Build all b and c
11160	Set batch parameters .
11161	Read a parameter file .
11162	Convert string to list of floats .
11163	Read a PR report .
11164	Set the handler for the given signals .
11165	Handles signal handler
11166	Default handler for signals .
11167	Pause signal handler .
11168	Handle abort request .
11169	Handle status signal
11170	Unregisters an event
11171	Fetch metrics for a given metric .
11172	Returns a sorted list of metric names
11173	Return a list of elements of iterable .
11174	Print an item to stdout .
11175	Print all items in an iterable .
11176	Initialize the signature .
11177	Loads the signature from a partial instance .
11178	Returns a copy of the argv .
11179	Return True if filename should be ignored .
11180	Return a priority key for a file .
11181	Convert a VLQ to an integer .
11182	Read a table .
11183	Parse the archive header .
11184	Format the duration in seconds .
11185	Print details of the game .
11186	Load data from the UI .
11187	Opens the search result file .
11188	Write data to file .
11189	Process the data .
11190	Display the connection .
11191	Print the graphic information .
11192	Display an error message .
11193	Hide the error message .
11194	Run planar .
11195	Cancel the planar .
11196	Quits the application .
11197	Save the figure to disk
11198	Open the log file .
11199	Open the documentation .
11200	Prepare actions
11201	Updates the context menu
11202	Handle mouse move .
11203	Display the target .
11204	Create a lockset block .
11205	Sign this message with a private key .
11206	Generate a hash for this message .
11207	Check if this is a valid state .
11208	Add funds to funds .
11209	Get the last lock .
11210	Get the last block proposal .
11211	Return the last valid lock set .
11212	Calculate timeout if needed .
11213	Callback when a proposal is finished .
11214	Generate hexkeys .
11215	Calculate the delay between two packets .
11216	Deliver a packet .
11217	Creates a proxy for the given contract address .
11218	Converts an address to a native contract class .
11219	Register a native contract .
11220	Updates the filter .
11221	Called when a transaction is received .
11222	Convert vgg to RGB
11223	Convert image to VGR .
11224	Get the f layer .
11225	Get the output of a layer .
11226	Get the features for a layer .
11227	Create a new key file .
11228	Finish the bulk load .
11229	Load data from a file .
11230	Perform bulk load .
11231	Try to release memory .
11232	Returns a list of names of the tables .
11233	Decorator to fix compiler flags .
11234	Return the path to the Teradata directory .
11235	Retrieves a configuration value .
11236	Set a key in the config .
11237	Set table output
11238	Execute a SQL query .
11239	Get the value of a key
11240	Write default config file
11241	Set column names .
11242	Write the GTRAFFE archive to a writer .
11243	Returns the values as a string .
11244	Convert a string to a float .
11245	Parse the gain from a string .
11246	Parse device settings string .
11247	Wrap the given text with the specified indent .
11248	Detect device devices .
11249	Set the center frequency
11250	Compute the result and pwr_array .
11251	Wait for the result to finish .
11252	Update the PSD state .
11253	Read pwr_array from file .
11254	Write pw array to file .
11255	Submit a future to the work queue .
11256	Calculate the number of repetitions for the given time .
11257	Generate a list of frequencies for a given interval .
11258	Create a buffer for the given bins .
11259	Sets up the RDD .
11260	Stop stream .
11261	Set the PSD to the given frequency
11262	Perform a sweep .
11263	Set I2CVE address .
11264	Run CMake using CMake .
11265	Filter a list of datetimes .
11266	Mask a datetime .
11267	Return a datetime with zeros for the given datetime .
11268	Return a set of datetimes to keep only the given datetimes .
11269	Given a list of datetimes return a list of datetimes .
11270	Return a set of dates from a list of dates .
11271	Return a list of dates to delete the given dates .
11272	Get SPI control byte .
11273	Reads a bit value from the given address .
11274	Write a bit value to the given address .
11275	Get bit number .
11276	Watches events for the given port function .
11277	Loop over the event_maps .
11278	Activate gpio interrupt .
11279	Set the gpio interrupt edge
11280	Waits until a file exists .
11281	Register a pin function .
11282	Deregisters a pin function .
11283	Enable GPIO interrupts .
11284	Send bytes to the device .
11285	Render the tab .
11286	Returns True if the form has any errors .
11287	Render the link .
11288	Extract the version of a package .
11289	Add the form kwargs to the form .
11290	Check the status of the response .
11291	Generic GET request
11292	Get download link .
11293	Upload a link to a folder .
11294	Upload a file
11295	Upload a remote URL to a folder .
11296	Get status of remote upload .
11297	Returns a list of files in a folder .
11298	Retrieves a list of running conversions for a folder .
11299	Calculate humidity .
11300	Calculate the wwpoint .
11301	Publish a message .
11302	Calculate CRC
11303	Verify that the data is valid
11304	Unpack a storm date string .
11305	Determine whether or not the archive B is B .
11306	wake up the device
11307	send a command to the device
11308	Send a DMPAFT command
11309	Get the newest available air station fields
11310	Parses the fields of the archive
11311	Upload weather data for a station .
11312	Initialize logging .
11313	Return a list of pub services
11314	calculate wind speed
11315	Set wunderground data .
11316	set self . args
11317	Write the configuration to a file .
11318	Decorator that wraps a request .
11319	Initialize the Allow extension .
11320	Return whether this requirement is satisfied .
11321	Push a context onto the stack .
11322	Pop the override context .
11323	Temporarily override this method .
11324	Push a context onto the stack .
11325	Remove this context from the stack .
11326	Context manager for adding additional information .
11327	Unuplicate field names .
11328	Interpret stats output .
11329	Extract params from query
11330	Run a query using the given parameters .
11331	Get a pandas . DataFrame from self .
11332	Get the graph as a MultiDiGraph object .
11333	Plot a pie chart .
11334	Plot the data .
11335	Plot bar chart .
11336	Export the results to a CSV file .
11337	Returns a boolean indicating whether the user has the given permission .
11338	Returns the context data for this widget .
11339	Return the widgets sorted by position .
11340	Returns a list of widgets that need to update .
11341	Register a dashboard widget .
11342	Unregister a widget .
11343	Returns the last update widget .
11344	Retrieves the specified setting .
11345	Save a setting with the given value .
11346	Check if the request should be updated .
11347	Return an array from an array .
11348	Create a new ones .
11349	Concatenate multiple Spark arrays .
11350	Helper function to check if a list of arguments are passed .
11351	Helper function to format axes .
11352	Wrapper around BoltArraySpark .
11353	Align an ndarray to the specified axes .
11354	Convert to Spark .
11355	Compute the TordD along the given axis .
11356	Stack this RDD into a new DataFrame .
11357	Apply a function to each RDD .
11358	Create a new RDD with the given axis .
11359	Apply func to each element in this RDD .
11360	Apply func to each RDD .
11361	Calculate the plan for this mesh .
11362	Remove padding .
11363	Get the number of chunks for a plan .
11364	Split plan into slices .
11365	Return a boolean mask of indices .
11366	Repartition the RDD .
11367	Return a stacked array of elements .
11368	Align the axis to the given axis .
11369	Get the first element of the list .
11370	Compute statistics .
11371	Return the mean of the DataFrame .
11372	Compute the variance of the DataFrame .
11373	Return standard deviation .
11374	Compute the sum along an axis .
11375	Return the maximum of the Series .
11376	Return the minimum of the DataFrame .
11377	Return a chunked chunk of the DataFrame .
11378	Swap keys and vaxes .
11379	Transpose the block .
11380	Swap two axes .
11381	Reshapes all keys and values .
11382	Return the index of the input shape .
11383	Return a new DataFrame with the specified axis .
11384	Cast this RDD to a specified type .
11385	Clip the DataFrame to a new RDD .
11386	Convert the RDD into a numpy array .
11387	Convert argument to a tuple .
11388	Helper function for argpack .
11389	Make sure that the given shape is valid .
11390	Check if two arrays areclose
11391	Convert a list of integers into a list of integers .
11392	Convert a slice into a slice .
11393	Check if new values are transposed .
11394	Check that new values are reshaped .
11395	stack all values in a list
11396	expand an array with extra dimensions
11397	Zip an RDD with index and partitioned partitions .
11398	Wrap a function into a function .
11399	Look up a constructor for a given mode .
11400	Reshape the Ray .
11401	Transpose the array .
11402	Reshape the array .
11403	Transpose this BoltArray .
11404	Create a new ones .
11405	Creates a new symbol with the given shape .
11406	Concatenate multiple arrays .
11407	r Compute discrete likelihood .
11408	Calculate the probability of a given data .
11409	Calculate the discrete alpha of a discrete distribution .
11410	Calculate the best alpha for a discrete distribution .
11411	Calculate the best alpha value for discrete parameters
11412	Plots the density of data .
11413	Compute the lognormal likelihood .
11414	Sanitize a turbo HTML .
11415	Configure analytics .
11416	Return list of tag names for given tags .
11417	Returns the MD5 hash of the encoded key .
11418	Generate a SHA256 hash .
11419	Generate SHA512 hash .
11420	Parse a 32 - bit integer .
11421	Decodes a public key .
11422	Parse command line options .
11423	Process the SSH RSA key data .
11424	Process the SSH key .
11425	Process ecdsa SHA256 .
11426	Processes an ed25519 key .
11427	Parse the SSH2 public key .
11428	Perform a single step .
11429	Process a single token .
11430	List of available mechs .
11431	Store the credentials in the GSSAPI .
11432	Main function .
11433	Initialize distribution .
11434	Context manager to create audio file .
11435	Return HTML for the h5bp page .
11436	Add CSS normalize CSS .
11437	Return HTML for the djfront font - awesome font .
11438	Renders the djfrontiz website .
11439	Return the jfrontend javascript page
11440	Return the jupfront_JFRONT_JFRONT_DEFAULT_DEFAULT_DEFAULT_DEVICES .
11441	Creates a jupyter template for the django data tables
11442	Returns CSS for the jfrontend dataset
11443	Returns the HTML for the jquery data tables .
11444	Return the jupendend of the djfront server .
11445	Generate ScrollToScrollTo scrollto .
11446	Return a jupyter function that renders a jupyter notebook
11447	Returns the CSS for the djfront website .
11448	Return HTML for DJFront Frontend .
11449	Render the textarea with javascript variables
11450	Iterate over authentication hashes .
11451	Calculate the expiration time .
11452	Get user token .
11453	Serialize the user into a dictionary .
11454	Deserialize a profile into a dictionary .
11455	Update a user
11456	Marks an authentication failure .
11457	Check if a user is valid .
11458	Check if the request is secure .
11459	Get username from user
11460	Create a new user .
11461	login a user
11462	logout to the user
11463	Login to the API .
11464	Authenticate with the given username and password .
11465	Logs and returns a user token .
11466	Change the user s password .
11467	Send a forgotten password token .
11468	Reset a user s password
11469	Recursively merges two dictionaries .
11470	Read a file .
11471	Return the AleaId field of an object or None .
11472	Given a list of object ids return a dict of ids .
11473	Return the ObjectMapping for the given model .
11474	Return an object mappings for the given model .
11475	Fetch an object from the model .
11476	Set default forwards for operations .
11477	Set default meta id for models .
11478	Truncate database tables .
11479	Truncate database .
11480	Truncate the database .
11481	Initialize options .
11482	Finalize options .
11483	Run the meteor build .
11484	Convert a path to a directory .
11485	Seed the entropy .
11486	A dictionary containing the color state .
11487	Generate a random string .
11488	Decorator for API endpoint methods .
11489	Generate API endpoints .
11490	Clear the API path map .
11491	Pretty print function .
11492	Validate kwargs
11493	Initialize the connection .
11494	Called when the connection is closed .
11495	Process a UDP message .
11496	Parse DDP frame .
11497	Process a UDP message .
11498	Dispatch a message to a handler
11499	Handle a connection .
11500	Receive a ping message .
11501	Receive a sub .
11502	Receive a subscription .
11503	Receive a method from the API .
11504	Context manager for websocket connection .
11505	Start DDP server
11506	Run the command line .
11507	Print msg if verbosity is greater than 1 .
11508	Stop the daemon .
11509	Start the DDP server .
11510	Connect to the PostgreSQL server .
11511	Process a notification .
11512	Patch threading .
11513	Generate a random ID .
11514	Autodiscover API .
11515	Return the result as a dictionary .
11516	Get an object by name .
11517	Emit a record .
11518	Creates a coroutine that will be applied to the application .
11519	Add a route context to the application .
11520	Add a route to a resource .
11521	Run the application .
11522	Send a message .
11523	Push notification to APNS .
11524	Fetch inactive registrations .
11525	Send a GCM message
11526	Send a bulk request to GCM .
11527	Send data to GCMP .
11528	Send data to the API .
11529	Returns a model class from module_location .
11530	Run fast forward selection algorithm .
11531	Search Giphy .
11532	Translate Giphy text to Google API .
11533	Return a list of trending objects .
11534	Retrieve a gif by its id .
11535	Wrapper for screensaver .
11536	Upload tags to a file .
11537	Convert values to int
11538	Fetch data from an endpoint
11539	Translate a term or phrase to GIF
11540	Return generator of Giphy images .
11541	Returns a GiphyImage object
11542	Upload a gif to a file .
11543	Create an AccessControl element
11544	Authenticate with Google API .
11545	Upload a video entry
11546	Check the status of a video
11547	Update a video .
11548	Delete a video .
11549	Check the availability of a video .
11550	Show a video .
11551	List videos of a user .
11552	Upload a file to the youtube server
11553	Upload a video
11554	Redirect to the upload .
11555	Remove a video from the database .
11556	Fetch a video .
11557	Create or update the video
11558	Delete video
11559	Updates the metadata .
11560	Updates a metadata field .
11561	Update this item .
11562	Parse a string .
11563	Return a string representation of the tree .
11564	Load a YAML file .
11565	Read data from a file .
11566	Parse a node .
11567	Create a node .
11568	Return a newick string for this tree .
11569	Return ASCII art .
11570	Return the node with the given label .
11571	Prune the tree .
11572	Resolve Polytomies .
11573	Remove internal names .
11574	Remove leaf names .
11575	Decorator to ensure that the user is authenticated .
11576	Disposes a JSON string
11577	Raise an exception if the given feature is not defined .
11578	Get an argument from the request .
11579	Get a list of parameters from the request .
11580	Wrap a callback function .
11581	Get a cookie .
11582	Clear a cookie .
11583	Redirect to the authenticated user .
11584	Get the authenticated user
11585	Generate request parameters .
11586	Redirect to the user .
11587	Make a request to the Facebook API .
11588	Get an authenticated user .
11589	Concatenate url and add it to url
11590	Parse a header line .
11591	Add an HTTP header .
11592	Get a list of HTTP headers .
11593	Parse a single line
11594	Parse headers .
11595	Normalize headers .
11596	Convert value to UTF - 8 encoding .
11597	Convert value to unicode .
11598	Convert value to bytes .
11599	Recursively convert object to unicode
11600	Make sure that this plugin is registered .
11601	Iterate over all subclasses of cls .
11602	Select the policy based on the given origin .
11603	Calculate occupancy of a grid
11604	Write a grob box to a file .
11605	Write a PDB file .
11606	Determine molecule numbers .
11607	Resize the PBC area for the given lipids .
11608	Write a topology file .
11609	Iterate over the contents of a file .
11610	Queue a message for a user .
11611	Send a message to multiple users .
11612	Get all messages for a user .
11613	Add messages to the session .
11614	Validate the config file .
11615	Verify that the profile name is valid .
11616	Set data from cfg to cfg
11617	Retrieve username and password from config .
11618	Update the configuration data for the given message .
11619	Update the pwd .
11620	Create a new config profile .
11621	Displays required items .
11622	Get data from user
11623	Get authentication information from user
11624	Configure a profile .
11625	Write data to cfg
11626	Write auth info to cfg
11627	Add attachments to the message .
11628	Send the message
11629	Send a message .
11630	Return a message factory .
11631	Creates a credential property .
11632	Validate a property .
11633	Validate input .
11634	Validator for Twilio attributes
11635	Validate slack post .
11636	Validate the value of a WhatsApp .
11637	Coroutine to send messages .
11638	Add a message to the coroutine .
11639	Get the body from a file .
11640	Removes the arguments from the kwargs dict
11641	Send a message .
11642	Get chat id
11643	Send content to the server .
11644	Send the message .
11645	Get the SMTP server for the given address .
11646	Generate an email .
11647	Add headers to the message .
11648	Attach the body to the message .
11649	Add attachments to the message
11650	Connect to the SMTP server .
11651	Return an SSL .
11652	Create a TLS session .
11653	Send the email .
11654	Save the tag to a file .
11655	Unload the image .
11656	Get the region of the image .
11657	Validate the configuration .
11658	Remove all containers .
11659	Return a byte representation of the Packet .
11660	Read the file .
11661	Delete the chunk .
11662	Resize the chunk .
11663	Insert a new chunk .
11664	Save the ID3 data to a file .
11665	Delete a file .
11666	Parse a file .
11667	Process a single line .
11668	Add lines to the source .
11669	Draw a string on the given font .
11670	Parse an ISO 8601 time string into a datetime object .
11671	Make a list of words .
11672	Make HTML word from word .
11673	Make HTML paragraph .
11674	make html code
11675	Make a list of HTML items .
11676	Save the metadata to file .
11677	Update parents .
11678	Run the program .
11679	Register a mapping .
11680	Retrieves a controller instance .
11681	Registers a freeform key .
11682	Return the HMAC signature of a string .
11683	Generate HTTP request headers .
11684	Send a request to Route53 .
11685	Send GET request
11686	Send a POST request
11687	Send a DELETE request .
11688	Convert value to an APEValue .
11689	Send a request to the server
11690	Perform an API call .
11691	List the hosted zones .
11692	Create a hosted zone .
11693	List resource record sets .
11694	Change resource record sets .
11695	Draw an image on the image .
11696	Draws a region of the image .
11697	Calculate the header size .
11698	Replace old_pages with new_pages .
11699	Find the last page of a stream .
11700	Set a section .
11701	Add a new markup .
11702	Processes content .
11703	Return the markup object for the given tag name .
11704	Create a new HostedZoneRequest .
11705	Lock fileobj .
11706	Insert bytes into a file object .
11707	Delete bytes from a file object .
11708	Convert data to UTF - 8
11709	Add a change .
11710	Parse an e - change XML element .
11711	Measure the width of a string
11712	Check if this object has been modified .
11713	Delete this zone record .
11714	Save this record set to the server .
11715	Parses ID3v1 v3v1 tag .
11716	Creates an ID3v1 v1v1 v1 v1 v1 v3 .
11717	Perform a full read of the fileobj .
11718	Delete all values from the dictionary .
11719	Add a tag to the frame .
11720	Update common features .
11721	Convert the header to V24 format .
11722	Unload a sound .
11723	Play a sound .
11724	Set loop points for loops .
11725	Return a list of glyphs and values .
11726	Filter glyph names based on filter .
11727	Dump the encoding .
11728	Dump an array to a file
11729	NAME glyph names . py
11730	Check if a file exists
11731	Make a list of file names .
11732	Parse a HostedZone object .
11733	Parse a zone set element .
11734	Convert blocks to bytes .
11735	Group padding blocks .
11736	Delete the contents of the file .
11737	Save the metadata to a file .
11738	Parse an rrrset alias .
11739	Parse r_rrset record records .
11740	Parse an r_rrset .
11741	Delete this HostedZone .
11742	Create a new record .
11743	Create a new resource record .
11744	Create a new AAA resource record .
11745	Create a CNAME record .
11746	Create a new MXResourceRecordSet .
11747	Create a new NS resource record .
11748	Create a new PTR resource record .
11749	Create a SPF record .
11750	Create a new SRV resource record .
11751	Create a new TXT record .
11752	Register a TXXX key .
11753	Get the values for a Route53 change .
11754	Writes a change to XML .
11755	Generate XML for ChangeRecordSetsRequest .
11756	Initialize logging .
11757	Return the item associated with the given alias .
11758	Freeze a dictionary .
11759	Join HTML attributes into a string .
11760	Integrate the given app .
11761	Initializes all bars .
11762	Bind a bar to the bar .
11763	Return the arguments as a dictionary .
11764	The URL for this endpoint .
11765	Returns True if current request is current
11766	Validate a metric class .
11767	Get a stat by name .
11768	Calculate statistics .
11769	Auto - discover gadgets .
11770	Returns a csv dump of the metrics
11771	Handle maintenance events .
11772	Return a list of values from a GET variable .
11773	Get a GET parameter from the request .
11774	Get next colour
11775	Get gecko params
11776	Displays the number of the latest statuses
11777	Display the metrics in gecko bar .
11778	Generates a line chart of the metrics .
11779	Return a tuple of the gecko gecko gecko .
11780	Displays a list of metrics on a page .
11781	Get gadgets .
11782	Register gadgets .
11783	Get the context data .
11784	Print an error message and exit .
11785	Validate parameters .
11786	Prompt the user for long lines .
11787	Prompt user for list input .
11788	Prompt for user input .
11789	Return a DataFrame of games for the given year .
11790	Returns the winner of the game .
11791	Return the current season .
11792	Return a pandas DataFrame of starters .
11793	The surface of the game .
11794	Returns the coinoss value for the game .
11795	Get the weather .
11796	Return information about the team .
11797	Get a Pandas DataFrame of games for a particular season .
11798	Return a pandas DataFrame of standings .
11799	Return a DataFrame with team stats table .
11800	Return a DataFrame of roy votes .
11801	Returns a DataFrame containing the line score scores .
11802	Return the current season .
11803	Get stats from the game .
11804	Decorator to change the working directory .
11805	Decorator for caching functions .
11806	Get the unique key for the given class and arguments .
11807	Memoization decorator .
11808	returns the age of a person
11809	Get stats table .
11810	Returns the stats for each game .
11811	Get totals table .
11812	Return the per minute per minute
11813	Retrieve the per - 100 per - 100 per - per - 100 per - 100 per - per - 100 per - 100 per - 100 per - per - 100 per - per - 100
11814	Get advanced stats table .
11815	Retrieve the robot s kicking state .
11816	Return statistics about the advanced PBP .
11817	Return a Pandas DataFrame with the basic rosters for the given year .
11818	Get session data .
11819	Extract details from details .
11820	Add team and opp .
11821	Add features to a DataFrame .
11822	Calculate the probability of a line .
11823	Returns a pandas DataFrame containing the games that have been played .
11824	Retrieve a list of year awards .
11825	The name of the team .
11826	Return box scores for a given year .
11827	Return pq tag for given year .
11828	Get the head coaches by team .
11829	Get a DataFrame of games for a given year .
11830	Return the asset coordinator for the given year .
11831	Return the Visual Coordinator for the given year .
11832	returns the url of a year
11833	Returns the winner scheme .
11834	Returns the Defignment for the given year .
11835	Returns a DataFrame with the split values for the given year .
11836	Get html from url
11837	Flatten links .
11838	Convert relative url to id
11839	Convert keyword arguments to a query .
11840	Read data from disk .
11841	Return a new guard .
11842	Get a direct guard .
11843	Close the socket .
11844	Read a dataset from an HDF5 file .
11845	Get the last block from path .
11846	Get a queue of processes .
11847	Get a generator from a queue .
11848	Parse the given file .
11849	Write pb_objects to file .
11850	Read a varint .
11851	Read objects from the file .
11852	Close the socket .
11853	Write pb2 objects to the buffer .
11854	Flushes the buffer to the output .
11855	Get the directory of the game .
11856	Perform a key press on the input .
11857	Make a fake movie .
11858	Evaluate all traits .
11859	Wait until a condition is reached .
11860	Wait until an element is present .
11861	Sets the ignored_exceptions .
11862	Returns the current volume
11863	Return the source of the main source .
11864	Send a message
11865	Returns the current state of the device .
11866	Power off the device .
11867	Power on the device .
11868	Set the volume .
11869	Set the slave source
11870	Decodes a request .
11871	Calculate the CRC32 of a plaintext .
11872	Obfuscate a value .
11873	print missing schema
11874	get the list of all href links
11875	check song name
11876	Parse a song
11877	return google url
11878	Parse Google website url
11879	Parse Google Music website .
11880	Download html response
11881	Download a file from a url
11882	Download a file using wget
11883	Returns a list of UUIDs by city name .
11884	Get information about a given location .
11885	Parse observation response .
11886	Get information about a station .
11887	Return a list of search paths .
11888	List of compiled compiler extensions
11889	The mimetype .
11890	Return the result mimetype .
11891	Returns the compiler format extension .
11892	Register processor .
11893	Unregister a processor .
11894	Return the list of paths to finders .
11895	Register default values .
11896	Import Qt core .
11897	Return a netnode object .
11898	Add plugin plugin name .
11899	Delete plugin plugin plugin name
11900	Import settings from config file
11901	Export settings to config
11902	Returns the directory associated with this plugin .
11903	Iterate over the IDs in the database .
11904	Simple error handler .
11905	Get information about a table .
11906	List all DynamoDB tables .
11907	Fetch items
11908	Get metadata id from metadata
11909	Get the timestamp of a metadata item .
11910	Fetches the crate owner team .
11911	Fetches the owner_user attribute of a crate .
11912	Fetch the versions of a crate .
11913	Fetches the version download for a crate .
11914	Fetch the crate data
11915	Get the summary .
11916	Get all crates .
11917	Get a crate by ID
11918	Fetch a crate attribute .
11919	Fetch items from the API
11920	Fetch items
11921	Fetch items at the given category
11922	Get all questions
11923	Fetch events
11924	Determine if metadata was updated .
11925	Determine the category of metadata .
11926	Get items from ReMo API
11927	Get the buffer list .
11928	The io priority value .
11929	Close the IO queue .
11930	Submit a list of blocks .
11931	Cancel a block .
11932	Cancel all pending transfers .
11933	Get a list of events from this stream .
11934	Fetch events
11935	Get all cells
11936	Parse the feed
11937	Return a sorted list of export formats .
11938	Return the permission factory .
11939	Create a blueprint blueprint .
11940	Create a url rule .
11941	Show a record .
11942	Default view method .
11943	Export a record .
11944	Call a callable with the given name .
11945	Close the socket .
11946	Remove a client .
11947	Increment a counter .
11948	Send a timing request .
11949	Log timing information .
11950	Set a gauge .
11951	Add a gauge delta .
11952	Set a metric .
11953	Send a request to the server .
11954	Create a batch client .
11955	Get a unit client .
11956	Flush all pending batches .
11957	Create a custom permissions checker .
11958	Create a batch client .
11959	Flush all pending batches .
11960	Get the unit client .
11961	Convenience function to create a single user .
11962	Interpret an object as an OpenMath object .
11963	Convert term to openmath .
11964	Convert an OMObject into a Python object .
11965	Convert obj to OpenMath object .
11966	Register a conversion function to openmath .
11967	Decorator for deprecated conversions .
11968	Initialize the Flask application .
11969	Yield valid choices .
11970	Split model fields into model fields .
11971	Decorator to register a function .
11972	Create a value from the registry
11973	Returns default form data and form data .
11974	Decorator to check if a field is required .
11975	Decorator for field choices .
11976	Returns a string representation of a decimal field .
11977	Returns the data for the email field .
11978	Retrieve data from a date field .
11979	Returns a string representing a datetime field .
11980	Returns a string containing all valid float values for a given field .
11981	Returns a list of valid integer values for the given field .
11982	Generate a time field .
11983	Generate a random choice field .
11984	Return the data for multiple choices .
11985	Choose a random field from the queryset .
11986	Encode an object into bytes .
11987	publish package
11988	Tag the given version .
11989	Decorator to check if field is empty
11990	Load a global variable
11991	Create a pickled instance from an instance .
11992	Return an OML expression .
11993	Creates a tuple symbol
11994	Decode binary data .
11995	Encode a byte string .
11996	Convert a number to a fixed number .
11997	Format a number .
11998	Convert number to money
11999	Convert data to numpy array .
12000	Convert an array to blosc .
12001	Add a workspace .
12002	Remove a workspace .
12003	List workspaces
12004	Retrieves a ws . ws
12005	Check if a repository exists .
12006	Sync workspace .
12007	Clone a repository .
12008	Check version of pypi .
12009	Return the voxels of an ndarray .
12010	Convert a list of voxels into a numpy array .
12011	Execute shell commands .
12012	print the changes
12013	Set a console handler
12014	Execute a shell command .
12015	Load a PNG file .
12016	Save numpy data to file .
12017	Save numpy arrays into numpy arrays .
12018	Print the status of a workspace .
12019	Print the status of a repository
12020	Get the block size .
12021	Post cutout data .
12022	Load a tiff file .
12023	Saves numpy data to file .
12024	Load data from multi - layer TIFF file .
12025	Write the configuration file
12026	Clone the repository .
12027	Get the version of yoda .
12028	Mix a name and compare it .
12029	Wrap the command line options .
12030	Get a list of reserved ids
12031	Merge multiple ids
12032	Set the state of a channel
12033	List all projects in a dataset
12034	Get a dataset by name
12035	List all available datasets
12036	Parse subparser .
12037	Show workspaces .
12038	Show workspace .
12039	Show all workspace names
12040	Generate the URL for the given endpoint .
12041	Guess the format from a file extension .
12042	Opens a file .
12043	Convert input files to out_file format .
12044	Build a graph .
12045	Compute invariants for a graph .
12046	Convert a graph to a file .
12047	Convert a list of RAMons into a dictionary .
12048	Return RAMON type .
12049	Delete a channel .
12050	Add a dataset .
12051	Convert ndarray to JSON .
12052	Creates a dictionary representation of the dataset
12053	Create a channel dict
12054	Creates a project dict
12055	Identify image sizes .
12056	Upload data to ndio
12057	Find a workspace .
12058	Get all public tokens .
12059	Get project info .
12060	Set remote metadata .
12061	Make a request to the given URL .
12062	Make a POST request
12063	Perform a DELETE request .
12064	Load neural network layers from an HDF5 file .
12065	Save array to HDF5 file .
12066	Infer gaps in a tree
12067	Recover a list of bytes and return the result .
12068	Install the translation translations .
12069	Expects a set of A and B .
12070	Calculate percentage of parts
12071	Get stats from the cache
12072	Retrieve slabs from cache .
12073	Return a dictionary with context data .
12074	Status of memcache .
12075	Dashboard dashboard .
12076	Show memcache statistics .
12077	Show the slabs for a server .
12078	Convert a number to a human readable string .
12079	Find a Config object
12080	Add directories .
12081	Apply configuration to the file .
12082	The absolute path of the file .
12083	Read the file .
12084	Write data to file .
12085	Configure the logger .
12086	Create the file .
12087	Applies the given applicator to all children .
12088	The absolute path of the container .
12089	Remove the directory .
12090	Called when the child is ready .
12091	Cleanup the cache .
12092	Return the path to the given file .
12093	List all files in the directory .
12094	Write data to file .
12095	Read a file .
12096	Add one or more files .
12097	Save the configuration to disk .
12098	Load the yaml file
12099	Cleanup the temporary directory
12100	Load plugins from a directory
12101	Recursively update target dictionary .
12102	Retrieves a child node
12103	Resolve the key path
12104	Get the value of the field
12105	Update the configuration with the given data .
12106	Load configuration from file .
12107	Apply config to a string .
12108	Build the callback URL .
12109	Read socket input .
12110	Send the output to the server .
12111	Send an RPC request .
12112	Read data from socket .
12113	Send data to socket .
12114	Decorator to check if a link lock is invoked .
12115	Get remote settle modes .
12116	Configure the node .
12117	The address of the source .
12118	The target address .
12119	Called when the parent session is closed .
12120	Create a new sender .
12121	Request a sender link .
12122	Create a new receiver .
12123	Request a Receiver Link .
12124	Destroy a link .
12125	Close the session .
12126	Process an endpoint event .
12127	Add mark patterns .
12128	Called when a remote connection is closed .
12129	Called when the receiver failed .
12130	Return host and port .
12131	Connect to host and port .
12132	Create a server socket .
12133	Check if all connections need to be processed .
12134	Decorator to check if the connection lock is not acquired .
12135	Process the connection .
12136	Read data from the output stream .
12137	Create a new sender .
12138	Reject a sender .
12139	Create a receiver .
12140	Called when a connection failed .
12141	Event handler .
12142	Called when the connection is closed .
12143	Handle a protocol error .
12144	Decorator for Twilio views .
12145	Get the color string .
12146	Returns a dictionary with all the fonts in the search path
12147	Set compression flag .
12148	Add an object to the buffer .
12149	Write a stream to the page .
12150	Write stream .
12151	Add a page to the document .
12152	Set the color scheme .
12153	Create the default font .
12154	Add a page .
12155	Set font size .
12156	Add text to the document .
12157	Add a newline .
12158	Add a pie chart .
12159	Output the pages .
12160	Get the orientation changes .
12161	Output font files .
12162	Output all images .
12163	Output the contents of the object .
12164	Transform the current matrix .
12165	Returns the absolute position of the pixel at the specified coordinates .
12166	Set style .
12167	Rotate a point
12168	Set the object s information .
12169	Set display mode
12170	Close the document .
12171	Write the PDF header .
12172	Write pages .
12173	Write resource dictionary .
12174	Connect to the database .
12175	Write catalog .
12176	Write the trailer to the database .
12177	Iterate over the tensor .
12178	Apply a function to a sequence of sequences .
12179	Generator for gosper .
12180	Generator for brent .
12181	Return True if x is less than the test length
12182	Determine if y is fit within the range
12183	Returns True if x is greater than x .
12184	Checks if the y coordinate is greater than the given test_ordinate .
12185	Returns a copy of the cursor .
12186	Add x to x .
12187	Add y to y .
12188	Draw the QR code .
12189	Create a new label .
12190	List all tags .
12191	Get labels by name .
12192	Updates a label
12193	Delete a tag .
12194	Create a tagit .
12195	List tags .
12196	Return all tags that have a label .
12197	Creates a hook
12198	List all hooks .
12199	Updates a hook .
12200	Creates a new Alert .
12201	Get alerts by type .
12202	Updates an alert
12203	Setup extension extension .
12204	Return the path to the themes .
12205	Do a POST request
12206	List all logs
12207	Get a specific log set .
12208	Searches for anattacker that matches the given position .
12209	Calculate duration
12210	Updates limit parameters .
12211	Compute and return the RDDs .
12212	Binary object .
12213	Free memory .
12214	Receive data from the socket .
12215	Yield lines from the buffer .
12216	Generator that yields buffered bytes .
12217	Return the next status code .
12218	Generate info .
12219	Return an info message .
12220	Send a command to the server .
12221	Retrieve capabilities .
12222	Set mode reader status .
12223	Send QUIT command .
12224	Get the date .
12225	Send HELP command .
12226	Generate new groups .
12227	Generate new news info .
12228	Generate new news
12229	Get list - active list .
12230	List active times .
12231	List newsgroups .
12232	Generator for listing overview .
12233	List extensions .
12234	Generate the list generator
12235	Return a list of values .
12236	Get group information .
12237	Get the next article .
12238	Send an article .
12239	Send HEAD command .
12240	Get the body of a message .
12241	Get XGT title .
12242	Send XHDR command .
12243	Send XZDR command .
12244	Emulate XOVER command .
12245	Generate a XAT message .
12246	Generate pattern patterns .
12247	Compress a compressed feature .
12248	Send a POST request
12249	Convert value to offset .
12250	Convert string to timestamp .
12251	Convert string to datetime object .
12252	Perform a POST request .
12253	Perform a DELETE request .
12254	Perform a GET request
12255	List scheduled queries .
12256	List all tags .
12257	Get tags by name or id
12258	Create an alert notification .
12259	Delete a tag .
12260	Create a new scheduled query .
12261	Create a new alert .
12262	Deletes the specified tag .
12263	Convert a range into a string .
12264	Parse newsgroup info
12265	Parse a header line .
12266	Convert a dictionary of header values into a string .
12267	Handle POST request .
12268	Run a list of tests .
12269	returns a docstring for the defaults
12270	Add default kwargs to a function .
12271	Generate a docstring for this class .
12272	Set the value .
12273	Check if value is of type .
12274	Return the model .
12275	Check if value is scalar .
12276	The symmetric error .
12277	Set the errors .
12278	Set parameter values
12279	Import the metrics from the API
12280	Extract metrics from a list of metrics
12281	Filter metrics by filter expression
12282	Calls the API call
12283	Return an expression that matches the given text .
12284	Process operator .
12285	Op_add .
12286	Initialize required properties .
12287	Returns a list of Parameter objects .
12288	Return a list of parameter values .
12289	r Returns a list of parameter errors
12290	Clear derived values .
12291	Set the method .
12292	Get environment variables .
12293	Get the URL parameters .
12294	Perform a GET request
12295	Perform a DELETE request
12296	Perform a POST request
12297	Perform a PUT request
12298	Call the API .
12299	Validate the sceneInfo .
12300	Verify that the satellite is valid
12301	Get the size of a remote file
12302	Download the scene
12303	r Validates a list of bands
12304	Establish connection to Earthexplorer
12305	Returns a function that prefixed by prefix .
12306	Convert a string to a timezone .
12307	Normalize datetime .
12308	Join the given iterable .
12309	Return a list of newline positions .
12310	Transform a point to a source .
12311	Dump the results .
12312	Remove metrics from the results .
12313	Create a fortune object from a list of files .
12314	Generate a set of random fortunes .
12315	Run the application .
12316	Return a rule .
12317	Handle special cases .
12318	Generate the grammar .
12319	A list of Rule objects .
12320	List of comments .
12321	Return a list of directive directives .
12322	Return the compiled source code .
12323	Compile the parser .
12324	Returns the import directives .
12325	Returns the token type enum .
12326	Return the class definition .
12327	Find the entry point .
12328	Return the definition of a rule .
12329	Get the source of a rule .
12330	Return the transform for a rule .
12331	Convert an expression to ASN .
12332	Convert a node to an ASN string .
12333	Given a list of operands return a new list of operands .
12334	Remove grouping groups .
12335	Convert AST to code .
12336	Convert an AST node to an AST node .
12337	Convert an AST to a string .
12338	Convert an AST option group to an AST .
12339	Convert an AST repetition group to a code block .
12340	Return the code for an AST node .
12341	Convert an AST node to an AST node .
12342	Convert an AST node into an AST .
12343	Convert an AST expression to a code block .
12344	Convert an AST operand to an expression .
12345	Convert an operand to a code block .
12346	Find directives that match the predicate .
12347	Determines if the child is a child of the parent .
12348	Parse directive definitions .
12349	Process the results .
12350	Return a new wx . id .
12351	remove a hotkey
12352	Add command line arguments
12353	Configure logging .
12354	Validate the arguments
12355	Convert infix nodes to postfix .
12356	Convert a list of nodes to an Optree node .
12357	Reduce a list of nodes .
12358	Add command line arguments
12359	Load the manifest
12360	Get a metric definition by its name .
12361	Returns the length of the columns in the table
12362	Returns the maximum width and description of the metrics
12363	Escape metric names .
12364	Print the markdown header .
12365	Print the metric markdown .
12366	Generate Markdown documentation .
12367	Parse the input .
12368	Attempt to determine the most recently consumed text .
12369	Add command line arguments
12370	Parse a time string .
12371	Output the results of a CSV .
12372	Outputs a JSON formatted string .
12373	Output raw JSON data
12374	Convert text to XML .
12375	Determines if a parse node is a terminal .
12376	Pretty print a node .
12377	Return a function to extract a repetition .
12378	Get a terminal node .
12379	Get a repetition .
12380	Wrapper around extractor .
12381	Count the number of leading whitespace characters .
12382	Call extractor .
12383	Get current position .
12384	Return True if all children are empty .
12385	Add ignored items .
12386	Check if value is a type .
12387	Return a new ParseNode with flattened values .
12388	Return a new ParseNode with the given pred .
12389	Return a new ParseNode with the merged children .
12390	Return a new parse node with new type .
12391	Return a copy of this parse node .
12392	Return the current position .
12393	Return the maximum read position .
12394	Move to the next character .
12395	Move to the next line .
12396	Move the previous line to the previous line .
12397	Return the last readed line .
12398	Increment the cursor position .
12399	Save current cursor position .
12400	Restores the cursor .
12401	Return a string representation of the notification .
12402	Set internal name .
12403	Return the number of variables .
12404	Count the number of functions .
12405	Update the number of functions .
12406	Update the scope with the current scope .
12407	Return a new scig .
12408	Update the intersection with the given oset .
12409	Return a new scope with the given signature .
12410	Update the scope with the given oset .
12411	Return a new Scope with the given sigig .
12412	Update the symmetric difference with the given oset .
12413	Return a new instance with symmetric difference .
12414	Add a signature .
12415	Remove a signature from the set .
12416	Discard the signature .
12417	Return a list of all signature values .
12418	Return the first signature .
12419	Return the last signature .
12420	Get a signature by key .
12421	Get a Scope by its name .
12422	Get a signature by its name .
12423	Return a list of all symbols that have been declared .
12424	Call the astlatorInjector injector .
12425	Normalize an AST .
12426	Set nodes from another node .
12427	Return an iterator of rvalues .
12428	Check if a hit is ok
12429	Compute the signature for this parameter .
12430	Return the resolution of this expression .
12431	Get the resolved names of the given type
12432	Set the resolution of a type .
12433	Delete a local file
12434	Delete a file from S3
12435	Delete a file .
12436	Save object to local file .
12437	Save object to S3
12438	Saves object to file .
12439	Finds files in S3
12440	Create enum instance .
12441	Checks that the function s arguments are valid .
12442	Add a callobject to the chain .
12443	Decorator to add a method to a class .
12444	Decorator to register a hook
12445	Decorator to register a rule
12446	Decorator to register a class .
12447	Decorate a class decorator .
12448	Bind dst to rule node .
12449	Reads an EOF character .
12450	Persist the rule_nodes and tag_nodes .
12451	Pops the rule_nodes .
12452	Return the value of a node .
12453	Add a parsed stream .
12454	Begin a tag node .
12455	Mark the end of a tag .
12456	Set the rules .
12457	Set the hooks .
12458	Set the directive directives .
12459	Evaluate a rule .
12460	Evaluate a hook .
12461	Return True if the given text is at the end of the stream .
12462	Read one character .
12463	Read a single character .
12464	Read until the stream is read .
12465	Ignore whitespace .
12466	Set the hit_dtype attribute .
12467	Set the cluster dtype .
12468	Check that the structure conforms to the structure .
12469	Add a rule name to the namespace .
12470	Add rules to the rule tree .
12471	Add a rule to the rule .
12472	Add sequences to the parser .
12473	Add an alternative to the parser .
12474	Add a range to the sequence .
12475	Add a new RPT node .
12476	Add a capture to the sequence .
12477	Add a new binding to the sequence .
12478	Add a hook to the sequence .
12479	Set pair of parameter .
12480	Process a parameter .
12481	Handle a parameter .
12482	Handle a parameter .
12483	Set the name of a hook .
12484	Add a parameter pair .
12485	Evaluate the EBNF rules .
12486	Ignore C code .
12487	Add a new state .
12488	Return a dot representation of the graph .
12489	Write the graph to a dot file .
12490	Write the graph to a PNG file .
12491	Return the ls data as a string
12492	Return the next state
12493	reset living state
12494	Infer block body .
12495	Infer subexpr .
12496	Infer the type of identifier .
12497	Infer a literal .
12498	Dump map nodes
12499	Parse the topython rule .
12500	Return the exit scope .
12501	Parse a statement .
12502	Return an astroid . Call node .
12503	Return an astroid .
12504	Return an astroid . Hook node .
12505	Return EvalRule node .
12506	Visit a capture node .
12507	Return an AST node .
12508	Return an alternate statement .
12509	Visit a Seq node .
12510	Visitor for expr .
12511	Return ast .
12512	Return a statement as a statement .
12513	Concatenate src to dst .
12514	Set indentation level .
12515	Convert a list into a string
12516	Print a list of nodes .
12517	Populate the edges from a sequence .
12518	Populate a state register with a state register
12519	Build a state tree from a list of Statements .
12520	Return True if predicate is equal to val .
12521	Create a grammar from a string .
12522	Load a Grammar from a file .
12523	Parse the grammar .
12524	Parse a file .
12525	Set node to dst
12526	Set node value as an integer .
12527	Get a subnode .
12528	Default serializer .
12529	Get all deposits and return them .
12530	Serialize a deposition .
12531	Get a list of ids from a given date .
12532	Get a list of ids from a given date .
12533	Return BibDocs and BibDocs .
12534	Dump a bibdocfile
12535	Get the number of checks .
12536	Check BibDoc .
12537	Serialize an object to JSON .
12538	Get the number of users .
12539	Dump an instance .
12540	Get the featured community .
12541	Get a set of modified ids from a given date .
12542	Retrieve modified records from a given date .
12543	Get all the restrictions for a collection .
12544	Retrieve the records for a given record .
12545	Get all collections of a record .
12546	Dump a record as a JSON string .
12547	Retrieve a list of bibdoc records .
12548	Dump a record
12549	Serialize RA to JSON .
12550	Load all objects .
12551	Return a dictionary mapping entry points to their entries .
12552	Initialize the application context .
12553	Memoize a function .
12554	Return run_sql .
12555	Get all connected roles for an action .
12556	Get information about an account .
12557	Serialize token to JSON
12558	Load OAuth token .
12559	Import a record .
12560	Import config var from config var
12561	Dump an object to a dictionary .
12562	Retrieve users from invenio 10 .
12563	Retrieve users .
12564	Serialize uuid .
12565	Load deposit data .
12566	Create a record and PID .
12567	Import record_dump .
12568	Load dump records .
12569	Display all records in a dump .
12570	Load dump files .
12571	Load communities .
12572	Load users from sources .
12573	Load dependencies from sources .
12574	Get profiling statistics .
12575	Run the server .
12576	dump the profiler
12577	Delete profile .
12578	Delete the profile .
12579	Get status .
12580	Disable timestamp on the request .
12581	Load a user profile .
12582	Calculate translation of images .
12583	Merge images into multiple images .
12584	Concatenate one or more ones .
12585	Create or update a record .
12586	Create a new record .
12587	Update a record .
12588	Create persistent identifiers .
12589	Delete a record .
12590	Create files in record .
12591	Create a file instance .
12592	Delete all buckets from a record .
12593	Return a list of PIDs that are missing .
12594	Prepare revisions .
12595	Prepare files
12596	Prepare PIDs .
12597	Return True if the current revision is deleted .
12598	Load a community .
12599	Load a FeaturedCommunity .
12600	Dump a thing .
12601	Check a thing .
12602	Deletes the widget
12603	Returns the magnitude of a vector
12604	Normalize vector .
12605	Transform tex_coords
12606	Ensures that the bones are present .
12607	Set the length of the bone .
12608	Set the parent .
12609	Returns the pivot point of the pivot point .
12610	start animation
12611	Set the state of the object .
12612	Unset the current state .
12613	Set the state of the region
12614	Unset the state
12615	Ensures the model data is created .
12616	Redraw the scene .
12617	Render the given object .
12618	Sets the model .
12619	Write toxml report to a file .
12620	Create toxml xml .
12621	Add a new menu to the window .
12622	Redraw the label .
12623	Redraw the label .
12624	Draws the background .
12625	Delete widget .
12626	Redraw the label .
12627	Register event handlers .
12628	Register event handlers .
12629	Add the main label
12630	Add an OK button
12631	Exit the dialog .
12632	Add button
12633	Add a cancel button
12634	Update the progress bar .
12635	Render all actors .
12636	Renders the scene .
12637	Create a context manager for a step .
12638	Returns true if the given resource exists .
12639	add a category
12640	Get the missing texture
12641	Get model by name .
12642	load a model
12643	Return model data
12644	Load data from a JSON file .
12645	Add a widget to this container .
12646	Draws the menu .
12647	Redraw the image
12648	Redraw the scrollbar
12649	Checks if a mouse is inside a mouse
12650	Calculate the p .
12651	Add a layer to the stack .
12652	Get a region of the IndirectArray .
12653	Draw all buffers .
12654	Add an action .
12655	Perform an action .
12656	Registers a new identifier
12657	Add a layer .
12658	Draw all layers .
12659	Delete all layers .
12660	List of borders .
12661	Returns a new list with the current offset .
12662	Returns the size of the widget
12663	Read a mesh from an HDF5 file .
12664	Make the network connection matrix .
12665	Set the list of fields
12666	Add fields to self . fields
12667	Check element types .
12668	The space of the element .
12669	Calculate the centroids and volumes of the mesh .
12670	Compute angles .
12671	Plot edges .
12672	Compute statistics for the cluster .
12673	Convert an element set to a node set .
12674	Convert node set to surface surfaces
12675	Add elements to elements .
12676	Return metadata for all fields
12677	Return metadata for this step .
12678	Make the work directories
12679	Run post - processing .
12680	Run the gmsh file .
12681	Read a history report .
12682	Read a field report
12683	convert a list to a string
12684	Produce an equation string .
12685	Return a UNSorted set of labels .
12686	Parse the response .
12687	Make a HTTP GET request
12688	Writes x y data to file .
12689	Write a field report
12690	List available components .
12691	Return the error message for the field .
12692	Check if an exception is thrown by the descriptor .
12693	Set the data .
12694	Determine the mode of an axis .
12695	Set axis options
12696	Create a descriptor class .
12697	Loop over datafeeds .
12698	Try to convert value to float .
12699	Convert string to int .
12700	Plot a graph .
12701	Force unicode to unicode .
12702	Clean HTML .
12703	Return True if mime_type matches include_mime_type .
12704	Clean up the domain name .
12705	Split a domain name into a list of domain names .
12706	Make a hash for the given token .
12707	Return a Counter of words in the current context .
12708	Index keywords .
12709	Invert hash keywords .
12710	Get the document frequency for each hash .
12711	Look up stream ids .
12712	Return a tuple of stream ids .
12713	Iterate over stream items .
12714	Create streamitem .
12715	Create a ContentItem from a node .
12716	Reads a varint .
12717	Read a block .
12718	Serialize a streamItem key .
12719	Return the key and data for a streamitem .
12720	Context manager to temporarily change the working directory .
12721	Strip prefix from string .
12722	Strip a suffix from a string .
12723	Check if needle is a subsequence .
12724	Example application .
12725	Run the wsgiref server .
12726	Closes the server .
12727	Register a route .
12728	Register an error handler .
12729	Return the content of a file .
12730	Returns a callback function that returns the response page .
12731	Register a callback .
12732	Resolve the route and return the result .
12733	Resolve a non - literal route .
12734	Normalize pattern .
12735	Return the response body .
12736	Add an HTTP header .
12737	Set a cookie .
12738	Return the status line
12739	The Content - Type header .
12740	Get all values for a given key .
12741	Recursively delete a directory
12742	Get open file descriptors .
12743	get file type stats
12744	run a work unit
12745	Fetch a corpus from a work unit .
12746	Return a list of lines from a file .
12747	Generate a random adjacspecies pair .
12748	Generate random adjacspecies pair .
12749	Emulate Goolabs .
12750	Gets the similarity of the query .
12751	Run hiragana .
12752	Get entity information .
12753	Get shortsum .
12754	List keywords .
12755	Display a Goolabs API .
12756	Creates a new stage
12757	Initialize the stages .
12758	Initialize all stages .
12759	run the reader
12760	Run all the writers on the source stream .
12761	Run each transform on the stream .
12762	Replace the configuration from a config file .
12763	Create a WSGI application .
12764	Given a list of sentences and a list of sentences create a set of chains with the same name .
12765	Return True if all target_ment mentions are ALL .
12766	Return True if any of the target_ments in target_mentions are present in the chain .
12767	return a list of lookahead matches
12768	Match multiple tokens .
12769	Create a tagger .
12770	align an input chunk with the data
12771	Stop the child process .
12772	Multiply p .
12773	Fix email addresses .
12774	Extract sentences from a string .
12775	Make the label_index for this stream .
12776	Generate sentences from a stream .
12777	Convert HTML entities to unicode .
12778	make a file with a cleaned file
12779	make a file with tagger id
12780	Remove leading and trailing whitespace from a string .
12781	align a chunk with n_chunk
12782	Make absolute paths to absolute paths .
12783	Instantiate the pipeline configuration .
12784	Generate a chunk from a file path .
12785	Replace invisible elements in HTML .
12786	Makes sure the HTML is visible .
12787	Creates a file containing all the files in i_chunk .
12788	Remove trailing whitespace from the given string .
12789	Read HTML file .
12790	Load a stage .
12791	Load the external stages from a file .
12792	Load a module from a module .
12793	Initialize a stage .
12794	Read bytes from the end of the index .
12795	Return True if href is valid False otherwise .
12796	Generate labels for the cleaned HTML .
12797	Generator yielding all files in the input directory .
12798	Iterate over all tasks .
12799	Get a random key from the cluster .
12800	Yields tokens from a sentence .
12801	Return sentences and relations .
12802	Decorator for retries .
12803	Verify an MD5 .
12804	Get bucket .
12805	Decode data to Streamor .
12806	Get a chunk from a file .
12807	Convert a stream_id into a kvlayer key .
12808	Convert a kvlayer key to a stream id .
12809	Return the hash for a given stream item .
12810	Main entry point .
12811	Build an argument parser .
12812	Add xpaths to the stream .
12813	Convert sentences to character tokens .
12814	Convert ASCII tokens to character offsets .
12815	Generator for xpaths .
12816	Add an element to the document .
12817	Return the xpath piece of the element .
12818	Return the index of the text node .
12819	Return all descendants of elem .
12820	Select all elements of source .
12821	Select elements from source .
12822	Select elements from source .
12823	Select an element from a source .
12824	Returns all the siblings of the element .
12825	Makes a pretty - printed XML element
12826	Call inkscape .
12827	Execute inkscape .
12828	Export an SVG file to a PDF .
12829	Convert an SVG file to PNG .
12830	Returns a Jinja environment for the given file .
12831	Sets up the template file
12832	Fill the document with the given doc_content .
12833	Save the document content to file .
12834	Create a document type from a template file .
12835	Fill SVG code with given doc_contents .
12836	Render the document to a file .
12837	Render the template to a PDF file .
12838	Parse an expat string .
12839	Parse HTML source .
12840	Parse HTML fragment .
12841	Insert text .
12842	Insert a node before refNode .
12843	Return a clone of this node .
12844	Execute the given options
12845	Return the XML value of a node .
12846	Insert a child element .
12847	Parse config file .
12848	Get Google API credentials .
12849	Create event datetimes .
12850	Create a google calendar event .
12851	Create an event
12852	Return the file extension .
12853	Add an extension to filepath if it exists .
12854	Get a temporary file .
12855	Remove all files in the workdir
12856	convert csv to json
12857	Replace the content of a file .
12858	Parse the soup .
12859	Check next tag .
12860	create an italic tag
12861	Create a strong tag
12862	wrap underline
12863	Parse the tag s attributes .
12864	Remove line breaks from tag .
12865	Parse a href from a href .
12866	Parse attribute value .
12867	Translate key values into a dictionary .
12868	Convert to json string
12869	Find all files in a folder
12870	Concatenate strings .
12871	Check if a string starts with a substring .
12872	Iterate over the parts in the full path .
12873	Return the length of a string .
12874	Turn obj into a boolean
12875	Yield tuples from a sequence .
12876	Lookup values in a table .
12877	Replace characters in SVG code .
12878	Check if svg_file is an svg file .
12879	Merge two svg files
12880	Merge multiple PDFs into a single file .
12881	Embed a font to a SVG file .
12882	Embed a font to a SVG file .
12883	Check if the inputs are of the same type .
12884	Check if the provided function is callable .
12885	Recursively walk through the input and outputs .
12886	Creates an input file for the given option list .
12887	Recursively iterate over the input tree .
12888	Convert obj to string .
12889	Convert obj to numbers .
12890	Convert obj to boolean
12891	Serialize an XPath AST .
12892	Change the encoding of a file .
12893	Save text into a QR code .
12894	Launch gromacs .
12895	Call a command with the given arguments .
12896	Convert a PDF file to PDF .
12897	Return a list of options for the given psy .
12898	Transform a geometry to another .
12899	Create a Geometry object .
12900	Expand self with other .
12901	Intersect this envelope with another .
12902	Check if this rectangle intersects the other .
12903	Return a polygon representing the polygon .
12904	Initialize from ZNM .
12905	Save the dataframe to a file .
12906	Create a new table with the given condition .
12907	Return a table of nucleotide numbers
12908	Return the intersection of the table .
12909	Returns a table where the table is not in the given table .
12910	Select rows that are odd .
12911	Select rows of this RDD .
12912	Select elements of this RDD .
12913	Return an error table
12914	Calculate Root Mean Square Error
12915	The binding energy .
12916	S2N .
12917	S1N .
12918	calculate s2p
12919	calculate s1p
12920	Define a derived table
12921	Execute a function on the database .
12922	Derive a key from the master password
12923	Bootstrap a new database .
12924	Search for domains .
12925	Modify a domain .
12926	Create a new domain .
12927	Extract lines from a fileobj
12928	Return the VSI prefix of a virtual machine .
12929	Get the SID of this project .
12930	Main entry point .
12931	Initialize logging .
12932	Update a file .
12933	Return a dictionary of available driver names
12934	Return an ImageDriver for the given path .
12935	Convert geom to raster
12936	Rasterize an raster
12937	Opens a raster from a file .
12938	Create an raster
12939	Copy raster to destination .
12940	List of DMD creation options .
12941	Create a raster
12942	Set the affine transform .
12943	Read data as an array .
12944	The envelope of the raster .
12945	Driver driver .
12946	Create a new raster
12947	Return a numpy array with masked values .
12948	Returns the nodata value .
12949	Reads a raster .
12950	Resample the image .
12951	Saves this image to another .
12952	Set the projection .
12953	Warp the raster to the specified location .
12954	Calculate chunklen
12955	Look up an alphabet .
12956	Encode a single chunk .
12957	Convert a chunk to a long integer .
12958	Get chunk from data
12959	Decorator for caching functions .
12960	Return a regexp for the given filename .
12961	Normalize date format .
12962	Detect the timezone .
12963	Converts swagger objects into a dictionary .
12964	Activate the debugger .
12965	Pretty print an object .
12966	Handle multiple jobs .
12967	The main worker thread .
12968	Run a worker pool .
12969	Sets the classification .
12970	Send a message to the queue .
12971	Turn on a device .
12972	Turn on a switch .
12973	Turn on a device .
12974	Turn a device .
12975	Send all queued messages .
12976	Send a message to the bridge .
12977	Create an adapter for the given object .
12978	Sets the natural nature of this Product .
12979	Update the configuration from a dictionary .
12980	Reset all options to defaults
12981	Set config files .
12982	Return an iterator over the option values .
12983	Iterate over all options and default values
12984	Create a config file .
12985	Update the configuration from a dictionary .
12986	Read a config file .
12987	Read all configuration files .
12988	Return the names of the options for the given option .
12989	Return a list of sections for the given command .
12990	Searches for options for the given command .
12991	Add options to the parser .
12992	Build the parser .
12993	Parse CLI arguments .
12994	Run zsh command .
12995	Called when a function is executed .
12996	Run bash comp command .
12997	Execute bash completion
12998	Start a master server .
12999	Connect to the worker .
13000	Called when a line is received .
13001	Called when the connection is lost .
13002	Called when a job is loaded
13003	Called when a response is received .
13004	Close the queue .
13005	Add a list of jobs to the master .
13006	Close the server .
13007	Remove all waiting listeners .
13008	Add a new result .
13009	Wait for the task to complete .
13010	Load the next job .
13011	Mark the job as done .
13012	Add a result to the queue .
13013	Cancel all jobs .
13014	Wait for all pending jobs to finish .
13015	Distribute jobs from available jobs .
13016	Add a new job set .
13017	Retrieve a job from the client .
13018	Called when a job is ready .
13019	Add a result .
13020	Called when a job set is finished .
13021	Close the animation .
13022	Return a list of duplicates .
13023	Determines if an object matches a regex .
13024	Return all cached entries .
13025	Get the AWS region
13026	Return a filtered list of entries .
13027	Get information about a host .
13028	Create an instance from an entry dictionary .
13029	Get attribute value .
13030	Sort entries by attribute .
13031	Represent the table as a string .
13032	Create an instance from a boto instance .
13033	Return True if the filter matches the filter .
13034	Return the public ip address .
13035	Render a table .
13036	Add timestamp to log
13037	Setup a logbook .
13038	Creates a structlog .
13039	Setup Celery .
13040	Get information about a specific worker .
13041	Delete a worker .
13042	Create a switch option
13043	Define a configuration section
13044	Set a set of options from conf
13045	Handler for config commands .
13046	Create the complete files for climan .
13047	Render a list of columns .
13048	Render a row .
13049	Render a table .
13050	Prepare empty rows
13051	Returns a function that returns a color for the given number .
13052	Calculate a color from a string .
13053	Get a random color .
13054	Get user input .
13055	Check username and password
13056	Check if the token is valid .
13057	Decorator to ensure a user is authenticated .
13058	Check if a process is running .
13059	Import a module .
13060	Return the IP address of this device
13061	Make a request to the API .
13062	Prepare POST request parameters .
13063	Start the server .
13064	Render the template with the given attributes .
13065	Streams a command into stdout .
13066	Stream commands from a list of commands .
13067	Stream a list of commands .
13068	Returns a list of days between two dates .
13069	Get the path of a command .
13070	Build the SSH command .
13071	Build the scp command .
13072	Copy entries to remote_path
13073	Copy files from remote_path to remote_path .
13074	Run a command on a list of hosts
13075	Connect to an entry
13076	Load a LSI profile .
13077	Create a LsiProfile object from the command line arguments .
13078	Add a relationship to this part .
13079	Return the parts of the given relationship .
13080	Load relationships from source data .
13081	Add a new part .
13082	Load a part .
13083	Find the override for the given name .
13084	Create a ContentType instance from a ContentType element .
13085	Parses input string using chatl .
13086	Builds the JWT token .
13087	Assign force field to atoms
13088	Find the maximum and NPNP parameters .
13089	Make the force field structure .
13090	Return the data as a byte stream .
13091	Get all segments that match the given name .
13092	Copy a directory to a destination .
13093	Opens a bucket .
13094	Upload a directory to S3 .
13095	Upload a file to a bucket .
13096	Upload an object to a bucket .
13097	List files in a directory .
13098	List all files in a directory .
13099	Create a prefix for the given directory .
13100	Delete a file .
13101	Authenticate to LTD Keeper server .
13102	return the loud text
13103	Delete a directory .
13104	Returns the URL for the home page .
13105	Decorator to silence a function .
13106	Return a breadcrumb for the project home page .
13107	Create a breadcrumb for the project home page .
13108	Calculate interaction energy .
13109	Calculate internal energy of an AMAL object .
13110	List of hotspots .
13111	Get a token from the Keeper API .
13112	Upload a product .
13113	Determine whether to skip the upload on Travis event .
13114	Purge a surrogate key .
13115	Register a build .
13116	Confirm a build .
13117	Recursively update dictionary d .
13118	Entry point for lstdcon .
13119	Run a part edit command .
13120	List directory contents .
13121	Split a path into parts .
13122	Find the file path and part of a file
13123	Get editor for filepath .
13124	Check if the module is valid .
13125	Generate chart object .
13126	Generate an HTML chart
13127	Convert dataobj to chart .
13128	Patch JSON data
13129	Convert json data to html
13130	Convert a dictionary into a pandas DataFrame .
13131	Write html to folder
13132	Returns the class for the given dataframe
13133	Encode fields .
13134	Link to a GitHub user .
13135	Infer the tarball url .
13136	Create an app .
13137	Delete an app .
13138	Add an iterable attribute to the decorated object .
13139	Generate a binary string .
13140	Generate a random IPv4 address .
13141	Generate a random date .
13142	Return a session object .
13143	Make a request to the API .
13144	Create a build .
13145	Check the status of a build .
13146	Generate a sequence of sequences .
13147	Decorator for memoizing functions .
13148	Decorator for caching functions .
13149	Register sub - commands .
13150	Return the root arg parser .
13151	Get the description
13152	Get the docstring of the command .
13153	Run the subcommand .
13154	Encode a dataset .
13155	Fetches a list of all athlete IDs .
13156	Get the last n times of the last n files .
13157	Request the activity list .
13158	Request activity data .
13159	Return the URL for the athlete .
13160	Return the full URL for the activity .
13161	Make a request to the GoldenCheetah API .
13162	Create a build .
13163	Creates a url with the given view
13164	Get a title .
13165	Generate a random person .
13166	Generate a random name .
13167	Render options .
13168	Set the dataset .
13169	Render the chart
13170	Return the chart type .
13171	Generate the URL .
13172	Wrapper for webopen
13173	Save the image to a file .
13174	Return the URLopen for the request .
13175	Return image as Image object .
13176	Write the URL to a file .
13177	Calculate the checksum .
13178	Generate a decimal number .
13179	Decorator to add entity name to the top class .
13180	Return a dict of protected and protected claims .
13181	Return all the signing keys as a dict .
13182	Unpack a clientMetadataStatement
13183	Pack metadata statement .
13184	Evaluate the metadata statement
13185	Recursively check the usage of the metadata
13186	Add metadata statements to the request object .
13187	Parse command line arguments
13188	Adds command line arguments to the arg_parser .
13189	Apply logging options .
13190	Log a message .
13191	Return a dictionary mapping letter numbers to 1 .
13192	Generate anagrams from a word .
13193	Convert class to AMP .
13194	Transform time series data to data
13195	Get the last value from a timeseries
13196	Validate page number .
13197	Get a single page from an iterator .
13198	Change mode of path .
13199	Initialize an internal signing service .
13200	Create a new signing service .
13201	Sign a request .
13202	Create a new object
13203	Update metadata statement
13204	Update signature .
13205	Yields the contents of a bundle .
13206	Create a bundle .
13207	Returns a list of urls for the given asset type .
13208	Generate HTML tags for an asset .
13209	Return the HTML tags for this asset .
13210	Ensure that the URL is valid .
13211	Find all links in a url
13212	Connect to AMP server .
13213	Get the names of all installed modules .
13214	import modules
13215	Convert a param string to a tuple of dates .
13216	return a copy of field_list
13217	Apply date_map to a document .
13218	Wrapper for print_cursor .
13219	Print the current cursor .
13220	Get a list of tasks from the list of tasks .
13221	Create all deps for project
13222	Add all default assettypes for a project
13223	Add default sequences for a project
13224	Add a shot to a project
13225	Called when a project is created .
13226	Create a shot for the sequence .
13227	Create all tasks in the department
13228	Pre - connect to the given peer .
13229	Send a packet to the peer .
13230	Get the value of a section and return it .
13231	Decorator to add nova events to an API .
13232	Decorator for Cinder .
13233	Decorator to add neutron events to neutron .
13234	Decorator to register a glance event .
13235	Decorator to add a function to the decorated function
13236	Decorator to add a function to the decorated function .
13237	Decorator to add a function to a heat stack .
13238	Register a factory .
13239	Remove a factory .
13240	Connect to the given factory .
13241	Receive data from a connection .
13242	Disconnect the given protocol .
13243	Calls remote command
13244	Called when a connection is made .
13245	Called when a connection is received .
13246	Called when data is received .
13247	Send data to the device
13248	Called when the protocol is lost .
13249	Returns the local protocol for the given connection identifier .
13250	Respond to the remote protocol .
13251	Disconnect the given connection
13252	Centers a string in the terminal .
13253	Prints the clock on the right clock
13254	Return a string representation of a version number .
13255	Identify the unit framework .
13256	Assert that value is convertible to target_unit .
13257	Pad data to block_size .
13258	Unpads a block of data .
13259	Self - sign a request
13260	Gather metadata statements .
13261	Pretty print a word .
13262	Argument parser .
13263	The main entry point for the wordlist .
13264	Called when data is received .
13265	Called when a packet is received .
13266	Create a RemoteFunctionStub from a URL .
13267	Called when a peer is received .
13268	Return the regex for the command .
13269	Deserialize from a string .
13270	Convert to string .
13271	Validate the metadata statement .
13272	Parse a remote response .
13273	dump database to tempdir
13274	Return a list of databases .
13275	Get all files in path
13276	Sync all files in a folder
13277	Decorator for service_tokens
13278	Handle login .
13279	Build all modules .
13280	Creates a fresh store .
13281	Load the JSON file
13282	Return self - signed JWT with the given keyjar .
13283	Return a JWT signed JWT signed by keyjar .
13284	Decorator that adds a function to the library .
13285	Deprecated .
13286	Main function for tests .
13287	Return the score for a letter .
13288	Compute the score of a word .
13289	Generator of wordlists .
13290	Return True if the word is valid .
13291	Run SOS search
13292	Run the script
13293	Called when a string is received .
13294	Returns the command and responder function
13295	Parse request values .
13296	Runs an AMP command .
13297	Write a response object to the transport .
13298	Called when the connection is lost .
13299	Builds a JSONAML address .
13300	Create a KeyJar from a JSON string .
13301	Load a KeyJar from a JSON string .
13302	Process an event .
13303	Handles customer process .
13304	Process an neutron customer .
13305	Process a glance customer request .
13306	Process a customer request .
13307	Processes a customer event .
13308	Handle heat customer process .
13309	Start a wsgiref server .
13310	Print msg to stdout .
13311	Print a message to stderr .
13312	Registers a command subclass .
13313	Register a command sub - class .
13314	Converts the value to a string .
13315	Extracts the value from a string .
13316	Update the completers dictionary .
13317	Connect to the server
13318	Initialize the connection
13319	import service modules
13320	Initialize the Nova consumer .
13321	start cinder consumer
13322	Initialize the neutron consumer .
13323	Initialize the glance consumer .
13324	Initialize the heat consumer consumer .
13325	Enable notification for OpenStack component .
13326	Get information about a song
13327	download song
13328	Execute the instruction .
13329	Load the given name and return it .
13330	Call a function .
13331	dump to a temporary file
13332	Render a DFA code .
13333	Handle an exception .
13334	Run the application .
13335	Context manager to change the current working directory .
13336	Recursively copy a directory tree
13337	Wrapper for debugging .
13338	Get the modification time of a file .
13339	Check if file has changed .
13340	Recursively update the database .
13341	Remove all data from disk
13342	Scrape a feed
13343	Download the image
13344	Check if the image has changed .
13345	Common tag function .
13346	Return the caller s name and line number .
13347	Get the defining component of pe_pe .
13348	Entry point for ooaoaa .
13349	Find a symbol by its name .
13350	Check if a package is contained within a PE .
13351	Check if PE is global .
13352	Get the data type name for a DataFrame
13353	Get the related attributes of a rgo .
13354	Create Enum object
13355	Create a bridge function .
13356	Create external entity .
13357	Creates a function from the given namespace .
13358	make constant
13359	Factory function for run_operation .
13360	Create a property for a metaclass
13361	Generate class
13362	make association
13363	Creates a linked association .
13364	Create associations .
13365	Convert a bp model into a component
13366	Perform a single RPC .
13367	Accept an incoming message .
13368	Reject this message .
13369	Raise an exception .
13370	Wait for a call .
13371	Establish a connection to the worker .
13372	Dispatch a reply .
13373	Guess the type name of a string .
13374	Deserialize a value .
13375	r
13376	r
13377	Retrieve a feature .
13378	Retrieve multiple documents from the index .
13379	Put features .
13380	Delete a document
13381	Delete all mapping from index
13382	Delete the index .
13383	Iterate over a set of keys .
13384	Generator for scan ids
13385	Scan a prefix for a given prefix .
13386	Scan a prefix for a prefix
13387	Perform fulltext scan .
13388	Generator for fulltext scan ids
13389	Iterate over keywords and return the result .
13390	Iterate over keywords in a query .
13391	Generator for scan ids
13392	Return a list of feature names
13393	Convert a list of key_ranges to a list of dicts .
13394	Create the index .
13395	Create mapping .
13396	Get mapping from index to index
13397	Retrieve the list of field types .
13398	Return a list of feature names from a query .
13399	Return the number of bytes in fc_dict .
13400	Count the number of bytes that match the filter .
13401	Return a string representation of features .
13402	Process command line arguments
13403	Default formatter .
13404	Convert a link to a link .
13405	Returns a pretty - printed identifier for the given class .
13406	Check uniqueness constraint .
13407	Check integrity of a link
13408	Check the validity of a subtype
13409	Return a generator that yields features .
13410	Basic transform function .
13411	Store items in kvlayer .
13412	Delete all data from the database .
13413	Scan for IDs in the table .
13414	Scan for IDs in the table .
13415	Perform an index scan on the table .
13416	Wrapper for index scan_scan_prefix .
13417	Perform an index scan .
13418	Wrapper for index scan_prefix .
13419	Define an index .
13420	Put an index into the index .
13421	Put a value into the index .
13422	Generator for index keys .
13423	Return the index for the given name .
13424	Check if pypi package_name is valid .
13425	Add a direction to a string .
13426	Return the type name of the type
13427	returns the referenced attribute
13428	Build the core type element .
13429	Builds an enum type element .
13430	Build a struct type .
13431	Build user type element .
13432	Build a type from a datatype
13433	Build XML element .
13434	Build a complex component element .
13435	Build XML schema .
13436	Return prettified version of xml_string
13437	Fetches a list of bikes .
13438	Set position information .
13439	Decorator to track production information .
13440	r
13441	r
13442	r
13443	r
13444	r
13445	r
13446	r
13447	r
13448	r
13449	r
13450	r
13451	r
13452	r
13453	Create a queue
13454	Delete a queue .
13455	List all queues
13456	List all exchanges
13457	Returns the content of a queue .
13458	Create a message body .
13459	Read the image .
13460	Returns True if the text is visible .
13461	Entry point for the CLI .
13462	Serialize a value to a serialized value .
13463	Serialize association .
13464	Serialize a cls .
13465	Main entry point .
13466	Searches the given query .
13467	Partition the collection .
13468	Main entry point .
13469	Add bidi context .
13470	Find a link between two instances .
13471	Set all referential attributes
13472	Computes the lookup key for the given instance .
13473	Compute the index key for the given to_instance .
13474	Return the type of an attribute
13475	Create a new instance .
13476	Iterate over all registered metaclasses .
13477	Define a metaclass
13478	Send a message to a socket .
13479	Receive messages from a socket .
13480	Run dead code .
13481	Parse a list of email addresses .
13482	Decorator for rpc .
13483	Return the RPC spec as a table .
13484	Normalize postcode middleware .
13485	Get the next value .
13486	Accepts system symbols .
13487	Accept C C .
13488	Accept a PKG instruction .
13489	Get the brightness of the image .
13490	Match pattern .
13491	Find a match in the document .
13492	Returns a QTextEdit for the given character position .
13493	Handle cursor position changes .
13494	Return the exception information .
13495	Create the inp4_input hook for Qt4 events .
13496	Get mapper by name .
13497	Register a URL pattern .
13498	Decorator that adds a path to the request .
13499	Add a new data store .
13500	Add an entry to the registry .
13501	Call the given URL with the given arguments .
13502	Execute the command .
13503	Determine if the prompt is pressed .
13504	Return True if shift_modifier is pressed .
13505	Return the previous edit history .
13506	Return the next character in the history .
13507	Handle an execute reply .
13508	True if the history lock is locked .
13509	Return the edited history .
13510	Set the history .
13511	Store current edits .
13512	Called when the connection is closed .
13513	Generate the Record Collection
13514	Convert a collection to a Pandas DataFrame .
13515	Perform a spin operation on a DataFrame .
13516	Set attributes from a dictionary .
13517	Subscribe to the given topics .
13518	Log a message .
13519	Merges lists .
13520	Provides an iterator over a remote reference .
13521	Convert a notebook to a new notebook
13522	Return the supported platform platform .
13523	Get the importer for a path item .
13524	Wrap cStringIO .
13525	Parse a version string .
13526	Override setuptools .
13527	Add a dist
13528	Find all installed plugins in plugin_env .
13529	Return the path to the cache
13530	Parse an entry point .
13531	Return parsed pkg_info .
13532	Compute the dependency map .
13533	Determine filename and format
13534	Collapse leading whitespace into lines
13535	Disable the event filter .
13536	Reimplement the event handler .
13537	Return the text cursor .
13538	Updates the currently selected item .
13539	Register the admin site for the given appName .
13540	Return a list of disk partitions .
13541	Get cpu time and idle time .
13542	Return a list of cpu times per CPU .
13543	Wait for non - blocking objects to be read .
13544	Read raw data from stdin .
13545	Update tab bar visibility .
13546	Create the current tab with the current kernel .
13547	Add a tab with a frontend .
13548	Adds an action to the given menu .
13549	Helper function to create dynamic magic functions
13550	Populate all the magic menu menu
13551	Closes the window .
13552	Generate a password .
13553	Check if a passphrase matches a passphrase .
13554	Returns an HTML for a boolean cell .
13555	Returns an indented short title .
13556	Collect the editable_boitor_boolean and return a dictionary of editable boolean values
13557	Toggle boolean value
13558	Check if the user has permission to change the user .
13559	Check if the user can delete the object .
13560	Add n nodes to the graph .
13561	Make a bintree .
13562	Submit jobs to graph .
13563	Validate a tree .
13564	Make color table .
13565	Return a copy of this color scheme .
13566	Add a new color scheme .
13567	Set the active color scheme .
13568	Return the path to the library .
13569	Handles incoming messages .
13570	Handle a client request .
13571	Wait for the kernel to terminate .
13572	Set the HTML style .
13573	Get format for token .
13574	Get format from document .
13575	Returns a QTextCharFormat instance from a given token .
13576	Search for a command in PATH .
13577	Normalizes a path .
13578	Check that a namespace is a list of strings .
13579	Validate entry points .
13580	Return True if the last blank line is last blank
13581	Return True if the source has two two blank lines .
13582	Replace the command line with the command line .
13583	Replace assignment magic with assignment magic .
13584	Transform a classic prompt .
13585	Transform a line into an IPython prompt .
13586	Push lines into the stack .
13587	Return True if there is more than one input .
13588	Find the indent level of the given line .
13589	Store the given lines .
13590	Reset the source .
13591	Process cell magic .
13592	Internal helper for line_mode .
13593	Transform a single cell into the source .
13594	Push lines to IPython source .
13595	Initialize observers .
13596	Post a notification .
13597	Return set of observers for a given ntype .
13598	Register a callback for a given type .
13599	Create a new job .
13600	Update the status list .
13601	Print group information .
13602	Flushes the group to disk
13603	Report new status
13604	Report the status of the component .
13605	Initialize the callbacks .
13606	Insert the value at the given index .
13607	Return a copy of the file .
13608	Declare a special variable .
13609	Declare a list variable .
13610	Declare a set variable .
13611	Set the cwd .
13612	Move the lock to the given state .
13613	Calculate the energy of a state .
13614	Return a dictionary with default values .
13615	Check the existence of the table
13616	Convert a line into a dictionary .
13617	Render an expression .
13618	Print a warning message .
13619	Parse a config file .
13620	Convert a list of rows to a table
13621	Render a URL .
13622	Generate javascript file
13623	Convert a CSS file into CSS
13624	Creates an HTML tag .
13625	Subtract a value
13626	Multiply value .
13627	Divide value .
13628	Modify value .
13629	Returns the verbose name for a model .
13630	Split a line into the pre - delimited text .
13631	Add command line options .
13632	Add a builtin value .
13633	Removes a builtin object .
13634	Deactivate the builder .
13635	Find the URL name of a requirement .
13636	Yield links found in the document .
13637	Return a list of shell names .
13638	Run the coverage script .
13639	Add an action .
13640	Appends the action code to the parser .
13641	Parse command - line arguments .
13642	Print help message .
13643	Handle the help command .
13644	Validate options .
13645	Execute the Python script .
13646	show debug information
13647	Unserialize an object .
13648	Set the system hook .
13649	Log exceptions .
13650	Return True if url is a valid URL .
13651	Validate URL .
13652	Validate url container .
13653	Pull a set of values from the global namespace
13654	Select random ports .
13655	Decorator to create a function .
13656	Decorator to create a parallel function .
13657	Apply a sequence of sequences .
13658	Return the last n characters of the readline .
13659	Set the autoindent value .
13660	Initialize logging .
13661	Save sys module state .
13662	Restore sys module state .
13663	Register a post - execute function .
13664	Create a new main module .
13665	Cache the main module .
13666	Initialize the user namespace .
13667	Return a list of all namespace references
13668	Reset the registry .
13669	Delete a variable
13670	Reset all namespace keys .
13671	Push variables to the user namespace .
13672	Internal function .
13673	Internal helper to handle a property .
13674	Find and return struct
13675	Inspect an object .
13676	Initialize the shell history .
13677	Show stacktracebacktraceback .
13678	Show a traceback for an exception .
13679	Print a traceback to stdout .
13680	Show a SyntaxError .
13681	Prepend the next readline .
13682	Overrides completion .
13683	Set a custom completer .
13684	Set the context of the completer frame .
13685	Run a single line magic .
13686	Find a magic magic .
13687	Define a macro .
13688	Run a shell command .
13689	Auto rewrite command .
13690	Return a dictionary representation of user variables .
13691	Return a dictionary of user expressions .
13692	Evaluate expr .
13693	Safely execute a file .
13694	Run the cached cell magic .
13695	Run a single cell .
13696	Run all the nodes in the given node .
13697	Enable pylab in IPython notebook .
13698	Expand a variable into a variable .
13699	Create a temporary file .
13700	Extract lines from the history .
13701	Find user code .
13702	Perform cleanup operations .
13703	Publish a message to a destination .
13704	Send a message to a given target .
13705	Decorator to skip test cases .
13706	Decorator for test failure test .
13707	Decorator to mark a function as deprecated .
13708	List all profiles in a directory
13709	List all bundled profiles
13710	Find a dist by its requirement
13711	Run a command .
13712	Returns the full path to filename .
13713	Return the next line .
13714	Send data to the child process .
13715	Send a VINTR .
13716	Prepare a regular expression .
13717	Wait until a pattern matches .
13718	Waits until a match is found .
13719	Prepare a regular expression .
13720	Searches for all strings in the buffer .
13721	Search for the given buffer .
13722	Create a listener to listen for a progress monitor .
13723	Unpack a directory .
13724	Emit a message
13725	Get the last error .
13726	Execute a command and return its output .
13727	Find the source file for a given filename .
13728	Return the executed arcs in the file .
13729	Return a list of all arcs that are missing .
13730	Return a list of all arcs that are connected to this line .
13731	Return a list of branch lines .
13732	Return the number of branches .
13733	Return a mapping of branch lines to missing branches .
13734	Calculate branch statistics .
13735	Set the precision .
13736	Returns the percentage of the number of affected statements .
13737	Return a string representation of the PC .
13738	Highlight text in haystack .
13739	Highlight a string .
13740	Highlight keywords .
13741	Run a function in the context manager .
13742	Remove trailing quotes .
13743	Indent a string .
13744	Return a marquee string .
13745	Format screen text
13746	Recursively dedent text .
13747	Wrap paragraphs in text
13748	Find the optimal size of the rlist .
13749	returns the value at i
13750	Compute a matrix of items .
13751	Returns an SList with the given fields .
13752	Build the kernel arguments .
13753	Initialize the SSH connection .
13754	Pretty print a Python object .
13755	Pretty print object .
13756	Get the MRO of an object .
13757	Default pretty printer .
13758	Return a function to print a pprinter .
13759	Return a function to print a dictionary .
13760	Print the super class .
13761	Print compiled regex .
13762	Print the type information .
13763	Print the function documentation .
13764	Print exception information .
13765	Set the pprinter function for the given type .
13766	Decorator to register a function for a given type .
13767	Write text to the output buffer .
13768	Add a breakable .
13769	End the group .
13770	Flush the buffer .
13771	Return a pretty printer .
13772	Get a TermColorm scheme .
13773	Writes a row into an ODD .
13774	Gets the text of the windows .
13775	Return the text of the OSX clipboard .
13776	Get text from the clipboard .
13777	return the prefix of the build
13778	Replace keys in a dictionary .
13779	Extract dates from obj
13780	Recursively squash datetime objects .
13781	Return ISO8601 formatted datetime .
13782	Convert obj to JSON .
13783	Check if the site directory exists .
13784	Write a script to the install directory .
13785	Sleep and sleep time .
13786	Create a parser for the given prog_name and subcommand .
13787	Convert pyx files to C .
13788	Run a connection .
13789	Build a PackageFinder object .
13790	Handle logging level changes .
13791	Return the default logger .
13792	Handle flags changed .
13793	Print help for aliases .
13794	Print help for flags .
13795	Print the subcommands .
13796	Print help text .
13797	Print examples .
13798	Update the configuration .
13799	Initialize a subapp .
13800	Flatten flags into a dictionary
13801	Parse the command line .
13802	Load a config file .
13803	Generate configuration file .
13804	Downsample an array .
13805	Format info .
13806	Write a message to the output .
13807	Called when a config changes .
13808	Return the help of the class .
13809	Get help for a trait .
13810	Generate a section of the class configuration .
13811	Clear all instances of this class .
13812	Create an instance of this class .
13813	Format a failure .
13814	Print exception handler .
13815	Flush the buffer .
13816	Called when the kernel is started .
13817	Read data from file .
13818	Read data from a file .
13819	Run a command with a callback .
13820	Split a string into a list of tokens .
13821	Compress a dhist
13822	Return the magics class .
13823	Record a magic magic function .
13824	Create a magic marker for a method .
13825	Decorator to register a function magic marker .
13826	Return a dictionary of the documentation for the LSM .
13827	Registers the magic objects .
13828	Register a new magic function .
13829	Format a string in LaTeX format .
13830	Parse command line options .
13831	Define a default option
13832	Start the IPython page
13833	Creates a task with the given callable .
13834	Get task info by label
13835	Get the callable from the info .
13836	Calculate the next run .
13837	Submit the task .
13838	Run a task .
13839	Run this task .
13840	Run a task .
13841	Runs a single callable .
13842	Find the URL file .
13843	Create an IPython kernel .
13844	Execute the test steps .
13845	Create an interrupt event .
13846	Listen for windows .
13847	Given a namespace and a list of nested dictionaries return a dict of dicts that match the name pattern .
13848	List all objects in a namespace
13849	Mutate options .
13850	Send the currently active figure if active .
13851	Close all currently open figures .
13852	Send figure to IPython .
13853	Load an IPython extension .
13854	Unload an IPython extension
13855	Generate n random ports
13856	Initialize the web application .
13857	Handle SIGINT signal .
13858	Confirm the user to exit .
13859	Shutdown the kernel .
13860	Generate market prices
13861	Replaces all occurrences of the given dictionary with the given key .
13862	Renders the output of the shell .
13863	Base launcher function .
13864	Create a zipfile .
13865	Fix version number .
13866	Returns True if obj is mappable
13867	Get partition from seq .
13868	Monkey patch pexpect . spawn . spawn .
13869	Execute the given file .
13870	Run the given source .
13871	Generate coverage reports .
13872	Generate the XML file .
13873	Download a file to disk .
13874	Reduce a list of frequencies into a list of frequencies
13875	Compute n digit frequencies from a file
13876	Read a text file .
13877	Calculate the frequency of a set of digits .
13878	Calculate frequency of two digits .
13879	Generate n - digit frequencies
13880	Plot two digit frequencies
13881	Plot one digit frequency frequencies
13882	Log a debug expression .
13883	Reverse url .
13884	Determine if a base is private .
13885	Create a test suite .
13886	Run a script .
13887	Execute a python script .
13888	Print a debug script .
13889	Return a dict of all files under hashroot
13890	compress all files under hashroot
13891	Return a list of keys matching glob pattern .
13892	Allow the given record .
13893	Return True if the given record matches any of the given records .
13894	Format an error .
13895	Creates an interactive shell .
13896	Run IPython .
13897	Helper function to create new csv writer .
13898	Prepare the translations directories for the given language .
13899	Write POI entries .
13900	Write a po file
13901	Subscribe to a user .
13902	Initialize a parser .
13903	Run a Python module .
13904	Run a Python file .
13905	Create a code object from a Python file .
13906	Create a Code object from a file .
13907	Convert an item matrix to an HTML table .
13908	Set the current value .
13909	Cancel completion .
13910	Set the index to the given row .
13911	Selects the top of the list .
13912	Selects down down the screen .
13913	Select left .
13914	Select the right .
13915	Update the list .
13916	Calculate word frequency
13917	Print word frequency list .
13918	Convert to XML string .
13919	Write the object to a file .
13920	Validate a PIN .
13921	Use this method to send a pinned pin .
13922	Delete a shared pin .
13923	Send a PIN to a user .
13924	Delete a user pin .
13925	Subscribe to a topic .
13926	List all subscribed topics .
13927	Decorate a function with a monitor .
13928	Initialize the progress monitor .
13929	Context manager for creating a task .
13930	Context manager for submonitor .
13931	Update the progressmonitor .
13932	Create a new sub monitor .
13933	Mark the progress as done .
13934	Run a page in IPMQ .
13935	Make sure package is correct .
13936	Load a list of configuration files .
13937	Load the configuration file .
13938	Read the config file .
13939	Load flag from config .
13940	Decodes a list of argument values .
13941	Load IPython configuration .
13942	Load the configuration .
13943	Parse command line arguments .
13944	Convert the parsed_data to the config
13945	Find a module by name .
13946	Register a function to be run on the loop .
13947	Called when the process is started .
13948	Notify the process .
13949	Interrupt the child process
13950	Return command line arguments
13951	Start n times .
13952	Send a file to the remote server .
13953	fetch a file from remote
13954	Return the number of registered engines .
13955	Start n engines
13956	Start the WinHPC job .
13957	Default context variables .
13958	Parse the job_id .
13959	Write the batch script to disk .
13960	Start the batch execution .
13961	Create the QMenu for the given cursor position .
13962	Append a JPEG to the image .
13963	Append png to PNG .
13964	Appends a svg .
13965	Add image image .
13966	Copies an image to the clipboard .
13967	Get image by name .
13968	Inserts an image into the cursor .
13969	Insert SVG data into the table .
13970	Save image to file .
13971	Add a timeout to the loop .
13972	Initialize environment variables .
13973	Apply a command to the ZMQ shell .
13974	Ask the user to exit .
13975	Set the next input to ZMQ .
13976	Read a configuration file .
13977	Get a list of values from a section .
13978	Returns a list of lines separated by line .
13979	Configures the process with timing information .
13980	Set instance attributes
13981	Read configuration file .
13982	Set an attribute from a config file
13983	Expand ~ ~user . ~ ~user . ~ . ~user . ~ . ~ . ~ . ~ . ~ . ~ . ~astropy . tilde
13984	Set the delimiter .
13985	Split line into lines .
13986	returns a list of keywords
13987	Return a list of expressions that match the attribute .
13988	Called when the parser is changed .
13989	Match file matches .
13990	Find aliases matching the given text .
13991	returns True if text matches the given text
13992	Return the default arguments for the given object .
13993	Set completions
13994	Handle completion .
13995	Return True if the record matches the given record .
13996	Matches the given check .
13997	Extract a subdict from a record
13998	Return True if the prompt is quiet
13999	Write the output prompt .
14000	Writes the format data to the terminal .
14001	Log output .
14002	Raises InvalidOperationException if the object is frozen .
14003	Convert a MySQL timestamp to a Timestamp .
14004	Called when an event is changed .
14005	Dispatch a control message .
14006	Process a message .
14007	Start the shell .
14008	Perform one iteration .
14009	Publish a pyin message .
14010	Abort a request .
14011	Send a clear reply
14012	Return the topic string .
14013	Called when the shutdown is shutdown .
14014	Called when the context is started .
14015	Remove all modules from the context stack .
14016	Return the absolute path of the given path .
14017	Check if a file is a file - like object .
14018	Check if an object is a class .
14019	Check if a path is a package .
14020	Return package name .
14021	Normalize a label .
14022	Returns a function that returns the last key that matches the regex
14023	Apply a function to a module .
14024	Creates a new class with the given module .
14025	Get CPU time times .
14026	Get the commandline for this process .
14027	Get open file descriptors .
14028	Get connections for this process .
14029	Check if a user has a group .
14030	Resolve a class
14031	Calculate usage percentage .
14032	Memoization decorator .
14033	Mark a function as deprecated .
14034	Login to Google API .
14035	Get GDocs key from the URL .
14036	Ensures the temp path exists .
14037	Clear the temporary temp files
14038	Upload a file to the gdf server .
14039	Synchronize local and gdocs .
14040	Download CSV files .
14041	Upload PO to GDocs .
14042	Clear the empty CSV file .
14043	Create a new QConsole object .
14044	Check if the given URL is accessible .
14045	Check if a URL contains the contents of the given URL .
14046	Get the code for a given URL .
14047	Compare the content type of a URL .
14048	Compare the response code
14049	Validate the data dictionary
14050	Clear stdout and stderr .
14051	Find and return the executable .
14052	Return a list of CodeUnit objects .
14053	Return the root directory name .
14054	Return the source of the source code .
14055	Determine whether the file should be Python .
14056	Return the total seconds in seconds .
14057	Get the result from the queue .
14058	Wait for the message to complete .
14059	Get a dictionary of results to run .
14060	Abort this job .
14061	Return the elapsed time in seconds .
14062	Wait for all tasks to complete .
14063	Republish the given content
14064	Wait for all outputs to be ready .
14065	Wait for the result to complete .
14066	Return the absolute path of a file .
14067	Preprocess patterns .
14068	Return the separator of a string .
14069	Find all python files in a directory .
14070	Return a relative filename
14071	Return the canonical filename .
14072	Extract zip data from a file .
14073	Return True if fpath matches file
14074	Return True if path matches pattern .
14075	Replace all aliases in path .
14076	Start the kernel loop .
14077	Run a wx event loop .
14078	The main loop .
14079	Start a kernel loop .
14080	Wrapper around cocro .
14081	Enable an IPython gui .
14082	Evaluate the number of GO terms
14083	Compute the center eigenvalue of a matrix .
14084	Calculate the difference between the ensemble .
14085	Initialize this node .
14086	Parse a YAML file .
14087	Parse a step configuration .
14088	Initialize the crash handler .
14089	Load the configuration file .
14090	Initialize the profile directory .
14091	Generate the default config file
14092	Write the file .
14093	Erase the file .
14094	Return a dictionary with all the line data
14095	Return the arc data as a dictionary .
14096	Write the pickle to a file .
14097	Read a file .
14098	Return the raw data from a pickle file .
14099	Read a file .
14100	Combine parallel data files .
14101	Add line_data .
14102	Add arc data to self . arc_data .
14103	Add executed lines to file .
14104	Return a summary of the file .
14105	Paste lines .
14106	The main loop .
14107	Replace multiline history with multiline history
14108	Return the raw input .
14109	Edit a syntax error .
14110	Determine if an error should be recompiled .
14111	Exit the program .
14112	Extract the url and revision from the URL .
14113	Create a new frontend master widget .
14114	Initialize the IPython widget
14115	Return the identity info .
14116	convert ROJ to numpy arrays
14117	Return the source code for an object .
14118	Set colors
14119	Toggle color scheme
14120	Convert traceback to text .
14121	Return a formatted traceback .
14122	Formats the extracted list .
14123	Format exception data .
14124	Print the exception only for the given exception and evaluue .
14125	Get the debugger object .
14126	Set the mode .
14127	Decorator for views that require a group .
14128	Import from a module from a list .
14129	Add a line to the code .
14130	Creates a new section .
14131	Return the function named name .
14132	Return the code for an expression .
14133	Render the template .
14134	Apply dots to value .
14135	Render a template
14136	Return a dictionary with the default formatters .
14137	Decorator for registering a function .
14138	Registers a function for a given type .
14139	Handle float precision .
14140	Return a list of all user config files .
14141	Parse command line arguments .
14142	Configure logging .
14143	Configure the working directory .
14144	Pretty - print a page of text .
14145	Display a string in a pager .
14146	Page a file
14147	Get pager command .
14148	Return pager start string
14149	Print string to screen
14150	Print basic code .
14151	Convert a Python object to a PNG .
14152	Convert a Python object to a PNG .
14153	Return True if o can be printed .
14154	Try to print a Python object .
14155	Add options to the parser .
14156	Validate a list of strings .
14157	Validates that a dictionary is a string .
14158	Start the loop .
14159	Handle incoming messages .
14160	Execute code .
14161	Completes a request .
14162	Request information about an object .
14163	Send a history request .
14164	Shutdown the kernel .
14165	Flush the buffer .
14166	Prompt the user for input .
14167	Start the channels .
14168	Stop all channels .
14169	Check if the channels are running .
14170	Load the connection configuration file
14171	Write the connection file .
14172	Start a kernel .
14173	Shutdown the kernel .
14174	Restart the kernel .
14175	Kill the kernel .
14176	Interrupt the kernel .
14177	Send signal to the kernel .
14178	Check if the kernel is alive .
14179	The shell channel .
14180	Get the sub channel .
14181	Hb channel object .
14182	Bind a kernel to IPython .
14183	Print debug message to stderr .
14184	Get the list of extension classes .
14185	Run the pre_step step .
14186	Run all the extensions .
14187	Finalize all the extensions
14188	Recursively walk an egg_dir
14189	Scan a module .
14190	Launch a new IPController instance
14191	Save connection info to file .
14192	Load connection configuration from JSON file
14193	Load secondary config from JSON .
14194	Execute cell
14195	Enable autopx .
14196	Disable autopx .
14197	Run a single cell .
14198	Run a heartbeat .
14199	Run a task .
14200	Removes a task from the database .
14201	Patch the protocol for the agent .
14202	Patch an object with the given name .
14203	Accept a connection .
14204	Reject a connection .
14205	Returns an instance of the proxy agent .
14206	Validate the form .
14207	Delete the object .
14208	Set the user attributes to the user .
14209	Report coverage reports .
14210	Check modules .
14211	Open an IPython editor .
14212	Fix error editor .
14213	Get the clipboard .
14214	Add a new chain to the chain .
14215	Return the metadata object
14216	Configure the plugin .
14217	Import an object by its name .
14218	Try to use passwordless SSH .
14219	Try to connect to a server
14220	Try to connect to paramiko .
14221	Open a tunnel
14222	Open a tunnel .
14223	Stop the scheduler .
14224	Unwrap an exception .
14225	Registers an engine from a message
14226	Unregisters an engine message .
14227	Handle a reply .
14228	Flush all pending notifications .
14229	Flush results from a socket .
14230	Flush control replies .
14231	Flush ignored control messages .
14232	Flush IOPub messages .
14233	Rotate the container .
14234	Stop the spin thread .
14235	Iterate over the socket .
14236	Wait for jobs to finish .
14237	Send a request to the socket .
14238	Send a request to the server .
14239	Get the result associated with the given indices .
14240	Return the status of the queue .
14241	Purge results from the engine .
14242	Return hub history .
14243	Perform a SQL query .
14244	Return a set of opcodes for the given names .
14245	Get a byte parser .
14246	Return the number of lines matching the given regexes .
14247	Parse the text .
14248	Get the first line of a line
14249	Return the first line of a list of lines .
14250	Parse the source .
14251	Returns a list of all the arcs in the file .
14252	Return a dictionary with the exit codes .
14253	Returns a list of byte parsers .
14254	Iterate over byte numbers .
14255	Find all the statements in the parser .
14256	Return a string representation of a block stack .
14257	Split code into chunks .
14258	Validate that the chunks are valid .
14259	Return a generator of arcs that are triggered by tracing .
14260	Return a list of all child parsers .
14261	Returns all arcs in this parser .
14262	Add coverage options .
14263	Start coverage .
14264	Generate coverage report
14265	Determine if file should be wanted .
14266	Interpret a source distro name .
14267	Open a URL with authentication .
14268	Fetch a distribution from a given requirement .
14269	Get the parent of obj .
14270	Return the root topic
14271	Render a template .
14272	Configure plugin .
14273	Format an error and return the captured output .
14274	Split data by num
14275	Convert a notebook to a new nbformat .
14276	Convert hex color to rgb
14277	Get background color and highlight color .
14278	Return a QGui . QGui .
14279	Remove the execution count from the query .
14280	Handle a history reply .
14281	Handle pyout messages .
14282	Handle display data .
14283	Update shell channel history .
14284	Execute a shell command .
14285	Process an error message .
14286	Process a payload .
14287	Set the default style scheme .
14288	Opens an editor file .
14289	Make the IN prompt .
14290	Make a prompt for a prompt .
14291	Update the style sheet .
14292	Called when the syntax style is changed .
14293	Handle asynchronous response .
14294	Sign a request string
14295	Transform data to dictionary .
14296	Get virtual memory usage .
14297	Get CPU time times .
14298	Get the uids of the process .
14299	Get the gids of the process .
14300	Return a list of threads for this process .
14301	Return list of open file descriptors .
14302	Get the hash of a package .
14303	Return package information .
14304	Print sys . path .
14305	Return the number of CPU cores on Windows
14306	Return the number of CPU cores .
14307	Return the next set .
14308	Fetch one row .
14309	Fetch multiple rows .
14310	Fetch all rows
14311	Connect to peer
14312	Convert a JSON string to a notebook
14313	Read a notebook from a string .
14314	Read a file and return a dictionary of reads .
14315	Wrapper for writing .
14316	Write nb to file .
14317	Convert ipynb to metadata
14318	Load value from dictionary .
14319	Return True if name matches the given name .
14320	Determine whether the class should be a class or not .
14321	Determine whether a directory is a directory .
14322	Determine whether a file should be loaded .
14323	Determine whether a function wants to be requested .
14324	Determine whether a method wants to be requested .
14325	Determine if a module should be imported .
14326	Read a file and return a list of lines .
14327	Run pdb command .
14328	Print a list of lines .
14329	Execute a pdef .
14330	Compute the conversion factor between two currencies .
14331	Convert currency to currency
14332	Compute the return between two dates .
14333	Return the encoding of a stream .
14334	Return the default encoding .
14335	Write the connection file to disk .
14336	Initialize the heartbeat .
14337	Log connection information .
14338	Initialize the session .
14339	Initialize the IO interface .
14340	Initialize the kernel .
14341	Connect to the controller .
14342	Register this controller
14343	Convert HTML to text .
14344	Convert markdown to text .
14345	Convert domain name to FQDN .
14346	Add options to the given parser .
14347	Configure excluded directories .
14348	Determine if directory should be excluded .
14349	Returns True if the given extension is linked to this extension .
14350	Calls all the functions in a list
14351	Calls all the functions in a list
14352	Append a function to the end of the list .
14353	Wrapper around insert function .
14354	Format the usage .
14355	Initialize the application .
14356	Write the PID file .
14357	Remove the pid file
14358	Get the PID from the pid file .
14359	Construct an argument parser .
14360	Get the name of a magic function .
14361	Highlight the current block .
14362	Rehighlight block .
14363	Set the format to the current offset .
14364	Copies the text to the clipboard
14365	Execute the given source .
14366	Called when the user is finished .
14367	Check if the input buffer is pressed .
14368	Make the context menu for paste .
14369	Filter Qt key events .
14370	Insert the indentation prompt .
14371	Handle a complete reply .
14372	Execute a callback
14373	Handle an exec callback .
14374	Handle a reply .
14375	Handle input request .
14376	Handle kernel death .
14377	Handle an object info reply .
14378	Handle pyout messages .
14379	Handle stream messages .
14380	Handle a shutdown reply .
14381	Execute a file .
14382	Interrupt the kernel .
14383	Reset the kernel .
14384	Restart the kernel .
14385	Update the call tip .
14386	Send completion request .
14387	Process an error message .
14388	Process a message .
14389	Handle document contents change .
14390	Add plugin .
14391	Chain all registered plugins .
14392	Iterate through all registered plugins .
14393	Execute all registered plugins .
14394	Configure the plugins .
14395	Load plugins .
14396	Load plugins .
14397	Convert a latex string to PNG .
14398	Convert a latex string to HTML .
14399	Convert a string to an image .
14400	Check if the package exists .
14401	Iterate over processes .
14402	Get CPU usage .
14403	Return the object as a dictionary .
14404	The process name .
14405	Absolute path to the operating system .
14406	Return the children of this process .
14407	Get CPU utilization .
14408	Returns the current memory utilization .
14409	Get memory maps .
14410	True if the process is running .
14411	Suspends the current process .
14412	Resume the current process .
14413	Kill the current process .
14414	Block until the given timeout is available .
14415	Wrap the kernel .
14416	Wraps gtk . gtk
14417	Check if identifier is shadowed .
14418	Initialize the transformer manager .
14419	Register a new transformer .
14420	Unregister a transformer .
14421	Initialize the checkers .
14422	Register a checker .
14423	Unregister a checker .
14424	Initialize handlers .
14425	Register a handler .
14426	Unregister a handler .
14427	Handle line_info .
14428	Find the appropriate handler .
14429	Transform a line .
14430	Preprocess a line .
14431	Preprocess lines .
14432	Check if the IP is available .
14433	Checks if the given line_info is valid .
14434	Check if the help handler exists .
14435	Check if alias is shadowed .
14436	Handle line_info .
14437	Process aliases .
14438	Handle a single line .
14439	Handle IPython .
14440	Process a line .
14441	Handle the given line_info .
14442	Reimplemented to hide the widget .
14443	Stop the hide timer .
14444	Override this method to draw a panel tipTip label .
14445	Show the call info .
14446	Show the specified call tip .
14447	Handle cursor position changes .
14448	Creates a proxied property .
14449	Convert path to absolute .
14450	Validate an instance against a schema .
14451	Return the masked Dict .
14452	Returns True if the virtualenv is currently running .
14453	Calculate word frequency for each input file .
14454	Converts a function decorator into a view decorator .
14455	Return a set of default aliases for the current platform .
14456	Try to delete an alias .
14457	Define an alias .
14458	Validate an alias command .
14459	Call an alias .
14460	Transform an alias .
14461	Expand aliases
14462	Generate a help directive .
14463	Reset sgr .
14464	Split string into actions .
14465	Convert color to QColor .
14466	Returns QTextCharFormat .
14467	Generate a JWT
14468	A decorator for mutex .
14469	Remove expired tokens
14470	Check if the token is already used .
14471	Validate a JWT
14472	Create a new semaphore .
14473	Return the common prefix of a list of items .
14474	Filter the given event .
14475	Return the size hint for the widget .
14476	Checks if the cursor can cut .
14477	Check if the clipboard can be paste .
14478	Clear the input buffer .
14479	Cut the widget .
14480	Execute the given source .
14481	Get the input buffer .
14482	Set the input buffer .
14483	Sets the font s font .
14484	Pastes text into clipboard .
14485	Print the widget to the given printer .
14486	Prompt the cursor to the top .
14487	Reset the font .
14488	Perform custom insert .
14489	Append HTML to the end of the buffer .
14490	Add HTML fetching to the page .
14491	Add plain text to the buffer .
14492	Clear the temporary buffer .
14493	Completes completion with given items .
14494	Fills the temporary buffer with given text .
14495	Determine if a control key is down .
14496	Create the layout interface .
14497	Creates a QTextEdit
14498	Filter a keypress event .
14499	Get the text of a block
14500	Gets the cursor .
14501	Get column number .
14502	Get the line of the input buffer .
14503	Returns the prompt cursor .
14504	Get selection cursor .
14505	Insert a continuation prompt .
14506	Insert HTML into the cursor .
14507	Insert HTML into the given cursor .
14508	Insert text into the cursor .
14509	Keep the cursor in buffer .
14510	Cancel keyboard completion .
14511	Push text to the page .
14512	Called when the prompt is started .
14513	Read a line from the editor .
14514	Set a continuation prompt .
14515	Sets the cursor to the text .
14516	Show the prompt .
14517	Adjust scrollbars .
14518	Main entry point .
14519	Copies the config file to the ipython package .
14520	Create a new profile directory by name .
14521	Find a profile directory by name .
14522	Convert an object to a key .
14523	Read a file .
14524	Read multiple input and return a list of lines .
14525	Create a temporary file with the given extension .
14526	Close the file .
14527	Write data to file .
14528	Register a new heartbeat handler .
14529	Register a new heart failure handler .
14530	Handle a pong message .
14531	Batch list of batch_size
14532	Return the path and filename of a path .
14533	Walk a directory tree .
14534	Print the elapsed time .
14535	Format time units
14536	Extract wininst configuration from dist_filename .
14537	Uncache a zip directory .
14538	Quote an argument .
14539	Check for any dependencies in the given dist .
14540	Set fetch options .
14541	Create the home directory
14542	Check if name is an archive file
14543	Decorator to mark objects as immutable .
14544	Decorator to mark objects as readonly .
14545	Create a new heading cell .
14546	Create a new metadata node .
14547	Create a notebook node .
14548	Return True if path is writable .
14549	Unquote a filename .
14550	Get a python filename .
14551	Find a file in the search path .
14552	Returns the path to the IPython distribution .
14553	Return the xdg directory .
14554	Return the IPython directory .
14555	Return the IPython package directory .
14556	Return the path to the IPython module .
14557	Check if a target is older than the given dependencies
14558	Calculate the md5 hash of a file .
14559	Check for old configuration files .
14560	Updates the suggestions dictionary for the given object .
14561	Get suggestions for a given object .
14562	Return the suggestions for the given object .
14563	Return the relative path to this directory .
14564	Return a list of files that match the pattern .
14565	Return a list of lines .
14566	Return the md5 of the file .
14567	Initialize the profiler .
14568	Print the profiler .
14569	Close profiling .
14570	Handle keyboard events .
14571	Enable wx .
14572	Disable event loop .
14573	Disable Qt4 event loop .
14574	Enable interactive gtk .
14575	Enable Tkinter .
14576	Enable pyglet hook .
14577	save wave history
14578	Initialize the database .
14579	Run an SQL query .
14580	Get session information .
14581	Return the last n rows
14582	Extract a range from a string .
14583	Get the file name of the history .
14584	Mark a session .
14585	Reset the history .
14586	Generator for a range of histograms
14587	Store the output of the database .
14588	Write the cache to the database .
14589	Stop the loop .
14590	Get the number of CPU cores .
14591	Get system per CPU per CPU .
14592	Return a list of disk partitions .
14593	Get a list of all processes .
14594	Return a string representation of a pair .
14595	Format a list of statements .
14596	Return a short version of the stack
14597	Decorator for caching methods .
14598	Join regexes .
14599	Remove a file from the filesystem .
14600	Recursively update the md5 hash .
14601	Update cluster profiles
14602	Start a cluster
14603	Stop a cluster .
14604	Search for a command in PATH .
14605	Print the system body .
14606	Find the code units .
14607	Given a list of morfs files report the coverage_fn .
14608	A decorator that raises an AssertionError .
14609	Set traceback to stdout
14610	A decorator that wraps the decorated function .
14611	Load IPython extensions
14612	Initialize the shell .
14613	Run code in IPython app .
14614	Run all startup files
14615	Run all the files in the IPython app .
14616	Run the code at the given command line .
14617	Run a module .
14618	Decorator to add generic methods to the decorated function .
14619	Return the filename of the static file
14620	Read data from file .
14621	Escape a string .
14622	Generate the report .
14623	Copy static report files .
14624	Write HTML to file .
14625	Generate a hash for a file .
14626	Write the index file .
14627	Read coverage status file .
14628	Write the coverage status to a directory .
14629	Compare two lists .
14630	Get a slice from a sequence .
14631	Split a sequence into chunks .
14632	Read the configuration .
14633	Read the MANIFEST .
14634	Convert a glob pattern to a regular expression .
14635	Return True if filename matches pattern .
14636	Return a list of versioned files .
14637	Start a kernel .
14638	Shutdown a kernel .
14639	Kill a kernel .
14640	Retrieves a kernel by its id .
14641	Get the ports for a kernel .
14642	Returns the notebook with the given kernel id .
14643	Start the kernel .
14644	Shutdown a kernel .
14645	Interrupt the kernel .
14646	Restart a kernel .
14647	Create an IOStream for the given kernel .
14648	Create a kernel stream .
14649	Create hb kernel stream
14650	Reset the properties of this property .
14651	Export HTML to file .
14652	Exports HTML to file .
14653	Decorator for utf8 encoding .
14654	Replace empty paragraphs .
14655	Exports the figure .
14656	Retrieves an object from the given klass .
14657	Convert tokenized_fields into a query .
14658	Extracts the text from a query string .
14659	Generate a query for the given number of days .
14660	Create a Q query for the given number of days .
14661	Return the null or blank query for the given field .
14662	Ensure fields_dict is case insensitive .
14663	Add command line options .
14664	Validate the attribute of this instance .
14665	Determine if a method should be called
14666	Rotate the ring .
14667	Patch pyzmq .
14668	Create an XML parser from a schema URL .
14669	Return the URL for the websocket .
14670	Reserialize a reply .
14671	Inject a cookie message .
14672	Start the hb .
14673	Start the hb .
14674	Stop the hb .
14675	Load data from a file .
14676	Return index .
14677	Seek to the specified index .
14678	Edit the script .
14679	Print src blocks .
14680	Print all blocks in stdout .
14681	Run a method on a collection of subjects .
14682	Batch a collection .
14683	Perform a function on a sequence .
14684	Execute a collection with multiple threads .
14685	Decorate a function with the wrapped function .
14686	A decorator to add object attributes to the object .
14687	Return the source of a traceback .
14688	Return a list of lines that match pos .
14689	Prints a progress bar .
14690	Clean up the engines .
14691	Called when the condition is executed .
14692	Set self . result .
14693	Decorator to add pending messages .
14694	Synchronize the results of the given function .
14695	Execute the function after f .
14696	Get all available messages .
14697	Get a message from the queue .
14698	Decorator to mark a property as a property .
14699	Get only one or more fields
14700	Parse a URL .
14701	Return a list of modules for a given path
14702	Return a list of the root modules
14703	Quick completer
14704	Parse a line of module completion .
14705	Handles completion of the magic script .
14706	handle completions
14707	Quote the given attribute .
14708	Configure the plugin .
14709	Generate XML report .
14710	Add an error to the list .
14711	Add a failure to the testlist .
14712	Add a testcase .
14713	Generate a random number of bytes
14714	Randomize a list of loads
14715	Register an engine .
14716	Unregister an engine .
14717	Handle multiple task messages .
14718	Dispatch a message to the monitor .
14719	Audits the timeouts for the given message .
14720	Handle an unreachable message .
14721	Determine if a task should run .
14722	Save an unmetered job .
14723	Submit a task to the hub
14724	Dispatch the result of a task .
14725	Handle a result .
14726	Handle unmetric dependencies .
14727	Recursively update the graph .
14728	Initialize the log file .
14729	Print the current log state .
14730	Write the log line .
14731	Write data to the logfile .
14732	Stop logging .
14733	Create a new notebook node .
14734	Register a command chain .
14735	Register regex .
14736	Yield regexs matching key
14737	Yield tuples matching key .
14738	Called when a notebook directory is changed .
14739	List all the notebook notebooks .
14740	Generate a new notebook id .
14741	Delete a notebook identifier .
14742	Check if a notebook exists .
14743	Find the path to a notebook
14744	Get a notebook path by name
14745	Get a notebook .
14746	Get the metadata for a notebook .
14747	Save a new notebook .
14748	Save a notebook .
14749	Save notebook object
14750	Delete a notebook .
14751	Create a new notebook .
14752	Copy a notebook .
14753	Extract tokens from a stream .
14754	Tokenize source .
14755	Load the default config file
14756	Return a list of the default classes .
14757	Update IPython IPython notebook .
14758	Initialize the IPython app .
14759	Initialize the shell .
14760	Initializes the banner .
14761	Return a string representation of an object .
14762	Parse a namedtuple name .
14763	Set the default value of the trait .
14764	Register a handler for a visit .
14765	Return a mapping of traits to traits .
14766	Get the metadata for a trait
14767	Validate the class .
14768	Return the default value .
14769	Check whether this collection has completed .
14770	Returns True if this collection is unreachable .
14771	Return the dependency as a dictionary .
14772	Return the depth of a tree
14773	Print a bintree tree .
14774	Disambiguate a DNS URL .
14775	Apply a function to each element
14776	Validate targets
14777	Dispatch monitor traffic .
14778	dispatch a query message
14779	Handle a new heartbeat .
14780	Handle a heart failure
14781	Save a task request .
14782	Save a task result .
14783	Save an IOPub message
14784	send a connection request
14785	register a new engine
14786	Unregister an engine
14787	Finish a registration
14788	Send shutdown request .
14789	Purge results from the database .
14790	Extract the record and buffers .
14791	Get results for a client .
14792	Get the history of a client
14793	Process a DB query .
14794	Context manager .
14795	Decodes the completed command .
14796	Run a command under the root directory .
14797	Execute the subprocess .
14798	Dispatch a message .
14799	Check if a message is from the frontend .
14800	Generate annotation files
14801	Annotate analysis .
14802	Get installed version .
14803	Recursively convert unicode strings to unicode
14804	Extract the header from a message .
14805	Check for packer support .
14806	Create a message to be sent to the server .
14807	Sign a list of messages .
14808	Serialize a message
14809	Send a message to the socket .
14810	Send a message to the given stream .
14811	Receive a message from a socket .
14812	Extract identities from a list .
14813	Unserialize a list of messages .
14814	Save SVG document .
14815	Copy SVG to clipboard
14816	Convert SVG string to QImage .
14817	Return information about the object .
14818	Get the docstring of an object .
14819	Get the source of an object .
14820	Get the arguments of an object .
14821	Return the call line and docstring for a call .
14822	Find the absolute file of an object .
14823	Return line number of source lines .
14824	Get the definition of an object .
14825	Return the header .
14826	Print a message with no information
14827	Print the definition of an object .
14828	Print documentation .
14829	Show source code .
14830	Print file contents .
14831	Format a list of fields .
14832	Display the pinfo information .
14833	Search for namespaces in namespace table .
14834	Return an instance of the Twisted reactor .
14835	A decorator that wraps the decorated function .
14836	Find best matching string .
14837	Return the document as a string .
14838	Convert to XML .
14839	Load all modules in a package .
14840	Invert dictionary .
14841	Merge this struct into a new dictionary
14842	Convert an object to a primitive .
14843	Format a raw string .
14844	Get a list of figure names .
14845	Print a matplotlib figure .
14846	Wrapper for matplotlib . run_exec .
14847	Select figure format
14848	Find and return gui and backend
14849	Activate matplotlib .
14850	Configure inline backend
14851	Activate a pylab .
14852	Trace event handler .
14853	Start the thread .
14854	Stop tracing .
14855	Start a new tracer .
14856	Installs the actual trace function .
14857	Start the collector .
14858	Pause this collector .
14859	Pause profiling .
14860	Resumes all registered tracers .
14861	Get line data .
14862	Return a list of RemoteError objects for the given method .
14863	Render the traceback .
14864	Start coverage process .
14865	Return canonical directory .
14866	Get source code for filename .
14867	Return True if filename should be traced .
14868	Check if the frame should be traced .
14869	Log a warning message .
14870	Look up the directory for package names .
14871	Initialize the environment .
14872	Exit if auto_data is started .
14873	Exclude a regex
14874	Return the regex for the given configuration .
14875	Save the data to disk .
14876	Combine the data in parallel .
14877	Collect the data collected by the collector .
14878	Perform analysis .
14879	Return an analysis .
14880	Analyze the analysis .
14881	Generate a summary report .
14882	Convenience method to annotate the corpus .
14883	Generate an HTML report .
14884	Generate XML report .
14885	Display a list of objects
14886	Display a list of objects .
14887	Publish a list of objects
14888	Publishes a PNG file .
14889	Display a list of objects .
14890	Display a LaTeX document .
14891	Display a list of objects .
14892	Publishes the given objects to the display .
14893	Reload the file .
14894	Find the path of a command .
14895	Run the given command .
14896	Forward read events .
14897	Read lines from the socket .
14898	Find and return the launcher class .
14899	Starts the cluster .
14900	Build a launcher .
14901	Start the IPython cluster .
14902	Start the cluster .
14903	Creates a wx . py . py
14904	Returns True if the application is running in the application .
14905	Start the event loop .
14906	Return QApplication instance .
14907	Returns True if the app is running in qt4
14908	Starts an event loop .
14909	Creates a blank canvas
14910	Draw a cross .
14911	Draw a line .
14912	Set text at position .
14913	Create an ANnotatedImage from a grayscale image .
14914	Generate a UUID .
14915	Generate a unique cache key from a get_dict
14916	Return the domain of a given URL .
14917	Get url arguments
