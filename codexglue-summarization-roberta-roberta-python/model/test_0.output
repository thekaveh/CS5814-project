0	Convert a Sina XML XML to a list of URLs .
1	Download a daily motion .
2	Download sina .
3	Simplify text .
4	Print stderr to stderr .
5	Log a message .
6	Log a message .
7	Detect the OS system
8	Download a video by channel id .
9	Get information about a ckplayer .
10	Get video URL .
11	Get the real M3UTV URL .
12	Convert text to plain text .
13	Download a cbs .
14	Download the stream .
15	download a video by vid
16	Match all patterns in text .
17	Parse a URL parameter .
18	Get the content of a given URL .
19	Perform a POST request .
20	Parse host and port .
21	Get a room id from a showroom URL .
22	Get the title for a given topic .
23	Download the wanmen_by_content_content and all courses in the course .
24	downloads the wanmen_thread_by_html_part
25	Check if a task has a running task .
26	Get the event buffer .
27	Return a connection to the snowflake .
28	Get AWS credentials .
29	Helper function to get the field name from a field
30	Copy an expert .
31	Bump table to stdout .
32	Execute the upload hook .
33	Determine the maximum partition for a given table .
34	Return a connection object
35	Show the current state of a task .
36	Restart the number of workers .
37	Get a connection object .
38	Translate values to a given target language .
39	Get an instance
40	Create a new instance .
41	Patch an instance .
42	Delete an instance .
43	Get a database .
44	Create a new database .
45	Patch a database .
46	Delete a database .
47	Exports an instance
48	Start the sql proxy .
49	Stops the sql proxy .
50	Returns the version of the SQLProxy .
51	Create a new connection .
52	Retrieve a connection from the database .
53	Delete a connection from the database .
54	Returns a CloudSqlProxy runner for the specified database .
55	Get the database hook .
56	Cleanup the database hook .
57	Reserve a free TCP port .
58	Normalize a job id .
59	Return the code of an error .
60	Delete all DagRuns .
61	Clear all task instances .
62	Set the state of the DAG .
63	Print performance statistics .
64	Monitor the scheduler metrics .
65	Invoke the AWS Lambda function .
66	Create a DataFlowOperator .
67	Create a directory .
68	Convert string to float if possible .
69	Convert a datetime to an aware datetime .
70	Make a naive datetime .
71	Create a datetime object .
72	Get connection to druid broker
73	Return a session object
74	Run a request .
75	Check the response and raise an AirflowException .
76	Run a request and check response .
77	Context manager .
78	Decorator for creating session .
79	Drops database tables .
80	Return a pretty - printed exception message .
81	Extract records from the database .
82	Retrieve a Pandas DataFrame from the database .
83	Execute a SQL query .
84	Insert rows into the table .
85	Creates a connection to the cloud server .
86	Check if a collection exists .
87	Create a collection .
88	Check if a database exists .
89	Create a database .
90	Deletes a database .
91	Delete a collection .
92	Inserts documents into the database .
93	Delete a document .
94	Get a single document .
95	Retrieves documents from a database .
96	Retrieve a single function by name .
97	Create a new function .
98	Updates a function .
99	Generate zip url for a function .
100	Delete a function
101	Return a generator of the status of all dependencies .
102	Returns True if the given session is met .
103	Return a generator of failure reasons .
104	Parse an S3 configuration file .
105	Get all expired credentials .
106	Return a connection object
107	Flush the buffer .
108	Check if fileloc is a ZIP file .
109	List all files in a directory .
110	Construct a TaskInstance
111	Starts the process manager .
112	Send a termination message .
113	Exit the DAG .
114	Start the DagFile manager .
115	Start the DAG .
116	Start the DAG .
117	Refresh the DAG directory .
118	Print file information .
119	Clears missing import errors .
120	Log file processing statistics .
121	Sets the file paths to the given file paths .
122	Wait until all processes have finished .
123	Called when DAG is finished .
124	Terminate the child process .
125	Connect to the SSH server .
126	Create a transfer job .
127	Get a transfer job .
128	Returns a list of all the jobs in a project .
129	Updates a transfer job .
130	Delete a transfer job .
131	Cancel a transfer operation .
132	Pause a transfer operation .
133	Resume a transfer operation .
134	Wait for a transfer job to complete .
135	Find tasks for a given task instance .
136	Retrieve open slots .
137	Run a command .
138	Remove an option from a section .
139	Get the airflow section .
140	Allocates a list of keys for a project .
141	Begin a transaction .
142	Commit a project .
143	Lookup the keys for the given keys .
144	Rollback a transaction .
145	run a query
146	Retrieve an operation by name .
147	Delete an operation .
148	Poll until an operation is finished .
149	Export the project to a bucket .
150	Import an entity from a bucket .
151	Publish a message to a target .
152	Return the hostname from the config file .
153	Return the connection to the language
154	Analyze a document .
155	Annotate a text in a document .
156	Classify a document .
157	Return the template fields for a given module .
158	Parse a template field .
159	Disposes the database connection pool .
160	Prepare the classpath .
161	Check the task ID for a task .
162	Return detection of a configuration variable .
163	Convert an object to a dictionary .
164	Yield chunks from a list of items .
165	Apply a function to an iterable .
166	Chain two tasks .
167	Print a pprinttable .
168	Render a log filename .
169	Return a dataprococ .
170	Wait for an operation to complete .
171	Convert a string into a string .
172	Handles databricks .
173	Run a pig flow .
174	Get the current celery task state .
175	Return the number of tasks per send process .
176	Return the number of tasks per fetch process .
177	Set the value of a variable .
178	Return a connection to the client .
179	Create a new job .
180	Get a single job
181	Wait for a job to complete .
182	Create a new version .
183	Set default version .
184	List versions of a project .
185	Delete a version .
186	Create a new model .
187	Get a single model by name .
188	Write a batch of items to the DynamoDB .
189	Integrate the plugins .
190	Get the default executor .
191	Returns the executor for the given executor .
192	Called when an error occurs .
193	Get a connection to the database .
194	Trigger a DAG .
195	Delete a dag .
196	Get information about a task .
197	Get a list of pools
198	Create a new pool
199	Delete a pool .
200	Create or update a container group .
201	Returns the statecode details for the given state group .
202	Get all messages for a given resource group .
203	Retrieve logs for a given resource group .
204	Delete a container group .
205	Check if a container exists
206	Decorator to apply default parameters .
207	Constructs the ingest query .
208	Check for messages on a channel
209	Finds a DagRun .
210	Returns a list of task instances .
211	Get a TaskInstance
212	Get previous DagRun .
213	Get the previous scheduled date for this DagRun .
214	Update the state of the task .
215	Verify that all tasks have been removed
216	Send a request to the Jenkins server .
217	Convert a context into an Airflow variables .
218	Triggers a DAG - run .
219	Send a metric to the server .
220	Query the Metric API .
221	Get the DAG for the given dag_id .
222	Mark zombie as dead
223	Grab a DAG from a DAG .
224	Process DagBag processing .
225	Generate a report of DAGs
226	Add a datetime to a datetime object .
227	Format datetime .
228	Checks for files matching the given pattern .
229	Checks if filepath is a file or directory
230	Clear all task instances .
231	Return the number of failed attempts .
232	Generate a command .
233	Return the current state of the task .
234	Called when the task instance is lost .
235	Refresh the TaskInstance
236	Clear data from the database .
237	Return the key for this task .
238	Return True if all dependencies are done .
239	Return the next retry datetime .
240	Checks if the server is ready for retry .
241	Check if a pool is full .
242	Get the DagRun object for this session .
243	Push a task to the queue .
244	Pull a list of tasks from a task .
245	Initialize the run context .
246	Closes this instance .
247	Return a connection object .
248	Start an instance .
249	Set the type of a machine .
250	Get instance template
251	Insert an instance template .
252	Get instance group manager
253	Patch an instance group .
254	Wait for an operation to complete .
255	Check if a bucket exists .
256	Create a bucket .
257	Check the prefix for a bucket .
258	List all available prefixes .
259	List all keys in a bucket .
260	Check if a key exists .
261	Returns the object identified by key .
262	Reads a key from the bucket .
263	Select the content of a bucket .
264	Check if a wildcard key exists .
265	Get a wildcard key .
266	Upload a file to S3
267	Load a string from a file .
268	Uploads bytes to S3 .
269	Upload a file to S3
270	Copy an object from a source bucket .
271	Query the cdb database .
272	Convert a user type into a dictionary .
273	Send email .
274	Get a connection to the SpeechClient .
275	Recognise the given audio .
276	Execute the query .
277	Loads all of the specified entry points .
278	Check if a plugin is a valid Airflow plugin
279	Skips the specified DAG from the DAG run .
280	Return an AzureDLFileSystemClient
281	Check if a file exists .
282	Upload a file to the local filesystem .
283	List all files in a given path .
284	Execute Athena query .
285	Uncompress a file .
286	Execute the sql query .
287	Decorator for action logging .
288	Build metrics from func_name .
289	Create cgroup from path .
290	Delete a cgroup .
291	Parse hostname from databricks .
292	Perform an API call .
293	Return a Salesforce connection
294	Make a query
295	Describe an object .
296	Returns a list of all available fields
297	Make an object from Salesforce
298	Convert a column to a timestamp .
299	Write object to file .
300	Get a connection object .
301	Get a collection from the database .
302	Replace multiple documents in a collection .
303	Returns True if the given email attachment exists .
304	Retrieve mail attachments by name .
305	Download mail attachments by name .
306	Get attachments by name .
307	Returns the content of the file
308	Put records in the Firehose .
309	Get the status of a task instance .
310	Send email .
311	Sends an email using smtp
312	Process a result value .
313	Check if a blob exists .
314	Checks if a container has a given prefix
315	Load a blob from a string .
316	Read a file from the given blob .
317	Delete a file
318	Run MLSD .
319	Return the FTP connection .
320	List files in a directory
321	Retrieve a file from the remote filesystem .
322	Store a file in the local filesystem .
323	get modification time
324	Execute the Discord webhook
325	Get a FileService instance
326	Check if a directory exists .
327	Check if a file exists .
328	Fetches a list of directories and files for a given share .
329	Create a directory .
330	Load a file from a file .
331	Load a string from a file .
332	Loads a file from a stream .
333	Get a connection object .
334	Copy blob to destination bucket .
335	Download a file to a given bucket .
336	Upload a file to a bucket .
337	Check if a bucket exists .
338	Verify if an object is updated after a given object .
339	Delete a blob .
340	List blobs .
341	Get the size of a blob .
342	Retrieve the crc32 checksum of a blob .
343	Get the MD5 hash of a given bucket .
344	Create a bucket .
345	Compose source objects to a bucket .
346	Returns True if the secondary training status is changed False otherwise .
347	Return a string describing the secondary training training status .
348	Upload files to S3 .
349	Configure s3 resources .
350	Verify that the S3 URL is valid .
351	Get log connection
352	Create a new training job .
353	Create hyperparameter tuning job .
354	Create a new transform job .
355	Create an endpoint .
356	Describe a training job .
357	Check the status of a SageMaker SageMaker job .
358	Check the status of a training job .
359	Execute the dataflow hook .
360	Run migrations .
361	Run migrations .
362	Delete an instance .
363	Create an instance .
364	Create a table .
365	Delete a table .
366	Update a cluster .
367	Prepare the command line options for the hive .
368	Convert a hive to a dictionary .
369	Load data from a pandas DataFrame .
370	Load a file into the database .
371	Get the metastore client .
372	Check for named partition .
373	Check if a table exists .
374	Return the connection to the hiveserver .
375	Get results from a HQL query .
376	Write the results to a CSV file
377	Get results from a HQL database .
378	Returns pandas dataframe
379	Get a connection to the client .
380	Get the connection endpoint
381	Send Dingding message .
382	Bind parameters to an operation .
383	Escape special characters .
384	Cast bq_type to float
385	Validate that value is a valid type .
386	Return a connection to the database .
387	Creates a bigquery service object .
388	Check if a table exists .
389	Creates an empty table .
390	Patch a table .
391	Cancel jobs .
392	Run a table delete operation .
393	Update a table .
394	Applies access to the View Dataset access to the View
395	Get a dataset .
396	Get a list of datasets .
397	Inserts all rows in a table .
398	Execute an operation .
399	Execute an operation .
400	Gets the next page from the buffer .
401	Query the database .
402	Create intermediate directories .
403	Create a queue .
404	Send a message to the specified queue .
405	Execute a subprocess .
406	Called when the user is finished .
407	Main entry point .
408	Build the HTML header .
409	Build SVG div
410	Build the jschart chart
411	Create x axis .
412	Create y axis
413	Get a connection to the database .
414	Handle action logging .
415	Decorator for gzip .
416	Get the last DagRun
417	Create a DAG run .
418	Execute the SQS queue .
419	Return a JSON response .
420	Open file with zipfile .
421	Create a cache key .
422	Get a VideoIntelligenceServiceClient .
423	Annotate a video .
424	Get the API Key from the API .
425	Return a connection to the OOSgenie .
426	Execute an alert .
427	Build an OOPgenie payload .
428	Execute a hook .
429	Return the connection object
430	Start a query .
431	Check the status of a query .
432	Poll the status of a query .
433	Get a connection object .
434	Handle rate limit exceptions .
435	Call a Zendesk server .
436	Retrieve all partitions from the database .
437	Get a table by name .
438	Get the location of a table .
439	Get the status of a cluster .
440	Delete a cluster .
441	Get snapshots for a cluster .
442	Restores a cluster from a snapshot .
443	Creates a new cluster snapshot .
444	Execute the API call .
445	Run a new job flow .
446	Filter files by size .
447	Filter out any extensions that match the given extension .
448	Execute the pipeline .
449	Get a pool .
450	Create a new pool .
451	Delete a pool .
452	Convert a dictionary to a protobuf .
453	Wait for an operation to complete .
454	Get information about an operation .
455	Append a label to a resource .
456	Creates a cluster .
457	Get a single cluster .
458	Get the Discord webhook endpoint .
459	Builds the message payload
460	Run Discord
461	Encrypt a key .
462	Import a table .
463	Import a query .
464	Export a table .
465	Get a connection to the client .
466	Synthesize audio .
467	Closes the S3 logging .
468	Get init containers .
469	Get the environment variables .
470	Get worker secrets .
471	Get the security context .
472	Get extra links to the query .
473	The heartbeat of the job .
474	Launch a new Airflow process .
475	Starts the process .
476	Returns True if the job is complete False otherwise .
477	Exit gracefully .
478	Update the errors for the given dagbag .
479	Process task instances .
480	Change the state of a DagRun .
481	Returns the map map for the given states .
482	Change the state of a task .
483	Enqueue task instances to executor .
484	Execute a list of task instances .
485	Change the state of queued tasks .
486	Processes execution events .
487	Process a file .
488	Update all counters
489	Manage execution state .
490	Get a run for a given run .
491	Return a list of tasks that are scheduled to run .
492	Execute the task for the given run_dates .
493	Set failed DAG runs to failed .
494	Execute the backfill task .
495	Send a heartbeat callback .
496	Get a client .
497	Get an instance .
498	Apply a function to an instance .
499	Creates a new instance and returns it .
500	Updates an instance .
501	Delete an instance .
502	Get a database .
503	Create a database .
504	Updates a database .
505	Delete a database .
506	Check if the attachment exists .
507	Merge additional properties .
508	Return a connection to the cluster .
509	Check if a table exists .
510	Check if a record exists .
511	Build the track driver command .
512	Submit a sparkflow command .
513	Process spark submit logs .
514	Process spark driver status log .
515	Get task runner .
516	Wait for a task to finish .
517	Execute a SQL query
518	Configure a CSV file .
519	Write a local schema to the database .
520	Get a dictionary of column types .
521	Return the type map for MySQL type
522	Execute a SqoopHook .
523	Decorator to apply a lineageage .
524	Deserialize extra data to JSON
525	Return a list of dates between start_date and end_date .
526	Scale time units .
527	Returns the number of days in the given time .
528	Initialize permissions for a role .
529	Delete a role
530	Get the roles for a user .
531	Return a list of all permissions for this user .
532	Check if a user has a role .
533	Check if the user has permission to be set .
534	Clean cached permissions .
535	Merge permission menu .
536	Updates the admin view
537	Syncs the permission menu for the given view .
538	Create permission for all DAGs
539	Get Fernet object .
540	Evaluate expression .
541	Gets the GlueCatalogHook hook .
542	Check for messages on the server .
543	Return a connection to HADOOP .
544	Get a connection to the Airflow WebHook .
545	Checks the existence of an HDFS path
546	Upload a file to the hdfs .
547	Return the connection to pinot broker .
548	Return the URI for this connection .
549	Convert a date field to a dictionary .
550	Convert time to dictionary .
551	Get a redis connection
552	Retrieve a Pandas DataFrame from the database .
553	Execute a SQL statement .
554	Set autocommit .
555	Insert rows into the table .
556	Serialize a cell .
557	Check the health of the scheduler .
558	Get extra extra links
559	Get a cloudant connection
560	Execute the Slack webhook .
561	Get credentials from Google API .
562	Creates an auth object .
563	Decorator to catch http exceptions .
564	Decorator to fall back to default project id .
565	Return a boolean indicating whether this instance is unfinished .
566	Prepare a command to be executed .
567	Convert a PIL Image to a Tensor .
568	Normalize tensor .
569	Resize an image .
570	Pad an image .
571	Crop an image .
572	Crop an image .
573	Flips an image .
574	Transform an image to a PIL Image .
575	Flip an image .
576	Crops the given image .
577	Adjust the brightness of an image .
578	Adjust contrast to PIL Image .
579	Adjusts the saturation of an image .
580	Adjust the hue of an image .
581	Adjust the gamma of an image .
582	Rotate an image .
583	Affine a PIL image .
584	Convert an image to grayscale .
585	Save a tensor to a file .
586	Find all classes in dir .
587	Read an image file .
588	Reads a torch file .
589	Read a list of matches from a data directory .
590	Calculate accuracy .
591	Decorator to print functions for distributed functions .
592	Download a file
593	Return a list of directories
594	List all files in a directory .
595	Download a file from Google Drive Drive .
596	Generate parameters .
597	Generate params .
598	Generate parameters for an image
599	Get parameters .
600	Generate parameters .
601	Download image files .
602	Download training files .
603	Download the archive .
604	Get the default theme name .
605	Execute autocompletion .
606	View the preferences page .
607	Return the list of all installed themes
608	Perform a search query
609	complete the response
610	Customize a custom gradient .
611	Multivariate Normal Deviation .
612	Calculate the joint log probability of two systems .
613	Benchmark HMCs .
614	Expand a function into a docstring .
615	Generate a simple name for a distribution .
616	Build a custom rv .
617	Creates a random variable from a distribution .
618	Decorator to create a RandomVariable .
619	Run one step of the model .
620	Wrapper for the model .
621	Return the maximum value of x .
622	Assert that x is finite .
623	Fail if x is less than the given rank .
624	Return the size of an event .
625	Evaluate one - hot - hot encoding .
626	Convert an identifier to a Tensor function .
627	Determine the size of the params .
628	Get the next interceptor .
629	Decorator to make interceptable interceptable .
630	Decorator to register a tapeable object .
631	Generate toy logistic data .
632	Visualize the decision matrix .
633	Builds the input pipeline pipeline .
634	Check if map_values are valid .
635	Trace the given state .
636	Call a function as a callable .
637	Call a function and return its gradient and gradients .
638	Broadcast a structure to another .
639	Transform a log probability function .
640	Perform a leapfrog step .
641	Perform Metropolis HASTings step .
642	Computes the Hamiltonian of the Hamiltonian Monte Carlo state .
643	Sign an adaptation .
644	Create a Tfp layer from a configuration .
645	Convert x to Tensor .
646	Create a scale operator .
647	Generate a random walk normal walk function .
648	Generate a random random walk function .
649	Expand x to an event rank .
650	Compute the entropy lower bound for all components .
651	Calculate the cat_probs of the log likelihood .
652	Helper function to validate arguments .
653	Ensure TensorFlow Probability is installed .
654	Logistic regression .
655	Calculate the covertype of the data .
656	Compute the cholesky covariance of x .
657	Return the standard deviation of x .
658	Calculate the variance of x .
659	Make a positive axis from an axis .
660	Squeeze x .
661	Z operator .
662	Inverse tensor .
663	Computes the semilocal transition matrix .
664	Perform semilocal trend transition .
665	Sample from a Halton sequence .
666	Generate permutations for permutations .
667	Wrapper for _get_indices .
668	Return the expansion size .
669	Return True if n is less than n times .
670	Compute the eps for the given dtype .
671	Helper function for Hager_zhang .
672	Apply step size to value_size .
673	Find bracket search .
674	HagerZoom search .
675	Internal helper function .
676	Prepare parameters for evaluation .
677	Prints a flat list of values .
678	Wrapper around the softmax_scheme .
679	Define softmax quantiles .
680	Raise an exception if the parameter is not valid .
681	Determine event shapes .
682	Interpolate a grid from a grid .
683	Interpolate a matplotlib grid .
684	Scale an operation w .
685	Concatenate tensors .
686	Compute the log - likelihood matrix .
687	r Compute the logmatrix of a tensor .
688	Compute the vector matrix .
689	Extract log probabilities from a distribution .
690	Computes the marginal probabilities of the marginal probabilities .
691	Calculate posterior posterior posterior .
692	Define posterior mode .
693	Choose random directions .
694	Samples the next step in the current state .
695	Try to call a function on the target .
696	Pad tensor with padding .
697	Perform a single step .
698	Build a pre - trained posterior distribution .
699	Builds a variational variable loss .
700	Minimize a build loss function .
701	Computes the moments of a given time series .
702	Compute the initial value of a masked time series .
703	Utility function to broadcast batch shape .
704	Takes a list of distributions and computes the joint mvn .
705	Compute the sum of all mvns .
706	Calculate empirical statistics .
707	Expand the observed dimension .
708	Convert the observed time series into a canonicalized datetime .
709	Mix samples over the mean and posterior .
710	Get the range of the range .
711	Computes the summary statistics of the distribution .
712	Unify a call signature .
713	Given a list of arguments and a list of distribution names return a tuple of the distribution names .
714	Return a tuple of required arguments .
715	Compute the KL divergence between two distributions .
716	Connects the model .
717	Return a tuple of graph_names and leaf_names .
718	Return the entropy of the distribution .
719	Decorator to check if the argument is in support .
720	Create an image summary .
721	Visualize a reconstruction .
722	Visualize the optimization .
723	Summarize distribution parameters .
724	Summarize the mean in nats .
725	Calculate the multivariate normal deviation .
726	Return the zero state .
727	Call LSTM .
728	Call tf .
729	Generate the probability of a batch .
730	Reconstruct the model .
731	Samples the prior to the static prior .
732	Samples the dynamic prior to the model .
733	The batch shape .
734	Returns a batch shape .
735	Creates a copy of the state space .
736	Sample the prior state space .
737	Compute the minimum event_min_forward_nims of a list .
738	Convert a vector length to square matrix size .
739	Calculate the valuesort of a list .
740	Sort values by given axis .
741	Convert x to ndtr .
742	Compute the 2 - dimensional N - dimensional nd .
743	Convert a tensor to ndtriples .
744	Create a log NDTR .
745	Calculate the log - likelihood .
746	Compute the ERF of x .
747	Log likelihood .
748	Calculate the joint log probabilities for the joint log messages .
749	Benchmark TextMessages .
750	Return True if the marginal GP is univariate .
751	Returns the marginal distribution of the given index .
752	Get the index_points from the GaussianProcessorProcessor .
753	Create an IAF stack .
754	Creates a new one step .
755	Bootstrap the results of the model .
756	Return the outer squared squared difference between x and y .
757	Calculate the value and batch .
758	Prevent 2nd derivative .
759	Compute the distributional transform .
760	Split a covariance into a list of blocks .
761	Decompose the model from posterior to posterior .
762	Decompose a model and return the posterior .
763	Decompose the forecast distribution .
764	Convert x to SparseTensor .
765	Decorator for operator methods .
766	Return a text representation of a tensor .
767	The sample shape .
768	Return the sample shape tensor .
769	The sample value .
770	Evaluate the model .
771	Returns a numpy numpy .
772	r Conjugate the covariance of a prior .
773	Wrapper for real_nvp_template .
774	Creates a uniform unit norm .
775	Compute the log - likelihood of x .
776	Compute the log normalization .
777	Return the common dtype for args_list .
778	Returns a summary statistic .
779	Convert tensors to a list of tensors .
780	Returns the PDF at the given peak .
781	Return the effective sample size .
782	r Calculate the effective sample size .
783	Compute the potential scale reduction .
784	Return the size of x .
785	Convert a list of arguments to a broadcast argument .
786	Lognormalizes a Gauss - Hermite - Hermite geometry .
787	Lognormalize quantiles .
788	Merge two dictionaries .
789	Removes a field from the map .
790	Merge two values .
791	Recursive version of deep_tuple .
792	Returns a tensor with left increments .
793	Find best - interval indices for x .
794	Slice bounds by doubling bounds .
795	Sample from a chain of chains .
796	Wrapper for slice_sampler .
797	Creates a setter that will set the values to be aligned with the given value .
798	Create a log - probability function for the joint probability distribution .
799	Get the inputs of a function .
800	2D convolution layer .
801	Builds a tree - based tree .
802	Decorator that checks whether value is None or not .
803	Returns True if two states have no momentum .
804	Perform a leapfrog .
805	Calculate the joint joint log - likelihood .
806	Random bloulli .
807	Creates a function that returns a tf . loc_fn .
808	Creates a default normal function for a mean field .
809	Default normal function .
810	Deserialize a keras object .
811	Serialize a lambda function .
812	Broadcast a structure to another .
813	Convert struct to Tensor .
814	Convert args to tensor .
815	Call a function and return the result .
816	Gets the attributes of the Tensor .
817	Create a covariance matrix for the given latent size .
818	Pack images .
819	Download a file to a directory .
820	Build fake input_fn from batch_size .
821	Validate blocks sizes .
822	Check if the given arguments are broadcastable .
823	Multivariate normal tril .
824	Bernoulli tensor .
825	Creates a normal vector .
826	Perform a Poisson .
827	Generate euler method .
828	Get the drift of a step .
829	Compute log acceptance correction .
830	Calculate volatility_fn and gradients .
831	Return a tf . volatility .
832	Make an AR transition matrix .
833	Sample shape .
834	Apply the reshape output .
835	Wrapper around tf . _call_out .
836	Return a tf . b .
837	Random sample distribution .
838	Returns the latent Dirichlet .
839	Returns a Dirichlet network .
840	Returns a string representation of the topics in the given topic .
841	Load newsgroups dataset .
842	Build fake input functions .
843	Build tf . tf . tf . tf . tf . tf . tf . fns .
844	Minimize gradient function .
845	Add control dependencies .
846	Save numpy arrays to file .
847	Visualize training images .
848	Load Brilloulli dataset .
849	Convert dtype to numpy .
850	Return the base dtype of the given dtype .
851	Return True if dtype is a boolean .
852	Check if dtype is complex .
853	Returns the maximum value of dtype .
854	Return the name of a dtype .
855	Returns the size of a dtype .
856	Raise an error if any of the items are of the same type .
857	Assert that two tensors have same type .
858	Minimize an objective function .
859	Wrapper around nelder_one_step .
860	Accepts the given function and returns the result .
861	Perform expansion function .
862	Evaluate the function outside the contraction .
863	Shrink the objective function to reduce the objective function .
864	Replace x at index .
865	Checks if a simplex convergence satisfies the objective .
866	Prepare arguments for parameters .
867	Prepare the arguments with simplex .
868	Prepare arguments with objective function .
869	Evaluate objective function .
870	Plots the weightiors of the weights .
871	Plot a fixedout prediction .
872	Build fake data .
873	Get the configuration .
874	Initialize a tf .
875	Multiply two matrices .
876	Helper function for _std_var .
877	Assign a log_mean_exp to a variable .
878	Make a columnar .
879	Random rademacher .
880	Generate a random rayleigh .
881	Return a scalar condition .
882	Finishes the log probability for a given tensor .
883	Returns the probability of a tensor .
884	Rotate dimensions .
885	Undo a batch normalization .
886	Validate BatchNormalization layer .
887	Slice a single parameter .
888	Convert parameters to dict .
889	Apply a single step .
890	Apply a single slice sequence .
891	Batch slice .
892	Fit a model .
893	Modified convergence criteria .
894	Prepare arguments for training .
895	Return the number of cols .
896	Prefer static_fn .
897	Decorator to copy docstring from original_fn .
898	Helper function to create static predicate .
899	Rank a shape from a shape_tensor .
900	Create a pred_fn .
901	Generator for name scope .
902	Compute the standard deviation of a mixture .
903	Make a scalar scale .
904	Make a diagonal scale .
905	Get shapes from loc and scale .
906	Checks if the given scale is a diagonal scale .
907	Check if a scalar distribution is valid .
908	Pad tensor_dims with categorical dimensions .
909	Pick a scalar condition .
910	Move a dimension to another .
911	Check for nonnegative integer form .
912	Compares two dynamic shapes .
913	Get the static value of x .
914	Check if dt is known by dt .
915	Check if dt is signed by dt .
916	Find the largest integer in dtype .
917	Return the smallest integer in dt .
918	Check if dt is an integer .
919	Embed categorical_check_shape .
920	Computes the log - likelihood of the given counts .
921	Rotate x .
922	Pick a bool from cond .
923	Selects the shape of a static broadcast shape .
924	Generate a new seed
925	Define a tridiag .
926	Compute dimension size .
927	Process a quadrature grid_and_probs_grid_and_probs .
928	Return a copy of the parent frame .
929	Expand a tensor to a vector .
930	Create a new tensor with the given tensor .
931	Validates that the rightmost_dims is valid .
932	Validate a permutation vector .
933	Return the shape of the event .
934	Concatenate tensors .
935	Return the dimensions of x .
936	Merge two tensors .
937	Create a tf . TensorShape .
938	Verify that the given shape is equal to the same shape .
939	Helper function to estimate the shape of a batch .
940	Builds a backward pass step .
941	Derive backward Kalman update .
942	Build the Kalman filter step .
943	Linear Regression Update .
944	Calculate the Kalman transition matrix .
945	Builds the kalman mean step for the given data .
946	Builds the kalman covariance matrix for the covariance matrix .
947	Build kalman sample step .
948	Propagate mean .
949	Propagate covariance matrix .
950	Backward smoothing pass .
951	Sample from joint state space .
952	Return posterior marginal posterior .
953	Returns the joint mean of the joint mean .
954	Compute the joint covariance matrix .
955	Convert latent vectors to latent vectors .
956	Log normalization .
957	mode of the mean direction
958	Rotate the model .
959	Sample a 3D nd .
960	Return a copy of a function .
961	Remove keys from dict_ .
962	Recursively replace a pretty - printed dictionary .
963	Get samples .
964	Returns True if x is namedtuple or False otherwise .
965	Choose base case .
966	Return a copy of the accepted type .
967	Compute the sum of x .
968	Return value and gradient and gradients .
969	Call fn_and_args and gradients .
970	Wrapper for smart_for_for_loop .
971	Perform a trace_scan .
972	Creates a new setter for the given setter .
973	Creates a wrapped getter .
974	Creates a kernel for the given parameters .
975	Replace event shape with input shape .
976	Replace event shape with event shape .
977	Check if shape is valid .
978	True if any converged is converged .
979	Get the arguments for the initial state .
980	Perform a line search .
981	Restrict a value along a given direction .
982	Update the position of the current position .
983	Compare the convergence of the current object .
984	Broadcast value to target .
985	Return the number of x .
986	Factory function for _exchange_fn .
987	Extract field from kernel results .
988	Get the exchange states for each replica .
989	Returns the variance scaling term .
990	Return a function that computes the forward log posterior .
991	Forward transform function .
992	Inverse transform function .
993	Perform a single transformation .
994	Creates a tf .
995	Wrapper for secant2 .
996	Internal helper .
997	Updates the parameter and gradients .
998	Updates the value and gradients .
999	Perform a bracketing on a given value .
1000	Binary bisect function .
1001	Bbisect function .
1002	Check if val_1 is finite .
1003	Check if the given value is unsatisfiable .
1004	Compute the secant of two values .
1005	Generate a new step size policy .
1006	A leapfrog integration .
1007	Compute the log acceptance correction .
1008	Perform one step .
1009	Calculate the kernel results .
1010	Bayesian Resnet .
1011	Resnet block .
1012	Create a Dirichlet encoder .
1013	Return a decoder for the topics .
1014	Creates a new Dirichlet prior .
1015	Samples from the transition chain .
1016	Deep Exponential family .
1017	Creates a deterministic .
1018	Create a trainable gamma .
1019	Loads the NIPS dataset .
1020	Initialize params .
1021	Determine if two parents are registered .
1022	Read an image .
1023	Download sprites .
1024	Creates a character from the given shape .
1025	Create a sequence of frames .
1026	Random sequence .
1027	Create sprites dataset .
1028	Ensure that distributions are valid .
1029	Flatten a list of kernels .
1030	Flatten a list of kernels .
1031	Build fake data .
1032	Count the number ofintegers in an array .
1033	Find bins in x .
1034	Create a histogram .
1035	Calculate quantiles .
1036	Helper function to get static dimensions .
1037	Inserts back_keep_dims along axis .
1038	Make a list of nonnegative nonnegative values .
1039	Helper function to move dimensions to flat_dims .
1040	Sort a tensor .
1041	Generates a list of components for each component .
1042	r Compute the amariance matrix .
1043	Compute KL divergence .
1044	Jensen - Shannon .
1045	r Calculate pearson .
1046	Squared_hellinger .
1047	r Compute triangular matrix .
1048	Compute the T - power of a tensor .
1049	Absolute abs of log1 .
1050	r Compute Jffreys .
1051	Modified Gaussian .
1052	Return the dual CSiszar function .
1053	Compute the symmetrized symmetrized symmetrizator .
1054	Calculate the S - Carliver divergence of the distribution .
1055	Compute csizar .
1056	Raises ValueError if x is not consistent .
1057	Batch aggregation function .
1058	Broadcast an event with params and params .
1059	Calculate expectation_sampler_sampler_ logspace .
1060	Broadcasts an event and samples .
1061	Minimize value and gradient .
1062	Asserts the inverse of the inverse .
1063	Update the inverse Hessian .
1064	Perform initialization update term .
1065	Multiplies a tensor .
1066	Tensor product of t1 and t2 .
1067	Transpose matrices .
1068	Pad x with ndims .
1069	Sum the largest ndims of x .
1070	Calculate the square root of x .
1071	Return the common dtype for the given argument list .
1072	Minimize value and gradient .
1073	Get the initial state of the initial state .
1074	Get search direction .
1075	Make an empty queue .
1076	Push a queue to a new queue .
1077	Compute the PSD mask .
1078	Detach x from x .
1079	Uniform correlation matrix .
1080	r Calculates the correlation matrix for a correlation .
1081	Compute the smoothing confidence interval .
1082	Compute the true volume bounds of a given detector .
1083	Calculate Von Mises series .
1084	Calculate the normal distribution .
1085	Single step iteration .
1086	Minimize objective function .
1087	Get initial arguments for initial selection .
1088	Find the best value in the population .
1089	Checks the validity of the position convergence .
1090	Generate the initial population .
1091	Perform binary crossover .
1092	Get mutations from a population .
1093	Generate mixing indices .
1094	Ensure a list is a list .
1095	Convert to Tensor .
1096	Calculate soft - threshold .
1097	Clip_by_value .
1098	Build an input pipeline .
1099	Plots generated images .
1100	Convert production rules to string .
1101	Call the LSTM .
1102	Call encoder .
1103	Calculate the accuracy of x .
1104	Compute the Hamiltonian of x .
1105	Rank a matrix .
1106	Return the pinv .
1107	Helper function to solve lu_solve .
1108	Linear inverse operator .
1109	Recalculate unstructured assertions .
1110	Helper function to resolve ls .
1111	Create a block - diagonal block diaginate .
1112	Assert that a matrix is valid .
1113	Compute the log - likelihood of a model .
1114	Fit a sparse model .
1115	Generate slices .
1116	Generate mask .
1117	Creates a mask with masked values .
1118	Create a numpy array with the given size .
1119	Generate degree degrees .
1120	Create mask masks .
1121	Make an initializer from a mask .
1122	Connects the event_shape .
1123	Call x .
1124	Draws a sample from a batch .
1125	Generate a zero - dimensional multivariate normal deviation .
1126	Obtains an observation function from a TimeSeries .
1127	Convert params to weights .
1128	Return the depth of a graph .
1129	Recursively find the best order in descending order .
1130	Flatten a list of probabilities .
1131	Connects the distribution rule .
1132	Compute the variational loss .
1133	Compute optimal variational variational posterior .
1134	Determine whether the last day of a season is of a given season .
1135	Builds a matrix of effects to residuals .
1136	Builds a seasonal transition matrix .
1137	Build the seasonal transition noise .
1138	Compute the seasonal transition noise .
1139	Check if observation data is empty .
1140	Validate observation points .
1141	Register a new scheduler .
1142	Set a checkpoint .
1143	Sets the gradient of the gradient .
1144	Optimize the optimization .
1145	Sets the train summary .
1146	Sets the parameter summary .
1147	Create a LocalOptimizer .
1148	Set training data .
1149	Set a summary trigger .
1150	Read training data sets .
1151	Get a list of News20 samples .
1152	Download the pre_v2v .
1153	Compile a big dl .
1154	Fit the model .
1155	Evaluate the model .
1156	Predict the input data .
1157	Get MNIST record .
1158	Preprocess training data .
1159	Return the end trigger .
1160	Validate the optimizer .
1161	Return the value of the resource .
1162	Calls a big - endian function
1163	Calls a function as a Python function .
1164	Convert an RDD to Java object .
1165	Convert Python object to Java .
1166	Get activation by name .
1167	Create a new instance from a ndarray .
1168	Return the label of the image feature .
1169	Reads and returns a DistributedImageFrame .
1170	Write a file to disk .
1171	Retrieve an image from the camera .
1172	Get an image from the local memory .
1173	Return the label of the image .
1174	Get the prediction for the given key .
1175	Predict a sample of x .
1176	Fit the model .
1177	Return the transform for the given dataset .
1178	Save keras model definition to file .
1179	Build Keras model .
1180	Predict class based on data_rdd .
1181	Set weights .
1182	Get weights for layer .
1183	Save a tensorflow tensorflow .
1184	Evaluate the model .
1185	Load a model from a file .
1186	Load Keras backend .
1187	Create a criterion from a jcriterion
1188	Load weights from json file .
1189	Load an imdb dataset .
1190	Build a keras model .
1191	Get input shape .
1192	Returns the output shape .
1193	Get MNIST dataset .
1194	Extract data sets from the data directory .
1195	Return the bigDL classpath for the given jar .
1196	Check if the spark version is below the current version .
1197	Exports a checkpoint from a checkpoint .
1198	Save a variable to a variable .
1199	Expand an array of units .
1200	Precompute all symbols in the trie .
1201	Simple attention layer .
1202	Net attention .
1203	Compute the BLEU of a translation .
1204	Get log file .
1205	Log a message .
1206	Compute summaries of gradient updates .
1207	Dump weights to file .
1208	Reads data by config .
1209	Train model from config .
1210	Connect to an agent
1211	Convert a list of labels to one - hot encoding .
1212	Convert a probabilistic Probability matrix to one - hot encoding .
1213	Create a TensorFlow session .
1214	Load the model from disk .
1215	Returns the duration variable
1216	Update graph and momentum variables .
1217	Calculate the round F1 score .
1218	Process a single word .
1219	Layer conv1d .
1220	BNN embedding .
1221	Helper function for stacking BNN cells .
1222	Construct a convolutional layer .
1223	Create an embedding layer .
1224	Multi - layer convolutional layer .
1225	Create a GRU GRU .
1226	Create a LSTM .
1227	Create a LSTM .
1228	Wrapper for convolution .
1229	Implementation of cudnn_lstm .
1230	This function is used to build cudnn .
1231	Dropout dropout .
1232	Connects the network layer .
1233	Build word cnn embedding .
1234	Build basic network .
1235	Train the model on the given batch .
1236	Predict on a batch of objects .
1237	Makes a vector from a list of strings .
1238	Generate a vector vector for a list of tags .
1239	Calculate the BLEU of a sentence .
1240	Verify that the given URL is valid .
1241	Extract certificates from a file .
1242	Verify certificates chain .
1243	Verify a signature .
1244	Verify a signature
1245	Returns the JSON representation of the control .
1246	Return a list of supported bots .
1247	Return telegram controls .
1248	Returns a list of the Alexa controls .
1249	Run deeppavlov settings .
1250	Decorator to wrap a function in a graph .
1251	Wraps a keras function into a Keras backend .
1252	Calculate accuracy .
1253	Calculate round accuracy .
1254	Initializer for pretrained initializers .
1255	Read data from file .
1256	Creates an Agent from hello world .
1257	Convert x to one hot encoding .
1258	Recursively prettify metrics .
1259	Populate the settings directory .
1260	Load the TensorFlow model .
1261	Save the model to disk .
1262	Get training op .
1263	Searches for a given word .
1264	Calculate the default operations .
1265	Start the conversation .
1266	Handle a request .
1267	Process a given utterance .
1268	Generate a dictionary for the response .
1269	Handle intent .
1270	Handle the response .
1271	Handle unsupported messages .
1272	Pretty representation of Struct .
1273	Calculate EPSL loss .
1274	Build a Chainer model .
1275	Interactive model .
1276	Predict on a given stream .
1277	Read a text file .
1278	Return a function from a string .
1279	Register a function as a metric .
1280	Get a metric by its name .
1281	Create a DecayType from a string .
1282	Given a list of values return the best match .
1283	Encode tokens .
1284	Read requirements file .
1285	Log loss .
1286	Export a hub to a hub .
1287	Show the details of an item .
1288	Return an ecommerce agent .
1289	Entry point for the bot .
1290	Download the contents of a file .
1291	Untar a file
1292	Decompress a URL .
1293	Recursively updates the dictionary with the given dictionary .
1294	Set MD5 of a URL .
1295	Set a query parameter .
1296	Alexa access to alexa session
1297	Return the JSON representation of this object .
1298	Handles django .
1299	Returns the JSON representation of the object .
1300	Build the framework for the bot .
1301	Calculate the team s score .
1302	Calculate recall .
1303	Check if the GPU is active .
1304	Parse a config property .
1305	Parse a config file .
1306	Expand a path .
1307	Create a component from a dictionary .
1308	Run the queue .
1309	Delete a conversation .
1310	Refresh expired certificates .
1311	Verify that the signature is valid .
1312	Handle a request .
1313	Return a class from a string .
1314	Register a model class .
1315	Get model by name .
1316	Get GLM regularization path .
1317	Make a GLM model .
1318	Create an attribute from a dictionary .
1319	Shutdown the H2O instance .
1320	Check if the server is running .
1321	Show status of the cluster .
1322	List all available jobs .
1323	Lists the timezones .
1324	Fill self from self .
1325	Return all the metalearner parameters .
1326	Starts the simulation with the given test function .
1327	Get a summary of a single frame .
1328	Delete a single frame .
1329	Get a list of model builders .
1330	Validate model parameters .
1331	Compute model metrics .
1332	Get model metrics .
1333	Delete a model .
1334	Tabulate the data table
1335	Run EC2 instances .
1336	Terminate instances .
1337	Stop instances .
1338	Start instances .
1339	Reboot instances .
1340	Wait for SSH to complete .
1341	Return the full name of a function .
1342	Find a function from a frame .
1343	Get the string representation of a function .
1344	Wrap text at the specified position .
1345	Join this job .
1346	Train the model .
1347	Train the model .
1348	Get parameters from parameters .
1349	Handle signal handler .
1350	Wipe the output directory .
1351	Remove rsandbox directory .
1352	Scrape port from stdout .
1353	Scrape cloud size from stdout .
1354	Stop the JVM .
1355	Stop the client .
1356	Return the IP of this node .
1357	get port
1358	Return the ROC of the model .
1359	Determine the size of the model .
1360	Calculate the absolute error .
1361	Calculate the mean squared error .
1362	Return the median absolute error .
1363	Compute the H2Expained variation score .
1364	Assert that a variable is a type of type .
1365	Raise H2ValueError if vn is not None .
1366	Raise an AssertionError if condition is not satisfied .
1367	Extract the arguments from the source code .
1368	Check if a variable is an instance of type .
1369	Get the type of a vtype .
1370	Generate lambda source code .
1371	Check if the given variable is valid .
1372	Check if the given var is a valid coordinate .
1373	Read H2Config from H2ConfigReader .
1374	Read config file .
1375	Yield h2oconfig files .
1376	Execute the given progress bar .
1377	Store model progress data .
1378	Recalculate model parameters .
1379	Estimate the completion time .
1380	Guess next poll interval .
1381	Compute the progress at time t .
1382	Calculate the time at x_target .
1383	Draw the specified line .
1384	Compute the size of all widgets .
1385	Get the size of the terminal .
1386	Set the encoding of the bar .
1387	Fits the target .
1388	Get a single frame .
1389	Refresh the cache .
1390	Returns the type of the given column .
1391	Get columns by type .
1392	Return a summary of the header .
1393	Show summary .
1394	Return a new DataFrame with the given rows .
1395	Return the multidimensional multiplication .
1396	List of levels .
1397	Length of the number of levels .
1398	Sets the level of the graph .
1399	Set the levels of the graph .
1400	Rename columns .
1401	Set the column names .
1402	Set the name of the table .
1403	Check if an item is in the list .
1404	Computes the modulo modulo a matrix .
1405	Return the stratified Kfoldified Kolds column .
1406	Print the structure of the structure .
1407	Return the frame as a pandas dataframe .
1408	Removes an item from the table .
1409	Return the quantile of the model .
1410	Concatenate multiple frames .
1411	Bind the given data to the given data frame .
1412	Bind data to the table .
1413	Split a single frame into multiple frames .
1414	Creates a GroupByBy object .
1415	Fill NaN .
1416	Impute the value of the given column .
1417	Merge two columns .
1418	Return a relevel node .
1419	Insert missing values .
1420	Return a variable .
1421	Return the correlation matrix .
1422	Compute the distance between two nodes .
1423	Return an ast .
1424	Split a string by pattern .
1425	Count the number of matches in the given pattern .
1426	Return a substring node .
1427	Return a lstrip .
1428	The entropy of the graph .
1429	Return the number of valid substrings .
1430	Generate a table expression .
1431	Return a histogram .
1432	Computes the Isax .
1433	Return a new expression with replacement .
1434	The toupper .
1435	Return an expression that matches the given pattern .
1436	Representation of the expression .
1437	Get the difference between two columns .
1438	The expression of the expression .
1439	Parse the number of minutes .
1440	Return a new H2O .
1441	Returns a random stratified split .
1442	Create a CutNode with the given breaks .
1443	Return the index of the maximum value .
1444	Apply a function to the graph .
1445	Parse the given text .
1446	Parse a file .
1447	Move this table to a given position .
1448	Unparse the token stream .
1449	Return the size of the cell
1450	List of cell centers .
1451	Returns the centers of the cell .
1452	Connect to a server .
1453	Perform an HTTP request .
1454	Check the version of h2 .
1455	Lazy import function .
1456	Upload a file to a destination .
1457	Import data from a file .
1458	Import Hive table .
1459	Import an SQL table .
1460	Import SQL table .
1461	Parse a H2OO frame .
1462	Return a deep copy of the given data .
1463	Get a model by its ID .
1464	Get a single grid
1465	Get a single frame by ID .
1466	Download a POJO from a POJO file .
1467	Download a csv file
1468	Download all logs .
1469	Exports a file .
1470	Return a list of data as a list .
1471	Display a demo function .
1472	Load a dataset .
1473	Generate metrics for predicted .
1474	Uploads a key to a file .
1475	Generate a custom metric function .
1476	Check that the frame id is valid .
1477	Convert size bytes to human readable string .
1478	Convert a slice to a slice .
1479	Check if a slice is normalized .
1480	Runs mojo prediction .
1481	Run mojo prediction .
1482	Mark a function as deprecated .
1483	Wait for the job to finish .
1484	Return the deep features of the model .
1485	Print the grid summary .
1486	Display the model search results .
1487	Get the hyperparameters of the model .
1488	Returns a dictionary of hyperparameters .
1489	Get a single instance of the model
1490	Return the F1 of the model .
1491	Returns a pandas dataframe
1492	Calculate model archetypes .
1493	Generate screeplot .
1494	Translate name .
1495	Indent text with indent .
1496	Extract run information from a java log file .
1497	Run the java script .
1498	Close the H2O session .
1499	Get session ID
1500	Start logging .
1501	Prepare data payload
1502	Prepare a file payload .
1503	Log start transaction .
1504	Log an end transaction .
1505	Log a message to the logger .
1506	Process HttpResponse .
1507	Print a message to the console .
1508	Retrieve the AutoML object for the given project .
1509	Download a POJO file .
1510	Download a model from the master .
1511	Fit the model .
1512	Apply transform to X .
1513	Inverse transform .
1514	Extract the string content from a string .
1515	Find the name of the node in a list of lines .
1516	Find the git hash branch in the current line .
1517	Return True if the build timeout is found
1518	Return True if build fails False otherwise .
1519	Find the build ID of a build .
1520	Extract the job build url from the given URL string .
1521	Get a list of valid java messages .
1522	Save the build id to a dictionary .
1523	Update the global summary file .
1524	Write the content of a file .
1525	Write a Java Message .
1526	Load java messages to ignore .
1527	Normalize enum constant .
1528	Find synonyms for a word .
1529	Poll the status of the job .
1530	Write the Assembly to a file .
1531	Fit the Assembly to the Assembly
1532	Calculate the percentile of a list .
1533	Return default parameters .
1534	Get the params of the model .
1535	Retrieve deep features for a particular test .
1536	Returns the scoring history
1537	Show the current model .
1538	Compute the global importances .
1539	Returns the residuals of the cross - validation metrics .
1540	Returns the coefficients of the model .
1541	Download a POJO file .
1542	Download the MOJO model .
1543	Save model details .
1544	Raise a ValueError if y_predicts is invalid .
1545	List all cross validation models .
1546	Displays the gradient estimator .
1547	Demonstrate to demo .
1548	Display a simple GLM .
1549	Wait for a keypress to finish .
1550	Return the dataframe as a pandas DataFrame .
1551	Display the table .
1552	Start a container .
1553	Searches for ajar .
1554	Generator that yields paths to the build directory .
1555	Calculate the HIT ratio table .
1556	Dict writer function .
1557	Convert a URI to a path .
1558	Convert a path to a URI .
1559	Parse lines from linesource .
1560	Generate the documentation for the given uri .
1561	Discover all available modules .
1562	Write API documentation to outdir .
1563	Write the rst file to outdir .
1564	Convert the table to a list .
1565	Load java messages from file .
1566	Add new messages to the global list .
1567	Update the message dictionary with the given action dictionary .
1568	Extracts a message from a file .
1569	Save java messages to file .
1570	Print a dictionary of keys to stdout .
1571	Parse arguments .
1572	Print usage information .
1573	Locate all files in a directory .
1574	Find magic in file .
1575	Main entry point .
1576	Apply a transformation to a pipeline .
1577	Summarize failed tests .
1578	Extracts information from a print save .
1579	Plot ROC curve .
1580	Compute confusion matrix .
1581	Check if DeepWater model is available .
1582	Triggered to trim the data from the month to the given month
1583	Return a dictionary of all endpoint groups .
1584	Updates the site forward .
1585	Return JSON data as a dict .
1586	Comment a user .
1587	Get credentials .
1588	Like the feed but check if the user has a valid feed .
1589	Like the media with the given hashtag .
1590	Check if a user is not in the bot .
1591	Read a list from a file .
1592	Schedules the message schedule .
1593	Define this message .
1594	Downloads the given resource group .
1595	Guess service info from a spec .
1596	Execute an update command .
1597	Delete an application by ID .
1598	Creates or updates an existing application .
1599	Return the URI for the request .
1600	Create a connection to the request .
1601	Perform a request .
1602	Execute script actions .
1603	Checks a front door name availability .
1604	Purge deleted entries .
1605	Get the authorization server .
1606	Validate the request URI .
1607	Get CLI profile .
1608	Retrieve azure CLI credentials .
1609	Resolve an application .
1610	Check name availability .
1611	Opens a URL .
1612	Set the timeout .
1613	Sets the request header .
1614	Retrieves all response headers .
1615	Send a request .
1616	Returns the current status .
1617	Returns the status text .
1618	Returns the response body .
1619	Sets the client certificate .
1620	Create a new HTTP request .
1621	Store a request header .
1622	Send request body .
1623	Returns a response object .
1624	Return a readable identifier for the given id .
1625	Get the serialization name .
1626	Verify a face to a person .
1627	Adds a job to the client .
1628	Get properties from an XML node .
1629	Get all child nodes from path .
1630	Finds all namespaces from a child node
1631	Convert an XML string to a namespace .
1632	Returns a ServiceBusRegion instance from an XML string .
1633	Returns the namespace availability of a namespace .
1634	Convert an XML string into a Metadata object .
1635	Replace the content of a runbook .
1636	Lists recommendations .
1637	Perform an update operation .
1638	Get all members of a user .
1639	Build a package from a repository .
1640	Import data from a resource group .
1641	Publish a new job .
1642	Renew the lock .
1643	Replace a wordAlchemy operation .
1644	Add a new value to the model .
1645	Gets the storage account properties .
1646	Gets the keys of a storage account .
1647	Regenerate the storage account keys .
1648	Creates a new storage account .
1649	Updates an existing storage account .
1650	Deletes a storage account .
1651	Checks the availability of a storage account .
1652	Gets the properties of a hosted service .
1653	Creates a hosted service .
1654	Deletes a hosted service .
1655	Creates a new deployment .
1656	Deletes a deployment .
1657	Swap an existing deployment .
1658	Change a deployment configuration .
1659	Updates a deployment status .
1660	Upgrade a deployment .
1661	Get an upgrade domain .
1662	Reboot a role .
1663	Deletes a role instances .
1664	Checks the availability of a service .
1665	Fetches a list of certificates for a given service .
1666	Get a certificate certificate .
1667	Add a certificate .
1668	Deletes a certificate .
1669	Gets the management certificate .
1670	Add a management certificate .
1671	Deletes a management certificate .
1672	Gets the properties of an affinity group .
1673	Creates an affinity group .
1674	Deletes an affinity group .
1675	Fetches a list of operations .
1676	Creates a reserved IP address .
1677	Deletes a reserved IP address .
1678	Associates a reserved IP address .
1679	Disassociates a reserved IP address .
1680	Gets a reserved IP address .
1681	Gets a single role .
1682	Creates a virtual machine .
1683	Adds a new role to a deployment .
1684	Updates a role .
1685	Deletes a role .
1686	Capture a role .
1687	Start a new role .
1688	Starts a list of roles .
1689	Restart a role .
1690	Shutdown a role .
1691	Shuts down the roles .
1692	Add a DNS server .
1693	Updates a DNS server .
1694	Deletes a DNS server .
1695	Fetches a list of resource extensions .
1696	Replicate a VM image .
1697	Remplicate a vm image .
1698	Share a VM image .
1699	Creates a VM image .
1700	Deletes a VM image .
1701	Fetches a list of VM images .
1702	Updates an existing VM image .
1703	Add an OS image .
1704	Updates an OS image .
1705	Updates an OS image from an image reference .
1706	Deletes an OS image .
1707	Gets a data disk .
1708	Adds a data disk .
1709	Updates a data disk .
1710	Delete a data disk .
1711	Add a disk .
1712	Updates a disk .
1713	Deletes a disk .
1714	Generate a summary for a given policy group .
1715	Builds the receiver .
1716	Fetch next message from the server .
1717	Renew lock .
1718	Create or update a virtual machine scale .
1719	Convert a single placement group to a single placement group .
1720	Execute a screen text .
1721	Creates a new key .
1722	Import a key .
1723	Update a key .
1724	Set a secret .
1725	Set a certificate issuer .
1726	Create an instance from a connection string .
1727	Retrieve a subscription for a given topic .
1728	List all subscribed subscriptions .
1729	Sends a list of messages .
1730	Get a SenderSender instance .
1731	Get a Receiver object .
1732	Get a Receiver for a deadletter .
1733	Parse an asynchronous response object .
1734	Perform a GET request .
1735	Perform a PUT request .
1736	Wait for an operation to complete .
1737	Get the status of an operation .
1738	Update management headers .
1739	Build the build package .
1740	Retrieve certificates for a given vault .
1741	Gets the regions for the service bus .
1742	Lists namespaces .
1743	Gets a namespace .
1744	Creates a namespace .
1745	Deletes a namespace .
1746	Checks the namespace availability availability .
1747	Fetches a list of topics .
1748	Fetches a list of notifications .
1749	Fetches a list of RelayRelayRelays .
1750	Retrieves a metric rollups from a queue .
1751	Retrieves metrics for a given topic .
1752	Retrieves a notification for a given metric hub .
1753	Retrieves metrics for a relay .
1754	Create a new environment .
1755	Create a new virtualenv with the given packages .
1756	Creates a server .
1757	Set the server admin password .
1758	Lists all available quotas for a given server .
1759	Gets the event logs for a specific server .
1760	Creates a firewall rule .
1761	Updates a firewall rule .
1762	Deletes a firewall rule .
1763	Fetches a list of firewall rules .
1764	Fetches a list of ServiceObjectives .
1765	Creates a database .
1766	Updates a database .
1767	Deletes a database .
1768	Fetches a list of databases .
1769	Lists all the agreements .
1770	Close the service .
1771	Close the receiver .
1772	Get session state .
1773	Set session state .
1774	Receive deferred messages .
1775	Merge two reservations .
1776	Validate the challenge .
1777	Purge a resource group .
1778	Handle errors .
1779	Creates a new queue .
1780	Deletes a queue .
1781	Get information about a specific queue .
1782	Creates a new topic .
1783	Returns information about the specified topic .
1784	Creates a rule .
1785	Returns the rules for a given topic .
1786	Lists rules for a given topic .
1787	Creates a subscription .
1788	Retrieves a specific subscription .
1789	Lists all the subscriptions for a given topic .
1790	Send a message to a topic .
1791	Unlock a subscription message .
1792	Send a batch of messages to the service .
1793	Unlock a message .
1794	Receive a message from the queue .
1795	Receive a subscription message from a topic .
1796	Creates an event hub .
1797	Updates an event hub .
1798	Gets an event hub .
1799	Send a message to the hub .
1800	Updates the service bus header .
1801	Get the authorization token .
1802	Check if the token is expired .
1803	Retrieves a token from an access token .
1804	Update the URI query string .
1805	Reset a service principal profile .
1806	Delete the message from the queue .
1807	Unlock the queue .
1808	Renew the lock .
1809	Add headers to the request .
1810	Return the body of the batch .
1811	Retrieve cluster health information .
1812	Fetches a cluster health monitoring .
1813	Removes an application .
1814	Returns a list of repair tasks .
1815	Submits a single property batch batch .
1816	Common error handler .
1817	Starts a web site trace operation .
1818	Lists all slots in a resource group .
1819	Swap a slot in a resource group .
1820	Get a single application by type .
1821	Add a new face from a stream .
1822	Handle redirect .
1823	Create a new migration .
1824	Publish events to a topic .
1825	Move resources to a specified resource group .
1826	Set the profile definition .
1827	List all query results for a given management group .
1828	Create a queue .
1829	Delete a queue .
1830	Creates a topic .
1831	Delete a topic .
1832	Creates a subscription .
1833	Create an instance from a connection string .
1834	Get the properties of the service bus .
1835	True if lock is expired .
1836	Creates a new session .
1837	Creates a new subscription .
1838	Export a long - running request rate based on an interval .
1839	Handle results from a queue .
1840	Adds a batch of tasks to the batch .
1841	Handles task collection .
1842	Build the configuration .
1843	Reset the specified password .
1844	Start an environment .
1845	Create a message from a service instance .
1846	Convert an XML element to a Rule Element .
1847	Convert an XML element to a Queue element .
1848	Converts an etree element to a Topic element .
1849	Convert an entry element to a subscription .
1850	Create a new client .
1851	Delete a certificate .
1852	Get a client from a CLI profile .
1853	Build a client from a JSON dictionary .
1854	Load a client from an authorization file .
1855	Parse EnumerationResults .
1856	Get the entry properties of an element .
1857	Deletes a certificate .
1858	Returns a QueueClient for the specified queue .
1859	List all queues .
1860	Get a topic from a topic .
1861	List all topics in this service .
1862	Receive deferred messages .
1863	Resolves deferred messages .
1864	Gets a single site .
1865	Creates a new site .
1866	Delete a website .
1867	Updates a website .
1868	Restart a website .
1869	Retrieve historical usage metrics .
1870	Gets the Metric definitions .
1871	Gets the publish profile xml .
1872	Gets the publish profile .
1873	Updates the registry policies .
1874	Create a cloud service .
1875	Checks the name of a job collection .
1876	Get a single job collection .
1877	Complete a replication operation .
1878	Cancel scheduled messages .
1879	Sends pending messages .
1880	Reconnect to the server .
1881	Get the certificate from publish settings .
1882	Restores cached cookies .
1883	Return terminal width .
1884	Get the cut prefix from a value .
1885	Print a message to stdout .
1886	Format file size .
1887	Format the elapsed time .
1888	Create a status line .
1889	Print progress bar .
1890	Generate segment number for this playlist .
1891	Iterate over the segments .
1892	Wait for an event to complete .
1893	Put a segment into the queue .
1894	Add a value to the queue .
1895	Get parameters for a single SWF file .
1896	Extract the nonce from the request .
1897	Search the vpid for a given URL .
1898	Parse a JSON string .
1899	Parse an XML .
1900	Parse a query string .
1901	Search a dictionary by key .
1902	Spawn a subprocess .
1903	Yield tags from html .
1904	Parse an MPD manifest .
1905	Determine the JSON encoding of the sample .
1906	Creates a JSON object with the given encoding .
1907	Parse an XML response .
1908	Set cookie values .
1909	Parse headers .
1910	Parse query parameters .
1911	Get the message .
1912	Make a logger .
1913	Login to LiveEdu .
1914	Load a plugin plugin .
1915	Update the query string .
1916	Iterate over the contents of a file .
1917	Iterate over all of the required plugins .
1918	Check if file output exists .
1919	Create stream output .
1920	Create an HTTP server .
1921	Iterate over HTTP requests .
1922	Executor for globus output
1923	Output stream to stdout .
1924	Opens the stream .
1925	Write a stream to a file .
1926	Read a stream from a stream .
1927	Handle a stream .
1928	Fetch streams from the plugin .
1929	Fetch streams with retry .
1930	Resolve a stream name .
1931	Format a list of valid streams .
1932	Handle a streamlink .
1933	Print the available plugins .
1934	Authenticate using Twitch .
1935	Load plugins .
1936	Set up the arguments for the given parser .
1937	Setup console .
1938	Setup HTTP session .
1939	Setup plugins .
1940	Setup hls .
1941	Log current versions .
1942	Get the stream id from the image .
1943	Gets the stream for the given text .
1944	Set an option .
1945	Get the value of an option .
1946	Set plugin option .
1947	Get a plugin option .
1948	Resolve a URL .
1949	Load all plugins from a stream
1950	Convert a number of hours seconds into an integer .
1951	Validates that a string starts with a string .
1952	Returns True if the string ends with the end of the string .
1953	Validates that a string contains a valid value .
1954	Get an attribute from an attribute .
1955	Apply a filter function to a dictionary .
1956	Apply a function to each value in a dictionary .
1957	Validate a URL .
1958	Validate an XML element .
1959	Transform an XML element to a string .
1960	Find the player s URL .
1961	Parse M3U8 .
1962	Retrieve the supported player from the system .
1963	Login to the server .
1964	Extracts the stream id from HTML .
1965	Extract stream info from html .
1966	Login to login .
1967	Add a function to the map .
1968	Make a call to the API .
1969	Start a new session .
1970	Get information about a media .
1971	Create an API session .
1972	Compress string .
1973	Output a character formatter .
1974	Helper function to format a string .
1975	Read n bytes from the stream .
1976	Return the value of a byte .
1977	Returns an explanation .
1978	Set the decodings table .
1979	Set the length of the table
1980	Pretty print code .
1981	Reads a tuple from the stream .
1982	Return an explanation string .
1983	Return the value of the given index .
1984	Returns the span of the given index
1985	Return the value at index .
1986	Return the mnemonic .
1987	Return the mnemonic .
1988	Compile the actions table .
1989	Perform an action .
1990	Return the data for the given position .
1991	Process a stream .
1992	Returns True if the block length of the block is length .
1993	Uncompressed data .
1994	Read the block type .
1995	Replace all virtual values in a range .
1996	Read an array of prefixes .
1997	Create monochrome .
1998	Polychrome Polychrome Polychrome .
1999	Convert a Pandas DataFrame to an arrow table .
2000	Monkey patch a function .
2001	Add cartesian colocities to cartesian coordinates .
2002	Add virtual columns to the motion .
2003	Return a graph representation of the graph .
2004	Count the number of values in this expression .
2005	Apply a function to a DataFrame .
2006	Run the application .
2007	Concatenate multiple files .
2008	Convert a SAMP message to a table .
2009	Create a Dataset from a table .
2010	Create a DataFrame from a list of arrays .
2011	Initialize from numpy arrays .
2012	Create a DataFrame from a Pandas DataFrame .
2013	Read data from a CSV file .
2014	Creates a server instance
2015	Generate Zeldovich .
2016	Concatenate two arrays .
2017	Create a new column virtual range .
2018	Open a dataset .
2019	Evaluate the given expression .
2020	Decorator to mark a function as a delay .
2021	Return a set of variables that depend on the current selection .
2022	Execute a task .
2023	Sort the index .
2024	Get information about a file .
2025	Clear the canvas .
2026	Wait for last plot to finish .
2027	Open a document
2028	Write a file to a file .
2029	Split arrays into masks and masks .
2030	Apply nop .
2031	Calculate the first occurrence of an expression .
2032	Calculate the mean of an expression .
2033	Calculate the sum of an expression .
2034	Compute the standard deviation of an expression .
2035	Calculate the covariance of a dataset .
2036	Return the minimum value of an expression .
2037	Return the minimum value of expression .
2038	Calculate the median value of an expression .
2039	Plots a matplotlib widget .
2040	Calculate the healpix count .
2041	Generate a matplotlib plot .
2042	Plot a 3D mesh .
2043	Return the dtype of the given expression .
2044	Get the private directory of the server .
2045	Return the state of the state
2046	Set the state .
2047	Remove virtual meta .
2048	Write virtual meta data .
2049	Write the metadata to a JSON file .
2050	Return a list of subspaces of the expression .
2051	Set a variable to the given value .
2052	Evaluate a variable .
2053	Evaluate a selection mask .
2054	Convert to a dictionary .
2055	Copy this filter to a DataFrame .
2056	Convert to pandas DataFrame
2057	Convert to arrow table .
2058	Convert this object to an astropy table .
2059	Add a column to the DataFrame .
2060	Rename a column .
2061	Add virtual columns to cartesian coordinates .
2062	Add cartesian colocities to spherical coordinates .
2063	Add cartesian columns to cartesian coordinates .
2064	Add virtual columns to cartesian .
2065	Add virtual columns to the rotation matrix .
2066	r Add virtual columns to cartesian .
2067	Add virtual columns to cartesian coordinates .
2068	Add a column expression .
2069	Deletes a virtual column .
2070	Add a variable to the database .
2071	Delete a variable .
2072	Returns the last n elements of the tree .
2073	Print the head of the table .
2074	Describe the model .
2075	Print the contents of an IPython notebook .
2076	Set the current row .
2077	Get column names .
2078	Removes columns from the DataFrame .
2079	Takes a pandas DataFrame and returns it .
2080	Extract the indices from the range .
2081	Sample from the collection .
2082	Split a collection into random samples .
2083	Split the sequence into chunks .
2084	Sorts the sequence .
2085	Create a DataFrame from a DataFrame .
2086	Undo a selection .
2087	Update selection history .
2088	Returns True if the selection can be undone .
2089	Select a selection expression .
2090	Select rows with missing columns .
2091	Return a copy of this Query .
2092	Selects a rectangle within the bounding box .
2093	Selects a bounding box .
2094	Select a circle .
2095	Select an ellipse .
2096	Create a SelectionLasso .
2097	Create a new SelectionInverse .
2098	Set a selection .
2099	Execute a selection
2100	Find valid name .
2101	Return all the root nodes in the expression graph .
2102	Return a graph representation of the graph .
2103	Sets the categories of a column .
2104	Encode an ordinal .
2105	Return a list of Dataset objects .
2106	Returns the length of the sequence .
2107	Stack two DataFrames .
2108	Concatenate two DataFrames .
2109	Exports an HDF5 file .
2110	Add a new column to the dataframe .
2111	Monkey patch a DataFrame .
2112	Decorator to register a function .
2113	Fill array with NaN values .
2114	Returns the dayofof of the given dayofweek .
2115	Return the dayofof of a dayof year .
2116	Return True if x is a leap year .
2117	Return the year of the year
2118	Convert x to datetime .
2119	Return the month name .
2120	Determine the day of a day .
2121	Return the day of a day .
2122	Returns the weekof of the week in the given year .
2123	Convert an hour into an hour .
2124	Convert a datetime object to a datetime object .
2125	Return the second value of the second value
2126	Capitalize x .
2127	Concatenate two columns .
2128	Return the contents of x .
2129	Count the number of characters in x .
2130	Find the first occurrence of x in x .
2131	Convert a string to a column .
2132	Return the index of elements in x .
2133	Convert x to lowercase .
2134	Lstrip a string or list of strings .
2135	Pad x with left and right padding .
2136	Repeat x to repeat x .
2137	Find the first occurrence of x in x .
2138	Return the rindex of x .
2139	Rearrange x with padding .
2140	Reverse a string or string .
2141	Slice a string .
2142	Strip a column from a string .
2143	Return the title of x .
2144	Return the upper bound of x .
2145	Get autotype from an array .
2146	Return a recarray as a dictionary .
2147	Store properties in a file .
2148	Write a comment to file .
2149	Write a property to file .
2150	Iterate over all properties in a file .
2151	Yield lines from a file .
2152	Show the current version of installed versions
2153	Rename a keyword .
2154	Set the fftlib library .
2155	Calculate beat_track .
2156	Adjusts the tuning of an audio file .
2157	Convert frames to samples .
2158	Convert samples to frames .
2159	Convert samples to frames .
2160	Convert midi to note
2161	Convert a hz - z - z - z - axis .
2162	Convert a set of mel coefficients to a FrequencySeries .
2163	r Calculate FFT frequencies .
2164	r Calculate cqt frequencies .
2165	r Calculate the center frequencies of a melogram .
2166	r Calculate the A - weighted weighting .
2167	Compute the time - likelihood of the samples .
2168	Convert an array of frames to samples .
2169	Compute constant CQT .
2170	Compute the pseudo - CFT of a given space .
2171	Calculate top - level frequency series .
2172	FFT filter .
2173	Trim n_binsamples from a cqt response .
2174	Compute STFT matrix .
2175	Calculate initial downsampling count .
2176	Downsample a signal .
2177	Calculate the payoff cost .
2178	Backtracking .
2179	Generate Viterbi for Viterbi .
2180	Evaluate the Viterbi decomposition .
2181	Create a uniform transition .
2182	Generate transition loop .
2183	Calculate the transition cycle .
2184	Calculate a local transition matrix .
2185	Detect onset detection .
2186	Compute onset strength
2187	Backtrack start and end points
2188	Estimate onset strength .
2189	Write a csv file .
2190	Write the wav file .
2191	Calculate the cmap .
2192	Plot a waveplot .
2193	Set the current image
2194	Create mesh coordinates .
2195	Check if axes are valid .
2196	Helper function to scale axes
2197	Center FFT bins .
2198	Calculate mel coefficients .
2199	Calculate the CQT frequency for each bin .
2200	Calculate the chromosome for a given bin .
2201	Calculate the coordinate time between frames .
2202	Estimate the pitch tuning .
2203	Calculate the Piptrack for a time series .
2204	Compute the HPFT of a given y .
2205	r Compute the harmonic of a given y .
2206	Compute the percussive percussive percolation .
2207	Stretch the time range .
2208	Compute pitch shift .
2209	Discretize a y - axis .
2210	Determine if a signal is on a signal .
2211	Trim a signal from a signal .
2212	Splits a y - axis into two samples .
2213	Gradient of the phase amplitude .
2214	r Calculates the amplitude from S .
2215	Compute magnitude spectrogram .
2216	Compute the beats for a given input file .
2217	Decompose a set of components .
2218	Perform nn - similarity filter .
2219	Helper function for nnn filter .
2220	Calculate the mel - band frequency spectrum .
2221	Calculate chroma using FFT bins .
2222	Wraps a float window to a float .
2223	Calculate the constant Q for a given interval .
2224	r Calculate constant q lengths .
2225	Convert cq to chroma .
2226	Calculate the width of a window .
2227	Get a window from a window .
2228	Multiprocessing function .
2229	Calculate the frequency frequencies for a given tuning tuning
2230	Fill a window with window_length .
2231	Compute the squared square of a window .
2232	Apply a filter to each window .
2233	r Calculate the spectral centroid of each bin .
2234	Calculate the spectral rolloff .
2235	r Calculate spectral flatness .
2236	Compute the features of a set of bins .
2237	Calculate the mean crossing of a y .
2238	Calculate the spectral frequency spectrum .
2239	Create a CQT .
2240	Calculate the spectrogram of a spectrogram .
2241	Returns the jaccard distance between two integers .
2242	Determine whether the interval overlaps between candidates .
2243	Given a list of intervals find all intervals that match the given interval .
2244	Match intervals between intervals .
2245	Match event list .
2246	Calculate the salience function
2247	Interpolics interpolation .
2248	Calculate the harmonics of the given frequency .
2249	Calculate the harmonics of x .
2250	Load audio data from a file .
2251	Load audio data from an audio file .
2252	Convert y to mono .
2253	Resample a signal .
2254	Calculate the autocorrelation of a signal .
2255	Wrapper for lpc .
2256	Calculate click signals .
2257	r Calculate the tone of a signal .
2258	Chirp signal
2259	Retrieve all files in a directory .
2260	Stretch the given audio file .
2261	Process command line arguments .
2262	Runs the hssss model .
2263	Calculate the track track .
2264	Create a beattracker from an onset envelope .
2265	Calculate the local score for a specific onset .
2266	Perform a beat on a given period .
2267	Return the last beat .
2268	Convert a recurrence matrix to lag matrix
2269	Convert a lag matrix to a recurrence .
2270	Decorator to apply a function to a time - lag - lag space filter .
2271	Subsegment a list of frames .
2272	Agglomerative clustering .
2273	Enhance path - wise algorithm .
2274	Detect onset detection .
2275	Create a frame from a numpy array .
2276	Validate audio data .
2277	Validate x .
2278	Determines the length of the data .
2279	Sort an axis .
2280	Normalize a S .
2281	Calculate the maximum of x .
2282	Creates a peak of the peak .
2283	Return a sparse matrix of rows .
2284	Roll an array .
2285	Convert a buffer to a float .
2286	Convert indices to slices .
2287	Syncs data along an axis .
2288	Soft mask for softmask
2289	Generate a tiny bit vector .
2290	Convert frames to video .
2291	Read the image .
2292	Get a single frame .
2293	Write a frame to a file .
2294	Track a progress bar .
2295	Track the progress bar .
2296	Flips an image .
2297	Rotate the image .
2298	Clip a list of bboxes to the desired size .
2299	Scales the bounding box of a scale .
2300	Crop all bounding boxes .
2301	Pad an image with padding .
2302	Convert an image to an embedd .
2303	Helper function to scale size
2304	Resize image .
2305	Resize image to dst .
2306	Rescale image .
2307	Register a file handler .
2308	Get a priority .
2309	Determine the value of an array .
2310	Display an image .
2311	Display a list of bboxes .
2312	Read a flow from a file .
2313	Write the flow to a file .
2314	Determine the density of two dimensional arrays .
2315	Load the state from a module .
2316	Load checkpoint from file .
2317	Convert a list of weights to a CPU .
2318	Save a checkpoint .
2319	Initialize the optimizer object .
2320	Initialize the logger .
2321	Returns the LRL for the optimizer .
2322	Register a hook .
2323	Run workflow .
2324	Register training hooks .
2325	Convert video to fmpeg .
2326	Resize video .
2327	Cut a video .
2328	Concatenate video files .
2329	Read a list from a file .
2330	Read a dictionary from a file .
2331	2D convolutional layer .
2332	Create an object from a dictionary .
2333	Read an image from an image .
2334	Return image from bytes .
2335	Write image to file
2336	Convert RGB to RGB .
2337	Convert RGB to BGR .
2338	Cast inputs to dst_type .
2339	Check if the given sequence is a sequence of elements .
2340	Slice a list of lists .
2341	Decorator to check prerequisites .
2342	Calculate the average of the values .
2343	Scatter a list of devices .
2344	Convert color to a tuple .
2345	Check the time of a timer .
2346	Start the timer .
2347	Return the timestamp of the timer .
2348	Return the timestamp of the timer .
2349	Display a flow .
2350	Convert a flow to RGB .
2351	Make a color wheel from a list of bins .
2352	Compute accuracy .
2353	Scatter plot .
2354	Create kwargs and kwargs .
2355	Fetch and return the response .
2356	Generate a JSON object .
2357	Return text as a string .
2358	Handle a callback .
2359	Perform multiple requests .
2360	Make a request to the API .
2361	Start the master .
2362	Normalize a task .
2363	Parse yaml line numbers .
2364	Return wheel distribution name .
2365	Return the base name of the wheel .
2366	Add package requirements .
2367	Convert an egg - info file to a directory .
2368	Create an Activity .
2369	Create suggestions for suggested actions .
2370	Create an attachment .
2371	Display a list of attachments .
2372	Create an attachment .
2373	Creates a trace .
2374	Sets the telemetry client .
2375	Read the keys from the database .
2376	Write changes to the database .
2377	Delete the specified keys .
2378	Helper function to create the StoreItem .
2379	Creates a dictionary from the serializer
2380	Sanitize a key .
2381	Creates the database and container
2382	Helper function to get a database .
2383	Get or create a container .
2384	Fill a QnaEvent with the QnaResults .
2385	Returns a ConversationReference for the given activity .
2386	Get the step name .
2387	Returns True if the given channel_id is supported False otherwise .
2388	Returns True if the card supports a card .
2389	Get channel id .
2390	Returns True if the token is an emulator .
2391	Create an attachment .
2392	Return a list of params .
2393	Return a copy of this instance .
2394	Return the inverse of this gate .
2395	Set the control to the classical register .
2396	Make a copy of this object .
2397	Convert string to qasmif .
2398	Generate qasmif
2399	Run a circuit .
2400	Perform a pass on a pass .
2401	Return a list of all the pass in the working list .
2402	Return a list of all passable passes .
2403	Create a flow controller .
2404	U base .
2405	Get parameters for a single gate .
2406	Calculate the matrix for a single gate .
2407	Compute Einsum matrix .
2408	Compute the Einsum matrix .
2409	Helper function to handle einsum mappings .
2410	Convert a circuit to DAGCircuit .
2411	fit function
2412	Calculate the OSC estimator function .
2413	Plot the coherence .
2414	Calculate mean and standard deviation .
2415	Plots the results of the function .
2416	Split a list of runs on the given parameters .
2417	Compose the U3 .
2418	Convert YYZ to XYZ .
2419	Validate input state .
2420	Trim a PIL image .
2421	Get the gate span of an instruction .
2422	Convert a circuit into an instruction .
2423	Run the layout .
2424	Find the best subgraph of the network .
2425	Create a new Barrier
2426	Average average data .
2427	Process a bit identifier .
2428	Process a node .
2429	Processes a gate .
2430	Process a node .
2431	Process a Measurement
2432	Processes if node .
2433	Create a DAG operation .
2434	Returns the duration of the given channels .
2435	Returns the start time of the given channels .
2436	Change the stop time of a channel .
2437	Iterate over all instruction instructions .
2438	Check that the given value is of the expected type .
2439	Helper function to dump additional data
2440	Load additional data .
2441	Create a validation schema .
2442	Validate an instance .
2443	Decorator for validation methods .
2444	Return the model as a dictionary .
2445	Load data from a dictionary .
2446	Calculate the quaternion of the given circuit .
2447	Generate a partial trace vector .
2448	Vectorize a density matrix .
2449	De - vectorize input matrix .
2450	Convert a polynomial polynomial .
2451	Chops an array from an array .
2452	Return the outer product of two vectors .
2453	Return the concurrence of two qubits .
2454	Calculate the shannon entropy of a pvec .
2455	Compute Shannon entropy .
2456	Computes the mutual information between states .
2457	Computes the entangulation of a state .
2458	Calculate EOF entropy .
2459	Flatten a schedule .
2460	Shift a schedule .
2461	Insert a new schedule into the parent .
2462	Append a child to parent .
2463	Creates a U3 gate .
2464	Return the backend status .
2465	Start the simulation .
2466	Returns the time remaining in the iteration .
2467	Disassemble the circuit .
2468	Calculate hamming distance between two strings .
2469	Create a quaternion from an axis .
2470	Return quaternion from Euler angles .
2471	Return a quaternion .
2472	Convert the data to a matrix .
2473	Compute the Eulerian of the matrix .
2474	Process a dictionary of data .
2475	Generate histogram .
2476	Check the type of the given data .
2477	Check the range of j .
2478	Check if a mat matrix is square .
2479	Check if matrices are diagonal .
2480	Check if op is symmetric matrix .
2481	Check if a matrix ishermitian matrix .
2482	Check if a matrix is positive .
2483	Check if a matrix is an identity matrix .
2484	Check if a matrix is an identity matrix .
2485	Convert input data to CHOI .
2486	Convert data to superopoint .
2487	Convert data to Kraus operator .
2488	Convert data to Choi .
2489	Convert data to PPM .
2490	Convert input data to stinesform .
2491	Convert data to operator .
2492	Convert data to operator .
2493	Convert a string to an Operator .
2494	Convert superop to chooser .
2495	Convert data to superopoint .
2496	Convert a Kraus matrix to a 1 - D ROI .
2497	Convert Choi matrix to Kraus matrix .
2498	Convert stine coefficients to Kraus model .
2499	Convert a StineShape to a CHOI .
2500	Convert a set of Kraus coefficients to stines .
2501	Return the superopoint of the given data .
2502	Transform data to Hoi .
2503	Transform data to a polynomial .
2504	Reshapes matrices .
2505	Apply the transformation to a Pauli matrix .
2506	Check that the input dimension is a n - qubit channel .
2507	Hide tick lines .
2508	Set label convention .
2509	Clears all points .
2510	Add vectors .
2511	Add an annotation .
2512	Render the plot .
2513	Plots the surface
2514	Show the figure .
2515	r Calculate the two qubit function .
2516	The top coordinates of the file .
2517	Center the content .
2518	Center the bot .
2519	Returns the length of the queue .
2520	Get parameters for an instruction .
2521	Returns the label for an instruction .
2522	Generate latex .
2523	Compile a circuit .
2524	Add deprecation warnings .
2525	Return information about local hardware .
2526	Check if a connection exists .
2527	Check the status of a job .
2528	Return a numpy . ndarray .
2529	Return a square .
2530	Create triangle .
2531	Computes the cosine of a complex vector .
2532	Fix the width of a Gaussian distribution .
2533	Generate a Gaussian Gaussian .
2534	Derivative of the gaussian .
2535	Generate a Gaussian square square .
2536	Default pass manager for a circuit .
2537	Create a default pass manager for a basis set .
2538	Check if a register exists .
2539	Return a mirror of this object .
2540	Return the inverse of the circuit .
2541	Add an instruction to the circuit .
2542	Attach an instruction .
2543	Add a new register .
2544	Check that the qubits are duplicates .
2545	Check for qargs
2546	Check that cargs are in the classical register .
2547	Checks the validity of the circuit .
2548	Return a string representation of the instruction .
2549	Draw the circuit .
2550	Return the number of gates .
2551	The width of the column
2552	Count the number of operations in the database .
2553	r Return the number of connected components .
2554	Bind parameters to the circuit .
2555	Bind a parameter to the database .
2556	Draw a pulse drawer .
2557	Searches for N - SWAP .
2558	Maps a set of gates to free gates .
2559	Calculate distance between gates .
2560	Compute the score of a step .
2561	Copy a DAGCircuit .
2562	Return a new DAG node for the given layout .
2563	Generate swap ops from an edge .
2564	Run the decomposition .
2565	Add a physical qubit graph to the graph .
2566	Add an edge to the graph .
2567	Return a subgraph of the subgraph .
2568	List of physical qubits .
2569	Check if the network is connected .
2570	Compute distance matrix .
2571	Compute the distance between two physical qubits .
2572	Compile a circuit .
2573	Create a new V1Gate .
2574	Inverse of the instruction .
2575	Queries gate .
2576	Returns the gate of the classical gate .
2577	Subscribe to an event .
2578	Dispatch an event .
2579	Unsubscribe a callback .
2580	Publish an event .
2581	Initialize this instance .
2582	Define the circuit .
2583	Uncompute the gates to decomposition .
2584	Calculate the bloch angles of a complex .
2585	Create a circuit for multiplex gates .
2586	Check if value is a virtual register .
2587	Return a copy of this Layout .
2588	Combine the edge map into an edge map .
2589	Add a toffoliGateGate .
2590	Insert a schedule .
2591	Raise an exception if the file is not wrapped .
2592	Convert a set of gates to indices
2593	Run the decomposition .
2594	Update the DAG with the given index .
2595	Return a set of Pauli operators .
2596	Create Pauli string from label .
2597	Initialize the Qisk .
2598	Compute the Pauli product of p1 and p2 .
2599	Convert to an operator .
2600	Convert the circuit to an instruction .
2601	Update the Qisk .
2602	Update x .
2603	Insert a Pauli matrix .
2604	Append a list of pauli_labels .
2605	Delete all qubits .
2606	Return a random NumPy array .
2607	Create a Pauli object from a Pauli operator .
2608	Compute the outcome of a state
2609	Generate a sample from the given qubits .
2610	Creates a QASM measurement .
2611	Add a qubit to the quantum state
2612	Validate initial statevector
2613	Initialize the statevector
2614	Returns the state vector of the state .
2615	Validate the measure sampling of the circuit .
2616	Runs a job .
2617	Runs the given job .
2618	Validate the given circuit .
2619	Checks that the initial unitary is valid .
2620	Initialize the matrix .
2621	Get the unitary of the graph .
2622	Run a job .
2623	Validate the configuration .
2624	Check if an object is a bit type .
2625	Run the application .
2626	Check if interval overlap .
2627	Return a new Interval object with a new interval .
2628	Return a new Timelot instance with the given timelot .
2629	Return the start time of a channel
2630	Return the number of stops in a channel .
2631	Checks if the given timeslots are merged .
2632	Return a new TimelotCollection .
2633	Return a new TimelotCollection with the given interval .
2634	Report an issue .
2635	Convert data to a dictionary .
2636	Plot the state of the agent .
2637	Creates a new RZ gate .
2638	Swap between two windows .
2639	Initialize the backend .
2640	Create a graph for the program graph .
2641	Select next program edge .
2642	Select the best available gate cost .
2643	Select the best available qubit .
2644	Run the program .
2645	Return a list of instruction instructions .
2646	Inverse of the gate .
2647	Set the gate if any .
2648	Equivalent to classical gates .
2649	Check if the data is a unitary matrix .
2650	 conjugate operator .
2651	Returns the transpose of the operator .
2652	Creates a Qisk .
2653	Tuple of the output dimensions .
2654	Convert an instruction to an operator .
2655	Updates the swap mapper .
2656	Split a bitstring into a bitstring .
2657	Format a level zero - based level memory .
2658	Format a level 1 - 1 memory array .
2659	Format a list of memory counts into a dictionary .
2660	Format counts into a dictionary .
2661	Format a state vector .
2662	Formats a matrices .
2663	Decorator to check if a function is submitted .
2664	Submit the job .
2665	Returns the status of the job .
2666	Determine whether this object is included .
2667	Plots multivector .
2668	Get the qubit frequencies for the given channel .
2669	Determine the mean of the L_LOs .
2670	Run DAG .
2671	Plot the state .
2672	Chooses n k k k k k k k k k k k k k k k k k k k k k
2673	Compute lex index .
2674	Plots the state pauli .
2675	Return a list of available hardware servers .
2676	The op node .
2677	Create a sample of a constant .
2678	Return a new SamplePulse .
2679	Generate a SamplePulse .
2680	Calculate the sample pulse pulse .
2681	Generate a sample of a triangle .
2682	Simulate a cosine pulse .
2683	Generate a sinus pulse .
2684	Generate a sample of the given amplitude .
2685	Returns the derivative of a gaussian .
2686	Draws a sample from a waveform .
2687	Returns the distance between two axes .
2688	Print the node s children .
2689	Get a backend instance .
2690	Rename a register .
2691	Removes the named operator from the graph .
2692	Add a qubit to the circuit
2693	Add a classical register .
2694	Add a wire to the graph .
2695	Verify that a condition exists .
2696	Return all bits in a condition .
2697	Add an operation node to the graph .
2698	Apply an operation back to an operation .
2699	Raise an exception if there is a DAGapap .
2700	Check that the given keymap is valid .
2701	Map a condition to a new condition .
2702	Extend the internal register with the given dag .
2703	Compose the DAG from the input circuit .
2704	Checks the given list of wires .
2705	Creates a mapping from a node to the UCSC map .
2706	Perform the full prediction of the prediction .
2707	List of topological nodes .
2708	Iterate over edges in the graph .
2709	Return a list of nodes that have a given operation .
2710	List of gate nodes .
2711	Return a list of named nodes .
2712	Returns two qubits .
2713	Return the predecessors of a given node .
2714	Return all predecessors of a given node .
2715	Return the ancestors of a node .
2716	Returns the successors of the given node .
2717	Removes an op node from the graph .
2718	Removes ancestors of a node .
2719	Removes descendants of a node .
2720	Removes the non - ancestor of a node .
2721	Removes descendants of a node .
2722	Iterate over the DAGCircuit layers .
2723	Generate the serialization layer .
2724	Iterate over the multipligraph layers .
2725	Collect all runs in the graph .
2726	Iterate over all nodes on a network .
2727	Count the number of operations in the graph .
2728	Return a dictionary of properties .
2729	Construct a tomography basis
2730	Calculate the Pauli gates for a Pauli Measurement .
2731	Set a tomography set .
2732	Process a tomographic set .
2733	Creates tomographic circuit circuits
2734	Return the data for a tomographic circuit .
2735	Returns the marginal counts of the given counts .
2736	Fits tomographic data using tomography .
2737	Performs Leastq fit to the given data .
2738	Return the projection of an op_list .
2739	Compute the linear inverse of the tensor .
2740	Creates a wand from an eigenvector
2741	Calculate Wigner data .
2742	Emit a gate gate .
2743	Check the status of a job .
2744	Monitor a job .
2745	r Compute Euler angles .
2746	Simplify U .
2747	Run a dag .
2748	Display a table of qubits .
2749	Return the history of the job history .
2750	Plots the history of the given jobs .
2751	Draws the pulse .
2752	Add a 2D gate .
2753	Build a BellCircuit
2754	Transpile pipeline .
2755	Create a circuit circuit .
2756	Execute the given experiments .
2757	Return the drive name .
2758	The control channel .
2759	Measure the current pulse channel .
2760	Acquire a channel .
2761	Computes the input state of the given circuit .
2762	Assemble a set of experiments .
2763	Unset the qiskit logger .
2764	Plot state state .
2765	Process the fidelity of a channel .
2766	Input input .
2767	Pops the stack .
2768	Push a file to the stack .
2769	Run the circuit .
2770	Return the bound method for an instruction .
2771	Convert an instruction .
2772	Convert a frame change to a frame change .
2773	Convert a persistent value to a persistent value .
2774	Convert a drive from an instruction .
2775	Convert a snapshot to a QObject .
2776	Update annotated annotations .
2777	Decorator to create a sampler function .
2778	Filter backends based on the passed backends
2779	Resolve backend name .
2780	Convert a dag into a QuantumCircuit .
2781	Make a dictionary from a matrix .
2782	Update the current |symtab| .
2783	Verify that the given gate is declared .
2784	Verify that an expression is a list of expressions .
2785	Verify that an object is a gate definition .
2786	Verify that an object is valid .
2787	Verify that the object is a bitlist .
2788	Find the first occurrence of a given token .
2789	Validate debug value .
2790	Parse the given data .
2791	Parse data .
2792	Parse the file .
2793	Creates a crz gate .
2794	Return the basis state of a string .
2795	Matrix projection matrix .
2796	Calculate purity
2797	Runs the gate .
2798	Add a widget to the backend
2799	Update the status of all backends .
2800	Generate the pending jobs .
2801	Run the CX algorithm .
2802	Get a backend .
2803	Shape of bipartite .
2804	Get the indices of the register_labels .
2805	Truncate a float .
2806	Generate a latex document .
2807	Calculate the depth of the operation .
2808	Determine the page size .
2809	Load a schema from a file .
2810	Get a validator for a given schema .
2811	Load valid schema and validators .
2812	Validate a JSON object against a schema
2813	Format error messages .
2814	Determine the majority of a p .
2815	r Calculate the unmajority of a point .
2816	Generate a latex source .
2817	Draw a matplotlib circuit .
2818	Return a random operator .
2819	Generate random density matrix .
2820	Generate aginibre matrix .
2821	r Generate a random density matrix .
2822	Random density bures
2823	Returns a list of all call names .
2824	Return the power of the Qisk .
2825	Compose the subsystem to another .
2826	Convert an instruction to a superoperator .
2827	Run a DAG .
2828	Convert a set of circuits into a q - object .
2829	Run a DAG .
2830	Run the DAG .
2831	Define the U3 gate definition .
2832	Check that the given value is of type .
2833	Check if the given value is valid .
2834	Setter for the ATOL .
2835	Set self . _tol .
2836	Reshape the Qisk .
2837	Return tuple of input dims .
2838	Returns the output dims of the model .
2839	Return a copy of the model .
2840	Creates a new Qisk .
2841	Returns a tuple of integer dims .
2842	Calculate einsum matrix .
2843	Deserialize and deserialize the data .
2844	Serialize data to JSON .
2845	Check if the given value matches the given data .
2846	Compute fidelity fidelity between states .
2847	calculate SVD
2848	Inverse of this Snapshot .
2849	Validate a label .
2850	Checks if the operator is unitary .
2851	Convert to an Operator .
2852	Convert the quantum channel to an instruction .
2853	Initialize the conversion operator .
2854	Sort enum enum by name .
2855	Monkey patch calendar time .
2856	Get a dictionary of locales .
2857	Get a list of locales .
2858	Check if tokens are valid .
2859	Split a string into tokens .
2860	Parse a date string .
2861	Parse a date string .
2862	Determines if the given date string is applicable .
2863	Translate a date string .
2864	Parse a date string into a datetime object .
2865	Return the AMMO generator .
2866	Convert an exception to a byte string .
2867	Convert an exception to an HTTP exception .
2868	Read the daemon configuration .
2869	Generate the daemon configuration .
2870	Get information about the stream .
2871	Build the configuration .
2872	Log stderr to stdout .
2873	Expand a string into an integer .
2874	Read StepperWrapper .
2875	Publish a stepper .
2876	Generate the filename for Stpd .
2877	Read the cached stepper info .
2878	Write cached options to disk .
2879	Create stpd file .
2880	Create a schedule
2881	Return the rps at time t .
2882	Execute a command .
2883	Decode a list of monitoring points .
2884	Creates points for a given label
2885	Publish a key to the server .
2886	Count the number of codes in a dictionary .
2887	Stop the pool .
2888	Feed data to Stpd .
2889	Initialize logging .
2890	Add user options .
2891	Configure the configuration .
2892	Do a graceful shutdown .
2893	Collect data from the queue .
2894	Notify listeners
2895	Get a marker object .
2896	Parse a duration .
2897	Start the agent on localhost .
2898	Start the SSH agent .
2899	Try to find the jeter UDP UDP UDP port .
2900	Add JMX components .
2901	Terminate the process .
2902	Read data from lines .
2903	Creates a criterion class from a string .
2904	Read the configuration from an XML file .
2905	Create startup startup config file .
2906	Check disk usage .
2907	Raise RuntimeError if the virtual memory is less than 1 .
2908	Get terminal size .
2909	Returns the right line
2910	Truncate lines in line_arr
2911	Render the left panel .
2912	Render the screen .
2913	Add an info widget .
2914	Returns the width of the rendered page
2915	Calculate the length of a line .
2916	Create a load plan .
2917	Get the current level .
2918	Add an info widget to the screen .
2919	Make a request to the server .
2920	Load plugins .
2921	Return the plugin of the given type .
2922	Return a list of plugins that match the given type .
2923	Collect a file .
2924	Add artifact file to collect .
2925	Create a temporary file .
2926	Load configuration files .
2927	Flush configuration to file .
2928	Get all options from a section .
2929	Find all sections in a prefix .
2930	Decode stats from a chunk .
2931	Get the cached info .
2932	Prepare the monitoring agent .
2933	Poll data for each agent .
2934	Sends the collected data to all monitored listeners .
2935	Detect the current configuration .
2936	Handle data items
2937	Extract the data from a block .
2938	Subscribe to channels .
2939	Start the event loop .
2940	Close the canvas .
2941	Perform a single request .
2942	Submit an order .
2943	Get a specific order
2944	Get a position by symbol
2945	List assets .
2946	Get an asset by symbol
2947	Creates a JOIN instruction .
2948	Returns the value of a dict or None if it does not exist .
2949	Wrapper for opt_dict
2950	Construct a single event logger .
2951	Construct a JSON event logger .
2952	Read configuration from a file .
2953	Get the configuration of a repository .
2954	Format a GraphQL config object .
2955	Get a pipeline by name .
2956	Get all pipeline definitions .
2957	Get next event .
2958	Execute a pipeline .
2959	Wait for all processes to finish .
2960	Factory function for creating a FieldImpl .
2961	Builds the ExecutionPlan .
2962	Builds a pipeline definition .
2963	Build a sub - pipeline .
2964	Return the name of the named pipeline .
2965	Construct publish commands .
2966	Release a new version
2967	Returns a context definition .
2968	Decorator to create input selector schema .
2969	Decorator to declare a selector schema .
2970	Wrap text with indentation .
2971	Download a file from S3 .
2972	Upload file to S3 .
2973	A context manager that ensures that a user - defined error occurs .
2974	Create a new directory .
2975	Creates a context manager for a user code .
2976	Create a context free logger .
2977	Returns True if all step events have been completed .
2978	Return True if step events are skipped .
2979	Return the transformed values .
2980	Get the transformed value .
2981	Data of step failures .
2982	Return a copy of the configuration dictionary .
2983	Check if config value is valid .
2984	Check if a table value is valid .
2985	Execute core transform .
2986	Convert an existing object to a DAGster type .
2987	Decorator to define a resource definition .
2988	Create EventV2 .
2989	Coalesce the given execution plan .
2990	Get connection parameters .
2991	Create a new connection .
2992	Create a Cursor instance .
2993	Close the database .
2994	Make an MDL document from a model .
2995	Convert the model to a list .
2996	Creates a form field .
2997	Convert value to MDL .
2998	Apply a queryset to the queryset .
2999	Compute the uniform distribution .
3000	Compute the number of frames .
3001	Helper function to compute best partitions .
3002	Return a list of optimal partitions .
3003	Calculate the limits between two points .
3004	Initialize the seed values .
3005	Return the size of the seed .
3006	Serialize the MinHash into the buffer .
3007	Deserialize a buffer from a buffer .
3008	Update the hash function .
3009	Merge two MinHash functions .
3010	Creates a union of MinHash objects .
3011	Index a list of partitions .
3012	Query the index .
3013	Calculate the minimum hash of a dataset .
3014	Remove a key from the dict .
3015	Update the register .
3016	r Calculate the counts of the model .
3017	Merge this HyperLogLog with another .
3018	Clear the grid .
3019	Compute the accuracy of the actual object .
3020	Compute the mean - squared distance between two predictions .
3021	Index all hashtables .
3022	Returns a list of indices matching the given minhash .
3023	Close this instance .
3024	Configure a storage storage storage .
3025	Factory for unordered storage storage .
3026	Get user details .
3027	Initialize social login
3028	Select text from given text .
3029	Parse a macro selector .
3030	Parse a single statement .
3031	Parse the value .
3032	Advance the next line .
3033	Parse a configurable reference .
3034	Augment an exception and raise an exception .
3035	Convert a string to markdown format .
3036	Runs after creation session .
3037	Ensure that the wrapped function is wrapped .
3038	Decorator to mark a function or class .
3039	Format a value .
3040	Clear all global constants .
3041	Bind a parameter to a configuration key .
3042	Query the parameter for a given binding key .
3043	Determine whether a function has a parameter name .
3044	Return the cached argspec for the given function .
3045	Get the names of positional parameter names .
3046	Get all positional parameters .
3047	Get the default parameter values for the given function .
3048	Temporarily populates a scope .
3049	Decorator to mark a function as a decorator .
3050	Return a string representation of the operative config .
3051	Parse a config file .
3052	Register a file reader .
3053	Parse a config file .
3054	Parse a list of config files .
3055	Parse a value into a ConfigParser .
3056	Finalize the configuration .
3057	Iterate over nested values .
3058	Iterate over configurable references .
3059	Set a constant .
3060	Create constants from enum .
3061	Returns matching selectors .
3062	Get all matches for a given partial selector .
3063	Return a minimal selector from a selector .
3064	Convert a search query into a string .
3065	Parse a Retry - After - After - After response .
3066	Validate that value is valid .
3067	Return the property description as a dict .
3068	Set the value to the given value .
3069	Return the item with the given idx .
3070	Initialize self .
3071	Set default headers .
3072	Prepare the request .
3073	Get a single thing
3074	Called when a message is received .
3075	Post a thing .
3076	Delete a thing .
3077	Start the webhook .
3078	Return the action description as a dictionary .
3079	Start the task .
3080	Finish the action .
3081	Return the event description as a dictionary .
3082	Get the IP address
3083	Return a set of all known interfaces .
3084	Set the value .
3085	Notify external update .
3086	Return a description of the thing .
3087	Set the href prefix for all properties .
3088	Returns a dictionary of all of the properties .
3089	Returns a list of action descriptions .
3090	Returns a list of all event descriptions .
3091	Add a property .
3092	Remove a property from the collection .
3093	Get the value of a given property .
3094	Get a dictionary of properties .
3095	Set the value of a given property .
3096	Get action by name .
3097	Add an event .
3098	Add an available event .
3099	Perform an action .
3100	Remove an action .
3101	Add an available action .
3102	Remove a subscriber .
3103	Add an event subscriber .
3104	Remove an event subscriber .
3105	Notify a property .
3106	Send an action to all subscribers .
3107	Send an event notification .
3108	Annotate the annotations .
3109	Updates the database .
3110	Bulk insert a list of rows
3111	Creates a new entry in the database .
3112	Insert the model into the database .
3113	Build a postgres insert query .
3114	Checks if a field is a magic field .
3115	Get the updated fields .
3116	Called when a model is saved .
3117	Called when a model delete is deleted .
3118	Create a Case instance .
3119	Resolve an expression .
3120	Return the sql as a SQL string .
3121	Return a copy of this object with the given relabels .
3122	Add a join condition to this table .
3123	Checks if a field is an HStoreField .
3124	Insert a list of values into the model .
3125	Creates a required hyperparameter requirement .
3126	Rename the required hstore .
3127	Drops the required requirement .
3128	Returns the name of the required constraint .
3129	Creates a SQL query for the model .
3130	Create a custom command .
3131	Get the base backend base class .
3132	Prepare the database .
3133	Prepare the value for the field .
3134	Formats the query to return the query .
3135	Return a copy of this query .
3136	Rewrite the insert action .
3137	Rewrite insert update .
3138	Rewrite an insert .
3139	Builds a conflict target .
3140	Get the field of a model .
3141	Format field name .
3142	Returns a string representation of a field .
3143	Creates a unique constraint .
3144	Rename a unique table .
3145	Drops a unique constraint .
3146	Generate unique constraint name .
3147	Iterate over the unique keys .
3148	Add a condition to the field .
3149	Returns the sql for this compiler .
3150	Calculate the Tdist95959595959595959595959595 .
3151	Calculate the weighted sample variance .
3152	Compute the t score between two samples .
3153	Check if two samples are significant .
3154	Topological version of toposort .
3155	Generate the number of queens .
3156	Play a random game .
3157	Select a random position .
3158	Play a random playout .
3159	Filter benchmarks by base_vercs .
3160	Expand the name of a bench .
3161	Generate a string table table .
3162	Initialize benchmarks .
3163	Retrieves the domain .
3164	Fetch messages from a channel .
3165	Parse the post .
3166	Retrieve information about a user .
3167	Fetch items from category
3168	Yield rss entries
3169	Setup the command parser .
3170	Fetch items from the given date .
3171	Get bugs .
3172	Get comments for a bug .
3173	Get the history of a bug .
3174	Get attachments .
3175	Get all the notes for an issue .
3176	Fetch merge requests .
3177	Get the notes for a merge .
3178	Get the versions of a merge .
3179	Retrieves all merged merge records .
3180	Merge a merge .
3181	Retrieve a list of versions for a given merge .
3182	Retrieve a merged version .
3183	Fetch notes for a specific item .
3184	Fetch all emojs for a given item .
3185	Fetch all the emoji for a note .
3186	Calculate the time to reset .
3187	Fetch items from GitLab
3188	Initialize the rate limit .
3189	Setup the command parser .
3190	Fetch latest items from given date .
3191	Return metadata for a metadata item .
3192	Retrieve the members of a conversation .
3193	Get information about a channel .
3194	Get information about a user .
3195	Setup the command parser .
3196	Get metadata updated from metadata .
3197	Parse Buglist .
3198	Parse the bugs .
3199	Parse a bug activity .
3200	Logout from Bugzilla .
3201	Retrieves metadata from the server .
3202	Get a list of CGI bugs .
3203	Retrieve a list of bugs .
3204	Get information about a bug .
3205	Fetch dates from the given date range .
3206	Fetch events from a group
3207	Get events from a group .
3208	Get all comments for a particular event .
3209	Retrieve all registered RRSPS for the specified event .
3210	Retrieve the html question for the given question .
3211	Get the comments for the given question .
3212	Builds the question object from the html question .
3213	Get all available API queries .
3214	Get html question .
3215	Get comments for a post .
3216	Parses a question .
3217	Parse the answer information from an HTML question .
3218	Parse the number of html pages .
3219	Parse the user info .
3220	Fetch all reviews .
3221	Parse reviews .
3222	Fetch a Gerrit28 .
3223	Get the server version .
3224	Get reviews from the last item .
3225	Retrieve the next group item .
3226	Execute a command .
3227	Execute a command from the archive .
3228	Execute a command from the remote .
3229	Setup the command parser .
3230	Fetch the issue data .
3231	Fetch all attachments for an issue .
3232	Fetch messages from an issue .
3233	Fetch activities from an issue .
3234	Fetch user data
3235	Get user information .
3236	Get details about an issue .
3237	Retrieve a collection of bugs .
3238	Returns the URL for the project .
3239	Fetch items from the server
3240	Get all subscriptions
3241	Find the group ID
3242	Perform a GET request
3243	Setup the command parser .
3244	Generate a uuid .
3245	Fetch an archive
3246	Fetch objects from an archive
3247	Find all backends of a given package .
3248	Fetch metadata for a given category .
3249	Fetch metadata from an archive .
3250	Filter for classified data .
3251	Parse arguments .
3252	Set basic authentication arguments .
3253	Sets the options for the archive .
3254	Set the command line arguments .
3255	Run the archive .
3256	Initialize the archive .
3257	Get the timestamp of an item .
3258	Parse a mbox file .
3259	Fetch all messages from a given datetime .
3260	Copies the mbox to a temp file .
3261	Validate a message .
3262	Convert a dictionary to a dictionary .
3263	Get a message from the mailbox .
3264	Fetch latest items
3265	Fetch latest items from the repository .
3266	Parse a git log file .
3267	Initialize the git repository .
3268	Setup the command parser .
3269	Parse the current state of the stream .
3270	Clone a repository .
3271	Count the number of objects in the repository .
3272	Check if the repository is detached
3273	Update Git repository .
3274	Get all commits from the Git repository .
3275	Get a list of git revs .
3276	Log a Git repository .
3277	Execute git show command
3278	Fetch the contents of the repo
3279	Read commits from a pack .
3280	Update references in the given list .
3281	Find all refs in the repo .
3282	Update a ref
3283	Execute a command .
3284	Read stderr from the subprocess .
3285	Execute a git command .
3286	Fetch tweets .
3287	Fetch tweets from a category
3288	Fetch tweets from the API .
3289	Setup the command parser .
3290	Fetch items from category
3291	Fetch data from keywords .
3292	Parse hits .
3293	Get hits for a given keywords .
3294	Get the timestamp of a particular item .
3295	Get metadata category .
3296	Fetch pull requests .
3297	Fetch repo information
3298	Get list of reaction reactions .
3299	Get all reaction reactions for a specific comment .
3300	Get issue assignments .
3301	Get the list of reviews for the pull request
3302	Get the hashes of the pull commits .
3303	Get all reactions for a pull review .
3304	Get a user .
3305	Fetch issues for a particular issue .
3306	Fetch issues .
3307	Returns a generator for pull requests .
3308	Return the repository s repository
3309	Pulls the requested reviews .
3310	Fetch commits
3311	Fetch reviews for a review .
3312	Get a user
3313	Return a list of user s organizations .
3314	Get the rate limit .
3315	Get the rate limit for tokens .
3316	Choose the best API point .
3317	Check if the current token is valid .
3318	Update the current rate limit
3319	Initialize the metadata table .
3320	Store data in the database .
3321	Retrieve an entry from the database .
3322	Create an archive .
3323	Make a hashcode for a request .
3324	Verify that the archive is correctly corrupted .
3325	Load metadata from an archive .
3326	Count the number of rows in the database .
3327	Create the archive .
3328	Remove an archive .
3329	Searches for archived archives .
3330	Yield archive files .
3331	Yield all files in the directory .
3332	Check if filetype is compressed
3333	Iterate over months between two dates .
3334	Convert a message to a dictionary .
3335	Remove illegal XML characters from XML .
3336	Convert XML to dict .
3337	Parse issues from a JSON file .
3338	Get a list of issues .
3339	Get information about an issue .
3340	Get information about a user .
3341	Call redmine client .
3342	Fetch the items from the given category
3343	Fetch items from the repository .
3344	Request a repository .
3345	Map custom fields to custom fields .
3346	Filter custom fields
3347	Parse issues from raw JSON .
3348	Fetch items from a url
3349	Returns a list of issues for the given date range .
3350	Get comments for an issue .
3351	Returns a list of fields
3352	Fetch items from category
3353	Returns a list of jobs .
3354	Get all builds for a job .
3355	Parse the questions from the raw page .
3356	Fetch all questions from the server .
3357	Setup the command parser .
3358	Fetch items from the given category .
3359	Get the max timestamp for the given reviews .
3360	Fetch pages from a URL .
3361	Get all pages
3362	Get recent pages .
3363	Fetch chats .
3364	Parse messages from a JSON object .
3365	Filters a message by a given chat
3366	Retrieve changes from the server .
3367	Fetch items from a group .
3368	Populate the metadata .
3369	Parse an article .
3370	Fetch data from remote archive .
3371	Fetch an article
3372	Fetch data from remote .
3373	Fetch data from the archive .
3374	Create a HTTP session .
3375	Sets up the rate limit handler .
3376	Sleep for rate limit .
3377	Update the rate limit .
3378	Parse a Supybot log file .
3379	Retrieve the list of available archives from a given date .
3380	List all available files .
3381	Parse the message .
3382	Parse supybot timestamp .
3383	Parse a SUPYbot message .
3384	Fetch all topics from the given category .
3385	Parse a list of topics .
3386	Get information about a topic .
3387	Send a POST request .
3388	Fetch all tasks from the given URL .
3389	Parse a list of tasks .
3390	Parse a JSON object .
3391	Returns a generator of tasks from the server .
3392	Get a list of transactions .
3393	Get a list of users .
3394	Get a list of phids .
3395	Make a request to the API .
3396	Return metadata for an item
3397	Parse the contents of a json file .
3398	Returns the contents of the confluence query .
3399	Get historical content .
3400	Parse the measurement result .
3401	Extract capabilities from a URL .
3402	Read data from the server .
3403	Read a string from a string .
3404	Parse the result of the Measurement .
3405	Build the base URL .
3406	Find all elements of a complex type .
3407	Construct a schema from elements .
3408	Returns a description of a feature type .
3409	Run a complex input with a reference .
3410	Retrieve movie list .
3411	Retrieve a list of TV lists .
3412	Retrieve a list of movies .
3413	Retrieve information about a specific user .
3414	Retrieves the alternative titles .
3415	Retrieve a list of credits .
3416	Retrieve external ids .
3417	List all keywords .
3418	Retrieve recommendations .
3419	Retrieves the release dates .
3420	Retrieves a list of releases for a specific user .
3421	Retrieve a list of translations .
3422	Get a list of similar movies .
3423	Retrieve reviews .
3424	Retrieve a list of changes .
3425	Get upcoming upcoming events .
3426	Get the currently playing .
3427	Retrieve a list of popular URLs .
3428	Retrieves a list of the top - rated attributes .
3429	Retrieves the list of accounts for this account .
3430	Get a rating .
3431	Retrieve movie credits .
3432	Retrieve TV credits .
3433	Retrieve information about a credit .
3434	Retrieve TV data .
3435	Retrieve information about a project .
3436	Retrieve a list of movies .
3437	Retrieve information about a specific session .
3438	Retrieves all watched watchlist movies .
3439	Create a new token .
3440	Validate a token validate .
3441	Create a new session .
3442	Create a new guest session .
3443	Get a list of movie movies .
3444	Retrieves the status of an item .
3445	Creates a new list .
3446	Remove an item from the session .
3447	Clear all sessions .
3448	Retrieves the content ratings .
3449	Gets a list of all the similar attributes .
3450	Retrieve the status of the radio .
3451	Retrieve season data .
3452	Retrieves all credits .
3453	Retrieves all external ids .
3454	Retrieves information about a series .
3455	Retrieves the credits .
3456	Retrieve external ids .
3457	Set attributes to a dictionary .
3458	Retrieve a movie .
3459	Retrieve a collection .
3460	Retrieve information about a TV .
3461	Retrieve information about a person .
3462	Retrieve information about a company .
3463	Get a specific keyword .
3464	Retrieves multiple files .
3465	Normalize a string .
3466	Cooks n - grams
3467	Fills a set of n - grams .
3468	Convert an erfcc to an erfcc .
3469	Align texts to target_blocks .
3470	Get all descriptors in a given module .
3471	Register a descriptor .
3472	Register a new descriptor .
3473	Print a string to stdout .
3474	Checks if the given descriptor is a class .
3475	Convert this object into a dictionary .
3476	Get the coordinate .
3477	Compute the atomic angle of the atom .
3478	The surface area of the surface .
3479	Create a molecule from a molecule .
3480	Convert a JSON object into a ConstDescriptor object .
3481	Fill missing values .
3482	Return a copy of the mol .
3483	Return a list of key - value pairs .
3484	Return the dictionary as a dictionary .
3485	Get a copy of this object .
3486	Decorator to log calls .
3487	Decorator for synchronous functions .
3488	Prints a progress message
3489	Print a message to stdout .
3490	Log a message and exit .
3491	Get a temporary file .
3492	Set tempfile .
3493	Clean temp files
3494	Return the fixed path of the path .
3495	Get parameters for a given method .
3496	Merge options with a dictionary .
3497	Add options to the parser .
3498	Terminate the task .
3499	Add a task to the queue .
3500	Join the worker threads .
3501	Count the number of processed tasks .
3502	Read S3 keys from environment variables .
3503	Read S3 keys from commandline .
3504	Read S3 keys from S3 .
3505	Initialize S3 keys .
3506	Connect to S3 .
3507	List all S3 buckets .
3508	Perform an S3 walk on the specified directory .
3509	Iterate over all files in a local directory .
3510	Expand the source .
3511	Upload a single file to S3
3512	Put files into a directory .
3513	Create a bucket .
3514	Update the privilege of an object .
3515	Prints a list of files .
3516	Download a single file .
3517	Get files from S3 .
3518	Copy a single file from a source to another .
3519	Copy files from source to target .
3520	Delete all files in a directory .
3521	Walks a directory and returns all relative paths
3522	Discovers files from source to destination .
3523	Returns the md5 hash of a file .
3524	Get the md5 of the file .
3525	Create directories for the given target .
3526	Check if an MD5 file exists .
3527	Return True if path_path matches filter_path .
3528	Perform an S3 walk .
3529	Called when an object is modified .
3530	Get file privilege privilege .
3531	Lookup an object by s3 URL .
3532	Read a file from a file .
3533	Upload a file to S3 .
3534	Verify that the file size is correct .
3535	Write data to a file .
3536	Copy a file to S3 .
3537	Run the command .
3538	Validate the provided parameters
3539	Pretty print a list of objects .
3540	List all buckets .
3541	Create mb bucket .
3542	Put files .
3543	Run s3 handler .
3544	Run s3 handler .
3545	Discovers and dsync files
3546	Parses the provided files .
3547	Execute the mv command .
3548	Deletes the specified files .
3549	duplication handler
3550	Handle the total size .
3551	Match date .
3552	Match time .
3553	Match the delta value .
3554	Check the value of an option .
3555	Discover all configured gateways .
3556	Start listening for messages .
3557	Get data from the hub .
3558	Push data to the server .
3559	Generate a key .
3560	Catch exception handler
3561	Include rollbar hooks
3562	Ensure the log handler exists .
3563	Get the request object .
3564	Initialize the rollbar .
3565	Decorator to register a function .
3566	Report a message to the Rollbar .
3567	Search for items .
3568	Create the log file .
3569	Build the person data
3570	Add lambda context data .
3571	Add request data to rollbar .
3572	Check if frames are present in the project .
3573	Builds the request data
3574	Build server data .
3575	Build a payload
3576	Run the server .
3577	Compose a Unicode string .
3578	Decomposes a Hangul letter .
3579	Returns True if the given letter has a Hangulian .
3580	Attach a word to a string .
3581	Check if an exception is inside an exception .
3582	Return True if the given node is inside an astroid .
3583	Get all the elements of a node .
3584	Determine whether or not a clob .
3585	Return True if the node is a super class .
3586	Check if a node is an error .
3587	Check if the given node is a default argument .
3588	Return True if the given node is a function decorator .
3589	Return True if the given frame is ancestor of the given frame .
3590	Assign a node to the astroid .
3591	Decorator to register messages .
3592	Iterate over the format strings .
3593	Get the argument from a call node .
3594	Determine if an exception is inherited from a standard error .
3595	Return the error of the given type .
3596	Return True if the given node is decorated with the given function .
3597	Returns True if func is decorated with the given function .
3598	Finds an astroid .
3599	Checks if the given node is an astroid .
3600	Return the exception handlers for the given exception .
3601	Returns True if the given exception is ignored .
3602	Return True if the node is abstract .
3603	Infer the inferred node .
3604	Return the type of the given node .
3605	Returns True if the given function is registered in the astroid .
3606	Return True if this node is postponed .
3607	Return a list of qualified names .
3608	Get import name from import node .
3609	Return a string representation of the tree .
3610	Generate a symports graph .
3611	Visit an import node .
3612	Visit an import node .
3613	Check if the given import instruction is correct .
3614	Records an imported module .
3615	Ensure that the import order is correct .
3616	Check if a module is a relative import node .
3617	Add an imported module .
3618	Check for deprecated modules .
3619	Check if the preferred module is present .
3620	Report external dependencies .
3621	Filters out dependencies that depend on dependencies .
3622	Get the default options .
3623	Insert default options into sys . argv
3624	Check if the given attribute is visible .
3625	Returns a list of callbacks .
3626	Visit a node .
3627	Ensure that the checks are consistent .
3628	Check if call is valid .
3629	Check if a node is datetime .
3630	Check if a node is open .
3631	Handle a message .
3632	Prints messages to stdout .
3633	Return the title of a node .
3634	Set default options .
3635	Check if a given node exists .
3636	Add a class to the class
3637	Get ancestors of a node .
3638	Return an iterator over the nodes of the given class .
3639	Extract all classes of the given class .
3640	Remove the project from the given node .
3641	Add importfrom to dependencies
3642	Create a classdiagram instance .
3643	Return a list of Dadef diagram definitions .
3644	Check if the given name is ignored .
3645	Return a list of nodes matching the given attribute name .
3646	Emit an astroid .
3647	Check if the given node is a parent of the given type .
3648	Return True if the given name is fully qualified .
3649	Determine whether the given node is a non - context variable .
3650	Visit an attribute node .
3651	Visit an assignment node .
3652	Check if a function is called .
3653	Visit unary operator errors .
3654	Iterate over all the interfaces .
3655	Create a project from a list of files .
3656	Generate package identifier .
3657	Visit function definition .
3658	Visit an assignment node .
3659	Handle assignment attribute types .
3660	Visit an import node .
3661	Visit an import from a module .
3662	Compute the module s module .
3663	Handle imported module .
3664	Return the ANSI code as a string .
3665	Colorize an ansi code .
3666	Register a parser .
3667	Handle a message .
3668	Print the given layout .
3669	Process a message .
3670	Open a graph .
3671	Print a node .
3672	Write edge .
3673	Check if a format node is valid .
3674	Process a non - raw string token .
3675	Add new section
3676	Add an evaluation section
3677	Visit a table .
3678	Create a default table .
3679	Register a new message .
3680	Register messages from a checker .
3681	Register a message .
3682	Check if a message is valid .
3683	Raise an InvalidMessageError if a symbol is not a symbol .
3684	Helper function to raise an InvalidMessageError .
3685	Get the definitions for a message .
3686	Return a string representation of a message .
3687	Help message .
3688	Lists all messages .
3689	List all installed pylint extensions .
3690	Return the CPU count .
3691	Report stats for messages in a particular sect .
3692	Temporarily change python path .
3693	Load dynamic plugins .
3694	Load dynamic plugins
3695	Set an option .
3696	Register a checker .
3697	Disable all registered reports .
3698	Enable porting mode
3699	Return a list of all the checkers .
3700	Get the names of all checkers .
3701	Prepare checkers .
3702	Expand a list of modules .
3703	Sets the current module .
3704	Run an AST node .
3705	Report the code evaluation .
3706	Handle help message .
3707	Print full documentation .
3708	List messages .
3709	List all checker groups .
3710	Normalize text .
3711	Return the module and frameid and frameid .
3712	Decode a line .
3713	Check if base_name is in base_list .
3714	Import plugins from a directory .
3715	Comment a string .
3716	Format an option value .
3717	Format a section .
3718	Format an ini file .
3719	Inserts a child at the given index .
3720	Append a child to this VNode .
3721	The list of parents of this node .
3722	Format the file .
3723	Return the contents of a table .
3724	Compute the content of the layout .
3725	Collect block lines .
3726	Handle an ignored message .
3727	Register a report .
3728	Make the report .
3729	Add stats to self . stats .
3730	Return the name of the setters property .
3731	Get the property of the setters property .
3732	Returns True if returns False otherwise .
3733	Return a list of possible exception types .
3734	Process messages from a module .
3735	Process a module .
3736	Process a list of tokens .
3737	Determine if a module is imported from the future .
3738	Checks if the given AST node is an astroid .
3739	Return an overridden method .
3740	Return the unpacked extra information .
3741	Detects global scope .
3742	Returns True if the given name node is assigned to the given name node .
3743	Mark a node as consumed .
3744	Visit an astroid .
3745	Detect a class scope .
3746	Check if the given node is in the upper function scope .
3747	Check if the given node is unbalanced .
3748	Check that all of the metaclasses are valid .
3749	Return list of installed packages .
3750	Install packages .
3751	Run the plugin .
3752	Create a table of similarity between two statistics .
3753	Run hdi .
3754	Append a stream to the stream .
3755	Compute a list of pairwise comparisons .
3756	Print the number of duplicates .
3757	Find common segments between two lines .
3758	Iterate over all simmers .
3759	Return an iterator over the stripped lines .
3760	Return the index of the strip .
3761	Check if the definition is equivalent to the call .
3762	Check if two arguments are equal .
3763	Determine if an astroid has a default value
3764	Determine differences between two methods .
3765	Safely infer the inferred call result .
3766	Set the scope of the given node .
3767	Visit a classdef node .
3768	Check if a node is consistent .
3769	Checks if the given node is valid .
3770	Check if functionDef is astroid .
3771	Check if the given function can be used .
3772	Leave a function definition .
3773	Check if the slot is in slots .
3774	Set node s name .
3775	Checks if the given node is accessed .
3776	Check if a class is abstracted .
3777	Checks if the given method is valid .
3778	Checks if the given parameter is a valid method parameter .
3779	Return True if the body is raised .
3780	Check if the given node is valid .
3781	Recursively visit function def .
3782	Display the report .
3783	Return True if the namedtuple is a namedtuple .
3784	Checks if the given node is an enum class .
3785	Return True if the given node is a dataclass .
3786	Open the Linter .
3787	Visit classdef node .
3788	Called when a classdef has been declared .
3789	Add INDRA Statements .
3790	Check if there is a boolean expression .
3791	Checks if the given docstring is valid .
3792	Format the template into a dictionary .
3793	Return True if the given token is a trailing clause .
3794	Checks if the given node is an ELIF .
3795	Check if a node is simplifiable .
3796	Check if a generator is inside a stop iteration .
3797	Check if an exception is inherited from a StopIteration .
3798	Checks if the next call is raised .
3799	check for nested blocks
3800	Return a list of duplicated types .
3801	Checks if a node is a sub - instance .
3802	Checks if the given node is valid .
3803	Checks if the given node is an or - operator .
3804	Check if the return statements are consistent .
3805	Determine if a return is end of a function .
3806	Return an astroid .
3807	Check if an output format is available .
3808	Run the project .
3809	Write package dependencies .
3810	Write classes to diagram .
3811	Set the file printer
3812	Set the VCG printer .
3813	Return whether or not this module should be emitted .
3814	Formats the help message .
3815	Get environment variables .
3816	Run pylint .
3817	Run pylint .
3818	Extract cycles from a graph .
3819	Get source .
3820	Generate a graph from a file .
3821	Format a REST section .
3822	Register a message handler for a message .
3823	Disable a message .
3824	Enable a message .
3825	Return the symbol symbol for a messageid .
3826	Returns True if message is enabled False otherwise .
3827	Add a message definition .
3828	Print the full documentation .
3829	Print the documentation of a checker .
3830	Get the indent length of a line .
3831	Get indentation line .
3832	Indent a token .
3833	Handle a line start .
3834	Return a list of valid indentations .
3835	Return the hanging indentation after the given bracket .
3836	Return the contents of the current bracket .
3837	Push a token onto the stack .
3838	Process a new line .
3839	Check if a keyword is a valid keyword .
3840	Determine if a type is inside a valid type annotation .
3841	Checks the spacing of tokens and spaces .
3842	Check if token is outside space .
3843	visit a default statement
3844	Check if a single statement is a single statement .
3845	Check if lines are valid .
3846	Checks if the given string is valid .
3847	Return True if the given node is in an iterable .
3848	Checks if the given node is a conditional import .
3849	Visit a named node .
3850	Add an error message .
3851	Visit an AST node .
3852	An exception handler .
3853	Visit a raise an exception .
3854	Find the pylintrc file .
3855	Validate that value is valid .
3856	Expand an option .
3857	Match a long option .
3858	Register options provider .
3859	Set provider option .
3860	Set global option .
3861	Generate configuration options .
3862	Load the config file .
3863	Load command line configuration .
3864	Add a help section .
3865	Return the help string for the command .
3866	Load the default options
3867	Get the name of an option .
3868	Get the definition of an option .
3869	Iterate over all available options .
3870	Return True if func is a method call .
3871	Check if the node is a complex format string .
3872	Handle logging modules .
3873	Visit an import from a module .
3874	Add import names .
3875	Visit a call .
3876	Check that the format_string is valid .
3877	Determine if the given node is in loop .
3878	Get the parent node of a break loop .
3879	Return True if the loop is early .
3880	Return a list of properties and their names .
3881	Determine the name of a function .
3882	Report statistics about a particular type .
3883	Check if a node is redefined
3884	Return True if call is one of a call .
3885	Visit an astroid .
3886	Check if the given node is nonlocal and global variables .
3887	Check if a call is abstract .
3888	Checks if the node is not in the loop .
3889	Check if a node is in - loop .
3890	Initialize the linter .
3891	Visit an astroid .
3892	Visit a lambda expression .
3893	Add an assertion .
3894	Visit a dictionary .
3895	Check whether a node is unreachable .
3896	Checks if the given node is not in the loop .
3897	Checks if the given node is invalid .
3898	Check if an assign name is valid .
3899	Check if a node is blacklisted .
3900	Check if the given node is a valid docstring .
3901	Checks if a literal is comparable .
3902	Add a subgraph to the graph .
3903	Parse a subgraph node .
3904	Visitor for a module .
3905	Add a checker .
3906	Recursively walk the checker .
3907	Add a relationship between two objects .
3908	Get a relation by object type .
3909	Returns a list of the attributes of the given node .
3910	Returns a list of all registered methods .
3911	Add an object to the diagram .
3912	Return a list of class names .
3913	The list of classes of this node .
3914	Return classe by name .
3915	List of modules .
3916	Get a module by name .
3917	Get a module by name .
3918	Add a node from a dependency .
3919	Delete the grant .
3920	Query the model .
3921	Get a user .
3922	Get an access token .
3923	Set a token .
3924	Set access token .
3925	Get a single client .
3926	Prepare a request .
3927	Initialize the extension .
3928	Create a remote app .
3929	Make a request to the API .
3930	Authorize the OAuth2 API .
3931	Handle an OAuth1 request .
3932	Handle OAuth2 requests .
3933	Handle authorized response .
3934	Decorator to handle authorization requests .
3935	Hash a token .
3936	Create a client with the given token .
3937	Create a new OAuth client .
3938	Ensure that the application is insecure .
3939	Confirm authorization request .
3940	Decorator for HTTP requests .
3941	Get client secret .
3942	Get a request token from a request .
3943	Get access token from request .
3944	Returns the default realms
3945	Returns the realms of the request .
3946	Get the redirect uri for a request .
3947	Get the rsa key for a request .
3948	Validate client key .
3949	Validate a request token .
3950	Validate an access token .
3951	Validate a nonce .
3952	Validate redirect_uri .
3953	Validate the realms of a request .
3954	Validate a verifier .
3955	Verify a request token .
3956	Verify that all realms are enabled .
3957	Save an access token .
3958	Save a request token .
3959	Save a verifier
3960	Returns the URL for the error .
3961	Confirm authorization request .
3962	Verify a request .
3963	Extract client credentials from request .
3964	Decorator to check if a client is authenticated .
3965	Authenticate a client .
3966	Authenticate a client .
3967	Get the scopes for a refresh token .
3968	Confirm scopes .
3969	Return default redirect uri .
3970	Get the default scopes for a client .
3971	Delete an authorization code .
3972	Persist authorization code .
3973	Save a bearer token .
3974	Validate a bearer token .
3975	Validate a client .
3976	Validate a grant .
3977	Validate a grant type .
3978	Validate a refresh token .
3979	Validate the response type .
3980	Validate scopes .
3981	Validate a username and password .
3982	Revoke an access token .
3983	Update QAPI request data .
3984	Convert a dictionary to a string .
3985	Change the response header .
3986	Register a new application to the application .
3987	Create a new app .
3988	Extract parameters from request .
3989	Convert text to bytes .
3990	Decode a base64 string to base64 .
3991	Create a response object .
3992	Return cached clients .
3993	Add a remote app .
3994	Create a remote application .
3995	Check if the certificate exists .
3996	Check success of X509 .
3997	Called when a private key is received .
3998	Check if a private key is invalid .
3999	Check if a private private key is correct .
4000	Check that the current iteration is revoked .
4001	Check if the certificate is revoked .
4002	Create a certificate .
4003	Create a certificate .
4004	Decorator for require_requires
4005	Load locations from the given CAX file .
4006	Set the default authentication callback .
4007	Use this method to use an SSL certificate chain .
4008	Use this method to use an SSL certificate .
4009	Use this method to use an SSL certificate .
4010	Add an SSL certificate to the certificate .
4011	Use this method to use a private key file .
4012	Use this method to use a private key .
4013	Load a client ca .
4014	Set the SSL depth .
4015	Load a temporary file .
4016	Set the cipher list .
4017	Set a list of client certificates .
4018	Add a client ca .
4019	Set the SSL certificate callback callback .
4020	Sets the use of SSLxt using TLS .
4021	Set the next NPNSelect callback .
4022	Set the TLS protocols .
4023	Sets the SSL select callback .
4024	Sets an OCSP callback .
4025	Set an OCSP server callback .
4026	Set an OCSP client callback .
4027	Sets the SSL context .
4028	Returns the server s service name .
4029	Set the TLS host name .
4030	Receive a packet from the server .
4031	Receive data from the socket .
4032	Read from the BIO .
4033	Tries to renegotiate SSL .
4034	Shutdown the connection .
4035	Get a list of all the encryption keys .
4036	Returns a list of client ids .
4037	Set the SSL shutdown .
4038	Get a random server random .
4039	Get a random client random .
4040	Get the master key .
4041	Export a KEying material .
4042	Create a new SSL session .
4043	Get the name of the cipher .
4044	Get the bits of the cipher .
4045	Returns the version of the cipher .
4046	Returns the SSL version name .
4047	Get the next protocol negotiation .
4048	Set the SSL protocols .
4049	Get the ANALPNR negotiation .
4050	Create a new memory buffer .
4051	Convert a BioBIO to a string .
4052	Set ASN1 time .
4053	Return the ASN1 timestamp .
4054	Get an elliptic curve by name .
4055	Writes a public key to the file .
4056	Load public key from buffer .
4057	Sign data with given data .
4058	Verify a certificate .
4059	Dump a CRL to a file .
4060	Return the cryptography key .
4061	Generate a new RSA key .
4062	Check if the key is valid .
4063	Loads all elliptic curves .
4064	Loads curves from lib
4065	Return the EC key corresponding to this curve .
4066	Derivate this certificate .
4067	Returns a list of all the components of this Entry .
4068	Get the short name .
4069	Returns the data for this certificate .
4070	Convert to a cryptography object .
4071	Set the public key .
4072	Get the public key .
4073	Get a Subject object .
4074	Add one or more X509 extensions .
4075	Returns a list of supported X509Extensions .
4076	Verify a PKEY .
4077	Convert to cryptography .
4078	Set the version .
4079	Get the public key .
4080	Set the public key .
4081	Sign a PKEY .
4082	Get the signature algorithm .
4083	Return the digest of the given digest .
4084	Set the serial number .
4085	Get the serial number .
4086	Returns the amount of time after the given amount .
4087	Returns the amount of time before the given amount .
4088	Returns True if the lock has expired .
4089	Get the issuer name .
4090	Set the issuer name .
4091	Get the name of the Subject .
4092	Set the subject s subject .
4093	Add one or more X509 Extensions .
4094	Get the X509 extension for the given index .
4095	Add a certificate to the store .
4096	Adds a crl to the store .
4097	Set the time of the certificate .
4098	Initializes the certificate .
4099	Create an X509ContextError from the context .
4100	Verify the certificate .
4101	Set the serial number .
4102	Get the serial number .
4103	Set a reason .
4104	Return the reason for this revocation .
4105	Set the revocation date .
4106	Convert this certificate to a cryptography list .
4107	Return a list of revoked revocation keys .
4108	Get the issuer associated with this certificate .
4109	Sign a digest with the given key .
4110	Exports a certificate .
4111	Get the type name .
4112	Set CA certificates .
4113	Exports the certificate .
4114	Sign a private key .
4115	Verify a key .
4116	B64 encoded string .
4117	Get the public key .
4118	Set the private key .
4119	Create an exception from an error queue .
4120	Convert an object to a byte string .
4121	Create a print token .
4122	Return service metadata .
4123	Get all issues for this card .
4124	Retrieve the comments for a card .
4125	Get all boards .
4126	Get open lists for a given board .
4127	Get a list of cards .
4128	Get comments for a card .
4129	Generate the api url .
4130	Get a JSON response .
4131	Convert a link field to a dictionary .
4132	Get issues from the server .
4133	Return all pull requests
4134	Aggregate all remote issues in the config .
4135	Get the value of a config or default .
4136	Return a dictionary of template templates .
4137	Validate the configuration .
4138	Determine if an issue is included .
4139	Make a table from a grid .
4140	Evaluate the given command .
4141	Get an integer value from a section .
4142	Pull issues from the taskwarrior database .
4143	Perform a GET request
4144	Get a collection from the API .
4145	Find the UUID for a specific issue .
4146	Merge the left and right fields of a task .
4147	Helper function to build UUIDs .
4148	Parse a sprint string .
4149	Get the credentials for the OAUTH .
4150	Calculate the score of multiple sequences .
4151	Calculate pvalues for each gene .
4152	Calculate the FDRCR correction .
4153	Compute the z - score of the data .
4154	Plots the heatmap of a DataFrame .
4155	Adjust the spine of the axes
4156	Prepare the argument parser .
4157	Adds a parser to the parser .
4158	Adds command line arguments to subparsers .
4159	Adds an argparser to an Enrichr parser .
4160	Calculate enrichment score for a gene .
4161	Generate a ranking metric for ranking .
4162	Calculate ranking metric .
4163	Calculate the p - value of a plane .
4164	Calculate the gsea significance of an enrichment score .
4165	Returns a pandas Series
4166	Return a pandas dataframe .
4167	Returns a DataFrame with the attributes for the given dataset .
4168	Returns a DataFrame with all the filters
4169	Query gene_ensembl .
4170	Evaluate GSEA .
4171	Sample a single sample of genes .
4172	Perform a prerank algorithm .
4173	Run replot .
4174	Set CPU cores .
4175	Load a gene set from a gene set .
4176	Get all libraries .
4177	Download enriched libraries .
4178	Compute heatmat .
4179	Save results to a file .
4180	Load gene expression data .
4181	Perform classification analysis .
4182	Run GSEA analysis .
4183	Run all samples on the given DataFrame .
4184	Run sgsea summation on a dataframe
4185	Save the enrichment scores to a file .
4186	Run the gene parser .
4187	Enrich a set of genes .
4188	Parse the enriched gene sets .
4189	Parse the gene list of genes .
4190	Send a list of genes to the server .
4191	Checks if the given gene list is recognized .
4192	Get the background .
4193	Run Enrichr .
4194	Generate a cube .
4195	Write an icosphere .
4196	Plot a torus .
4197	Draws the edges of a script .
4198	Create a cube for a cube .
4199	Determine the values of color names .
4200	check if var is in list
4201	Make a list of variables .
4202	Write a filter XML file .
4203	parse LS3 loop
4204	Merge close vertices .
4205	Closes open holes .
4206	Split vertices on a non -man vertices .
4207	This function takes a script and snaps it into a Matlab .
4208	Translate a script to a string .
4209	Rotate a script .
4210	Scale a script .
4211	r Compute the cylinder co - routine of a cylinder .
4212	Wrap a cylinder to a cylinder .
4213	Make a script around a script .
4214	Convert a script to a curve .
4215	Generate a tex file from a script .
4216	Write a mesh to a mesh .
4217	Generate uniform mesh resampling .
4218	Screened Poisson Reconstruction .
4219	Determine the gradient of a script .
4220	Select all nodes for a script .
4221	Show vertices for vertices .
4222	Create a new face function
4223	Generate vertices for a given script .
4224	Return the unit vector of a cylinder .
4225	r Calculates the spherical shape .
4226	Join the Layers .
4227	Rename a script .
4228	Change the filter .
4229	Duplicate a script .
4230	Delete a script .
4231	Handle an error .
4232	Create a filter script .
4233	Add a new layer to the stack .
4234	Delete a single layer .
4235	Save filters to file .
4236	Run a meshlab script .
4237	Calculate the shield .
4238	Calculate hausff distance .
4239	Wrapper around Poisson disk .
4240	Create a mesh element .
4241	Convenience wrapper for clustered vertices .
4242	Generate a flat plane .
4243	Generate per - triangle per - triangle
4244	Generate Voronoi diagram for a given script .
4245	Compute the topology .
4246	Parse the topology .
4247	Parse hausdorff output .
4248	Generate a function for the given script .
4249	Generate voronoi filters
4250	Generate a cyclic rainbow .
4251	Convert x to a human - readable format .
4252	r Return the cross product of u
4253	Multiply multiple vectors .
4254	Define a filter attribute for a given script .
4255	Flip faces in a script .
4256	Generate a set of point sets
4257	A taubin script
4258	Generate a depth filter
4259	Extract polylines from a file .
4260	Measure topology .
4261	Measure topology and topology .
4262	Measure the dimension of a TEMP3D file .
4263	Convert filename to lowercase .
4264	Patch request class .
4265	Return the configuration for an upload .
4266	Configure uploads .
4267	Return the current configuration .
4268	Return the URL for the uploaded file .
4269	Return the path to a file .
4270	Check if the given extension is allowed .
4271	Resolve a conflict in a folder .
4272	Get the Vprof version .
4273	Remove duplicates .
4274	Returns the difference between two objects .
4275	Format a list of objects .
4276	Return the memory usage of a frame .
4277	Returns a list of code events .
4278	Return the overhead of the object .
4279	Computes the memory over the memory .
4280	Return the package s package name .
4281	Profile a module .
4282	Profile a function .
4283	Run the profiler .
4284	Return the set of modules in a package .
4285	Run a function in a separate thread .
4286	Returns the type of the given run .
4287	Initialize the module .
4288	Initialize the package package .
4289	Initializes the profile object
4290	Replace sysargs .
4291	Sample from the given frame .
4292	Insert a stack into the stack .
4293	Count the sample count
4294	Format the AST tree .
4295	Return the call tree as a dictionary .
4296	Generate profile package .
4297	Profile module .
4298	Profile a function .
4299	Transform a profiler stats file .
4300	Generate profile package .
4301	Profile module .
4302	Profile function .
4303	Initialize the database .
4304	Show guestbook .
4305	Add a new entry .
4306	Handler for profiler .
4307	Start profiling server .
4308	Return the content of the root .
4309	Handle the other file .
4310	Handle GET request .
4311	Handle POST request .
4312	Send a response .
4313	Check if a module_path is a standard directory .
4314	Record a single line .
4315	Generator yielding lines without stdlib .
4316	Fill self . _heat_heatmap_count .
4317	Return all lines in src_code .
4318	Determine the profile of the run .
4319	Format a heatmap .
4320	Profile a module .
4321	Profile a heatmap .
4322	Run the profiler .
4323	Runs a single profiler .
4324	Predict probabilities of X .
4325	Predict the likelihood of X .
4326	Fit the model
4327	Count the number of words in the analysis .
4328	Sort vocabulary .
4329	Limit features .
4330	Fit the vocabulary .
4331	Transform the vocabulary .
4332	Convert self to scifter .
4333	Fit the model
4334	Predict the model .
4335	Fit the Spark Regression model
4336	Fit the model .
4337	Fit the model .
4338	Compute the score of each step .
4339	Fit the model to the estimator .
4340	Validate estimator .
4341	Fit k - means clustering .
4342	Predict rllib .
4343	Predict classifier .
4344	Check that the given RDD is of expected type .
4345	Fit vocabulary .
4346	Fit the RDD .
4347	Fit SVD to SVD
4348	Apply transform to a SparseSVD .
4349	Generate blocks from an iterator .
4350	r Block a list of dtypes .
4351	Create a block from an RDD .
4352	Return an RDD of this RDD .
4353	The shape of the RDD .
4354	Convert this RDD to a numpy array .
4355	Apply a function to each column .
4356	get bit perm
4357	Return True if path is only root write permissions .
4358	Check the configuration file
4359	Reads configuration from file .
4360	Execute a shell command
4361	Execute a command .
4362	Execute a command over SSH .
4363	Validate the configuration .
4364	Get the default headers
4365	Get the response body .
4366	Returns the URL for this device .
4367	Returns the URL for the IFTTT Webhook .
4368	Return the text of the given packet .
4369	Print detection information .
4370	Discover mac devices .
4371	Execute the device .
4372	Sends a confirmation on device .
4373	Callback executed when a push is pressed .
4374	Execute the given device .
4375	Run the device
4376	Convert a txn to another .
4377	Find ledger file
4378	Runs the server with the specified version .
4379	Get the description of a package .
4380	Create a precalculatedTextMeasure object from a JSON file .
4381	Get the default value for this resource .
4382	Render a badge .
4383	Generates a list of supported Unicode characters .
4384	Yield Unicode characters .
4385	Calculates the mapping from a character to its length .
4386	Write data to a JSON file .
4387	convolves a 2d image with the same shape
4388	Gets the Gaussian kernel .
4389	Convert image to grayscale .
4390	Entry point for pyssim .
4391	Compute the SIM value of the image .
4392	Compute the SSIM between two images .
4393	Destroy this widget .
4394	Set the code version .
4395	Returns a dictionary of the current status of this node .
4396	Print the status of the job .
4397	Return the node corresponding to the given connection .
4398	Try to bind to the server .
4399	Called when a new connection is received .
4400	Process incoming messages .
4401	Called when a job is executed .
4402	Determines if the TCP node should connect to this node .
4403	Try to connect to a node if not already connected .
4404	Called when the client is received .
4405	Called when an incoming message is received .
4406	Invoked when a connection is connected .
4407	Add a new node to this node .
4408	Drop a node .
4409	Send a message to the given node .
4410	Destroy this node .
4411	Adds an item to the collection .
4412	Put an item into the heap .
4413	Get data from heap .
4414	Acquire a lock .
4415	Returns True if the lock is expired .
4416	Release a lock .
4417	Decorator for debugging .
4418	Decorator to determine which token is required .
4419	Set the hosts
4420	Create Elasticsearch index .
4421	Migrate indexes .
4422	Strip report metadata
4423	Save reports to Kafka .
4424	Extracts the XML file .
4425	Parse an aggregate report file .
4426	Create a csv report from a CSV file .
4427	Parse an aggregate report file .
4428	Get IMAP capabilities .
4429	Save results to a json file .
4430	Generate a zip file for the report .
4431	Sends an email to a report
4432	Save aggregate reports to Splunk .
4433	Save forensic reports to Splunk HEC .
4434	Decode a base64 string
4435	Download the base domain .
4436	Get a DNS address from an IP address .
4437	Parse a human - readable datetime .
4438	Download geolite2 country .
4439	Get information about an IP address .
4440	Convert an email message to an ISO 8601 format .
4441	Convert a string to a list .
4442	Parse a report file .
4443	Drain the subscriptions .
4444	Publish a message .
4445	Publish a request .
4446	Publish a message .
4447	Subscribe to a subject .
4448	Unsubscribe from a connection .
4449	Flush the connection .
4450	Select next available server .
4451	Process an error message .
4452	Process an operation error .
4453	Connect to the server .
4454	Process a ping .
4455	Process a message .
4456	Process the server information .
4457	Process connection info .
4458	Flush pending data .
4459	Read a read loop .
4460	Performs coactivation analysis .
4461	Decode images .
4462	Load features from an array .
4463	Load features from images .
4464	Calculate the correlation between images .
4465	Return the dot product of the image .
4466	Select features .
4467	Returns a list of studies in a dataset .
4468	Get the order of features in the dataset .
4469	Classify regions by classification .
4470	Classifier for classification .
4471	Fit the model .
4472	Set the class weight .
4473	Fit cross validation .
4474	Fit dataset to dataset .
4475	Average values within a dataset .
4476	Randomly select voxels .
4477	Returns the top words of a model .
4478	Pearson correlation .
4479	Calculate the FDR of a vector
4480	Load activations from a file .
4481	Create an image table .
4482	Returns a list of studies matching the given expression .
4483	Add features to the table .
4484	Return the list of feature names .
4485	Return a dictionary with the counts of the feature names .
4486	Load dataset from file .
4487	Save the model to a file .
4488	Get image data .
4489	Get feature data .
4490	Given a list of features return a list of names .
4491	Return a list of ids that match a threshold .
4492	Returns a list of features that match the search .
4493	Returns a list of ids matching the given expression .
4494	Convert sdf to CSR .
4495	Mark function as deprecated .
4496	Compute the transformation matrix .
4497	Convert a list of coordinates to matrices .
4498	Apply a transformation to a given name .
4499	Mask an image .
4500	Get the image mask .
4501	Load images from filenames .
4502	Save image data to file .
4503	Set the logging level .
4504	Expand an address .
4505	Normalize tokens .
4506	Parse an address .
4507	Check if labels are near the same .
4508	Convert a dictionary into an object .
4509	Get the price of a ticker .
4510	Retrieve dataframe for a given ticker .
4511	Get bulk news data for a given file .
4512	Perform an HTTP request .
4513	Get the bearer info .
4514	Make a request to the API .
4515	Get a list of tracks .
4516	Get a specific artist .
4517	Get artist albums .
4518	Get top tracks .
4519	Get the related artists .
4520	Get a list of artists .
4521	Get a specific category .
4522	Get a list of playlists for a given category .
4523	Get a list of category categories .
4524	Get a list of featured playlists .
4525	Get a list of new releases .
4526	Get recommendations .
4527	Tells a user with a list of artists .
4528	Get an artist s albums .
4529	Retrieve all albums .
4530	Retrieve the total album albums .
4531	Gets the artists associated with this user .
4532	The currently playing track .
4533	Get the current player .
4534	Get all available devices .
4535	Gets the recently played tracks .
4536	Replace tracks .
4537	Reorder tracks .
4538	Create a new Playlist .
4539	Get a list of Playlists .
4540	Get a list of tracks .
4541	Get all tracks .
4542	Return an OAuth2 URL .
4543	Get an album .
4544	Get an artist .
4545	Get a track .
4546	Get a user .
4547	Get a list of albums .
4548	Get a list of artists .
4549	Search for songs .
4550	Convert a string to an identifier .
4551	Decorator to check if a function has an attribute .
4552	Instantiate a client from a client .
4553	Generate an OAuth2 URL .
4554	Return dictionary of attributes .
4555	Return the parameters as a string .
4556	Builds the Playlist track
4557	Get all tracks .
4558	Resume playback .
4559	Transfer player to device .
4560	Return an instance of the SpotifyClient .
4561	Get the status of the element .
4562	Convert a short month to a short month .
4563	Update the code URLs in the current directory .
4564	Check if the current version is greater than the version_yaml .
4565	Returns True if the current branch is a dev version .
4566	Return True if the version is deprecation .
4567	Backup the data .
4568	Restore the file .
4569	Return True if line is ignored .
4570	Handle options .
4571	Extract base from element .
4572	Format the decoded data .
4573	Access the request .
4574	Get the HTTP status code .
4575	Check that the given domain is valid .
4576	Check if the given domain is a subdomain .
4577	Check the syntax of an ipv4 .
4578	Check if an IP is a valid IPv4 range .
4579	Check if a URL is valid .
4580	Load the configuration .
4581	Make sure that the user is safe .
4582	Download the link management file .
4583	Download the entry management URL .
4584	Print the header .
4585	Perform a file decision .
4586	Executes the specified domain .
4587	Execute the given URL .
4588	Colorize a logo .
4589	Format a domain file .
4590	Extracts the domain from a file .
4591	Create a file from the database .
4592	Get the file URL .
4593	Switch a custom variable .
4594	Get the expiration date .
4595	Process the source .
4596	Get the structure of the structure .
4597	Create a directory .
4598	Deletes all uneded files in the tree .
4599	Sets the path to the config_to_config .
4600	Load the configuration file .
4601	Install the production configuration .
4602	Install the configuration .
4603	Install the PSL configuration .
4604	Install a directory structure .
4605	Merge values from upstream configuration .
4606	Load the upstream configuration file .
4607	Split a version into a list of digits .
4608	Check the version of the local version .
4609	Check if a cloned version is cloned .
4610	Handle the non - existent index .
4611	Build the directory for the analytic host .
4612	Generates unified file .
4613	Returns the status of the file .
4614	Determine if the file exists .
4615	Extracts all the extensions from the given line .
4616	Load the public database .
4617	Return a regular expression .
4618	Convert an XML element into a hierarchy .
4619	Load the global database .
4620	Return the referential server .
4621	Yield all available extensions .
4622	Update the database .
4623	Mine the current request .
4624	Retrieve the data from the file .
4625	Backup informations .
4626	Add an element to the database .
4627	Remove all elements from the cache .
4628	Return a list of mined files .
4629	Load data from the database .
4630	Get the content of a file .
4631	Write content to file .
4632	Show information about a record .
4633	Returns the expiration date of the extraction .
4634	Check if the given extension is not found .
4635	Write the before the file .
4636	Constructs the header data .
4637	Generate the header .
4638	Construct a data structure .
4639	Return the size of the given header .
4640	Colorize the data .
4641	Print the output as JSON .
4642	Return the serialized data .
4643	Save the file to disk .
4644	Calculate the time difference between two dates .
4645	Format the execution time .
4646	Return a list of files to delete .
4647	Return a list of databases to delete .
4648	Delete all files in the database .
4649	Return the hash of the file .
4650	Hash data using the algorithm .
4651	Get the value of the file .
4652	Execute a command .
4653	Remove a key from the dictionary .
4654	Rename a key .
4655	Merge two nested dictionaries .
4656	Write the dictionary to a json file .
4657	Writes the main Dictionnary to a file .
4658	Fix the path separator .
4659	Write data to file .
4660	Read the file .
4661	Return a string representation of the main list .
4662	Merge two lists .
4663	Return a list of matches that match .
4664	Match the data .
4665	Return a copy of this object .
4666	Count the number of samples in this object .
4667	Calculate the statistics .
4668	Log the statuses .
4669	Check if the given url is valid .
4670	Checks if the given domain is valid .
4671	Determine if a domain is a subdomain .
4672	Get the status of the given type .
4673	Reformat the historical formating error .
4674	Retrieve the database file .
4675	Backup the database .
4676	Return the timestamp of the database .
4677	Return the database content .
4678	Check if the current database subsystem is present .
4679	Retrieve the database .
4680	Backup the database .
4681	Check if the element is in the database .
4682	Check if the element is older than the time .
4683	Get the expiration date of the element .
4684	Add the element to the database .
4685	Set permissions for travis .
4686	Add travis to travis .
4687	Return the DNS information for the given domain or IP address .
4688	Create a Whois server .
4689	Get the HTTP status code .
4690	Get the test result .
4691	Get the current object from the proxy .
4692	Yield all standard paths .
4693	Yield all standard package names .
4694	Iterate over unused imports .
4695	Find unused import module name .
4696	Iterate over the lines used in import star .
4697	Generator for import_name_name .
4698	Iterate over unused variable lines .
4699	Yield lines from multiple messages .
4700	Create a dictionary of messages from a list of messages .
4701	Check source .
4702	Extract the package name from the given line .
4703	Import a multiline import .
4704	Return True if line is a multiline statement .
4705	Filters out imports from a module .
4706	Break an import line into a list of imports .
4707	Filter source code .
4708	Get messages by line number .
4709	Return a list of starred stars .
4710	Filter a duplicate key .
4711	Check if a dictionary entry contains a key .
4712	Check if the given value is a literal or name .
4713	Generator for useless pass line numbers .
4714	Return a generator that yields useless pass - line numbers .
4715	Return the indentation of a line .
4716	Return the end of a line .
4717	Fixes source code .
4718	Split a comma separated string into comma separated strings .
4719	Check if a file is a python file .
4720	Check if filename is a file .
4721	Find all files in filenames .
4722	Main entry point .
4723	Reads an existing lease .
4724	Write a lease to the output stream .
4725	Writes a request to the output stream .
4726	Reads a message from the given stream .
4727	Create a new name .
4728	Read a KMIP value .
4729	Write the contents of an OStream .
4730	Create a new Digest instance .
4731	Read the application information .
4732	Write application data to a stream .
4733	Create an ApplicationSpecificInformation object .
4734	Reads the derivation parameters .
4735	Write the parameter to the output stream .
4736	Read request .
4737	Writes a request to the output stream .
4738	Reads an object from an object .
4739	Write the payload to the output stream .
4740	Read a KMIP request .
4741	Write the KMIP data to a file .
4742	Reads the signature from the given file .
4743	Process a request .
4744	Build an error response .
4745	Processes a template attribute .
4746	Gets the attributes for the managed object .
4747	Get an attribute from a managed object .
4748	Set the attributes on the managed object .
4749	Set the attribute on the managed object .
4750	Determines if an object is allowed for the given object .
4751	Write a request to the KIP .
4752	Create a new object .
4753	Set a configuration setting .
4754	Load the server settings file .
4755	Process the bitmask parameter .
4756	Process Cryptographic usage .
4757	Read a KMIPream .
4758	Write an integer to the stream .
4759	Validate the value .
4760	Read a KMIPream .
4761	Write the stream to the stream .
4762	Validate the value .
4763	Validate the value .
4764	Read a boolean value .
4765	Write a boolean value to the stream .
4766	Writes a value to the stream .
4767	Validate the model .
4768	Read an interval .
4769	Validate the value .
4770	Returns a dictionary of key - value pairs .
4771	Set the key wrapping data .
4772	Validates a cryptographic key .
4773	Validates that the secret is correctly formatted correctly .
4774	Validate the data type .
4775	Convert an attribute name to a tag .
4776	Convert an attribute name to a name tag .
4777	Get bitmask from enumerations .
4778	Get all enumerations from a bitmask .
4779	Checks if the given enumeration is a bit mask .
4780	Reads a KeyPairRequest .
4781	Write the template to the output buffer .
4782	Reads a CreateKeyPairResponse .
4783	Writes a message to the output buffer .
4784	Reads an attribute request .
4785	Writes a request to the output buffer .
4786	Reads a getAttributeList from the input buffer .
4787	Writes the attribute list to the file .
4788	Return all json files in a directory .
4789	Scan all policies for a file .
4790	Run the application .
4791	Get a certificate from a connection .
4792	Returns the extended key usage for a certificate .
4793	Return the common names of a certificate .
4794	Get client identity from a certificate .
4795	Read a CreateRequest from the given buffer .
4796	Writes the object to the output buffer .
4797	Reads the object from the given buffer .
4798	Writes the object to the output buffer .
4799	Convert an object to a Python object .
4800	Reads an EncryptedResponse .
4801	Reads a DeriveKey request .
4802	Writes a DeriveKey to the output buffer .
4803	Checks if the given attribute is supported .
4804	Returns True if attribute is deprecated .
4805	Returns True if an attribute can be applied to an object .
4806	Check if an attribute is multivalued .
4807	Get a value from a config file .
4808	Read a CheckResponse .
4809	Writes the data to the specified output stream .
4810	Reads an AttributeReference .
4811	Write the AttributeReference to the KIP .
4812	Read a KMIP packet .
4813	Writes the object to the output stream .
4814	Read a nonce .
4815	Writes a nonce to the output stream .
4816	Reads the username password credential .
4817	Write the username and password .
4818	Reads the device credentials .
4819	Write the device to a local file .
4820	Read the credential .
4821	Writes the credential to the file .
4822	Read a MACSignature .
4823	Write the MACSignature .
4824	Read the KeyWrapper .
4825	Writes a KMIP packet to the output stream .
4826	Read the KeyWrapper .
4827	Write this MIPStream to the specified file .
4828	Read the extension information .
4829	Write extension information .
4830	Create an extension .
4831	Reads the revocation code .
4832	Write a revocation code .
4833	Validate revocation code .
4834	Reads the object .
4835	Writes the object to the output buffer .
4836	Reads a KMIP packet .
4837	Writes the data to the output buffer .
4838	Reads the data from the input buffer .
4839	Writes the KMIP data structure .
4840	Reads the profile information .
4841	Write the profile information .
4842	Writes a KMIPInformation structure .
4843	Reads the Capability Information .
4844	Write the output buffer to the output buffer .
4845	Stop the server .
4846	Start serving connections .
4847	Read the LocateRequest .
4848	Writes data to the output buffer .
4849	Read a LocateResponse .
4850	Write the LocateResponse to the output buffer .
4851	Create a symmetric key .
4852	Creates an asymmetric key pair .
4853	Computes the MAC .
4854	Encrypts the data using the provided cipher .
4855	Encrypts the given encryption algorithm .
4856	Encrypt an asymmetric encryption .
4857	Decrypt an asymmetric encryption key .
4858	Generate an RSA key pair .
4859	Derive a key using the given derivation method .
4860	Create an RSA private key .
4861	Verify a signature .
4862	Reads a KipResponse .
4863	Writes a KMIP message to a file .
4864	Reads the usage request .
4865	Return the KMIP version .
4866	Read one or more protocol version .
4867	Writes the packet to the specified output stream .
4868	Read credentials from a file .
4869	Write credentials to a file .
4870	Read Poll RequestPayload .
4871	Reads a certificate .
4872	Write a certificate .
4873	Authenticate the user .
4874	Read an ArchiveResponse .
4875	Write an ArchiveResponse to a file .
4876	Start TLS handshake .
4877	Read a RekeyResponse .
4878	Checks if the profile is supported .
4879	Derive a key from an object .
4880	Retrieve a list of attributes from the server .
4881	Fetches a list of attribute ids .
4882	Execute a request .
4883	Sign a request .
4884	Opens the client connection .
4885	Close the connection .
4886	Create a new template .
4887	Creates a key pair .
4888	Register a managed object .
4889	Creates a new Rekey .
4890	Derives a key for the given object type .
4891	Locate objects in the container .
4892	Check the status of a user .
4893	Retrieve a managed object .
4894	Gets the attributes for the specified object .
4895	Activate the managed object .
4896	Revoke a revocation operation .
4897	Perform a MAC operation .
4898	Builds the cryptographic parameters .
4899	Builds the encryption key .
4900	Builds the MAC signature information .
4901	Builds the key wrapping specification .
4902	Build common attributes .
4903	Build the attribute name attribute .
4904	Read the query payload .
4905	Writes the query payload to the output buffer .
4906	Write the data to the output buffer .
4907	Reads an attribute from the given buffer .
4908	Write the template to a file .
4909	Get a single entry point from a single file .
4910	Return a dictionary with the name of a group .
4911	Get all files in a given group .
4912	Load the module .
4913	Create an entry point from a string .
4914	Run livereload
4915	Generate project files .
4916	Generate a controller .
4917	Generate action .
4918	Generate form .
4919	Generate the model .
4920	Generate macro .
4921	Make a directory .
4922	Rewrite file and copy to destination .
4923	Convert value to timeince .
4924	Check if url is valid .
4925	Encode urlsafe .
4926	Decode a URLSafe .
4927	Decorator for JSON response
4928	Returns the absolute URL for the given endpoint .
4929	Load configuration .
4930	Signs a user in the session .
4931	Get the current user
4932	Create Flask application .
4933	Register the application .
4934	Register all app routes .
4935	Register error handler .
4936	Register hooks .
4937	Write a dataframe to a CSV file .
4938	Create a DataFrame from a CSV file .
4939	Serialize a dataframe .
4940	Deserialize a dataframe from a reader .
4941	Update this dataset from a dataframe .
4942	Update this instance from raw data .
4943	URL for the download .
4944	Upload a file from a dataframe .
4945	Add a new object from raw data .
4946	Opens the dataset contents .
4947	Read this dataset as binary .
4948	Read the dataset contents as text .
4949	Deserialize the object to a dataframe .
4950	Get an intermediate dataset .
4951	Get all experiments in a workspace .
4952	Get all datasets in a workspace .
4953	Get a dataset
4954	Publish a function to a workspace .
4955	Decorator to publish a function .
4956	Decorator to register a list of types .
4957	Decorator to register a function .
4958	Decorator for registering a function .
4959	Find all the globals of a byte code .
4960	Return a copy of this pen .
4961	Look up a color .
4962	Draws the scene .
4963	Compute the Jacobian extension of the Jacobian .
4964	Computes the Jacobian of the Jacobian .
4965	Build the sitetree tree .
4966	Creates a function that returns a list of options .
4967	Decorator to register items hook .
4968	Creates a dynamic sitet tree .
4969	Initialize the cache .
4970	Empty the model .
4971	Get an entry by name .
4972	Update an entry in the cache .
4973	Store an entry in the cache .
4974	Initialize the API .
4975	Resolve the I18N tree alias .
4976	Determine if the current app is admin .
4977	Calculate the depth of an item .
4978	Get the current item for the given tree .
4979	Resolve the URL to a URL .
4980	Initialize a sitetree .
4981	Get the attribute of the current page .
4982	Gets the ancestor of the current item .
4983	Create a sitetree
4984	Check if the current item is allowed .
4985	Build a breadcrumb .
4986	Create a new tree
4987	Render children of given item .
4988	Get the children of an item .
4989	Updates the tree s children
4990	Filter items based on navigation type .
4991	Return the item of the item in the tree .
4992	Recursively climbs the tree into the tree .
4993	Resolve variable .
4994	Parse a sitetree .
4995	Parse the sitetree .
4996	Parse a sitetree .
4997	Parse a sitetree .
4998	Renders a context .
4999	Return a Template for the given tag .
5000	Generate model URL name .
5001	Reregister the tree admin .
5002	Handles redirects
5003	Redirect to the request .
5004	Add a new item to the tree .
5005	Redirect to the tree item .
5006	Overrides the default form .
5007	Get a tree .
5008	Moves an item in the tree .
5009	Saves the item to the tree .
5010	Override the sitetree .
5011	Serialize a flask view .
5012	Create a tree model .
5013	Create a tree item .
5014	Import a sitetree module .
5015	Returns the model class for the given settings entry .
5016	Create a Config from a mapping .
5017	Create a Config from a Python file .
5018	Read configuration from TOML file .
5019	Create a Config instance from an object .
5020	Generate ZipkinAttrs for a given span .
5021	Create http headers for a new span .
5022	Get the current context context .
5023	Start logging .
5024	Stop the process .
5025	Update the binary annotations for the logging context .
5026	Adds a sa binary annotation to the client .
5027	Override the name of the span .
5028	Create an Endpoint .
5029	Copy an endpoint with a new one .
5030	Builds a V1Span span .
5031	Encode a list of PB spans .
5032	Creates a protobuf span .
5033	Convert a hexadecimal string into a byte integer .
5034	Returns the type of the given kind .
5035	Convert endpoint to endpoint .
5036	Convert a zipkin annotations into a zipkin .
5037	Create an annotation .
5038	Create a binary annotation .
5039	Create an Endpoint .
5040	Returns a copy of the endpoint with new service_name .
5041	Build an annotation list .
5042	Build a binary annotation list .
5043	Create a new span .
5044	Convert Thrift span to bytes .
5045	Encode binary_thrift_list into bytes .
5046	Detects and returns a JSON - compatible version .
5047	Convert spans to output .
5048	Push one or more Zipkin attributes to a Tracer .
5049	Encode a span to the Thrift span .
5050	Create a json endpoint
5051	Encode a protobuf span .
5052	Decodes a list of spans .
5053	Convert an endpoint into an Endpoint object .
5054	Decode the Thrift annotations .
5055	Convert binary annotations to binary annotations .
5056	Decode a Thrift Span .
5057	Convert trace ID to string .
5058	Convert an unsigned integer to lower hex .
5059	Write a hexadecimal value .
5060	Pre - processing pre - processing .
5061	Set transaction code .
5062	Set iph_id tag
5063	Set TNR tag .
5064	Parse the given data .
5065	Parse a file .
5066	Join multiple lines into a single string .
5067	Get the response from the response .
5068	Restore a rate limit .
5069	Perform an HTTP request .
5070	Get bot info .
5071	Get bots .
5072	Read a term from the stream .
5073	Write a message to the stream .
5074	Close the file descriptor .
5075	Decode a string into a Term object .
5076	Encode a term .
5077	Add a new source address .
5078	Send pending messages to the queue .
5079	Sets the remote service callback .
5080	Stop the server .
5081	Clear all local services .
5082	Search for remote services .
5083	Create a SOAP message .
5084	Discover a log file .
5085	Return the manager for the item .
5086	Return all child relations .
5087	Return all child m2m relations .
5088	Save the model to the database .
5089	Initialize object from serializable data .
5090	Perform unique checks .
5091	Return True if the form has changed .
5092	Create a new Address with valid checksum .
5093	Generate an AddressChecksum .
5094	Parse arguments .
5095	Create an argument parser .
5096	Prompt for a seed .
5097	Validate signature fragments .
5098	Get a private key .
5099	Return the key for the given address .
5100	Create a new KeyIterator .
5101	Create a sponge from a seed .
5102	Integrate the given trits into the internal state .
5103	Squeeze the given trits .
5104	Transform the current state to the inner loop .
5105	Execute GetDigests command .
5106	Retrieve a list of private keys .
5107	Prepares a multisig transfer command .
5108	Add two tuples .
5109	Convert an integer to a list of trits .
5110	Add two values to the right .
5111	Full add_trits .
5112	Output a seed .
5113	Find transactions for a given list of bundles .
5114	Get a list of inputs for this seed .
5115	Execute get_addresses command
5116	Gets a list of Transfers .
5117	Promote a transaction .
5118	Register a replay bundle command .
5119	Sends a transfer command .
5120	Send a request to the transaction .
5121	Resolve a uri .
5122	Send a request .
5123	Log a message .
5124	Send an HTTP request .
5125	Interpret a response from a node .
5126	Insert a response .
5127	Add a digests .
5128	Returns a multisig address .
5129	Create an iterator over the key generators .
5130	Create an Address from a digest .
5131	Generates an address from the key iterator .
5132	Find Transaction objects .
5133	Iterate over the addresses used by this adapter .
5134	Returns a list of bundles from the given transaction hashes .
5135	Check if the given codec is valid .
5136	Get codecInfo object .
5137	Encode a binary string .
5138	Decode a byte string .
5139	Find addresses by index .
5140	Register a route .
5141	Create a Transaction object from a JSON string .
5142	Return the JSON representation of this object .
5143	Returns a tuple of validator validates for the signature .
5144	Set the state of this transaction .
5145	Return list of messages .
5146	Return a list of TryTries as a string .
5147	Group transactions by address .
5148	Discover all commands in a package .
5149	Execute a request .
5150	Apply a filter to the given value .
5151	Get the URL for a job .
5152	Return a list of valid errors .
5153	Check if the bundle is valid .
5154	Generates a generator for validator values .
5155	Extract signature errors from the bundle .
5156	Validate a group signature error .
5157	Traverse the bundle with the given bundle .
5158	Start an interactive REPL .
5159	Generate a random seed .
5160	Returns a digest of the digest .
5161	Signs input transaction transactions .
5162	Return a pretty representation of the cycle .
5163	Subtracts the given trits into the buffer .
5164	Takes a list of trits and returns it .
5165	Add a context to an exception .
5166	Get the security level .
5167	Increments the legacy tag .
5168	Return the tag associated with this transaction .
5169	Add a new transaction to the bundle .
5170	Add the bundle to the bundle .
5171	Signs a bundle of inputs .
5172	Sign input at start_index .
5173	Create input transaction transactions .
5174	Convert value to standard unit .
5175	Decompress a g1 .
5176	Compute the inverse of the quaternion .
5177	Read from a JSON file .
5178	Find all words in a given category .
5179	Return the synonym for the given word .
5180	Expand abbreviations .
5181	Split a description into a description .
5182	Return all categories .
5183	Generate a random colour .
5184	Plot component .
5185	Initialize a builtin object from a string .
5186	Build a timecale from a given name .
5187	Return a list of components .
5188	Reads an image from an image .
5189	Create a decorator from a CSV file .
5190	Return a CSV containing all the attributes of the legend .
5191	Maximum width .
5192	Get a decorator for a given component .
5193	Get the attribute of a given decorator .
5194	Get a component from the legend .
5195	Plot the series .
5196	Creates a subclass from a lexicon .
5197	Build a summary string .
5198	Registers a Rock Component .
5199	Process a single row .
5200	Parse a string into a dictionary .
5201	Return True if all boundaries are satisfied .
5202	Return unique identifiers .
5203	Extract intervals from a list of values .
5204	Normalize longitudinal data .
5205	Read longitudinal data from a PETREL data file .
5206	Build a list of intervals from a dictionary .
5207	Read a CSV file .
5208	Create an image from an image .
5209	Create a Striplog object from a log file .
5210	Create a LAS3 object from a string .
5211	Create an Intervals from a file .
5212	Return a copy of this Striplog .
5213	Generate a CSV file .
5214	Generate LITHology .
5215	Plot the axes .
5216	Get the data for a given field .
5217	Extract data from a basis set .
5218	Searches the given search term .
5219	Return a list of overlaps .
5220	Find gaps in the sequence .
5221	Prune the strip .
5222	Generate anneal residue .
5223	Fill the interval with the given components .
5224	Return a new Striplog .
5225	Return a list of Striplog objects .
5226	Merge overlapping segments .
5227	Plot the histogram .
5228	Invert the Striplog .
5229	Crop the Striplog .
5230	Compute the quality of the tests .
5231	Convert hex color to name .
5232	Read an image from an image file .
5233	Extracts the field name from the request .
5234	Retrieve a list of jobs .
5235	Parse a JobHcl .
5236	Update a token .
5237	Returns a list of all allocated resources .
5238	Fail a deployment .
5239	Pause a deployment .
5240	Check deployment health .
5241	Drain a node .
5242	Drain a node .
5243	Queries a single node .
5244	List files .
5245	Streams records from the server .
5246	Retrieve stat file .
5247	Join an agent .
5248	Update the servers .
5249	Leaves a node
5250	Retrieve nodes .
5251	Get a list of evaluation evaluations .
5252	Returns a list of namespace namespaces
5253	Register a job .
5254	Plots a job .
5255	Dispatch a single job .
5256	Revert a job .
5257	Update a stable job .
5258	Deregister a job .
5259	Retrieves the current workload configuration .
5260	Delete a peer
5261	Retrieve all deployed deployments .
5262	Get a random variable .
5263	Returns the mutation of the given object .
5264	Get a random polyglot attack .
5265	Generate fuzz .
5266	Safely decode the given buffer .
5267	Start the web server .
5268	Stop the server .
5269	Generate a custom HTML file .
5270	Serve fuzzed server .
5271	Mutate the object .
5272	Spawn a subprocess .
5273	Get output from stdin .
5274	Finish a read .
5275	Close the process .
5276	Start the worker .
5277	Execute the given command .
5278	Decodes a JSON object into a JSON object .
5279	Build a value from a string .
5280	Build a string representation of the macro .
5281	Build the query string .
5282	Build a random value .
5283	Build an OptGram .
5284	Build the refname .
5285	Try to build an OptGram .
5286	Shutdown the process .
5287	Run and monitor the process .
5288	Start the monitor .
5289	Return a random float .
5290	Add a definition to the rule group .
5291	Add a def_group to a category .
5292	Generate a gramfuzz .
5293	Confirms all elements of a given element .
5294	Return a fuzzed version of the config .
5295	Get fuzzed JSON .
5296	Decorator for mutate .
5297	Signal handler .
5298	quit the command
5299	Pause the command .
5300	Resume a command .
5301	Stop the command
5302	Handle a command restart .
5303	Return a list of all Skype events
5304	Set Skype mood .
5305	Set avatar .
5306	Get metadata for a URL .
5307	Retrieve a single contact
5308	Retrieve a single Skype user .
5309	Gets a list of all available bots .
5310	Update a Skype bot .
5311	Search for Skype users .
5312	Get all Skype requests .
5313	Create a new instance from a skype .
5314	Merge two objects .
5315	Merge another object .
5316	Sends a sync state
5317	Read SkypeAuth token .
5318	Write token to file .
5319	Verify a Skype token
5320	Refresh Skype token
5321	Get the user s username .
5322	Authenticates a SkypeRegistration token .
5323	Synchronize all SkypeEndpoints .
5324	Check if a user exists .
5325	Perform an authentication token .
5326	Authenticate using Skype API .
5327	Configure the connection settings .
5328	Ping this client .
5329	Gets a list of recent recent recent chats .
5330	Add a chat to the chat .
5331	Create a new member .
5332	Return the ID of the authenticated user .
5333	Return the ID of a chat .
5334	Evaluate a function .
5335	Convert text to unicode .
5336	Detect the format of a text .
5337	Parse the given text .
5338	Convert metadata to a dictionary .
5339	Load a YAML file .
5340	Export metadata to YAML
5341	Export metadata to JSON .
5342	Match pattern .
5343	Return a list of items .
5344	Return list of sub - lists of sublists .
5345	Convert from start to newstart
5346	Lists the arguments .
5347	Return a list of WikiList objects .
5348	Creates a trie from a list of strings .
5349	Return a pattern from a trie .
5350	Checks if the index is valid .
5351	Insert a new string into the list .
5352	Return the partition of a character .
5353	Return the spans of a given type .
5354	Shrink a new span .
5355	Inserts a new index to the index .
5356	Return the nesting level of the parser .
5357	Return the shadow string .
5358	Return the shadow shadow .
5359	Convert the type to a list of spans .
5360	Pretty print method .
5361	A list of parameter values .
5362	A list of parser functions .
5363	A list of template templates .
5364	List of wikilinks .
5365	Return the comment s comment .
5366	List of external links .
5367	List of all sections .
5368	List of tables .
5369	Return a list of WikiList objects .
5370	Return a list of TagTag objects .
5371	Iterate over all subspans .
5372	Return the list of ancestors of the given type .
5373	Return the parent of the given type .
5374	Return the mode of a list .
5375	Get the argument with the given name .
5376	Generate a normal name .
5377	Remove the first of the first argument .
5378	Remove duplicate arguments .
5379	Set an argument value .
5380	Get an optional argument .
5381	Check if an argument has a given value .
5382	Remove an argument from the stack .
5383	Convert CSC code to string .
5384	Find an item by name .
5385	Create a crs from a URL .
5386	Read a GeoJSON file .
5387	Create a crsg from an EPSG code .
5388	Create a crs from an ESRI code .
5389	Convert a CRC code to a crs file .
5390	Creates a crs from a string .
5391	Write the record to out .
5392	Read a vlr object from a data stream .
5393	Parse GeoTiff keys from VLiffList .
5394	Parse GeoTiffKey .
5395	Return the signedness for the given type index .
5396	Return the ID for the extra dimension type .
5397	Create a new PointRecord from another point record .
5398	Copies fields from another record to another .
5399	Append zeros to the given value .
5400	Names of all dimensions in this dataset .
5401	Create an array of zeros .
5402	Create a NumPy array from a stream .
5403	Create a point from compressed data .
5404	X axis dimension .
5405	Data dimension dimension .
5406	The scale dimension .
5407	Add extra dimension data .
5408	Writes point data to out_stream .
5409	Write data to a file .
5410	Write file to destination .
5411	Build the dtypes of the point formats .
5412	Helper function to build dtypes dtypes dtypes .
5413	Convert np . ndarray to point format
5414	Returns the minimum version of a point format .
5415	Checks if the given point format is compatible with the given version .
5416	Returns the vlrs object with the given type .
5417	Extract vlrs from the given type .
5418	Read a list of VLR objects from a data stream .
5419	Returns True if all files have the same point format .
5420	Check if two files have same dtype .
5421	Check if file signature is correct .
5422	Read header from file .
5423	Reads all VRLs from the file .
5424	Read PackedPoints record .
5425	Reads all points from the compressed file .
5426	Read a waveform packet .
5427	Read EVLRLs from the stream .
5428	Warn if the given position is less than the given offset .
5429	Open a LASReader .
5430	Read the contents of a file .
5431	Create a LasData object from a header .
5432	Create a LAS12 .
5433	Convert a source to a point format .
5434	Merge multiple points .
5435	Writes a LASTA file .
5436	Date of creation day .
5437	Set the creation date .
5438	Return the number of minutes min min and z .
5439	Set the min and max values .
5440	Return the indices of the maximum values of the mesh .
5441	Set the maximum values for the given value .
5442	Array of scales .
5443	The offset of the mesh .
5444	Read the file version .
5445	Convert a header to a new header .
5446	Unpack an array from a source array .
5447	Pack an array into a sub_field .
5448	Return a list of dimension names that are lost .
5449	Return a dictionary mapping field names to compositions .
5450	Return the number of bytes in this array .
5451	Return True if we have a waveform packet .
5452	Run satel integration .
5453	Calculate checksum of given command .
5454	Print a hexadecimal string .
5455	Verify that the given response is valid .
5456	Return a list of set bits in the given r .
5457	Generate a query string .
5458	Example demo .
5459	Connect to the server .
5460	Start monitoring .
5461	Arm a partition .
5462	Clear an alarm .
5463	Turn an output .
5464	Wait for the device to finish .
5465	Monitor the device status .
5466	Close the connection .
5467	Purge database .
5468	Try to guess the file type .
5469	Get the file id for a given path .
5470	Get a notebook from the database .
5471	Create a notebook model from record .
5472	Get a directory model .
5473	Convert file records from file_records .
5474	Create a directory model from a database record .
5475	Create a notebook model from a record .
5476	Save a notebook .
5477	Save a file
5478	Rename a file .
5479	Delete a file .
5480	Adds a user to the database .
5481	Delete a user .
5482	Create a directory .
5483	Check if a user is in the database .
5484	Delete a directory .
5485	Check if a directory exists .
5486	List files in a directory .
5487	Get all directories in a directory .
5488	Find the file where the user is in the given directory .
5489	Select a file .
5490	Return default fields .
5491	Get file from database .
5492	Get a file
5493	Get file id
5494	Check if a file exists .
5495	Rename a directory .
5496	Save a file .
5497	Generate notebooks .
5498	Remove remote checkpoints from database .
5499	Generate checkpointpoints .
5500	Generate notebooks .
5501	Encrypt a row .
5502	Re - encrypt a user .
5503	Derives a single fernet key for a single user .
5504	Derives a list of passwords from a list of passwords .
5505	Generate a single encryption encryption key .
5506	Memoizes a single argument .
5507	Get the name of a column .
5508	Convert a list of fields to a dict .
5509	Convert a list of fields to a dictionary
5510	Create a notebook checkpoint .
5511	Create a file checkpoint .
5512	Delete a single checkpoint .
5513	Get the content of a checkpoint .
5514	List all remote checks .
5515	Move all remote checkpoints .
5516	Delete all remote checkpoints .
5517	Purge the database .
5518	Resolve the given path to the given path .
5519	Apply model to model .
5520	Decorator for dispatch methods .
5521	Decorator that dispatches the kwargs for the given path .
5522	Decorator that dispatches old_path to new_path
5523	Called when manager changes .
5524	Get a model from a path .
5525	Normalizes an API path .
5526	Split API filepath into name and name .
5527	Writes a base64 - encoded base64 to base64 .
5528	Read base64 from base64 .
5529	Decode bcontent from base64 .
5530	Decode a base64 - encoded text .
5531	Return a list of directories .
5532	Decorator to ensure that the path is outside of the root root .
5533	Create a user .
5534	Separate directories from models .
5535	Recursively walk directories
5536	Yield all files in a directory .
5537	Recursively walk all files in a directory .
5538	Perform a re - encrypting of all users .
5539	Recrypt a single user .
5540	Unencrypts all users .
5541	Decrypt a single user .
5542	Context manager to create alembic files .
5543	Upgrade a database .
5544	Sanitize a block .
5545	Queue an instance of the given embed_type .
5546	Load instances from the specified embed_type .
5547	Insert an instance into this block .
5548	Load data for this model .
5549	Validate data .
5550	Show the admin .
5551	Returns the JSON representation of the object .
5552	Hide the authenticated fields .
5553	Remove fields from the request .
5554	Override this method to get a published article .
5555	Get the queryset of the queryset .
5556	Get the queryset of the queryset .
5557	Get the attribute of an instance .
5558	Validate widget .
5559	Validate a zone .
5560	Check if an id is a valid UUID .
5561	Get permissions for this group .
5562	Modify permissions .
5563	Ensure that the author is valid .
5564	Save the given validated data to the database .
5565	Returns the data as a dictionary .
5566	Prepare data for all fields .
5567	Render the template .
5568	Returns a list of all settings
5569	Retrieves all pages belonging to a user .
5570	Get settings for an integration .
5571	Update the settings for an integration .
5572	View for signing .
5573	Convert a list of items into a maptag .
5574	Get a zone
5575	Save the featured image .
5576	Save a subsection .
5577	Return the extension of the image
5578	Return the relative URL for the image .
5579	Save the image .
5580	Save a thumbnail .
5581	Get a connection to the database .
5582	Get a stream with the given fileobj .
5583	Read an amount of bytes from the bucket .
5584	Consume an AMT .
5585	Schedules a message to be consumed .
5586	Called when a token is consumed .
5587	Returns the projected moving average .
5588	Record the exponential moving average .
5589	Download a file .
5590	Wait for a transfer to finish .
5591	Returns a list of callbacks for the given callback type .
5592	Return a filtered dict with the given keys .
5593	Decrement the counter .
5594	Finalize the cache .
5595	Check if file is a special file .
5596	Acquire a Semaphore .
5597	Release a Semaphore .
5598	Adjust the chunk size .
5599	Queue a write operation on a file object .
5600	Get a write task .
5601	Returns the download output manager .
5602	Main function for multiprocessing .
5603	Write data to fileobj .
5604	Request a list of write requests .
5605	Return whether the file object is seekable .
5606	Upload a file .
5607	Download a file .
5608	Copy a source to a bucket .
5609	Delete a bucket .
5610	Shutdown the server .
5611	Cancel all tracked transfers .
5612	Wait until the result is completed .
5613	Read data from the given fileobj .
5614	Wrap data from a file object .
5615	Returns an instance of the uploader class .
5616	Set an exception .
5617	Sets the result of the job .
5618	Set the exception to the future .
5619	Wait for the job to finish .
5620	Cancel the job .
5621	Submit a task to the executor .
5622	Add a callable to the future .
5623	Add a failure cleanups .
5624	Mark the task as completed .
5625	Submit a task to the executor .
5626	Add a callback to the future .
5627	Upload a file to S3 .
5628	Download a file from S3 .
5629	Iterate over step decorators .
5630	Return the arguments for a step .
5631	Refactor a single step .
5632	Iterate over all step functions .
5633	Return the arguments for a step .
5634	Refactor a step .
5635	Select Python parser .
5636	List members in a team .
5637	Create a team membership .
5638	Updates a team membership .
5639	Delete a member .
5640	Retrieves the fact from the server .
5641	Perform a POST request .
5642	List members .
5643	Delete the specified membership .
5644	Validate the base URL .
5645	Check if a string is a web URL .
5646	Open a local file .
5647	Check that the given object is an instance of the given type .
5648	Construct a dictionary from a list of dictionaries .
5649	Check that the response code is correct .
5650	Convert JSON data to OrderedDict .
5651	Convert a datetime object into a string .
5652	List room objects .
5653	Create a room .
5654	Updates a room .
5655	Delete a room .
5656	List licenses .
5657	Time of created WebExTeams .
5658	Get an access token .
5659	Create a webhook .
5660	Updates a webhook .
5661	Delete a webhook .
5662	Ensure the next URL is valid .
5663	Set the wait_rate limit .
5664	Updates request headers .
5665	Check if the given URL is absolute .
5666	Make a request to the API .
5667	Perform a GET request .
5668	Perform a GET request .
5669	Get items from a url
5670	Perform a PUT request .
5671	HTTP DELETE operation .
5672	Create a new JWT .
5673	Retrieve a list of messages from the API .
5674	Create a new user .
5675	Delete a message .
5676	Create a person object .
5677	Get a person object .
5678	Update a person .
5679	Delete a person .
5680	Retrieve the person
5681	Get a list of roles .
5682	List team objects .
5683	Create a team .
5684	Updates a team .
5685	Delete a team .
5686	List events .
5687	Serialize a dictionary into a dictionary .
5688	Get access token .
5689	The last activity of the WebEx team .
5690	Post events to Webhook service .
5691	Get the tunnel url
5692	Delete webhooks with given name .
5693	Create a webhook .
5694	Create webhooks .
5695	Command line interface .
5696	Read all telegram messages .
5697	Read lines from the queue .
5698	Create a DSMRProtocol .
5699	Create a DSM reader .
5700	Create a TCP DSM reader .
5701	Handle incoming data .
5702	Called when a connection is lost .
5703	Handle telegram .
5704	Parse a telegram data .
5705	Get version from file .
5706	Ensure that a python version is supported .
5707	Find all installed packages .
5708	Create a cmdclass from pre - release cmd .
5709	Decorator to create a function for the given function .
5710	Run a shell command .
5711	Decorator to ensure that all targets exist .
5712	Creates a new command with the given arguments .
5713	Create a file handler for package data .
5714	Return a list of data files .
5715	Get package data .
5716	Compile a pattern from a pattern .
5717	Yields a path from the given path .
5718	Translate an IxPlode .
5719	Join the translated parts into a string .
5720	Translate a glob into a glob part .
5721	Truncate the database .
5722	Write a table to the database .
5723	Write indexes to the database .
5724	Write the triggers to the database .
5725	Writes the constraints to the database .
5726	Write contents of table to file .
5727	Process a single row .
5728	Write indexes .
5729	Writes the constraints to the table .
5730	Writes the triggers to the database .
5731	Return the number of queries in the queue .
5732	Enqueue data to the database .
5733	Start the task .
5734	Build an extra predicate .
5735	A simple JSON datetime serializer .
5736	Reconnect to the database .
5737	Execute a query .
5738	Get a database connection
5739	Run the benchmarks .
5740	Connect to the pool .
5741	lookup values by errno
5742	Total number of connections .
5743	Handle a connection failure .
5744	Convert a list of fields to a simple expression .
5745	Update a set of fields .
5746	Connect to the database .
5747	Setup the database .
5748	Destroy all tables .
5749	Start a new step .
5750	Stops a step .
5751	Loads steps from raw data .
5752	Disconnect from the API .
5753	Reconnect to the socket .
5754	Connect to the server .
5755	Process a message .
5756	Stop timers .
5757	Sends a ping to the API .
5758	Check if pong is received .
5759	Send a payload to the server .
5760	Unpause playback .
5761	Handle a system message .
5762	Handle client info .
5763	Error handler .
5764	Handle the data .
5765	Resubscribe from RabbitMQ .
5766	Handle authentication .
5767	Handle a configuration request .
5768	Update timestamps of a channel
5769	Reset the connection .
5770	Add candles to the specified pair .
5771	Configures bitfinex configuration .
5772	Subscribe to a tick .
5773	Unsubscribe from the ticker .
5774	Subscribe to an order book .
5775	Unsubscribe from an orderbook .
5776	Subscribe to a raw orderbook .
5777	Unsubscribe from raw orderbook .
5778	Subscribe to a list of trades .
5779	Unsubscribe from a list of trades .
5780	Subscribes a set of candles to a device .
5781	Unsubscribe from candles .
5782	Authenticate the API .
5783	Cancel an order .
5784	Invoked when a device is received .
5785	Invoked when a gateway is received .
5786	Called when a message is received .
5787	Creates a new device .
5788	Publish an event .
5789	Update a device .
5790	Returns a list of all available clients .
5791	List all bundles
5792	Create a bundle
5793	Updates an existing schema .
5794	Disconnect from the server .
5795	Called when the client is connected .
5796	Subscribe to device events .
5797	Subscribe to a device status .
5798	Subscribe to device commands .
5799	Publish a command .
5800	Process a message on unsupported topic .
5801	Process a device event .
5802	Process a device status .
5803	Process an app status .
5804	Get the last event for a specific device .
5805	Get all events
5806	Make an API call .
5807	Initiate a request .
5808	Get the status of a specific device .
5809	Close the index .
5810	Return the number of intersecting intersections .
5811	Retrieve nearest neighbors from a list of coordinates .
5812	Gets the bounds of the coordinate .
5813	Deletes the specified coordinates .
5814	Create an index from a stream .
5815	Loads a byte array .
5816	Delete an object .
5817	Check if the return value is valid .
5818	Load the application .
5819	Initialize Flask extension .
5820	Start the gunicorn server .
5821	Convert the value to native image field .
5822	Crops the image on the center of the image .
5823	Crop an image to a file .
5824	Process an image .
5825	Process an image .
5826	Convert data to python object .
5827	Process the placeholder image .
5828	Save the model instance to the model .
5829	Updates the vpoi field .
5830	Saves the form data .
5831	Sets the formfield widget for this model .
5832	Convert obj to string .
5833	Autodiscover all Django apps .
5834	Unregisters a Sizer subclass .
5835	Unregisters a filter .
5836	Return the URL for this field .
5837	Build filters and store them in the filter library .
5838	Get the path of the root folder .
5839	Returns the size of the root folder
5840	Returns the scaled root folder .
5841	Delete files from storage .
5842	Preprocess the image .
5843	Preprocess the image .
5844	Preprocess JPEG image .
5845	Retrieve an image from disk .
5846	Save an image to disk .
5847	Format a PPOI string as a string .
5848	Create a new image and save it to disk .
5849	Render the template with the given value .
5850	Add the context to the widget .
5851	Return a copy of the attributes .
5852	Return the path to a file or directory .
5853	Return the path to a file or directory .
5854	Validate a list of image field names .
5855	Get the url from an image key .
5856	Returns the rendition key set .
5857	Format an instruction .
5858	Format a function body .
5859	Decode a bytecode .
5860	Decode a module .
5861	Mark a function as deprecated .
5862	Connect to the server .
5863	Closes the protocol .
5864	Read the result from the server .
5865	Handle a FastAG request .
5866	Parse an agi result .
5867	Check the status code .
5868	Reset all instances .
5869	Returns a list of instance instances .
5870	Get the metadata for a package .
5871	Returns the primary keys for a model .
5872	Deserialize a value from the DB .
5873	Get an existing instance .
5874	Returns a dictionary of declared fields .
5875	Deserialize this object into the model .
5876	Split model arguments into kwargs .
5877	Delete all databases .
5878	Create snapshot .
5879	List snapshots .
5880	Restore a snapshot
5881	Remove a snapshot
5882	Rename a snapshot .
5883	Replace a snapshot .
5884	Randomly shuffle the indexes
5885	Clean textacy .
5886	Apply a function over the data .
5887	Processes a process text .
5888	Process text .
5889	Process text .
5890	Generate the maximum length of the document length .
5891	Return the number of words in the indexer .
5892	Map param type to string .
5893	Parse a dictionary of interfaces .
5894	Return the inverse of the bidict .
5895	Perform update with rollback .
5896	Return a copy of this bidict .
5897	Make a deep copy of this node .
5898	Test whether two OrderedDict objects are equal .
5899	Return an inverted version of an object .
5900	Clears all registered variables .
5901	Moves the node to the end of the end .
5902	Write text to a temporary file .
5903	Returns a list of contacts
5904	Merge arguments into config .
5905	Loads an address book .
5906	Get all possible search queries .
5907	Creates a new subcommand for the given addressbook .
5908	Display birthdays .
5909	Display a phone number
5910	List all contacts
5911	Modify a subcommand .
5912	Remove a contact from a vCard
5913	Executor for globus subcommand
5914	Merge a subcommand .
5915	Copies a subcommand to the target vCard
5916	Get an action by alias .
5917	Convert a boolean value into a boolean value .
5918	Create a new contact object
5919	Create an Address object from an addressbook .
5920	Create a contact object from an addressbook .
5921	Create a new user input from existing contacts .
5922	Get the names part of a vCard .
5923	Add a category .
5924	Parse a type value .
5925	Convert a list to a string
5926	Convert a string to a date format .
5927	Compare two uids .
5928	Yield all contacts .
5929	Yield all contact names
5930	Yield UIDs from a query
5931	Search for address book .
5932	Get a dictionary of short ids .
5933	Get the short ID for the given uid .
5934	Find all VCard files .
5935	Load a card from the VCard .
5936	Return the abook with the given name .
5937	Return a list of available ARM architectures .
5938	Return a list of available ARM platforms .
5939	Get the argument specification for a function .
5940	Dispatch a parser .
5941	Handle safe input .
5942	Encode an output file .
5943	Guess the type of kwargs .
5944	Add commands to the parser .
5945	Decorator to mark a new name .
5946	Decorator to register an argument .
5947	Prompt user for confirmation .
5948	Return a copy of this Query .
5949	Return a copy of this filter .
5950	Return a cached result .
5951	Get the first matching limit
5952	Delete entities from the database .
5953	Called when a delete is deleted .
5954	Lazy - load a Redis prefix .
5955	Estimate the number of overlap between the given index .
5956	Perform a search .
5957	Count the number of records .
5958	Connect to an object .
5959	Convert a value to a list of strings .
5960	Refresh indices of a model .
5961	Clean old index .
5962	Add an object to the session .
5963	Return the value of the given key .
5964	Write redis data to redis .
5965	Saves the object to the database .
5966	Delete the database .
5967	Get a list of ids .
5968	Register a pickler .
5969	Open a semaphore .
5970	Determine the number of CPUs available .
5971	Send a result to the specified work queue .
5972	Process a worker .
5973	Add a call item to the queue .
5974	Ensure the executor is running .
5975	Creates a CloudPickledObjectWrapper wrapped in a CloudPickledObject .
5976	Start the server .
5977	Determines if a connection object is successfully spawned .
5978	Return an executor that can be used to create an executor .
5979	Waits for the jobs completion .
5980	Get data from a process .
5981	Prepare the process .
5982	Close all open files .
5983	Terminate subprocess .
5984	Terminate a process .
5985	Get the exit codes for the given processes .
5986	Format the exit codes .
5987	Run the main semaphore tracker .
5988	Ensure the semaphore is running .
5989	Process an event .
5990	Run the program .
5991	Create an interactive console .
5992	Split a string .
5993	Get the stack of the given function .
5994	Run all hooks .
5995	Remember the stack .
5996	Return the value of an int .
5997	Get an integer value .
5998	Process commands .
5999	Enqueue the startfile .
6000	Given a string return the next token .
6001	Log an error message .
6002	Read a command .
6003	Close the connection .
6004	Disassemble a message .
6005	Disassemble instructions from a byte string .
6006	Count the number of frames in a frame .
6007	Get the name of the call function .
6008	Print stacktrace stack trace .
6009	Lookup a subcmd by name .
6010	Show a short help message .
6011	Add a subcommand to the registry .
6012	Run a command .
6013	Run the debugger .
6014	Show a category .
6015	Run lineinfo .
6016	Try to find a frame from the debugger .
6017	Map thread names to threads .
6018	Get an integer or raise an integer .
6019	Returns whether or not the command is off .
6020	Run a boolean on the debugger .
6021	Set an int value .
6022	Run a show boolean on the debugger .
6023	Show the debug information .
6024	Show the value of the given object .
6025	Return True if line is a Deferred .
6026	Check if line is a class definition .
6027	Quit thread .
6028	Determine if the terminal is enabled .
6029	Return True if color is dark .
6030	Return the signature of a frame .
6031	Return a list of all display expressions .
6032	Return the display of the given frame .
6033	Return a string representation of the parameter .
6034	Read a message from the socket .
6035	Show debug information .
6036	Handles undefined subcommand
6037	Run a loop .
6038	Pretty print a list of values
6039	Look up a signal by its name .
6040	Look up a signal by name .
6041	Determine if a sign name is a legal signame .
6042	Set a replacement for a signal .
6043	Check if we need to adjust and adjust the signandlers .
6044	show info signal handler
6045	Handle action .
6046	handle print method
6047	Handle a signal .
6048	Convert a filename to a module .
6049	Search for files in a directory .
6050	Try to find a file in the given directory .
6051	Return a list of pyfiles .
6052	Log a message .
6053	Run the program .
6054	Columns a list of commands .
6055	Run the postmortem command .
6056	Close the connection .
6057	Send a message to TCP .
6058	Complete an identifier .
6059	Process a database string .
6060	Add ignore_or_filter to ignore_filter .
6061	Return a list of files that match the given filename .
6062	Return the filename of the debugger .
6063	Check if the tracer is started .
6064	Check if there is a stop level .
6065	Set the next frame .
6066	Run the stack trace .
6067	Run pyficache .
6068	Check if a function is entered .
6069	Delete a breakpoint
6070	Delete a breakpoint by number
6071	Enables all breakpoints .
6072	Disable a breakpoint by number .
6073	Delete all breakpoints by lineno .
6074	Opens the input .
6075	Read a line of text .
6076	Prompt user for confirmation .
6077	Add whitespace to the text .
6078	Add a number to the token .
6079	Convert a query to a Future .
6080	Restore the session .
6081	Load a module .
6082	Iterate over all documents .
6083	Main function .
6084	Transcode a JSON file into a stream .
6085	Opens a JSON file or a file - like object .
6086	Convert a stream of data to a datetime object .
6087	Convert date format to float .
6088	Detect file encoding .
6089	Yield lines from a JSON file .
6090	Transcode a file to UTF - 8 encoding .
6091	Open csv file .
6092	Read a CSV file .
6093	Entry point for the command line interface .
6094	Connect to the given URL .
6095	Save token to dictionary .
6096	Perform an HTTP request .
6097	Perform a DELETE request .
6098	Wait for a project to complete .
6099	Get the root URL .
6100	Save a token
6101	Perform a HTTP request .
6102	Perform a POST request .
6103	Change the given path .
6104	Get the default account .
6105	Return the documentation for this client .
6106	Wait for a job to complete .
6107	Perform a GET request .
6108	Print a CSV result to stdout .
6109	Reads parameters from a json file .
6110	Simplify a document .
6111	Create a project using lumi - upload .
6112	Upload the documentation for a given language .
6113	Entry point for the CLI .
6114	Upload a stream to the server .
6115	Upload a file to server .
6116	Main entry point .
6117	Creates a new Luminosa login with the given username and password .
6118	Login to the server .
6119	Post login page .
6120	Helper method to get p_p resource .
6121	Fetch data per period
6122	Prepare view class .
6123	Initialize the view .
6124	Handle GET request .
6125	Process a message
6126	Update menus .
6127	Return default URLs .
6128	Event handler for changes
6129	Called when the user has changed
6130	Create a sub - element .
6131	Initialize the widget
6132	Destroy this widget .
6133	Add a child to the widget .
6134	Remove the child from the widget .
6135	Generate all child widgets .
6136	Set an attribute .
6137	Update a proxy .
6138	Notify that a modification has been modified
6139	Return an xpath matching a query .
6140	Initialize the proxy .
6141	Initialize the widget .
6142	Set the source to the widget .
6143	Ensures that the given change has been changed .
6144	Observe a block .
6145	Update the children of a change .
6146	Read the contents of a file .
6147	Print an error message .
6148	Print error parsing .
6149	get a Product by name
6150	Create a new session .
6151	Reset the store .
6152	Returns a list of stores for the given search term .
6153	Set the fulfillment system .
6154	Retrieve a menu
6155	Add an item to a basket .
6156	Adds a pizza to a basket .
6157	Adds an item to the basket .
6158	Removes an item from the basket .
6159	Set the payment method for this account .
6160	Process payment options .
6161	Perform a GET request .
6162	Perform a POST request .
6163	Calls API call .
6164	Append an item to the screen .
6165	Add an exit item .
6166	Draws the widget .
6167	Process user input .
6168	Select the selected item .
6169	Parse a curses menu .
6170	Retrieve a pandas DataFrame from a DataFrame .
6171	Top level aggregation function .
6172	Convert a pandas DataFrame to datetime .
6173	Convert datetime to strftime .
6174	Change the format of a DataFrame .
6175	Cast a column to the given type .
6176	Compute the rank of a DataFrame .
6177	Fetch data from a DataFrame .
6178	Basic math operation .
6179	Rounds values in a DataFrame .
6180	Compute the absolute values of a DataFrame .
6181	Pivot a DataFrame
6182	Perform a pivot on a DataFrame
6183	Group columns by aggregations .
6184	Calculate cumulative values for a given column .
6185	Add missing row to DataFrame .
6186	Decorator to catch the decorated function .
6187	Log a message .
6188	Log time of a function .
6189	Log a dictionary of input shapes .
6190	Rename a DataFrame .
6191	Compute the Cumsum of a DataFrame .
6192	Combine columns into a pandas DataFrame .
6193	Get the value of a function call .
6194	Remove old entries from a cachedir .
6195	Roll a DataFrame into a DataFrame .
6196	Calculate the maximum value of a column .
6197	Calculate the minimum value of a column .
6198	Fill a dataframe with a given value .
6199	Add offset to a date object .
6200	Return a new number of months in a date object .
6201	Return a new nb_years .
6202	Parse a date string .
6203	Filter a DataFrame by date range .
6204	Compute the percentage of a column .
6205	Perform ADA family .
6206	Get learning updates .
6207	Get training parameters .
6208	Update optimization updates .
6209	Runs the first step of the neural network .
6210	Prepare the classifier .
6211	Compute the tensor of the encoder .
6212	Apply a function to each parameter .
6213	Vectorize the target .
6214	report a report
6215	Train the model .
6216	Sample from the model .
6217	Compute alignments based on the previous values .
6218	Compute the context vector .
6219	Concatenate tensor .
6220	Pad the length of the dataset .
6221	Computes the RMS of the core .
6222	Prints out the end time .
6223	Compute the cost of the given data .
6224	Invoke the Monitor .
6225	Build loop variables .
6226	Scan the inputs of the neural network .
6227	Computes the momentum of the given parameters .
6228	Return whether or not this instruction should be overwritten .
6229	Skip a set of epochs .
6230	Loads parameters from a given path .
6231	Train the model .
6232	Run the training step .
6233	Runs a valid iteration of the epoch .
6234	Log a score map .
6235	Get the current validation set .
6236	Return a new NeuralVariable .
6237	Print information about the configuration .
6238	Create a new variable with the given type .
6239	Create neural variables from dataset .
6240	Create a shared shared shared value .
6241	Stack the encoders .
6242	Updates the decoding layers .
6243	Encode x .
6244	Decodes the given data .
6245	Creates a 2D Gaussian .
6246	Register a new layer .
6247	Monitor the output of each layer .
6248	Return a list of all parameters .
6249	Setup variables .
6250	Compute the MapDict .
6251	Save model parameters to disk .
6252	Load parameters from a pickle file .
6253	Report information about the network .
6254	Registers given parameters .
6255	Register updates .
6256	Register new training updates .
6257	Register monitors .
6258	Normalize a list of tensors .
6259	Serialize elt to pickle .
6260	Parse a file - like object .
6261	Load the model .
6262	Create request elements .
6263	Decode state .
6264	Parse X credentials .
6265	X request elements .
6266	Login to the provider .
6267	Normalize a dictionary .
6268	Convert a list of items into a dictionary .
6269	Parse the body of the query .
6270	Resolve the provider class .
6271	Create a cookie .
6272	Save the session .
6273	Retrieves the serialized cookie .
6274	Return the data as a dictionary .
6275	Generate a signature .
6276	Serialize the value .
6277	Returns True if the token is valid False otherwise .
6278	Expire expiration time
6279	Serialize the credentials .
6280	Check if content is binary string .
6281	Return the content of the response
6282	Create request elements .
6283	Access the user info
6284	Werkzeugomatic authentication .
6285	Authenticate user .
6286	Generate a session key .
6287	Store session key .
6288	Generate a random CSRF generator .
6289	Log a message .
6290	Checks if the given status is in the given category .
6291	Split a URL .
6292	Decorator for cross - origin .
6293	Set the CORS headers for the request .
6294	Return the kwarg dictionary for the app instance .
6295	Convert an object to a string .
6296	Ensure an iterable is iterable .
6297	Return True if two NaNs are close .
6298	Mark a function as deprecated .
6299	Deserialize a string .
6300	Create an AudioSegment from a file .
6301	Create an AudioSegment from a numpy array .
6302	Execute a command .
6303	Filter the audio segment .
6304	Compute the Fourier transform .
6305	Generates frames from the stream .
6306	Normalize the SPL segment by normalization .
6307	Reduce the audio segment .
6308	Resample the image .
6309	Serialize state .
6310	Calculate the spectrogram .
6311	Given a list of candidate IDs choose the same number of candidates .
6312	Calculate the offset indexes after a given onset_id .
6313	Calculate the offset_id for a given onset_id
6314	Given an onset_id return a list of offset IDs that match the offset .
6315	Returns a list of consecutive consecutive segments that overlap the onset front .
6316	Update segmentation mask .
6317	Extracts the ID from the given index
6318	Generate a set of front ids for each onset .
6319	Given a set of onset IDs find the corresponding offsets .
6320	Remove overlapping segments .
6321	Remove all fronts that are smaller than size .
6322	Break a list of two front - aligned front pairs .
6323	Merge two segments .
6324	Remove masks from a list of masks .
6325	Downsampling of two stfts .
6326	A helper function for the AAS task .
6327	Bandpass filter .
6328	Lowpass filter .
6329	Convert a list of responses to a TTF input .
6330	Expand a dataset into a list of dictionaries .
6331	Determine whether two elements are equal .
6332	Given a list of filenames return a list of metrics for each feature .
6333	Load confusion matrix .
6334	Convert a list of data to TTF input .
6335	Update the index URL for the pip .
6336	Autodetect files .
6337	Resolve all streams .
6338	Resolve a list of properties .
6339	Resolve a list of streams .
6340	Handle an error .
6341	Push a sample into the stream .
6342	Push a chunk to the stream .
6343	Get information about the stream .
6344	Open the stream .
6345	Set the time correction .
6346	Create a child child .
6347	Return the next sibling .
6348	Return the previous sibling .
6349	Set name .
6350	Set value .
6351	Add a child to this element .
6352	Prepend a child to the LLElement .
6353	Append an element to the end of the element .
6354	Prepend a copy of the element .
6355	Remove a child .
6356	Return a list of stream information .
6357	List words in a word .
6358	\ x1b [ 1mNAME \ x1b [ 0mNAME \ x1b [ 0mNAME \ x1b [ 0mNAME \ xn_nram - > 0
6359	Compute the n - grams of a token .
6360	Iterate over processors in a pipe .
6361	Apply a function to an iterable .
6362	Make a snake .
6363	Make a word
6364	Show fuzzy index .
6365	Extrapes a list of dictionaries into a list of dictionaries .
6366	Display help for a command .
6367	Display information about the redis database .
6368	Get the value of a DB key .
6369	get geohash coordinates
6370	Get a single record .
6371	Show index details .
6372	Get the score of a word .
6373	Compare two strings .
6374	Send a response .
6375	Map requests to a list of requests .
6376	Read bits from an array .
6377	Convert bits to a Concat .
6378	Convert a slice to a Slice .
6379	Find all files in a directory .
6380	Return the value of a parameter iterable .
6381	Generates a statement for each item .
6382	Create a new STL signal .
6383	Convert a number to an integer .
6384	Return True if num is a Pow2 .
6385	Register a case .
6386	Registers a default node .
6387	Register a vcdWriter .
6388	Called when the simulation is started
6389	Log a change .
6390	Return an HWProcessor .
6391	Automatically add agents .
6392	Retrieve the clk associated with this unit .
6393	Yield distinct items from iterable .
6394	Group items by fn .
6395	Flatten an iterable .
6396	Recursively merges ifstm .
6397	Remove unconnected signals .
6398	Check if a sequence is a valid assignment .
6399	Try to merge two inputs .
6400	Given a list of processes return a list of processes .
6401	Called when a write request is received .
6402	Serialize a vldl to an RDL object .
6403	Returns the name of the process and mark outputs .
6404	Given a list of statements return a list of all of the drivers that are in the given statements .
6405	Add a signal to the registry .
6406	Synthesize an architecture .
6407	Returns the maxstId for the given stm .
6408	Returns the maxst id of all statements .
6409	Write data to the simulation .
6410	Change direction .
6411	Load Declarations .
6412	Returns the signals for the given interface .
6413	Returns the port name .
6414	The bit length of this interface .
6415	Return the sensitivity of an operation .
6416	Evaluate the given operator .
6417	Convert bits to type .
6418	Reconstruct a HStructT .
6419	Return the full length of a word .
6420	Iterate over the parts of a transaction .
6421	Pretty print an interface .
6422	Generates a list of frames from a transt .
6423	Iterate over the parts of the word .
6424	Pack data into a dictionary .
6425	Remove all metadata from the signal .
6426	Return the set of enclosures for the given statements .
6427	Determine the sensitivity sequence .
6428	Get the context of this Param instance .
6429	Called when a reduction is received .
6430	Called when a merge is received .
6431	Return True if two statements are merged .
6432	Merge statements into a single HDL statement .
6433	Merge two statements .
6434	Try to reduce HDL statements .
6435	Called when the event is updated .
6436	Set the parent statement to the top statement .
6437	Register a list of stem nodes .
6438	Destroy the instance .
6439	Add a register to the registry .
6440	Create a signature for a container .
6441	Clean all external interfaces .
6442	Recursively walk a list of HStructs .
6443	Unpack data from a structT .
6444	Signs a signed value .
6445	Add a reference to a process .
6446	Simulate condEval .
6447	Connect a new port to the given port .
6448	Make an updater .
6449	Creates an updater .
6450	Generate a new bit value .
6451	Create a HWProcessor .
6452	Evaluate a parameter .
6453	Set the value of the parameter .
6454	Create HType from an interface map .
6455	Finalize all connections .
6456	Get the index of the signal on the signal .
6457	Creates a new value from an array .
6458	Copies the value to the specified type
6459	Re - interpret the value of the given type .
6460	Iterate over all of the interfaces found in the given interface .
6461	Find all connections connected to srcPacked .
6462	Concatenate an intf .
6463	Encode a rom into a process .
6464	Convert this TargetPlatform to RDL .
6465	Register an interface in the interface .
6466	Try to convert a value to a val if it is a valid value .
6467	Reduce a value to an XOR .
6468	Return the name scope .
6469	Decorator for serialization .
6470	Returns the type of the given type .
6471	Create an ifContainer instance .
6472	Return the c . c . c
6473	Convert a number of bytes into a SimBits .
6474	Return the name of a constant .
6475	Cut off the driver of this node .
6476	Load a TransTensor from an array .
6477	Load a new structure from a HDL type .
6478	Loads data from a HDL type .
6479	Returns the width of the item .
6480	Iterate over all items in this transaction .
6481	Signs the given value with padding .
6482	Merge two Statements .
6483	Get the indent value for the indent .
6484	Raises an IntlvlConfError if the given property does not exist .
6485	Register a parameter .
6486	Updates the paramDeclr with the given parameters .
6487	Register a new unit .
6488	Register an interface .
6489	Register an array .
6490	Return the single driver instance .
6491	Evaluate static evaluation .
6492	Create an operator with the given operands .
6493	Return a copy with indent .
6494	Try to connect to the given unit .
6495	Propagate clk to obj .
6496	Propagate clk rstn .
6497	Propagate clk to clk .
6498	Propagates the rstn .
6499	Propagates the rst node .
6500	Iterate over bits of a signature .
6501	Serialize an exclude expression .
6502	Serialize parent .
6503	Serialize params into a dictionary .
6504	Return the full name of this interface .
6505	A helper function to add an association to this collection .
6506	Prepare a new unit for simulation .
6507	Convert a unit into a SimModel .
6508	Reconstruct signals from model
6509	Dump a single SimUnit to a file .
6510	Initialize a new TWriteCallback .
6511	Connect a port .
6512	Register a new port identifier .
6513	Connects to the internals .
6514	Return the identifier of the container .
6515	Checks if a sig is dependent on a sig
6516	Add a process to the queue .
6517	Add a workflow to the cluster .
6518	Schedules the CombUpdateDoneDoneDone .
6519	Schedule values to be applied .
6520	Tries to conflict with a new value
6521	RunCombProcesses .
6522	Run SeqProcesses .
6523	Iterate over the values applied to this signal .
6524	Return a copy of a value .
6525	Writes a value to the stream .
6526	Add a process to the future .
6527	Simulate a synthesized unit .
6528	Return an operator from a function .
6529	Convert a list of statements into a list of Ternary operations .
6530	Create an HWProcessor .
6531	Computes the Hamming distance between two hashes .
6532	Calculate the average hash of an image .
6533	Calculate the distance between two images .
6534	Setup the device .
6535	Update the device state .
6536	Mocks the volume .
6537	Increase the volume up .
6538	Down the volume down .
6539	Set the volume level .
6540	Reset the piece .
6541	Returns the piece at the given square .
6542	Remove a piece at the given square .
6543	Set the piece at the given square .
6544	Checks if the given move is a snake .
6545	Determine if the vehicle is killed .
6546	Check if the game is over .
6547	Returns True if this is a valid legal move .
6548	Determine if a rotation is repeated .
6549	Pop a piece of the piece .
6550	Generate a list of pieces .
6551	Move a move .
6552	Calculate the Zobrist hash of the board .
6553	The symbol of the piece type .
6554	Create an instance from a symbol .
6555	Generate a human - readable string representation of the field .
6556	Create a Piece from a string .
6557	Parse repos .
6558	Parse a commit .
6559	Load configuration from a given config .
6560	Load configuration from a command line .
6561	Add an argument parser .
6562	Load config from file .
6563	Generate a yaml string .
6564	Generate markdown .
6565	Cast the value to the cast .
6566	Return a list of dates between two dates .
6567	Parse a date .
6568	Load a file from a currency file .
6569	Sets missing rates to None
6570	Calculate missing rates
6571	Get the rate for a given currency
6572	Convert a currency to another currency .
6573	Return n elements from an iterable .
6574	Generate a sequence of frames .
6575	Read a record from the file .
6576	Write a record to the file .
6577	Return a list of mapped words .
6578	Return the comments of the DAF file .
6579	Add an array to the file .
6580	Close the file .
6581	Compute the position of the input tdb .
6582	Close the file .
6583	Load PCK data .
6584	Compute the segment of the segment .
6585	Handle logging statements .
6586	Check if an op is within the scope .
6587	Check if a dictionary is present .
6588	Check if a string is within the joined string .
6589	Check if keyword exists .
6590	Add exception handler .
6591	Detect logging level .
6592	Get handler name .
6593	Returns the id attribute of the field .
6594	Check if a node is a bare exception .
6595	Check if an exception is present .
6596	Delete the file if necessary .
6597	Add the widget to the database widget .
6598	Return the rendered PDF from the template .
6599	Render the PDF template .
6600	Convert a string to an HTTP quote .
6601	Configure MONGODB .
6602	Convert string to underscore .
6603	Auto - index collection .
6604	Parse CSV file .
6605	Loads content from a file .
6606	Parse price line .
6607	Translate the given symbol to the given symbol .
6608	Load all symbols from the repository .
6609	Get session
6610	Add a price
6611	Import a CSV file .
6612	Show latest price for security .
6613	List latest prices .
6614	Download price databases .
6615	Remove old price entries .
6616	Get the default session .
6617	Add new mapping .
6618	List all price maps .
6619	Get a symbol by its identifier .
6620	Read lines from a file .
6621	Map Entity to Entity
6622	Map a PriceModel to a PriceModel .
6623	Read configuration file .
6624	Get the path to the config file .
6625	Create user config .
6626	Return the path to the config file .
6627	Get the current configuration content .
6628	Set an option .
6629	Get the value of an option .
6630	Save config to file .
6631	Parse a symbol .
6632	Add a price to the model .
6633	Add a price entity .
6634	Get the price for a given symbol
6635	Get session
6636	Get prices for a given date .
6637	Get prices on a particular date .
6638	Prune all security symbols .
6639	Prune prices for a security symbol .
6640	Download price data .
6641	Get all securities for a given currency .
6642	Return the partial partial state .
6643	Updates child_args .
6644	Iterate over all child nodes .
6645	Decorator for multi - decodes .
6646	Check if the student parts have the same length .
6647	Verify that the given object is equal to the given state .
6648	Test whether the student code contains the given text .
6649	Raise an error if the solution is not imported .
6650	Test whether the student outputs match the given text .
6651	Check if a solution has printout .
6652	Check if the current state contains an error .
6653	Verify whether the selected option matches the correct option .
6654	Check validity of a function .
6655	Get the result from a process .
6656	Return a new expression with the given state .
6657	Test whether an instance is instance or not .
6658	Return all defined items .
6659	Generate a child node .
6660	Perform a getattr on the tree
6661	Return True if context has a context loop .
6662	Check if a solution has a context .
6663	Check if a student part contains a student part .
6664	Check if a student part exists .
6665	Check if the arguments passed to the function .
6666	Runs a check call .
6667	Get the true anomaly .
6668	Initialize Flask application .
6669	Initialize configuration .
6670	Add a new Ldap3 server .
6671	Remove a connection .
6672	Cleanup the connection .
6673	Authenticate using LDAP .
6674	Authenticate using LDAP .
6675	Authenticate using LDAP .
6676	Return a list of LDAP groups for the specified user .
6677	Retrieves information about a user .
6678	Retrieves information about a user .
6679	get an object
6680	Return a connection to the server .
6681	Create a new connection .
6682	Create an LDAP connection .
6683	Destroy a connection .
6684	Search for containers within the container .
6685	Search for labels .
6686	Search for repositories .
6687	Search for all artifacts in a collection .
6688	Speak the database .
6689	Send a command to the server .
6690	Update secrets .
6691	Update the headers
6692	Require client secrets .
6693	Download a file .
6694	Perform a HTTP GET request .
6695	Update authorization token .
6696	Returns a folder or None if not found .
6697	Read the response from the response .
6698	Get the bucket .
6699	Update client secrets .
6700	Initialize all clients .
6701	Load credentials from cache
6702	Return the logs for the given name .
6703	List all logs .
6704	Create an endpoint folder
6705	Initialize transfer client .
6706	Search all containers
6707	Show the status of the backend
6708	Add a value to the backend
6709	Remove a variable
6710	Activate backend
6711	Delete a backend
6712	Set base base attributes
6713	Generate basic auth header .
6714	Generate a signature .
6715	Generate a header signature .
6716	HTTP DELETE operation .
6717	Make HEAD request .
6718	Perform a GET request .
6719	Verify SSL certificate .
6720	Remove an image .
6721	Get a dictionary of version information .
6722	Return list of installed requirements .
6723	Get the singularity version
6724	Check if the given software is installed .
6725	Get the absolute path of the installdir
6726	Return the thumbnail of the database .
6727	Run a command .
6728	Get metadata from database .
6729	Update the user s secrets
6730	Print the output of the container .
6731	Kill all commands .
6732	List logs .
6733	Return all collections
6734	Update the credentials .
6735	Update storage settings .
6736	Return an instance of the client .
6737	Send IPython command to IPython .
6738	Get manifests from a repository .
6739	Get the manifest of a repository .
6740	Get download cache .
6741	Extract the environment from the configuration .
6742	Update git base .
6743	Update secret credentials .
6744	Get metadata for this job .
6745	Get settings from client .
6746	Check if a setting is updated .
6747	Update a setting .
6748	Perform an authorization request .
6749	List builders .
6750	Fetches a list of templates matching the given name .
6751	Get IP address from Cloud Console
6752	Runs the project
6753	List all containers .
6754	List all containers
6755	main entry point
6756	Main entry point .
6757	Initialize the database .
6758	Retrieve the JSON template from the cluster .
6759	Perform a search
6760	List endpoints .
6761	Lists files at the specified endpoint .
6762	Creates a shared URL with the given query .
6763	Read client secrets .
6764	Initialize the discovery service .
6765	Delete an object
6766	Delete a file .
6767	Destroy an instance .
6768	Get subparsers for the given parser .
6769	Generate a unique identifier .
6770	Get a temporary tmpdir .
6771	Extract a tar archive .
6772	Extract a tarball archive .
6773	Compute the SHA256 hash of a file .
6774	Read content from file .
6775	Read a JSON file .
6776	Clean up files
6777	Push an image to the server .
6778	Get a collection .
6779	Get collection by name .
6780	Get a container by name .
6781	List images .
6782	Show information about a container .
6783	Rename an image .
6784	Move image to specified location .
6785	Delete an image
6786	Add an image to the registry .
6787	Push an image to the registry .
6788	Parse a header from a recipe .
6789	Find a single recipe from a file .
6790	Create a build package .
6791	Runs a build .
6792	Update the metadata of a blob .
6793	Format a container name .
6794	Use this method to determine if the user has a color .
6795	Emit an error message .
6796	Write a message to the stream .
6797	Print a table .
6798	Push an image to the container .
6799	Get a template
6800	Get the manifest from the repository .
6801	Get the singularity build template .
6802	Update client secrets .
6803	Return a repr representation of the given class .
6804	Raise an exception with the given path .
6805	Create a temporary file .
6806	Get the url for the gravatar
6807	Builds the avatar URL .
6808	Check if a gravatar has a gravatar
6809	Build the url of the Gravatar profile .
6810	Generate chimera blocks .
6811	Computes chimera blocks from a list of blocks .
6812	Enumerate molecules in a molecule .
6813	Enumerate a molecule .
6814	Normalize the molecule into a single molecule .
6815	Apply transform to mol .
6816	Perform canonicalization on a molecule .
6817	Validate gliles .
6818	Disconnects a metal .
6819	Standardize smiles .
6820	Enumerate all Tautomers in a molecule .
6821	Converts a tautomer to mol .
6822	Normalize a molecule .
6823	Return the parent tautomer
6824	Return the parent fragment of a molecule .
6825	Return a copy of the molecule
6826	Return an isotope parent .
6827	Called when a molecule is charged .
6828	Generate the molecule parent
6829	Main entry point .
6830	Remove fragments from the molecule .
6831	Chooses the largest fragment to the largest molecule
6832	Integrate an IVP .
6833	Print statistics about the user .
6834	get mem of members
6835	Get all teams in the organization .
6836	Get all repos .
6837	Returns a list of total contributors .
6838	Get all pull requests .
6839	Get all issues for a given repository .
6840	Return the path to the readme
6841	Get license .
6842	Get all commits for a given repository
6843	Writes organizations JSON to file .
6844	Write total total contributions to file .
6845	Write a list of languages .
6846	Make sure the directory exists .
6847	Remove a date from a file .
6848	Get a list of GitHub organizations .
6849	Create an enterprise session .
6850	Check if rate limit is exceeded .
6851	Connect to GitHub .
6852	Query repositories .
6853	Get organization .
6854	Write the organization to a file .
6855	Create a GitLab object from a Gitlab repository .
6856	Create a project from a record .
6857	Return a license object .
6858	Get a dictionary of all the traffic for this repository .
6859	Get all releases
6860	Get a list of referrers
6861	Perform a GET request
6862	Writes json data to file .
6863	Write data to a file .
6864	Count the number of entries in the database .
6865	Write organization data to file .
6866	Write a list of referrers to a file .
6867	Process a JSON file .
6868	Takes a URL and returns it as a dictionary .
6869	Process a JSON file .
6870	Login to GitHub .
6871	Get all email addresses
6872	Write login information to a file .
6873	Connect to a stashy account .
6874	Connect to Gitlab .
6875	Query for projects .
6876	Convert a git repo to a SLOC .
6877	Compute the number of hours in a sloc .
6878	Prune any null values in a dictionary .
6879	Read a GQL file .
6880	Query GitHub from a file .
6881	Submit a query to the GraphQL server .
6882	Wait for a given utc timestamp .
6883	Count the number of seconds in the queue .
6884	Import data from file .
6885	Saves the data to a JSON file .
6886	Create a TFS connection .
6887	Create a project analysis client .
6888	Create a core client .
6889	Create GitClient .
6890	Create TFS GitClient .
6891	Get Git Repos for a collection .
6892	Get Tfvc branches for a collection .
6893	Print the year commits for the given user .
6894	Calculate the total number of commits .
6895	Write the latest commits to a file .
6896	Configure backend classes
6897	Get the metrics interface for a thing .
6898	Add a timing to the stat .
6899	Add a timer to the stat
6900	Decorator for timer decorator .
6901	Generate a tag .
6902	Log timing information .
6903	Log a histogram .
6904	Perform a rollup .
6905	Enumerate a list of members .
6906	Convert value to enum value .
6907	Convert value to enum .
6908	Return the value of the given type .
6909	Recursively resolve the given path .
6910	Project the list of tuples onto the given dictionary .
6911	Returns the mean value of the counter
6912	Mark this counter as a counter .
6913	Calculate the mean rate .
6914	Marks the next value .
6915	Send a metric .
6916	Serialize a metric .
6917	Format a metric string .
6918	Called when a metric is buffered .
6919	Get the value of an existing config option .
6920	Convert JSON data to UTF8 .
6921	Get the value of a given option .
6922	Given a list of ledger IDs return a dictionary mapping keys to IDs .
6923	Returns a list of divisions
6924	Map Foreign InvoiceNumbers to Foreign InvoiceNumber .
6925	Solve a set of cells in a grid .
6926	Creates a view from injector
6927	Creates a form view
6928	Creates a method view for the given injector .
6929	Creates an API view for the given injector .
6930	Creates a generic API view .
6931	Decorator to register ModelViewSet .
6932	Create a reader from a file descriptor .
6933	Check if the file descriptor is ready .
6934	Close the connection .
6935	Called when a connection is lost .
6936	Add a watch request .
6937	Remove a watch from the watchlist .
6938	Setup a watch on the given path .
6939	Sets up the handlers .
6940	Get an event from the stream .
6941	Touch the event .
6942	Check if the interval is valid .
6943	Updates the interval .
6944	Close all connections .
6945	Checks if the connection is stale
6946	Connect to the NNNQd server .
6947	Execute a lookupd query
6948	Set the maximum number of connections in the network .
6949	Log a message .
6950	Add a callback to the listener .
6951	Remove a callback .
6952	Trigger a listener .
6953	Publish a message to a topic .
6954	Set the feature transform .
6955	Run the prediction on the W .
6956	Return the angle of theta .
6957	Parse a log file .
6958	Remove unaired fastq files .
6959	Merge the default set of defaults .
6960	Run trimmomatic CLI .
6961	Parse the depth file into a dictionary .
6962	Main entry point .
6963	Set the template directory .
6964	Set main channel names .
6965	Get user channel .
6966	Render a Jinja2 template .
6967	Renders the template string .
6968	Sets the list of forks .
6969	Update the main forks
6970	Set the secondary channel for the given source .
6971	Update the attributes of the attribute dictionary .
6972	Set the status channel channels
6973	Set raw inputs .
6974	Set secondary inputs .
6975	Set extra inputs .
6976	Parse coverage header string .
6977	Parse assembly .
6978	Get the GC content of a sequence .
6979	Filter contigs by comparison
6980	Returns the total length of the contig .
6981	Write the Assembly to a file .
6982	Write the assembly report into a file .
6983	Remove all forks from a text .
6984	Iterate over all forks in a pipeline .
6985	Execute sanity checks .
6986	Parse a pipeline .
6987	Get the source lane from a list of forks .
6988	Return list of lanes from a string .
6989	Establish a linear connection .
6990	Create a fork connection for a source .
6991	Add unique identifiers to pipeline .
6992	Remove unique identifiers .
6993	Raise an InspectionError if necessary .
6994	Return mapping from header .
6995	Convert a string into a human readable string .
6996	Convert a size string to a float .
6997	Get list of pipeline processes .
6998	Clear all trace info .
6999	Update the status of the barrier .
7000	Retrieve the contents of a log file .
7001	Assign cpu_load_warnings and memory_load_warnings
7002	Update process statistics .
7003	Parse the log file .
7004	Updates the logging .
7005	Display the curses interface .
7006	Move down down down .
7007	Move right left to right .
7008	Get the last n lines from the log file .
7009	Prepare static information for pipelines .
7010	Load a tree from a dot file .
7011	Get the hash of the run .
7012	Return the path to the nextflow pipeline .
7013	Main script .
7014	Main entry point for the pipeline .
7015	Runs the entuendo program .
7016	Creates a brew recipe .
7017	List all available recipes .
7018	Validate a pipeline string .
7019	Build an upstream pipeline .
7020	Build and return a new pipeline .
7021	Define pipeline string .
7022	Run the pipeline .
7023	Returns a string representation of a component .
7024	Write a report to a JSON file .
7025	Runtrimmomatic report .
7026	Replace names in the alignment file .
7027	Remove temporary files and directories .
7028	Parse files .
7029	Parse the log file .
7030	Perform a filter on the database .
7031	Get the ID of a contig .
7032	Get the plot data
7033	Write the report data to a json file .
7034	Run the assembly report
7035	Parse an assembly file .
7036	Calculate summary statistics .
7037	Get window labels .
7038	Calculate the GC coefficient of a string s .
7039	Calculate the GC proportion of the sliding window .
7040	Run skesa .
7041	Generate a json report
7042	Calculate the length of a list of positions .
7043	Trim a range from a nucleotide sequence .
7044	Determine the trim position of the trim position
7045	Get summary information from a file .
7046	Check the health of a summary .
7047	Parse bowtie log .
7048	Parse the process name and directives .
7049	Add a dependency .
7050	Search for all processes in the tree
7051	Build the header .
7052	Build the template header .
7053	Set the main channels
7054	Initialize the init process .
7055	Set secondary channels
7056	Set the status channels from the pipeline .
7057	Return a string representation of the resource .
7058	Generate a container string
7059	Generate the params string
7060	Return a string with merged processes .
7061	Generate a manifest string .
7062	Sets the configuration parameters .
7063	Write the tree to a file .
7064	Render the pipeline .
7065	Write configuration files .
7066	Export params to json
7067	Export directives .
7068	Fetch container tags
7069	Build the project .
7070	Set kmer range based on max read length .
7071	Run MetaSPAdes .
7072	Get the hash of the report .
7073	Update the size of the trace .
7074	Updates the size of the log file .
7075	Send a live report to the server .
7076	Send live reports to the server .
7077	Closes a connection to the server .
7078	Convert adapters file to output format .
7079	Entry point for FastqC .
7080	Saves the output to an output file
7081	Main function for generating a dictionary of hashes .
7082	Build the software version .
7083	Main function to run the analysis .
7084	Prints a message with the given color .
7085	parser_dict parser
7086	Decorator for processing a process .
7087	Try to guess file compression .
7088	Calculate the min and max range
7089	Return the list of encoding in the given range .
7090	Parse coverage table .
7091	Write the contig to the output file .
7092	Filter contigs based on coverage .
7093	Evaluate the minimum coverage .
7094	Calculate the size of assembly .
7095	Process assembly mapping .
7096	Convert camel case to camel case .
7097	Collect the process map from a list of components .
7098	Create a new tree
7099	Perform a fasthull algorithm .
7100	Map the data to the W .
7101	Calculate median filter
7102	Compute the Gaussian Krnl .
7103	Compute the SMS of X
7104	Compute the N - dimensional N .
7105	Gaussian filter
7106	Compute the distance between two points .
7107	Helper function for circular shift .
7108	Computes the embedded space of X
7109	Create matplotlib plotting .
7110	Plot boundary boundaries .
7111	Plot a matplotlib matplotlib .
7112	Plot groundtruth .
7113	Plot a tree .
7114	Return a list of feat_segments .
7115	Compute the 2D - D - D - Fourier Transform .
7116	Compute the similarity between two features .
7117	Fit the scatter matrix
7118	Fit the model
7119	Read references from audio file .
7120	Find estimate estimations .
7121	Save estimations to file .
7122	Get all boundary algorithms .
7123	Get configuration parameters .
7124	Retrieve the files of a dataset .
7125	Read hier references .
7126	Get the duration of a feature file .
7127	Write a Morsex file to a file .
7128	Get the file name of the dataset .
7129	align the beat times in a song
7130	Estimate the beats of the audio .
7131	Read the beat annotations from the file .
7132	Compute the beat - synchronization features .
7133	Read features from file .
7134	Writes the features to the file .
7135	Get a list of parameter names .
7136	Compute the time - series of frames
7137	Return the frames of the feature .
7138	Compute the features .
7139	Select features from a file .
7140	Preprocess the feature .
7141	Post - processing of the segment .
7142	The main entry point .
7143	Print the mean of the results .
7144	Compute the estimation results .
7145	Compute the information gain for an analysis .
7146	Process a track object .
7147	Returns the file name of the results file .
7148	Process results from a file .
7149	Add a config variable to the config tree .
7150	Compute all features for a file .
7151	Process features from a file .
7152	Gaussian cost function
7153	Lognormalize .
7154	Normalize a F .
7155	Normalize X .
7156	Calculate the timeframes of the given interval
7157	Remove empty segments .
7158	Sonify audio clicks
7159	Given a set of labels and new_idxs and new_idxs and new_labels and the new_idxs are the same .
7160	Process segmentation level .
7161	Align end hierarchies .
7162	Compute distance between two nodes .
7163	Estimate the K - Means K - Means .
7164	Extract data from X .
7165	Run k - means k - means .
7166	Compute the BIC of the data .
7167	Return the magnitude of the data .
7168	Read segments from a JSON file .
7169	Convert bounds json to numpy array .
7170	Convert segments to labels .
7171	Loads beats from a JSON file .
7172	Compute the 2D Fourier transform .
7173	Compute labels for each label .
7174	r Filter activation matrix .
7175	Get the boundaries module .
7176	Get the module module module .
7177	Run hierarchical segmentation .
7178	Run a flat file .
7179	Run algorithms on audio files .
7180	Processes a single audio file .
7181	Process audio files .
7182	Update the single W .
7183	Main entry point .
7184	Decorator for executing a coroutine .
7185	Return accumulator accumulator .
7186	Set the translator task .
7187	Generate text from iterable .
7188	Returns source code .
7189	Creates a HTTP connection to the given interface .
7190	Send a request to Google Translate API .
7191	Return a dictionary of translated translations .
7192	Print the translation table .
7193	Remove nodes from the network .
7194	Convert network to HDF5 .
7195	Create a network from an HDF5 file .
7196	Set the value of a variable .
7197	Aggregate a set of variables .
7198	Returns a DataFrame with the IDs of the nodes in the graph .
7199	Plot the surface .
7200	Set the category index .
7201	Find nearest pois .
7202	Aggregate nodes within a given impedance range .
7203	Process a single node .
7204	Make an Osm query
7205	Build a query for a node .
7206	Build a DataFrame from an OSM query .
7207	Check if value is a regex expression .
7208	Compare two values .
7209	Decorator to turn a function into an instance .
7210	Compare two values
7211	Trigger a list of methods .
7212	Match the given request .
7213	Get a matcher by name .
7214	Initialize a matcher .
7215	Set the response body .
7216	Sends a JSON response .
7217	Set a key to value .
7218	Append functions to target .
7219	Trigger a request .
7220	Set the request URL .
7221	Set the request headers .
7222	Ensure all headers are present .
7223	Ensure headers are present .
7224	Set the content of the request .
7225	Set request parameters .
7226	Set the body of the request .
7227	Sets the given JSON .
7228	Set the xml .
7229	Saves the body of the file .
7230	Persist the object to persist .
7231	Set the error .
7232	Create a response object .
7233	Match a request .
7234	Activate a function asynchronously .
7235	Register a mock engine .
7236	Enable network .
7237	Create a mock expectation .
7238	Remove a mock .
7239	Activate the mock engine .
7240	Disable the mock engine .
7241	Check if a network should be used .
7242	Match the request .
7243	Return a copy of this request .
7244	Activate an engine .
7245	Context manager for context manager .
7246	Add interceptors .
7247	Remove an interceptor .
7248	Get a setting from the given settings .
7249	Convert to decrypted .
7250	Pre - save a model instance .
7251	Get the placeholder for the given value .
7252	Get a decrypted column .
7253	Get the placeholder .
7254	Return a list of keys that match the given data .
7255	r Base Regression to base regression .
7256	The inverse of the covariance matrix .
7257	Recurse through the tree .
7258	Calculate the difference between two branches .
7259	Propagate variables based on variables .
7260	The explained variance of the tree .
7261	Compute the regression model .
7262	Find the best root of the tree .
7263	Set Tc values of time points .
7264	Calculate the branch count .
7265	Calculate the cost of a node .
7266	Attach branches to the tree
7267	Optimize the coalescent time scale .
7268	Generate a sequence from a profile .
7269	Normalize the profile .
7270	Set GTR .
7271	Set GTR model .
7272	Set the number of sequences in the tree .
7273	Add sequences to the tree
7274	Prepare the tree .
7275	Calculate internal nodes .
7276	Calculate the dist2 root .
7277	Reconstruct the alignment .
7278	Returns the mutation matrix for a given node .
7279	Returns the expanded sequence .
7280	Organize the Fitch profiles .
7281	Return the state of a state .
7282	Compute the intersection of two arrays .
7283	Calculate the length of the sequence .
7284	Calculate the ancestral likelihood of the gene .
7285	Return the maximum branch length .
7286	Optimize branch length .
7287	Optimize branch length .
7288	Calculate optimal branch length .
7289	Optimize the sequence length and branch length .
7290	Reconstruct the alignment
7291	Compute the Q matrix .
7292	Generate a custom gtrunc .
7293	Return the standard output of the given model .
7294	Fix the GTR rate matrix
7295	Compute perturbation of t .
7296	Compute the optimal T .
7297	r Compute the optimal t - compressed TTR .
7298	r Compute the probability of a t .
7299	Evolves the evolution of a profile
7300	Logarithm of a sequence .
7301	Set branch length based on branch length .
7302	Calculate the clock rate filter
7303	Plot the root to the tree .
7304	Resolve multiple Polytomies .
7305	Print the log - likelihood of the tree .
7306	Add a coalescent prior to the tree .
7307	Find best root position in the tree
7308	Assign a tree to a tree
7309	Create a GTR model .
7310	Read the VCF if necessary .
7311	Build ancestral reconstruction .
7312	Calculate the FWHM for a given distribution .
7313	Create a delta function from x_pos .
7314	Multiply a distribution object .
7315	Assign dates to the tree
7316	Setup the TreeRegression .
7317	Generate a new TimeTree using the TimeTree optimization algorithm .
7318	Calculate the likelihood of each branch in the tree .
7319	Convert a list of dates into a list of datetime objects .
7320	Return the date uncertainty of a node .
7321	Get the maximum median region of a node .
7322	Return the minimum value of the interpolation object .
7323	Find the median of the Interp object .
7324	Returns a numeric date
7325	Creates a Dict from a clock model .
7326	Connect to guacd server .
7327	Closes the connection .
7328	Receive an instruction .
7329	Send data to the client .
7330	Send an instruction .
7331	Start a handshake .
7332	Encode a utf - 8 string
7333	Load an instruction .
7334	Encode an argument .
7335	Encode this instruction .
7336	Return the URL for the class .
7337	Return the URL of the instance .
7338	Return the URL for the class .
7339	Download a file from Vault .
7340	Retrieve the parent object for this job .
7341	Ask the user for SolveBio login .
7342	Login to Solr .
7343	Log a user .
7344	Print user to the given domain
7345	Return a new filter .
7346	Return a new GenomicFilter with the specified range .
7347	Create a new GenomicFilter .
7348	Retrieve a list of facets .
7349	Process filters .
7350	Returns the next cursor .
7351	Execute a query .
7352	Creates a migration for the given target .
7353	Entry point for solver .
7354	Downloads a vault folder and creates it .
7355	Construct a model from a list of values .
7356	Log out the user .
7357	Make a request to the API .
7358	Return the child object for this task .
7359	Cancel the task .
7360	Parse snpeff .
7361	Generate a SolveBio variant dictionary .
7362	Get credentials from Netrc
7363	Save credentials to file .
7364	Format a value .
7365	Normalize tabular data .
7366	Build a row from a list of cells .
7367	Return a list of cells .
7368	Get cell attrs .
7369	Format a table .
7370	Create a new migration .
7371	Validate the full path of a Vault .
7372	Uploads files to the vault .
7373	Validate a full path .
7374	Validate a SolveBio API host .
7375	Add files to the manifest .
7376	Annotate multiple records .
7377	Evaluate the expression .
7378	Setter for format_name .
7379	Register a new output formatter .
7380	Format the output .
7381	Create a tabular adapter .
7382	Return user config directory .
7383	Return system config directories .
7384	Read configuration from file .
7385	Read configuration files .
7386	Return the user config file .
7387	Return list of system config files .
7388	Return list of files in this directory .
7389	Write the default config file .
7390	Read configuration files .
7391	Truncate a string .
7392	Replace strings with replace .
7393	Call a list of commands in a sequence .
7394	Applies the options to the command .
7395	Apply an option to a command .
7396	Initialize the linter .
7397	Run pep8radius .
7398	Run the documentation .
7399	Truncate a string .
7400	Format numbers .
7401	Format a row .
7402	Create vertical tables .
7403	Create an adapter for a table .
7404	Render a template file .
7405	Check if type is a valid number .
7406	Return True if the type is a BBool .
7407	Checks if the given type is a binary .
7408	Generate a key for a template .
7409	Generate key pair .
7410	Returns a list of objects matching the template .
7411	Inserts an image .
7412	Export a panel .
7413	Returns the first weekday in the given weekday
7414	Repeat a series of dates .
7415	Repeat a repeat of the year .
7416	Fill out the number of weeks for each day .
7417	Handle a single event .
7418	Export variants to a list of variants .
7419	Exports variant variants .
7420	Return a list of variants for the specified variants .
7421	Add a user .
7422	Retrieve a list of str variants .
7423	Retrieve a specific variant .
7424	Retrieve a variant of a variant .
7425	Verify a variant .
7426	Edit a clinvar .
7427	Get all cancer variants .
7428	View a variant .
7429	Update an evaluation .
7430	Return the acmg for the given criteria .
7431	Upload gene panels .
7432	Download verified Excel files .
7433	Return a list of Gene objects corresponding to the given alias .
7434	Add incomplete Penetrance information .
7435	Link all genes in the GNC .
7436	Send request to MME server .
7437	Return a list of node s nodes .
7438	Get the coordinate coordinates for a given chromosome .
7439	Get a subcategory based on a reference number .
7440	Calculate the length of a sequence
7441	Get the end of a variant .
7442	Parse variant coordinates .
7443	Print cytobands .
7444	Instantiates a panel .
7445	Update a panel .
7446	Export a panel .
7447	Edit a panel .
7448	Creates a delivery report
7449	Get HPO terms .
7450	 whitelist users
7451	Build a phenotype object .
7452	Get information about a gene .
7453	Convert gene IDs to json format .
7454	List all institutes .
7455	Print out all badges
7456	Display the events for a given day .
7457	List variants matching the variant query .
7458	Get variants of a STRs .
7459	Return a string describing a variant .
7460	Creates a sv variant .
7461	Parse a variant from a variant object .
7462	Generate export header .
7463	Get variant information .
7464	Get predictions from a list of genes .
7465	Convert a variant object into a dictionary .
7466	Try to find a bai file .
7467	Retrieve observations for a variant .
7468	Parse a gene object .
7469	Return a string representation of a transcript .
7470	Return the end position of a variant .
7471	Returns the frequency of a variant
7472	Generator for human readable clinsig objects
7473	Return the link to a thousandglink .
7474	Return the URL for the cosmic link
7475	Return beacon link for a variant .
7476	URL for the ucsc .
7477	Determine if spidex is human readable .
7478	Returns a list of expected inherited inherited from a variant object .
7479	Get all callers for a variant
7480	Get a list of cancer variants .
7481	Export a clinvar .
7482	Returns a dictionary containing the information for a clinar submission .
7483	Return a variant object for a variant .
7484	Sets the classification for a variant .
7485	Create an evaluation .
7486	Upload gene symbols .
7487	Create verified variant documents .
7488	Export all genes to a BED format .
7489	Parse a clnsig .
7490	Parse compound information .
7491	Show all gene genes .
7492	Build an individual from an individual .
7493	Scrape variants .
7494	Get a case .
7495	Print all caches
7496	Instantiates an institute .
7497	Update institute .
7498	Get the file handle .
7499	Get the net for a given request .
7500	Calculate and return the next value
7501	Check if the year is in the year .
7502	Check the weekday for a given day .
7503	Parse case data .
7504	Add ped information to config file .
7505	Validate an individual sample .
7506	Parse individual samples .
7507	Parse a case .
7508	Parse a family from a ped file .
7509	Builds a single evaluation .
7510	Report the number of mitochondrial variants .
7511	r Returns True if the term is Pathogenic or False otherwise .
7512	r Determine if the given list of pvs_terms are likely to be likely to be a list of strings .
7513	Return True if bp_terms is likely to be maligned
7514	Get the terms of the acmg terms .
7515	Add additional information to a variant object .
7516	Get all variants from a case .
7517	List variant variants .
7518	Retrieve a single variant .
7519	Get all gene variants .
7520	Verifies that a variant is verified .
7521	Returns a list of causatives for a case .
7522	Check if any of the causal variants are marked .
7523	Iterate over all the causatives of this variant .
7524	Delete variants for a case .
7525	Collect overlapping variants from a variant object .
7526	Returns a list of variants that have been evaluated .
7527	Get VCF VCF .
7528	Retrieve variants for a given sample .
7529	Connect to a MongoDB server .
7530	Return a list of objects from the given form .
7531	Creates a custom header for each submission object .
7532	Generate a list of submission lines from a list of submissions .
7533	Load transcripts from ensembl .
7534	Load an omim panel .
7535	Build a dictionary from an Exon object .
7536	Delete a panel .
7537	Delete all indexes
7538	Delete user .
7539	Delete genes collection .
7540	Delete all exons
7541	Delete a case .
7542	Display a list of individuals .
7543	Parses the matches for a patient .
7544	Show case details .
7545	Load user from database
7546	Perform login .
7547	Build an institute .
7548	Delete an event .
7549	Creates an event .
7550	Get events for an institute .
7551	Return a list of user events .
7552	Add a phenotype .
7553	Remove a phenotype term from a case .
7554	Create a comment on a case .
7555	Parse a list of variants .
7556	Verify that a chromosome is within the given coordinates .
7557	Search hpo_terms for a user .
7558	Run Scout export export
7559	Load all exons
7560	Load the region for a case .
7561	Get all month events for a given month .
7562	Return a queryset of the live events .
7563	Parse requirements file .
7564	Return the existing gene IDs for the given panel .
7565	Update a panel .
7566	Create a gene panel .
7567	Export a panel .
7568	Return information about an archive .
7569	Migrate a case .
7570	Migrate case .
7571	Run a research load
7572	Load HGNC genes .
7573	search hpo for given term
7574	Create Flask application .
7575	Configure extensions .
7576	Register appprints .
7577	Configure the coverage report .
7578	Generate aliases for each gene .
7579	Build a panel .
7580	Verify that all variants have been verified .
7581	Get variant variants .
7582	Generate a VCF entry for a variant .
7583	Run the mongodb server
7584	Generate an MD5 key .
7585	Initialize the application .
7586	Sets up the database .
7587	Run the index
7588	Sets up the Scout database .
7589	Run the development setup
7590	Setup the institute
7591	List institute ids .
7592	Parse genetic models .
7593	Show panels .
7594	Add an institute to the database .
7595	Update an institute .
7596	Fetch an institute
7597	Match date .
7598	Return a datetime object from the given format .
7599	Generate HPO gene IDs .
7600	Parse a rank score entry .
7601	Create a new user .
7602	Check connection .
7603	Initialize the application .
7604	Create a delivery report .
7605	Add a user to the database .
7606	Pushes a pileup genome .
7607	Load exons from an ensembl database .
7608	Update compound compounds .
7609	Add links to a gene object .
7610	Get information about a gene .
7611	Parse a single HGNC line .
7612	Parse HGNC genes .
7613	Retrieve a clinar submission for a user and institute .
7614	Updates a submission .
7615	Returns the clinar ID for a given submission .
7616	Add variants to the database .
7617	Update the clinar submission status .
7618	Retrieve all clinar submissions for a user .
7619	Delete a clinar object
7620	Convert a case to a csv .
7621	Parse HPO OPO .
7622	URL for all genes .
7623	Return a list of genes .
7624	Return a list of all API genes .
7625	Check if panels exist .
7626	Load clinical SNV variants for a case .
7627	Load a scalar case .
7628	Decorator for rendering a template .
7629	Retrieve the institute and case for a given user .
7630	Return a list of institute ids
7631	Get the identifier for a gene .
7632	Update a gene panel .
7633	Load all diseases .
7634	Load the disease terms from an omemap .
7635	Parse a variant from a variant .
7636	Parse the frequency of a variant .
7637	Parse variant frequencies .
7638	Show users
7639	Build a HNC gene .
7640	Load a panel from the parsed data .
7641	Load or create a gene - panel .
7642	Compare two MIM panels .
7643	Update the MIM version of the database .
7644	Add a panel to database .
7645	Retrieve a panel object .
7646	Delete a panel .
7647	Get gene panel from database .
7648	List gene panels .
7649	Convert gene to panels .
7650	Update a panel .
7651	Add pending action to a panel .
7652	Add pending panels to the panel .
7653	Retrieve clinical symbols for a case .
7654	List all cases .
7655	Send an SMTP message .
7656	Load indexes .
7657	Update indexes .
7658	Drops all indexes .
7659	Build a mongo query
7660	Build a mongo query
7661	Perform clinsig query .
7662	Add genomic coordinates to the query
7663	Adds gene - related parameters to the query
7664	Drops the database
7665	Parse a panel .
7666	Build a clnsig .
7667	Load a gene bulk .
7668	Load a transcript bulk .
7669	Load an exon_bulk .
7670	Get a single gene by its identifier .
7671	Get the identifier for a gene .
7672	Fetch genes by symbol .
7673	Retrieves all the genes for a given build .
7674	Return the number of genes in the given build .
7675	Drops the gene collection .
7676	Drops the transcripts collection .
7677	Drop exons collection .
7678	Fetch all Ensembl transcripts
7679	Build the HGNC symbol .
7680	Get a gene by symbol .
7681	Fetch all genes by alias .
7682	Fetch all Ensembl gene IDs
7683	Return hgnc symbol
7684	Add the hgnc id to the gene .
7685	Build the interval tree .
7686	Update the omim panel
7687	Return a dict of cases .
7688	Store a case object .
7689	Retrieve matches for a MME server .
7690	Match a matchmaker .
7691	Deletes a MME .
7692	Report a case report .
7693	Generate a PDF report .
7694	Assign a case to a case .
7695	Add a phenotype to a case .
7696	Reload phenotypes .
7697	Displays events for a particular case .
7698	View a case s status .
7699	Assign a case to an institute .
7700	List HOPER terms .
7701	Mark a variant as validation .
7702	Mark a case as unresolved .
7703	Send a delivery report .
7704	Share a case .
7705	Rerun a single email .
7706	View for a case .
7707	Send a VCF to a specific client .
7708	Send a multiqc to a case .
7709	Returns a list of cases for a particular case .
7710	Return the content of a case .
7711	Return coverage report .
7712	Retrieve all the submissions for a particular user .
7713	Generate XML files for a single sample .
7714	Update the synopsis .
7715	Get diseases .
7716	Convert a VCF into a CCF object .
7717	Convenience wrapper for multiqc .
7718	Returns a list of unevaluated Sanger objects .
7719	Create a new MIME record .
7720	Delete a MME .
7721	Get a list of mme matches .
7722	Match a client .
7723	Update the genes for a genome .
7724	Parse variant calls .
7725	Build a transcript object .
7726	Load an institute .
7727	Parse a CADD entry .
7728	Create a case .
7729	Update a variant object
7730	Updates the rank of a variant .
7731	Update compound compounds .
7732	Update the list of compounds with the given variants .
7733	Updates variants in a bulk collection .
7734	Update compounds on a case .
7735	Load a variant .
7736	Insert a variant into the database .
7737	Load a variant into the database .
7738	Assign a case to an institute .
7739	Share a case for a customer .
7740	Report a case .
7741	Mark a case as checked .
7742	Create a validation validation for a variant .
7743	Get all sanger orders
7744	Validate a variant .
7745	Mark a case as causative .
7746	Update the dismiss variant
7747	Updates an ACM for a variant .
7748	Parse ids .
7749	Parses a simple_id and returns its ID
7750	Generate MD5 key .
7751	Convert a panel .
7752	Extract a variant ID from a variant ID .
7753	Return the number of cases .
7754	Updates dynamic genes based on hgnc IDs .
7755	Get a single case .
7756	Deletes a case .
7757	Add a case to the database .
7758	Replace a case .
7759	Update the case ID for a case .
7760	Submit an evaluation .
7761	Gets all Evaluations for a given variant
7762	Parse transcript lines .
7763	Parse ensembl gene request .
7764	Parse Ensembl Transcript request .
7765	Parse ensembl line .
7766	Parse ensembl genes from a file .
7767	Parse Ensembl exons .
7768	Parse Ensembl request .
7769	Initialize logging .
7770	Parse a header line into a dictionary .
7771	Parse an OMIM file .
7772	Extract phenotype information from a file .
7773	Analyze genotypes .
7774	Convert a string to a number .
7775	Format the month start and end dates .
7776	Format a calendar day .
7777	Format the month name .
7778	Add information about the popover .
7779	Return panel information .
7780	Parse a gene .
7781	Parse the gene_lines .
7782	Parse a gene panel .
7783	Show diseases .
7784	Drop HPO terms .
7785	List all available users .
7786	Extract conservations from a variant .
7787	Parse a variant annotation .
7788	Return general case information .
7789	Groups all cases in the database .
7790	Convert the context to a JSON response .
7791	Get the year and month and month .
7792	Check for cancelled events
7793	Fetch a single term .
7794	Search HPO terms .
7795	Get a disease term .
7796	Get all diseases for a gene .
7797	Load a disease term .
7798	Generate a list of genes for the given term .
7799	Read an HDF5 file .
7800	Setup frequency axis .
7801	Setup time axis .
7802	Read a filterbank .
7803	Compute the LST distance from the header .
7804	Fills the DC bin .
7805	Print information about the header .
7806	Calculate the extent .
7807	Plot the waterfall .
7808	Plot the time series .
7809	Write the stream to a file .
7810	Calibrate bandpass .
7811	Convert a coarse channel to the average of the data .
7812	r Determine the Mueller .
7813	Calibrate and calibrate motors .
7814	Calculate fracpols for a given string
7815	Write waterfall to file .
7816	Return the closest value in xarr
7817	Rebin a dataframe .
7818	Unpack a numpy array .
7819	Determine the difference between a given feedtype and a given feedtype .
7820	Plot Stokes diode diode Diode Diode Diode
7821	Plot the calibration data .
7822	Plot phase offsets .
7823	Open a file .
7824	Setup the selection range .
7825	Calculate the size of the selection .
7826	Calculate the shape of the selection .
7827	Calculate the start of the channels .
7828	Sets up frequency ranges .
7829	Populate the timestamps .
7830	Populate the frequency range .
7831	Calculate the number of coarse channels .
7832	Calculate the number of blobs .
7833	Return True if the file is dense .
7834	Read data from file .
7835	Read all data from the file .
7836	Read a row from the stream .
7837	Read data from the container .
7838	Update the header of the header
7839	Print information about the file .
7840	Write image to file .
7841	Write the header to HDF5 file .
7842	Write data to hdf5 file .
7843	Calculate the dimensions of the blob .
7844	Detect chunk dimensions .
7845	Grab the data
7846	Command line tool for creating spectra .
7847	Read first header .
7848	Find the number of data blocks in the file .
7849	Print the summary statistics .
7850	Plot the histogram .
7851	Generate filterbank header .
7852	Find the size of a file .
7853	Command line tool .
7854	Command line tool for creating HDF5 files .
7855	Calculate the fold calibration for a given data .
7856	Integrate a waterfall .
7857	Calculate the coefficients of the calflux
7858	Calculate the center frequency of the given frequency .
7859	Calculate the difference between two noise arrays .
7860	r Calculate diode spec .
7861	r Return the Tsys spec .
7862	Calculate the fluxes of a source .
7863	Return the length of the header .
7864	Check if file is a filterbank .
7865	Replace header with new_value .
7866	Generate sigproc header string .
7867	Convert an angle to a sigproc .
7868	Calculate the number of ints in a file .
7869	Return the frame as a dictionary .
7870	Create a sub - command parser .
7871	Create a parser for zonefile .
7872	Remove comments .
7873	Add default name .
7874	Parse a single line .
7875	Parse a list of lines .
7876	Parse a zone zone file .
7877	Quote field .
7878	Parse a schema string .
7879	Convert a list of classes to a python package .
7880	Generate a class source .
7881	Decorator to disable auto register .
7882	Convert a record to a dictionary .
7883	Load a dictionary from a JSON record .
7884	Deserialize a JSON record .
7885	Add a record to the database .
7886	Get a record by name .
7887	Return a dict representation of the variable .
7888	Class decorator for mixin classes .
7889	Create a new Record from a metaclass .
7890	Generate a schema dictionary .
7891	Returns the root schema of the root schema .
7892	A generator that yields lines from the input stream .
7893	Write output to output stream .
7894	push a dictionary to a key
7895	Query a search string .
7896	Get a raw search result .
7897	Recursively merges all entities with the given attributes .
7898	Create an Entity from a href .
7899	Given a QUOTE return the quoted quote .
7900	Escape a filter .
7901	Return the elementary Rotation matrix .
7902	Construct the covariance matrix for a cvec .
7903	Calculate the sky temperature of a sky .
7904	calculate the parallaxError
7905	Calculate the g magnitude error .
7906	Return the magnitude error of a given g .
7907	Make a matplotlib plot .
7908	Calculate the average number of transitions .
7909	Return the angular distance between two vectors .
7910	Transform cartesian coordinates to cartesian coordinates .
7911	Transform sky coordinates to spherical coordinates .
7912	Transform the covariance matrix into a matrix .
7913	Return the error scaling factor .
7914	Make a matplotlib plot .
7915	Make a matplotlib plot
7916	Apply a function to a list of functions .
7917	Decorator to make sure that a method is raised .
7918	Unquotes the given value .
7919	Return a collection of functions .
7920	Return a new Filter that matches the given function .
7921	Return a new Collection with the given results .
7922	Returns a collection of items .
7923	Returns a collection that drops items from the collection .
7924	Return a copy of this Collection .
7925	Perform a find operation .
7926	Return the path to the serach .
7927	Iterate over groups of a group .
7928	Yield all registered register options .
7929	Returns a string representation of an event .
7930	Build a minimal number of scheduled runs .
7931	Print a report of the output to stdout .
7932	Print a report to stdout .
7933	Prints the result of a report .
7934	Clean the code .
7935	Round x to base .
7936	Sort blocks by indices .
7937	Calculate access to cache access .
7938	Calculate the cycles for each iteration .
7939	Run the simulation .
7940	Perform IACA analysis .
7941	Strip whitespace and whitespace and comments .
7942	Strip unreferenced labels .
7943	Select the best possible block .
7944	Select the increment of a block
7945	select blocks from assembly file
7946	Inserts markers into a list .
7947	Perform IAU instrumentation .
7948	Entry point for CLI .
7949	Simulate a model .
7950	Generate space from start to end .
7951	Get the last modified datetime .
7952	Check if arguments are valid .
7953	Main entry point .
7954	Entry point for pickle .
7955	Build a symbol .
7956	Transform multidimensional decl .
7957	Transform multidim reference to 1d array .
7958	Recursively find the type of the given node .
7959	Force an iterable .
7960	Check that all datatypes are supported .
7961	Set a constant .
7962	Return the subsets of expr .
7963	Return a dictionary of variable sizes .
7964	Calculate relative offset .
7965	Remove duplicates .
7966	Calculate the total iteration length .
7967	Return a list of loop stacks
7968	Return an ordered list of indexes .
7969	Compile sympy accesses .
7970	Compiles the relative distances between the given arrays .
7971	Convert global iterator to indices .
7972	Returns an iterator for the global iterator .
7973	Convert indices to global iterator .
7974	Returns the maximum iterator over the global iterator .
7975	Print information about the kernel .
7976	Print information about the variables .
7977	Print information about constants .
7978	Print the kernel code .
7979	Convert math AST to NumPy array .
7980	Get the offsets for an AST .
7981	Get the name of the instance .
7982	Get the index type of the kernel .
7983	Build a list of constants .
7984	Return a list of ArrayDecl declarations
7985	Calculate the kernel loop n times .
7986	Build dictionary of array declarations .
7987	Return the inner loop of a loop .
7988	Builds a kernel kernel from array_dimensions .
7989	Build a set of dummy calls .
7990	Build a kernel function declaration .
7991	Build scalar declarations from kernel AST .
7992	Get kernel code from openMP .
7993	Build a kernel call .
7994	Return the main code .
7995	Analyzes the instrumented binary and assembler data .
7996	Build the executable .
7997	Convert a string to a sympy expression .
7998	Return the identifier of the file .
7999	Get the last modified datetime .
8000	Gets a CacheSimulator instance from the cache hierarchy .
8001	Determine the bandwidth of the kernel .
8002	Get the compiler information .
8003	Parse the event string into a tuple .
8004	Enforce any overlap between start_at .
8005	Return the path to the header .
8006	Aligns the iteration with the given iteration .
8007	Return the number of loads
8008	Return the number of hits .
8009	Return the number of misses for this machine .
8010	Return the number of caches .
8011	Return the number of evicts .
8012	Return dictionary of infos .
8013	Temporarily change the environment variable .
8014	Configure the argument group .
8015	Print a report to stdout .
8016	Parse the README file .
8017	Schedule a retry .
8018	Builds the item description
8019	Record a purchase .
8020	Get course content for a course
8021	Get the content of a given course .
8022	Updates the list of unenrolled users
8023	Send a course refund email .
8024	Send an offer assignment notification to offer assignment notification .
8025	Return logger configuration .
8026	Retry an order .
8027	Fulfill an existing order .
8028	Get Sailthru client configuration .
8029	Get a key from the cache .
8030	Store a key in the cache .
8031	Get the configuration of a variable .
8032	Get the filename of the override .
8033	Get a value by version
8034	Return the latest eplus version .
8035	Return a dictionary of file references .
8036	Populate the dev_data_from_json .
8037	Returns a list of external files .
8038	Set default values .
8039	Prepare extensible patterns .
8040	Returns the name of the extended field .
8041	Return a list of all possible references .
8042	Get the value of a given filter .
8043	Update value in index .
8044	Update database .
8045	Set default values .
8046	Add fields to the record .
8047	Remove a value from the list .
8048	Insert a value into the list .
8049	Delete the database .
8050	Register a record hook .
8051	Registers a link
8052	Return the regex pattern for the given intent .
8053	Returns the duration of the given interval .
8054	Serialize the event into a dictionary .
8055	Make a request to the given URL .
8056	Return a list of all available services .
8057	Try to create a directory .
8058	Configure Opencast service .
8059	Register a new CA .
8060	Set the recording state .
8061	Update the status of a recorded event .
8062	Update the status of the agent .
8063	Return the path to the configuration file .
8064	Update the configuration file .
8065	Check server status .
8066	Initialize logging .
8067	Home preview images .
8068	Serve an image
8069	Run all modules .
8070	Parse anicalicalical event .
8071	Get the service s schedule
8072	Control the control loop .
8073	Run the control loop .
8074	Make an error response .
8075	Make a JSON response .
8076	Return the current state of the service .
8077	List upcoming events .
8078	Get information about an event .
8079	Delete a recorded event .
8080	Modify an event .
8081	Get configuration parameters .
8082	Process an event .
8083	Start capturing recording .
8084	Render HTML to a fragment .
8085	Return a list of all available resources .
8086	Return a dictionary representation of the resource .
8087	Create a FragmentResource from a dict .
8088	Adds a new content to the document .
8089	Add a resource .
8090	Add a resource URL .
8091	Initialize the js_func .
8092	Convert a list of resources to HTML .
8093	Convert resource to HTML .
8094	Handle GET request .
8095	Render a response to a standalone HTML response .
8096	Renders a fragment to a standalone template .
8097	Calculate the probability distribution .
8098	Convert a list of values to an array .
8099	Lookup values from an error table .
8100	Computes posterior chromatogram hypotheses .
8101	Calculate the median error table .
8102	Compute summary error table .
8103	Compute error statistics .
8104	Find cutoff statistics .
8105	Compute XGBoost optimization .
8106	Infer peptido forms .
8107	Infer peptide peptides .
8108	Infer protein proteins .
8109	Subsample a subsample .
8110	Reduce an oww file .
8111	Backpropagate owr to outfile .
8112	Filter sqmass files .
8113	Returns a single group by its ID .
8114	Creates a new group .
8115	Deletes a group .
8116	Get members of a group .
8117	Update members of a group .
8118	Gets the effective group .
8119	Check if the given group is effective .
8120	Modify the documentation .
8121	Create a new dataset .
8122	Decrypt a key .
8123	Retrieve stdin and stdout .
8124	Retrieve the stdout of the terminal .
8125	Retrieve the stderr of the output .
8126	Retrieve debug information .
8127	Context manager for running stdin .
8128	Execute a command with stdout .
8129	Context manager for executing stderr .
8130	Context manager for debugging .
8131	Delete account .
8132	Empty a container .
8133	Decorator to handle stdout .
8134	Decorator to handle stderr calls .
8135	Log an error .
8136	Print help text .
8137	Print usage information .
8138	Print version information .
8139	Send a request to the server .
8140	Post an account .
8141	Delete an account .
8142	Create a container .
8143	Perform a HEAD request .
8144	Perform an HTTP GET request .
8145	Copy an object into a container .
8146	Perform a POST request .
8147	Resolve an option with the given options .
8148	Return a copy of the CLIContext .
8149	Write headers .
8150	Display authentication information .
8151	Generate a temporary URL .
8152	Encode a value .
8153	Retrieve a container .
8154	Get a single client .
8155	Encrypt data using AES .
8156	Decrypt a stream .
8157	Upload a directory structure .
8158	Create an account .
8159	Put a container into a container .
8160	Generate manifest body .
8161	Create a container .
8162	Get a key from a temp url .
8163	Print information about a transition .
8164	Print help for command .
8165	Check if buffer is empty .
8166	Encrypt a key .
8167	Get the status of a repository .
8168	Get pull request
8169	Get pull requests .
8170	Save all of the models .
8171	Return a list of all slide items .
8172	Render the HeroSliderItem .
8173	Acquire a read lock .
8174	Release all readers .
8175	Acquire the lock .
8176	Add a task to the registry .
8177	Remove a task from the registry .
8178	Get a task .
8179	List all tasks .
8180	Return the configuration as a dictionary .
8181	Create a task from a dictionary .
8182	Execute a PercevalJob .
8183	Initialize the archive manager .
8184	Run the job .
8185	Execute an archive .
8186	Create Elasticsearch index .
8187	Create a mapping .
8188	A json encoder .
8189	Writes items to writer .
8190	Add a task to the archive .
8191	Remove a task from the scheduler .
8192	Iterate over all queued items .
8193	Validate the arguments passed to the backend .
8194	Parse archive args .
8195	Publish a job .
8196	Schedules a job .
8197	Cancel a job .
8198	Run the job .
8199	Listen for messages .
8200	Schedule the listener .
8201	Schedules a task .
8202	Cancel a task .
8203	Handle a job .
8204	Handle a failed job .
8205	Build the arguments for the job .
8206	Get a secret from a secret
8207	Register the admin view .
8208	Register the admin view .
8209	Overrides Django s reverse action .
8210	Returns the name of the view .
8211	Get the version number .
8212	Resolve a key .
8213	Get an engine instance .
8214	Parse a path .
8215	Parse the database configuration from a URL .
8216	Parse a database URL .
8217	Register a user .
8218	List users .
8219	Create a new password .
8220	Add the field name to the view .
8221	Parse a boolean value .
8222	Parse an integer .
8223	Return the parser for the given type .
8224	Get settings from environment variables .
8225	Create a model from a model .
8226	Encode a YAML string .
8227	Create a field .
8228	Create a validator from a dictionary .
8229	Return the cartesian product of a list of parameters .
8230	Find unique points .
8231	Modify logging arguments .
8232	Decorator to specify a simple logging configuration .
8233	Create the directories for the given file .
8234	Return a list of strings .
8235	Rename a log file .
8236	Set the logger .
8237	Extract replacements from a trajectory .
8238	Print a progress bar .
8239	Check that the args and replace them with the given options .
8240	Convert a parser to a string .
8241	Find options in the parser .
8242	Find a dictionary from a dictionary .
8243	Check the log configuration .
8244	Process the parser .
8245	Convert a dictionary into a dictionary .
8246	Create handlers for logging .
8247	Finalize the configuration .
8248	Start stdout .
8249	Write data to the stream .
8250	Compare two results .
8251	Compare two parameters .
8252	Decorator to mark a function as run .
8253	Decorator to mark a function as deprecated .
8254	Ensure kwargs are mutually exclusive .
8255	Decorator for API methods .
8256	Retry a function .
8257	Decorator for prefix naming .
8258	Helper function to add parameters to the network .
8259	Run the network .
8260	Calculate the Euler scheme .
8261	Add parameters to the model .
8262	Calculate the difference between two values .
8263	Create a storage service .
8264	Create a storage class .
8265	Add parameters to the model .
8266	Rescales the rotational rotations .
8267	Compact an HDF5 file .
8268	Check if all parameters in a group is in a group .
8269	Build dictionary of model coefficients .
8270	Builds the pre - built model for the model .
8271	Connects the model to the graph .
8272	Creates the model for the model .
8273	Called by the pre - build method .
8274	Connects the network to the graph .
8275	Add parameters to the model .
8276	Compute the factor for a given spike .
8277	Compute the mean factor for each neuron .
8278	Compute the mean factor over all subruns .
8279	Add a traj to the network .
8280	Add monitors to the network .
8281	Create the folder for the analysis .
8282	Plot the results of a single gene .
8283	Print the graph of the signals .
8284	Analyze the state of the experiment .
8285	Get a single batch .
8286	Explicitly iterate over a single batch .
8287	Get the variables of this node .
8288	The node s function .
8289	Rename the name .
8290	Sets the details of the configuration
8291	Convert a node to a message .
8292	Remove a subtree from start_node .
8293	Delete a node .
8294	Remove a node or a branch from the tree .
8295	Remove a node along a branch .
8296	Translate a shortcut name .
8297	Add prefixes to the insertion node .
8298	Determine the type of start_leaf .
8299	Add a generic generic object .
8300	Add a leaf node to the tree .
8301	Create link .
8302	Checks that the names are valid .
8303	Creates an instance of the specified group .
8304	Creates or updates an instance of the given type .
8305	Set the details of the details tree .
8306	Iterate over the nodes of the given node .
8307	Make an iterator over the children of a node .
8308	Recursively walk through a node traversal .
8309	Fast search .
8310	Perform a single search .
8311	Perform a backward search .
8312	Children of the node .
8313	Add a group from storage .
8314	Add a leaf from storage .
8315	Return directory data .
8316	Generate debug tree .
8317	Get the parent of the tree
8318	Add a new group .
8319	Add a link to the group .
8320	Remove a link with the given name .
8321	Add a leaf to the group .
8322	Remove a child from the parent .
8323	Removes a child from the group .
8324	Check if an item exists in the trajectory .
8325	Get a value from the cache .
8326	Get the children of this node .
8327	Get the group s groups .
8328	Get the leaves of the tree .
8329	Get links .
8330	Store a child object .
8331	Stores the object .
8332	Load a single child .
8333	Load the object .
8334	Add a parameter group .
8335	Add a parameter .
8336	Add a result group .
8337	Shortcut for add_result .
8338	Add a derived parameter group .
8339	Add a derived parameter .
8340	Add a configuration group .
8341	Add a configuration to the network .
8342	Evaluate the fitness of a set .
8343	Add the variables for a commit .
8344	Make a git commit .
8345	Flatten a nested dictionary .
8346	Convert a dictionary into a nested dictionary .
8347	Display a progress bar .
8348	Get the argument specification for a function .
8349	Get matching kwargs .
8350	Formats a timestamp as a string .
8351	Convert a pypet to a TCP port .
8352	Ensure a directory exists .
8353	Reset the current time .
8354	Return the number of seconds in the given index .
8355	Convert self to a dictionary .
8356	Remove an annotation .
8357	Convert self to string .
8358	Make an ordinary result .
8359	Helper function to create a shared result .
8360	Create a shared data object .
8361	Perform an ACCESS request .
8362	Request the data node .
8363	Check if item is supported .
8364	Create a shared data object .
8365	Reimplementation of multiproc .
8366	Handle a lock .
8367	Send a shutdown signal
8368	Finalize the connection .
8369	Start the client .
8370	Send a REP request to the server .
8371	Acquire the server .
8372	Listen for incoming requests .
8373	Put data into the server .
8374	Detect a fork .
8375	Handle data .
8376	Run the pipeline .
8377	Receive data from the queue .
8378	Receive data from the socket .
8379	Store a new lock .
8380	Store a message .
8381	Store references in Pypet .
8382	Decorator to parse the configuration data .
8383	Parse section .
8384	Return a dictionary of configuration values .
8385	Interpret kwargs .
8386	Add parameters from a file .
8387	Convert a binary rule to a NumPy array .
8388	Make an initial state .
8389	Plot a single cell .
8390	Perform cellular automaton .
8391	Main function of the automaton .
8392	Send a signal to the server .
8393	Return the view group if any .
8394	Loads and parses a message .
8395	Store a single message .
8396	Load items from iterable .
8397	Check that all properties in the config file are present .
8398	Store items in iterable .
8399	Closes the rvc file .
8400	Extracts the file information .
8401	Backup a file .
8402	Reads a row from a file .
8403	Prepare the merge of all nodes .
8404	Load meta data from a traj
8405	Load a sub - branch .
8406	Perform a trajectory check on the given version .
8407	Create a dictionary of run information .
8408	Load all parameters from a traj
8409	Stores all explorations .
8410	Prepare the overview tables for the given tables .
8411	Stores a trajectory .
8412	Store a sub - branch in the tree .
8413	Create a leaf tree .
8414	Load nodes from a tree .
8415	Store nodes in a tree .
8416	Recursively iterate over all store parameters .
8417	Creates a table and returns it .
8418	Get a single node by name .
8419	Set all set attributes to a dictionary
8420	Recalculate native type
8421	Add a row to an HDF5 storage service .
8422	Called when a row is inserted into the table .
8423	Extracts all insert dictionaries .
8424	Truncate a string to the end of the given length .
8425	Creates a new HDF5 group if it does not exist .
8426	Creates a new HDF5 group .
8427	Store annotations in HDF5 storage .
8428	Load annotations from an HDF5StorageService .
8429	Stores the specified group in the filesystem .
8430	Process a single load group .
8431	Load all nodes from a traj file .
8432	Extract missing flags .
8433	Add meta information to the meta table .
8434	Add metadata table .
8435	Store data from a dictionary .
8436	Store parameter and store result .
8437	Write shared arrays to shared memory .
8438	Writes a shared shared table to the database .
8439	Write a dictionary to a PyTable .
8440	Write data to pandas dataframe
8441	Writes the data into this object .
8442	Write data to a PPM5 file .
8443	Delete a link .
8444	Removes all delete parameters from the instance .
8445	Write the data into a pytable .
8446	Create a pytables table description .
8447	Return the table column of a given column .
8448	Get the maximum length of a list of strings .
8449	Parses a dictionary into a dictionary .
8450	Reads an ObjectTable from a leaf table .
8451	Read shared data from a shared node .
8452	Read a table from the database .
8453	Read an array from the database .
8454	Load a trajectory .
8455	Make a set name .
8456	Set property values .
8457	Add dynamic imports .
8458	Set the value of the run .
8459	Iterate over all runs .
8460	Shrink the trajectory .
8461	Set a configuration parameter .
8462	Set a preset parameter .
8463	Prepare the experiment .
8464	Get a list of all run values from a run .
8465	Check if a run is completed .
8466	Remove expanded parameters from disk .
8467	Copies a trajectory from a node .
8468	Explicitly iterate over the build_dict .
8469	Update run information .
8470	Add information about a single run .
8471	Lock all parameters .
8472	Lock all derived parameters .
8473	Finalize .
8474	Loads the model .
8475	Creates a dynamic load .
8476	Backup the current object .
8477	Make a list of wildcard wildcards .
8478	Merge two trajectories .
8479	Merge run information from another trajectory .
8480	Rename a full_trajectory .
8481	Merge parameters from another trajectory into another .
8482	Merge two paths .
8483	Merge config data into another .
8484	Merge two dicts .
8485	Merge results from another trajectory .
8486	Migrate this object .
8487	Stores the object .
8488	Restore default values .
8489	Set the parameters to the given parameter .
8490	Make a single run .
8491	Get list of run names .
8492	Get run information .
8493	Return the index of the parameters that match the predicate .
8494	Start a new run .
8495	Finalize the run .
8496	Set the start of the run .
8497	Set the run information .
8498	Creates an instance of an instance .
8499	Convert a dictionary to a dictionary
8500	Finalize run information .
8501	Get the configuration dictionary .
8502	Get a dictionary of results .
8503	Store the items in the trajectory .
8504	Loads items from disk .
8505	Remove items from the storage .
8506	Delete links from the iterator .
8507	Remove a node from the tree .
8508	Delete items from the storage .
8509	Handle a single single run .
8510	Handle frozen pooling .
8511	Configure kwargs
8512	Configure frozen pool
8513	Process a single single run .
8514	Configure the scop .
8515	Runs a single - run command .
8516	Configure logging .
8517	Configure the niceness .
8518	Handle SIGINT .
8519	Single run function .
8520	Configure the logging handler .
8521	Load a class from a full string .
8522	Create a class based on dynamic_imports .
8523	Get the length of the parameter .
8524	Return a string representation of the evaluation .
8525	Compare two values .
8526	Get the range of this parameter .
8527	Iterate over the parameter range .
8528	Expand the parameter list .
8529	Verify that each entry is valid .
8530	Store the data in the dictionary .
8531	Load parameter from disk .
8532	Initialize the object .
8533	Compare two values .
8534	Check if data is supported by Sphinx .
8535	Serialize a matrix .
8536	Builds a list of parameter names .
8537	Re - reconstructs a matrix .
8538	Load data from a dictionary .
8539	Store this object into a dictionary .
8540	Load parameter data from disk .
8541	Translate key to value .
8542	Convert the value to a string .
8543	Convert the object to a dictionary .
8544	Set positional value .
8545	Get a list of values .
8546	Set the result of a single item .
8547	Check if item is supported .
8548	Store self . _data .
8549	Load data from a dictionary .
8550	Set a single result .
8551	Store data in a dictionary .
8552	Load data from a dictionary .
8553	Merge all files in folder
8554	Upload a file
8555	Download a file
8556	Create a session .
8557	Merge multiple directories .
8558	Start the schemas .
8559	Multiply two vectors .
8560	Run the simulation .
8561	Process the results of a neuron .
8562	Add parameters to the database .
8563	Add an exploration of the given IAU model .
8564	Execute pre_run_run .
8565	Execute a network run .
8566	Extract all sub - runs from a pre - run .
8567	Execute a network run .
8568	Add Parameters to the network .
8569	Initialize the pre - run simulation .
8570	Run the network .
8571	Runs the network .
8572	Generate a filename .
8573	Return the next element in the chain .
8574	Merge all files in a folder .
8575	Handle a SIGINT .
8576	Read configuration from a file .
8577	Request a PIN pin .
8578	Request tokens from ecobee .
8579	Refresh access token .
8580	Get all thermostatats .
8581	Write tokens to file
8582	Set HVAC mode .
8583	Set fan minimum fan speed .
8584	Set the hover temperature .
8585	Set the climate condition .
8586	Deletes a vacation .
8587	Resume a program .
8588	Send a message to the thermostat .
8589	Set humidity .
8590	Generate a random delay .
8591	Generate a timeout .
8592	Generate a timeout for a lease .
8593	Generate a new renewing time .
8594	A dictionary representation of the object .
8595	Reset attributes .
8596	Get the timeout for the given function .
8597	Set a timeout .
8598	Send discovery .
8599	Select an offer .
8600	Send a request to the server .
8601	Sets timeouts .
8602	Process incoming packets .
8603	Process a UDP packet .
8604	Initialize the state .
8605	Set the state of the network .
8606	Set the lease .
8607	Set the current state .
8608	End the lease .
8609	Called when an error occurs .
8610	This function is called when a selection is received .
8611	Check for maximum number of requests .
8612	Check if a request has expired .
8613	Set the maximum number of requests .
8614	Handle an offer .
8615	Handle ACK request .
8616	Handle NAK request .
8617	Receive ACK .
8618	Receive NAK .
8619	Receive ACK .
8620	Handle a NAK packet .
8621	Called when the lease expires .
8622	Set the value of the query .
8623	Add a new value to this query .
8624	Remove a record from the database .
8625	Get server status .
8626	Create the output of the program .
8627	Main entry point .
8628	Validate a message .
8629	Read TDSMS file .
8630	Add a deformation transformation .
8631	Convert a tdms file to a FCS file .
8632	Determine whether two files are equal .
8633	Create a new patch .
8634	Delete the next patch .
8635	Delete a patch
8636	Check if file is in the given patch .
8637	Backup a file
8638	Add a file to the repository .
8639	Run a Quilt command .
8640	Create the directory .
8641	Copy this node to another directory .
8642	Link a file
8643	Copy file to destination .
8644	Return the directory of the file .
8645	Backup a file .
8646	Refresh the database .
8647	Unapply a patch
8648	Remove the top patch from the database .
8649	Unapply all registered patches
8650	Apply a patch to the database .
8651	Apply the next patch to the series .
8652	Apply all patches to the database .
8653	Read the patch file .
8654	Save patch to file .
8655	Add a patch
8656	Insert patches into the stack .
8657	Add patches .
8658	Remove a patch
8659	Return the patches after a patch .
8660	Return the patches before a patch .
8661	Return a list of patches that match the given patch .
8662	Replace old patch .
8663	Create the version file .
8664	Check the version of the database version .
8665	Add arguments to the parser .
8666	Add an argument to the parser .
8667	Add subparsers to the parser .
8668	Set self . subparsers .
8669	Add subparsers to the parser .
8670	Verify that filename is in a quilt .
8671	Check if file is in the database
8672	Reverts a file to the database .
8673	Import a patch .
8674	Import patches .
8675	Create a new way .
8676	Return an iterator over the nodes in the graph .
8677	Create a node .
8678	Build a route .
8679	Create a route short name .
8680	Get the identifier for a relation
8681	Extract nodes from the public transport .
8682	Create a relationship
8683	Create dummy data .
8684	Patch agencies .
8685	Create dummy trips for a trip .
8686	Write all the files in a ZIP file .
8687	Write unzipped files to destination .
8688	Build an agency .
8689	Extract stops from a node .
8690	Build a shape from a relation .
8691	Return the version supported by this instruction .
8692	Send APU to device .
8693	Authenticate a U2F device .
8694	Register a new portal .
8695	Authenticate a device
8696	Register a U2F device .
8697	Convert a dictionary to a string .
8698	Wrap a function as a function .
8699	Wrap a class decorator .
8700	Check if filepath matches a filepath .
8701	Extract the email address from an email .
8702	Get an entry from an entry .
8703	Convert markdown text to reST .
8704	Serve a local filesystem .
8705	Records an exception in the stack .
8706	Convert a URL to an image .
8707	Convert a string to an Image object .
8708	Decorator to mark an image .
8709	Check if an image is bigger than size .
8710	Raise an ImageSizeError if the given size is big enough .
8711	Raise an ImageSizeError if the given image is big enough .
8712	Parses a category and returns it .
8713	Parse the value of a field .
8714	Iterate over the items in the tree .
8715	Save an error to the log file .
8716	Parse the fields from the source into the database .
8717	Parse an item .
8718	Get the instance from the database .
8719	Save an item .
8720	Download a file from a URL .
8721	Load the source file .
8722	Get all the items in the CSV file .
8723	Set the network access settings .
8724	Run a docker command .
8725	Add files to the docker .
8726	Add a file and rename it .
8727	Get all enrollments for a given course .
8728	Get all enrollments for a particular course .
8729	Get all enrollments for a section
8730	Get all enrollments for a particular section .
8731	Get enrollments for a given regid .
8732	Add a new user to a course .
8733	Get all roles in an account .
8734	Get all roles in an account .
8735	Return a list of courses in an account
8736	Get a single role .
8737	Retrieves a role by its SIS ID .
8738	Get a specific course .
8739	Returns a course by sis_id .
8740	Returns a list of courses in the account .
8741	Get all courses in SIS .
8742	Get all published courses in an account .
8743	Get all published courses in SIS account .
8744	Get courses for a given regid .
8745	Creates a new course .
8746	Updates an SIS course .
8747	Get activity by an account .
8748	Get grades by an account .
8749	Returns the statistics for an account .
8750	Returns an Activity by its SIS course id .
8751	Gets all assignments associated with a SIS course .
8752	Gets the student summaries associated with a SIS course .
8753	Gets the student activity for the given SIS user .
8754	Gets the student messages for the given SIS user .
8755	Get all external tools in an account
8756	Get all external tools in a course .
8757	Create an external tool .
8758	Updates an external tool .
8759	Delete an external tool .
8760	Ensure all required parameters are set
8761	Get a specific user .
8762	Get a list of users for a course .
8763	Get users for a particular SIS course .
8764	Creates a user .
8765	Get a user s logins .
8766	Updates a user s login .
8767	Extract the next page from the response .
8768	Make a GET request to the API .
8769	Get a paged resource .
8770	Get a resource .
8771	Perform a PUT request .
8772	Perform a POST request .
8773	Delete a resource .
8774	Get a list of admins for an account .
8775	Creates an admin .
8776	Create an admin by SIS account .
8777	Deletes an admin .
8778	Delete an admin .
8779	Creates a new grading standard .
8780	Get a specific section
8781	Get a section by its SIS ID .
8782	Returns a list of all sections in a course .
8783	Get all sections in a course .
8784	Get a list of sections in a course .
8785	Returns a list of sections with the given course .
8786	Creates a new section .
8787	Updates a section
8788	Get a list of Quizzes .
8789	Get a specific account .
8790	Get a list of sub - accounts for a specific account .
8791	Updates an account .
8792	Updates the SIS account .
8793	Get authentication settings .
8794	Updates an auth settings .
8795	Get a term by its sis term
8796	Import a CSV file .
8797	Import a directory .
8798	Get the status of a SIS import .
8799	Build the archive .
8800	Get all assignments for a given course .
8801	Updates an Assignment .
8802	Returns a list of all reports for a given account .
8803	Returns a list of reports for a given type .
8804	Create a report .
8805	Create a new course provisioning report
8806	Create an SIS export report .
8807	Create a report for unused courses .
8808	Get report data .
8809	Get the status of a report .
8810	Deletes a report .
8811	Move detections in a label .
8812	Flip detections from label w .
8813	Get a dictionary from an object .
8814	Get a configuration dictionary .
8815	Returns the empty value .
8816	Parse command line arguments .
8817	Create metrics from a list of metric configs .
8818	Setup logging .
8819	Configure the registry .
8820	Create metrics from configs .
8821	Get a metric .
8822	Handle the home page .
8823	Handle metrics .
8824	Query Wolfram API .
8825	Fix HTTPMessage .
8826	Make a request to the WolframAlpha API .
8827	Returns a tuple of the information about this pod .
8828	Return all results .
8829	Encode request .
8830	Make a request to the API .
8831	Perform an HTTP GET request .
8832	HTTP DELETE operation .
8833	Perform a PUT request .
8834	Perform a POST request .
8835	Process a disambiguation query .
8836	Group sentences by length .
8837	Disambiguate a PDF .
8838	Disambiguate a query .
8839	Segments a text .
8840	Get a language .
8841	Get a single concept
8842	Fit the model to the ensemble .
8843	Return the accuracy of an ensemble .
8844	Fit the MDR grid to a classifier cell .
8845	Fit the model to the model .
8846	Return the accuracy of the MDR model .
8847	Fit the CMDR model .
8848	Transform a list of features to a new one .
8849	Return the score of the continuous features .
8850	Calculate the MDR prediction for X .
8851	Generate n - way models .
8852	Plots a matplotlib model for the given model instance .
8853	Return a dictionary of configuration values .
8854	Get a config value .
8855	Creates a vector of members .
8856	Creates a vector from list of members .
8857	Evaluate a file .
8858	Evaluate the given stream .
8859	Evaluate a string s .
8860	Bootstrap replicisp module .
8861	Runs Sphinx .
8862	Decorator for registering a function .
8863	Add a new method .
8864	Add a method .
8865	Get a method from the cache .
8866	Remove a method from a map .
8867	Removes a method from the MultiFunction .
8868	Determine if v is a macro .
8869	Return the location of the given form .
8870	Decorator to wrap a function with loc .
8871	Raise an exception if the node does not exist .
8872	Raises an AssertionError if the node is a tail .
8873	Resolve a bare symbol .
8874	Resolve a symbol .
8875	Parse AST form .
8876	True if the variable is shadowed .
8877	Store a new symbol .
8878	Map a list of entries to a list of strings .
8879	Return a string representation of the given iterable .
8880	Return a string representation of an object .
8881	Fallback function .
8882	Fixes missing locations .
8883	Compile and execute the form .
8884	Increment the AST for the given module .
8885	Bootstrap module .
8886	Compile a bytecode into a bytecode .
8887	Convert a sequence into a sequence .
8888	Convert a string into a string .
8889	Removes a string from a string .
8890	Create a Fraction instance .
8891	Create a logging handler .
8892	Create a new MapDict .
8893	Partition a collection of elements in a collection .
8894	Decorator to convert a function to a lmap .
8895	Read a namespace .
8896	Reads a collection of tokens .
8897	Read a list .
8898	Read a vector .
8899	Read set .
8900	Read a map .
8901	Read a string .
8902	Read a symbol .
8903	Read keyword .
8904	Read meta data .
8905	Read a function definition .
8906	Return a list of the comments .
8907	Expand a syntax quote .
8908	Process syntax quotes .
8909	Read syntax comments .
8910	Read unquoted form .
8911	Read a DER form .
8912	Read a single character .
8913	Read a regex pattern .
8914	Return a Lisp reader .
8915	Reads the next comment .
8916	Return the next read .
8917	Read a stream from a stream .
8918	Read a string from a string .
8919	Read a file .
8920	Update the location of the current location .
8921	Push back to the index .
8922	Returns the next token .
8923	Generate a bytecode .
8924	Get a bytecode from the basename cache .
8925	Return the path to the lpyc file .
8926	Installs all imported imports .
8927	Find a prototype spec in the cache .
8928	Execute a cached module in the cache .
8929	Execute a Basilisp module .
8930	Execute the given module .
8931	Create a symbol .
8932	Complete a set of keywords .
8933	Get a keyword from a cache .
8934	Return a Keyword for the given namespace .
8935	Chain PyASTStream .
8936	Load an AST node .
8937	Decorator for simple AST generator .
8938	Generate a list of AST nodes .
8939	Generate a PyAST AST .
8940	Decorator for creating PyAST AST nodes .
8941	Decorator to add a function to an AST node .
8942	Check if v is dynamic
8943	Return True if v is redef
8944	Convert an expression into an AST .
8945	Return an expression as an expression .
8946	Determine if a warning should be used .
8947	Convert a node to an AST .
8948	Return the name of a string .
8949	Convert fn args to AST .
8950	Convert a single node to an AST node .
8951	Convert a function to an AST node .
8952	Convert a function to an AST node .
8953	Convert a body into an AST node .
8954	Convert a node to an AST .
8955	Convert a function to an AST node .
8956	Converts a quote node to a PyAST AST node .
8957	Loop over recur .
8958	Create a PyAST AST node .
8959	Generate a PyAST AST node .
8960	Convert a function to an AST .
8961	Try to convert an AST node into a Python AST .
8962	Convert a Local AST node to an AST .
8963	Convert a variable to an AST .
8964	Convert a variable to an AST node .
8965	Convert an Interop node into an AST .
8966	Convert a Java AST node to an AST .
8967	Convert a host form to a pyast .
8968	Convert constants to PyAST AST .
8969	Convert a collection to a PyAST AST .
8970	Generate a PyAST AST node .
8971	Yield all imported modules .
8972	Return an import from a module import .
8973	Create an AST node .
8974	Return a set of members .
8975	Return a set with a set of members .
8976	visit an exception node by returning a fresh instance of it
8977	Visitor for Expr node .
8978	visit a FunctionDef node by returning a fresh instance of it
8979	Return a new AST node .
8980	visit a Try node by returning a fresh instance of it
8981	Create a new module .
8982	Returns the first element of an object or None if it is not None .
8983	Return the remainder of an object .
8984	Return the first element in the list
8985	Return the next element in the sequence i .
8986	Convert a sequence or seq into an equivalent object .
8987	Convert an object to a seq .
8988	Concatenate sequences .
8989	Associates an Associative interface .
8990	Convert a collection into a collection interface .
8991	Wrap a function as a partial function .
8992	Dereferences an object .
8993	Compare two dictionaries .
8994	Divide x and y .
8995	Sort a sequence .
8996	Returns True if k is a k with k k
8997	Retrieve an attribute from a k .
8998	Convert an object to lisp .
8999	Convert an object to a Python object .
9000	Return a string representation of an object .
9001	Return the list of arguments for the given function .
9002	Decorator for trampoline functions .
9003	Decorator to set a function s attributes .
9004	Decorator that wraps a function with the given meta .
9005	Decorator to register a function as a lambda function .
9006	Resolve an alias .
9007	Resolve an alias .
9008	Add a generated python variable to the graph .
9009	Create a dynamic namespace .
9010	Create a new variable .
9011	Internally create a variable .
9012	Find a namespace in the namespace .
9013	Find a namespace in the namespace .
9014	Finds a valid symbolic symbol .
9015	Add a default import import .
9016	Add alias .
9017	Create a new namespace .
9018	In - place mappings .
9019	Return the reference to the given sym .
9020	Add an import to a module .
9021	Get the import for a given sym .
9022	Add a reference to a variable .
9023	Return the reference to a reference .
9024	Records all references in other namespace .
9025	Refers a namespace .
9026	Get or create a namespace .
9027	Get or create a namespace .
9028	Get a namespace by name .
9029	Remove a namespace from the namespace .
9030	Returns True if text is a completion match .
9031	Iterate over all aliases matching the given prefix .
9032	Iterate over all imported imports and aliases .
9033	Complete interns .
9034	Returns a list of references matching the given value .
9035	Completes an alias .
9036	The tuple of the arguments .
9037	Create a list of members .
9038	Return a list of members .
9039	Return a copy of the given style .
9040	Decrypt a JWT .
9041	Encrypt a JWT .
9042	Delete a cache from the cache
9043	Convert the selector to a Python object .
9044	Close the file descriptor .
9045	Parse a FiQL string .
9046	Write ndb model to file .
9047	Decode an object to a dictionary .
9048	Decode a date into a datetime object .
9049	Decode a JSON value .
9050	Default JSON encoding .
9051	Validate the version string .
9052	Generate changelog .
9053	Return a list of strongly connected components .
9054	Return a strongly connected topological sort .
9055	Set the parent of this Expression .
9056	Get the parent of this expression .
9057	Adds an operator .
9058	Add an element .
9059	Add an operator .
9060	Add an operator .
9061	Log a logger .
9062	Parse received messages .
9063	Convert a list of tuples into a dictionary .
9064	Return a list of messages that match the given cmd .
9065	Prepare a message for sending .
9066	Flush incoming messages .
9067	Enable a slide .
9068	Saves a template .
9069	Load a template from a file .
9070	Get information about a stage .
9071	Parse an inc file .
9072	Locate the package s package . json file .
9073	Parse a package json file .
9074	Raise an HTTPError with a JSON error
9075	Validate the response .
9076	Given a wave vector and a set of indep vectors return a list of indep vectors .
9077	Interpolate the given dep_vector .
9078	Determine whether two independent variables overlap .
9079	Verify compatibility between two wavelengths .
9080	Load the systemjs manifest
9081	Trace the pkl . pkl file .
9082	Run the trace_trace .
9083	Shortcut to shorten a URL .
9084	Expand a short URL .
9085	Returns statistics about a given short URL .
9086	Returns the stats for a given filter .
9087	Return statistics about the current database .
9088	Run pypkg command
9089	Echo a terminal command .
9090	Log a message .
9091	Decorator to cache a method .
9092	Yield chunks from an iterable .
9093	Decorator for chunks of a function .
9094	Flatten an iterable .
9095	Run a SIGINT signal .
9096	Print table .
9097	Creates a dummy dummy .
9098	Create a new instance from a human - readable string .
9099	Client .
9100	Run a waveform module .
9101	Return a list of requirements .
9102	Create a common entry for a plist .
9103	Make a multi entry from a list of Python versions .
9104	Convert an item specification to words .
9105	Chunk noise .
9106	Parse a chunk of data .
9107	Write touchstone data .
9108	Convert a waveform to a bounding waveform .
9109	Build a string representation of a unit .
9110	Return a copy of the operation .
9111	Calculate the running area .
9112	Validate the minimum and indep_min .
9113	Compute the acos of a wave .
9114	Return the amplitude of a wave .
9115	Return the inverse of the inverse wave .
9116	Return the angle of a waveform .
9117	Compute the average waveform .
9118	Convert a wave function to a Gaussian .
9119	Return the derivative of a waveform .
9120	Compute the Fourier transform .
9121	Compute the FFT of a wave .
9122	Compute the Fourier transform .
9123	Calculate the real Fourier transform .
9124	Create an IFTDB object from a waveform .
9125	Compute the inverse Fourier transform .
9126	Compute the IFT wave function .
9127	r Compute the inverse phase of a wave .
9128	Compute the real - wave function .
9129	Return the integral of a waveform .
9130	Calculate the delay of a group
9131	Logarithm of wave .
9132	Return the coverage of a waveform .
9133	r Compute the integrated waveform .
9134	Return the maximum waveform .
9135	r Compute the minimum waveform .
9136	Return the phase of the wave .
9137	Round a wave .
9138	Return the square root of the wave .
9139	Create a sub - waveform .
9140	Return a complex wave .
9141	Convert complex wave to float .
9142	Convert a wave to an integer .
9143	Return the value of a waveform .
9144	Searches for a directory
9145	Return a short description from a long description .
9146	Build an expression .
9147	Return the next item in the list .
9148	Returns a list of all functions found in expr .
9149	Return a pair of delimiters .
9150	Parse an expression .
9151	Remove duplicate delimiters from an expression .
9152	Split a string into a list of tuples .
9153	Convert a number to a NumPy notation .
9154	Convert a number to a scientific notation .
9155	Convert a number to a string .
9156	Convert float to float .
9157	Calculate peng ratio .
9158	Equivalent to peng .
9159	Creates a power power .
9160	Calculate Peng suffix .
9161	Removes extra delimiter elements from an expression .
9162	Convert a number to scientific notation .
9163	Convert a number to scientific notation .
9164	Find the sourcemap comment for a file .
9165	Determines if the application needs an extension .
9166	Bundle the application
9167	Runs the given app .
9168	Returns True if the given dep_tree is a list of hashes .
9169	Format a hex dump .
9170	Parse a docstring .
9171	Return a list of valid identifiers .
9172	Import an object from a module .
9173	Split a line into parts .
9174	Check if the initial context is empty .
9175	Return help text for builtin functions .
9176	Find a function by name .
9177	List all functions in the given context .
9178	Check if arg is a flag .
9179	Process arguments passed to func .
9180	Extract the value of a keyword argument .
9181	Invoke one or more functions .
9182	Invoke the given line .
9183	Invoke a string .
9184	Parse a parameter definition .
9185	Parse a return statement .
9186	Classify a section .
9187	Classify a line .
9188	Join paragraphs into a list of paragraphs .
9189	Wrap the main docstring to a file .
9190	Convert value to type .
9191	Convert a binary type to a binary type .
9192	Returns the size of the given type .
9193	Return the value of the given type .
9194	Validate a type .
9195	Check if the given type is known .
9196	Split a type into its base type .
9197	Instantiates the given type .
9198	Get the type of the given type .
9199	Return True if the given format is known to the given format .
9200	Injects a type into the tree .
9201	Loads a module from a module .
9202	Check if the spec is filled with the given arguments .
9203	Add a parameter to the annotation .
9204	Create a return value .
9205	Custom return info .
9206	Match a short - name .
9207	Returns the type of the given parameter .
9208	Return the signature as a string .
9209	Formats the return value .
9210	Convert positional argument .
9211	Check spec for validity .
9212	Convert an argument to the given type .
9213	Format this parameter .
9214	Return a dictionary representation of the message .
9215	Execute a function and validate it .
9216	Parse a list of validators .
9217	Find all instances of a given container .
9218	Extract the context from a module .
9219	Return the help of a function .
9220	Decorator to add a parameter to a function .
9221	Decorator to annotate a function .
9222	Decorator to annotate a typed return value .
9223	Decorator to annotate a class .
9224	Mark a function as annotated .
9225	Mark a function as annotated .
9226	Shortcut for short description
9227	Load all Django modules .
9228	Install crontab .
9229	Print all tasks in the registry .
9230	Uninstall all comments .
9231	Create a schema .
9232	Load project config files .
9233	Save project config to file .
9234	Define a singleton instance
9235	Get all dependent projects .
9236	Decorator for post - processing .
9237	Initialize the project .
9238	Set a new set item .
9239	Set a new setattr .
9240	Create a new object from an iterable .
9241	Creates a new setter with a new value .
9242	Add a set of values to the set .
9243	Modify a function func .
9244	Takes a tuple of n arguments and returns a tuple of arguments and a tuple of values .
9245	Decorator to log a function f .
9246	Apply a function to the function
9247	Wrapper for the view .
9248	Create a list of Fold objects .
9249	Apply a function over a setter .
9250	Set the given value .
9251	Iterate over the given iterable .
9252	Returns the kind of the lens .
9253	Run the game .
9254	Return the next iteration .
9255	handle input
9256	Move robots to player .
9257	End the game .
9258	Enter player .
9259	Play a random game .
9260	Moves the position of the game .
9261	Returns the winner of the game .
9262	Return a list of possible potential positions for this board .
9263	Process an item .
9264	Open a spider .
9265	Upload a chunk to S3 .
9266	Create a file object .
9267	Get the state of an account .
9268	Get an asset state .
9269	Get a single block .
9270	Get the block hash .
9271	Get the tx fee for a block index .
9272	Get the contract state .
9273	Get a raw transaction .
9274	Get the storage for a key .
9275	Get the value of a transaction .
9276	Invoke a script .
9277	Invoke a function .
9278	Invoke a script .
9279	Send a raw transaction .
9280	Validate an address .
9281	Make a JSON - RPC request .
9282	Check if a string is a hash .
9283	Check if a string is a hash160
9284	Encode the contract parameters .
9285	Decode an InvocationResult .
9286	Decorator to mark the first keyword argument as first argument .
9287	Apply an instruction to an instruction .
9288	Apply datetime to datetime .
9289	Save the document to a file .
9290	Render the barcode .
9291	Calculate the checksum .
9292	Render the given code .
9293	Connect to KVS .
9294	Main entrypoint .
9295	Downloads the specified path to the local file .
9296	Upload a file to S3 .
9297	Downsync a section
9298	Show the diff between the settings .
9299	Parse an environment variable .
9300	Set username and password .
9301	Set the API key .
9302	Get json content from a folder .
9303	Return a list of schema names .
9304	Retrieve the schema from disk
9305	Returns a RefResolver from the schema .
9306	Validate an object .
9307	Return a list of valid examples .
9308	Return a list of invalid examples .
9309	Returns the url for the authorization user .
9310	Process auth request .
9311	Perform an authentication token .
9312	Returns the user_id for this request .
9313	List files in a folder .
9314	Create a directory .
9315	Add a new comment .
9316	Decode an object .
9317	Sets the drop target for the given object .
9318	Start drag operation .
9319	Set default tlw .
9320	Inspect the given object .
9321	Create a shell
9322	Migrate the font
9323	Load a page .
9324	Retrieves a parameter from a tag .
9325	Send a message to the user .
9326	Creates a GUI tip manager .
9327	Press down window .
9328	Perform a mouse move .
9329	Resize the screen .
9330	Press key press event .
9331	Delete selected objects
9332	Duplicate selected objects
9333	Refresh the image .
9334	Calculates the best position of a widget .
9335	Retrieves the pydata object .
9336	Sets a PyData item .
9337	Searches for pydata .
9338	Deletes the specified item .
9339	Deletes all items .
9340	Clear all tables .
9341	Set selection .
9342	Returns the string selection
9343	Set client data .
9344	Append a_string to this object .
9345	Represent the given object .
9346	Get a gui object
9347	Returns a copy of this object .
9348	Adds a child to the sizer .
9349	Set the parent
9350	Tile the background .
9351	Erase background .
9352	Handle paint event .
9353	Search for modules in rootpath .
9354	Return a sorted list of column headers .
9355	Reset the view .
9356	Updates the values in the grid .
9357	Updates the column attributes .
9358	Sorts a column .
9359	Clear the grid .
9360	Create a combo box .
9361	Begins editing .
9362	Edit the selection .
9363	Checks if the given key is accepted .
9364	handle starting key
9365	Decorator to register a type handler .
9366	Enable or disable the menu .
9367	Determines if the menu is enabled .
9368	Enable or disable a menu .
9369	Returns True if this menu is enabled .
9370	Remove an item from a menu .
9371	Submit data to the container .
9372	Sets the object s attribute .
9373	returns an autosummary table
9374	Returns a function that can be used to construct a document .
9375	Makes a signature .
9376	Import an object by name .
9377	Return the role for the given object .
9378	Display alert message .
9379	Prompt the user for a text entry .
9380	Select a font .
9381	Select a color dialog .
9382	Choose a directory .
9383	Find a dialog .
9384	Sets whether the item has any children .
9385	Set the icon .
9386	Show the window .
9387	Parse a file .
9388	Save rsrc to file .
9389	build a window
9390	Build the GUI object .
9391	Connect to a component
9392	Convert a property name to a PYTHONCARD .
9393	Sets the data object .
9394	Find autosummary in docstring .
9395	Load an object .
9396	Inspects the given object
9397	Activate an item .
9398	Update the tree with the given name .
9399	Show context menu .
9400	Convert the image to a native representation .
9401	Decorator to register an expression filter .
9402	Decorator to register a node filter .
9403	Assert that the current path is the current path .
9404	Fail if path is not present .
9405	Check if the given path exists .
9406	Checks if the current path exists .
9407	Select option .
9408	Apply a filter to the expression .
9409	Get a browser .
9410	Return the xpath of the expression .
9411	Returns True if the given node matches the given text .
9412	Switch to the current frame .
9413	Accept an alert .
9414	Accept a confirm message .
9415	Sends a confirm message .
9416	Accept a prompt .
9417	Removes a prompt .
9418	Save the page to a file .
9419	Save the screenshot .
9420	Raise server error if server fails .
9421	Check if the given value matches the filter .
9422	Check whether the selector has checked .
9423	Check whether the given locator has been checked .
9424	Returns True if locator has not checked
9425	Return True if locator has not checked
9426	Raises an AssertionError if text is not valid .
9427	Fail if there is no text .
9428	Assert that title matches the given title .
9429	Fail if the given title matches the given title .
9430	Check if the given title has the given title .
9431	Assert that title has no title .
9432	Find all matches .
9433	Searches for first occurrence .
9434	Return the inner content of a node .
9435	Return the inner text of a node .
9436	Normalize URL .
9437	Decorator for settingter function .
9438	Decorator to synchronize a function .
9439	Determine if an element should be caught .
9440	Return the number of items that match the query .
9441	Cache the result at the given size .
9442	Returns True if the option is not None .
9443	Display a failure message .
9444	Check if the given count matches the given count .
9445	Normalizes the given string .
9446	Normalize whitespace .
9447	Rescale text .
9448	Determines if the request is resolved .
9449	Resize the window to the specified width .
9450	Start the WSGI application .
9451	Decorator to register an advanced property .
9452	Separate class method .
9453	Separate class method .
9454	Return a string representation of the traceback .
9455	Return the source of an object .
9456	Return the logger for the given instance .
9457	Set the logger .
9458	Send a request to the API .
9459	List available channels .
9460	Retrieve list of users
9461	Pack a message into a channel
9462	Translate a message .
9463	Send a Slack message .
9464	Read a channel from the server .
9465	Start Slack .
9466	Start the client .
9467	Return a dict with keys and values in a dict
9468	Colorize a message .
9469	Called when a task starts .
9470	Called when the runner is running .
9471	Generate stats from v2 playbook
9472	Executor for globus runner
9473	Convert prefix to IPv6 address .
9474	Check if value is empty .
9475	Add a model .
9476	Get a dictionary of elements .
9477	Load a dictionary .
9478	Convert the object to a dictionary .
9479	Parse configuration values .
9480	Parse the state of the device .
9481	Translate the configuration .
9482	Load all filters .
9483	Find the YANG file in the given path .
9484	Convert a model to a dictionary .
9485	Return the difference between f and s .
9486	HTTP POST request .
9487	Build the authorization code URI .
9488	Get a token .
9489	Parse url query parameters .
9490	Remove a URL from a URL .
9491	Build a URL .
9492	Handle exception .
9493	Make a response object .
9494	Make a redirect error response .
9495	Make a JSON response .
9496	Get authorization code .
9497	Refresh a refresh token .
9498	Get access token .
9499	Get the authorization code from a URI .
9500	Get a token from a request .
9501	Validate the Authorization header .
9502	Open the device .
9503	Read a single byte from the device .
9504	Read a number of bytes from the device .
9505	Read a byte from the device .
9506	Write bytes to a device .
9507	Write a byte to the device register .
9508	Write the I2C block data to the device .
9509	Returns the URL of the CDN .
9510	Copy the file .
9511	Creates a copy of the given effects .
9512	Create a remote copy of the specified effects .
9513	Construct a file from a file - like object .
9514	Upload a file .
9515	Upload a file from a URL .
9516	Upload a file from a URL .
9517	Returns a list of file s folder URLs .
9518	Construct a group from a group info .
9519	Create a group from a list of files .
9520	Perform a base operation .
9521	Iterate over the UUIDs .
9522	List API objects .
9523	Generate a bar chart .
9524	Make a request to the API .
9525	Status of the home mode .
9526	List all cameras .
9527	Get information about a specific camera .
9528	Get a single snapshot .
9529	Disable a camera .
9530	Get Motion Enum Enum
9531	Saves MDParam save parameter .
9532	Update motion settings .
9533	Return True if the element is the last li in the list
9534	Yield nested lists of nodes .
9535	Get the value of the given namespace
9536	Get vMerges .
9537	Get the grid span
9538	Get the index of the td
9539	Return True if style is False otherwise .
9540	Return True if the given expression is bold .
9541	Check if a namespace is italic
9542	Return True if a namespace is underline .
9543	Check if p is a title
9544	Get data from a text run .
9545	Get a dictionary of relationships .
9546	Get data from a document .
9547	Returns the type of the ordered list .
9548	Build an XML table .
9549	Build a table from a tr element .
9550	Build a table element .
9551	Get the content of a tag .
9552	Removes the element from the tree .
9553	Find a dataset in the given URL .
9554	Load MNIST dataset .
9555	Load a cifar10 dataset .
9556	Plot images .
9557	Plots layers of weights .
9558	Plot a grayscale .
9559	Generate samples from a list of arrays .
9560	Encode a list of tuples .
9561	Generate batchifier batches .
9562	Predict a sequence of labels .
9563	Add convolution weights .
9564	Encodes an input x into a vector .
9565	Decode the graph .
9566	Find the output of a layer .
9567	Return the score of the autoencoder .
9568	Predict the output of x .
9569	Predicts the probability of x .
9570	Predicts logit .
9571	Compute the mean of the predicted data .
9572	Calculate a batch of features .
9573	Generate samples from a dataset .
9574	Load a network from disk .
9575	Generate random matrix .
9576	Return a random vector .
9577	Iterate over outputs matching patterns .
9578	Yield the parameters matching the given layers .
9579	Create a regularizer from kwargs .
9580	A list of variable weights .
9581	Compute accuracy .
9582	Perform a scan .
9583	Build an Activation object .
9584	Creates a reservoir .
9585	Set loss .
9586	Train a dataset .
9587	Train the model .
9588	Generate a hash of the layers .
9589	Build the graph .
9590	List of input layers .
9591	Returns a list of all variables in the model .
9592	Finds the layer with the given param .
9593	Computes the forward function .
9594	Predict given x .
9595	Calculate the accuracy of the model .
9596	Save model to file .
9597	Load a model from a file .
9598	Calculate the sum of all layers .
9599	Returns a new update with the given updates .
9600	Returns the output size .
9601	Connect a tensor to the given inputs .
9602	Bind the model to the graph .
9603	Resolve input shapes .
9604	Resolve output shapes .
9605	Write the log to the log file .
9606	Return the log of this parameter .
9607	Format a string .
9608	Resolve a shape to a shape .
9609	Find a parameter by its name .
9610	Add a bias vector .
9611	Return the spec as a dictionary .
9612	Loggabor .
9613	Loggabor .
9614	Add a new tier .
9615	Remove a tier from the list .
9616	Get a tier by name .
9617	Convert to EAF
9618	Add a point to the interval .
9619	Adds an interval to the interval .
9620	Removes interval from the interval .
9621	Remove a point at time .
9622	Iterate over all intervals .
9623	Returns a sorted list of intervals for this tier .
9624	Indent an element .
9625	Add a reference to the dataset .
9626	Add a CNV entry to the registry .
9627	Add a CV description .
9628	Add external reference .
9629	Add a language .
9630	Add a reference to a lexicon .
9631	Add linguistic types .
9632	Add a linked file .
9633	Add a locale .
9634	Add a secondary link to a secondary file .
9635	Add a tier .
9636	Clean timeslots from timelots
9637	Extract annotation data from EAF .
9638	Generate an annotation id .
9639	Generate a TS ID based on the timelots .
9640	Return all child tiers for the given id_tier .
9641	Returns the full time interval between all timeslots .
9642	Get the data after the given time .
9643	Get the data before the given time .
9644	Returns a list of tier ids for the given ling_type
9645	Merge multiple tiers .
9646	Remove all annotations from the given tier .
9647	Remove a CV description .
9648	Remove a license .
9649	Remove linked files .
9650	Remove a property from the model .
9651	Remove annotations from the given time range .
9652	Removes secondary files from the linked file .
9653	Remove a tier .
9654	Removes the specified tiers .
9655	Rename a tier .
9656	Shift annotations by timelots .
9657	Main entry point .
9658	Debugging for debugging .
9659	Determine the base level of text .
9660	Get the embedding levels for a given text .
9661	Encode an embedding .
9662	Calculate the number of runs in the storage .
9663	Resolve weak types in the storage .
9664	Resolve the types of the input file .
9665	Reverse a sequence of contiguous characters .
9666	Reorder low level levels .
9667	Run Maya .
9668	Convert lines from PySide2 .
9669	Add an object to the list .
9670	Command line interface .
9671	Maintain backwards compatibility .
9672	Return the GUI .
9673	Discovers all registered guis .
9674	Deregister host .
9675	Add a new entry to a file menu .
9676	Temporarily remove selection .
9677	Update the current time .
9678	Show a new GUI .
9679	Load all types .
9680	Return the cumulative data .
9681	Return list of values for single axis .
9682	Draw constant line .
9683	Load the transform parameters .
9684	Reverse mapping .
9685	Yields a float range from start to stop .
9686	Add a data descriptor .
9687	Add a drophadow definition .
9688	Add data to the conf
9689	Renders the graph .
9690	Calculate left margin .
9691	Calculate right margin .
9692	Calculates the top border of the top .
9693	Add a popup element .
9694	Calculate bottom margin
9695	Draw the graph .
9696	Make a text element with the given value .
9697	Draw the x_labels labels .
9698	Draw y labels
9699	Draw x guidelines .
9700	Draw y guidelines .
9701	Draw title and title
9702	Render inline styles .
9703	Start the SVG .
9704	Return a list of stylesheet resources .
9705	Run IRC .
9706	Send data to the socket .
9707	Connect to the server .
9708	Respond to a given channel .
9709	Dispatch patterns .
9710	Create a new nick .
9711	Handle a ping .
9712	Handle registered data .
9713	Initiate receive loop .
9714	Registers a new node
9715	Task runner .
9716	Decorator to check if a boss is required .
9717	Return a list of patterns that match the pattern .
9718	Register a success message
9719	Execute a worker .
9720	Add a nick to the worker .
9721	Sends a validation email .
9722	Sends password reset notification .
9723	Validate password strength .
9724	Verify a token .
9725	Delete a user .
9726	Allow POST request .
9727	Get the executor .
9728	Return a client instance .
9729	Return the TLS client .
9730	Return the service name .
9731	Execute a docker container .
9732	Execute a docker container .
9733	Return the status of a Docker service .
9734	Stop the Docker service .
9735	Filter queryset .
9736	Update a password .
9737	Update a password .
9738	Validate an email address .
9739	Create a new token .
9740	Delete a token .
9741	Ensure user is authenticated .
9742	Post confirmation .
9743	Update the expired expy .
9744	Generate password reset email context .
9745	Handle email notification .
9746	Handle password reset email .
9747	Handle validation email .
9748	Authenticate with the given token .
9749	Authenticates a user .
9750	Executor for globus notebook
9751	Process bokeh plots .
9752	Get JSJS callback
9753	Create a widget for the given parameter .
9754	Render a function
9755	Create a new TextInputWidget
9756	Convert a list of objects into a named object .
9757	Return the owner of the given method .
9758	Assign values to the HTTP Auth Credentials .
9759	Perform a ping request
9760	Perform a GET request
9761	Check cluster health .
9762	Convert bytes to readable format .
9763	Returns the total load of the system .
9764	Return the memory size .
9765	Get the total number of networks .
9766	List of volumes .
9767	Get a volume
9768	Get the size of a volume .
9769	Returns the percentage of a volume .
9770	Get the volume temp .
9771	Returns the maximum disk temp .
9772	Get a disk by ID .
9773	Login to server .
9774	Perform a GET request .
9775	Execute GET request
9776	Update the Entry .
9777	Retrieves the usage information .
9778	returns the storage object
9779	Create a context for a request .
9780	Get the tenant token .
9781	Return the attributes for this widget .
9782	Return a new set of apps with their settings .
9783	Returns a new list of apps with given apps .
9784	Return a dictionary of global settings
9785	Perform a GET request
9786	Get a value from the config .
9787	Change the value of a config file .
9788	Migrate the config file
9789	Start a webserver .
9790	Wait for the server to complete .
9791	Get new access information .
9792	Check if token is present .
9793	Set access credentials .
9794	Refresh the access token .
9795	Create manifest table .
9796	Splits a bucket into a bucket .
9797	Checks if the given bucket is glacier .
9798	Extract the run id from the given key .
9799	Return a copy of the dictionary .
9800	Add an item to the manifest .
9801	Check if an item is in a manifest .
9802	Extract schema from URI .
9803	Replace schema with schema .
9804	Parse the contexts .
9805	Parse an unstructured event .
9806	Transform line into JSON .
9807	Convert an event to json .
9808	Get the name of the requested template .
9809	Print the given context .
9810	Print the available variables .
9811	Pretty - print SQL
9812	Format a Django context .
9813	Format a dictionary summary .
9814	Return the style of the given object .
9815	Format an object .
9816	Format an object .
9817	Get a token from a string .
9818	Returns a list of Node objects from s .
9819	Convert latex to text .
9820	Set the input directory .
9821	Read input file .
9822	Convert latex to text .
9823	Convert a string to a utf8 string .
9824	Convert a string to ASCII .
9825	Returns information about the organization .
9826	Get boards .
9827	Get a list of members .
9828	Updates an organisation .
9829	Remove a member from the group .
9830	Adds a member to a member .
9831	Adds a member to the organization .
9832	Retrieves information about a list .
9833	Add a card .
9834	Fetch label information .
9835	Retrieves all the items from the server .
9836	Updates a label .
9837	Updates the label dict .
9838	Get the authorization url .
9839	Get card information .
9840	Get a single board .
9841	Get a list of resources .
9842	Get a list of all available checklists .
9843	Add a comment .
9844	Add an attachment .
9845	Add a new checklist .
9846	Adds a label from a dictionary .
9847	Adds a label from the class .
9848	Add a member to the group .
9849	Retrieves information about the group .
9850	Get a list of cards .
9851	Get a list of organisations .
9852	Creates a new board .
9853	Decorator for singledispatch methods .
9854	Get information about the board .
9855	Get list of lists .
9856	Get a list of labels .
9857	Get a single card .
9858	Returns a list of all checked checks .
9859	Get an organisation .
9860	Updates the board .
9861	Adds a list .
9862	Adds a label to the organization .
9863	Retrieves information about a checklist .
9864	Retrieves the card information .
9865	Get all the checklist items .
9866	Updates a checklist .
9867	Updates an item .
9868	Remove an Item
9869	Updates a name .
9870	Updates a checklist .
9871	Add authorization parameters .
9872	Check for errors .
9873	Build the url for a Trello .
9874	Fetch a JSON object
9875	Create an organisation .
9876	Create a new board .
9877	Create a label .
9878	Create a new list .
9879	Create a new card
9880	Create a new checklist .
9881	Create a new member .
9882	Get an organization .
9883	Get a board .
9884	Get a single list
9885	Get a card by id .
9886	Get a checklist .
9887	Get a member .
9888	Create a domain from a URL .
9889	Convert text to raw text .
9890	Convert text to HTML .
9891	Generate a list of text pairs .
9892	Set a password .
9893	Split text into locations .
9894	Mark regex in text .
9895	Mark the start and end of a regex .
9896	Main entry point .
9897	Create a Cipher object .
9898	Get AES mode .
9899	Return priority .
9900	Check encryption scheme .
9901	Called when a message is received .
9902	Make an identifier .
9903	Connect to MQTT .
9904	Handle CONNACK packet .
9905	Encode a string .
9906	Decode a string into a byte string .
9907	Encode a value .
9908	Encode a length bytearray .
9909	Decode the length of the encoded length .
9910	Encodes the header
9911	Encode this packet .
9912	Decode a single packet .
9913	Encode this session .
9914	Decode a packet .
9915	Decode a packet .
9916	Encode this message .
9917	Encode this message .
9918	Decode a packet .
9919	Encode this message .
9920	Encode this message .
9921	Decode a packet .
9922	Decode a packet .
9923	Returns the URL for the API .
9924	Make a request to the API .
9925	Refresh the block .
9926	Format data into numpy arrays
9927	Fit the data .
9928	Fit k - means clustering to data .
9929	Fit a mean shift .
9930	Fit clustering to data .
9931	Predict clusters .
9932	Map clusters to clusters .
9933	Sort clusters according to the given data .
9934	Parse a datetime object .
9935	Get the total number of points in a dict
9936	Returns the total time span of all durations
9937	Generate a unit - wise unit pdicker .
9938	Pretty - print an element .
9939	Convert an analyte .
9940	Convert an analyte chemical name into a dictionary .
9941	Collate all files in a directory .
9942	Convert a boolean array to a numpy array .
9943	Convert a list of tuples to a boolean .
9944	Fastsmooth .
9945	Fast gradient algorithm .
9946	Return a list of dicts that are in the same order .
9947	Calculate the mean shift
9948	Cluster k - means clustering .
9949	Perform clustering on data .
9950	Returns a list of all the SDRs .
9951	Read the configuration file .
9952	Read latools .
9953	Print all LAtools configuration .
9954	Copy an SRM file to a destination .
9955	Create a new configuration .
9956	Change the default configuration .
9957	Remove downhole downhole .
9958	Defrag the contents of a file .
9959	Calculate the depike and expiry .
9960	Make the autorange plot .
9961	Calculate the indices of the latent variables .
9962	Set the ratio of the analyzer .
9963	Calibrate calibration
9964	Sample stats .
9965	A dictionary of ablation times .
9966	Filter a threshold .
9967	Calculate the absolute gradient of the filter .
9968	Calculate correlation .
9969	Filter the correlation coefficient
9970	Add a new file .
9971	Get a dictionary of parameters .
9972	Plot histograms .
9973	Calculate summary statistics for a ResidualStatistics .
9974	Load a list of reference data .
9975	Return a subclass of the given type .
9976	List of isotopes .
9977	Calculate molecular weight
9978	Generate keyword names .
9979	Return the elements of the stack .
9980	Remove duplicates from stack .
9981	Calculate the gaussian weighted average of data .
9982	Gauss - Gaussian function
9983	Calculate the stderr .
9984	Retrieve samples from the database .
9985	Perform optimization .
9986	Calculate the background weighted average .
9987	Calculate background intervals .
9988	Subtract background corrections .
9989	Calculate ratio .
9990	Creates a subset of the specified samples .
9991	Filter the gradients of the given analyte .
9992	Fit a classifier .
9993	Apply a classification to a classifier .
9994	Filter correlation between samples .
9995	Filter a set of filters .
9996	Removes samples from the given filters .
9997	Show the filter status .
9998	Defragment a filter .
9999	Print all removed samples .
10000	Plots gradient histogram .
10001	Plot the gradient of the crossplot .
10002	Plot histograms .
10003	Plots the traces of the analysis .
10004	Plots the gradient plots for the analysis .
10005	Filters out analytes for the analysis .
10006	Extract statistics from the samples .
10007	Calculate the statistics for the simulation .
10008	Generate minimization traces .
10009	Exports traces .
10010	Save the analysis log .
10011	Exports a minimal dataset to a minimal file .
10012	Read a file using split_pattern .
10013	Apply a function to each element of a function f .
10014	Make a matplotlib plot .
10015	Calculate bayes scale .
10016	Scaler scaler .
10017	r Determine the noise of a signal .
10018	Evaluate expiry decay .
10019	Add a parameter to the analyzer .
10020	Remove a component from the model .
10021	Clear all components
10022	Remove unused analytes .
10023	Determine whether fuzzkey matches the filter .
10024	Make an array from a key .
10025	Grab a filter from a file .
10026	Return a string representation of the component .
10027	Log a function .
10028	Write a log file
10029	Read a log file .
10030	Decorate a function with a timeout .
10031	Get modem information .
10032	Send a message .
10033	Parse a file - like object .
10034	Return link to nbviewer .
10035	Divide a thumbnail div .
10036	Divide the code div .
10037	The code example of the code .
10038	Returns the URL of the nbview
10039	Get the file of the RST file .
10040	Process the notebook .
10041	Create the Jupyter notebook .
10042	Download the given files .
10043	Create thumbnail .
10044	Get the header and description .
10045	Scale an image .
10046	Save the thumbnail .
10047	Copies the thumbnail_figure_figure and returns it .
10048	Returns the urls for the given nbfile
10049	Returns a list of languages that match a db change .
10050	Return default value for given field
10051	Process a thumbnail file .
10052	Pre - save the image .
10053	Refresh the cached images .
10054	Return a list of all the images .
10055	Create a new image .
10056	Delete the image .
10057	Create a Thumbnail .
10058	Get a Thumbnail .
10059	Delete a thumbnail .
10060	Handle incoming incoming message .
10061	Subscribe to a given number .
10062	Return the state of the current state
10063	Register a provider .
10064	Sends a message to the gateway .
10065	Creates a handler for the receiver
10066	Returns a list of all receiver blueprints .
10067	Handle a message .
10068	Handle a status message .
10069	Decorator to use jsonex API
10070	Forward an object to the client .
10071	Sign a web3 transaction .
10072	Estimate the amount of gas with the given value .
10073	Estimate the gas gas for a given operation .
10074	Write to the towrite buffer .
10075	Read a single line .
10076	Send a message .
10077	Return the message as a string .
10078	Return True if any of the headers are bad .
10079	Attach a file to the server .
10080	Register a service .
10081	Create a Config object from a module .
10082	Register a service .
10083	Require a value from the cache .
10084	Exit the given object .
10085	Setup the data manager .
10086	Return the N - dimensional N wavelength .
10087	Return the cauchy equation .
10088	Initialize the backend
10089	Login to backend .
10090	Returns a list of domains .
10091	Get all the elements of the specified endpoint .
10092	PATCH request .
10093	HTTP DELETE operation .
10094	Check if two files are the same .
10095	Create a directory .
10096	Initialize the logger .
10097	Raise an error .
10098	Claims a list of file readers .
10099	Return the new column header based on the MuTectors .
10100	Claims the contents of a list of files .
10101	Initialize population stats .
10102	Claims the contents of the caller .
10103	Split data into lines .
10104	Return the prefix of the line .
10105	Return the suffix of the line .
10106	Seek to the next line in the file .
10107	Seek the previous line in the file .
10108	Returns the tail of the file .
10109	Return the first line of the file .
10110	Yield lines from the file .
10111	Claims the contents of a Strelka file .
10112	Parse a VCF record .
10113	Generate a dictionary of values for each sample .
10114	Formats a set of tags into a set of tags .
10115	Concatenate the info fields .
10116	Format the field as a field .
10117	Generate a sample field .
10118	Return a text representation of the sample .
10119	Add a sample tag value to the sample .
10120	Add a filter to the filter .
10121	List all available categories .
10122	Create a product form .
10123	Create a staff products form .
10124	Add product error .
10125	Decorator to cache a function .
10126	Returns a ModelFieldsFormsFormsForms form .
10127	Return a list of items that are pending .
10128	Send an email .
10129	Iterate over osm stream .
10130	Parse an OpenOSM file .
10131	Iterate over OpenStreetMaps .
10132	Returns True if the filter matches the filter .
10133	Check if a user is met .
10134	Return the quantity remaining in the given condition .
10135	Pre - filter queryset .
10136	Filters out the queryset .
10137	Filters the given queryset .
10138	Filters a proposal .
10139	Pre - filter a set of conditions .
10140	Decorator for modifying the cart .
10141	Create a new Cart .
10142	Extend the reservation duration .
10143	Applies a voucher to the cart .
10144	Validates the current cart .
10145	Fix simple errors
10146	Recalculate discounts .
10147	Add a discount to the cart .
10148	Creates a new report view .
10149	Iterate over all rows of the given content type .
10150	Returns a form instance .
10151	Render the data .
10152	List all reports .
10153	Return a list of items in the invoice .
10154	Summarise sales summary .
10155	Report all payments
10156	Return a list of credit note refunds .
10157	Display the status of the Product .
10158	Display a list of discounts .
10159	List items in the invoice line .
10160	Return a list of invoice invoices for the given date .
10161	View the credit notes .
10162	List invoices .
10163	List attendees .
10164	List available speakers .
10165	Generate the invoice manifest .
10166	Return a list of categories that are available .
10167	Return the number of credit available for this account .
10168	Check if the user s ticket category is unregistered .
10169	Perform a guided registration for the current user .
10170	Edit a profile .
10171	Handle a profile form .
10172	View a specific category .
10173	Handle a list of products .
10174	Handle voucher form .
10175	Perform a checkout .
10176	Redirect invoice access .
10177	View an invoice .
10178	View for manual payments .
10179	Refund an invoice
10180	Respond to a credit note .
10181	Modify the registration .
10182	Add a new reservation .
10183	Send an invoice email .
10184	Show badges .
10185	Render a badge .
10186	Return a list of available discounts .
10187	Annotate a queryset with discounts for a user .
10188	Return a list of available products .
10189	Applies payment to invoice
10190	Set the cancellation fee .
10191	Generate an access code .
10192	Apply a function to a function .
10193	Get object from module .
10194	Create an invoice for a given cart
10195	Generate invoice invoice
10196	Generate line items from a cart .
10197	Apply credit notes to invoice .
10198	Check if the user can view this invoice .
10199	Refresh invoice
10200	Validates that invoice can be paid .
10201	Update the status of the invoice .
10202	Mark the invoice as paid .
10203	Check if the invoice has a revision
10204	Update the invoice .
10205	Validates the invoice .
10206	Refund this invoice .
10207	Send an email .
10208	Update the attributes of a file .
10209	Flatten a field to a dictionary .
10210	Print download information .
10211	Download the given field .
10212	Retrieve project data .
10213	List all processors .
10214	Print the inputs for the given processor .
10215	Returns a list of rundata .
10216	Upload a file to the server .
10217	Upload a file
10218	Download data from the processor .
10219	Return all subclasses of c .
10220	Get the repository and project information .
10221	Get a list of phenotypes with suggested changes .
10222	Given a list of variant_changes and a list of suggestions and a list of suggestions and a list of suggested changes .
10223	Returns a list of variants matching the given coordinate query .
10224	Bulk search for variants based on coordinates .
10225	Update this element .
10226	Remove duplicates from a sequence .
10227	Authenticate using the API .
10228	Prompt user for select .
10229	Get the saved issue data .
10230	Move the saved issue data to another issue .
10231	Get the saved data for a task .
10232	Get an Asana task .
10233	Save version to file .
10234	Apply a value to a key .
10235	Decorator to make a function callable .
10236	Flush an item .
10237	Create a task create .
10238	Format a list of task numbers .
10239	Create a missing task in the issue .
10240	All data types in this project
10241	Log a log message .
10242	Initialize the serial port .
10243	Set the number of polling values .
10244	Combine the BAM file .
10245	Render a JSON read from a timestamp .
10246	Set the context s context .
10247	Calculate the pressure of a PF .
10248	Set the max demand period .
10249	Set a new password .
10250	Unpack struct data
10251	Convert the contents of the buffer into a dictionary .
10252	Return a JSON serializable representation of the object .
10253	Read a read from the server .
10254	Split an EkmDate object into a datetime object .
10255	Return the number of months for the given direction
10256	Set license CTR .
10257	Assign a schedule to the schedule
10258	Assign a season to a given schedule .
10259	Set SeasonSchedules
10260	Assign holiday date to holiday
10261	Read the tableset from the server .
10262	Extract schedule from schedule
10263	Reads a month txt file
10264	Extracts the month of a month .
10265	Read holiday dates .
10266	Extract holiday date .
10267	Reads the settings
10268	Write a message to the server .
10269	Respond to the serial command .
10270	Update all observers
10271	Initialize LCD Lookup
10272	Perform a request .
10273	Send a request to the AMP .
10274	Send a request to the server .
10275	Ensure that all fields are correct .
10276	Calculates the physical properties of the meter .
10277	Set the CDD key for display .
10278	Set relay status .
10279	Send the termination string .
10280	Set the pulse ratio .
10281	Set the zero - resettable password .
10282	Set the CDD password .
10283	Iterate over fields .
10284	Iterate over a schema .
10285	Convert a list of sentences into a list of sentences .
10286	Generate a random text .
10287	Return a summary of the statistics .
10288	Color a color .
10289	Show text .
10290	Return a summary of the test results .
10291	Parse command line arguments .
10292	Sets up the configuration .
10293	Run example .
10294	Transform a configuration file .
10295	Transform the description of a test .
10296	Describe all the transformations of the given body .
10297	Transform an example .
10298	Transform an example body .
10299	Tests if this is only one of the arguments .
10300	Register path hooks .
10301	Convert source byte to code .
10302	Apply the given argument parser to the given arguments .
10303	Load a file by name .
10304	Load source from given path .
10305	Discover files in a directory .
10306	Decorator for checking the contents of a file .
10307	Get messages from a receiver .
10308	Add a place .
10309	Remove a file .
10310	Restart a place .
10311	Call a place .
10312	Get a list of directories .
10313	Create a service object .
10314	Refresh session .
10315	Remove expired nodes .
10316	Remove a node from this node .
10317	Get the last updated datetime .
10318	Get all nodes in the cluster .
10319	Refresh a session .
10320	Increment the number of times modified .
10321	Delete this node .
10322	Return a list of values delimiters .
10323	Checks if the given path starts with the given name .
10324	Merge two messages .
10325	Check if the given value exists .
10326	Get a Query .
10327	Return a function that returns a constant .
10328	Splits a function .
10329	Unscatted function .
10330	Run a process .
10331	Create a new timer .
10332	Perform a parser on a reader .
10333	Parse a literal .
10334	Return an optional parser .
10335	Return a Repeated instance with the given parser .
10336	Represents a parser .
10337	Return a RepeatedParser with the given separator .
10338	Parses a parser .
10339	Check the state of a state .
10340	Closes the current state .
10341	Check if the resource has been checked .
10342	Add a host to the registry .
10343	Wrap a WService .
10344	Freeze a graph from a checkpoint .
10345	Freeze the model .
10346	Save a graph to a file .
10347	Save graph only once .
10348	Save weights from a checkpoint .
10349	Restore the simulation from the given checkpoint .
10350	Parse the parser .
10351	Render a tag .
10352	Validates that a tag is valid .
10353	Get context data .
10354	Parse the template .
10355	Get the context data for this template .
10356	Convert caffe config to Tensorflow session .
10357	Freeze caffe_def .
10358	Save graph - only graph to file .
10359	Make a list of rows from a sequence .
10360	Slice an iterable into a string .
10361	Iterate over all items in an iterable .
10362	Remove duplicates from an iterable .
10363	Return the next element in iterable .
10364	Yield successive elements from iterable .
10365	Partition items by bin_size
10366	Always iterable .
10367	Add exceptions to the given callables .
10368	Return a generator that iterates over duplicate items .
10369	Fail if iterable is ordered .
10370	Swap the result of a partition .
10371	Partition a dictionary by key .
10372	Returns the first n queues in the queue .
10373	Reset the iterator .
10374	Parses a token and returns its contents .
10375	Decorator to register a template tag .
10376	Return the descendant of the given chain .
10377	Fetch all records from the database
10378	Iterate over an object .
10379	Select an object .
10380	Parse a selector .
10381	Returns a list of selector functions that match the selector .
10382	Return all parents of lhs .
10383	Return the ancestors of the given lhs .
10384	Return all siblings of lhs .
10385	Determine if the last child of the nth child .
10386	Return a list of nodes matching the given validators .
10387	Ping an ICMP port .
10388	Make a request body .
10389	Expire the cache
10390	Stores the given time .
10391	Retrieve the value from the store .
10392	Check if the key is in the dictionary .
10393	Check if the given timestamp is valid .
10394	Create a new NistBeaconValue instance from a JSON string .
10395	Deserialize a beacon value from XML .
10396	Return the rendered content .
10397	Retrieve a single log file .
10398	Get a list of all rows .
10399	Validate a token .
10400	Return an instance of the server .
10401	Validate a supported token .
10402	Create a token serializer .
10403	Calculate a counter - op .
10404	Calculate the counter64 value between two values .
10405	Average duration in seconds .
10406	Setup the output dictionary .
10407	Setup the sources
10408	Sends an event to the specified source
10409	Run the watchdog .
10410	Parse the given format .
10411	Parse a single log line .
10412	Validates that the field has a valid date .
10413	Raise ValidationError if the request is not available .
10414	Validate the token
10415	Name of the browser .
10416	Handle warning messages .
10417	Connect to the recipients .
10418	Create a secret link .
10419	Sends an Accept request .
10420	Sends confirmation email .
10421	Sends email verification email .
10422	Send a notification to Zenodo access request .
10423	Send notification .
10424	Create a new link .
10425	Validate a token
10426	Revoke this link .
10427	Create a new signal .
10428	Get user by receiver .
10429	Confirm email .
10430	Accept a message .
10431	Reject this request .
10432	Create a SecretLink .
10433	Generate a SHA512 hash .
10434	Verify a message .
10435	Check if the record is archived .
10436	Create an access request .
10437	Confirm email address .
10438	Creates a new SSH CommandClient .
10439	Reverse the option .
10440	The selected item .
10441	return a list of items
10442	Returns the version of the file .
10443	Set the version of the file .
10444	Initialize the ssh configuration .
10445	Start the timer .
10446	Return the next event .
10447	Index the SecretLink .
10448	Create a new Riemann client .
10449	Stop the controller .
10450	Remove all events from the queue .
10451	Process incoming events .
10452	Create a new server
10453	Create Elasticsearch client .
10454	Encode a protobuf event .
10455	Encode a protobuf message .
10456	Decode a protobuf message .
10457	Send a list of events .
10458	Generate a file preview .
10459	Retrieve file preview information .
10460	Send a message to r_q_dict .
10461	Sends a message to the worker .
10462	True if the log time interval is exceeded .
10463	Respond to a challenge .
10464	Abort the message exchange .
10465	Perform SASL prepending .
10466	Handle admin footer .
10467	Builds payment parameters .
10468	Build register credit card parameters .
10469	Send a payment with an alias .
10470	Get the version string .
10471	Constructs the layout
10472	Connect to the system .
10473	Configures the shortcuts .
10474	Activate item .
10475	Called when a selected item is selected .
10476	Navigate to the location
10477	Finalize options .
10478	Run pyside - rcc .
10479	Run the clean command .
10480	Fetch all children
10481	Refetch all children
10482	Return the icon for the given index
10483	Execute a subprocess .
10484	Get the maximum file descriptor .
10485	Closes a file descriptor .
10486	Close all open file descriptors .
10487	Redirect to a file or directory .
10488	Set widget attributes .
10489	Import an app module .
10490	Import all submodules of a module .
10491	Include a template .
10492	Get the url of a gravatar
10493	Get the gravatar for an object .
10494	Validate a filesystem location .
10495	Check if a URL is a valid S3 location .
10496	Get the absolute path of a template .
10497	List all the objects in the bucket .
10498	Build the workflow JSON .
10499	Execute this resource .
10500	Archive a folder
10501	Recursively create a directory .
10502	List all files in a user .
10503	Restore a folder
10504	Create a new ApiClient .
10505	List files in the storage .
10506	Download file .
10507	Check if a file exists .
10508	Returns the parent entity of the given path .
10509	Create a folder .
10510	Upload a file to the container .
10511	Delete a folder .
10512	Validate a storage path .
10513	Create a new StorageClient .
10514	Create a new entity .
10515	Gets the details for the specified entity .
10516	Set the metadata for an entity .
10517	Gets the metadata for the given entity .
10518	Updates the metadata for an entity .
10519	Deletes the specified metadata .
10520	List all projects .
10521	Gets the details for a project .
10522	Creates a new project .
10523	Delete a project .
10524	Creates a new folder .
10525	Returns the details of a folder
10526	Deletes a folder .
10527	Upload a file .
10528	Copy file content .
10529	Download file content .
10530	Gets the signed URL for a file .
10531	Emit a record .
10532	Convert a service to a service .
10533	Return a copy of this request .
10534	Return a new QuerySet with the given parameters .
10535	Add an exception to this exception .
10536	Returns a list with a list
10537	A wrapper for map_job .
10538	Run Genotypes on GATK files .
10539	Run oncotator .
10540	Sort the collection .
10541	Returns a list of datetime objects
10542	Load the JSON file .
10543	Shift by t .
10544	Return the sum of the sequence
10545	Collect the serial device .
10546	Create a user .
10547	Parse VN results .
10548	Parse the release results .
10549	Parses the producer results .
10550	Parse the character results .
10551	Parse tag results .
10552	Parse the user results .
10553	Add files to a tarball .
10554	Perform an operation on a list of files .
10555	Copies a file to a temporary directory .
10556	Creates a Spark configuration object .
10557	Return a list of docker_parameters for the container .
10558	Refresh the database .
10559	Run MuTect .
10560	Create the database .
10561	Return a list of streams
10562	Export the device s data to a directory .
10563	Search for VND by name .
10564	Parse search results .
10565	Add a stream to the database .
10566	Reset the device .
10567	Return a list of users
10568	Run BWA index .
10569	Connect to the server .
10570	Add a stream .
10571	Add a stream force .
10572	Insert a datapoint into the database .
10573	Sync the database .
10574	Start the server .
10575	Stop reading .
10576	Download a URL to a local file .
10577	Upload a file to S3 .
10578	Print a list of labels .
10579	Print all the ontology
10580	Determine the mean size of a given bam .
10581	Return the docker container id
10582	Run a star .
10583	Create the schema .
10584	Export the stream to a JSON file .
10585	Return device object .
10586	Get all labels for an ontology .
10587	Get the hierarchy for the given ontology .
10588	Execute a worker .
10589	Populate the parser .
10590	Return empty config contents .
10591	Get the mount path for the Docker container .
10592	Add an option .
10593	Create an argument parser .
10594	Create pipeline command .
10595	Set the authentication for the websocket .
10596	Handle a response .
10597	Send a ping request
10598	Create a new CRUD path .
10599	Update a CRUD path .
10600	Delete a file .
10601	Subscribe to a stream .
10602	Create a new user .
10603	Return all devices .
10604	Run cutadapt .
10605	Run samtools fasta fasta .
10606	Index bam .
10607	Create a markdu for a markdu .
10608	Run samblaster .
10609	Mark duplicates .
10610	Runs picard .
10611	Run baseRecalibrator .
10612	Run kallisto .
10613	Runs rsem .
10614	Get the identity of a user
10615	Send a command to the server .
10616	Subscribe to a stream .
10617	Connect to the websocket .
10618	Handle reconnecting .
10619	Resubs all subscriptions
10620	Invoked when the connection is opened .
10621	Called when the connection is closed .
10622	Called when an error occurs .
10623	Process a message .
10624	Internal helper to check the websocket connection .
10625	Run GATK SelectVariants .
10626	Run GATK variant filtering .
10627	Creates a GATK variant recalibrator .
10628	Apply variant recalibration .
10629	Combine variant variants .
10630	Check BAM file
10631	Load handlers from a packet .
10632	Write configuration to a JSON file .
10633	Return the configuration as a dict .
10634	Retrieve a single term
10635	Search for an ontology .
10636	Retrieve a suggestion for a given name .
10637	Iterate over all descendant terms .
10638	Iterate over all descendant labels .
10639	Iterate over labels for the given ontology .
10640	Iterate over the terms of a term .
10641	Run fastqc .
10642	Add a stream to the database .
10643	Create an application .
10644	Start the Spark container .
10645	Start a spark container .
10646	Start the datanode .
10647	Stop the HDFS data store .
10648	Check the worker status .
10649	Basic tokenizer .
10650	Lookup a zone by its name .
10651	Fetch the configuration for a zone .
10652	Merge a set of configs into a new one .
10653	Validate changeset .
10654	Minimize the best fitness .
10655	Return the fitness of the pool .
10656	Calculate the cost function
10657	Calculate the median cost function .
10658	Get the parameters of the process .
10659	Return the number of processes .
10660	Add a new parameter .
10661	Generate the next generation .
10662	Normalize a dictionary of keys .
10663	Get environment variables .
10664	Determines if an exception is thrown .
10665	Transform a list of packages into a list of packages .
10666	Transform a result into a string .
10667	Convert HTML to XHTML .
10668	Convert xhtml to HTML .
10669	Convert an etree to a string .
10670	Open a web browser .
10671	Remove the tree from the tree .
10672	Drop a tag from the parent .
10673	Get an element by its id .
10674	Return CSSSelector for the given expression .
10675	Return all loggers .
10676	Returns a dictionary with the counts of the number of tests .
10677	Check if a single class is a single class .
10678	Check if a module is a single module .
10679	Validate parameters .
10680	Ensure the ID is valid .
10681	Attempts to decode a file .
10682	Escape objspec .
10683	Return the codec name for encoding .
10684	Detect the BOM .
10685	Returns the address of a forwarded address .
10686	Convert an object to a decimal value .
10687	Parse string from string .
10688	Parse a file .
10689	Convert a BeautifulSoup tree into a BeautifulSoup tree .
10690	Return the current traceback .
10691	Return the exception as a string .
10692	Render the summary .
10693	Generate plaintext traceback .
10694	Return a list of lines that define the source code .
10695	Render the source HTML .
10696	Match egg info .
10697	Get the index URLs for the project .
10698	Find all versions of a project .
10699	Find a requirement for a given requirement .
10700	Sort links .
10701	Get the Content - Type header .
10702	Iterate over all links .
10703	Return whether the link is verifiable .
10704	Find all data files in a package .
10705	Remove data files from a package .
10706	Parse requirements .
10707	Yield lines from an iterator .
10708	Ignore comments .
10709	Compile a marker .
10710	visit an AST node
10711	visit an attribute node by returning a fresh instance of it
10712	Coerce value to a number .
10713	Copy the current request context to the current view .
10714	Push the context to the stack .
10715	Remove the context from the context .
10716	Return a shallow copy of the app .
10717	Matches the request .
10718	Push the context to the stack .
10719	Make a relative path relative to the given relative path .
10720	Check if a distribution is editable .
10721	Add a function to a URL value .
10722	Add a function to the list of url defaults .
10723	Register an error handler .
10724	Decorator that streams the given generator and returns a generator .
10725	Make a response .
10726	Generate a URL for the given endpoint .
10727	Safely join files .
10728	Get the root of a module .
10729	Return the jinja loader loader
10730	Run the script .
10731	Return the cookie domain for this application .
10732	Create a cache key for a link .
10733	Return True if the root is a valid root - of the root .
10734	Yields all uninstallation paths .
10735	Check if a wheel version is compatible with pip - version .
10736	Build a pip - wheel .
10737	Iterate over all symbols .
10738	Decorator to ensure that a new rate is updated .
10739	Add egg - info files .
10740	Write DELETE marker file .
10741	Check if the virtualenv is running .
10742	Get the username of the user .
10743	Configure a distutils scheme
10744	Parse the Cache - Control - Control header .
10745	Check if a request is cached .
10746	Cache the response .
10747	Iterate over the zipimporter cache and update cache entries .
10748	Load template .
10749	Install a setuptools site .
10750	Save the path to the file .
10751	Convert this object to a dictionary .
10752	Add filters .
10753	Configure the handler .
10754	Add handlers .
10755	Common logging configuration .
10756	Execute a Python script .
10757	Context manager to temporarily restore a temporary directory .
10758	Return the revision of the Git repository .
10759	Get an item .
10760	Generate a new file .
10761	Compile templates .
10762	Return the default cache .
10763	Find eggs in a zip file .
10764	Find a distribution on a given path .
10765	Declare a namespace .
10766	Get the MRO class .
10767	Find an adapter for a given object
10768	Ensure directory exists .
10769	Iterate over entries in a group .
10770	Return True if the given distribution can be added to the given distribution .
10771	Find the best matching requirement .
10772	Evaluate marker .
10773	Evaluate environment variables .
10774	Format a log record .
10775	Formats a currency .
10776	Parse a number pattern .
10777	Returns a decimal value .
10778	Returns the decimal precision .
10779	Calculate scientific notation elements .
10780	Convert datetime . timedelta to seconds .
10781	Parse requirements .
10782	Return unpatched distutils . distutils . distutils
10783	Raise an exception if the requirement is not valid .
10784	Fetch a build egg
10785	do a dice roll
10786	Convert an object into a price class .
10787	Get a price .
10788	Validate a request .
10789	Get a method by name .
10790	Apply a method to the server .
10791	Deprecated .
10792	Returns the blueprint url
10793	Attach an enctype error to the given request .
10794	Make an abstract dist .
10795	Add a requirement .
10796	Walk the required requirements to install the given requirements .
10797	Check if a requirement is installed .
10798	Return a list of requirements to install .
10799	Return all namespace packages in this distribution
10800	Encode a JSON response .
10801	Tokenize an annotation .
10802	Merge two sequences .
10803	Copy annotations from src to dest .
10804	Compress a list of tokens .
10805	Serialize tokens .
10806	Expand tokens from a list of tokens .
10807	Locate unbalanced end .
10808	Takes a list of chunks and returns a list of strings .
10809	Flatten an element .
10810	Split text into words .
10811	Create start tag .
10812	End tag .
10813	Serialize an HTML fragment .
10814	Remove tags from doc .
10815	Extract constant from symbol .
10816	Returns the URL of the cache .
10817	Autolink an element .
10818	Kill conditional comments .
10819	Create a document from a string .
10820	Decorator to mark the return value as JSON .
10821	Returns a TreeWalker object for the specified type .
10822	Export an svn repository .
10823	Get the revision of a location
10824	Decorator to register a setup method .
10825	The name of the module .
10826	Propagate exceptions to the config .
10827	Return the path to the instance .
10828	Update the template context .
10829	Handle HTTP exception .
10830	Return True if there is an HTTP exception .
10831	Handle an exception .
10832	Raises an exception if the request was not configured .
10833	Perform a full dispatch request .
10834	Return the default request response .
10835	Create a URL adapter .
10836	Injects a list of url defaults into the endpoint .
10837	Yield unique values from an iterable .
10838	Parses all available requirements .
10839	Convert a requirement to a string .
10840	Convert a pkginfo info file into a dict .
10841	Iterate over the modules .
10842	Returns a list of all classes .
10843	Return a list of method names .
10844	Find the basename of the given basename .
10845	Check if the given path is a module path .
10846	Recursively walk all files in a directory
10847	Iterate over all paths of the module .
10848	Dump default arguments to json .
10849	Load default values for keyword arguments .
10850	Set the value of a mapping .
10851	Increment the value at key .
10852	Serialize object to pickle .
10853	Builds a dictionary of options from a request .
10854	Populate the requirement .
10855	Ensure that the source directory exists .
10856	Remove a temporary source .
10857	Return the distribution s distribution .
10858	Get the form data .
10859	Get the headers for the given environment .
10860	Convert a URI to a URI .
10861	Return the user cache directory .
10862	Return user data directory .
10863	Return the user log directory .
10864	Return user - config directory .
10865	Return the list of directories for the given application .
10866	Iterate over all available modules .
10867	Restart the environment .
10868	Convert string to text .
10869	Locate CA bundle .
10870	Parse an HTML document .
10871	Parse the given stream .
10872	Parse a text fragment .
10873	Translate a word .
10874	Convert arguments to tokens .
10875	Bind to the server
10876	Print the report to stdout .
10877	Load bytecode from file .
10878	Return a copy of the stylesheet parameter dictionary .
10879	Run a subprocess .
10880	Get the version number of the installed version .
10881	Return a list of distribution names for a given location .
10882	Find external links .
10883	Open a local file .
10884	Process a URL .
10885	Return a list of paths that are removed .
10886	Initialize a set of directories
10887	Add a package .
10888	Add a path component to a directory .
10889	Check if the user is enabled .
10890	Add user - packages .
10891	Decorator for qitter .
10892	Alias for MBCS
10893	Set Unicode encoding .
10894	Force the global eggs after the local site packages .
10895	Add sys . path to sys . path .
10896	Run a subprocess .
10897	Check if pyrex is installed .
10898	Convert PyX files to Python source .
10899	Run the application .
10900	Get a resource from a file .
10901	Return a dictionary of user agent information .
10902	Check if a given URL is a valid URL .
10903	Unpack a file url .
10904	Download an http URL .
10905	Check if download directory exists .
10906	Registers a currency symbol .
10907	Register an exchange .
10908	Decode a response .
10909	Default template context processor .
10910	Render the template using the given app .
10911	Render template .
10912	Render a template string .
10913	Parse distutils .
10914	Check if a given parameter is declared .
10915	Add a node .
10916	Handles include .
10917	Visit imported from import node .
10918	Create a WEL file .
10919	Marks a function as atomic .
10920	Create a service factory .
10921	Encode an object .
10922	Match a requirement .
10923	Populate the requirements set .
10924	Export the given location .
10925	Lookup Amazon Amazon Product .
10926	Iterate over pages .
10927	The ancestor node .
10928	Children of the ViewNode
10929	Get an element from a path .
10930	Get the element s text .
10931	Get the value of an element .
10932	Get price and currency .
10933	List price .
10934	Wrap the HTTP request .
10935	Build a response .
10936	Make an attribute getter .
10937	Return the title of a string .
10938	Sort a value .
10939	Group by value .
10940	Apply a filter function .
10941	Create a logger .
10942	Compare two constant time values .
10943	Verify a signature
10944	Derive the key from the secret
10945	Get the signature .
10946	Sign a value .
10947	Verify a signature .
10948	Unsign a signed value .
10949	Return a signed value .
10950	Verify a signed value
10951	Serialize object to JSON .
10952	Convert an error to a server error .
10953	Find all packages .
10954	Iterate over packages in a list of packages .
10955	Return all directories in base_path
10956	Prepare a HTTP response .
10957	Unign archive .
10958	Unpack a wheel .
10959	Install egg scripts .
10960	Formats the graph
10961	Create a redraw canvas .
10962	Get a node by ID
10963	Called when a new graph is changed .
10964	Called when an edge is added .
10965	Called when a component has changed .
10966	Handles a normal click on an element
10967	Called when a diagram canvas is changed .
10968	Clear the diagram canvas .
10969	Called when a domain model is changed
10970	Maps the domain to the graph .
10971	Unmap a model .
10972	Map an element to a graph .
10973	Set node s style .
10974	Parse the data .
10975	Process the font .
10976	Process an ellipse .
10977	Process a polygon .
10978	Return a Polyline component .
10979	Return a Text component .
10980	Print an image .
10981	Render a GridFS file .
10982	Save dot file .
10983	Load the dot file .
10984	Return True if point is in the given point .
10985	Draw the bounding box .
10986	Opens a new graph
10987	Connect to the database .
10988	Parses the dot_code and sets the model
10989	Create a new graph .
10990	Open file dialog
10991	Save the model to file .
10992	Save the model .
10993	Configure the model .
10994	Configure the nodes .
10995	Configure edges .
10996	Updates the waypoint
10997	Add a new node .
10998	Add an edge to the graph .
10999	Add a subgraph .
11000	Add a new cluster .
11001	Request the current graph .
11002	Edit options .
11003	Configure the dot code
11004	Called when the user exits .
11005	Move components to origin .
11006	Save the object to a file - like object .
11007	Load data from a file - like object .
11008	Save this object to a file .
11009	Load an object from a file .
11010	Create a property .
11011	Parse a file .
11012	Get the start words .
11013	Add a new chain .
11014	Remove a chain from the chain .
11015	Build chain from source to chain .
11016	Generate a sentence .
11017	Create the graph .
11018	Add a node to this graph .
11019	Delete a node .
11020	Get a node by its ID .
11021	Delete an edge from the graph .
11022	Add an edge to the graph .
11023	Add a subgraph .
11024	Called when the graph is changed .
11025	Set the list of nodes in the graph .
11026	Parse a DOT file .
11027	Parse DOT file .
11028	Build the top graph .
11029	Build a graph from tokens .
11030	Get the number of time units and multiplier .
11031	Format a duration .
11032	Load the file .
11033	Create the ui .
11034	Split a sequence .
11035	Yield windows of an iterable .
11036	Run the application .
11037	Return all children of an object .
11038	Append a child .
11039	Insert a child .
11040	Delete a child .
11041	Called when a node is removed
11042	Called when node changes
11043	Get the label for the object .
11044	Set the label of an object .
11045	Called when a label changes .
11046	Initialize the editor .
11047	Update the editor .
11048	Add listeners to the graph editor .
11049	Remove nodes from node .
11050	Called when a node has changed .
11051	Add nodes to the graph .
11052	Called when an edge is removed .
11053	Called when an edge is changed .
11054	Add edges to the graph .
11055	Parse an xdot direction .
11056	handle drawing
11057	Returns a Node instance .
11058	Return an edge factory .
11059	Prepare the database .
11060	Parse the drawing direction .
11061	Parse an XdotAttr label .
11062	Callback called when a new component is changed .
11063	Triggered when the component is changed .
11064	Update the position of the component
11065	Hitt down the right button
11066	Show the highlighted styles .
11067	Draw main layer .
11068	Check if a point is in a polygon .
11069	Draw main layer .
11070	Handle an event .
11071	Run the stochastics .
11072	Return full url for given page number .
11073	Render the previous link .
11074	Render canonical links .
11075	Return True if the content type matches the given pattern .
11076	Select the available content type .
11077	Rewrite a URL .
11078	Decorator to remove a URL from a URL .
11079	Create url identifier .
11080	Normalize host .
11081	Find all modules in a directory .
11082	Search for modules in a directory .
11083	List all modules in a module .
11084	List all classes in a module .
11085	List all classes in a module .
11086	Ensure directory exists .
11087	Put a blob into the blob .
11088	Check if a card number is valid .
11089	Get the git version
11090	Load a module .
11091	Add a path to the list .
11092	Find a module by name .
11093	Split a line into a line .
11094	Remove all namespaces from the root .
11095	Return the consistency of the package .
11096	Create an instance from a YAML specification .
11097	Merge a dictionary into a new dictionary .
11098	Execute all registered actions .
11099	Create a new instance from a YAML file .
11100	Add details to the request .
11101	Send a new rate limit .
11102	Add the context to the context .
11103	Called when an account is logged .
11104	Add url to queue .
11105	Start worker processes .
11106	Set a k value
11107	Get a value from KVStore .
11108	Get a key from KVStore .
11109	Returns the index for a given k
11110	Delete a KVStore .
11111	Plots a heatmap of features .
11112	Add months to a list of months .
11113	Add months to a date .
11114	Checks if the given date is a holiday period .
11115	Set the music service .
11116	Connect to the specified storage service .
11117	Load records from a CSV file .
11118	Load a list from a JSON file .
11119	Save this dataset to a JSON file .
11120	Return a list of labels matching the given label
11121	Calculate the mean of the input data .
11122	Compute the feature importance report .
11123	Restore the given data dictionary .
11124	Merge two dictionaries .
11125	Decorator to register a dispatch function .
11126	Decorator to mark a method as a method .
11127	Find all registered blocks in INSTALLED_APPS .
11128	Verify that the given block is valid .
11129	Register a block .
11130	Unregisters a block stream .
11131	Convert a file to MP3 .
11132	Return a reasonable version of the desired version .
11133	Handle SSL redirecting .
11134	Initialize celery .
11135	Queues an email .
11136	Parse Accept header value .
11137	Parse cache control directives .
11138	Parse content type .
11139	Parse a forwarded header value .
11140	Parses a value into a list .
11141	Parse a list of parameters .
11142	Resize an image to a fit width .
11143	Add a value to the document .
11144	Download a YouTube file .
11145	Connect to Google API .
11146	Uploads a file .
11147	Connect to the music folder .
11148	Write the parameters to a file .
11149	Update the image files
11150	Read absorption from file .
11151	Scale the Aphi by scale parameter .
11152	Reads a pure water absorption from a file .
11153	Reads pure water scattering from file .
11154	Read IOP from file .
11155	Write scipy to file .
11156	Build a b . b .
11157	Build the total absorption .
11158	Builds the total attenuation c .
11159	Build all IOPs .
11160	Set batch parameters .
11161	Read parameter file .
11162	Convert a string to a list of floats .
11163	Parse the PR_APAL_PRIC_DATA file .
11164	Set the handler for signals .
11165	Process signal .
11166	Default handler .
11167	Pause signal .
11168	Abort a signal .
11169	Handle a status signal .
11170	Unregisters an event .
11171	Fetch a single metric
11172	Fetch all metric metrics
11173	Return a list of elements from the given iterable .
11174	Print an item to stdout .
11175	Print all items in iterable .
11176	Create a signature from a function .
11177	Initialize a signature from an instance .
11178	Return a copy of the argv .
11179	Return True if the file should be ignored .
11180	Return the key for a file .
11181	Convert a VLQ to an integer .
11182	Read a table .
11183	Parse the header .
11184	Generate a duration .
11185	Print details .
11186	Generate the data for the model
11187	Opens the search result file .
11188	Write this batch to a file .
11189	Read the data from the file .
11190	Display the graphic connection .
11191	Print the visual information .
11192	Display the error message .
11193	Hide the error message .
11194	Run the planarrad
11195	Cancel planarrad
11196	Quit the planar .
11197	Save the figure .
11198	Open the log file .
11199	Open the documentation .
11200	Decode prerequisite actions .
11201	Click context menu
11202	Mouse move event handler
11203	Display the graphic .
11204	Generate a lock set .
11205	Create a signed private key .
11206	Return the sha3 hash of the message .
11207	Check if the query is valid .
11208	Issue funds .
11209	Get the last lock .
11210	Returns the last proposed proposal .
11211	Return the last valid lock .
11212	Get the timeout for this proposal .
11213	Update the proposal with the given proposal .
11214	Generate a list of privkeys .
11215	Calculate delay for a packet .
11216	Send a packet to the transport .
11217	Create a new NACProxy proxy for the given contract .
11218	Convert an address to native contract class .
11219	Register a native contract .
11220	Update the filter .
11221	Called when a transaction is received
11222	Convert x to RGB .
11223	Convert image to VGG .
11224	Gets the F layer .
11225	Get the output of a layer .
11226	Get the features of a layer .
11227	Create a new key file
11228	Mark the job as finished .
11229	Load the database from a file .
11230	Put a list of items into the queue .
11231	Releases the load
11232	Return a list of table names .
11233	Fix compile_flags .
11234	Find the path to the Teradata Home directory .
11235	Get the value of a key .
11236	Set a configuration value .
11237	Handle a table .
11238	Execute a command .
11239	Get value from settings .
11240	Write default configuration .
11241	Set the filter .
11242	Serialize the metadata to an archive .
11243	Return a string representation of this Entry .
11244	Convert string to float .
11245	Parse a string from a string .
11246	Parse the settings from a string .
11247	Wrap text with indentation .
11248	Detect devices .
11249	Set the center frequency
11250	Calculate the result of the FFT .
11251	Wait for the result to complete .
11252	Update the PSD state .
11253	Read data from file .
11254	Write packet to file .
11255	Submit a new job .
11256	Return the number of repeats in the specified bin .
11257	Calculate the frequency for the given frequency range .
11258	Create a buffer .
11259	Set up the device .
11260	Stop the stream .
11261	Programs the psd .
11262	Perform sweep .
11263	Set addr .
11264	Run CMake .
11265	Filter datetimes based on the given number of dates .
11266	Mask a datetime .
11267	Return the first occurrence of a given datetime .
11268	Filter datetimes .
11269	Delete datetimes from datetimes .
11270	Generate a set of dates from a list of dates .
11271	Delete dates from a list of dates .
11272	Returns the SPI control byte .
11273	Read a single bit .
11274	Write a single byte .
11275	Get the number of bits in a bit pattern .
11276	Watches the port events for the given port .
11277	Handles events in the event queue .
11278	Creates a new gpio interrupt for the user .
11279	Set the edge of the GPIO interroutine .
11280	Waits until a file exists .
11281	Register a pin function .
11282	Deletes the specified pin function .
11283	Enable the gpio interrupting interface .
11284	Send a spi transfer .
11285	Render the form .
11286	Returns True if the form has any errors .
11287	Render a link .
11288	Extract the version information from a package .
11289	Add the keyword arguments to the form .
11290	Check the status of a response .
11291	Perform a GET request .
11292	Get download link .
11293	Upload a link
11294	Upload a file
11295	Uploads a remote file .
11296	Get status of remote upload .
11297	List files in a folder .
11298	Get running conversions .
11299	Calculate humidity .
11300	Calculate temperature .
11301	Publish to the server .
11302	Calculate CRC of data .
11303	Verify that the given data is valid .
11304	Unpack a storm date
11305	Use this method to use archive B .
11306	wakeup device
11307	Send a command to the server .
11308	send DMPFT command
11309	Get the newest record fields .
11310	Parse the archive .
11311	Update weather data .
11312	Initialize logging .
11313	Return a list of public services .
11314	Get wind wind value
11315	Set the parameters for the WWS model .
11316	Set the logger .
11317	Publish data to file .
11318	Decorator to register a request .
11319	Initialize the application .
11320	Fulfill the given requirements .
11321	Push the stack to the stack .
11322	Remove the context from the context .
11323	Temporarily override this method .
11324	Push this stack to the stack .
11325	Remove this context from the stack .
11326	Add a new item to the queue .
11327	Remove duplicates from field names .
11328	Interpret the stats .
11329	Extract parameters from a query .
11330	Run a query .
11331	Return a pandas DataFrame .
11332	Return a NetworkX graph .
11333	Return a pie plot .
11334	Generate matplotlib plot .
11335	Plot bar chart .
11336	Return the result of a CSV file .
11337	Check if a user is required
11338	Add the context data to the widget .
11339	Returns a sorted list of widgets sorted by position .
11340	Return a list of all widgets that have been updated .
11341	Register a widget .
11342	Unregister a widget .
11343	Return the last update of the dashboard .
11344	Returns the value of the specified setting .
11345	Save a setting to the dashboard .
11346	Determine if the update should be updated .
11347	Create an array from an array .
11348	Creates a new one - dimensional object .
11349	Concatenate two arrays .
11350	Check if arguments are valid .
11351	Format a list of axes .
11352	Wrap a function into a BoltArraySpark .
11353	Align the given axes .
11354	Convert to Spark .
11355	Convert an array to a tord
11356	Create an RDD of this RDD .
11357	Apply a function to each RDD .
11358	Return a chunk of data .
11359	Apply a function to each element .
11360	Return a copy of the BoltArraySpark .
11361	Returns a numpy array with the given size .
11362	Remove padding at given position .
11363	Calculate the number for a given shape .
11364	Return a list of slices .
11365	Create a mask from the input indices .
11366	Return a copy of this RDD .
11367	Create a stack of this RDD .
11368	Align the axis to the given axis .
11369	The first item in the BoltArray .
11370	Calculate statistics for an axis .
11371	Return the mean of an axis .
11372	Return the variance of an axis .
11373	Return the standard deviation of an axis .
11374	Calculate the sum of the columns .
11375	Return the maximum value of an axis .
11376	Return the minimum of an axis .
11377	Return a chunked chunked by size .
11378	Swap the barray with the given key .
11379	Transpose the axes .
11380	Swap two axes .
11381	Returns a copy of the BoltArraySpark .
11382	Reshape basic data .
11383	Remove all elements from the given axis .
11384	Return an astroid .
11385	Clip the RDD of this RDD .
11386	Convert this RDD to a numpy array .
11387	Convert argument to a tuple .
11388	Pack arguments into a tuple .
11389	Reshape an ndarray .
11390	Determines if two arrays are close .
11391	Convert a list of NumPy arrays to a list of integers .
11392	Convert a slice to a slice .
11393	Check if two axes are transposeable .
11394	Determine if a new key is reshapeable .
11395	Concatenate multiple arrays .
11396	Expand arbitrary dimensions .
11397	Zip an RDD of RDDs .
11398	Wrap the decorated function
11399	Looks up a constructor .
11400	Reshape a new bararray .
11401	Returns a copy of the BoltArraySpark .
11402	Returns a new BoltArray with the given shape .
11403	Returns the transpose of this BoltArray .
11404	Creates a new object with the given shape .
11405	Create a new numpy array with zeros .
11406	Concatenate multiple arrays .
11407	r Compute discrete likelihood of data .
11408	Finds the most likely alpha for the given data .
11409	Calculate discrete alpha .
11410	Calculate the best alpha for the given data .
11411	Calculate the best alpha for the given dataset .
11412	Plots the log - likelihood .
11413	Lognormal distribution
11414	Sanitize HTML .
11415	Configure analytics .
11416	Return a list of tagged tags .
11417	Returns the MD5 hash of the key .
11418	Returns the SHA256 hash of the file .
11419	Returns the SHA256 hash of the file .
11420	Parse a long integer .
11421	Decode a base64 - encoded key .
11422	Parse the options .
11423	Process an RSA key .
11424	Parses the SSH key and values .
11425	Process an ECDSA SHA .
11426	Parse an ed25519 packet .
11427	Parse SSH2 public key .
11428	Perform a single step .
11429	Perform a single step .
11430	List of mechs .
11431	Store the credentials .
11432	Main entry point .
11433	Initialize distutils .
11434	Create a wave file .
11435	Return HTML for DJFRONT_HF5 .
11436	Normalize djfront frontend .
11437	Displays the html page of django django . django . django . html
11438	Generate HTML for django .
11439	Generate a jquery . jquery
11440	Generate the jquery UI .
11441	Generate the jquery_datatables .
11442	Return HTML for jquery_datatables .
11443	Return html page of jquery_datatables .
11444	Generate a jquery form .
11445	Scroll to django . js
11446	Wrapper for jquery_smooth .
11447	Generate CSS CSS for twides .
11448	Executor for django admin
11449	Render a JavaScript variable .
11450	Iterate over authentication hashes .
11451	Calculate the time in seconds .
11452	Generate a token for a user .
11453	Serialize a User object .
11454	Deserialize a profile .
11455	Update a profile .
11456	Send an authentication failure .
11457	Check if a user is valid .
11458	Check if request is secure .
11459	Get the username for a user .
11460	Create a new user .
11461	Perform a login .
11462	Log out a user .
11463	Login to the server .
11464	Perform a login with the given parameters .
11465	Perform a login with a user .
11466	Change the user s password .
11467	Sends a password .
11468	Reset a user s password .
11469	Merge two dictionaries .
11470	Read content from file .
11471	Get the metadata for an object .
11472	Get model ids for models .
11473	Get object_id from model .
11474	Get object ids from model .
11475	Get a model object
11476	Set default defaults for an operation .
11477	Set the default model for a given operation .
11478	Truncate the table .
11479	Truncate the forward and truncate backward .
11480	Delete the database backward .
11481	Initialize the options .
11482	Finalize the options .
11483	Run the meteor build .
11484	Convert a path to a directory .
11485	Generate a seed .
11486	Return the current state .
11487	Generate a random string .
11488	Decorator to define an API endpoint .
11489	Yield all API endpoints .
11490	Clears the API path map .
11491	Print the given value to stdout .
11492	Verify that the given function is valid .
11493	Called when the client is opened .
11494	Called when a connection is closed .
11495	Process a message .
11496	Process messages from a message .
11497	Process a UDP message .
11498	Dispatch a message to the server .
11499	Receive a connection to the server .
11500	Receive a ping .
11501	Receive a sub - command .
11502	Unsubscribe from the server
11503	Receive a method .
11504	Yield info about the websocket .
11505	Runs the DDP server .
11506	Main entry point .
11507	Print a message to stdout .
11508	Stop all threads .
11509	Start Postgres greenlet
11510	Connect to the PostgreSQL server .
11511	Run the notify loop .
11512	Sanitize psycopg2c2 .
11513	Generate a random random id .
11514	Autodiscover API .
11515	Return the error as a dictionary .
11516	Get an object by name .
11517	Log a record .
11518	Creates a middleware middleware for a request .
11519	Register a web application context .
11520	Add a resource object to the route .
11521	Run the application .
11522	Send a message .
11523	Send a bulk message
11524	Fetch inactive ids .
11525	Send a GCM message .
11526	Send a bulk message
11527	Send data to GCMP .
11528	Send data to the server .
11529	Return the model class for the given module location .
11530	Fast selection algorithm .
11531	Search for a given term .
11532	Translate a term to a string .
11533	Return a list of trending tweets .
11534	Create a gif .
11535	Create a Screenaver
11536	Upload tags to a file .
11537	Normalize data .
11538	Perform a GET request
11539	Translate a GIF to a GIF .
11540	Return the trending images .
11541	Retrieve a GIF by its id .
11542	Upload a gif to a file .
11543	Create an access control .
11544	Authenticates user and password .
11545	Upload a video .
11546	Check the status of a video .
11547	Updates a video .
11548	Deletes a video .
11549	Check the availability of a video .
11550	Update a video .
11551	List videos .
11552	Uploads a file to youtube .
11553	Upload a video .
11554	Redirect to a video page .
11555	Remove a video .
11556	Returns the entry of the video .
11557	Saves the video instance .
11558	Delete a video .
11559	Updates the metadata .
11560	Updates a metadata field .
11561	Update this item .
11562	Parse a YAML string .
11563	Return a string representation of the tree .
11564	Load data from file .
11565	Read content from file .
11566	Parse a node .
11567	Create a new node .
11568	Generate a newick string
11569	Generate ASCII art .
11570	Return the node with the given label .
11571	Prune the tree of leaves .
11572	Resolve all nodes .
11573	Remove internal names .
11574	Remove leaf names .
11575	Decorator to check if a user is authenticated .
11576	Convert a JSON string into a list .
11577	Raise an exception if the given setting is not defined .
11578	Retrieve an argument by name .
11579	Get all the arguments from the request .
11580	Execute a callback .
11581	Get a cookie by name .
11582	Clear a cookie .
11583	Redirect to the authenticated user .
11584	Get authenticated user .
11585	Create OAuth request parameters .
11586	Redirect to the user .
11587	Make a request to the API .
11588	Get authenticated user .
11589	Concatenate url
11590	Parse a header line .
11591	Add a new HTTP header .
11592	Get a list of HTTP headers .
11593	Parse a single line .
11594	Parse headers .
11595	Normalize HTTP headers .
11596	Encode a value .
11597	Convert value to unicode .
11598	Convert value to bytes .
11599	Recursively recursively recursively .
11600	Setup auth plugins .
11601	Iterate over subclasses of cls .
11602	Select the given policy .
11603	Return the occupancy of a grid
11604	Writes a Grole box to a file .
11605	Write a PDB box .
11606	Determine number of molecules .
11607	Resize a leaflet box .
11608	Write a list of molecules to a file .
11609	Yield lines from a file .
11610	Add a message to a user .
11611	Log messages .
11612	Get a list of messages from the cache .
11613	Process a request .
11614	Verify config file .
11615	Raises UnknownProfileError if message is not in cfg .
11616	Retrieve data from config .
11617	Retrieve the private key from a message .
11618	Update config data
11619	Update the configuration of a message .
11620	Creates a config profile .
11621	Display required items .
11622	Get data from user .
11623	Get auth from user type .
11624	Configure a profile .
11625	Write data to cfg .
11626	Writes an authentication message .
11627	Add attachments
11628	Send a message .
11629	Send a message .
11630	Create a message factory .
11631	Generate a credential property .
11632	Validate a property .
11633	Validate input .
11634	Validate Twilio attribute .
11635	Validate a slack post .
11636	Validate a watsapp attribute .
11637	Send a message to the executor .
11638	Add a message .
11639	Extract body from file .
11640	Trim kwargs from keyword arguments .
11641	Send a message .
11642	Get the alias of a chat .
11643	Send the content .
11644	Send a message .
11645	Get the SMTP server from the given address .
11646	Generate email .
11647	Add the header to the message .
11648	Attach a message .
11649	Add attachments .
11650	Create an SMTP session
11651	Get an SMTP SSL .
11652	Return SMTP session
11653	Send email .
11654	Save the tag to a file .
11655	Unloads the image .
11656	Retrieves the region of the image .
11657	Validate the key .
11658	Remove all resources from the database .
11659	Writes the object to the file .
11660	Read the file .
11661	Delete the chunk .
11662	Resize the chunk size .
11663	Insert a new chunk .
11664	Save ID3 .
11665	Delete file .
11666	Parse a file .
11667	Process a single line .
11668	Add a block to the source block .
11669	Draws a string with the given text .
11670	Parse an ISO8601 time string .
11671	Make html words from words .
11672	Convert a word to HTML .
11673	Make a para para .
11674	Make HTML code .
11675	Make a list of HTML items .
11676	Save the metadata to a file .
11677	Update parent s parents .
11678	Runs the given game .
11679	Register a vendor .
11680	Get a specific controller .
11681	Registers a register key .
11682	Sign a string using HMAC .
11683	Generate HTTP request headers .
11684	Send a request to the server
11685	Send GET request .
11686	Send a POST request .
11687	Send a delete request .
11688	Creates an APE value .
11689	Send a request to the transport .
11690	Perform an autopaginated API call .
11691	List hosted zones .
11692	Create a hosted zone .
11693	List resource records for a zone .
11694	Change a change_resource_set record set .
11695	Draws an image .
11696	Draws the region of an image .
11697	Returns the total header size .
11698	Replace old_pages with new_pages .
11699	Find the last page of an Ogg header .
11700	Set the section name .
11701	Add markup lines to the document .
11702	Process HTML content .
11703	Return the markup with the given tag name .
11704	Create a hosted zone writer .
11705	Lock a file object .
11706	Write bytes to file .
11707	Delete bytes at offset .
11708	Convert data to UTF - 8 .
11709	Add a change .
11710	Parse an e_change_info message .
11711	Measure the width of a string
11712	Check if this object is modified .
11713	Delete this ChangeSet .
11714	Creates a new ChangeSet instance .
11715	Parse ID3v1v1v1 .
11716	Creates a new ID3v1v1v1 v1 .
11717	Read size bytes from the file .
11718	Removes a key from the cache
11719	Load a frame .
11720	Update common format .
11721	Updates the V24 frame .
11722	Unload the sound .
11723	Play a voice .
11724	Sets the voice loop points .
11725	Parse glyphs .
11726	Remove glyph names from an alist .
11727	Dump encoding .
11728	Dump an array to a file .
11729	NAME os . py
11730	Check if file exists .
11731	make file list
11732	Parse a hosted zone .
11733	Parse the zone set .
11734	Write a list of blocks to the file .
11735	Groups the padding of a block .
11736	Delete the metadata block .
11737	Save metadata to file .
11738	Parse an RRset alias .
11739	Parse rrrset record values .
11740	Parse a ResourceRecordSet .
11741	Delete this hosted zone .
11742	Add a record .
11743	Create a record .
11744	Create a record .
11745	Create a CNAME record .
11746	Create a new record .
11747	Create a new NSResource record set .
11748	Create a PTR resource record .
11749	Create a new SPF resource record .
11750	Create a new SRV resource record .
11751	Create a TXT resource record .
11752	Registers a TXXX key .
11753	Get the initial values for a change .
11754	Write an XML change .
11755	Write a change_RecordSets request .
11756	Initialize logging .
11757	Add an item to an alias .
11758	Freeze a dictionary .
11759	Join HTML attributes into a dictionary .
11760	Initialize the app .
11761	Initialize the bars .
11762	Bind a bar to the bar .
11763	Return a dictionary of arguments .
11764	Returns the URL for this request .
11765	Return True if this view is currently currently active .
11766	Validate a metric class .
11767	Get a stat by its name .
11768	Calculate statistics .
11769	Autodiscover gadgets .
11770	Dump csv to csv .
11771	Handle maintenance statistics .
11772	Get a list of values from a GET variable .
11773	Get the value of a GET parameter .
11774	Returns the next colour .
11775	Get gecko parameters .
11776	Displays the number widget for a given number .
11777	Returns a tuple of metrics for the geckoboard
11778	Generate a line chart chart
11779	Returns the geckometer geckometer .
11780	Generate metrics for geckoboard .
11781	Return a list of all active gadgets .
11782	Register a gadgets .
11783	Get context data .
11784	Print an error message and exit .
11785	Decorator to validate a function .
11786	Prompt the user for a long line .
11787	Prompt the user for a list of items .
11788	Read filename and write out file .
11789	Get all games for a year .
11790	Return the winner of the game .
11791	Returns the current season .
11792	List all starters
11793	Return the surface surface .
11794	Return the coin toss .
11795	Get weather information .
11796	Return information about the team .
11797	Get all games for a given month .
11798	Print standings of league standings
11799	Returns a pandas DataFrame containing team stats
11800	Returns the R voting for the year .
11801	Returns a DataFrame with all team scores .
11802	Returns the season s year .
11803	Get stats from a table
11804	Decorator to switch a function to a directory .
11805	Decorator to cache files
11806	Return a tuple of class instance key .
11807	Memoize function .
11808	Return the age of a given year .
11809	Get the stats table
11810	Get stats per game
11811	Returns a list of the total number of the total of the total .
11812	Get statistics of per36 per hour .
11813	Return statistics of per - poss .
11814	Get the advanced stats .
11815	Return the stats of the camera .
11816	Returns statistics about the advanced protobuf .
11817	Get stats for a game .
11818	Get current session object
11819	Expand details into a DataFrame
11820	Add team columns to data .
11821	Add team features to df .
11822	Compute the initial probability of a line .
11823	Returns a pandas DataFrame containing the closest playoffs .
11824	Get a simple excel year .
11825	Name of the team .
11826	Return a list of box scores for the given year .
11827	Get the meta information for a given year .
11828	Return a list of head coaches for a given year .
11829	Return a DataFrame with all games for the given year .
11830	Retrieve the Off Coordinator
11831	Retrieve the Define Coordinator
11832	Retrieve a stadium s id
11833	Return the scheme for the given year .
11834	Retrieve the Defensive Alignment
11835	Retrieve the splits for a year .
11836	Get html from url .
11837	Flatten links .
11838	Convert a rel to id .
11839	Convert kwargs to a dictionary .
11840	Read a single file .
11841	Put a guard into a read queue .
11842	Return a direct guard .
11843	Closes the queue .
11844	Get a batch of data from a dataset .
11845	Retrieve a block from the cache .
11846	Get a queue for the given path .
11847	Get a generator from the queue .
11848	Parse an IFB file .
11849	Write object to fileobj .
11850	Read a varint from the stream .
11851	Read objects from the group .
11852	Close the file descriptor .
11853	Write an object to the stream .
11854	Flush the write buffer .
11855	Get the directory of the game .
11856	Input text to keyboard .
11857	Create a fake fake movie .
11858	Evaluate the trait description .
11859	Wait until condition is true .
11860	Wait for all traits to be present .
11861	Add ignored exceptions .
11862	Execute a single volume .
11863	Execute the main command .
11864	Send a message .
11865	Status of the server .
11866	Turn off the device .
11867	Power on the device .
11868	Set the volume .
11869	Select a source
11870	Decrypt a request .
11871	Calculate the CRC of a plain text .
11872	Encrypt a value .
11873	Print missing schema .
11874	Return a list of all the links in html .
11875	Check if a song name exists .
11876	Parse a URL .
11877	Generate a URL for a song .
11878	Parses Google s HTML .
11879	Parses a song .
11880	Download HTML response from url .
11881	Download a file from a URL .
11882	Download a file using wget .
11883	Returns a list of stations for a given city name .
11884	Get information about a location .
11885	Parse an observation response .
11886	Get information about a station .
11887	Return a list of paths that match the index .
11888	Return the compiled compiler extensions .
11889	Determine whether or not the file extension is available .
11890	Return the compiler mimetype .
11891	Return the compiler format extension .
11892	Register a mimetype .
11893	Unregister a mimetype .
11894	Return the list of paths to finder .
11895	Register default values .
11896	Import Qt core .
11897	Return the metanet of the MetaNet .
11898	Add a netnode plugin name to the network .
11899	Delete a netnode plugin .
11900	Import settings from settings .
11901	Exports settings from a config file .
11902	Return the directory id for this plugin .
11903	Iterate over all keys in the database .
11904	Simple Flask error handler .
11905	Create a DynamoDB table .
11906	List all tables .
11907	Fetch CRATE crates .
11908	Return metadata for an item .
11909	Get the timestamp of a metadata item .
11910	Fetches the owner of a crate .
11911	Fetch the owner of a crate .
11912	Fetch the versions of a crate .
11913	Fetches the download versions for a given crate .
11914	Fetch data from a crate .
11915	Get a summary of the crates API .
11916	returns a list of crates
11917	Returns the crate data for a crate .
11918	Returns the data for a crate attribute .
11919	Fetch items from page
11920	Fetch items from category
11921	Fetch items from the API .
11922	Get questions from the server .
11923	Fetch items from category
11924	Return the metadata updated for a given item .
11925	Define the metadata category .
11926	Get items from ReMo
11927	Return the buffer list .
11928	Access the io priority .
11929	Close the queue .
11930	Submit a new block .
11931	Cancel an event .
11932	Cancel all pending transfers .
11933	Returns a list of events from the server .
11934	Fetch items from category
11935	Fetch cells spreadsheet
11936	Parse the feed .
11937	Export all available formats .
11938	Returns the permission factory .
11939	Create the blueprint .
11940	Create URL rule .
11941	Record a record .
11942	Default view method .
11943	Export a record .
11944	Calculate a time callable for a given target .
11945	Close the socket .
11946	Remove a client .
11947	Increment a metric by name .
11948	Send a metric to the server .
11949	Add a timestamp after a given time .
11950	Send a gauge to a metric .
11951	Send a gauge delta .
11952	Set a metric value .
11953	Perform a request to the server .
11954	Create a batch client .
11955	Get a unit client .
11956	Send all pending batches .
11957	Create a new permission checker .
11958	Create a TCPBatch object .
11959	Flush all cached batches .
11960	Create a TCP client .
11961	Creates a new user if any .
11962	Interpret an OpenMath .
11963	Convert a term to OpenMath .
11964	Convert an object to a Python object .
11965	Convert an object to OpenMath .
11966	Register a converter to openmath .
11967	Convert a python register to a Python object .
11968	Initialize the app .
11969	Yield valid choices .
11970	Split model kwargs into model fields .
11971	Decorator for registering a registry .
11972	Creates a value for the given object .
11973	Return the default form data .
11974	Decorator for requiring required attribute .
11975	Decorator for random choices .
11976	Validate a decimal field .
11977	Return the data for an email field .
11978	Returns a random data field .
11979	Returns a random datetime field .
11980	Return the value of a float field .
11981	Parse integer field data .
11982	Generate a random time data .
11983	Return a random choice field .
11984	Return the data for multiple choices .
11985	Return a random choice field .
11986	Encode an object as an XML string .
11987	publish package
11988	Create git tag .
11989	Decorator to check if a field is blank
11990	Load a python module .
11991	Builds a Pickler instance from the given state .
11992	Create an OML application from a list .
11993	Create an OMTuple .
11994	Decode bytes to bytes .
11995	Encode data .
11996	Convert value to fixed precision .
11997	Format a number .
11998	Convert a number to money .
11999	Unpack a numpy array .
12000	Compress raw data from an array .
12001	Add a workspace .
12002	Remove a workspace .
12003	List all available workspaces .
12004	Retrieve the named field by name .
12005	Check if a repository exists .
12006	Sync workspace .
12007	Clone a repository .
12008	check ndio version
12009	Convert a numpy array to voxels .
12010	Convert list of voxels to numpy array .
12011	Execute a workflow .
12012	Print an update to the repository .
12013	Set the console handler .
12014	Execute a command .
12015	Load a PNG file .
12016	Save numpy array to file .
12017	Save a collection of files .
12018	Print the status of a workspace .
12019	Print the status of the repository .
12020	Get the size of the cube .
12021	Post - cutout a blosc .
12022	Loads an image from a tiff file .
12023	Save TIFF file .
12024	Load data from a multi - layer TIFF file .
12025	Write the configuration to a file .
12026	Clone a file .
12027	Returns the version of Yoda .
12028	Show the given message .
12029	Decorator to print an option .
12030	Reserve ids .
12031	Merge multiple ids .
12032	Propagate a channel .
12033	List projects in a dataset .
12034	Get a single dataset by name .
12035	Returns a list of all available datasets .
12036	Parse subparser .
12037	Show a workspace .
12038	Show a workspace .
12039	Show the current workspace .
12040	Generate the url for the given endpoint .
12041	Try to guess the format from an extension .
12042	Open an image file .
12043	Convert input file .
12044	Build a graph .
12045	Computes invariant invariants for the given graph .
12046	Convert a GraphQL graph to a file .
12047	Convert a dictionary into a dictionary .
12048	Get RAMON type .
12049	Delete a channel .
12050	Add a dataset .
12051	Convert dataset to JSON .
12052	Return a dictionary representation of the dataset .
12053	Return a dictionary representation of a channel .
12054	Convert a dictionary to a dictionary .
12055	Identify image size .
12056	Upload data to Ndio .
12057	Find a workspace .
12058	Get public tokens .
12059	Get information about a specific project .
12060	Set metadata for a given token .
12061	Request url .
12062	Perform a POST request .
12063	Delete a URL .
12064	Load an hdf5 file .
12065	Save an HDF5 file .
12066	Infer gaps in a tree .
12067	Recover a vim .
12068	Install gettext translations .
12069	Perform an exclusive N .
12070	Returns the percentage of a part .
12071	Get cache stats for a given server .
12072	Retrieve a list of slices from a cache
12073	Return the data as a dictionary .
12074	Show the server status .
12075	Display a dashboard .
12076	Display statistics about the memcache .
12077	Show information about a Memcache Slabs .
12078	Convert human readable string to human readable size .
12079	Recursively find a config object .
12080	Add a directory to this node .
12081	Applies the config to the fpath .
12082	The path of the file .
12083	read the file
12084	Write data to file .
12085	Configure the environment .
12086	Create the file .
12087	Applies the config to the given path .
12088	Return the path as a string .
12089	Remove the directory .
12090	Prepare the environment .
12091	Removes all children from the tree .
12092	Convert path to path
12093	Return a list of files .
12094	Write data to file .
12095	Returns the contents of the given file
12096	Add a file or directory .
12097	Save the configuration to a yaml file .
12098	Load the configuration file
12099	Clean up the directory .
12100	Load plugins from a directory .
12101	Recursively update a dictionary .
12102	Create a child node .
12103	Resolve the path in the hierarchy .
12104	Get the value of the container .
12105	Update this ConfigNode .
12106	Load the configuration .
12107	Apply a config variable to an object .
12108	Builds a callback URL .
12109	Process socket input .
12110	Send output to pyngus .
12111	Send a request .
12112	Read input from socket .
12113	Write socket output to socket .
12114	Decorator to raise a RuntimeError if a callback is invoked .
12115	Returns a dictionary with all the mode - set modes .
12116	Configure the transport .
12117	Return the source address of the link .
12118	The target address .
12119	Close the parent session
12120	Create a new sender .
12121	Create a new SenderLink for the given pn_link .
12122	Create a new receiver .
12123	Request a receiver s receiver .
12124	Destroy a link
12125	Called when the session is closed .
12126	Process an Endpoint event .
12127	Extend markdown with markdown .
12128	Called when receiver is closed .
12129	Called when receiver failed .
12130	Get the host port and port .
12131	Connect to a socket .
12132	Create a server socket
12133	Check if the connection needs to be processed .
12134	Decorator that raises a RuntimeError if the connection is not revoked .
12135	Process a SASL connection .
12136	Return the output of the network .
12137	Create a new sender .
12138	Reject a link .
12139	Create a new receiver .
12140	Called when the connection failed .
12141	Check if the connection is alive .
12142	Called when the connection is closed .
12143	Called when an error occurs .
12144	Decorator for views that require a twilio view .
12145	Get a string representation of this color .
12146	Return a dictionary containing the tty for the current user .
12147	Set compression value .
12148	Add a PDF object to the document .
12149	Writes a string to the stream .
12150	Put a stream into the buffer .
12151	Add a new page to the document .
12152	Set the color scheme .
12153	Set default font key .
12154	Add a new page .
12155	Set font size
12156	Add text to the PDF .
12157	Add newline to the page .
12158	Add a pie chart .
12159	Output all pages .
12160	Get the orientation changes
12161	Output font files .
12162	Output images .
12163	Output the session data .
12164	Transform the current transformation to a new one .
12165	Return the absolute position of the current matrix .
12166	Sets the image style .
12167	Rotate a point to another segment .
12168	Set the information on this object .
12169	Set the display mode .
12170	Closes the document .
12171	Add the header to the file .
12172	Puts the PDF into the current document .
12173	Store resource dict .
12174	Store information about this object .
12175	Put the catalog into the catalog
12176	Write a trail to the database .
12177	Floyd function .
12178	Iterate through a sequence of sequences .
12179	Iterate over a sequence of sequences .
12180	Iterate over a set of cycles .
12181	Returns True if test_length is exceeded False otherwise .
12182	Returns True if test_length is fit False otherwise .
12183	Check if x is greater than x .
12184	Check if y is greater than the given coordinate .
12185	Return a copy of this cursor .
12186	Increase the x .
12187	Increase the y - axis .
12188	Draw the text .
12189	Creates a new Tag .
12190	Lists all tags .
12191	Get a label by name .
12192	Updates a label .
12193	Deletes a tag .
12194	Create a new tag .
12195	List actions .
12196	Get a list of tags .
12197	Create a new group .
12198	List all hooks .
12199	Updates a hook .
12200	Create a new alert .
12201	Get an alert .
12202	Updates an alert .
12203	Setup Sphinx extension .
12204	Return the path to themes .
12205	Perform a POST request .
12206	List all registered hosts .
12207	Perform a GET request
12208	Takes a list of pieces and returns an iterator that can be used to find the position of the player .
12209	Calculate the duration of this event .
12210	update limbdark
12211	Computes the inference .
12212	Bins the calculation .
12213	Free all arrays .
12214	Receive data from the socket .
12215	Generator that yields lines from the stream .
12216	Read data from the stream .
12217	Get NTP status and message .
12218	Generate info .
12219	Generate info .
12220	Run NTP command .
12221	Get capabilities .
12222	Read the mode reader .
12223	Close the socket .
12224	Returns a datetime object
12225	Help message .
12226	Generator for new groups
12227	Generate new news .
12228	Return a list of new news items
12229	List active groups .
12230	Generator for active times .
12231	List newsgroups .
12232	Generate a list_underview .
12233	List extensions .
12234	Generate list .
12235	Return a list of items .
12236	Get the number of items in a group .
12237	Get the next article .
12238	Execute an article
12239	Send a HEAD request
12240	Get the body of a message
12241	Display XGT title .
12242	Send a message to the server .
12243	Send XZDR message .
12244	Generator for Xover .
12245	Generate XPAT code .
12246	Return a list of all the items in the header .
12247	Compress gzipped gzip .
12248	Perform a POST request .
12249	Convert an integer to an offset .
12250	Convert value to timestamp format .
12251	Convert a value to a datetime object .
12252	Perform a POST request .
12253	HTTP DELETE operation .
12254	Perform an HTTP GET request .
12255	List all scheduled queries
12256	List all tags .
12257	Get a tag by name .
12258	Create a new alert report .
12259	Delete a tag .
12260	Creates a scheduled query .
12261	Create a scheduled query .
12262	Delete an alert .
12263	Unparse a range .
12264	Parse newsgroup .
12265	Parse a header line .
12266	Unparse headers .
12267	Perform a POST request .
12268	Run tests .
12269	Return a docstring for the default values .
12270	Decorator to mark a function as a decorator .
12271	Generate a docstring .
12272	Set the value of the field .
12273	Check that the value is of type .
12274	Get the value of the variable .
12275	Check if value is valid .
12276	The symmetric error .
12277	Set errors .
12278	Set the bounds .
12279	Import metrics from the API
12280	Extract metrics from metrics .
12281	Remove all metrics from the filter expression .
12282	Call the API .
12283	Return terminal expression .
12284	Return an operator .
12285	Add an op .
12286	Initialize the properties .
12287	Returns a list of Parameter objects .
12288	Return a list of parameter values .
12289	Calculate error errors .
12290	Clears all derived parameters
12291	Set the method s method .
12292	Get environment variables .
12293	Get the url parameters .
12294	Perform a GET request .
12295	Perform a DELETE request .
12296	Perform a POST request .
12297	Perform a PUT request .
12298	Calls the API .
12299	Validate the metadata .
12300	Verify that the type product is valid .
12301	Get the size of the remote file .
12302	Download the image .
12303	Validate band bands .
12304	Connect to Earthexplorer
12305	Creates a prefixed by prefix .
12306	Return the timezone for the given timezone .
12307	Normalize a time - aware datetime .
12308	Joins delimiter by delimiter .
12309	Return a list of newline positions
12310	Convert a source to a point .
12311	Dump the results to stdout .
12312	Remove metrics from the metrics .
12313	Create a fortune from a list of files .
12314	Set the value of the given files .
12315	Run the given context .
12316	Concatenate text .
12317	Handle special handling .
12318	Parse the parser .
12319	A list of rules for this element .
12320	The list of comments .
12321	List of directive directives .
12322	Returns the output source .
12323	Generate the parser .
12324	Returns the import directive .
12325	Return the declaration of the token type .
12326	Return the definition of the class .
12327	Get the entry_point .
12328	Return the definition of a rule .
12329	Get the source for a given rule .
12330	Returns the transform for the given rule .
12331	Convert an expression to an ASN .
12332	Convert a node to an ASN .
12333	Helper function for hoist operation .
12334	Removes groups from an optree .
12335	Convert AST node to AST
12336	Convert an AST node to a code node .
12337	Convert an AST to a code string .
12338	Return the code for an AST .
12339	Return the expression code for the AST .
12340	Convert a special handler code to a code string .
12341	Generate AST instruction .
12342	Concatenate the AST using the AST .
12343	Convert AST op to AST .
12344	Convert a list of operands to an AST .
12345	Convert an AST instruction to a code string .
12346	Return all directives that match pred .
12347	Flatten a child element .
12348	Yield directives from a comment .
12349	Handle JSON results .
12350	Generate a new ID .
12351	Remove a hotkey .
12352	Argument parser .
12353	Configure logging .
12354	Validates that the arguments are valid .
12355	Convert a list of infix nodes into a postfix .
12356	Convert a postfix node to an Optree node .
12357	Reduce a list of nodes .
12358	Argument parser .
12359	Load the plugin .
12360	Get a metric definition by its name .
12361	Returns the length of the columns
12362	Returns the maximum length of the metrics .
12363	Escape metrics .
12364	Outputs the field markdown .
12365	Output the metrics header .
12366	Generates the documentation for the metric .
12367	Parse input text .
12368	Attempt to attempt the next request .
12369	Add the arguments to the parser .
12370	Parse a time string .
12371	Output CSV data
12372	Helper to output a JSON response .
12373	Helper to output a JSON object .
12374	Creates an XML document .
12375	Default predefined value .
12376	Pretty print a list of nodes .
12377	Create a new repetition .
12378	Return terminal node .
12379	Get a repetition node .
12380	Retrieves an exclusion .
12381	Count the leading whitespace .
12382	Calls extractor .
12383	The position of the node .
12384	True if this node is empty .
12385	Increment the amount of ignored messages .
12386	Check if the given value is a type .
12387	Return a copy of this ParseNode .
12388	Return a copy of this ParseNode .
12389	Return a new ParseNode with another .
12390	Create a new ParseNode .
12391	Return a compressed ParseNode .
12392	The Position .
12393	The Position of the maximum readed position .
12394	Move next character .
12395	Move next line .
12396	Go to previous line .
12397	Return the last readed line .
12398	Increment the cursor position .
12399	Save the current context .
12400	Restore the current context .
12401	Return a string representation of the notification .
12402	Set internal name .
12403	Returns the number of variables in the graph .
12404	Returns the number of functions in the graph .
12405	Update self . count_vars .
12406	Update the current state of the scope .
12407	Return a new copy of the scope .
12408	Update the set with the given oset .
12409	Return a new instance with the given signature .
12410	Update the set with the given oset .
12411	Return a new difference between two states .
12412	Update the symmetric difference .
12413	Return symmetric symmetric difference .
12414	Add a signature to the scope .
12415	Remove a signature from this set .
12416	Discard a signature .
12417	A list of signature values .
12418	Returns the signature of the signature .
12419	Returns the signature of the last key .
12420	Get a signature .
12421	Get a Scope by its name .
12422	Get a signature by its name .
12423	Returns a Scope instance of all |Elements| .
12424	Call a TranslatorInjector .
12425	Normalize an AST node .
12426	Set node attributes .
12427	Iterate over all the values .
12428	Determine if a hit has a charge .
12429	Compute the signature for this component .
12430	Resolve the symbol
12431	Return the resolved names of the given type .
12432	Set the resolved name .
12433	Delete local file .
12434	Delete an S3 bucket .
12435	Delete a file .
12436	Save a local file .
12437	Save an S3 object to a file .
12438	Save object to temp file .
12439	Find a bucket by path .
12440	Creates a new Enum .
12441	Iterate over the types of func .
12442	Set the name of a thing .
12443	Decorator to add a method to the class .
12444	Decorator to register a class .
12445	Decorator to register a class .
12446	Decorator to register a directive
12447	Decorator to mark a function as a decorator .
12448	Bind a rule to dst .
12449	Read an EOL .
12450	Update the rule_nodes .
12451	Remove all rules from the rule cache .
12452	Return the node s value as a string .
12453	Parse a stream .
12454	Start a new tag .
12455	Set end tag .
12456	Set the given rules .
12457	Set the registered hooks .
12458	Set directive directives .
12459	Evaluate a rule .
12460	Evaluate a hook .
12461	Return True if the given text is in the stream .
12462	Return True if the stream is one character .
12463	Read a character .
12464	Read until the stream is read .
12465	Ignore comments from the stream .
12466	Set the hit_dtype attribute
12467	Set cluster dtype
12468	Check the structure compatibility .
12469	Adds a rule name .
12470	Add rules to the parser .
12471	Add a rule to the parser .
12472	Add sequences to the hierarchy .
12473	Add alternative alt .
12474	Add a range to the parser .
12475	Add a new rule .
12476	Add a capture .
12477	Add a sequence to the sequence .
12478	Add a hook .
12479	Return the number of parameters .
12480	Parses a parameter
12481	Returns True if param is a string
12482	Return the id of a parameter .
12483	Set the name of a hook .
12484	Add a hook parameter to the hook .
12485	Parse the file and return a list of rules .
12486	Return True if the stream is ignored .
12487	Add a state .
12488	Return a dot representation of the state .
12489	Write the graph to a file .
12490	Write the graph to a PNG file .
12491	Convert the state to a string .
12492	Return the next state .
12493	Delete all living state .
12494	Infer the block .
12495	Infer a sub - expr .
12496	Infer the ID of an identifier .
12497	Infer a literal .
12498	Dump node information .
12499	Top level rule function .
12500	Return the exit scope .
12501	Return a comma - separated statement .
12502	Return an ast . Call node .
12503	Visit a CallTrue node .
12504	Return an astroid .
12505	Visit a rule node .
12506	Visit the capture node .
12507	Visit the scope .
12508	Visit Alt .
12509	Return a list of AST nodes .
12510	Visit exprOptional .
12511	Visit expr node .
12512	Visit the expr node .
12513	Convert src to dst .
12514	Set the indentable for a list .
12515	Convert list to str
12516	Echo all nodes
12517	Populate an edge from a sequence .
12518	Populate the edge register .
12519	Build a StateTree tree from a MatchExpr instance .
12520	Compare pred values .
12521	Create a Grammar object from a string .
12522	Create a Grammar object from a file .
12523	Parse the given source .
12524	Parse a file .
12525	Set node to dst
12526	Set the node value as an integer .
12527	Get the subnode of the given AST node .
12528	Default serializer .
12529	Return a list of depos .
12530	Serialize a deposition .
12531	Return a list of IDs in the database .
12532	Retrieve the list of recids in the database .
12533	Import BibDocs .
12534	Dump a BibDocument to a list of BibDocument objects .
12535	Return a list of run jobs .
12536	Check for a BibDoc .
12537	Serialize object to JSON .
12538	Get all users .
12539	Serialize a User object .
12540	Get all the communities .
12541	Retrieve all modified records from a given date .
12542	Get a set of modified records from a given date .
12543	Get permission restrictions .
12544	Get a list of record revisions from the database .
12545	Return a list of all collections that are restricted to a record .
12546	Serialize marcxml to JSON .
12547	Get a list of bibdoc records .
12548	Dump bibdoc records to JSON .
12549	Serialize a AR to a file .
12550	Load common model instances .
12551	Collect all things that have been created
12552	Initialize application context .
12553	Decorator for memoization
12554	Returns the run sql query .
12555	Get connected roles .
12556	returns a list of actions
12557	Serialize a Token object to a JSON file .
12558	Load a token .
12559	Import a record dump .
12560	Retrieve the app or default if it doesn t exist .
12561	Serialize object to JSON .
12562	Get a list of users .
12563	Get count of users .
12564	Dump a User .
12565	Load a deposit file
12566	Create record and pid and pid .
12567	Load records from a record .
12568	Load records from a list of sources .
12569	List records in a dump
12570	Load data from multiple sources .
12571	Load communities .
12572	Load users from sources .
12573	Load a deposit from a source
12574	Return statistics for profiling .
12575	Start the application .
12576	Finish profiling .
12577	Delete the profiling .
12578	Delete the profiling .
12579	Get the current process .
12580	Disable the timestamp .
12581	Load user from database .
12582	Calculate the translation of images .
12583	Fit a list of images .
12584	Add one or more dimensions to an array .
12585	Create a record .
12586	Create a record in the dump .
12587	Update a record .
12588	Create a persistent identifier .
12589	Delete a record .
12590	Create a bucket .
12591	Create a FileInstance
12592	Delete all buckets .
12593	Return a list of PIDs that are missing .
12594	Prepare revisions .
12595	Prepare files .
12596	Prepare the pids .
12597	Check if a collection is deleted .
12598	Load a community .
12599	Load a featured community .
12600	Dump objects to a file .
12601	Check if a thing is available .
12602	Delete the widget .
12603	Returns the magnitude of a v .
12604	Normalize angle .
12605	Apply transform to data .
12606	Ensures that the skeleton has been updated .
12607	Set length .
12608	Set the parent of this node
12609	Calculate the pivot point of the given data .
12610	Start animation .
12611	set the state of the object
12612	Unset current state .
12613	Set the state of the bone .
12614	Unset the state of the bone .
12615	Create the model data if it does not exist .
12616	Redraw the model .
12617	Render the given object .
12618	Set the model .
12619	Writes reports to a file .
12620	Create test reports .
12621	Add a new menu .
12622	Redraw the label .
12623	Redraw the label .
12624	Draw the background .
12625	Delete a widget
12626	Redraw the label .
12627	Register event handlers .
12628	Register event handlers .
12629	Add a label to the window
12630	add an OK button
12631	Close the current dialog .
12632	add a confirmation dialog
12633	Add a cancel button .
12634	Update the progress bar .
12635	Render the actor .
12636	Render the batch .
12637	Context manager for executing a step .
12638	Check if a resource exists .
12639	Add a category .
12640	Returns the missing texture
12641	Load a model by name
12642	Load a model
12643	Return the model data for a given model
12644	Load a model from a JSON file .
12645	Adds a widget to the container .
12646	Draws the menu .
12647	Initialize the stencil .
12648	Update the scrollbar .
12649	Returns True if the mouse is at the given position .
12650	Return the p - value of the mesh .
12651	Add a new layer to the stack .
12652	Get the region of the buffer .
12653	Draw all the arrays in the buffer .
12654	Add an action .
12655	Perform a single action .
12656	Register a new identifier .
12657	Add a layer .
12658	Draw the layers .
12659	Delete all layers from the model .
12660	The border of the watching list .
12661	Return the offset of the watched list .
12662	Returns the size of the widget
12663	Read a mesh .
12664	Make a connection from a shape .
12665	Set fields .
12666	Add one or more fields .
12667	Check the existence of the element types .
12668	The space of the element .
12669	Calculate the centroids and volumes of each element .
12670	Get the angles of the mesh .
12671	Get the edges of the mesh .
12672	Return the statistics of the centroids .
12673	Set element set to node set .
12674	Convert a node to a surface set .
12675	Convert a list of surface elements to set .
12676	Returns the metadata of the fields .
12677	Return metadata as a dict .
12678	Create directories .
12679	Run post - processing .
12680	Run gmsh .
12681	Read a history report .
12682	Read a field report .
12683	Convert list to string
12684	Return a string representation of the equation .
12685	Return a list of unorted values .
12686	Parse the response .
12687	Generic GET method .
12688	Write an XYZ report to a file .
12689	Writes a field to a file .
12690	List available components .
12691	Return the error message for the field .
12692	Returns True if the exception was thrown .
12693	Set the data .
12694	Get the mode of an axis
12695	Set axis options
12696	Create a class based on the given func .
12697	Process the datafeeds .
12698	Convert value to float .
12699	Convert string to int .
12700	Generate a GraphRenderer
12701	Force a Unicode string .
12702	Returns a cleaned HTML .
12703	Return True if the given MIME type matches the given MIME type .
12704	Clean up domain name .
12705	Given a domain name return the left cuts .
12706	Generate a hash from a dictionary .
12707	Collect all the words that have been tagged .
12708	Index the document item .
12709	Invert a hash .
12710	Get the frequencies of the given hashes .
12711	Looks up the kvlayer_id for the given hash .
12712	Looks up tf . tf . tf . tf . tf . stream_id .
12713	Create stream items from f .
12714	Create a stream item .
12715	Create a ContentItem from a node .
12716	Reads a varint from the stream .
12717	Read a block from the stream .
12718	Serialize a stream item .
12719	Convert a streamitem to a dictionary .
12720	Change current working directory .
12721	Strip prefix from string .
12722	Strip suffix from string .
12723	Check if needle is a subsequence .
12724	Simple cube .
12725	Start the server .
12726	Close the server .
12727	Decorator to register a route .
12728	Decorator to register an error handler .
12729	Handle static files .
12730	Return a callback for the error page .
12731	Add a callback .
12732	Resolves the route with the given path .
12733	Resolve a non - literal route .
12734	Normalizes pattern and patterns .
12735	Response .
12736	Add a new header .
12737	Set a cookie .
12738	Generate a response line
12739	The media type .
12740	Get all values of a key
12741	Remove all files in a directory .
12742	Return a list of open files .
12743	Print file type statistics .
12744	Run a rejester run .
12745	Attempt to fetch data from a work unit .
12746	Return a list of lines from a file .
12747	Generate a random amino acid pair .
12748	Return a random amino acid pair .
12749	Morph a sentence .
12750	Show the similarity of the application .
12751	Print a hiragana query .
12752	List entities .
12753	Show shortsum for shortsum .
12754	List keywords .
12755	Display a timeline .
12756	Create a stage .
12757	Initialize a list of stages .
12758	Initialize all stages .
12759	Run a generator .
12760	Run all the writers .
12761	Run all incremental transformations on a stream .
12762	Replace the pipeline with the given name .
12763	Create a WSGI application .
12764	Takes a list of tokens and creates a list of tokens that are unique .
12765	Returns True if all target_indions match the given target_indions .
12766	Return True if target_indions matches any of the chains in the chain .
12767	Match lookahead .
12768	Returns a list of tuples matching the given stream item .
12769	Create a tagger configuration file .
12770	Align an XML chunk to the given file .
12771	Terminate the child .
12772	Compute the multidimensional distribution of n p .
12773	Replace email addresses .
12774	Iterate over the sentences of the document .
12775	Create a label index for the given annotation item .
12776	Make a list of sentences from a stream .
12777	Convert HTML entities to unicode .
12778	Create a cleaned file .
12779	Create a GPG file .
12780	Remove trailing whitespace from utf8 .
12781	Align one file to another .
12782	Make absolute paths to absolute paths .
12783	Initialize the pipeline configuration .
12784	Generate a J -smith chunk for the given path .
12785	Replace invisible characters .
12786	Clean HTML .
12787	Makes a clean_visible file and creates it .
12788	Remove trailing whitespace from a string .
12789	Main entry point .
12790	Try to load a stage .
12791	Loads the external variables from a path
12792	Load stages from a module .
12793	Initialize a stage .
12794	Read a sequence of integers from the given index .
12795	Return True if the given href is a valid domain
12796	Make HTML labels .
12797	Yield all the paths in the given directory .
12798	Iterate over all tasks .
12799	Return a list of available tasks .
12800	Yields tokens from a sentence .
12801	Get a list of sentences .
12802	Retry a function .
12803	Verify that the given data is valid .
12804	Get S3 bucket .
12805	Decode data to streamcorpus .
12806	Get a chunk from a bucket .
12807	Convert a kvlayer to Kvlayer key .
12808	Convert kvlayer key to stream id .
12809	Return the key for a stream item .
12810	Run the application .
12811	Build an argument parser .
12812	Adds XPaths to a stream .
12813	Convert sentences into tokens .
12814	Convert a list of characters into an offset .
12815	Convert a list of character offsets into an xpath object .
12816	Add an element .
12817	Return an xpath piece .
12818	Return the index of the text node .
12819	Iterate over all descendants of elem
12820	Select the elements of a source .
12821	Select all XML elements matching the given name .
12822	Filters the given XML name matching the given pattern .
12823	Select an attribute from an XML attribute .
12824	Return the next sibling of an element .
12825	Make an XML tree .
12826	Run inkscape .
12827	Export inkscape .
12828	Export svg to PDF .
12829	Export an SVG file .
12830	Get the jinja environment for a file .
12831	Setup the template file .
12832	Fills the given document with the given content .
12833	Save the content to a file .
12834	Retrieve the docstring from a template file .
12835	Fill the SVG document in the SVG document .
12836	Render a file .
12837	Render a PDF file .
12838	Parse an XML file .
12839	Parse an HTML source .
12840	Parse HTML fragment .
12841	Insert text into the xml .
12842	Insert an xml node before the node .
12843	Clone this node .
12844	Execute namelist .
12845	Return a string representation of the XML element .
12846	Insert a child into the xml
12847	Parse config file .
12848	Get Google API credentials .
12849	Create event datetimes .
12850	Create a google calendar event .
12851	Main event handler .
12852	Get extension from filepath .
12853	Add an extension to a file .
12854	Get a temporary file .
12855	Remove all files from workdir .
12856	Convert csv to JSON
12857	Replace a file with new content .
12858	Parse the HTML .
12859	check next tag
12860	Create an italic tag .
12861	Creates a strong tag .
12862	Wrap the given tag .
12863	Parse a tag .
12864	Clean line breaks .
12865	Parse a single URL .
12866	Parse an attribute .
12867	Translate a dictionary of key values .
12868	Convert the object to a JSON string .
12869	Return a list of files matching the given regex .
12870	Concatenate multiple strings .
12871	Yields the beginning of a full string .
12872	Yields the part of the full string .
12873	Yield the length of a string .
12874	Yield boolean values .
12875	Apply an expression to a sequence .
12876	Look up a table by its key .
12877	Replace chars in svg code .
12878	Validate svg file .
12879	Merge two svg files .
12880	Merge multiple PDF files .
12881	Extract font faces from a list of font files .
12882	Embed font files into SVG .
12883	Check if input is iterable .
12884	Check if the function is valid .
12885	Recursively iterate over inputs .
12886	Creates and returns a string with the given options .
12887	Recurse multiple inputs .
12888	Convert an object to a string .
12889	Convert an object to a number .
12890	Convert an object to a boolean .
12891	Serialize an XPath .
12892	Change the encoding of a file .
12893	Save text into a QR code .
12894	Launch a gromacs .
12895	Call a shell command .
12896	Convert a tex file to PDF .
12897	Compute the options for a psych tree .
12898	Transform a GeoGeometry to another .
12899	Create a GeoJSON object .
12900	Expand other to other .
12901	Intersect two Envelope objects .
12902	Determine if this Envelope intersect with another .
12903	Return a 2D polygons .
12904	Create a DataFrame from a ZNM .
12905	Write self . df to file .
12906	Select rows based on condition .
12907	Return a table with the given nucleotide .
12908	Return the intersection of the table .
12909	Return a Table with the given name .
12910	Returns a list of elements that are odd .
12911	Returns a list of elements that match the given name .
12912	Return True if all elements are equal .
12913	Calculate the error .
12914	Mean squared error .
12915	Calculate the binding energy .
12916	r Number of the neutron mass .
12917	The neutron mass .
12918	r Returns the S2 mass of the potential .
12919	r Returns the S1 mass .
12920	Calculate the derived derived derived from self .
12921	Create a new db session .
12922	Derive a key from the master password
12923	Bootstrap the database .
12924	Search for domains
12925	Modify a domain .
12926	Creates a new domain .
12927	Extract hbs .
12928	Return the prefix of a vpath .
12929	Return the identifier of the security group .
12930	Entry point .
12931	Initialize logging .
12932	Update a file .
12933	Return a dictionary with all available drivers
12934	Return the driver for a given path
12935	Convert a geom to an array .
12936	Rasterize a layer
12937	Open a raster file .
12938	Deserialize a MEG image .
12939	Creates a copy of the raster .
12940	List of DMD_CREATION_CREATION_CREATION_LIST
12941	Create a raster .
12942	Sets the geo transform
12943	Read an array from the file .
12944	The envelope of the image .
12945	Get image driver .
12946	Create a new raster .
12947	Return masked array .
12948	The nodata .
12949	Reads an Raster .
12950	Resample the image .
12951	Save image to disk .
12952	Sets the projection .
12953	Warp this Raster to a specified location .
12954	Calculate chunklen .
12955	Look up an alphabet from the given charset .
12956	Encode a chunk at the given index .
12957	Convert a chunk to a long integer .
12958	Get chunk from data
12959	Memoize a function .
12960	Return a regexp for the given file .
12961	Normalize datetime format .
12962	Detect timezone .
12963	Convert the swagger into a dictionary .
12964	Activate a postmortem hook .
12965	Return a pretty printed message .
12966	Handle a job .
12967	Run the worker .
12968	Run a worker pool .
12969	Sets the classification .
12970	Send a message to the server .
12971	Turn on a device .
12972	Turn on switch .
12973	Turn a light on a device .
12974	Turn off a device .
12975	Send a message to the queue .
12976	Send a message to the transport .
12977	Create an adapter .
12978	Sets the nature of this Device .
12979	Update the configuration with the given options .
12980	Reset all meta data
12981	Set config files .
12982	Iterate over all the options in the config .
12983	Iterate over all default options .
12984	Create a configuration dictionary .
12985	Update the configuration with the conf dictionary .
12986	Read configuration from file .
12987	Read configuration files .
12988	Return the names of the option .
12989	Return a list of sections .
12990	Helper function to resolve command options .
12991	Add options to the parser .
12992	Build the parser .
12993	Parse command line arguments .
12994	Run the zsh command
12995	Executor for globus completion
12996	Execute shell command .
12997	Run bash completion .
12998	Start a master .
12999	Connect to the underlying transport .
13000	Called when a line is received .
13001	Called when the worker is lost .
13002	Called when a job is loaded .
13003	Called when a response is received .
13004	Close the job .
13005	Runs a list of jobs .
13006	Close the server .
13007	Called when the server changes .
13008	Add a result .
13009	Waits for the waiter to finish .
13010	Loads the next job from the queue .
13011	Mark the job as completed .
13012	Add a result to the job .
13013	Cancel all pending jobs .
13014	Wait for all active jobs to finish .
13015	Distribute available jobs .
13016	Add a new job set to the queue .
13017	Get a single job .
13018	Get a job from the server .
13019	Add a result to the job .
13020	Called when the job set is completed .
13021	Closes the server .
13022	Remove duplicates from a list .
13023	Returns True if the given object matches the given regex .
13024	Get the latest entries .
13025	Returns the AWS region .
13026	Filter entries by exclude
13027	Get details about a host
13028	Create an instance from a dictionary .
13029	Get the value of an attribute .
13030	Sort entries by attribute .
13031	Return the line as a string .
13032	Create an instance from a Boto instance .
13033	Returns True if the attribute matches the filter .
13034	Display the name of the device .
13035	Render a table .
13036	Add a timestamp to the logger .
13037	Configure logging .
13038	Wraps a structlog .
13039	Setup a Celery application .
13040	Get information about a particular worker
13041	Delete a job .
13042	Return switch option .
13043	Return a dict of configuration options
13044	Set configuration parameters from a dictionary .
13045	Handler for config .
13046	Create a list of completion files .
13047	Render a list of columns .
13048	Render a row .
13049	Render a table .
13050	Prepare a list of rows .
13051	Color a number .
13052	Generate a hash from a string .
13053	Generate a random color .
13054	Prompt the user for a given input .
13055	Checks the username and password
13056	Check if token is valid .
13057	Decorator to check if a request is authenticated .
13058	Return True if the process is running False otherwise .
13059	Import an object from a module .
13060	Return the IP address of the internet .
13061	Make a request to the API .
13062	Prepare post parameters .
13063	Run the server .
13064	Render the template with the given value .
13065	Run a command .
13066	Stream commands from a thread .
13067	Generate a list of commands .
13068	Returns a list of days between two dates .
13069	Return the path to the command
13070	Build an SSH command .
13071	Build a scp command .
13072	Copy entries to the SCP server
13073	Create a copy of SCP command from a list of files .
13074	Run a command on a list of entries .
13075	Connect to an SSH server .
13076	Load the specified profile .
13077	Create a profile from command line arguments .
13078	Add a relationship to a relationship .
13079	Return a list of all related components of the given reltype .
13080	Load the relationship from the source .
13081	Add a new part .
13082	Load a Part instance .
13083	Searches for the overrides by name .
13084	Create a subclass from an XML element .
13085	Parse a string .
13086	Build the view .
13087	Assign a force field to an AMP .
13088	Determine the maximum brightness of the parameters .
13089	Make a dictionary of force parameters .
13090	Return the object as a stream .
13091	Return a generator that yields matching segments .
13092	Copy a directory .
13093	Open a bucket .
13094	Uploads an S3 bucket to S3 .
13095	Upload a file to a bucket .
13096	Upload an object to a bucket .
13097	List all files in a directory .
13098	Return all directories in a directory .
13099	Create a prefix for a directory .
13100	Delete a file .
13101	Login to LTD Keeper server
13102	returns the english language
13103	Delete a directory .
13104	Returns the URL of the home .
13105	Decorator to silence a function .
13106	Project breadcrumb .
13107	Project a breadcrumb box .
13108	Calculate the energy of an AMP .
13109	Determine the internal energy of an AMP object .
13110	Returns a list of all hotspots .
13111	Get a token from the Keeper API .
13112	Uploads a project
13113	Check if Travis event should be skipped .
13114	Purge a surrogate key
13115	Register a build .
13116	Updates the build url
13117	Recursively update a dictionary .
13118	Main entry point for the CLI .
13119	Command line tool edit .
13120	Pack directories into subdirectories
13121	Split a path into a directory .
13122	Return the full path of a file .
13123	Return the editor .
13124	Process a module .
13125	Generate HTML for this chart .
13126	Generate HTML for a chart .
13127	Serialize data to a chart .
13128	Convert JSON data to JSON
13129	Convert JSON to HTML .
13130	Convert a dictionary into a DataFrame
13131	Write an html file .
13132	Create chart class
13133	Encode fields .
13134	Link a GitHub user .
13135	Infer tarball url .
13136	Create an app .
13137	Delete an app .
13138	Decorator for an iterable .
13139	Generate a binary number .
13140	Generate an ip address .
13141	Generate a random date .
13142	Create a session
13143	Make a request to the API .
13144	Create a new build .
13145	Check the status of a build .
13146	Iterate over a sequence of sequences .
13147	Memoize a function .
13148	Decorator to ensure a function is unique .
13149	Add sub - commands to the parser .
13150	Returns the root argument parser .
13151	Get the description .
13152	Get the help string for this object .
13153	Run the command .
13154	Encode the given arguments .
13155	Returns a list of all the players in the database .
13156	Returns the last n activities of the given file n .
13157	Request the activity list .
13158	Request activity data from an athlete .
13159	Generate an athlete endpoint .
13160	Endpoint for an activity .
13161	Helper function to handle requests .
13162	Create a new tarball .
13163	Creates a url with the given view .
13164	Generate a title .
13165	Generate a random person .
13166	Get a random name .
13167	Render the channel data .
13168	Set the dataset .
13169	Render the chart .
13170	Check the type of the chart type .
13171	Returns the URL for the request .
13172	Open a web browser .
13173	Save the image to file .
13174	returns urlopen
13175	Read the image file .
13176	Write URL to file .
13177	Calculate the SHA256 checksum .
13178	Calculate the amount of min and max .
13179	Creates an entity name decorator .
13180	Returns a dictionary with protected claims .
13181	Return the JWKS as a dictionary .
13182	Unpacks a client metadata statement into a dictionary .
13183	Pack a metadata statement .
13184	Evaluate a metadata statement .
13185	Check if the metadata is correct .
13186	Extends a set of sms .
13187	Parse command line arguments
13188	Add command line arguments .
13189	Apply logging options .
13190	Log a verbose level .
13191	Return a map of letter numbers .
13192	Generate anagrams in a word .
13193	Return an AMP class as an AMP string .
13194	Transform a timeseries from a timeseries .
13195	Returns the last value in time series
13196	Validate page number .
13197	Get the next page of an iterator .
13198	Change a file or directory .
13199	Create an external signing service .
13200	Create an external signing service .
13201	Sign a request .
13202	Create a new object .
13203	Updates a metadata statement .
13204	Update a signature
13205	Yields the contents of a bundle
13206	Create a bundle
13207	Returns a list of urls for the given asset type .
13208	Render HTML tags for the given asset type .
13209	Return HTML tags for the given asset type .
13210	Convert url to protocolise .
13211	Extract links from a web page .
13212	Connect to AMP server .
13213	Return a list of module names .
13214	Import service modules
13215	Convert a date parameter to dates .
13216	Return a copy of the given list of fields .
13217	Apply a function to a date map .
13218	Prints a cursor to the database .
13219	Print the cursor to the database .
13220	Return a list of tasks from a list of tasks .
13221	Add default dependencies for a project .
13222	Add defaults for a project .
13223	Add default sequences to the project .
13224	Adds a new Rnd shot to the workflow
13225	Post save handler .
13226	Generate global snapshot .
13227	Create all tasks in the given element .
13228	Connect to the given peer .
13229	Send data to peer .
13230	Get the value of a given config key .
13231	Decorator to add a function to the OpenStack .
13232	Decorator to add an event to a Cinder .
13233	Decorator for neutron events .
13234	Decorator to add an event .
13235	Decorator to add an event .
13236	Decorator to add an event to Keystone .
13237	Decorator to add a custom event type .
13238	Add a factory .
13239	Remove a factory .
13240	Connect to the given factory .
13241	Receive data from a connection .
13242	Disconnect a connection .
13243	Execute a remote command .
13244	Called when an AMP connection is made .
13245	Handle multiplexed connection .
13246	Called when data is received .
13247	Transmit data .
13248	Called when a connection is lost .
13249	Returns the protocol for the given connection identifier .
13250	Receive data from a remote connection .
13251	Disconnect from the given connection .
13252	Return a centered string centered on a string .
13253	Prints a clock of the given string
13254	Return the version number .
13255	Identify the unit framework for the given unit .
13256	Assert that the unit is convertible to the given unit .
13257	Pad data to specified block size .
13258	Pads a block of data .
13259	Sign a request .
13260	Gather metadata statements .
13261	Pretty print a dictionary of words .
13262	Argument parser .
13263	The main entry point
13264	Handle incoming data .
13265	Called when an unregistered connection is received .
13266	Creates a function stub .
13267	Ping a remote call .
13268	Return a regex for the command .
13269	Return a new AudioList from a string proto .
13270	Convert an object into a string .
13271	Verify the metadata .
13272	Parse a JWKS response .
13273	Dump a pg_dump to a file .
13274	Return a list of databases .
13275	Get files from a path .
13276	Synchronize files in a folder
13277	Decorator that checks if a user has not been authenticated .
13278	Login to the user .
13279	Build a module from a package .
13280	Return a KafkaStorage instance .
13281	Load JSON from file .
13282	Sign a JWT .
13283	Request a signed JWT .
13284	Decorator for wrapping functions .
13285	Given a test directory and a test directory load all the files .
13286	Run tests .
13287	Get the score of a letter .
13288	Calculate the word score .
13289	Generator for wordlists
13290	Determine if a wildcard word is valid .
13291	Main entry point .
13292	Run the command line .
13293	Called when a string is received .
13294	Return a command and responder function .
13295	Parse a request from the remote server .
13296	Run a command and return the response .
13297	Writes the response to the transport .
13298	Called when a connection is lost .
13299	Builds a JSONAML address .
13300	Convert JWKS to a KeyJar .
13301	Load a KeyJar from a JSON string .
13302	Process a message .
13303	Process event handler .
13304	Process a neutron request .
13305	Process a request .
13306	Process a message .
13307	Process a keystone event .
13308	Process a request .
13309	Run the wsgiref server .
13310	Print a message to stdout .
13311	Print a message to stderr .
13312	Register a new CommandSubClass .
13313	Register a CommandSubClass .
13314	Return a string representation of the constraint .
13315	Parse the given string .
13316	Update completer dictionary .
13317	Connect to the MQ server
13318	Initialize mq .
13319	Initialize service modules .
13320	Initialize the NVR consumer .
13321	Initialize cinder consumer .
13322	Initialize a neutron consumer .
13323	Initialize consumer consumer .
13324	Initialize consumer consumer .
13325	Enables openstack components .
13326	Get information about a song .
13327	Download a song .
13328	Execute all instructions .
13329	Load a name from a globals object
13330	Call a function in the stack .
13331	Dump a database to a file .
13332	Render the code for the given code .
13333	Emitate the application .
13334	Run the application .
13335	Change the current working directory .
13336	Copy files from src to dst .
13337	Run the debugger .
13338	Get the time of a file .
13339	Returns True if the item has changed since the last time .
13340	Syncs the database
13341	Remove all files in the directory
13342	Scrape feed .
13343	Download the image .
13344	Check if the image has been modified .
13345	Pretty - print a tag function .
13346	Find the caller for the given source .
13347	Returns the defining component of a PE .
13348	Main entry point .
13349	Find a symbol by name .
13350	Check if the given root is contained in the given root .
13351	Returns True if pe_pe_pe_pe .
13352	Get data type name .
13353	Get related attributes .
13354	Creates an Enum .
13355	Create a lambda function from a metamodel .
13356	Create an external entity .
13357	Create a function from metamodel .
13358	Generate a constant from CNST .
13359	Creates an instance of the decorated function .
13360	Creates a derived derived attribute from the given object .
13361	Create class from o_obj
13362	Generate a simple association .
13363	Create an association .
13364	Create an association .
13365	Creates a component of a model .
13366	Perform a worker .
13367	Accept a reply .
13368	Reject a response .
13369	Raise an exception .
13370	Wait for a message to finish .
13371	Establish a worker .
13372	Dispatch a reply .
13373	Guess type name .
13374	Deserialize a value into a UUID .
13375	parses txt
13376	Rearrange the end of a txt
13377	Retrieve a single document .
13378	Get many documents .
13379	Put items into the database .
13380	Delete a document .
13381	Delete all mapping from index
13382	Delete the index
13383	Iterate over all FCS files .
13384	Iterate over the IDs of a feature .
13385	Scans the given prefix for a given prefix .
13386	Scan a prefix for a prefix .
13387	Yields all the hits from the database .
13388	Iterate over a fulltext search .
13389	Yield keywords for a keyword .
13390	Iterate over keywords matching the query .
13391	Iterate over the indexes of a feature .
13392	Return a mapping of feature names to feature names .
13393	Returns a dictionary of filter_ranges .
13394	Create the index .
13395	Creates mapping from index
13396	Get the mapping for the index
13397	Get the types of the index
13398	Return a disjunction disjoint from a query .
13399	Return the number of bytes in the file .
13400	Count the number of bytes in the file .
13401	Pretty - print a string of features .
13402	Find known secrets .
13403	Default formatter .
13404	Convert a link to a string .
13405	Pretty - print an identifier .
13406	Check validity of a metaclass .
13407	Check the validity of a link .
13408	Check validity of a subtype .
13409	Iterate over features .
13410	Serialize val to int .
13411	Put a list of items into the database .
13412	Remove all tables from the database .
13413	Iterate over a set of key ranges .
13414	Scans a set of IDs .
13415	Scan an index .
13416	Set index prefix for val_prefix .
13417	Return the index prefix and return key .
13418	Wrapper for index_prefix .
13419	Define an index .
13420	Put an index into the index .
13421	Store a new index .
13422	Generator for index keys .
13423	Return the index for the given name .
13424	Checks if the given package is valid .
13425	Add a translation .
13426	Get the type name for a device .
13427	Get a reference to an attribute
13428	Build core type .
13429	Build an enum type .
13430	Build a struct type .
13431	Build a user type .
13432	Determine the type of the component
13433	Build a class from an object .
13434	Build an XML component .
13435	Build an XML Schema .
13436	Return a pretty formatted version of xml_string .
13437	Fetch all available bikes .
13438	Set positional information .
13439	Decorator to track production information .
13440	Determine if t is a double precision .
13441	Convert a txt to a string .
13442	Arrange the parser .
13443	Takes a string t and returns it .
13444	Evaluate the end of the word
13445	Return the position of the end of t .
13446	Determines the dot product of t
13447	Compute the L - R
13448	returns the RQR
13449	Return a QARK instance of the lexer .
13450	Convert txt to LSTAN
13451	Return the position of the segment
13452	Convert t into a string .
13453	Create a queue .
13454	Delete a queue .
13455	List all queues .
13456	List exchanges .
13457	Purge a queue .
13458	Create and return a Message object .
13459	Read the image .
13460	Check if the input is visible .
13461	Main entry point .
13462	Serialize value to dictionary .
13463	Serialize an association .
13464	Serialize class .
13465	Main entry point .
13466	Search for ngrams .
13467	Partition a collection of conditions .
13468	Run the database .
13469	Return a bidi translation .
13470	Find the link between two inst1 and a relationship .
13471	Return a copy of this target .
13472	Compute lookup key for given instance .
13473	Computes the index key for the given instance .
13474	Return the type of the attribute .
13475	Create a new instance .
13476	Iterate over all metaclasses .
13477	Define a metaclass .
13478	Send a ZMQ socket .
13479	Receive a ZMQ socket .
13480	Display dead code .
13481	Parse a list of email addresses .
13482	Decorator for RPC methods .
13483	Return a dictionary of the registered RPC spec .
13484	Normalize postcode middleware .
13485	Returns the next read function .
13486	Accepts SYS and SYS .
13487	Accepts a C element and accepts C and C .
13488	Accept one or more EPGs .
13489	Get the brightness .
13490	Match the pattern .
13491	Find the match for the given position .
13492	Returns the selection for a character .
13493	Called when the cursor is changed .
13494	Return the exception information .
13495	Creates an inputhHook for the given application .
13496	Get a mapper by name .
13497	Decorator to add a URL to the template .
13498	Decorator to add a URL to a URL .
13499	Register a function .
13500	Add a function to the pool .
13501	Call the given URL .
13502	Execute a command .
13503	Prompt the user for a prompt .
13504	Called when the cursor is pressed .
13505	Return the previous history .
13506	Return the next history .
13507	Handle an execute reply
13508	Check if the history is locked .
13509	Return the edited history .
13510	Set the history .
13511	Stores the history .
13512	Called when the client is closed .
13513	Build the record collection .
13514	Convert collection to pandas DataFrame .
13515	Wrapper for spin_frame
13516	Set attributes from kwargs .
13517	Subscribe to all topics .
13518	Log a message .
13519	Merges two lists of lists .
13520	Iterate over a remote .
13521	Convert a notebook to a new notebook
13522	Returns the supported platform platform .
13523	Return an importer for the given path item .
13524	Instantiate a StringIO object .
13525	Parse version string .
13526	Overridden to override setuptools
13527	Add a distribution .
13528	Find all installed plugins .
13529	Get the path to the cache directory .
13530	Parse a requirement .
13531	Return parsed email info .
13532	Generate dependencies for the package .
13533	Parse a filename .
13534	Collapse leading lines into text .
13535	Reimplemented to hide the widget .
13536	Displays the text edit widget .
13537	Get the current text cursor .
13538	Update the current cursor .
13539	Register the admin site .
13540	Return a list of disk partitions .
13541	Computes the total cpu time for the system
13542	Get the number of cpu times per cpu
13543	Runs a non - blocking non - blocking command .
13544	Return a raw block of data .
13545	Update tabbar visibility .
13546	Create a tab with the current kernel .
13547	Add a tab with a given frontend .
13548	Add an action to the menu .
13549	Make dynamic magic magic .
13550	Populate all the magic menu .
13551	Close the window .
13552	Generate a password .
13553	Return True if the passed passphrase is valid .
13554	Display a Jaxitable boolean cell
13555	Indent a short title .
13556	Return a list of the Alitable booleans .
13557	Toggle boolean boolean
13558	Returns True if the user has permission to change the tree editor .
13559	Check if the user has delete permission .
13560	Adds nodes to the graph .
13561	Make a bintree .
13562	Submit jobs to the graph .
13563	Validate that all nodes in the G is completed .
13564	Make a color table from a class .
13565	Return a copy of this ColorScheme .
13566	Add a ColorScheme table .
13567	Set the active scheme .
13568	Return the path to the home directory .
13569	Handle IPub messages .
13570	Handle a stdin request .
13571	Wait for a kernel to finish .
13572	Set the style of the model .
13573	Get the format for a given token .
13574	Returns a QTextCursorCursor from a document .
13575	Get the format for a given token .
13576	Given a list of paths find the appropriate command .
13577	Normalize path .
13578	Raise an exception if the package is not a package .
13579	Raise an exception if the value is not an entry point .
13580	Check if the last blank line is blank .
13581	Return True if the source is between two lines .
13582	Transform an assignment system line .
13583	Transform a line to an assignment magic .
13584	Transform a line to a line .
13585	Transform an IPy prompt to a line .
13586	Push lines to the compiler .
13587	Push input to the client .
13588	Find the indentation of the given line .
13589	Store a list of lines .
13590	Reset the source .
13591	Process cell magic .
13592	Append a cell magic to the buffer .
13593	Transform a cell to another cell .
13594	Push lines to IPythonInput .
13595	Initialize the registered observers
13596	Post a notification .
13597	Returns a set of observers for a notification .
13598	Add an observer .
13599	Create a new background job .
13600	Update the status codes .
13601	Print the information about a group .
13602	Flush a group .
13603	Create a new status .
13604	Update the status of the group .
13605	Initialize the background job .
13606	Insert a new value at index .
13607	Return a shallow copy of the object .
13608	Declare a variable .
13609	Declare a variable .
13610	Declare a variable .
13611	Set the current working directory .
13612	Move the lock .
13613	Calculates the distance between two states .
13614	Return a dictionary with the default values .
13615	Check if the table exists .
13616	Convert a list to a dictionary .
13617	Render an expression .
13618	Print a warning message .
13619	Parse a config file .
13620	Prints a table .
13621	Create a link with the given URL .
13622	Generate javascript file .
13623	returns css file link
13624	Add an image .
13625	Subtracts a value .
13626	Multiply a value .
13627	Calculate the divisible value .
13628	Return the value of a numeric value .
13629	Returns the verbose name for the given object .
13630	Parse input line .
13631	Add options to the parser .
13632	Add a builtin value .
13633	Remove a builtin object .
13634	Deactivate all builtins .
13635	Get the name of the given requirement .
13636	Yield all links that are linked to this page .
13637	Return a list of unshell commands .
13638	Main entry point .
13639	Add an action .
13640	Append an action code to the parser .
13641	Run the command - line .
13642	Print help for the given topic .
13643	Handle help .
13644	Checks if the given options are ok .
13645	Execute a script .
13646	Print debug information .
13647	Unserialize an object .
13648	Set the display hook .
13649	Decorator to log errors .
13650	Check if url is a valid URL .
13651	Validate url .
13652	Validate url container .
13653	Pull keys from a list .
13654	Select random ports .
13655	Decorator to mark a function as a remote function .
13656	Decorator to register a function as a function .
13657	Apply a set of sequences .
13658	Returns the last n lines of the current readline
13659	Set auto - indent mode .
13660	Initialize logstart .
13661	Save the current module state .
13662	Restore the module state .
13663	Register a function to be run .
13664	Create a new fake module .
13665	Copies the main namespace to the cache .
13666	Initialize the userns .
13667	Return a list of all NS references .
13668	Reset the instance .
13669	Delete a variable .
13670	Reset the selector .
13671	Push variables to user namespace .
13672	Return a dictionary of dictionaries with aliases .
13673	Get the property of an object .
13674	Find a struct by name .
13675	Inspect an object
13676	Initialize history manager .
13677	Show a traceback .
13678	Show the traceback .
13679	Print the traceback to stdout .
13680	Show a SyntaxError .
13681	Pre - readline .
13682	Completes completion .
13683	Set a custom completer
13684	Sets the frame .
13685	Run a line magic .
13686	Find a magic magic .
13687	Define a macro .
13688	Execute a system command .
13689	Print the rewrite command .
13690	Returns a dictionary of variable names .
13691	Evaluate user expressions .
13692	Evaluate expression .
13693	Execute a file on the system .
13694	Run a cell magic .
13695	Run a single cell .
13696	Run AST nodes .
13697	Enable pylab .
13698	Expand a variable .
13699	Creates a temporary file .
13700	Extract input lines from the history .
13701	Find user code .
13702	Stop the history session .
13703	Publish a message to sender .
13704	Sends a message to a target .
13705	A decorator to skip a function .
13706	A decorator that checks if a given failure is raised .
13707	Mark a function as deprecated .
13708	List all profiles in a directory .
13709	Return a list of all installed profiles
13710	Find a distribution by its requirement .
13711	Run a command .
13712	Return the path to the given file .
13713	Read the next line from the file .
13714	Send data to the child process .
13715	Sends an integer to the terminal .
13716	Compile regex pattern .
13717	Expect a pattern .
13718	Wait for incoming data to finish .
13719	Compile regex pattern .
13720	Return a list of strings that match the raw string .
13721	Search for a buffer .
13722	Log a message listener .
13723	Unpack a directory into a directory .
13724	Emit a message .
13725	Return the last error .
13726	Execute a command .
13727	Find the source code for a given file .
13728	Returns a list of executed arcs .
13729	Return a list of arcs that are not executed .
13730	Returns a sorted list of arcs that are not executed .
13731	Return a list of branch lines .
13732	Returns the total number of branches .
13733	Return a list of arcs that are missing
13734	Return statistics about each branch .
13735	Set the precision .
13736	Returns the percent covered by the statement .
13737	Returns a string representation of the pc .
13738	Highlight text highlighting .
13739	Highlight the given string .
13740	Highlight keywords in string .
13741	Run the function with the given file .
13742	Remove quotes from a string .
13743	Indent a string .
13744	Return a marquee string .
13745	Convert screen to screen string .
13746	Recursively dedent text .
13747	Wrap paragraphs in text .
13748	Given a list of rlist and a separator find the width of each row in the list .
13749	Return the value of a list or default if it is a default .
13750	Given a list of items and a list of dicts compute the desired number of rows .
13751	Return a list of fields .
13752	Build kernel argv
13753	Initialize SSH tunnels
13754	Pretty print an object .
13755	Print an object to stdout .
13756	Return the MRO class for an object .
13757	Default indentation .
13758	Generate a subclass of seqpinter .
13759	Convert a dict to a protobuf .
13760	Pretty print object .
13761	Print regex pattern .
13762	Helper to print a type .
13763	Helper to print a function .
13764	Print exception information .
13765	Decorator for registering a function with the given type .
13766	Returns a deferred function for a given type .
13767	Add text to the buffer .
13768	Add a breakable breakable .
13769	End a group .
13770	Flush the buffer .
13771	Pretty print a pretty printable object .
13772	Add the exception colors to the exception .
13773	Write a single row to an ODS table .
13774	Get the text of the current clipboard .
13775	Get clipboard .
13776	Get text from clipboard .
13777	Get the prefix of a pip build .
13778	Receives a dictionary .
13779	Extract dates from an object .
13780	Takes a datetime or datetime object and returns a list of datetime objects
13781	Return a default datetime object .
13782	Convert an object to a JSON string .
13783	Check if site directory is valid .
13784	Write a script to disk .
13785	sleep time
13786	Create an argument parser .
13787	Convert pyx sources to ctypes
13788	Run the zmq connection .
13789	Create a package finder .
13790	Set log level .
13791	Default logging handler .
13792	Check if a flag has changed .
13793	Print help for all aliases .
13794	Print the help of the flags .
13795	Print all subcommands .
13796	Print help of the configuration .
13797	Print examples .
13798	Update the configuration .
13799	Initialize a subcommands .
13800	Recursively flatten all flags in this class .
13801	Parse a command line .
13802	Load a config file .
13803	Generate a configuration file .
13804	Downsample a numpy array .
13805	Format info .
13806	Write a message to the output .
13807	Called when a config is changed .
13808	Return a help string for the class .
13809	Return the help for the given trait .
13810	Return a fully qualified configuration section .
13811	Clears all registered instances .
13812	Create an instance .
13813	Format a failure traceback .
13814	Called when an error occurs .
13815	Flush the sub - socket .
13816	Start the channel .
13817	Read from file .
13818	Read bytes from the stream .
13819	Run a subprocess .
13820	Split a string .
13821	Compress a Dhistogram .
13822	Class decorator .
13823	Add a magic magic to a dictionary .
13824	Decorator for marking a method .
13825	Decorator to mark a function as a magic marker .
13826	Return a list of all the documentation for the current module .
13827	Registers a list of magic objects .
13828	Register a new function .
13829	Format a latex string .
13830	Parse command line options .
13831	Set the default option .
13832	Entry point for IPython .
13833	Creates a task with the given callable .
13834	Return the task information for a given task .
13835	Return the instance of the task .
13836	Calculate the next run .
13837	Submit a new task .
13838	Run a task .
13839	Run the simulation .
13840	Runs all iterations of a callable .
13841	Execute a callable .
13842	Find the URL file
13843	Bind a kernel to IPython .
13844	Execute the test steps .
13845	Creates an interrupt event .
13846	Starts the thread .
13847	Return a dict containing only the keys that match the given pattern .
13848	Returns a list of namespace names matching the given filter pattern .
13849	Validates that the options are mutually exclusive .
13850	Renders the current active figure if any .
13851	Close all available figures .
13852	Send matplotlib figure
13853	Load an IPython extension .
13854	Unload an IPython extension .
13855	Generate random ports .
13856	Initialize the notebook .
13857	Handle a SIGINT .
13858	Confirm exit .
13859	Cleanup all kernels
13860	Generate market price options
13861	Replace multiple strings in a dictionary .
13862	Renders the shell .
13863	Bulk launch a kernel .
13864	Create a zipfile .
13865	Fix prerequisites .
13866	Check if an object is mappable .
13867	Return partition of seq .
13868	Monkey patch the pxpect object .
13869	Run the given file .
13870	Run a source .
13871	Run the coverage report .
13872	Generate an XML file .
13873	Download a file from the given file .
13874	Reduce the frequency of a list of frequencies .
13875	Compute the number of digit frequencies for a file .
13876	Convert a txt file to a list of digits .
13877	Calculate the frequency of a list of digits .
13878	Calculate the frequency of two digits .
13879	Calculate the frequency of a set of digits .
13880	Plots two digit - digit frequencies .
13881	Plots one digit frequency counts
13882	Print debug information .
13883	Reverse urlresolvers .
13884	Return True if prefix is private
13885	Create a test suite .
13886	Run the debug script .
13887	Run a debug script .
13888	Create a debug script .
13889	Return a dict with all the keys in hashroot .
13890	compress all files
13891	Return a list of all the keys in a glob .
13892	Allow the given record .
13893	Return True if the record matches any match .
13894	Format an error .
13895	Embed an interactive shell .
13896	The main loop .
13897	Get new csv writers .
13898	Prepare translations for languages .
13899	Writes entries to the po file .
13900	Write header to file .
13901	Subscribe to a user .
13902	Initialize the parser .
13903	Runs a python module in the specified directory .
13904	Run a python file .
13905	Make code object from a python file .
13906	Make a code object from a Python file .
13907	Convert an HTML table to HTML table .
13908	Set the current value .
13909	Cancel completion .
13910	Return the index of the given row .
13911	Selects up the cursor .
13912	Selects down the cursor .
13913	Selects the left of the right
13914	Selects the right
13915	Update the list of items .
13916	Calculate the frequency of a text file .
13917	Print a word frequency .
13918	Return a string representation of this element .
13919	Write data to a file .
13920	Validate a pin .
13921	Send a shared pin to the shared pin .
13922	Deletes a shared pin .
13923	Send a pin to the specified user .
13924	Delete a user pin .
13925	Subscribe to a topic .
13926	List the subscriptions for a user .
13927	Decorator to monitor a function .
13928	Begins a progress monitor .
13929	Start a task .
13930	Context manager for submonitor .
13931	Update the progress monitor .
13932	Add a new sub monitor .
13933	Log the unit .
13934	Render an IPython page .
13935	Make sure that the build directory exists .
13936	Load a configuration file .
13937	Load configuration from disk .
13938	Read the configuration file .
13939	Load flag from config
13940	Decode argv into unicode .
13941	Load configuration from IPython .
13942	Load and parse the configuration .
13943	Parse command line arguments .
13944	Convert the parsed flags into the config .
13945	Find a module by name .
13946	Register a stop callback .
13947	Start a new process
13948	Stop a process
13949	Interrupt SIGINT .
13950	Find the command line options for the program .
13951	Start the MPILauncher .
13952	Send file to remote .
13953	fetch a file
13954	Returns the number of engines .
13955	Start one or more engines .
13956	Start a job .
13957	Return a default context dictionary .
13958	Parse the job id from output
13959	Write a batch script .
13960	Start a batch .
13961	Create context menu .
13962	Appends a JPEG to the image .
13963	Append a PNG to the image .
13964	Append a svg to the list .
13965	Add an image .
13966	Copies an image to the clipboard .
13967	Return the image with given name .
13968	Inserts an image .
13969	Insert SVG data .
13970	Save an image .
13971	Exit handler .
13972	Initialize the environment .
13973	Renders an interactive shell .
13974	Ask the user to exit .
13975	Set the next input .
13976	Read configuration from file .
13977	Get a list of values from a section .
13978	Get a list of lines from a given section .
13979	Load a command from environment variables .
13980	Set attributes from kwargs
13981	Load configuration from a file .
13982	Set an attribute from a config option .
13983	Expand a user .
13984	Set the delims of the expression .
13985	Split a line .
13986	Print the global matches for the given text .
13987	Match attributes .
13988	Called when the splitter is changed .
13989	Match file matches .
13990	Get alias matches .
13991	Match python matches .
13992	Return the default arguments .
13993	Completes the completion .
13994	Print tab completion .
13995	Returns True if any of the tests match .
13996	Matches a check .
13997	Extracts a subdict from a dictionary .
13998	Check if the cell is pressed .
13999	Write output to stdout .
14000	Write format data to IPython notebook .
14001	Log output to console .
14002	Raise an InvalidOperationException .
14003	Convert timestamp to Timestamp .
14004	Called when an event is changed .
14005	Dispatch a control message .
14006	Dispatch a shell message .
14007	Start the shell .
14008	Perform one iteration .
14009	Publish a pyin .
14010	Abort a request .
14011	Clear a message
14012	Return the topic for the given topic .
14013	Called when the kernel is shutdown .
14014	Prepare the module before the context .
14015	Removes sys modules from sys . modules .
14016	Return absolute path to absolute path .
14017	Check if a file exists .
14018	Check if the given object is a class .
14019	Check if the given path is a package .
14020	Get a package from a file .
14021	Return a ln - formatted string
14022	Return the last key .
14023	Apply a function to the given module .
14024	Apply a class to the given module .
14025	Get CPU CPU times
14026	Get the cmdline of the process .
14027	Get open files .
14028	Get a list of process connections .
14029	Check if a user has a group .
14030	Resolve a class by its name .
14031	Returns the percentage of a percentage .
14032	Memoize function .
14033	Mark a function as deprecated .
14034	Login to the server .
14035	Get gdocs key
14036	Ensure that the temporary path exists .
14037	Clear temporary files .
14038	Upload a file to a GDoc .
14039	Syncs the data to the local file .
14040	Download the CSV file .
14041	Upload the file to the local repository .
14042	Clear the file .
14043	Create a new QTconsole instance .
14044	Check if the url is accessible .
14045	Check if a URL has contents .
14046	Get the response code .
14047	Compare two URLs .
14048	Compare two URLs .
14049	Validate data .
14050	Clear output .
14051	Return the path to the command .
14052	Generate code units .
14053	Return the name of the module .
14054	Return the source code file .
14055	Check if the file is a Python file .
14056	Calculate the total number of seconds .
14057	Wait for the result to complete .
14058	Wait for the message to complete .
14059	Returns a dictionary with the metadata for the job .
14060	Abort this message .
14061	Return the elapsed time of the barrier .
14062	Wait until the task is ready .
14063	Publish a displaypubpubpubpubpubpublish data to IPython
14064	Wait until all outputs are ready .
14065	Wait for all messages to finish .
14066	Absolute absolute path .
14067	Prepare a list of patterns .
14068	Return the separator for the given string .
14069	Find all python files in a directory .
14070	Get the filename of a file .
14071	Return the absolute path to the given filename .
14072	Get data from a zip file .
14073	Return True if fpath matches file fpath
14074	Returns True if fpath matches fpath
14075	Maps the given path to the given alias .
14076	Start the Qt kernel loop .
14077	Run wx .
14078	Main loop .
14079	Start a GTK kernel .
14080	Loop over kernel kernels .
14081	Enable an IPython application .
14082	Return GOE .
14083	Calculate the eigenvalue of a matrix .
14084	Calculate the difference between each ensemble .
14085	Initialize a new instance .
14086	Parse a YAML file .
14087	Parse a step configuration .
14088	Initialize the crash handler .
14089	Load the configuration file .
14090	Initialize profile dir .
14091	Set the default config file .
14092	Write content to file .
14093	Erases the cursor .
14094	Return dictionary of line data .
14095	Returns a dictionary of arc data
14096	Write data to a pickle file .
14097	Read a file .
14098	Read data from a pickle file .
14099	Reads the contents of a file .
14100	Combine parallel data .
14101	Add line data .
14102	Add arc data to file .
14103	Add lines to a hash file .
14104	Return a summary of the file .
14105	Takes a list of lines and returns a list of lines .
14106	Main loop .
14107	Replace multiline history with readline history .
14108	Prompt user for raw input .
14109	Edit the syntax error .
14110	Determine if an editor should be executed .
14111	Exit the program .
14112	Get the url and revision .
14113	Create a frontend master .
14114	Initialize the Qt widget .
14115	Return info about the pub .
14116	Convert Robust to R .
14117	Return the source code for the given object .
14118	Set the color scheme .
14119	Toggle color .
14120	Format a traceback .
14121	Return a formatted traceback .
14122	Format a list of files .
14123	Format exception .
14124	Shows exceptions to the stream .
14125	Start the debugger .
14126	Set mode .
14127	Decorator to check if a user is logged in .
14128	Ensures that a module is from a list .
14129	Add a single line .
14130	Add a new section .
14131	Get a function by name .
14132	Return the code for the given expression .
14133	Render the function .
14134	Convert a value to a list of dots .
14135	Render a template .
14136	Default formatters .
14137	Registers a function with the given type .
14138	Return a deferred function for a given type .
14139	Update float precision
14140	Return all available config files .
14141	Configure the environment .
14142	Configure logging .
14143	Configure the directories in the given directory .
14144	Prints a page of pages .
14145	Prints a string to the console .
14146	Open a page from a file .
14147	Return the default pager command .
14148	Get start string from pager .
14149	Print a line of snips .
14150	Print a basic Unicode string .
14151	Convert latex to PNG .
14152	Return a PNG representation of a latex object .
14153	Determines if an object can be printed .
14154	Convert a LaTeX object to a string .
14155	Add options to the parser .
14156	Validate a list .
14157	Validate a string dict dict .
14158	Run loop .
14159	Handle incoming messages .
14160	Execute a request .
14161	Completes a request .
14162	Get information about an object
14163	Get history .
14164	Shutdown the server .
14165	Flush the pool .
14166	Send a reply to the server .
14167	Start the channel .
14168	Stop all channels .
14169	Return True if the shell is running False otherwise .
14170	Load the connection file .
14171	Write connection file .
14172	Start a new kernel .
14173	Shutdown the kernel .
14174	Restart a kernel .
14175	Kill the kernel .
14176	Interrupt a kernel .
14177	Sends a signal to the kernel .
14178	Check if the heartbeat is alive .
14179	Get the shell channel
14180	Return the sub_channel of this instance .
14181	Access the hb channel
14182	Bind a kernel to IPEngine .
14183	Print debug message to stderr
14184	Return a list of all extension classes .
14185	Check if a given step is skipped .
14186	Post a step .
14187	Finalize the extension .
14188	Recursively walk the egg directory
14189	Scan a module and check if it exists .
14190	Launch a new IPython instance .
14191	Save connection information to file .
14192	Load config from JSON .
14193	Load secondary configuration from JSON .
14194	Execute a cell asynchronously .
14195	Enable autopx .
14196	Disable autopx .
14197	Run a single cell .
14198	Run heartbeat .
14199	Run a task .
14200	Remove a task .
14201	Patch the protocol for a protocol .
14202	Monkey patch an object .
14203	Accept a connection to the server .
14204	Accept a connection .
14205	Return a proxy with the given endpoint .
14206	Save the form .
14207	Deletes the object .
14208	Make sure user is authenticated .
14209	Print the report of the morfs .
14210	Check if the module is enabled .
14211	Create an editor .
14212	Fixes an error editor .
14213	Return a list of commands .
14214	Add a function to the chain .
14215	Gets the metadata for a given path .
14216	Configure the configuration .
14217	Import an item .
14218	Try to attempt a passwordless SSH safe to the server .
14219	Try to authenticate using a passwordless keyless .
14220	Try to connect to a paramiko server
14221	Create a tunnel connection
14222	Open a tunnel
14223	Stop scheduling tasks .
14224	Unwraps an exception .
14225	Register engines .
14226	Unregister an engine .
14227	Handle an execute reply
14228	Flush all registered notifications .
14229	Send messages to the socket .
14230	Flush control replies .
14231	Flush all ignored control responses .
14232	Send an IOPub message .
14233	Simulate the spin .
14234	Stop the spin thread .
14235	Flips the server .
14236	Wait for the jobs to complete .
14237	Send an application request .
14238	Send an execute request .
14239	Get the result of a message .
14240	Get the status of a queue .
14241	Purge results from the server .
14242	Get the hub history .
14243	Send a query to the database .
14244	Return a set of opcode names .
14245	Get the byte parser .
14246	Return a set of lines matching the given regexes .
14247	Parse the tokens .
14248	Return the first line of a multiline .
14249	Returns the first line of the first line .
14250	Parse the source of the source .
14251	All arc arcs
14252	Return count of exit counts .
14253	Return a list of CodeParser objects .
14254	Iterate over byte lines .
14255	Find all the statements in the code .
14256	Return a string representation of a block stack .
14257	Split the code into chunks .
14258	Validate that a chunk is a list of entries .
14259	Generate arcs for each line .
14260	Return a list of all the chunk parsers .
14261	Return all arcs in the parser
14262	Add coverage options .
14263	Initialize coverage statistics .
14264	Generate coverage report .
14265	Check if file exists in file .
14266	Interpret a source distro name .
14267	Open a URL with authentication .
14268	Find a distribution for a given requirement .
14269	Get the parent of an object .
14270	The root of the engine .
14271	Render a template .
14272	Configure the configuration .
14273	Format an error .
14274	Split data into two lists .
14275	Convert a notebook to a nbformat .
14276	Convert hex color to RGB .
14277	Return a dictionary of colors for the given style .
14278	Get the font for the given family .
14279	Handle an execute reply .
14280	Handle a history request .
14281	Handle a message .
14282	Handle display data .
14283	Initialize the channels
14284	Execute a file .
14285	Process an execute error .
14286	Process a payload .
14287	Set default stylesheet .
14288	Edit an editor .
14289	Make the IN prompt .
14290	Make a prompt from a prompt .
14291	Called when the style sheet is changed .
14292	Handle syntax style changes .
14293	Handle a response .
14294	Create signature from url parameters .
14295	Transform a dictionary into a dictionary .
14296	Get virtual memory information .
14297	Get CPU CPU times
14298	Get the uids of the process .
14299	Get the PID of the process .
14300	Return a list of process threads .
14301	Get open files .
14302	Return the hash of a package .
14303	Return information about a given package .
14304	Return system information .
14305	Return the number of cpus .
14306	Return the number of available CPUs .
14307	Returns the next result set .
14308	Fetch one row
14309	Fetch many rows .
14310	Fetch all rows
14311	Connect to a peer
14312	Read a JSON string from a file .
14313	Read a Python file and return a nbformat .
14314	Reads data from a string .
14315	Write a file descriptor to a file .
14316	Write a file descriptor to a file .
14317	Convert metadata to metadata
14318	Load values from a dictionary .
14319	Returns True if the given name matches the given criteria .
14320	Return the desired class for the given class .
14321	Determine if the given directory exists .
14322	Determine if the given file exists .
14323	Check if the given function exists .
14324	Check if the given method matches the given method .
14325	Check if the given module exists .
14326	Read lines from a file .
14327	List pdb command .
14328	Print list of lines .
14329	\ xdef
14330	Returns the difference between two currencies .
14331	Convert from_symbol to currency .
14332	Compute the return value for a given date .
14333	Get the encoding of a stream .
14334	Get the default encoding of the stream .
14335	Write the connection file .
14336	Initialize heartbeat .
14337	Log connection information .
14338	Initialize the session .
14339	Initialize IO .
14340	Initialize the kernel .
14341	Connect to the controller .
14342	Register the controller with the controller .
14343	Convert HTML to text .
14344	Convert md file to text .
14345	Convert a domain to a FQDN .
14346	Add options to the test explorer .
14347	Configure defaults .
14348	Check if a directory exists .
14349	Return True if the given extension is a dynamic library .
14350	Call each function in a list of functions .
14351	Calls all functions in a list .
14352	Add a function to the wrapped function .
14353	Wrapper for insert_func .
14354	Format usage .
14355	Initialize the application .
14356	Write a pid file to the server .
14357	Remove the pid file .
14358	Get the PID from a file .
14359	Construct a parser .
14360	Get the real name of a magic function .
14361	Highlight the given string .
14362	Highlight the block .
14363	Set the format of the startlighter .
14364	Create a copy of this widget .
14365	Execute a shell command .
14366	Callback called when the input is finished .
14367	Perform a tab completion .
14368	Create a context menu .
14369	Check if a key press press event .
14370	Inserts the cursor prompt .
14371	Handle a complete reply .
14372	Execute a callback .
14373	Handle all user expressions .
14374	Handle an execute reply .
14375	Handle input request .
14376	Handle the kernel dead .
14377	Handle an object reply .
14378	Handle a Pyout message .
14379	Handle a stream .
14380	Handle a shutdown message
14381	Execute a file
14382	Interrupt the kernel .
14383	Reset the kernel .
14384	Restart the kernel .
14385	Sends a call tip to the kernel
14386	Send a completion request .
14387	Process an error .
14388	Process a message .
14389	Handle changes .
14390	Add a plugin .
14391	Chain a chain of plugins .
14392	Generate plugins .
14393	Simple plugin .
14394	Configure plugins .
14395	Load all registered plugins .
14396	Load plugins .
14397	Convert latex to PNG .
14398	Convert latex to HTML .
14399	Convert a math text to an image .
14400	Check if the requirement exists .
14401	Iterate over processes and return them as a generator .
14402	Calculate CPU percent percent .
14403	Return the object as a dictionary .
14404	The name of the process .
14405	Return the path to the executable .
14406	Return all children of this process .
14407	Get CPU percent .
14408	Returns the memory percent of the device .
14409	Return a list of memory maps .
14410	Check if the current process is running .
14411	Suspends the current process .
14412	Resume the current process .
14413	Kill the current process .
14414	Wait for the device to complete .
14415	Connect to the kernel .
14416	Decorator to bind gtk .
14417	Check if an IP is shadowed .
14418	Initialize the default transformers
14419	Register a transformer .
14420	Unregister a transformer .
14421	Initialize checkers .
14422	Register a checker .
14423	Unregister a checker .
14424	Initialize handlers .
14425	Register a handler .
14426	Unregister a handler .
14427	Prefilter line information
14428	Find handler by line_info .
14429	Transform a single line into a single line .
14430	Process a line .
14431	Process prefixed lines .
14432	Check if a line is available .
14433	Checks if the given line has a special character .
14434	Check if the given line exists .
14435	Return the handler for the given line .
14436	Handle a line .
14437	Extract aliases from a shell .
14438	Handle IPython magic .
14439	Handle IPython magic .
14440	Handle shell .
14441	Handle the given line .
14442	Reimplemented to hide the widget .
14443	Starts the hide timer .
14444	Draws the paint widget .
14445	Show call info .
14446	Show the tip tip .
14447	Callback when the cursor is changed .
14448	Decorator for proxied attributes .
14449	Convert path to absolute path .
14450	Validate the schema against the schema .
14451	The masked dictionary .
14452	Determine whether a virtualenv is running .
14453	Calculate the pword frequency spectrum .
14454	Creates a view decorator .
14455	Return a set of the default aliases to use .
14456	Define an alias
14457	Define an alias table .
14458	Validates that the given alias is valid .
14459	call an alias
14460	Transform an alias table .
14461	Expand aliases .
14462	Print autohelp directive .
14463	Reset the SGR .
14464	Split string into actions .
14465	Get the color for the given color .
14466	Returns the QTextCharFormat instance .
14467	Generate a JWT
14468	Decorator for mutex .
14469	Clean all expired JWT objects
14470	Check if the jwts is already used .
14471	Validate a JWT
14472	Create a new semaphore .
14473	Return the common prefix of the given items .
14474	Filter the keypress event .
14475	Return the size of the widget .
14476	Checks if the cursor can be cut .
14477	Determines if the clipboard can be paste .
14478	Clear the control .
14479	Cuts the text .
14480	Execute the command .
14481	Get the input buffer .
14482	Set input buffer .
14483	Set the font widget .
14484	Paste the clipboard .
14485	Print the control dialog .
14486	Prompt the cursor to the top cursor .
14487	Reset the font
14488	Appends a custom content to the editor .
14489	Append html to the page .
14490	Appends a plain text to the page .
14491	Appends a plain text to the server .
14492	Clear the temporary buffer .
14493	Called when an item is completed .
14494	Fills the temporary buffer .
14495	Determine if the control key is down .
14496	Create the control interface .
14497	Create the page control .
14498	Filter the key press event .
14499	Returns the plain text of the block .
14500	Returns the end cursor .
14501	Get the column column number .
14502	Prompt the input buffer for the cursor .
14503	Returns the prompt cursor .
14504	Get text cursor cursor .
14505	Inserts a text prompt .
14506	Insert an HTML document .
14507	Helper to insert a plain text into the cursor .
14508	Insert text into the cursor .
14509	Keep the cursor in the buffer .
14510	Closes keyboard .
14511	Prints the current page .
14512	Start the prompt .
14513	Read a line from the widget .
14514	Sets the prompt .
14515	Sets the top cursor .
14516	Show a prompt .
14517	Adjust the scrollbar .
14518	Main entry point .
14519	Copy config file from config_file
14520	Create a profile directory by name .
14521	Find profile directory by name .
14522	Convert a cmp object to a key .
14523	Read a file .
14524	Read raw input and return a list of lines .
14525	Create a temporary file .
14526	Close the stream .
14527	Write data to file .
14528	Add a new heart handler .
14529	Add a heart failure handler .
14530	Handle a ping message .
14531	Generate a list of sequences .
14532	Return filename and filename and filename .
14533	Yield all files matching the given root .
14534	Display a summary of the elapsed time .
14535	Calculate the time unit .
14536	Extract Wininst data from Wininst data .
14537	Uncaches zipdir .
14538	Quotes the given argument .
14539	Checks if the given distribution exists .
14540	Set fetch options .
14541	Create home directory .
14542	Check if a file is an archive file .
14543	Creates a subclass of the given object .
14544	Decorator to register a readonly object .
14545	Create a new heading cell
14546	Create a new metadata node .
14547	Create a new author .
14548	Return True if path is writable .
14549	Unquote a filename .
14550	Get a python filename .
14551	Return the absolute path of a file .
14552	Get home directory .
14553	Return the xdg_CONFIG directory .
14554	Get the ipython directory .
14555	Get IPython package directory .
14556	Return the path to an IPython module .
14557	Returns the number of time in the given deps
14558	Generate md5 hash .
14559	Check old IPython configuration .
14560	Updates the suggestions for the given object .
14561	Return a list of suggestions for the given object .
14562	Return a list of suggestions for the given object .
14563	Return the relative path to the current working directory .
14564	Return a copy of the given pattern .
14565	Return a list of lines .
14566	Return the md5 of the file .
14567	Start profiling .
14568	Log a profiler .
14569	Finalize the result .
14570	Handle keyboard events .
14571	Enable wx .
14572	Disable GUI WXW .
14573	Disable QT4 QT4 .
14574	Enable interactive GTK .
14575	Enable Tkinter .
14576	Enable pyglet loop .
14577	Simulate the waveaver
14578	Initialize the database .
14579	Execute a SQL query .
14580	Get information about a session .
14581	Return the last n n rows
14582	Get a range of ranges from a string .
14583	Returns the name of the history file .
14584	Set a session name
14585	Reset the output history .
14586	Retrieve a range of ranges .
14587	Stores the given line number .
14588	Write the output cache to the database .
14589	Stop the history .
14590	Get the number of CPU cores .
14591	Get system per CPU time
14592	Return a list of disk partitions .
14593	Get PID list
14594	Pretty - print a pair .
14595	Format a list of statements .
14596	Generate a short stack .
14597	Decorator that checks the cache .
14598	Join multiple regular expressions into a single string .
14599	Remove file from path
14600	Update an MD5 object .
14601	Update cluster profiles .
14602	Start a cluster
14603	Stop a cluster .
14604	Searches for a search command .
14605	Return the body of the system .
14606	Find all code units that match the given file .
14607	Report all files in the given directory .
14608	A decorator that raises AssertionError .
14609	Set the traceback to stdout .
14610	A decorator that adds a time to the given function .
14611	Initialize IPython extensions .
14612	Initialize the code .
14613	Run code from IPython app .
14614	Run all startup files .
14615	Run all files in IPython app .
14616	Execute the command line
14617	Run the module if it is running .
14618	Decorator for generic functions .
14619	Return the static file filename .
14620	Read data from file .
14621	Escape special characters .
14622	Run the report .
14623	Creates a copy of the local static report files
14624	Write HTML to file .
14625	Compute the hash of a file .
14626	Write html file .
14627	Read status information from a given directory .
14628	Write the STATUS to a directory .
14629	Compare two lst1s
14630	Get a slice of a sequence .
14631	Chops the given sequence .
14632	Read the configuration file .
14633	Read the MANIFEST file .
14634	Convert glob pattern to regexp .
14635	Check if filename matches any of the patterns .
14636	Return a list of git files .
14637	Start a new kernel .
14638	Shutdown a kernel .
14639	Kill a kernel .
14640	Get a kernel by id .
14641	Get the ports of a kernel .
14642	Return the notebook id for the given kernel_id .
14643	Start a kernel .
14644	Shutdown a kernel .
14645	Interrupt a kernel .
14646	Restart a kernel .
14647	Create an IPub stream .
14648	Create shell stream .
14649	Create HDB stream .
14650	Reset the instance .
14651	Export HTML to file .
14652	Export an HTML file .
14653	Ensure the image tag is utf8 encoded .
14654	Replace HTML .
14655	Export the document .
14656	Get a single instance or None .
14657	Given a list of token fields return a queryset .
14658	Create a text query from a string .
14659	Gets the query for a given date field .
14660	Create a query for a given date field .
14661	Returns null or None if the given field is null .
14662	Removes case insensitive fields from the model .
14663	Add options to the parser .
14664	Validate an attribute .
14665	Returns True if the given method matches the given method .
14666	Rotate the cursor .
14667	Patch pyzmq .
14668	Create an object from a schema URL .
14669	Returns the URL of the websocket .
14670	Reserialize a reply .
14671	Injects a cookie into the request .
14672	Start a listening loop .
14673	Start the hb stream .
14674	Stop the hb_stream .
14675	Read file .
14676	Get the index .
14677	Seek to the index .
14678	Edit the scene .
14679	Show a marquee .
14680	Print all the contents of the source .
14681	Run a series of methods .
14682	Batch collection .
14683	Run a function on a sequence .
14684	Run a collection of processes .
14685	Wrap a function as an object .
14686	Decorator to add an object to the stack .
14687	Return the source code for a given tb source .
14688	Return a list of lines that match pos .
14689	Display a countdown .
14690	Cleanup all engines
14691	Perform a pre call .
14692	Execute a post call .
14693	Save messages to the queue .
14694	Synchronously synchronize the results .
14695	Perform the spin after the function .
14696	Return a list of all the messages .
14697	Get a message from the queue .
14698	Decorator to register a property .
14699	Return a tuple of all of the fields .
14700	Parses the given url and returns the config object .
14701	Return a list of modules .
14702	Get all the root modules
14703	Perform a quick completer .
14704	wrapper for module completion
14705	Called when the input script is completed .
14706	Execute cd - completer .
14707	Quote an attribute .
14708	Configure the plugin .
14709	Writes the error report to the given stream .
14710	Add an error to the traceback .
14711	Add a failure .
14712	Add a test to the report .
14713	Return the number of samples .
14714	Generate a random index .
14715	Register the engine .
14716	Unregisters the engine .
14717	Dispatch all pending tasks .
14718	Dispatch a submission .
14719	Check that all messages have been reachable .
14720	Called when a message is unreachable .
14721	Attempt to assign a task to the engine
14722	Save unmetrics for the given job .
14723	Submit a task to the engine .
14724	Dispatch a result .
14725	Handle a result .
14726	Handle unmetable dependencies .
14727	Update the dependency graph .
14728	Start logging .
14729	Print the logging information .
14730	Log a single line .
14731	Write data to logfile
14732	Stop logging .
14733	Create a new notebook
14734	Add a string s to the chain .
14735	Add a regular expression .
14736	Dispatch all regex matches .
14737	Yield tuples matching key .
14738	Called when a notebook directory is changed .
14739	List all available notebooks .
14740	Create a new notebook id .
14741	Delete a notebook .
14742	Check if a notebook exists .
14743	Find a notebook by its identifier .
14744	Return the path to a notebook .
14745	Get a notebook s metadata .
14746	Get the last modification of a notebook .
14747	Save a new notebook .
14748	Save a notebook to the server .
14749	Save a notebook object
14750	Delete a notebook .
14751	Create a new notebook .
14752	Copy a notebook .
14753	Parse a list of tokens .
14754	Generate a list of token lines .
14755	Load default config file .
14756	Default classes .
14757	Parse the command line .
14758	Initialize the ipython app .
14759	Initialize the interactive shell .
14760	Initialize the banner .
14761	Return the repr of an object .
14762	Parse a notification name .
14763	Set the default value for this trait .
14764	Called when a handler changes .
14765	Return a dictionary of trait traits .
14766	Get metadata for a given trait .
14767	Validate obj .
14768	Get the default value for this class .
14769	Returns True if the task has completed .
14770	Return True if the result is unreachable .
14771	Return the object as a dictionary .
14772	Depth of a tree .
14773	Print the tree tree .
14774	Disambiguate a DNS URL .
14775	Apply a function to each element in the list .
14776	Validate targets .
14777	Dispatch incoming messages .
14778	Dispatch a message .
14779	Handle a new heartbeat .
14780	Handle heart failure
14781	Store a task request .
14782	Saves a task result .
14783	Save an IOPub message .
14784	Send a connection to a client .
14785	Register a new engine
14786	Unregisters an engine
14787	Finish registrations .
14788	Send a shutdown request .
14789	Remove results from a client .
14790	Extract data from a single record .
14791	Get results from a client .
14792	Respond to a message
14793	Query the database .
14794	Change the current working directory .
14795	Decode a completed command .
14796	Run a command under r_root .
14797	Execute the Rscript .
14798	Handle incoming message .
14799	Return True if the message is from the current session .
14800	Report files in the given morfs .
14801	Annotate an analysis .
14802	Return the installed version of the named cache .
14803	Return a copy of the object .
14804	Extract the message header from a message .
14805	Check for unpackers .
14806	Generate a message .
14807	Sign a list of messages .
14808	Serialize a message .
14809	Send a message to a stream .
14810	Send a message to the stream .
14811	Receive messages from socket .
14812	Feed identities .
14813	Unserialize a message .
14814	Save a SVG document .
14815	Convert svg to clipboard
14816	Convert an SVG string to an image .
14817	Return the info dict for the given object .
14818	Get the documentation for an object .
14819	Get the source of an object .
14820	Get the argument specification of an object .
14821	Generate a callable for a callable .
14822	Return the file name of an object .
14823	Find the source line of an object .
14824	Get the definition of an object .
14825	Return header .
14826	Print information about a message .
14827	Display the definition of an object .
14828	Generate documentation for an object .
14829	Get the source of an object .
14830	Print the contents of a file .
14831	Format fields .
14832	Display a pinfo .
14833	Perform a search on ns_table .
14834	Return a Twisted reactor .
14835	Decorator for Deferred functions .
14836	Find the best match for a corpus .
14837	Convert this object to a string .
14838	Convert the document to an XML document .
14839	Load all modules in a package .
14840	Invert a dictionary .
14841	Merge this struct into a new one .
14842	Convert an object to a dictionary .
14843	Format the input as a string .
14844	Return a list of matplotlib figures .
14845	Helper function to print a figure .
14846	Run a matplotlib runner .
14847	Select the figure format
14848	Find and return the gui and backend
14849	Activate matplotlib .
14850	Configure inline support .
14851	Activate matplotlib .
14852	Trace the trace event .
14853	Start the thread .
14854	Stop tracing .
14855	Create a tracer .
14856	Installs the tracer .
14857	Start the collector thread .
14858	Stop the collector .
14859	Pause profiling .
14860	Resume all installed tracers .
14861	Return the line data as a dictionary .
14862	Return a list of RemoteError objects from a dict .
14863	Render the traceback .
14864	This function is used to process a COVERAGE .
14865	Return the canonical directory of a morf .
14866	Return the source for the given filename .
14867	Determines if the given frame should be traceable .
14868	Determine if a frame should be traced .
14869	Log a warning .
14870	Checks if all packages have been imported .
14871	Start the application .
14872	Stop the process .
14873	Exclude a regex .
14874	Extract regex from regex .
14875	Save the data to a file .
14876	Combine multiple data files .
14877	Gather the data from the source .
14878	Compute the analysis .
14879	Extract the analysis from a morf .
14880	Analyze the analysis .
14881	Generate a report .
14882	Annotate the given files .
14883	Generate the HTML report .
14884	Generate XML report .
14885	Display an IPython shell .
14886	Display a list of objects .
14887	Display a list of objects .
14888	Display an image .
14889	Display a list of objects .
14890	Display a list of objects .
14891	Display a list of objects .
14892	Display a list of objects .
14893	Reload the data from the file .
14894	Find the path to the command .
14895	Execute the process .
14896	Read events from a file descriptor .
14897	Run the socket .
14898	Find the launcher class for the given kind name .
14899	Starts the cluster .
14900	Build a launcher class
14901	Start the IPython cluster .
14902	Start the IOLoop .
14903	Get wx .
14904	Check if the event loop is running .
14905	Start the event loop .
14906	Return QApplication instance .
14907	Return True if qt4 is running in qt4 .
14908	Start the event loop .
14909	Create a blank canvas .
14910	Draw a cross .
14911	Draw a line between two colors .
14912	Plot text at specified position .
14913	Create an AnnotatedImage from a grayscale image .
14914	Generate a uuid .
14915	Generate a unique key from a dictionary .
14916	Return the domain name from a given URL .
14917	Extract the arguments from a URL .
