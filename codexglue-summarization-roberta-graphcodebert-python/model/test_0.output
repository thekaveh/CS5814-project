0	Convert sina XML data to list of URLs
1	Download video from dailymotion website .
2	Downloads a sina video from Sina .
3	Return text with given colors .
4	Prints a message to stderr .
5	Prints an error message .
6	Prints a message to terminal .
7	Detect the operating system .
8	Download a vimeo video .
9	get info from xml
10	Get video url from video_id
11	get the real m3U url
12	Ensure that the given string is legal .
13	Download the video from the website .
14	Download one or more streams
15	Download a video by its id
16	Match a list of patterns .
17	Parses a query parameter
18	Get the content of a URL .
19	Post content to url .
20	Parse hostname and port .
21	Get roomid by URL
22	get the title of a topic
23	Downloads the wanmen files from the given JSON API .
24	Downloads the Werkzemen file of the given course topic .
25	Checks if the given task instance is running .
26	Get the event buffer .
27	Return a connection object .
28	Get AWS credentials .
29	Get a field from the server .
30	Copy the given SQL to the given filename .
31	Bulk dump a table into a temporary file .
32	Uploads a file to Google Cloud Storage .
33	Retrieve the maximum partition of a table .
34	Return a mysql connection
35	Show the current state of a task
36	Restarts the worker threads
37	Get a client object
38	Translates a string to a target language .
39	Get instance details
40	Create an instance in a project .
41	Patch an instance .
42	Deletes an instance .
43	Get information about a database .
44	Create a new database .
45	Patch a database .
46	Deletes a database .
47	Exports an instance .
48	Start the sql proxy process .
49	Stop the cloud_sql proxy process .
50	Returns the version of the proxy .
51	Create a new connection .
52	Retrieve database connection
53	Delete the connection
54	Returns a CloudSqlProxyRunner
55	Returns the database hook
56	Cleans up the database hook
57	Reserve a free TCP port
58	Normalize a job id .
59	Extract an error code from a string .
60	Delete all DagRuns
61	Delete all task instances
62	Set the state of all DAGs .
63	Print performance results
64	Check the status of the scheduler .
65	Invoke the lambda function .
66	Create and return an array of evaluate operations .
67	Creates a directory .
68	Convert a string to a float if possible .
69	Make a naive aware datetime .
70	Return a naive datetime object with the given timezone .
71	Create a datetime object .
72	Get a connection to the druid broker
73	Get a requests session .
74	Runs the API endpoint .
75	Check the response .
76	Runs a request and returns the response .
77	Context manager to create a session .
78	Decorator that adds a session to a function .
79	Reset the database
80	Get the pretty error message
81	Returns a list of records matching the given SQL query .
82	Get a Pandas DataFrame from the given hql query .
83	Execute a SQL statement .
84	Insert rows into a table .
85	Get a MongoDB client .
86	Check if a collection exists .
87	Create a collection .
88	Check if a database exists .
89	Create a database .
90	Delete a database .
91	Deletes a collection .
92	Insert multiple documents into a collection .
93	Deletes a document from the database
94	Get a document by id
95	Returns a list of documents matching the given SQL query .
96	Get a function by name .
97	Creates a new function in a given location .
98	Update a function .
99	Upload a function zip to the given location .
100	Deletes a function by name .
101	Returns a list of status tuples for this task
102	Returns True if all dependencies are met
103	Return a list of the reason for each task
104	Parse the S3 config file
105	Get credentials for the given region .
106	Get a connection to the graph .
107	Flush the buffer .
108	Check if the file location is a zip file location .
109	Return a list of file paths .
110	Construct a TaskInstance from the database .
111	Start the DagFileProcessor .
112	Send a termination message to the manager .
113	Terminate the DAG process .
114	Start the processors .
115	Start the dag .
116	Starts reading the dag .
117	Refresh the DAG directory .
118	Print statistics about the file .
119	Remove missing import errors .
120	Logs the file processing stats .
121	Set the list of file paths to process .
122	Wait for all processes to finish .
123	Perform a heartbeat of the DAG .
124	Terminate all processes
125	Get SSH client
126	Create a transfer job .
127	Gets a transfer job .
128	List all transfer jobs
129	Update a transfer job .
130	Deletes a transfer job .
131	Cancel a transfer operation .
132	Pause a transfer operation .
133	Resume a transfer operation .
134	Wait for a transfer job to complete .
135	Find all tasks in a task instance .
136	Return number of available slots
137	Run a command and return its output .
138	Remove option from airflow
139	Get a section
140	Allocates the keys given a partial key .
141	Start a new transaction .
142	Commit a project .
143	Perform a lookup for a project .
144	Roll back a transaction .
145	Run a query .
146	Get an operation by name .
147	Deletes an existing operation .
148	Poll the status of an operation .
149	Export data to a bucket .
150	Import data from a Google Storage bucket .
151	Publish a message to a target ARN
152	Get the hostname of the host .
153	Get a connection to the Language Service
154	Extract entities from a document .
155	Annotate a document .
156	Retrieve a document from the server .
157	Return a list of the template fields for the given class .
158	An inline template field for a class name .
159	Disposes the connection pool
160	Prepare the path to the classpath .
161	Check if celery task_id exists
162	Determine if the configuration variable is in the configuration file .
163	Convert an SQLAlchemy object to a dictionary .
164	Yield successive chunk_size chunks .
165	Reduce a function over iterable .
166	Chain one or more tasks .
167	Pretty print a list of rows
168	Render a log filename .
169	Return a connection to the server .
170	Wait for an operation to complete .
171	Coerce a value to a string
172	Handles execution of an operator
173	Run the pig command
174	Retrieves the current state of a celery task .
175	Returns the number of tasks per process .
176	The number of tasks per fetch .
177	Set the default value for the given key
178	Get a mongo connection
179	Create a MLE engine job .
180	Retrieve a single MLEg job .
181	Wait for a job to complete .
182	Create a new version .
183	Set the default version
184	Returns a list of all versions of a given model
185	Delete a specific version .
186	Create a model in a project .
187	Get a single model by name .
188	Write batch data to DynamoDB
189	Integrate airflow plugins .
190	Get the default executor .
191	Returns an instance of the specified executor .
192	Called when an error occurred .
193	Return a pymssql connection
194	Trigger a workflow .
195	Delete a dag .
196	Get task information .
197	List available pools
198	Create a new pool .
199	Delete a pool .
200	Create or update a container group .
201	Retrieves the current state of an instance .
202	Gets the messages for the specified instance .
203	Returns a list of logs in a container group .
204	Delete a container group .
205	Check if a container exists .
206	Decorator to apply default parameters .
207	Construct ingest_hadoop query
208	Checks for a message
209	Find all DagRuns .
210	Get a list of TaskInstance objects for the given state .
211	Get a TaskInstance
212	Get the previous DagRun .
213	Get the previous scheduled DagRun .
214	Update the state of the task .
215	Verify the integrity of the workflow .
216	Makes a request to the jenkins server .
217	Convert Airflow Context object to Airflow variables
218	Conditionally trigger a DAG
219	Send a metric .
220	Query a metric
221	Get the dag for a given dag_id .
222	Process a list of jobs .
223	Bagged DAG
224	Collects a list of DAGs from a given dag_folder .
225	Return a report of the DAG loading data .
226	Add days to datetime
227	Convert a datetime object to a string .
228	Evolve a directory
229	Evolve a new file
230	Clear the state of tasks in the database .
231	Return an integer representing the attempt number .
232	Generate the Airflow command .
233	Get the current state of the task
234	Record this task instance as FAILED .
235	Refresh the instance from the database .
236	Delete all XCom data .
237	Return a unique key .
238	Checks if all dependent tasks are done
239	Return the next retry datetime .
240	Return True if the job is ready to be ready .
241	Checks if the pool is available .
242	Returns the DagRun object for this dag .
243	Push a key to the XCom object .
244	Pull one or more tasks .
245	Initialize the run context .
246	Closes the logger .
247	Get a connection to compute
248	Start an instance .
249	Set machine type .
250	Get instance template
251	Insert an instance template .
252	Get instance group manager .
253	Patch an instance group manager .
254	Wait for an operation to complete .
255	Check if a bucket exists
256	Create a bucket .
257	Checks if a prefix exists in a bucket .
258	List common prefixes .
259	List keys in a bucket .
260	Check if a key exists in S3
261	Get a key from S3
262	Returns the contents of a given key .
263	Selects the contents of an S3 object
264	Checks if a wildcard key exists .
265	Get a key from a wildcard .
266	Load a file from S3
267	Load data from a string .
268	Load a file into S3 .
269	Upload a file - like object to S3 .
270	Copy an object to an S3 bucket .
271	Query the cassandra connection
272	Convert a UserType instance to a data dictionary .
273	Send an email .
274	Get a speech client .
275	Recognize speech .
276	Execute the query
277	Load a list of plugin plugins .
278	Check if a plugin object is valid .
279	Skips tasks that are not skipped
280	Get an adls file system
281	Check if a file exists
282	Upload a file to a remote device .
283	Return a list of files .
284	Execute the query .
285	Uncompress a single file .
286	Execute mssql query
287	Decorator to log action logging .
288	Build the metrics for the given func .
289	Create a cgroup .
290	Delete a cgroup
291	Convert a hostname string to a url .
292	Make an API call .
293	Get a Salesforce connection
294	Make a query to all objects
295	describe an object
296	Get available fields for an object
297	Get object from Salesforce
298	Convert a column to timestamps
299	Write query results to a file .
300	Get a MongoClient instance .
301	Get a mongo collection
302	Replace multiple documents .
303	Check if the email has a mail attachment .
304	Retrieve mail attachments by name .
305	Download email attachments by name .
306	Search for attachments by name
307	Get the file and payload .
308	Put records in the delivery stream
309	Get status of task instance .
310	Send an email
311	Send an email via SMTP .
312	Convert value to UTC .
313	Check if a blob exists .
314	Check if a prefix exists in a container .
315	Create a blob from a string .
316	Read a file from a container .
317	Delete a file from a container .
318	Return a list of MLSTs .
319	Return FTP connection
320	List files in a directory
321	Retrieve a remote file from remote host .
322	Upload a file to the remote server .
323	Get the modification time of a file
324	Execute the Discord webhook
325	Return a connection to the service .
326	Check if a directory exists .
327	Check if a file exists .
328	Returns a list of files and files in the specified directory .
329	Creates a directory .
330	Load a file from a file .
331	Load data from a string .
332	Load a file from a stream .
333	Get storage connection
334	Copy a blob to another bucket .
335	Download a file
336	Upload a file to an object
337	Check if an object exists
338	Check if an object was updated after a given timestamp
339	Delete a blob .
340	List all blobs in a bucket .
341	Get the size of an object
342	Get the CRC32 checksum of an object
343	Get the MD5 hash of an object .
344	Create a bucket .
345	Compose multiple objects in a bucket .
346	Determine if the secondary training status of a secondary job is changed .
347	Generate a secondary training status message
348	Tar file to S3 .
349	Configure s3 resources .
350	Checks the input s3url
351	Return a connection to log .
352	Create a training job .
353	Create a new hyperparameter tuning job .
354	Create a new transform job .
355	Create an endpoint
356	Describe a training job .
357	Check the status of a SageMaker SageMaker job .
358	Check the status of a training job .
359	Start the dataflow job .
360	Run migrations offline .
361	Run migrations on the database .
362	Delete an instance .
363	Create an instance .
364	Creates a new table .
365	Delete a table .
366	Update a cluster .
367	Prepare command line for hive
368	Prepare Hiveconf
369	Load data from a pandas DataFrame .
370	Load a hql file into a table .
371	Get thrift client
372	Check if a named partition exists .
373	Check if a table exists
374	Return a connection to the Hive server
375	Execute a query and return the results as a dictionary .
376	Write results to a csv file .
377	Execute a query and return the results
378	Returns a pandas DataFrame of results from a query .
379	Get a client for the ProductSearchClient .
380	Returns the endpoint endpoint
381	Send the Dingding message
382	Bind parameters to MySQL .
383	Escape characters .
384	Convert string field to boolean
385	Validates that the given value is of the expected type .
386	Get a BigQuery connection .
387	Get the BigQuery service .
388	Check if a table exists .
389	Create an empty table .
390	Patch a table resource .
391	Cancel the running query .
392	Delete a table .
393	Run a table operation .
394	Grant access to a dataset
395	Get a dataset resource .
396	Get a list of datasets .
397	Insert rows into a table .
398	Executes the given operation and returns the job id .
399	Execute an operation on a sequence of parameters .
400	Retrieve the next query result .
401	Execute the postgres hook
402	Make intermediate directories .
403	Creates a queue
404	Send a message to a queue .
405	Runs the given command and returns the result .
406	Removes the config file .
407	Main entry point .
408	Builds the HTML header .
409	Create SVG container .
410	Builds the js chart
411	Create a new x axis
412	Create y axis .
413	Return a sqlite3 connection
414	Decorator to add log messages .
415	Decorator for gzipped responses
416	Get the last DagRun .
417	Create a dag run .
418	send a message
419	Create a JSON response
420	Open a file .
421	Generate a cache key for the request .
422	Get a connection to Video Intelligence Service .
423	Annotate a video .
424	Get API key .
425	Return a requests session .
426	Execute the action .
427	Builds a payload that can be used to serialize the message .
428	Execute the hook .
429	Get a conn object
430	Starts a query execution .
431	Get the status of a query
432	Poll for the query status
433	Get a pysftp connection
434	Handle Zendesk API rate limit .
435	Call zendesk API .
436	Returns a set of partitions from a table .
437	Gets a table .
438	Get table location .
439	Get cluster status
440	Deletes a cluster .
441	Returns cluster snapshots
442	Restore a cluster from a cluster snapshot
443	Create a cluster snapshot
444	Executes the hook .
445	Create a job flow flow
446	Filter results by size .
447	Remove files that match the given extensions .
448	Execute the query
449	Get a pool by name .
450	Create a new pool .
451	Delete a pool .
452	Convert a Python dictionary to a protobuf .
453	Wait for an operation to complete .
454	Get operation details .
455	Appends a label to a cluster .
456	Create a new cluster .
457	Get a cluster by name .
458	Get the Discord webhook endpoint .
459	Builds the Discord message .
460	Executes the bot .
461	Encrypt a plaintext .
462	Import a table from the database .
463	Imports a SQL query into the target directory
464	Export a table to an export table .
465	Get a TranstoSpeech client .
466	Synthesize audio .
467	Closes the log file .
468	Initialize init containers
469	Get the environment for the worker
470	Get worker secrets .
471	Generate a security context .
472	Add extra links to the qbal command
473	Perform a heartbeat .
474	Launch a process and run it in a separate thread .
475	Launch the process .
476	Check if the job is done .
477	Exit gracefully .
478	Update the errors of the dagbag .
479	Process task instances .
480	Convenience method to change the state of a task with a given dag run .
481	Determine the number of dag concurrency between states .
482	Updates the state of the specified task instances .
483	Enqueue all simple task instances with queued state
484	Executes the task instances of a simple dag .
485	Change the state of queued tasks to be executed .
486	Process the events of the given dag .
487	Process a DAG file .
488	Update the counters of the task status .
489	Update the state of the executor .
490	Get a dag run for the given date .
491	Returns a dictionary of tasks that are scheduled to run .
492	Execute the tasks for the given run dates .
493	Sets the failed dag runs to failed .
494	Execute the backend .
495	This method is called when the task instance runs .
496	Get a new client .
497	Get instance details .
498	Apply a function to an instance .
499	Creates a new instance .
500	Updates an instance .
501	Delete an instance .
502	Get the database for an instance .
503	Create a database .
504	Update a database .
505	Delete a database from an instance .
506	Pokes the attached attachment .
507	Prepare additional parameters for image_context .
508	Get a connection to the cluster .
509	Check if a table exists .
510	Check if a record exists .
511	Builds a command to track driver status
512	Submit a Spark - submit command .
513	Process a Spark submit log line .
514	Extracts the Spark status log from an iterator .
515	Get task runner based on local task job .
516	Wait until the Batch task finished
517	Execute a MySQL query
518	Configure a CSV file .
519	Write a schema file to the database .
520	Gets the schema for the column name .
521	Map field type to SQL string
522	Execute the Sqoop hook .
523	Decorator to apply a function to the backend
524	Parse extra json data
525	Return a list of dates
526	Scale an array of time units to 1 .
527	Return a number of days after n days
528	Initialize a role in the database .
529	Delete a role
530	Get user roles
531	Returns a set of view names and view menu names .
532	Check if user has role
533	Check if the user has permission
534	Delete faulty permissions
535	Merge permission view
536	Update the admin permissions for the role
537	Syncs the view menu with the given dag view menu .
538	Create permissions for all logical dag .
539	Get Fernet object
540	Checks for the condition
541	Get the AWS Lambda hook .
542	Checks for a message
543	Get a connection to the HDFS .
544	Get a connection to the webhdfsh server .
545	Checks if an HDFS path exists
546	Upload file to HDFS
547	Get a connection to pinot
548	Get the connection URI
549	Convert a date object to a dictionary .
550	Convert a time object to a dictionary .
551	Get a redis connection
552	Get a dataframe from the database .
553	Runs a SQL query against the database .
554	Set autocommit for a connection .
555	Insert rows into a table .
556	Serialize a cell to a string .
557	Check the status of the scheduler
558	Get extra links
559	Return a cloudant session
560	Creates the Slack webhook hook .
561	Get credentials from the connection .
562	Creates an authorization object .
563	Catch API exceptions .
564	Decorator to fall back to default project_id in GCP connection
565	Return a list of unfinished tasks .
566	Prepare connection command
567	Convert PIL Image to torch tensor .
568	Normalize a tensor .
569	Resize an image .
570	Pad an image .
571	Crop an image .
572	Crops an image .
573	Flip an image .
574	Return the perspective of an image .
575	Flip an image .
576	Crops an image .
577	Adjust the brightness of an image .
578	Adjust the contrast of an image .
579	Adjust the saturation of an image .
580	Adjust the hue of an image .
581	Adjust the gamma of an image .
582	Rotate an image .
583	Affine an affine image .
584	Convert an image to grayscale .
585	Save a tensor to an image file .
586	Find all classes in a directory .
587	Reads an image file with the specified extension
588	Read info_file from info_file
589	Reads matches_file from matches_dir
590	Compute the accuracy of the output .
591	Setup print for printing
592	Download a URL to a file .
593	Return a list of directories .
594	Return a list of all files with the given suffix .
595	Download a file from Google Drive .
596	Get random parameters
597	Generate random parameters
598	Gets the size of the image .
599	Get random parameters .
600	Generate random parameters .
601	Download dataset .
602	Download files and save them to torch folder .
603	Download files and save to torch folder .
604	Get the current theme name .
605	Run autocompletion
606	Render preferences page .
607	Return a list of available themes
608	Parse search query
609	Extracts response from response
610	Compute the gradient of fx .
611	Create a multivariate normal distribution .
612	Calculates the log - probability of the joint school school learning .
613	Benchmark the school chain .
614	Decorator to modify docstring attributes .
615	Return a simple name for a distribution .
616	Build a new RV object with the given name and value .
617	Build a random variable from a distribution .
618	Create a random variable from a distribution class .
619	One step of a single step .
620	Applies a forecast to the given time series .
621	Mask non - finite array along axis .
622	Assert that x is finite .
623	Fail if x is greater than rank .
624	Calculate the event size .
625	Evaluate all - hot features .
626	Get the function to convert a string to a function .
627	Calculate the size of the mixture .
628	Get the next interceptor .
629	Decorator to wrap a function in a decorator .
630	Records a tape to a tape .
631	Simple toy logistic regression .
632	Visualize the decision diagram .
633	Builds training pipeline .
634	Check that map_values are valid .
635	Trace a function over the given state .
636	Call the given function with the given arguments .
637	Call tf and gradients .
638	Convert from_structure to_structure .
639	Transform log_prob_fn into a function .
640	Perform a leapfrog step .
641	Performs a metropolis step .
642	Generate a HamiltonianMonkey .
643	Apply sign adaptation to output_rate .
644	Create a TensorFlow instance from a given dictionary .
645	Convert x to tensor .
646	Creates a scale operator .
647	Create a random walk function .
648	Create a random walk function .
649	Expands x to the event rank .
650	The lower bound of the tensor .
651	Return the categorical components .
652	Validate the last dimension of the tensor .
653	Ensure tensorflow is installed .
654	Logistic regression .
655	Extract features and labels .
656	Cholesky covariance matrix .
657	Standard deviation .
658	Variance of samples .
659	Convert axis to positive axis .
660	Squeeze x .
661	Normalize x .
662	Inverse of z .
663	Create a semilocalized transition matrix .
664	Adjusts the temporal linear trend noise .
665	Sampling sequence .
666	Generate permutations .
667	Get indices for tensor .
668	Calculate the size of a num .
669	Return list of primes below n
670	Return machine epsilon .
671	Hager - Hager optimization .
672	Fix the step size .
673	Bager search function .
674	Hager - search function .
675	Helper function for inner_bisection .
676	Prepare arguments for evaluation .
677	Converts a list of values to strings .
678	Basic quadrature scheme for softmax normalization .
679	Basic quadrature scheme for softmax normal distribution .
680	Check that a quadrature param is a valid shape .
681	Determine the shape of the batch .
682	Interpolate grid points .
683	Interpolate grid points .
684	Scale a linear operator .
685	Concatenate vectors .
686	Compute the log - sum of ms .
687	Compute log - sum exp .
688	Multiply a vector .
689	Extract log probabilities from the distribution .
690	Marginalized hidden hidden probabilities .
691	Marginal marginal probabilities .
692	Perform the posterior mode of an observation .
693	Chooses random directions .
694	Sample next step .
695	Check if fn is a Tensor .
696	Right pad to final_rank .
697	Perform a single step .
698	Build a trainable posterior .
699	Builds the variational loss from a model .
700	Minimize in graph .
701	Compute the mean and variance of a time series .
702	Computes the initial value of a time series .
703	Returns the batch shape for all distributions .
704	Creates a factored joint joint distribution .
705	Sum of all distributions .
706	Calculate empirical statistics .
707	Whether or not the last dimension of the observed time series .
708	Canonicalize an observed time series .
709	Makes a mixture of samples over the posterior .
710	Calculate the range of this interval .
711	Create a function that returns a function that returns a function that returns a summary statistic .
712	Unify the call signature .
713	Resolve distribution names .
714	Returns the required args .
715	Compute KL divergence between two distributions .
716	Connects a list of models to the distribution .
717	Resolve the graph for the given distribution .
718	The sum of distributions .
719	Checks that the given argument is not in the distribution .
720	Create an image summary .
721	Visualize reconstructs .
722	Visualize the learning analysis .
723	Summarize a distribution .
724	Summarize the mean of inputs and units .
725	Computes the TFD .
726	Creates a zero state tensor .
727	Call LSTM .
728	Call the convolution .
729	Generate the likelihood model .
730	Reconstruct the model .
731	Sample from the latent distribution .
732	Sample from the dynamic prior distribution .
733	The batch shape .
734	Returns the batch shape .
735	Build a model space - space model .
736	Sample from the prior distribution .
737	Compute the min_event_ndims for the given bijector_list .
738	Convert vector size to square matrix size .
739	Sort a list of values .
740	Sort a list of values .
741	Convert a tensor to a tensor .
742	Gradient .
743	Gradient tensor .
744	Logarithm .
745	Logarithm .
746	Compute the errored deviation .
747	Compute the log - probability of x .
748	Compute joint log probability .
749	Benchmark text messages .
750	Returns True if the GP is a multivariate Gaussian .
751	Returns the marginalized distribution .
752	Returns the index_points given the index_points .
753	Create an IAF stack .
754	Apply one step to the kernel .
755	Bootstrap results .
756	Return the outer squared difference between two vectors .
757	Compute the value and batch_jacobian of x .
758	Prevent the second derivative of x .
759	Distributional transform .
760	Splits the covariance matrix into marginal probabilities .
761	Decompose the model from the posterior model .
762	Decompose the given time series into parameter space .
763	Decompose the forecast by decomposition .
764	Convert x to sparse tensor .
765	Decorator for operator operator
766	Return a text representation of a tensor .
767	The sample shape .
768	Returns the sample shape .
769	Sample from the distribution .
770	Evaluate the expression .
771	Convert the value to a numpy array .
772	Conjugate prior .
773	Default NVP parameter template .
774	Gaussian norm .
775	Logarithm .
776	Log normalization .
777	Find the common dtype of a list of args .
778	Create a function that returns a summary statistic .
779	Broadcast a tensor to target_tensors .
780	PDF at the given peak
781	Compute effective sample size .
782	Compute effective sample size .
783	Creates a potential scaling reduction .
784	Returns the size of an axis .
785	Ensure that the argument is a broadcastable argument .
786	Create a lognormal quadrature scheme .
787	Create a quadrature scheme based on log normal distribution .
788	Merge two mapping .
789	Removes a field from this mapping
790	Merge two dictionaries .
791	Recursively flatten nested dictionaries .
792	Creates the left and negative increments tensor .
793	Find the best interval in x .
794	Slice the slice by doubling the left and right endpoints .
795	Sample from x_initial .
796	Create a slice of a single dimension .
797	Returns a setter that will set the value to the specified value .
798	Create a log - probability function for a model .
799	Given a tf . kwargs and src_kwargs .
800	Block convolution layer .
801	Build the tree .
802	Decorator to ensure that value is None .
803	Returns True if there are no u turn .
804	Leapfrog .
805	Compute the joint joint log .
806	Bloulli distribution .
807	Creates a default location scaling function .
808	Default normalization function .
809	Returns a TFD function that returns a TFD .
810	Deserialize a function .
811	Serialize function .
812	Broadcast nested structure from to_structure .
813	Converts a nested structure to a tensor .
814	Convert args to tensor .
815	Calls the given function with args .
816	Returns a dictionary containing the attributes of tensor - like object .
817	Create a mixture prior for the mixture .
818	Packs images into rows .
819	Download a file to the given directory .
820	Generate fake input functions .
821	Validates the input block_sizes .
822	Checks if the input is broadcastable .
823	Truncate a multivariate normal distribution .
824	Blli model .
825	Create a normal distribution .
826	Poisson distribution .
827	Compute the Mala euler method .
828	Get drift parts .
829	Compute log - density correction .
830	Call the given volatility function with gradients .
831	Broadcast volatility .
832	Create an AR transition matrix .
833	Calculate sample shape .
834	Reshapes input and outputs .
835	Call fn and return the result .
836	Gradient for tensor .
837	Sample distributions from the joint distribution .
838	Perform a Dirichlet allocation .
839	Creates a Dirichlet layer .
840	Returns a list of strings for each topic .
841	Loads newsgroups dataset .
842	Generate fake input_fn .
843	Builds inputs for training .
844	Minimize gradients .
845	Adds control dependencies to the codebook .
846	Save images to file .
847	Saves training images .
848	Loads boulli_mnist dataset .
849	Convert a tensor to a numpy dtype .
850	Returns the base_dtype of a dtype .
851	Returns True if dtype is boolean .
852	Returns True if dtype is complex .
853	Returns the maximum value of a dtype .
854	Get the name of a dtype .
855	Get the size of a dtype .
856	Assert that all items are of the same type .
857	Asserts that tensors are the same type .
858	Minimize objective function .
859	Nelder - objective function .
860	Return a function that accepts a simplified simplex .
861	Exponential expansion function .
862	Return a function that returns a function that evaluates to the objective function .
863	Shrinks the simplex solution to the given vertex .
864	Replace x with replacement .
865	Check if the solution is converging .
866	Helper function for _prepare_args .
867	Prepare args and objective function for creating a simple simplex .
868	Prepare the args to be used for testing .
869	Evaluate the objective function .
870	Plot weight posteriors .
871	Plots simulatedout prediction .
872	Build fake data .
873	Get the configuration .
874	Creates a NeuralNetConfig from a config .
875	Matrix multiplication .
876	Helper function for calculating standard deviation .
877	Assign log_moving_mean_exp .
878	Convert x into a columnar shape .
879	Random rademacher .
880	Rayleigh Rayleigh .
881	Pick a boolean condition .
882	Finish log_prob for each event .
883	Finalize the probability for each event .
884	Rotate x if necessary .
885	Undo the batch normalization .
886	Validate BatchNormalization layer .
887	Slice a single parameter .
888	Generates a dictionary of parameter values for slice_event_ndims .
889	Apply a single step .
890	Applies slice_overrides to the distribution .
891	Slice a distribution into a batch of parameters .
892	Fit model to model .
893	Determine whether a fit procedure has converged normalization .
894	Prepare model arguments .
895	Returns the number of columns in x .
896	Decorator to apply static_fn to static_fn .
897	Copy the docstring of the original function to the new_fn .
898	Get a boolean value .
899	Calculate the rank of a shape .
900	A case - insensitive version of the case .
901	Create a new name scope .
902	Compute the weighted average standard deviation .
903	Create a tril scale matrix .
904	Make a diagonal part of a diagonal part .
905	Convert loc and scale to event shape .
906	Check if the scale is a diagonal scale .
907	Check that a distribution is reparameterized .
908	Reshape the padding dimension .
909	Picks a boolean condition .
910	Moves a dimension from source_idx to dest_idx .
911	Checks that x is nonnegative integer form .
912	Return True if two shapes are the same shape .
913	Get static value from tf .
914	Returns True if dt is an unsigned integer .
915	Return True if dt is signed by the given dtype .
916	Return the largest integer in the given dtype .
917	Find the smallest integer in the given dt .
918	Returns True if dt is an integer like object .
919	Checks whether a categorical parameter is the shape of a categorical parameter .
920	Compute log combinations of n - grams .
921	Transpose x .
922	Pick a vector .
923	Prefer the most recent broadcast shape .
924	Generate a new seed
925	Creates a tridiagonal diagonal .
926	Returns the shape of x .
927	Process quadrature grid and probabilities .
928	Get arguments from the parent frame .
929	Expands x to a vector .
930	Adds a tensor to output_tensor .
931	Checks that the rightmostposed dimension is valid .
932	Checks if perm is valid .
933	Returns the shape of the event .
934	Concatenate x and other .
935	Get dimension dimensions .
936	Merge x with other .
937	Return a copy of x with the given rank .
938	Check that the target shape is equal to the same shape .
939	Augment the expected shape .
940	Builds a single step of backward smoothing .
941	Backward smoothing .
942	Build a single filter step .
943	Linear Gaussian update .
944	Kalman transition model
945	Builds a single - step mean step .
946	Build a single covariance step .
947	Builds a sampling step .
948	Propagate mean by linop .
949	Propagate covariance matrix .
950	Backward smoothing .
951	Samples n trajectories .
952	Compute marginal marginal marginal likelihood .
953	Compute the joint mean .
954	The joint covariance matrix .
955	Converts latent variables to observations .
956	Log normalization .
957	Compute mode .
958	Rotate samples .
959	Samples a tensor .
960	Make a copy of a function .
961	Return a copy of a dictionary with the given value .
962	Replace OrderedDict recursively .
963	Get samples from distribution .
964	Returns True if x is a namedtuple
965	Create a base case based on inputs .
966	Return a copy of the given type .
967	Safe sum op .
968	Get value and gradients .
969	Call fn and gradients .
970	A loop for loop_loop .
971	Perform a trace on a loop .
972	Creates a new setter for the innermost set .
973	Wrap an innermost getter .
974	Enables store_parameters_inear in the given kernel .
975	Replace input_shape with event_shape .
976	Replaces input_tensors with event_shape .
977	Checks shape .
978	Returns True if converged and failed .
979	Returns the initial state of the initial state .
980	Perform line search .
981	Restrict a function to the given position .
982	Update current position .
983	Checks if the current objective is converged .
984	Broadcast value to target .
985	harmonic number .
986	Default function to choose the exchange function .
987	Get field from kernel results .
988	Compute the exchange probabilities for each replica .
989	Variance scaling term .
990	Returns a function that computes the forward log - detect_log_detobian of the given trajectories .
991	Returns a function that will transform the input bijector .
992	Return a function that transforms the input bijector .
993	Performs one step of the TransformerTransition .
994	Same as tf . Tensor .
995	Compute the secant2 .
996	Secant2 inner function .
997	Solve a secant2 inner function .
998	Update the value and gradient of the trial .
999	Bool bracketing function .
1000	Binary bisect implementation .
1001	Inner loop .
1002	Check whether two values are finite .
1003	Checks whether the value is a wolfe .
1004	Calculate the secant ratio .
1005	Create a simple step size policy .
1006	Integrate a single step .
1007	Compute log - acceptance correction .
1008	Performs one step on the Hamiltonian .
1009	Bootstrap the KteCarrierResults .
1010	Binary resnet .
1011	Resnet layer .
1012	Create a default Dirichlet encoder .
1013	Creates a decoder for the given topics .
1014	Create a Dirichlet prior .
1015	Sample a Markov chain .
1016	Deprecated .
1017	Creates a training Deterministic .
1018	Create a training gamma .
1019	Load the nips 2011 paper .
1020	Initialize parameters .
1021	Determine the kl for a given type_a .
1022	Reads an image from disk .
1023	Download data from data_dir .
1024	Create a single character .
1025	Creates a sequence sequence for the given action .
1026	Creates a random sequence .
1027	Create a dataset .
1028	Validate distributions .
1029	Flatten a list of kernels .
1030	Flatten a list of kernels .
1031	Build fake data .
1032	Count the number of integers in an array .
1033	Find bins for x and edges .
1034	Create a histogram of x .
1035	Calculate quantiles .
1036	Get the ndims of x .
1037	Inserts back the last dimension .
1038	Make a list of non - negative axis indices .
1039	Transpose dimension along axis .
1040	Sorts a tensor .
1041	Builds the component s state space for each component .
1042	Amariance .
1043	Reverse KL divergence .
1044	 Jensen - Shannon Shannon Shannon Shannon similarity .
1045	Parses logu .
1046	Squared hellinger .
1047	Triplemented tensor .
1048	Power power .
1049	Log1p .
1050	Jeffreys .
1051	Modified GAN .
1052	Dual CSISzar .
1053	Syntetrized CSISzar function .
1054	Calculate the scipy - scipy - c - shear zerzipped f .
1055	Implementation of CSISzar .
1056	Raises a ValueError if x is not defined .
1057	Batch gather operation .
1058	Concatenate event and params .
1059	Implementation of expectation importance .
1060	Broadcast an event and samples from an event .
1061	Minimize a value and return its gradient .
1062	Check that the inverse Hessian is correct .
1063	Update the inverse Hessian .
1064	Binary update term .
1065	Matrix multiplication .
1066	Compute the product of two tensors .
1067	Batch transpose matrices .
1068	Pad shape with ndims .
1069	Sum the rightmost ndims .
1070	Compute the square root of x .
1071	Get the common dtype of a list .
1072	Minimize a value and its gradient .
1073	Returns the initial state of the LBFgs object .
1074	Returns search direction .
1075	Makes an empty queue .
1076	Push a queue onto the queue .
1077	Return the PSD mask of a matrix .
1078	Returns a mask that is large enough to reduce the determinant .
1079	Create a uniform correlation matrix .
1080	Sample the correlation matrix .
1081	Calculate confidence interval for samples .
1082	Compute true volumes of correlation matrix .
1083	Compute the von - Mises series of von Mises .
1084	Vises von Mises .
1085	Perform a single step .
1086	Minimize the objective function .
1087	Helper function to get initial arguments .
1088	Find the best value in the population .
1089	Check the convergence of a population .
1090	Generates a starting population .
1091	Binary crossover .
1092	Gets the mutant parts .
1093	Get random mixing indices .
1094	Ensure a tensor is a list .
1095	Helper function to get the tolerance .
1096	Soft threshold .
1097	Clip a t .
1098	Builds a pipeline from training images .
1099	Plot generated images .
1100	Convert a list of productions to a string .
1101	Call LSTM .
1102	Call the encoder .
1103	Tensor .
1104	Compute the hat integral of x .
1105	r Compute the rank of a matrix .
1106	Pipy .
1107	Solve LU decomposition .
1108	LU .
1109	Constructs a list of assertions .
1110	Constructs assertions .
1111	Construct block - diagonal matrix .
1112	Validates a matrix .
1113	Gradient of negative log - likelihood .
1114	Fit a model to a model .
1115	Generate a list of slices .
1116	Generates a mask .
1117	Creates a masked dense layer .
1118	Create an input array .
1119	Create a list of degrees .
1120	Create masks for input degrees .
1121	Create an initializer for keras .
1122	Builds the graph .
1123	Call the autoregressive layer .
1124	Draw samples from the multinomial .
1125	Create a dummy multivariate multivariate multivariate normalization .
1126	Create a noise function for a time series .
1127	Convert params to weights .
1128	Get the depth of a graph .
1129	Determine the best order of dependencies .
1130	Return a function that flattens the named chain rule chain .
1131	Connect a model into the distribution .
1132	Compute the variational loss .
1133	Optimal posterior .
1134	Builds the true day of the given season .
1135	Builds the effect_to_resid matrix .
1136	Builds the transition matrix .
1137	Build the seasonal transition noise .
1138	r Converts the seasonal transition noise noise to the residuals .
1139	Check if observation data is empty .
1140	Ensure that observation data is broadcastable .
1141	Adds a scheduler to the graph .
1142	Sets a checkpoint .
1143	Set gradient clipping to constant .
1144	Optimize the model .
1145	Sets train summary
1146	Sets the value summary
1147	Creates a local optimizer .
1148	Set the training data for this dataset .
1149	Set a summary trigger
1150	Retrieve dataset and labels for training .
1151	Get a list of news20 samples .
1152	Get a dictionary of weights from Glove .
1153	Call the BigQuery .
1154	Fit the model to a dataset .
1155	Evaluate the RDD .
1156	Return the prediction for the given data .
1157	Get MNIST dataset .
1158	Preprocess the MNIST dataset .
1159	Get the end trigger
1160	Validate optimizer .
1161	Return the value of the field
1162	Call BigDL function
1163	Call a python function on the gateway
1164	Convert an RDD to a Python object .
1165	Convert Python object to Java Object
1166	Get a network layer by name .
1167	Create a dataset from a numpy array .
1168	Returns the label of the image .
1169	Create a DistributedImageFrame from a Parquet file .
1170	Write a Parquet file to disk .
1171	Get an image of the image .
1172	Convert frame to numpy array .
1173	Returns the label of the distributed image as a numpy array .
1174	Returns predictions for the distributed image
1175	Predict on x .
1176	Fit the optimizer .
1177	Performs a BigQuery transform on the dataset .
1178	Save a Keras model definition to disk .
1179	Build Keras model .
1180	Returns the predicted class distributed with the given data_rdd .
1181	Sets the weights for this object .
1182	Returns the weights for this layer
1183	Saves Tensorflow to file .
1184	Call the evaluation function .
1185	Load a torch model .
1186	Load Keras backend .
1187	Create a new criterion .
1188	Load weights from json file .
1189	Load IMDB dataset .
1190	Build Keras model .
1191	Returns the input shape
1192	Returns the output shape
1193	Get MNIST dataset
1194	Extracts data sets from WHOLE M1M .
1195	Returns the path to the bigDL classpath
1196	Returns True if the spark version is below the same version .
1197	Reads checkpoint file and returns tensors .
1198	Saves a variable to disk .
1199	Expand units along axis .
1200	Precompute future symbols
1201	Simple attention layer .
1202	Attention layer .
1203	Compute BLEU score .
1204	Get log file .
1205	Log the utterance .
1206	Generate summaries for gradients .
1207	Dump weights to file .
1208	Read data from a dictionary .
1209	Train a model from a config file .
1210	Communicate with an agent .
1211	Convert a list of labels to onehot array .
1212	Convert proba to one hot - hot representation .
1213	Configure tf . Session .
1214	Load the model .
1215	Get the momentum variable
1216	Update the graph and momentum variables .
1217	rounds the f1 score
1218	Process word .
1219	Stack stacked convolutional layer .
1220	Create a Biopython recurrent cell .
1221	Create a stacked BINN layer .
1222	A stacked highway convolution layer .
1223	Embed embedding layer .
1224	Create a cudnn gru .
1225	Create a CUNN cell for the given units .
1226	Create LSTM layer .
1227	Cudnn LSTM .
1228	Builds a Bi - gru .
1229	Implementation of Bi - LSTM .
1230	Create a cudnn_gru layer .
1231	Dropout layer .
1232	Builds the model .
1233	Build word CNN .
1234	Build basic network .
1235	Train the model on the given data .
1236	Predict a batch of objects .
1237	Makes a vector representation of the sentence .
1238	Make a vector representation of tags .
1239	Advanced BLEU measure .
1240	Verify an S3 URL .
1241	Extract certificates from a string .
1242	Verify a certificate chain .
1243	Verify the signature .
1244	Verify an Amazon Signature URL .
1245	Convert all controls to JSON .
1246	Returns a list of ms_bot objects for all controls .
1247	Return a list of telegram objects .
1248	Return a list of all controls .
1249	Main entry point .
1250	Wrap a function in a context manager .
1251	Wrap keras backend .
1252	Compute the accuracy of the predicted examples .
1253	Compute round accuracy .
1254	Initializer for pretrained model .
1255	Read data from disk
1256	Create an agent agent for hello world .
1257	Convert x to one - hot unit vector
1258	Pretty - print metrics .
1259	Populates the default settings directory .
1260	Load the model .
1261	Save the model to disk .
1262	Gets a training op .
1263	Search a word in trie .
1264	Make the default operation cost .
1265	Start the timer .
1266	Handle incoming request .
1267	Evaluate the given utterance .
1268	Generate response with session attributes .
1269	Handle an intent .
1270	Handle a launch event
1271	Handles an unsupported message
1272	Pretty print object .
1273	Calculate ELMo loss from losses .
1274	Build a chainer from a config file .
1275	Run the interactive model .
1276	Run the prediction on a file .
1277	Read text from file .
1278	Creates a function from a module name .
1279	Decorator to register a metric .
1280	Retrieve a metric function by its name .
1281	Return the decay type of a label
1282	Get the best value for a list of values .
1283	Encodes a list of tokens .
1284	Read requirements . txt file
1285	Compute the log - loss
1286	Export weight file to hub directory .
1287	Returns a string showing the details of a dictionary .
1288	Create an Ecommerce agent .
1289	Main method for running the server .
1290	Download a file from a URL
1291	Unpacks file_path to extract folder
1292	Download and extract compressed files .
1293	Recursively updates the editable dictionary .
1294	Add path to a URL .
1295	Set a query parameter .
1296	Return the response as a response .
1297	The JSON representation of the control .
1298	Return action to send back back back backback
1299	Serialize the control to JSON .
1300	Generate a ms_bot_framework for this message .
1301	Compute the F1 score .
1302	Calculate the recall at k_true .
1303	Check if a GPU is available .
1304	Recursively parse a config property .
1305	Parse configuration file .
1306	Expand path .
1307	Create a Component instance from a dictionary .
1308	Main thread .
1309	Delete a conversation .
1310	Refresh valid certificates .
1311	Verify a request
1312	Handle a request .
1313	Return a class from a string .
1314	Decorator to register model class .
1315	Get model class by name .
1316	Get the regularization path for a GLM model .
1317	Create a GLM model from a model .
1318	Create an H2OCluster object from a list of dicts .
1319	Shutdown the H2O instance .
1320	Check if we are running
1321	Show the status of this cluster .
1322	Lists all jobs
1323	Return a list of all time zones
1324	Fill properties from another h2ocluster object
1325	The metalearner parameters .
1326	Stops the test_func and waits for it to finish .
1327	Get the summary for a particular frame .
1328	Delete a frame .
1329	Get a list of model builders for the current user .
1330	Validate model parameters .
1331	Compute the metrics for a given model and frame .
1332	Get model metrics .
1333	Delete a model
1334	Tabulate the cached data .
1335	Run one or more EC2 instances .
1336	Terminate one or more instances .
1337	Stop running instances .
1338	Start running instances .
1339	Reboot one or more instances
1340	Waits for an SSH connection to the given instances .
1341	Get the full name of a function .
1342	Find the function within the frame .
1343	Returns the signature string for the function signature .
1344	Wrap text .
1345	Wait for the job to finish .
1346	Train the model .
1347	Train the model using sklearn library .
1348	Get H2OEstimator parameters .
1349	Signal handler .
1350	Wipe the output directory .
1351	Remove RSandbox directory
1352	Scrape the port from the output .
1353	Scrape cloud size from stdout .
1354	Terminate the JVM .
1355	Stop all nodes .
1356	Get the IP of the client .
1357	Get the port for this node .
1358	Calculate RPR and TPRs .
1359	Determine the vector size of the model .
1360	Mean absolute error .
1361	Mean squared error .
1362	Compute the median absolute error .
1363	Compute the explained variance score .
1364	Assert that var is a type of types .
1365	Raise an exception if the value matches the given regex
1366	Raise an H2OValueError if the argument is satisfied .
1367	Extract the arguments from the source code .
1368	Check vtype against vtype
1369	Get the name of the given vtype
1370	Generate source code for lambda functions .
1371	Checks if a variable is not valid .
1372	Checks if variable is a string type
1373	Get H2O configuration .
1374	Read all candidate log files
1375	Generate a list of paths to log files .
1376	Execute the given function .
1377	Store a new model progress .
1378	Recalculate model parameters .
1379	Estimate the completion time .
1380	Guess the next poll interval .
1381	Compute progress at given time t .
1382	Calculate the time at x_target .
1383	Draw text to the terminal .
1384	Compute the width of the progress bar .
1385	Get the size of the terminal .
1386	Set text encoding .
1387	Fit the Encoder to the target frame .
1388	Get a H2OFrame object from the cache .
1389	Refresh the frame from the cache .
1390	Returns the type of a given column
1391	Retrieve columns by column type .
1392	Display a summary of the H2OFrame .
1393	Print a summary of the image
1394	Returns the first n rows .
1395	Multiply a matrix with a given matrix
1396	Returns a list of all levels in this table .
1397	number of levels
1398	Set the current output level .
1399	Set the levels of this domain .
1400	Rename columns .
1401	Set the column names .
1402	Sets the name of a column .
1403	Return True if item is in self .
1404	Modulo k - fold column .
1405	Get a stratified kfold column .
1406	Print the structure of the H2O object
1407	Return a pandas dataframe as a pandas dataframe .
1408	Remove a column from the table .
1409	Compute a quantile of the columns of a table .
1410	Concatenate multiple frames .
1411	Bind a H2OFrame to the current dataframe .
1412	Return a new row with the given dataframe .
1413	Splits a single frame into multiple frames .
1414	Group by a given column .
1415	Fill missing values along the given axis .
1416	Impute values of a column .
1417	Merge two columns .
1418	Return a new row with the given y level
1419	Insert missing values into dataset .
1420	Compute the variance of this object
1421	Compute the correlation matrix .
1422	Compute the distance between two objects
1423	Return an astroid . factor .
1424	Split a string by pattern .
1425	Count the number of matches of the given pattern .
1426	Return a substring of a string .
1427	Strip the left and trailing whitespace .
1428	The entropy of the H2Frame
1429	Returns the number of substrings of the given path_to .
1430	Create a table containing the table and data2 .
1431	Calculate the histogram of this object .
1432	Compute the maximum number of words .
1433	Replace all occurrences of a string with a given replacement .
1434	Get the next element of this frame .
1435	Get a list of values matching the given pattern .
1436	Return the NaN .
1437	Compute the difference between two frames
1438	Return a boolean array where the values are NaN
1439	The minute of the current frame
1440	Return a new H2OFrame if it exists .
1441	Return a random stratified split of the data .
1442	Cut one or more breaks .
1443	Return the maximum value of the maximum value
1444	Apply a function to the current frame .
1445	Parse text .
1446	Parses a file .
1447	Move the region to the end of the table .
1448	Parse the contents of the table .
1449	Get the size of this model .
1450	The centers of the model .
1451	Determine the centers standard deviation .
1452	Create an H2OConnection object .
1453	Make a request to an H2O server .
1454	Check version of H2O .
1455	Lazy import module .
1456	Upload a file to a DataFrame .
1457	Import data from a CSV file .
1458	Imports a Hive table .
1459	Imports a SQL table into a table .
1460	Upload a SQL SELECT query to the database .
1461	Create a H2OFrame instance from a raw data dictionary .
1462	Create a deep copy of the given data .
1463	Returns a model instance .
1464	Gets a grid by its id .
1465	Get a frame by ID
1466	Downloads the given model .
1467	Download data to a CSV file .
1468	Download all H2O logs .
1469	Exports a frame to the specified path .
1470	Convert an H2O object to a list of lists .
1471	Run a demo function .
1472	Loads a dataset from the given path .
1473	Make model metrics .
1474	Upload a key to S3
1475	Generate a custom metric from a given function .
1476	Check that a frame id is valid .
1477	Converts a number of bytes to a human readable string .
1478	Normalize a slice .
1479	Check if a slice is normalized .
1480	Use mojo_predict to predict data .
1481	Run Mojo predict_csv
1482	Mark a function as deprecated .
1483	Wait for the job to finish .
1484	Return a dict of all models in test_data .
1485	Print a summary of the models
1486	Displays the grid search results
1487	Returns a list of hyperparameters for the given id .
1488	Returns a dictionary of hyperparameters for the given id .
1489	Get a grid by sort_by .
1490	Calculate F1 for each model .
1491	The varimpances of the model
1492	Projects the predictions from a test dataframe .
1493	Plot the model .
1494	Translate name to CamelCase
1495	Removes indented lines from text .
1496	Extract test run info from a file
1497	This is the main entry point of the ExtractLogRuntimeLog .
1498	Close the H2O session .
1499	Get the session id of the current session
1500	Start logging .
1501	Prepare data to be sent to backend
1502	Prepare a file payload
1503	Log a start transaction .
1504	Log the end of a transaction .
1505	Log a message to a file .
1506	Process the response .
1507	Print msg if verbose is True .
1508	Get the leaderboard for a given project .
1509	Download the leader model from the leader .
1510	Download Mojo .
1511	Calculate the mean and stderr
1512	Scale X to X .
1513	Apply the inverse transform to X .
1514	Extract the literal string from a string
1515	find node_name
1516	find git_hash branch
1517	check for build timeout
1518	find build_failure
1519	find build_id
1520	Extract the job build url from a URL string .
1521	Grab all java_message_type from a file
1522	Saves the test dictionary to a dictionary .
1523	Update the summary file .
1524	Write content of file to filehandle
1525	Write a Java message to a file
1526	Loads java messages to ignore .
1527	Normalize an enum constant .
1528	Find synonyms for a given word
1529	Poll the status of the job .
1530	Saves the Assembly to a file .
1531	Fit the Assembly to the given frame .
1532	Calculate the nth percentile of a sorted list .
1533	Returns a dictionary with the default value for all parameters .
1534	Get the actual parameters of the model .
1535	Perform deep features of a model .
1536	Returns the scoring history for this model .
1537	Show the details of the model .
1538	Variable importances
1539	Calculate the residual degrees of freedom .
1540	Return the coefficients as a dictionary .
1541	Download a G2o object from the GenModel .
1542	Download the MOJO from the model .
1543	Saves model details to disk .
1544	Ensures that the number of rows are the same .
1545	Cross validation models .
1546	A basic example of G2O .
1547	Show a deep learning model .
1548	A basic example of the GLM model .
1549	Wait for a key press .
1550	Return the cell data as a pandas DataFrame .
1551	Print the contents of the table .
1552	Starts a Java Jar .
1553	Search the J2O server for a given path0 .
1554	Generator that iterates over all jars in the environment .
1555	Get hit_ratio table .
1556	r Create a csv writer
1557	Convert a package URI to a python path .
1558	Convert a directory path to a URI .
1559	Parse the lines of a function source .
1560	Generate API documentation for a given URI .
1561	Discover and return a list of package uri .
1562	Write API documentation to outdir .
1563	Write the index file .
1564	Return a list of cell values as a list .
1565	Loads dictionary from file .
1566	Extract new java messages from the user .
1567	Updates the message dictionary with the given action
1568	Extract message from file
1569	Saves the state of the message to a pickle file
1570	Prints a dictionary of keyName to file
1571	Parse command line arguments .
1572	Prints the usage message .
1573	Locate all python files in a root_dir .
1574	Find a spell in a file .
1575	This function is used to generate tokens .
1576	Returns a new H2Frame with the given data .
1577	Grab all the failed tests
1578	Extract all testcases and save them in a file .
1579	Plot the ROC curve .
1580	Calculate the confusion matrix .
1581	Checks if a Deep Water Model builds are available .
1582	Removes all failed tests from the given month to the given month .
1583	Return list of all endpoints grouped by class name .
1584	Update the site forward .
1585	Generate a JSON - formatted json string
1586	Comment a user s media .
1587	Get credentials from secret file .
1588	Like the given user .
1589	Like the media with the given hashtag .
1590	check if user is a bot
1591	Read a file from a file
1592	Sets the schedule time for the queue .
1593	Send a message to the peer .
1594	Download an existing VPN site .
1595	Guess the service name from a specification path .
1596	The update command .
1597	Deletes an application by its Id .
1598	Create an application definition .
1599	Returns the URI for the given request .
1600	Return a connection object for the given request .
1601	Perform a HTTP request .
1602	Creates a long - running cluster script .
1603	Check for a front door name .
1604	Purge deleted items from a vault .
1605	Get the authorization server URI .
1606	Validate the request URI .
1607	Get CLI profile .
1608	Get CLI credentials for a resource .
1609	Resolve a spell check .
1610	Check availability of a service .
1611	Opens a request .
1612	Set the timeout for this request .
1613	Sets a request header .
1614	Retrieves all response headers .
1615	Sends a request body .
1616	The status of the request .
1617	Returns the status of the request .
1618	Return the response body .
1619	Sets the client certificate .
1620	Send a PUT request to the server .
1621	Put a request header .
1622	Send a request to the server .
1623	Returns a _Response object .
1624	Returns the readable id_name of the given id_prefix .
1625	Get the serialization name for an element .
1626	Verify a face to a person .
1627	Add a job .
1628	Get entry properties from an XML node .
1629	Get children from node .
1630	Find the namespaces in the given child .
1631	Convert an XML string to a ServiceBus Namespace namespace .
1632	Convert an XML string to a ServiceBusRegion object .
1633	Parse namespace availability response .
1634	Convert an XML string to a Metadata object .
1635	Replaces runbook content .
1636	List domain recommendations .
1637	Update an existing kb .
1638	Retrieve a user s member groups .
1639	Build a package from an SDK .
1640	Imports data from a resource group .
1641	Publish a runbook .
1642	Renew lock .
1643	Replace wordalterations .
1644	Add a new secret value .
1645	Gets the properties of a storage account .
1646	Gets the storage accounts for a given storage service .
1647	Regenerates the keys for a storage account .
1648	Creates a new storage account .
1649	Updates a storage account .
1650	Deletes the specified storage account .
1651	Checks if a storage account name is available .
1652	Gets the properties of a given service .
1653	Creates a new hosted service .
1654	Deletes a hosted service .
1655	Creates a new deployment .
1656	Deletes a deployment .
1657	Swaps the given service .
1658	Change the configuration of a service .
1659	Updates the status of a service .
1660	Upgrade a deployment .
1661	Walks the Upgrade domain for a given upgrade .
1662	Reboot a role instance .
1663	Deletes the specified role instances .
1664	Checks if a given service name is available .
1665	Gets the certificates for a given service .
1666	Gets the certificate for a given service .
1667	Adds a certificate to a service .
1668	Deletes the specified service certificate .
1669	Gets the management certificate for a subscription .
1670	Adds a subscription certificate to the subscription .
1671	Deletes the management certificate associated with this subscription .
1672	Gets the properties of an affinity group .
1673	Creates a new affinity group .
1674	Deletes an affinity group .
1675	Fetches a list of subscription operations .
1676	Creates a new reserved IP address .
1677	Deletes a reserved IP address .
1678	Associates a reserved IP address .
1679	Disassociates a reserved IP address .
1680	Gets a reserved IP address .
1681	Gets the specified role by name .
1682	Creates a new virtual machine deployment .
1683	Adds a role to a deployment .
1684	Updates a role .
1685	Deletes a role .
1686	Captures a role instance .
1687	Starts a role in a deployment .
1688	Start the role of a service .
1689	Restart a role .
1690	Shuts down a role .
1691	Shutdown the specified role .
1692	Adds a DNS server to a deployment .
1693	Updates the specified DNS server .
1694	Deletes a DNS server .
1695	List all resource extensions for a given publisher .
1696	Replicates a VM image .
1697	Unplicate a VM image .
1698	Shows the specified VM image .
1699	Creates a VM image .
1700	Deletes a virtual machine image .
1701	Returns a list of all VM images in the server .
1702	Updates the virtual machine s VM image .
1703	Adds an OS image .
1704	Updates an OS image .
1705	Updates the OS image with the specified image reference .
1706	Deletes an image .
1707	Gets the data virtual disk for a particular deployment .
1708	Adds a new data disk .
1709	Updates a data disk .
1710	Deletes a data disk .
1711	Adds a new disk .
1712	Updates a disk .
1713	Deletes a disk .
1714	Summary for a management group .
1715	Build the receiver .
1716	Fetch next messages from the queue .
1717	Renew lock .
1718	Create a virtual machine scale set .
1719	Convert VM scale set to single placement group .
1720	Update screen text .
1721	Create a new key .
1722	Import a key .
1723	Update an existing key .
1724	Set a secret .
1725	Set the certificate issuer .
1726	Creates a new SharedAccessClient instance from a connection string .
1727	Get a specific subscription .
1728	Returns a list of all subscribed subscriptions .
1729	Queue one or more messages .
1730	Returns an Sender .
1731	Get a receiver for this entity .
1732	Get a deadletter receiver .
1733	Parse an async operation result from a response .
1734	Perform a GET request
1735	Perform a PUT request .
1736	Wait for an operation to complete .
1737	Gets the status of an operation .
1738	Add additional headers to the request .
1739	Validate the build package
1740	Retrieve certificates .
1741	Get a list of all available regions .
1742	List all available Namespaces .
1743	Gets a namespace by name .
1744	Creates a new Namespace .
1745	Deletes a namespace .
1746	Checks if a given namespace exists .
1747	Lists a list of topics .
1748	List a notification hub .
1749	List all relay configurations .
1750	Gets the metrics rollups for a given metric .
1751	Get a metric rollups for a given metric .
1752	Get metrics rollups for a given service hub .
1753	Gets the metrics rollups for a specific metric .
1754	Create a context manager .
1755	Create a virtualenv with the given packages .
1756	Creates a new server .
1757	Sets the admin password for a server .
1758	Lists the quotas for a server .
1759	Gets the event logs for the specified server .
1760	Creates a new firewall rule .
1761	Updates the specified firewall rule .
1762	Deletes a firewall rule .
1763	Lists all firewall rules .
1764	Lists all service objectiveives for a server .
1765	Creates a new database .
1766	Updates the specified database .
1767	Deletes a database .
1768	List databases .
1769	List domain agreements .
1770	Close the socket .
1771	Close receiver .
1772	Get the current session state .
1773	Set session state .
1774	Receive deferred messages .
1775	Initiate a merge operation .
1776	Validate a challenge .
1777	Perform a purge operation .
1778	Helper function to return errors .
1779	Creates a queue .
1780	Deletes the specified queue .
1781	Gets the specified queue by name .
1782	Creates a new topic .
1783	Gets the specified topic .
1784	Creates a new rule .
1785	Gets the specified rule .
1786	Returns a list of all rules for a subscription .
1787	Creates a subscription .
1788	Returns the details of the specified subscription .
1789	Returns a list of all subscriptions for the specified topic .
1790	Sends a message to a topic .
1791	Unlocks a subscription message .
1792	Sends a batch of messages to a queue .
1793	Unlocks a locked queue message .
1794	Receive a queue message .
1795	Receive a subscription message .
1796	Creates an event hub .
1797	Updates an existing event hub .
1798	Gets the specified event hub .
1799	Sends an event to a hub .
1800	Updates the headers for the given request .
1801	Get authorization string
1802	Check if token is expired .
1803	Get token from accessconstrol server .
1804	Update the path and query string .
1805	Resets a new service profile .
1806	Deletes the lock .
1807	Unlock the lock .
1808	Renews lock .
1809	Adds headers to the request object .
1810	Return the batch body as a dict .
1811	Restore cluster health information .
1812	Get cluster health information .
1813	Unprovision an application type .
1814	Get a list of repair tasks .
1815	Submit a property batch .
1816	Handle general error handling .
1817	Start a web site trace operation .
1818	List existing slot swaps .
1819	Swaps a slot .
1820	Get events by type .
1821	Add a face from an image .
1822	Handle a redirect request .
1823	Creates a new migration .
1824	Publish events .
1825	Move resources from one resource group to another .
1826	Set the default profile
1827	List query results for a given management group .
1828	Create a queue .
1829	Deletes a queue .
1830	Creates a topic .
1831	Deletes a topic .
1832	Creates a subscription .
1833	Create a SharedAccessClient from a connection string .
1834	Get the properties of the queue .
1835	True if the lock has expired .
1836	Creates a new session .
1837	Creates a new subscription .
1838	Export request rate by interval .
1839	Process results from the results queue .
1840	Bulk add tasks to the results queue .
1841	This function is called by the worker thread .
1842	Build the configuration dictionary .
1843	Resets a reset password .
1844	Start an environment .
1845	Create a Message object from the response .
1846	Converts an etree node to a Rule object .
1847	Converts an etree node to a Queue object .
1848	Convert an etree node to a Topic object .
1849	Converts an etree entry to a Subscription object .
1850	Creates a new certificate .
1851	Deletes a certificate .
1852	Return an instance of azure CLI client .
1853	Returns a GraphRbacClient object for the given dictionary .
1854	Loads a client from an auth path .
1855	Parse a list of EnumerationResults objects .
1856	Get entry properties from an XML element .
1857	Deletes a certificate .
1858	Returns a QueueClient .
1859	Returns a list of Queues .
1860	Get a topic by name .
1861	Returns a list of topic clients .
1862	Receive deferred messages .
1863	Settle deferred messages .
1864	Get a specific site .
1865	Creates a new Site .
1866	Deletes a site .
1867	Updates the specified site .
1868	Restart a website .
1869	Retrieves historical usage metrics for a given webspace .
1870	Gets a list of metric definitions for a particular website .
1871	Get publish profile XML .
1872	Get a publish profile .
1873	Update registry policies .
1874	Creates a new cloud service .
1875	Checks the availability of a job collection .
1876	Gets the specified job collection .
1877	Complete a restore operation .
1878	Cancels scheduled messages .
1879	Wait for all pending messages .
1880	Coroutine to reconnect .
1881	Creates a certificate from the publish settings .
1882	Restore cached cookies
1883	Calculate terminal width
1884	Get the prefix of a string .
1885	Print a message in place .
1886	Format a file size .
1887	Format elapsed time .
1888	Create a new status line .
1889	Print progress bar .
1890	Generate a list of segment numbers .
1891	Iterate over the segments of this segment
1892	Waits for the event to be processed .
1893	Put a segment into the queue .
1894	Put value into queue .
1895	Send a request to SWF
1896	Extract the nonce from the redirect URL .
1897	Find the vpid for the given url .
1898	Parse a JSON string .
1899	Parse XML data .
1900	Parse a query string .
1901	Searches for a given key in a dictionary .
1902	Spawn a new process .
1903	Iterate through HTML tags .
1904	Parse a manifest file .
1905	Determine the encoding of a sample .
1906	Convert a JSON response to a Python object .
1907	Parse XML response .
1908	Parse cookies .
1909	Parse headers .
1910	Parses query parameters .
1911	Get the message .
1912	Create a LogRecord instance .
1913	Login to LiveEu account
1914	Load a support plugin .
1915	Update the query string with the given query string .
1916	Yield chunks of flv file .
1917	Generator for all required arguments
1918	Check if a file exists .
1919	Create plugin output .
1920	Create an HTTP server .
1921	Yield HTTP requests .
1922	Start an HTTP stream .
1923	Pass a stream to a stream .
1924	Open a stream and return it .
1925	Write a stream to the output stream
1926	Read data from stream .
1927	Handle a single stream .
1928	Fetch streams
1929	Retrieve a list of streams for a given interval .
1930	Resolve stream name to a stream name .
1931	Return a string describing the valid stream weight
1932	Handler for the given URL .
1933	Print available plugins
1934	Open the streamlink to Twitch
1935	Load plugins from a directory .
1936	Set up global args .
1937	Setup the console
1938	Setup http session .
1939	Load all plugins .
1940	Set command line options .
1941	Log current version information .
1942	Get stream_id from text .
1943	Extracts HTML from text .
1944	Set an option .
1945	Get a specific option
1946	Set plugin option
1947	Get the value of an option
1948	Resolve a URL .
1949	Load plugins from a directory
1950	Convert a string to an integer .
1951	Validate that a value starts with a string .
1952	Validate that a value is a valid string .
1953	Returns a function that checks whether a string contains a string .
1954	Creates a getter that returns an attribute with the given default value .
1955	Apply a function applied to each value in a dictionary .
1956	Apply a function to a map .
1957	Validate a URL .
1958	Create an element from a value .
1959	Wrapper for findall_findall
1960	Find the player s URL in the response .
1961	Load M3U8 encoded string into M3U .
1962	Return the player name for a command .
1963	Log in to steam .
1964	Extract stream_id from HTML .
1965	Extract stream info from HTML .
1966	Login to the login website .
1967	Add a function to the map .
1968	Make an API call .
1969	Start a new session .
1970	Get information about a media .
1971	Creates and saves the API .
1972	Compress string .
1973	Format character formatter .
1974	Perform a human - readable output of a string .
1975	Read n bytes .
1976	Return the value at the given index .
1977	Return an explanation of this exception .
1978	Sets up a set of decodings .
1979	Compute the length table .
1980	Print a table of all symbols in the code .
1981	Reads a length tuple from the stream .
1982	Return an explanation for the given index .
1983	Return the value at the given index .
1984	Return the lower and upper and upper bounds of a segment
1985	Convert an integer to an unsigned integer .
1986	Return mnemonic .
1987	Return the mnemonic
1988	Parse action table .
1989	Evaluate action .
1990	Make a string of hex data from the given position .
1991	Process the stream .
1992	check for metablock length
1993	Read uncompressed data
1994	Read block types .
1995	Implements mtf
1996	Reads a prefix array .
1997	Return a monochrome of the given color .
1998	r Polychrome . Polychrome . Polychrome . Polynomial . Polynomial
1999	Create a arrow table fromva data .
2000	Decorator to patch a function
2001	Add virtual columns to the model .
2002	Add virtual columns to the model .
2003	Return a graphviz representation of the expression .
2004	Calculate the value counts for this column .
2005	Create a new DataFrame with the given mapper .
2006	Return an instance of VaEx application .
2007	Open multiple files .
2008	Create a VAMP object from a SAMP database .
2009	Create a Dataset object from an astropy table .
2010	Create a DataFrame from multiple arrays .
2011	Create an object from a set of scalars .
2012	Create a DataFrame from a pandas DataFrame .
2013	Load data from a CSV file .
2014	Return a remote server instance .
2015	Generate Zeldovich data .
2016	Concatenate a sequence of dfs .
2017	Create a column range
2018	Open a dataset .
2019	Evaluate an expression in the dataset .
2020	Decorator for delayed functions
2021	Return a set of columns that depend on the expression
2022	Run a task .
2023	Sort the list of indices
2024	Get info from a file .
2025	Clear the canvas .
2026	Wait for the last plot to finish .
2027	Open the specified document
2028	Context manager for writing to a file .
2029	Split arrays into masked arrays .
2030	Return a nop .
2031	Compute the first occurrence of a given expression .
2032	Compute the mean of an expression .
2033	Compute the sum of the expression .
2034	Calculate standard deviation .
2035	Calculate the covariance of an expression .
2036	Compute the minimum value of an expression .
2037	Compute the minimum value of an expression .
2038	Calculate percentile of an expression .
2039	Generate a plot of data .
2040	Calculate HEALPix counts for healpix
2041	Plot a healpix
2042	Plot a 3D dataframe .
2043	Return the dtype of an expression
2044	Get the private directory for this DFS
2045	Return a serializable representation of the model .
2046	Set the state of this QuerySet .
2047	Remove virtual_meta . yaml file
2048	Write virtual meta data to disk .
2049	Write meta data to disk .
2050	Return the subspaces of the given expressions .
2051	Set a variable with the given name .
2052	Evaluate a variable
2053	Evaluate a selection mask .
2054	Convert the table to a dictionary .
2055	Make a copy of this DataFrame .
2056	Returns a pandas DataFrame with the given parameters .
2057	Convert this table to an Arrow table .
2058	Convert to astropy . Table
2059	Add a new column
2060	Rename a column .
2061	Add virtual columns to polar .
2062	Add virtual columns to cartesian coordinates .
2063	Add virtual columns to the model .
2064	Add virtual columns to cartesian coordinates .
2065	Add virtual columns to the model .
2066	Add virtual columns to cartesian coordinates .
2067	Add virtual columns to cartesian coordinates .
2068	Add a virtual column to the table
2069	Delete a virtual column
2070	Add a variable to the dataset
2071	Delete a variable
2072	Return the tail of the first n elements .
2073	print head and tail
2074	Describe the dataset .
2075	Concatenate two lists .
2076	Set the current row
2077	Get column names .
2078	Trim the columns of the DataFrame .
2079	Return a new DataFrame with the specified indices .
2080	Extract a subset of the indices .
2081	Return a random sample of the distribution .
2082	Split a vector by a fractional .
2083	Split this region into chunks .
2084	Sort the values according to the given criterion .
2085	Create a new DataFrame with the given virtual column .
2086	Undo the selected selection .
2087	redo the selection history
2088	Returns True if the history can be undone .
2089	Select a boolean expression .
2090	Select non - missing columns .
2091	Return a new DataFrame with the columns removed .
2092	Selects a rectangle .
2093	Select the bounding box .
2094	Selects a rectangle with the given coordinates .
2095	Select an ellipse .
2096	Select a LassoLasso .
2097	Select the inverse of the current selection .
2098	Set the current selection .
2099	Execute a selection
2100	Find a valid name for a given initial_name .
2101	Return a list of all the root nodes of the expression .
2102	Generate a graphviz representation of the dataframe .
2103	Categorize a column .
2104	Encode a column in a DataFrame .
2105	Returns a Dataset containing the columns as a Dataset .
2106	Return the length of the mask .
2107	Horizontally stack all columns in self .
2108	Concatenate two DataFrames .
2109	Export this DataFrame to a HDF5 file .
2110	Add a new column .
2111	Patch a DataFrame
2112	Register a lazy function .
2113	Fill missing values in an array .
2114	Returns the dayofof week of the given time series
2115	return the dayofyear of the year
2116	Check if the time series is a leap year .
2117	Convert x to year
2118	Return the dt of the month of x
2119	Return the month s month name .
2120	return the day of x
2121	return day name of x
2122	return the week of weekof year
2123	Return the day of time
2124	Determine the dt of a minute
2125	Compute the dt of the second time series
2126	Convert x to a ColumnStringArrays .
2127	Concatenate x and other .
2128	Return True if x contains pattern .
2129	Return the number of occurrences of x in x .
2130	Find substring in x .
2131	Get a column array from x .
2132	Return the index of substring in x .
2133	Convert x to ColumnArrowArrays .
2134	Return a copy of x .
2135	Pad a string to a ColumnArrays .
2136	Create a new ColumnStringArrow with repeated elements .
2137	r Find a substring in x .
2138	Return the index of substring in x .
2139	Return a new ColumnStringArrowArrays with the given width .
2140	r Return a new row of string .
2141	Slice a sequence of strings .
2142	Strip the string from a string .
2143	Convert x to ColumnArrowArrays .
2144	Convert x to ColumnArrowArrays .
2145	Determine the autotype of an array .
2146	Convert to a numpy array .
2147	Write properties to file .
2148	Writes a single comment .
2149	Write a property to a file - like object .
2150	Iterate over properties from a file - like object .
2151	Convert a file - like object to unicode .
2152	Show installed versions
2153	Warn a keyword argument .
2154	Set the numpy library to use .
2155	Takes a librosa file and saves it to a CSV file .
2156	Adjust pitch - correction .
2157	Convert frames to samples .
2158	Convert samples to frames .
2159	Convert time series to frames .
2160	Convert a MIDI number to a note .
2161	Convert htz frequency to mel - scale
2162	Convert mels to Hz
2163	Generate n - dimensional frequencies
2164	Calculate the frequencies for a cqt .
2165	r Generate a set of mel frequencies
2166	A weighting of frequencies .
2167	Compute time - likelihood .
2168	Generate samples from an array of frames .
2169	Estimate the average CQT frequency
2170	Generate the pseudo - composite Fourier transform using ct .
2171	Calculate the icqt .
2172	Create a filter using a CQT filter .
2173	Takes a list of n_bins and returns a 2 - dimensional n - dimensional n - dimensional histogram
2174	Compute the response energy .
2175	Calculate the number of downsampling .
2176	Decompute the YAMT signal .
2177	Calculate cost for D TWT .
2178	Backtracking backward implementation .
2179	Implementation of Viterbi .
2180	Determine the discriminator over a transition matrix .
2181	Generate a random transition matrix
2182	The transition loop
2183	Generate a transition matrix
2184	r Generate a transition matrix
2185	Compute onset detection for a given frame .
2186	Compute the onset strength .
2187	Find onset backtrack backtrack
2188	Evaluate multiple onset strength .
2189	Write annotations to a CSV file .
2190	Write audio data to a WAV file .
2191	Compute a colormap .
2192	Generate a waveplot .
2193	Sets the current image
2194	Return mesh coordinates .
2195	Convert axes to matplotlib . axes .
2196	Helper function to scale axes .
2197	Calculate the z - axis of the FFT bins .
2198	r Coordinate mel_hz .
2199	Calculate the CQT frequencies for a given note .
2200	Determine the chromosomes of a chromosome .
2201	Convert numpy array to time
2202	Estimate the tuning tuning for piprack .
2203	Calculate piptrack spectrum .
2204	Compute the spherical harmonic Fourier transform
2205	Compute the harmonic Fourier transform
2206	Compute the perc Fourier transform
2207	Stretch the Time Fourier Transform
2208	Apply pitch shift to y .
2209	Removes the audio from an audio buffer
2210	Compute the MSE for a signal .
2211	Trim the samples of a signal .
2212	Split a signal into two samples .
2213	Generate a phase - vocab from a time series .
2214	Determine the amplitude of a signal .
2215	Compute a spectral spectrogram from a spectrogram .
2216	Calculate HPSS beats
2217	Decomposes the network and activations .
2218	Filter the self - similarity matrix .
2219	Filters out neighbors of a recurrence matrix .
2220	r Calculate the weights of the mel - band frequency bins
2221	Generate a ~astropy . chroma
2222	Wrap a window to a float
2223	Generate a constant frequency filter for a single sample .
2224	Compute frequency frequencies for a given frequency range .
2225	Merge CQ bins to chroma bins .
2226	Calculate the bandwidth of a window .
2227	Convert a window to a signal .
2228	Multirate a multirate audio file .
2229	Compute the center frequencies for a tuning tuning .
2230	Helper function to fill in window_sq .
2231	r Compute the squared difference of a window .
2232	Create a diagonal filter .
2233	r Compute the centroid of a spectrogram .
2234	Compute spectral rolloff .
2235	Estimate the spectral density of a spectrogram .
2236	Compute features of a spectrogram .
2237	Calculate the mean crossings of an audio array .
2238	Calculate a Spectrogram of a spectrogram
2239	Calculate the CQT
2240	Calculate melspectrogram .
2241	Jaccard similarity .
2242	Find the best matching interval in intervals_to_to .
2243	Match two intervals .
2244	Matches two intervals .
2245	Match events between two events .
2246	Compute the salience value for a signal
2247	Calculate the harmonic harmonics of an array .
2248	Calculate the harmonic energy of a fixed - grid .
2249	Compute the harmonics between two values .
2250	Load audio data from a file .
2251	Load audio data from an audio file .
2252	Convert audio to mono .
2253	Resample audio to target_sr
2254	Compute the autocorrelation of a signal .
2255	Compute the lpc of an audio channel .
2256	Generate a set of click positions .
2257	Compute a tone .
2258	Generate a chirp .
2259	Get all files in a directory
2260	This function demonstrates the time - stretch of an audio file .
2261	Parse command line arguments .
2262	Implements the hssa file
2263	Calculate a beat track .
2264	Compute the beats track
2265	Compute the local score of a beat .
2266	Compute the backlink track of a beat .
2267	Determine the last beat
2268	Convert a recurrence matrix to lag matrix .
2269	Convert lag matrix to recurrence matrix .
2270	Decorator for time - lag filter functions .
2271	Segmentation of frames .
2272	Agglomerative clustering .
2273	Enhanced path enhancement .
2274	Run on onset detection
2275	Frame a numpy array of frames
2276	Checks that the input array is valid .
2277	Check if x is a valid integer .
2278	Pad data with padding .
2279	Sorts a 2D array along an axis .
2280	Normalize an array .
2281	r Local maximum value .
2282	Perform a peak pick of data .
2283	Remove rows from a sparse matrix .
2284	Roll a sparse matrix .
2285	Convert a numpy array to a numpy array .
2286	Convert frames to slices .
2287	Synchronize data .
2288	Compute the softmask of the input data .
2289	Generate a tiny type of x .
2290	Write video to video_dir
2291	Read a PNG image
2292	Get a frame by frame_id .
2293	Write frames to frames_dir .
2294	Shows the progress bar for the given tasks .
2295	Calculate a progress bar .
2296	Flip an image .
2297	Rotate an image .
2298	Clip bounding boxes .
2299	Scales bounding boxes by the given scale .
2300	Crop an image .
2301	Impute an image .
2302	Impads image to multiple dimensions .
2303	Calculate the size of the given size .
2304	Resize an image .
2305	Resize an image .
2306	Rescale an image .
2307	Register a file handler .
2308	Get a priority value
2309	Dequantize an array .
2310	show image
2311	Display a set of bboxes .
2312	Read a flow file .
2313	Write flow data to file .
2314	Determine the flow of two arrays .
2315	Loads the state_dict from the given module .
2316	Load model from filename .
2317	Convert weights to cpu
2318	Save model checkpoint to filename .
2319	Initialize the optimizer .
2320	Initialize a logger .
2321	Get current learning rate .
2322	Register a hook .
2323	Run a workflow .
2324	Register training hooks .
2325	Convert ffmpeg to out_file .
2326	Resize video .
2327	Cut a video from a video .
2328	Concatenate video list into a single file .
2329	Create a list of strings from a file .
2330	Read a file from a file .
2331	3 - convolution layer
2332	Create an object from a dictionary .
2333	Read an image from a file or filename .
2334	Creates an image from a byte string .
2335	Write image to file .
2336	RGB to gray
2337	Convert grayscale to RGB .
2338	Cast an iterable to another type .
2339	Returns True if the given sequence is a sequence of expected type .
2340	Slice a list of integers .
2341	Decorator to check prerequisites .
2342	Average the last n values .
2343	Scans input to devices .
2344	Convert a color to a tuple .
2345	Get the time of a timer .
2346	Starts the timer .
2347	Return the number of seconds since the last run .
2348	Returns the duration of the last check .
2349	Display a flow
2350	Convert a flow to RGB coordinates .
2351	Make a color wheel .
2352	Compute the accuracy of the target .
2353	Scatter the input tensor .
2354	Scatter inputs and kwargs .
2355	Perform a request .
2356	Convert response to JSON .
2357	Return the response as a string .
2358	Handle an AWS callback .
2359	Request multiple URLs .
2360	Create a Request object
2361	Start the master .
2362	Normalize task arguments .
2363	Parse YAML line numbers .
2364	The wheel distribution name
2365	Returns the archive basename .
2366	Add additional requirements to metadata
2367	Convert an egg - info file to a distribution .
2368	Create a message activity .
2369	Create a message with suggested actions .
2370	Show an attachment .
2371	Create an activity activity .
2372	Create an attachment .
2373	Create a trace activity .
2374	Setter for telemetry client .
2375	Reads a collection of items from the database
2376	Write a dictionary to the store .
2377	Delete multiple keys from a collection
2378	Create a StoreItem from the response
2379	Creates a dictionary containing the content of the item
2380	Sanitize key
2381	Creates and returns database and container .
2382	Get or create a database .
2383	Get or create a container .
2384	Fill in Qna EventData with QnaResults .
2385	Get a conversation reference
2386	Get step name .
2387	Check if the user has suggested actions .
2388	Check if card actions are supported by card actions .
2389	Returns the channel id of the given turn .
2390	Returns True if the auth header is a valid token .
2391	Create a attachment for a hero card .
2392	returns a list of params
2393	Return a mirror of this instance .
2394	Return an inverse gate .
2395	Set the control value for a classical register .
2396	Create a copy of this object
2397	Return a QASMIFIF statement .
2398	Returns the QASMIF instruction
2399	Run a circuit .
2400	Run a single pass through a dag .
2401	Return a list of PASSes as a list .
2402	Dump all the passes to a dictionary .
2403	Generate a controller .
2404	Create a U base .
2405	Return parameters for a single gate .
2406	Convert a single - gate to a single - gate matrix .
2407	Generate an einsum index for a given gate indices .
2408	Calculate the einsum index .
2409	Helper function for _einsum_matmul_matrix .
2410	Convert a DAG circuit into a DAG circuit .
2411	Exponential fit function
2412	Function to fit a curve .
2413	Plot the coherence of the fit .
2414	Shape the R data into a list of standard deviations .
2415	Plots the R - R data .
2416	Split a list of runs into individual gates .
2417	Compose two UZ components .
2418	Convert YZ to ZYZ .
2419	Checks that the input is a square matrix .
2420	Trim the background from an image .
2421	Get the span of a gate .
2422	Convert a circuit to an instruction .
2423	Run Transpiler .
2424	Find the n_qubits of the network .
2425	Adds a barrier to the circuit .
2426	returns the average weighted average of counts
2427	Process a bit id node .
2428	Process a custom unitary node .
2429	Processes a gate node .
2430	Process CNOT node .
2431	Process a Measure node .
2432	Process if node .
2433	Create an op class for a given name .
2434	Return the duration of the given channels .
2435	Return the start time of the channel
2436	Return the current stop time for the given channels .
2437	Iterate over instructions in this schedule .
2438	Check that value is of expected type .
2439	Dump additional data to valid_data
2440	Load additional data
2441	Create a validation schema .
2442	Validate a model instance .
2443	Decorator to validate the passed arguments
2444	Serialize the model to a dictionary .
2445	Load a model from a dictionary .
2446	Compute the Fourier Transform .
2447	Partial partial trace vector .
2448	Vectorize a density matrix
2449	Deserialize a matrix .
2450	Convert a list of Pauli operators to a Rauli matrix .
2451	Remove elements from an array .
2452	Compute the outer outer product of two vectors .
2453	Compute the concurrence of two qubits .
2454	Compute Shannon entropy .
2455	Calculate the Shannon entropy of a state .
2456	Calculate mutual information .
2457	Estimate the entangulation of a state - vector .
2458	Calculate the eof qubit entropy .
2459	Flatten a schedule .
2460	Shift a schedule by time .
2461	Insert a schedule into a schedule .
2462	Append a child component to the parent .
2463	Create a new U3 gate .
2464	Return the backend status
2465	Start the simulation .
2466	Return the time remaining since last iteration
2467	Disassembles an experiment .
2468	Compute the hamming distance between two strings .
2469	Return a quaternion from an axis and a rotation .
2470	Return a quaternion from euler angles .
2471	Normalize the quaternion .
2472	Convert to matrix .
2473	Converts the rotation matrix to the euler z .
2474	Processes data according to number of unique values .
2475	Generate a histogram of data .
2476	Check the value of the parameter .
2477	Check if a register is in the range .
2478	Check if a matrix is a square matrix .
2479	Check if a matrix is a diagonal matrix .
2480	Check if op is symmetric matrix .
2481	Check if a matrix is a Hermitian matrix .
2482	Checks if a matrix is positive semidefinite .
2483	Check if a matrix is square identity .
2484	Check if a matrix is unitary .
2485	Convert repos to Choice
2486	Convert data to superoperator .
2487	Convert data to Kraus .
2488	Convert data to Choi representation .
2489	Convert data to PMM .
2490	Convert data to Stinespring .
2491	Convert data to an operator .
2492	Convert an operator rep to a binary representation .
2493	Convert a Stinespring signal to an Operator representation .
2494	Convert superop to choi .
2495	Convert Choice to superop .
2496	Compute the choi component of the covariance matrix .
2497	Convert Choi matrix to a Kraus operator .
2498	Convert a stochastic stines to a Kraus ramp .
2499	Convert Stinespring spin to choices
2500	Convert a set of pseudines to stines .
2501	Compute the superoperator of the Kraus operators .
2502	Translates data from the Choi matrix .
2503	Convert data tochi .
2504	Reshape two matrices .
2505	Transforms data from Pauli gate to matrix .
2506	Checks that the input dimension is a n - qubit channel .
2507	Hide ticklines and labels .
2508	Set the label convention
2509	Clear the object .
2510	Add a list of vectors
2511	Add an annotation
2512	Render a Bloch sphere .
2513	Plot the surface .
2514	Show the figure .
2515	Deprecated .
2516	String representation of the top layer .
2517	The mid part of this layer .
2518	String representation of bot .
2519	The length of the rectangle .
2520	Return a list of parameters for an instruction .
2521	Generate a label for an instruction .
2522	Return LaTeX representation of the local variable .
2523	Compile a circuit .
2524	Filter deprecation warnings .
2525	Return local hardware information .
2526	Check if the given hostname is already connected .
2527	Check the status of a job .
2528	Applies a constant to the given times .
2529	Compute a square array with amplitude and phase .
2530	Calculate the triangle of a triangle .
2531	Cosine cosine .
2532	Replace the amplitude of the gaussian width .
2533	Generate a gaussian with a gaussian .
2534	Calculate the derivative of a gaussian .
2535	Perform a gaussian on a square .
2536	Return a pass manager for the pass manager .
2537	Creates a simple pass manager for the given basis gates .
2538	Check if a register is in the circuit .
2539	Return a copy of this circuit .
2540	Return the inverse circuit .
2541	Append an instruction onto the circuit .
2542	Attach an instruction .
2543	Add registers to circuit .
2544	Check for duplicate qubits .
2545	Check that qargs are valid .
2546	Check that the carg is in the circuit .
2547	Check that the circuit registers are compatible .
2548	Return the assembly assembly .
2549	Draw circuit .
2550	The size of the circuit .
2551	The width of the register .
2552	Count the number of operations in this instruction .
2553	Returns the number of connected components .
2554	Creates a new circuit with given values .
2555	Bind a parameter to the instruction .
2556	Draw pulse drawer .
2557	Search for forward n swaps .
2558	Map free gates to free gates .
2559	Calculate the distance between the layout .
2560	Score a step .
2561	Creates a new DAG with metadata from the given coupling map .
2562	Apply a gate to a layout .
2563	Create a swap gate from an edge .
2564	Run transpiler on a DAG .
2565	Add a physical qubit to the coupling graph .
2566	Add an edge .
2567	Return a subgraph of this coupling .
2568	List of physical qubits .
2569	Returns True if the graph is disconnected .
2570	Compute the distance matrix for each coupling .
2571	Compute the distance between two channels .
2572	Deprecated .
2573	Create a Cu1 gate .
2574	Inverse of instructions .
2575	Apply q_ifs to the gate .
2576	C_ifary .
2577	Subscribe to an event .
2578	Dispatch an event .
2579	Remove a callback from an event .
2580	Publish an event .
2581	Initialize this circuit .
2582	Define the initial vector .
2583	Return a circuit to disassembling the LSB gates .
2584	Compute the bloch angle of a complex complex .
2585	Create a circuit on a list of angles .
2586	Checks if the value is a virtual machine .
2587	Make a copy of this layout .
2588	Combine layout into an edge map .
2589	Create a CCI gate .
2590	Insert a schedule into this schedule .
2591	Check if the given property is fenced .
2592	Convert a list of gates to indices .
2593	Run the Transpiler .
2594	Update the layout .
2595	Gets the Pauli group of qubits .
2596	Create Pauli from a label string
2597	Initialize the Q object from a boolean array .
2598	Return the product of p1 and p2 .
2599	Convert the circuit to an Operator instance .
2600	Convert this gate to an instruction .
2601	Update the qubits .
2602	Update the x .
2603	Insert a Pauli with the given indices .
2604	Append a new Paulis .
2605	Delete qubits at the given indices .
2606	Create a boolean gate .
2607	Construct a Pauli Pauli operator .
2608	Compute the outcome of a qubit .
2609	Add samples to the classical memory .
2610	Add measure outcome to classical memory .
2611	Add a new qubit state to the circuit .
2612	Validates the initial state vector
2613	Initialize the state vector .
2614	Get the state vector of the qubits .
2615	Determine whether the circuit can be sampled or not .
2616	Run a job .
2617	Run a single job
2618	Validate the circuit .
2619	Validates the initial unitary .
2620	Initialize the matrix .
2621	Return the unitary matrix .
2622	Run a job
2623	Validate the circuit .
2624	Check if an object is a bit .
2625	Run transpiler .
2626	Check if this interval overlap .
2627	Return a new interval shifted by a given time .
2628	Return a new Timeslot shifted by a given time .
2629	Return the start time of the given channels .
2630	Return the last stop time for the given channels .
2631	Check if timeslots are mergeable .
2632	Return a new TimeslotCollection with merged timeslots .
2633	Return a new Timeslot with the given time .
2634	Report the issue as a comment .
2635	Transforms the data into a dictionary .
2636	I plot of PauliC state
2637	Create a RZ gate .
2638	Swap two shards .
2639	Initialize the adjacency matrix .
2640	Create the program graph .
2641	Select the next edge to the next program .
2642	Select the remaining circuit .
2643	Determine the best remaining qubit for a program .
2644	Run Transpiler .
2645	Returns a list of instruction instructions .
2646	Inverse gates .
2647	Apply q_ifs to gates .
2648	Apply a c_if gate to the gate .
2649	Determines if the matrix is a unitary .
2650	The conjugate operator .
2651	Return a transposed operator .
2652	Return the operator power of the operator .
2653	Return the shape .
2654	Convert a circuit to an operator operator .
2655	Update the swap mapper layer .
2656	Separate a bitstring into a space separated string .
2657	Format a level array of memory .
2658	Format a high - level memory array .
2659	Format a list of memory counts into a list of memory counts .
2660	Format a counts dictionary .
2661	Format a complex state vector .
2662	Format a matrix as a unitary .
2663	Decorator to check if the job has been submitted .
2664	Submits a job to the executor .
2665	The status of the job .
2666	Check if lo_freq is within lo_freq .
2667	Implements a multivariate multivariate multivariate selection plot
2668	Get the low frequency for the given user config .
2669	Get the default measurement frequencies for each channel .
2670	Run the circuit on a given DAG .
2671	Implements the qsphere
2672	Determine the number of items in n_chooses .
2673	Compute the lexicographical lexicographical index of a list .
2674	Plots the state of the quantum state .
2675	Returns a list of unique backends .
2676	The op node
2677	Create a samplePulse .
2678	Create a samplePulse .
2679	Return a sample PulsePulse .
2680	Create a new sawtoothoth pulse .
2681	Create a sample PulsePulse .
2682	Create a sample PulsePulse .
2683	Create a sample Pulse .
2684	Create a samplePulse .
2685	Return the derivative of the Gaussian derivative at the given duration .
2686	Create a sample Pulse .
2687	Distance to the real axis .
2688	String representation of QReg
2689	Returns a backend instance .
2690	Rename a register .
2691	Removes all ops with the given opname .
2692	Add a quantum register .
2693	Add a classical register .
2694	Add a wire to the graph .
2695	Verify that condition exists .
2696	Return all bits in a condition .
2697	Add a node to the DAG node .
2698	Apply an operation back to an operation .
2699	Checks that the edge map registers are valid .
2700	Check that the wire_map is valid .
2701	Map the condition to a boolean value
2702	Compose the back of the given dag .
2703	Compose the circuit .
2704	Check that the wires are valid .
2705	Create a map of pred and successors of a node .
2706	Return the full predecessor and successors of a DAG .
2707	Return a list of topological nodes .
2708	Iterate over all edges in the MultiGraph .
2709	Return a list of nodes with the given op .
2710	Return a list of gate nodes .
2711	Return a list of nodes with named names .
2712	Return a list of two Q gates .
2713	DEPRECATED
2714	Return predecessors of a node .
2715	DEPRECATED
2716	Returns the successors of a node .
2717	Removes an op node from the graph .
2718	Removes all ancestors of a node .
2719	Removes all descendants of a node .
2720	Removes all non - ancestor nodes of a node .
2721	Removes all nodes of a node .
2722	Iterate over the DAGCircuit .
2723	Serialize this DAG into a layer .
2724	Yield multigraph layers .
2725	Return a set of gates that match a given qubit .
2726	Iterate over the nodes of the given wire .
2727	Count the number of operations in the graph .
2728	Return a summary of the tensor .
2729	Return a tomography basis .
2730	Add Pauli gates to the circuit .
2731	Compute the tomography basis for a measurement .
2732	Return a process of a tomography set .
2733	Create tomography and measurement gates from a circuit .
2734	Return the data for a tomography .
2735	Calculate marginal counts based on measurement counts .
2736	Fit the tomography data to the given data
2737	Calculate the Leastq - fit fit fit .
2738	Compute the projection of a list of qubits .
2739	Inverse of tomo - linear inv .
2740	This function is used to determine the wizard step .
2741	Compute Wigner data .
2742	Evaluate measurement gate .
2743	Check the status of a job .
2744	Monitor a job .
2745	Compute the euler angles in the unitarymatrix .
2746	Simplify an unsigned U gate .
2747	Ensure that the layout is in the graph .
2748	Show the Qbits tab .
2749	Show the jobs history
2750	Plot the job history .
2751	Draw the pulse .
2752	Create a Cu3 gate .
2753	Produce a Bell circuit .
2754	Run transpile on a circuit .
2755	Run a transpile circuit .
2756	Execute a set of experiments .
2757	Return the drive channel .
2758	The control channel .
2759	The measure channel associated with this measurement .
2760	Return the first acquired channel .
2761	Generate input state
2762	Assemble a list of experiments .
2763	Unset the qiskit logger
2764	Implements the hinton state .
2765	Processes two channels .
2766	Handle input data .
2767	Pops the next QASM stack .
2768	Push the lexer onto the stack .
2769	Compute the circuit .
2770	Returns the bound method for the given instruction
2771	Convert an acquire instruction to a QObject .
2772	Convert a FrameChange instruction to a QObject model .
2773	Convert a persistent value to qobj .
2774	Convert a drive instruction to a QObject model .
2775	Convert a snapshot to a QObject .
2776	Update the annotations of a signal .
2777	Decorator to create a sampler function .
2778	Filter backends .
2779	Resolve backend name .
2780	Convert a dag to QuantumCircuit .
2781	Convert a matrix to a dictionary .
2782	Update the symbol declaration
2783	Verify that a bit is declared in the gate .
2784	Verify that a list of expressions are valid .
2785	Verify that the given object is a gate .
2786	Verify a register .
2787	Verify that the given object is a bitlist or not .
2788	Find the column in the input string .
2789	Parse debug value .
2790	Parses the given data and returns a QAS object .
2791	Run the parser .
2792	Parses the QASTA file .
2793	Create a crz gate .
2794	Create a basis set from a bitstring .
2795	Compute the projected density matrix .
2796	Calculate the purity of a state .
2797	Run the simulation .
2798	Create HTML for backend
2799	Update the status of each backend
2800	Generate a HBox widget for jobs .
2801	Simplify the cx run .
2802	Get a single backend
2803	The shape of the multipartite dataset .
2804	Given a list of bit labels yield register specifications .
2805	Truncate a float .
2806	Generate LaTeX for LaTeX .
2807	Calculate the image depth
2808	Calculate the size of the page to fit the size of the sum of the total image .
2809	Load schema from file .
2810	Get validator for given name .
2811	Load all available schemas .
2812	Validate a dictionary against a schema .
2813	Return a list of strings representing the error message .
2814	Calculate the majority of a node .
2815	Emulate unmajority of a vector .
2816	Generate a LaTeX source for a circuit .
2817	Draw a circuit .
2818	Generate a random unitary operator .
2819	Generate a random density matrix
2820	Generate a Gaussian matrix
2821	Generate a random density matrix
2822	Generate random density probabilities .
2823	Returns the names of the call
2824	Return a superOp on the superoperator .
2825	Compute the subsystem product .
2826	Convert a QuantumCircuit to a SuperOp instance .
2827	Run DAG on a DAG .
2828	Convert a circuit into a QKObject .
2829	Unroll all 3Q gates .
2830	Run the decomposition of this gate .
2831	Define the U3 gate definition .
2832	Check that value is a collection of objects .
2833	Validate the type of the list
2834	Set atol .
2835	Setter for rtol .
2836	Reshape the input_dims .
2837	Tuple of input dimensions .
2838	Tuple of output dimensions .
2839	Returns a copy of the tensor .
2840	Return a new Qiskit .
2841	Determine the dimensions of a dimension .
2842	Einstein sum op .
2843	Handle deserialization .
2844	Validate the given value .
2845	Check that the value is of the correct type .
2846	Compute the fidelity between two states .
2847	Helper function for SVD
2848	Return the inverse snapshot .
2849	set label
2850	Return True if the operator is unitary .
2851	Convert to an operator .
2852	Converts a QuantumChannel to an Instruction .
2853	Initialize the transformer for the input data .
2854	Returns an enum for the given model .
2855	Monkey patch version of strftime
2856	Returns a map of the locale map .
2857	Returns a generator for all available locale objects .
2858	Check if tokens are valid .
2859	Split a string into tokens .
2860	Parses a date string .
2861	Parse a date string .
2862	Check if the given date string is applicable .
2863	Translate a date string .
2864	Parses a string using the specified formats .
2865	Returns an instance of the missile generator
2866	Convert a string to a netC exception .
2867	Convert a string to an http exception .
2868	Read the configuration .
2869	Create a phantom configuration .
2870	Get information about all streams
2871	Compose the config file
2872	Log stdout and stderr .
2873	Expand a time string into a float .
2874	Read the configuration of the StepperWrapper .
2875	Prepare stepper
2876	Returns the filename of the stpd file .
2877	Read the cached stepper info file .
2878	Write cached info to disk .
2879	Create stpd - file
2880	Create a LPS object
2881	Return the rps at t .
2882	Execute a shell command .
2883	Decode monitoring data .
2884	Make a list of points for a given label
2885	Publish a new status
2886	Count the number of matched codes .
2887	Stop the worker thread .
2888	Feed all workers .
2889	Initialize logging .
2890	Add shorthand options
2891	Configure the plugin
2892	Gracefully gracefully
2893	Collect data from the queue
2894	Notify the aggregated data
2895	Create a URI marker for the given marker type .
2896	Parses a duration .
2897	Start the agent on the localhost
2898	Start the ssh agent .
2899	Determine the JMeter UDP UDP port .
2900	Add boilerplate components .
2901	Terminate the process .
2902	Read data from a list of lines
2903	Creates a criterion based on the given criterion string .
2904	Get the configured monitoring config
2905	Create the config file for the given host .
2906	Check the disk space
2907	Check if available memory is available .
2908	Get terminal size
2909	Get right panel
2910	Truncate a line array .
2911	Render the left panel
2912	Render the screen .
2913	Add info widget .
2914	Fill blank lines with spaces .
2915	Calculate length of a string .
2916	Create a load plan .
2917	Returns the level string
2918	Add an info widget to the screen
2919	Make a request to the writer .
2920	Load plugins .
2921	Get the plugin with the given class .
2922	Get all plugins of a specific plugin .
2923	Collects a single file into artifacts_dir
2924	Add a file to the collection .
2925	Create a temporary file .
2926	Load config files .
2927	Write the current configuration to a file .
2928	Get all options from section .
2929	Find all sections that start with the given prefix .
2930	Decode a chunk of data chunk
2931	Get phantom info .
2932	Create monitoring agent for hosts .
2933	Poll agent data .
2934	Collect data from all listeners
2935	Determine whether or not the core is either a telegraf or a Monitor .
2936	Handles data items
2937	Decode agent data .
2938	Subscribe to the given channels .
2939	Run the event loop .
2940	Close the mesh .
2941	Perform a single request .
2942	Submit a new order
2943	Get an order .
2944	Get a single position
2945	Returns a list of assets .
2946	Get a single asset .
2947	Creates a new sub - plan for a given pipeline .
2948	Ensures that the given object is of a dictionary .
2949	Ensures that an object is a dictionary of type parameters .
2950	Constructs an event logger .
2951	Construct a JSON - event logger .
2952	Load configuration from a file .
2953	Get repository configuration
2954	Format a configuration dictionary into a graphql string .
2955	Get a pipeline by its name .
2956	Get all known pipelines
2957	Get the next event from the queue .
2958	Execute a pipeline .
2959	Wait for all processes to finish .
2960	Create a dagster field .
2961	Construct the execution plan .
2962	Builds a workflow .
2963	Build a sub - pipeline from a pipeline definition .
2964	Return the solid with the given name .
2965	Construct publish commands .
2966	Create a new release .
2967	Creates a passthrough context definition .
2968	Decorator for creating an input selector schema .
2969	Decorator to define an output selector schema .
2970	Print a block of text .
2971	Download file from S3
2972	Upload file to S3 .
2973	Temporarily raise a RuntimeError exception .
2974	Create a new directory .
2975	Context manager for a user code block .
2976	Creates a context manager for the given run .
2977	Return True if the step has success False otherwise .
2978	True if step_SKIPPED is skipped .
2979	Returns the transformed values .
2980	Return the transformed value for this step .
2981	Return the failure data for each step .
2982	Creates a ConfigurableDict .
2983	Check if config value is a valid dataset value .
2984	Return True if the config value is valid .
2985	Execute a core transform .
2986	Decorate an existing type with a new type .
2987	Decorator to define a resource definition .
2988	Create a new EventV2 EventV2 .
2989	Coalesce the execution steps into a single order .
2990	Returns a dictionary of the connection params to be used in the database
2991	Get a new connection .
2992	Create a new Cursor instance .
2993	Close the connection .
2994	Create a model object from a model dictionary .
2995	Convert a list of mdl objects to a list
2996	Default formfield
2997	Convert value to model instance
2998	Apply core filters to a queryset .
2999	Compute the NFP NFP .
3000	Compute the NFP NFP
3001	Compute best partitions .
3002	Compute optimal optimal partitions .
3003	Calculate the c1 and r2 .
3004	Initialize the slots .
3005	Return the size of the hash .
3006	Serialize this MinHash into a buffer .
3007	Deserialize a file - like object .
3008	Update the hashvalues with the given b .
3009	Merge two MinHash objects .
3010	Create a new MinHash object from a list of MinHash functions .
3011	Index entries in the set .
3012	Query all indexes for the given minhash and size .
3013	Compute the minimum hash value for each sample .
3014	Remove a key from the cache .
3015	Update the register
3016	Count the number of samples .
3017	Merge two HyperLogLogLogLogs .
3018	Clear memory .
3019	Compute the APK score .
3020	Calculate the mean k - th correlation coefficient .
3021	index all hashtables
3022	Query the given minhash
3023	Close all caches .
3024	Return an instance of an ordered list .
3025	Factory for unordered storage
3026	Return user data .
3027	Update social login state .
3028	Select a text from a string .
3029	Parse a scoped_selector .
3030	Parse a statement .
3031	Parse a single value .
3032	Advance the current line .
3033	Parse a configurable reference .
3034	Augment an exception with a traceback .
3035	Convert an OP config string to markdown format .
3036	Runs the operative config .
3037	Ensure that the decorated function is wrapped .
3038	Decorate a function or class .
3039	Format a value .
3040	Clear the global configuration .
3041	Bind a parameter to a given value .
3042	Returns the parameter bound for a given binding .
3043	Determine whether a function has a parameter .
3044	Get the argument specification of a function .
3045	Returns the positional parameter names for the given fn .
3046	Get all positional parameters of a function fn .
3047	Get the default values for a function fn .
3048	Context manager for creating a scope .
3049	Decorator to mark a function as configurable .
3050	Generate an operative config string .
3051	Parse a set of config statements .
3052	Decorator to register a file reader .
3053	Parse a config file .
3054	Parse a list of config files .
3055	Parse config value .
3056	Finalize the configuration .
3057	Iterate over nested values .
3058	Iterate over all configurable references .
3059	Set a constant .
3060	Add constants to enum .
3061	Find all selectors that match a partial selector .
3062	Returns a list of all matches that match the given partial selector .
3063	Return the minimal selector of a selector .
3064	Convert a query to a SP query string .
3065	Parse the Retry - After - After - After header .
3066	Validate the given value
3067	Return a description of the resource
3068	Set value .
3069	Get a thing .
3070	Initialize the object .
3071	Sets default headers .
3072	Check if the request is allowed .
3073	Get a single thing .
3074	Called when a message is received .
3075	Create a new thing .
3076	Delete a thing .
3077	Start the service .
3078	Return a dictionary representation of the action .
3079	Start the action .
3080	Mark the task as finished
3081	Return an event description .
3082	Get IP address .
3083	Return a list of IPv6 addresses .
3084	Set the value of the given value
3085	Emit update signal .
3086	Return a thing description as a dict .
3087	Sets the href prefix for all properties .
3088	Get a dict of property descriptions
3089	Get action descriptions .
3090	Returns a list of all event descriptions for the specified event .
3091	Adds a property to this resource .
3092	Removes a property
3093	Get the value of a property
3094	Return a dict of all properties
3095	Set the value of a property .
3096	Get action by name .
3097	Add an event to the list .
3098	Add an available event .
3099	Perform an action with the given name .
3100	Cancel an action .
3101	Add an available action .
3102	Remove a subscriber .
3103	Add a subscriber to an available event .
3104	Remove an event subscriber
3105	Notify a property of a property .
3106	Send an action to all subscribers .
3107	Notify an event .
3108	Add annotations to the model .
3109	Perform an update on the model .
3110	Perform bulk insert .
3111	Overrides insert method .
3112	Insert the given fields into the database .
3113	Build a postgresql query .
3114	returns True if the field has changed
3115	Determine the insert fields for the given model .
3116	Called when a new model is created .
3117	Called when a model is deleted .
3118	Checks if a field is not None .
3119	Return a HStoreValue with the given arguments .
3120	Returns the SQL as a string .
3121	Return a copy of this instance with relabeled labels .
3122	Add a join condition to the query .
3123	Check if the given field name is a HStoreField instance .
3124	Insert data into the table .
3125	Create a required constraint for a given field .
3126	Renames a constraint that is required for a particular key .
3127	Drop the required constraint for a given field .
3128	Returns the name of the required constraint name .
3129	Generate the sql statement for the index .
3130	Creates a custom command from a list of commands .
3131	Get the database back - - end module .
3132	Create an hstore extension .
3133	Prepare the value for the database
3134	Formats the return statement
3135	Return the SQL as a list of SQL statements .
3136	Rewrite the insert action .
3137	Rewrite an INSERT statement .
3138	Rewrite the insert statement .
3139	Build conflict target .
3140	Get model field by name .
3141	Format field name .
3142	Returns the string representation of the given field .
3143	Create a unique constraint .
3144	Rename a unique constraint .
3145	Drop a unique constraint .
3146	Return unique constraint name .
3147	Iterate over unique keys .
3148	Add a new condition .
3149	Returns the SQLAlchemy SQL as a string .
3150	Returns the tdist_95 configuration level for a given table .
3151	Compute the variance of two samples .
3152	Compute the t - score between samples .
3153	Check if two samples are significant .
3154	Topological sort .
3155	Generator that yields n - queens .
3156	Play a given board .
3157	Select an inventory
3158	Play out a random playout .
3159	Remove benchmarks that are not compatible .
3160	Expand all benchmarks in a group .
3161	Generates a string table of strings .
3162	Initialize benchmarks .
3163	Returns the domain of the knot .
3164	Fetch messages from channel
3165	Return a generator of posts .
3166	Fetch a user
3167	Fetch items from category
3168	Fetch RSS entries
3169	Setup the command line argument parser .
3170	Fetch bug items .
3171	Get bugs .
3172	Get comments for a bug .
3173	Get bug history
3174	Get attachment data
3175	Get issue notes .
3176	Fetch merged merge requests
3177	Get merge notes .
3178	Get a list of merge versions
3179	Gets all merges .
3180	Fetch a merge .
3181	Get the versions of a merge .
3182	Fetch a merge version .
3183	Get notes for a specific item .
3184	Fetch a list of emojis items .
3185	Fetches notes for a specific note .
3186	Return the time to reset .
3187	Generator for paginated items
3188	Initialize the rate limit
3189	Setup the command line argument parser
3190	Fetch all messages for a given date .
3191	Generate a unique ID for the given metadata .
3192	Returns the number of members of a conversation .
3193	Get information about a channel
3194	Get information about a user .
3195	Setup the command line argument parser .
3196	Get the updated timestamp of the metadata
3197	Parse a CSV file .
3198	Parse bug details .
3199	Parse bug activity text .
3200	Logout from Bugzilla .
3201	Get bug metadata
3202	Get bug list .
3203	Get information about a bug .
3204	Get the activity of a bug .
3205	Fetch events for given category .
3206	Fetch events from given category
3207	Get events for a specific group
3208	Get comments for an event .
3209	Get VRS data for an event .
3210	Fetch a question
3211	Fetch comments for a question
3212	Build a question from an HTML question
3213	Yields API questions from given path .
3214	Get the HTML for a question .
3215	Get comments for a post .
3216	Parses the question container
3217	Parse answers container for an answer .
3218	Returns the number of html pages in html page .
3219	Parses the update_info element into a dictionary .
3220	Return an iterator of review items
3221	Parse reviews in JSON format .
3222	Fetch gerrit28 .
3223	Get the server version .
3224	Get the reviews from the server .
3225	Retrieve the next group item from the server .
3226	Execute a command
3227	Execute a command from the archive .
3228	Execute a remote command and return the result .
3229	Setup the command line argument parser .
3230	Fetch the data for the given issue ID
3231	Fetch all issue attachments
3232	Fetch all issue messages
3233	Fetch all activities for a given issue .
3234	Fetch user data
3235	Get user info .
3236	Get information about an issue
3237	Get a list of bugs for a given issue .
3238	Get the URL of the project
3239	Fetch items
3240	Get list of subscriptions
3241	Find group id
3242	Wrapper around requests . get
3243	Setup command line arguments parser
3244	Generate a UUID from arguments .
3245	Yield items from given category .
3246	Fetches a list of files from an archive .
3247	Find backends in a package .
3248	Yield items from given category
3249	Fetch metadata from archive .
3250	Filter out classified data .
3251	Parse arguments .
3252	Set authentication arguments .
3253	Sets the argument group arguments .
3254	Sets the arguments for the command line
3255	Fetch items from backend
3256	Initialize the archive manager .
3257	Get updated timestamp of metadata
3258	Parse a mbox file .
3259	Fetches all messages from a mailing list .
3260	Copy a mbox to a temporary location .
3261	Validate a message .
3262	Convert a dict to a dictionary .
3263	Get a message from the mailbox .
3264	Fetch all items in the repository .
3265	Fetch items from git repository .
3266	Parse a git log file .
3267	Set up git path .
3268	Setup the command line argument parser .
3269	Parse the output stream
3270	Clone a git repository .
3271	Count the number of objects in the repository .
3272	Return True if the repository is detached
3273	Update the repository
3274	Synchronize the git repository
3275	Get a list of git rev - list .
3276	Get the log of this repository .
3277	Run the git show command .
3278	Fetch the contents of the remote repository .
3279	Get the commits from a pack .
3280	Update new references .
3281	Find all refs in the local repo .
3282	Update a ref
3283	Run a command and yield stdout .
3284	Read the stderr stderr and print it .
3285	Execute a command and return its output .
3286	Fetch a list of tweets
3287	Fetch items from category
3288	Get a list of tweets
3289	Setup the command line argument parser .
3290	Fetch items from the database .
3291	Fetch items from a category
3292	Parses a hit raw string
3293	Returns the hits for the given keywords .
3294	Get the updated timestamp of an item .
3295	Determine the category for an item .
3296	Fetch pull requests
3297	Fetch repo info
3298	Get all reactions for a given issue number
3299	Get reaction comment reactions
3300	Return list of issue assignments
3301	Get a list of user reviews for a pull request .
3302	Get a list of all pull commits for a pull request .
3303	Get reaction comment reactions
3304	Get user details
3305	Get the reactions for a given issue .
3306	Returns a list of all recent issues
3307	Get all pull requests for this repository .
3308	Get repository name
3309	Retrieve the reviews for a pull request .
3310	Get commits from pull number
3311	Get reactions for a pull comment .
3312	Get user info .
3313	Get the org orgs for a given login
3314	Get the number of tokens for the given token
3315	Get the rate limits for each token
3316	Choose the best available API token .
3317	Determine if we need to check next token .
3318	Fetches the current rate limit .
3319	Initialize metadata .
3320	Store data in the archive .
3321	Retrieve data from the archive .
3322	Create an archive .
3323	Create a hashcode for the given uri and headers .
3324	Verify the integrity of the archive .
3325	Load metadata about the archive
3326	Count the number of rows in a table .
3327	Create an archive .
3328	Remove an archive .
3329	Search archive files .
3330	Search archive for archives .
3331	Search all files in dirpath
3332	Check the file type of a file
3333	Yield months between two dates .
3334	Convert an email message to a dictionary .
3335	Remove illegal characters from raw XML .
3336	Convert XML stream to Python dictionary .
3337	Parse the JSON output of the API .
3338	Fetches issues from a given date range .
3339	Get information about an issue .
3340	Get information about a user .
3341	Make a request to the Redmine API .
3342	Fetch docker images
3343	Fetch data from repository
3344	Get the contents of a repository .
3345	Map custom fields to fields
3346	Filter a list of fields
3347	Yields all issues from the API .
3348	Gets all issues from a given URL
3349	Get all issues from a given date range
3350	Get list of comments
3351	Get list of available fields
3352	Fetch all items for category
3353	Get the list of jobs from Jenkins
3354	Get builds for a given job .
3355	Yields a generator of questions from the page .
3356	Returns a generator of questions
3357	Setup the command line argument parser .
3358	Fetches the reviews for a given category .
3359	Get the maximum timestamp
3360	Helper function for fetching pages
3361	Get all pages for a namespace
3362	Get the most recent changes for the given namespaces .
3363	Fetch items from category .
3364	Yields messages from raw JSON .
3365	Check if message is in chat
3366	Returns a list of updates for the current user .
3367	Fetch article articles
3368	Add offset to metadata
3369	Parses an article into a dictionary .
3370	Do the actual fetch
3371	Fetch article data
3372	Fetches data from remote server .
3373	Retrieve data from the archive .
3374	Create an HTTP session .
3375	Setup rate limit handler .
3376	Sleep for rate limit .
3377	Update the rate limit from the response
3378	Yield messages from a Supybot log file .
3379	Return a list of archived archives .
3380	List all supersybot archives
3381	Parse the Supybot stream .
3382	Parse a supersybot timestamp .
3383	Parse a supersybot message
3384	Fetch topic items
3385	Parse the topics page
3386	Get information about a topic
3387	Get a post .
3388	Fetch items from given category
3389	Generator that yields tasks from a JSON string .
3390	Yields a list of User objects
3391	Yield ManiphEST tasks .
3392	Gets a list of transactions associated with a given pids .
3393	Get a list of users .
3394	Fetches a list of phids
3395	Call method with params and return result .
3396	Generate a unique identifier for metadata .
3397	Parse the contents summary .
3398	Generator for confluence search results
3399	Get historical content
3400	Parse XML result .
3401	Generate capabilities URL for a service .
3402	Read a URL and return the XML document .
3403	Read a string from a string .
3404	Parses the result
3405	Build the base URL .
3406	Get elements of a complex type .
3407	Construct a schema from a list of elements .
3408	Generate a URL for a feature type .
3409	create a complex input with a reference
3410	Gets the movie list .
3411	Gets a list of TVTVs .
3412	Gets a list of movies .
3413	Get information about a user .
3414	Gets the alternative titles for the user .
3415	Gets the credits for this user .
3416	Gets a list of external ids .
3417	Gets the keywords for the user .
3418	Retrieve recommendations for a user .
3419	Gets the release dates from the server .
3420	Gets the releases for this project .
3421	Gets the translations for this user .
3422	Gets the list of similar movies .
3423	Retrieve the reviews for a user .
3424	Gets the changes from the server .
3425	Gets the upcoming upcoming messages .
3426	Returns information about the currently playing media .
3427	Gets the most recent popular posts .
3428	Gets the top most recent results .
3429	Gets the account states associated with this account .
3430	Create a new rating .
3431	Gets the movie credits .
3432	Get a list of tv credits .
3433	Get information about credit id .
3434	Perform a GET request .
3435	Gets information about a user .
3436	Get a list of movie movies .
3437	Get information about a user .
3438	Get a list of movie s movies .
3439	Create a new token .
3440	Retrieves the token for the specified user .
3441	Creates a new session .
3442	Creates a new guest session .
3443	Get a list of rated movies .
3444	Gets the status of an item .
3445	Create a list .
3446	Remove an item .
3447	Clear a list of users .
3448	Gets the content ratings for the user .
3449	Gets a list of similar models .
3450	Gets the track of a track .
3451	Get information about a specific season .
3452	Retrieve credits for a specific TV .
3453	Retrieves the external ids for a specific series .
3454	Get information about a particular season .
3455	Fetches credits for a series .
3456	Retrieves the external ids for a series .
3457	Set attributes from response to values .
3458	Get a movie from the API .
3459	Get a single collection of resources .
3460	Gets the tv record .
3461	Gets a single person .
3462	Gets the company details .
3463	Gets the user s keywords .
3464	Fetches a collection of resources .
3465	Normalize a string .
3466	Calculate the n - grams of a list of refs
3467	Return a tuple containing counts of n - grams
3468	Calculate the error of an error .
3469	Aligns two strings to target texts .
3470	Find all descriptor classes in a module .
3471	Register a list of JSON objects .
3472	Register a descriptor .
3473	Prints the given string to the given file .
3474	Checks if the given descriptor is a Descriptor class .
3475	Create a JSON representation of the job .
3476	The coordinate of this descriptor
3477	Calculate the surface area of an atom i .
3478	The surface area of the surface .
3479	Create a solvent object from a molecule .
3480	Deserialize a JSON object from a JSON object .
3481	Fill missing values with missing values .
3482	Return a new DataFrame with missing values removed .
3483	Yield tuples of tuples .
3484	Convert to a dictionary .
3485	Get getValue by name .
3486	Decorator for logging functions .
3487	Decorator to lock a function .
3488	Display a progress message .
3489	Display a message
3490	Log an exception and exit .
3491	Get a temporary file name
3492	Set a temporary file .
3493	Remove temporary files .
3494	Returns the fixed path as a fixed path .
3495	Returns a list of valid params for the given method .
3496	Merge optional parameters .
3497	Add command line options to the parser .
3498	Terminate the queue .
3499	Add a task to the queue .
3500	Stop all workers .
3501	report progress
3502	Read S3 keys from environment variables
3503	Get the S3 keys from the command line
3504	Read S3 keys from s3cfg file .
3505	Initialize S3 keys from command line options .
3506	Connect to S3 .
3507	List all S3 buckets .
3508	Walk a directory on S3 .
3509	Perform a local walk on the local filesystem .
3510	Expand source parameters .
3511	Upload a single file to the pool .
3512	Put multiple files into a directory .
3513	Create a bucket .
3514	Updates the privilege of an object
3515	Print all files in the given source .
3516	Get a single file from S3 .
3517	Get multiple files from source to target .
3518	Copies a single file to the target pool .
3519	Copy files from source to target .
3520	Delete all files in a directory
3521	Return a list of relative paths to the given directory .
3522	Sync directory to target .
3523	Compute the md5 hash of a file
3524	Get the md5 hash of the file .
3525	Make sure the target directory exists .
3526	Checks the md5 cache against the remote key
3527	Match path against filter_path .
3528	Walk an s3 directory and yield a result .
3529	Add a file - only object to the list .
3530	Get the permissions for a file
3531	Lookup an object in S3 .
3532	Read a chunk from a file .
3533	Upload file to S3 .
3534	Verify that the downloaded file is correct .
3535	Write a file chunk to a file .
3536	Copy a file to S3 .
3537	Runs the given command .
3538	Validate format
3539	Pretty print objects .
3540	List S3 buckets
3541	Create a bucket .
3542	Upload a file to S3 .
3543	Handles GET requests .
3544	Print S3 files
3545	Dsync command
3546	Copy one or more files to S3
3547	Move a file
3548	Delete a file
3549	Upload files .
3550	Print the total size of a bucket .
3551	Match a date .
3552	Match a time value .
3553	Match delta in value .
3554	Validate a dictionary value .
3555	Discover and initialize the gateway .
3556	Listen to multicast .
3557	Get data from hub .
3558	Push data to the server
3559	Generate and return the key .
3560	Catch exception handler .
3561	Add rollbar to pyramid
3562	Ensure log handler is present .
3563	Returns the current request object .
3564	Initialize the rollbar .
3565	Decorator for lambda functions .
3566	Report a message to Rollbar .
3567	Search items by title .
3568	Create a log file .
3569	Build the person data .
3570	Add the current lambda context to the current context .
3571	Add request data to Rollbar .
3572	Return True if frame should be included .
3573	Build request data .
3574	Build the server data .
3575	Build the payload from data .
3576	Run the server .
3577	Compose Hangulung and jongung .
3578	Decomposes the given Hangul letter code into a consonant .
3579	Determine if a character has a jong .
3580	Attach a word to a word .
3581	Check if node is inside an ExceptHandler
3582	Return True if node is inside lambda
3583	Get all elements of a node .
3584	Check if the given node is inside an exception .
3585	Check if node is super class .
3586	Check if the node is an error .
3587	Check if node is a default argument
3588	Check if the given node is a function decorator .
3589	Check if the given node is an ancestor of the frame .
3590	Return node parent parent .
3591	Decorator for defining check messages .
3592	Given a format string return a list of field names .
3593	Get argument from a call node .
3594	Check if a node is inherited from standard exceptions .
3595	Catch exception handler .
3596	Check if a function is decorated with a property .
3597	Check if a function is decorated with qnames .
3598	Find a catch handler node .
3599	Check if the given node is a fallback block .
3600	Get exception handlers for given exception .
3601	Return True if the given node is ignored .
3602	Check if a class is abstract .
3603	Try to infer a node .
3604	Return the assignment type of the given node .
3605	Checks if a function is registered in a singleton .
3606	Return True if the node is postponed .
3607	Return the fully qualified names of a module .
3608	Get the absolute name of an import node .
3609	Return a string representation of the tree .
3610	Creates a graph of dependencies .
3611	Record an import .
3612	Check for imports .
3613	Ensure that the given node is correct .
3614	Record an import node .
3615	Check the import order .
3616	Check if a relative import is a relative import .
3617	Record an imported module .
3618	Check if a module is deprecated .
3619	Check if the given module is preferred .
3620	Report external dependencies .
3621	Filter the dependencies of the dependency graph .
3622	Get the default options
3623	Insert default options into sys . argv
3624	Show the attributes of the node .
3625	Get callbacks for a given node .
3626	Visit a node .
3627	Check if messages are consistent .
3628	Check for function calls .
3629	Check if a variable is a datetime . time .
3630	Check if mode is valid .
3631	Process a message .
3632	Prints the messages in a file .
3633	Get the title of a node
3634	Set default options .
3635	Return True if the node should be shown .
3636	add class to diagram
3637	Get the ancestors of a node .
3638	Return instances of given class node .
3639	Extracts classes from the given class .
3640	Leave the project .
3641	A ImportFrom node .
3642	Generate class diagram .
3643	Return a list of diagram definitions .
3644	Return True if owner is ignored .
3645	Return a list of names that are similar to the given attribute .
3646	Return True if node is not member of owner .
3647	Check if the node is a parent of the given node .
3648	Return True if name is used as a variant name .
3649	Check if a variable is not in a context variable .
3650	Handle an attribute node .
3651	Check for assignment calls .
3652	Check if a function is not callable .
3653	Visitor for unaryopands .
3654	Iterate over the interfaces of a node .
3655	Build a Project object from a list of files .
3656	Visit package node .
3657	Set a function definition .
3658	Called when assignname is set .
3659	Handle assignment types .
3660	Visitor for import node .
3661	Visitor for ImportFrom node .
3662	Compute the code for the given context .
3663	Compute the imported module .
3664	Return ANSI escape code .
3665	Colorize a message .
3666	Register the linter .
3667	Handle a message .
3668	Print layout .
3669	Handle a message .
3670	Write an open graph .
3671	Creates a node .
3672	Writes an edge .
3673	Check for new format nodes .
3674	Process a non - raw string token .
3675	Format a section .
3676	Handle evaluation section .
3677	visit a table
3678	Writes a default table .
3679	Add a renamed message
3680	Register messages from a checker .
3681	Register a message .
3682	Check if a symbol is valid .
3683	Raise InvalidMessageError .
3684	Raise invalid message id .
3685	Get a list of message definitions corresponding to a message id or symbol .
3686	Get the display name of a message
3687	Print help message
3688	List all registered messages .
3689	Register pylint extensions .
3690	Return the number of CPUs on the system .
3691	Generate a report of messages per message .
3692	Context manager for fixing Python import paths .
3693	Load plugin modules .
3694	Loads the plugin configuration
3695	Set an option .
3696	Register a checker .
3697	Disable reporting for a specific report
3698	Enable porting mode .
3699	Return a list of all checkers .
3700	Return a sorted list of checkers .
3701	Prepare checkers based on config
3702	Expand a list of modules to be expanded .
3703	set current module
3704	Run an AST node .
3705	Report the evaluation .
3706	Handle a help message
3707	Called when the user exits .
3708	List available messages
3709	List all checker groups
3710	Wraps the given text .
3711	Get the module name and obj .
3712	Safely decode a line .
3713	Return True if base_name is in blacklisted blacklisted list .
3714	Register linter plugins in a directory .
3715	Convert a string to a comment .
3716	Format an option value
3717	Print a section of a section .
3718	Print ini format options .
3719	Insert a child .
3720	Add child to this node .
3721	Return all parents of this node .
3722	Format a layout object to stream .
3723	Compute the table content .
3724	Compute the content of the given layout .
3725	Collect block lines .
3726	Handle an ignored message .
3727	Register a report .
3728	Make report sections .
3729	Add a new value to the stats object .
3730	Returns the name of the setter property of the decorated function .
3731	Returns the setter property of a node .
3732	Check if a return node is a function .
3733	Return a list of possible exception types .
3734	Process a module .
3735	Check for encoding errors .
3736	Process comments .
3737	Check if a module is a future import .
3738	Determine if a node is in a loop statement .
3739	Return the overridden method .
3740	Get extra info for a node .
3741	Determine if we have a global scope .
3742	Determine if a name node is local .
3743	Mark a node as consumed .
3744	Check for global variables .
3745	Ignore class scope .
3746	Check if node has a homonym in the function scope .
3747	Check for unpacking unpacking .
3748	Check for metaclasses .
3749	Recursively find all packages in a directory .
3750	Install pylint packages .
3751	Perform install .
3752	Add similarities to the table .
3753	Main entry point .
3754	Append a stream to the stream .
3755	Generate a list of sims .
3756	Display similarity scores
3757	Find common common lines .
3758	Iterate over all similarity sets
3759	Iterate over the lines of this line .
3760	Create an index for each line number .
3761	Return True if the definition matches the definition .
3762	Check the equality of two nodes .
3763	Check whether the arguments have the same default value .
3764	Check whether two arguments are different .
3765	Try to infer a call result .
3766	Mark a node as accessed .
3767	Check if a class definition is valid .
3768	Check that the given node is consistent .
3769	Check that the bases are valid .
3770	Check for function defs .
3771	Check to see if the super method is a super call .
3772	Handle a function def .
3773	Check if the given node is in slots .
3774	Called when a function is called .
3775	Check that a member is accessed by this node .
3776	Recursively check the ancestors of the given node .
3777	Check the signature of a method .
3778	Check if node is a mandatory method parameter .
3779	Check if the body is a raise statement .
3780	Add a message to the error context .
3781	Check for function defs .
3782	Display report in HTML format .
3783	Check if node is a typing namedtuple .
3784	Check if the given node is an enum class .
3785	Check if the given node is a dataclass .
3786	Initialize the Linter .
3787	Validate a classdef node .
3788	Called when a classdef node exits .
3789	Visitor for if node .
3790	Check that the node has a number of boolean expressions .
3791	Check docstring .
3792	Format the object with the given template .
3793	Return True if the token is a trailing comma .
3794	Check if node is an elif node
3795	Check if an if statement is simplifiable .
3796	Check if a generator is inside a generator .
3797	Check if an exception is in the StopIteration module .
3798	Check that a generator is raising a StopIteration .
3799	Check that the given node is nested .
3800	Return a dictionary with duplicated objects .
3801	Check whether or not an IS isinstance .
3802	Checks that the given node is not equal to the given operand .
3803	Return True if the node is an AND or not .
3804	Ensure that the return statements are consistent .
3805	Determine if a node is ended .
3806	Check for loops .
3807	Check if output format is available .
3808	Run Diade .
3809	Emits package dependencies .
3810	Writes classes to the printer .
3811	Sets the printer
3812	Create the graph printer
3813	Return True if the version should be emitted .
3814	Format the help message .
3815	Get environment variables .
3816	Run linter on a file .
3817	Run pylint in a subprocess .
3818	Recursively find cycles in a graph .
3819	Get the source code .
3820	Generate the graph for this graph .
3821	Format a section .
3822	register by id
3823	Disable a message .
3824	Enable or disable a message .
3825	Get the symbol symbol for a given message id
3826	Check if a message is enabled for a given line .
3827	Add a message to the corpus .
3828	Print all global options and switches .
3829	Print checker documentation .
3830	Get the indent length of a line .
3831	Generate a line for indentation .
3832	Return the indentation for the given token .
3833	Handle line start .
3834	Return the valid indentations for the given index .
3835	Return a _IndentIndent for a bracket .
3836	Return a continuation indent .
3837	Push a token onto the stack .
3838	Add a new line .
3839	Check for parentheses .
3840	Check if token is a valid type annotation .
3841	Check for equality .
3842	Check that the token is surrounded by a space .
3843	Check for default AST node .
3844	Check for multiple statements .
3845	Validate lines .
3846	Check the indent level .
3847	Check if the given node is in an iterable context .
3848	Check if the given node is a conditional import .
3849	Handle a name .
3850	Check if a subscript is a sub - class .
3851	Check for an attribute .
3852	Unpack an exception handler .
3853	Check for raise value .
3854	Find pylint rc file .
3855	Validate value .
3856	Expand the default value for an option .
3857	Match a long option .
3858	Registers an option provider .
3859	Called when an option is set
3860	Set global option
3861	Generate the configuration file .
3862	Load the config file .
3863	Load the command line options .
3864	Add a help section .
3865	Return the help text for this command .
3866	Load the default options
3867	Get the destination attribute of an option .
3868	Get the definition of an option .
3869	Yield tuples of options grouped by section .
3870	Check if a function is a method call .
3871	Check if the node is a complex format string
3872	Register logging module .
3873	Visit a ImportFrom node .
3874	Visit an import node .
3875	Check for function calls .
3876	Check if a format string is interpolated .
3877	Check if the given node is a loop .
3878	Get parent node for a break node .
3879	Determine if the given loop is a loop .
3880	Returns a set of property names and their names .
3881	Determine the name of a function .
3882	Generate a report for each node .
3883	Check if a node is redefined by its decorator
3884	Check if a call is a single argument
3885	Check if starred node is correct .
3886	Check nonlocal and global variables .
3887	Check if calls are abstracted .
3888	Check if there is a non - conditional statement .
3889	Check if a node is in a loop .
3890	Initialize linter .
3891	Check if expr is a valid string .
3892	Visit a lambda node .
3893	Check if an Assert node is valid .
3894	Check for duplicate keys .
3895	Check if a node is unreachable .
3896	Check if the node is not in a try_future block .
3897	Check if a function is in reverse order .
3898	Check that the given name is valid .
3899	Check the name of a node .
3900	Check the docstring for a given node .
3901	Ensure that a literal is a comparison .
3902	Parse a sub - graph .
3903	Parse a subgraph node .
3904	Check if a module is too complex .
3905	Add a checker .
3906	Walk an AST tree .
3907	Add a relationship between two objects .
3908	Get a relationship .
3909	Return a list of class names for a node
3910	Return all methods defined in node .
3911	Add an object to the graph .
3912	Return a list of class names from the given nodes .
3913	Return all classes of the class .
3914	Return the class with the given name .
3915	Return the list of modules in this module .
3916	Return the module with the given name .
3917	Get module by name
3918	Add a from_module to the node if it is not in the module .
3919	Delete the grant .
3920	Execute a query on the model
3921	Get user by username and password .
3922	Get an access token .
3923	Set an authorization token .
3924	Create a new authorization grant .
3925	Get user by code .
3926	Prepare a request .
3927	Initialize the application .
3928	Create a remote application .
3929	Make a request to the given URL .
3930	Generate an authorization token .
3931	Handle an OAuth1 response
3932	Handles the OAuth2 response
3933	Handle an OAuth response
3934	Deprecated method .
3935	Hash token .
3936	Create a client with the given token .
3937	Creates a new OAuth session .
3938	Temporarily set OAuth2 transport .
3939	Confirm authorization request .
3940	Register a request token handler .
3941	Get client secret .
3942	Get the request token secret .
3943	Get the access token for the given client key .
3944	Get the default realm for a client .
3945	Get the realms of a request .
3946	Get the redirect uri for the given token .
3947	Get the rsa key for a client .
3948	Validate a client key .
3949	Validate the request token .
3950	Validate the access token .
3951	Validate timestamp and timestamp .
3952	Validate redirect_uri .
3953	Validate the realm s realms .
3954	Validate a verifier .
3955	Verify the request token .
3956	Verify the user s realms .
3957	Save an access token .
3958	Save a request token .
3959	Store a verifier .
3960	Return the error URI for the provider .
3961	Return an authorization response .
3962	Verify a request .
3963	Get the client credentials from the request .
3964	Check if client authentication is required .
3965	Authenticate a client .
3966	Authenticate a client .
3967	Get the scope of a refresh token .
3968	Confirm a refresh token against a refresh token .
3969	Return the default redirect uri .
3970	Get default scopes for a client .
3971	Destroy an authorization token .
3972	Persist an authorization code .
3973	Save a bearer token .
3974	Validate a bearer token .
3975	Validate client id .
3976	Validate a grant .
3977	Validate the grant type .
3978	Validate a refresh token .
3979	Validate response type
3980	Validate scopes .
3981	Validate username and password .
3982	Revoke an access token .
3983	Update request data .
3984	Convert all keys in a dictionary to strings
3985	Change the Authorization header
3986	Register an OAuth object to a remote application .
3987	Create a new OAuth object .
3988	Extract parameters from the request .
3989	Convert text to bytes
3990	Decode a base64 encoded string .
3991	Create a response object .
3992	Return cached clients .
3993	Add a remote app to the cache .
3994	Create a remote application .
3995	Try to get an exception
3996	This method is used to verify the success or not .
3997	Check for private keys
3998	Check if a private key is incorrect
3999	Check if the load_private key is wrong
4000	Check if a CRL is available
4001	Check if X509 revocation is valid .
4002	Create an X509CertRequest
4003	Creates a certificate
4004	Decorator to turn a function into a NotImplementedError .
4005	Load certificate locations from a certificate file .
4006	Set the callback callback for the passphrase .
4007	Set the certificate chain to use as a certificate chain .
4008	Use an SSL certificate file .
4009	Use an SSL certificate .
4010	Add an extra chain certificate .
4011	Sets the private key from a private key file .
4012	Use this private key to use a private key .
4013	Load a client ca file .
4014	Sets the verify depth .
4015	Load a temporary DH file .
4016	Set the cipher list .
4017	Set the client certificate list .
4018	Add a client CA certificate to this context .
4019	Set the callback function to be called when the SSL server is called .
4020	Sets whether TLS supports TLS .
4021	Set the callback for NPNP select callback .
4022	Set the SSL protocol for this connection .
4023	Sets the callback callback for the SSL selection .
4024	Set the OCSP callback .
4025	Set an OCSP server callback .
4026	Set an OCSP client callback .
4027	Sets the context of the SSL context .
4028	Get the server s host name .
4029	Set the name of the TLSExt host .
4030	Read data from the socket .
4031	Receive data from the socket .
4032	Read data from a BIO socket .
4033	Perform a renegotiate session .
4034	Close the SSL connection .
4035	Returns a list of all available cipher names .
4036	Get a list of the client ca certificates .
4037	Sets the SSL shutdown state .
4038	Get a random string from the server .
4039	Get a random random string .
4040	Get the master key .
4041	Export a key to a bytes buffer .
4042	Get an SSL session .
4043	Get the name of the current SSL cipher .
4044	Get the number of bits of the current cipher .
4045	Get the current version of the SSL cipher .
4046	Get the version of the SSL connection .
4047	Get the next protocol negotiation .
4048	Set the certificates for the SSL protocol .
4049	Retrieves the certificate for this SSL certificate .
4050	Create a new memory buffer .
4051	Convert a BIO object to a string .
4052	Set the boundary for the given time .
4053	Converts a timestamp to an ASN time object .
4054	Get a curve by name .
4055	Dump public key to a string .
4056	Load a public key from a file .
4057	Sign data using the given key .
4058	Verifies the signature of a signature .
4059	Dump a CRL to a string .
4060	Convert the private key to a cryptography key .
4061	Generate a new RSA key .
4062	Check if this key is valid .
4063	Return a set of all available curves .
4064	Get the curves .
4065	Convert this curve curve to a EC key .
4066	Converts the X509 name to a DER string .
4067	Retrieves the name and value pairs .
4068	Get the short name of the certificate .
4069	Gets the data of the X509 extension .
4070	Convert this certificate to a cryptography object
4071	Set the public key for this certificate .
4072	Get the public key for this request .
4073	Return the name of the subject .
4074	Add extensions to the request .
4075	Return the list of X509Extension objects .
4076	Verify this X509 request .
4077	Convert this certificate to a cryptography object .
4078	Set the certificate version .
4079	Get public key .
4080	Set the public key for this X509 key .
4081	Sign a message using a public key .
4082	Get the signature algorithm .
4083	Calculate the digest of the certificate .
4084	Set the serial number .
4085	Get the serial number of the certificate .
4086	Adjust the date of the certificate after a given amount .
4087	Calculate the gmtime of the certificate .
4088	Checks if the token has expired .
4089	Return the issuer name .
4090	Set the issuer name .
4091	Return the subject name .
4092	Set the subject name .
4093	Add multiple extensions to the certificate .
4094	Return the extension at the given index .
4095	Add a certificate to the store .
4096	Add a CRL to the certificate store .
4097	Set the time of the certificate .
4098	Initialize the X509 library .
4099	Create an X509StoreContext object from the certificate context .
4100	Verify the certificate .
4101	Set the serial number of the certificate .
4102	Get the serial number of the certificate .
4103	Set the reason for this certificate .
4104	Get the reason for this certificate .
4105	Set the revocation date of the certificate .
4106	Convert the certificate list to a cryptography object .
4107	Return the revocation of the certificate .
4108	Return the issuer s issuer .
4109	Sign the CRL .
4110	Export an X509 certificate .
4111	Get the type name of this key .
4112	Set the CA certificates for this request .
4113	Export a PKCS12 certificate .
4114	Sign a key with a given digest .
4115	Verify a key .
4116	Encode a Base64 - encoded RSA key .
4117	Get public key .
4118	Set the public key for this instance .
4119	Raise an exception from the error queue .
4120	Convert text to bytes .
4121	Create a helper function for printing messages .
4122	Return service metadata .
4123	Returns an iterator of issues for each board .
4124	Return annotations for a card .
4125	Get all boards .
4126	Get list of available lists
4127	Get list of cards
4128	Get comments for a card
4129	Build the API URL .
4130	Get data from url
4131	Convert a link field to a dictionary .
4132	Get a list of issues for a query .
4133	Get pull requests for a given tag
4134	Runs all the remote issues in the configuration .
4135	Get a config value from the main section
4136	Get a dictionary of template templates
4137	Validate config values .
4138	Return True if the issue should be processed .
4139	Make a table from a list of lists
4140	Executes the given command and returns the result .
4141	Returns an integer if it is empty .
4142	Pull bugwarrior database .
4143	Get data from a URL .
4144	Get a collection of values
4145	Find the unique UUID for the given issue .
4146	Merge a list of values into the local task .
4147	Build duda config overrides for the given targets
4148	Parse sprint string
4149	Get credentials .
4150	Calculate R - R - R - R - R - R - R - R - R - R - R - R - R - R - R - R - R - R - R - R - R - R - R - R - R - R - R - R - R - R - R - P - R - R - R - R - R - R - R - R - R - R - R - R - R - R - R - R - R - R - R - R - R - R - R - R - R - R - R - R - R - R - R
4151	Calculate p - value p - values for a set of gene sets .
4152	Correct p - values for GOEA .
4153	Compute the zscore of the given axis .
4154	Plots a heatmap .
4155	Adjust the axis position of spines .
4156	Prepare an argument parser .
4157	Adds parser for prerank and prerank tool .
4158	Adds the subparser for the plot .
4159	Add the parser for the enrichr command .
4160	Compute the enrichment score for a gene set .
4161	Compute the ranking metric for the given rank .
4162	Calculate the rank of the data .
4163	Compute the p - value p - value pairwise p - value .
4164	Compute the significance of an enrichment .
4165	Returns a pandas DataFrame with the display names and descriptions
4166	get list of datasets
4167	Get the attributes of a dataset .
4168	Get filters for a given dataset
4169	Query the BioMart database .
4170	Run GSEA analysis .
4171	Single sample analysis .
4172	Run prerank on gene sets .
4173	This is the main function of Replots .
4174	Set the number of available cores
4175	Load genes from a set of genes .
4176	Get a list of library names .
4177	Download Enrichr library .
4178	Compute heatmat .
4179	Save results .
4180	Load data from the dataframe
4181	Run GSEA analysis .
4182	Run GSEA analysis .
4183	Compute sample scores for each sample
4184	Run ssgsea for each gene
4185	Write raw enrichment to outdir
4186	Parses GSEA files
4187	Generate an enrichmentr file
4188	Parse gene sets
4189	Parse list of genes .
4190	Send a list of genes to the server .
4191	Check the genes in Enrichr list .
4192	Get a set of genes from the database .
4193	Run enrichment on input files
4194	Creates a Cube
4195	Create an icosphere script .
4196	Generate a torus image
4197	Generate a grid of edges in a plane .
4198	Creates a matplotlib script with the given size .
4199	Get the color values for a given color .
4200	Check if a variable is a list .
4201	make a list of variables
4202	Writes a filter .
4203	Run ls3 loop
4204	Merge close vertices .
4205	Close holes .
4206	This function is used to split vertices on a face .
4207	Add missing borders to the script .
4208	Translate a script to a given value .
4209	Rotate a script in the script .
4210	Scales the SVG script .
4211	Compute the co - co function for a cylinder
4212	Convert a cylindrical script to a cylinder .
4213	Binary bend function .
4214	Transforms a curve to a curve .
4215	Convert a VTK texture to a tex file .
4216	Convert mesh to Face Format
4217	Run a mesh resampling script
4218	Generate a screened surface for a screen .
4219	Generate a voronoi .
4220	Add all faces to the script .
4221	Generate a script for testing .
4222	Add a face selection to the script .
4223	Generate a conditional vertex selection .
4224	Generate a vertex from a cylindrical script .
4225	Create a spherical vertex
4226	Convert a script to a string .
4227	Renames the current layer .
4228	Changes the current layer .
4229	Duplicate the current layer .
4230	Delete the lower layer .
4231	Handle an error .
4232	Initialize a filter script .
4233	Adds a new layer to the stack .
4234	Delete a layer .
4235	Save the filter to a file .
4236	Run a mesh script .
4237	Calculate a star .
4238	Run hausff distance calculation
4239	Run a Poisson disk .
4240	Generate a filter for an element .
4241	Generate a clustered vertices .
4242	Generate a flat plane filter .
4243	Run a scipy filter on a single triangle .
4244	Generate a Voronoi diagram .
4245	Measure the topological measures of a script .
4246	Parse the ml_log file .
4247	Parse Hausdorff output .
4248	Run a vertex function .
4249	Generate a voronoi diagram .
4250	Generate a cyclic rainbow .
4251	Finds the tangent in radians .
4252	Return the cross product of two vectors .
4253	Multiply a scalar .
4254	Generate a new per vertex attribute .
4255	Flip faces orientation around faces .
4256	Compile point sets .
4257	Runs the filter script
4258	Generate a depth filter .
4259	Sort polylines .
4260	Measure topology
4261	Measure all geometry
4262	Measure the dimension of the dataset .
4263	Lowercase a file extension .
4264	Patch the request class .
4265	Return the configuration for an upload set .
4266	Configure uploads .
4267	Return the configuration for this upload .
4268	Returns the URL for the uploaded file .
4269	Return the path to the destination folder .
4270	Check if the given extension is allowed .
4271	Resolve a file name to a target folder .
4272	Get version information from a file .
4273	Remove duplicates from a list .
4274	Returns the difference between two objects in memory .
4275	Formats the number of objects in a format .
4276	Trace memory usage .
4277	Returns a list of code events .
4278	The number of object overhead .
4279	Compute memory overhead .
4280	Profile the current package .
4281	Profile a module .
4282	Profile the function .
4283	Profile profiling .
4284	Return a set of module names in a package .
4285	Runs a function in separate process .
4286	Determine the type of a run object .
4287	Initialize a module .
4288	Initialize package name .
4289	Initialize the run object .
4290	Replace sys . argv with _run_object
4291	Sample a new frame .
4292	Insert a stack into the stack
4293	Recursively fill sample count
4294	Format a node tree
4295	Formats the call tree .
4296	Profile the current package .
4297	Profile a module .
4298	Profile a function .
4299	Transform the profiler stats into a formatted string .
4300	Return a dict containing the details about the object .
4301	Profile a module .
4302	Profile the function .
4303	Initialize the database .
4304	Show guest book .
4305	Add a new entry .
4306	Handler for profiling .
4307	Starts a profiling server .
4308	Return the content of the root directory .
4309	Return the content of the resource .
4310	Handle a GET request .
4311	Handle POST request
4312	Send a response .
4313	Checks if the given module path is valid .
4314	Called when a line is received .
4315	Iterate over lines that are not standard library .
4316	Calculate the heatmap for each module .
4317	Return a list of lines that are skipped .
4318	Profile a package .
4319	Format a heatmap .
4320	Profile a module .
4321	Profile the function .
4322	Run a set of profilers .
4323	Run the given function and return the result .
4324	Return the predicted probabilities for each X .
4325	Compute log - probabilities for X .
4326	Fit the model .
4327	Compute the count matrix for each feature in analyzed_docs
4328	Sorts the features in the vocabulary .
4329	Limits features according to the given limit .
4330	Fit the model using the vocabulary .
4331	Transforms an embedding matrix .
4332	Convert to ScikitScaler .
4333	Fit the model to the model .
4334	Wrapper for Spark . predict .
4335	Fit a linear regression to the data .
4336	Fit the model .
4337	Fit the model and return the transformed data .
4338	Returns the score of a given Z matrix
4339	Fit the model .
4340	Score the estimator .
4341	Fit k - means clustering
4342	Return the predictions for the given X .
4343	Predict classifier .
4344	Check the dtype of an rdd .
4345	Initialize the vocabulary
4346	Compute the statistics on X .
4347	Fit SVD to X .
4348	Compute the SVD of a DDD .
4349	Yield blocks from iterator .
4350	Blocks a tuple into blocks of dtypes .
4351	Block an RDD .
4352	Apply a function to each RDD .
4353	Return the shape of the RDD .
4354	Convert this RDD to a NumPy array .
4355	Apply a function to each column in the DataFrame .
4356	Return the bitperm for a given permission .
4357	Return True if path is only root writeable
4358	Check the configuration file .
4359	Read config from file .
4360	Runs a command as a command
4361	Execute a command and return its output .
4362	Execute a command over SSH .
4363	Validate the input data .
4364	Get headers .
4365	Return the body of the request .
4366	Returns the URL for the Assistant Assistant .
4367	Get the URL to execute
4368	Return the text for a Packet
4369	Print MAC address .
4370	Discover devices for a specific interface .
4371	Execute the device .
4372	Send a confirmation message
4373	Called when a push event is triggered
4374	Execute a device
4375	Scan for devices .
4376	Convert the given transaction into a Transaction object .
4377	Find the path of the ledger file .
4378	Ensure that the project is compatible .
4379	Extract the long description from the README . md file .
4380	Create a precalculatedTextMeasurer from a json file .
4381	Cache the default value for the default measure .
4382	Generate a badge .
4383	Generate a iterable of supported Unicode characters .
4384	Generate a sequence of characters from a list of encodings .
4385	Returns a mapping of character to length .
4386	Write measurer to file .
4387	Convolve a 2D image .
4388	Returns 1D Gaussian kernel .
4389	Convert an image to grayscale .
4390	Main function for pyssim .
4391	Compute the value of the SSIM .
4392	Compute the SSIM between two images .
4393	Destroy the object .
4394	Set the current code version .
4395	Get the status of this node .
4396	Print the status of the device .
4397	Return node corresponding to connection .
4398	Try to bind .
4399	Called when a new connection is received .
4400	Called when a client is received
4401	Called when a command is received .
4402	Returns True if the node should be connected to this node .
4403	Connect to a node if necessary .
4404	Called when a connection is established .
4405	Called when a message is received .
4406	Called when a connection is disconnected .
4407	Add a node to this node .
4408	Drop a node from this node .
4409	Send a message to a connected node .
4410	Destroys this node .
4411	Put an item into the queue
4412	Put an item into the heap .
4413	Get the next item from the queue .
4414	Attempt to acquire a lock .
4415	Returns whether the given lock is acquired .
4416	Release a lock .
4417	Decorator for logging a function .
4418	Decorator for views that require a view function
4419	Set the connection parameters
4420	Create indexes .
4421	Migrate the indexes of the aggregate_policy
4422	Remove metadata from the report
4423	Saves aggregate report to Kafka
4424	Extract the XML from a gzip or zip file
4425	Parse an aggregate XML file .
4426	Converts a report to a CSV file .
4427	Parse an aggregate report file
4428	Get IMAP capabilities .
4429	Save the results to a JSON file .
4430	Returns a zip file containing the results .
4431	Email a DMARC report
4432	Saves aggregate reports to Splunk .
4433	Saves the analysis to Splunk .
4434	Decode base64 encoded string .
4435	Get public suffix list .
4436	Returns the hostname of a given IP address .
4437	Convert human readable timestamp to datetime .
4438	Retrieves the country database for the given IP address .
4439	Get information about an IP address
4440	Converts a byte string to an RFC822 format .
4441	Convert a comma separated string to a list .
4442	Parse a report file
4443	Stop all subscriptions .
4444	Publish a message to a subject .
4445	Publish a reply .
4446	Publish a message .
4447	Subscribe to a subject .
4448	Unsubscribe from the client .
4449	Send a ping to the server .
4450	Select next server .
4451	Process an error message .
4452	Handle an error .
4453	Returns a dict containing the CONNECT command .
4454	Process a pong .
4455	Process a single message .
4456	Populate the server pool .
4457	Process incoming connection message .
4458	Flush the queue .
4459	Read data from socket .
4460	Perform coactivation of a dataset .
4461	Decode images into a numpy array .
4462	Loads features from a numpy array
4463	Load features from images .
4464	Calculate the Pearson correlation coefficient .
4465	Compute dot product .
4466	Select k - best features
4467	Return a list of studies grouped by masks .
4468	Get the indices of features in the dataset .
4469	Classifier for a set of regions .
4470	Classifier function .
4471	Fit the classifier .
4472	Set the class weight of the classifier .
4473	Perform cross validation .
4474	Fit sk_classifier to dataset .
4475	Average images within a set of regions .
4476	Get n_voxels from dataset .
4477	Get the top words of the model .
4478	Calculate the Pearson correlation coefficient .
4479	Determine the maximum volume of a point .
4480	Load activations from file .
4481	Create an image table
4482	Returns a list of ids for the given features .
4483	Add one or more features to the dataset .
4484	Get feature names
4485	Returns a dictionary mapping feature names to feature names .
4486	Load a dataset .
4487	Save the object to file .
4488	Get the image data .
4489	Get feature data .
4490	Get the names of the features in the data .
4491	Get all the ids above a certain threshold .
4492	Search features .
4493	Returns a list of ids matching the given expression .
4494	Convert sparse data to CSR .
4495	Mark function as deprecated .
4496	Apply the transformation matrix to a matrix .
4497	Convert foci to matrix .
4498	Apply a transformation to a FOC .
4499	Mask an image .
4500	Get a mask of the current image .
4501	Load images from filenames
4502	Save image to file .
4503	Set the logging level
4504	Expand an address .
4505	Return a list of tokens .
4506	Parse an address .
4507	Searches for near - duplicate hashes .
4508	Convert a dict to a namedtuple .
4509	Get tick prices for a given ticker .
4510	Get data for a given tickers .
4511	Get bulk news files
4512	Make a request to the API .
4513	Get a bearer token .
4514	Perform a request .
4515	Get a track s tracks
4516	Get information about an artist .
4517	Get a list of albums
4518	Get the top tracks of a artist .
4519	Get the related artists related to a artist .
4520	Get a list of artists .
4521	Get information about a category .
4522	Get a list of playlists for a category .
4523	Get a list of all categories
4524	Get a listing of featured playlists .
4525	Get a listing of all new releases .
4526	Get a list of recommendations .
4527	Queries the following artists .
4528	Get a list of albums for this artist .
4529	Get all albums for this artist .
4530	Get the album s albums
4531	Get a list of artists related to this artist .
4532	Return the currently playing information .
4533	Get the current player .
4534	Get available devices .
4535	Returns a list of recently played tracks .
4536	Replace tracks in a playlist .
4537	Reorder tracks in a playlist .
4538	Create a playlist .
4539	Get a list of playlists .
4540	Get a list of tracks for this album .
4541	Get all tracks in this album .
4542	Returns the OAuth2 URL for the current user .
4543	Get an album .
4544	Get an artist .
4545	Get a track .
4546	Get a user .
4547	Get a list of albums .
4548	Get a list of artists .
4549	Search for songs .
4550	Convert a string to an ID .
4551	Assert that a function has an attribute .
4552	Create a new client from a client .
4553	Build OAuth2 URL .
4554	Get the attributes for this request .
4555	Return the query parameters as a string .
4556	Build a list of Playlists .
4557	Get a list of tracks .
4558	Resume playback .
4559	Transfer user to specified device .
4560	Create an object from a URL .
4561	Get the status of the element .
4562	Convert the month to a short representation .
4563	Find all code URLs in the current directory .
4564	Check if the current version is greater than or not .
4565	Return True if the current branch is a dev version .
4566	Check if the current version is deprecation .
4567	Backup the configuration .
4568	Restore the file from the backup .
4569	Check if a line is ignored .
4570	Parse the options .
4571	Extract base from given element .
4572	Format decoded decoded data .
4573	Perform HTTP request .
4574	Get the http status code .
4575	Check if a domain is valid .
4576	Checks if the given domain is a subdomain .
4577	Checks that the given IPv4 is valid .
4578	Check if an IP is a valid range .
4579	Check if a given URL is valid .
4580	Load the configuration file .
4581	Print a nice warning
4582	Download the contents of a URL .
4583	Check if entry management is a URL .
4584	Print the header .
4585	Determine if the file is in a file .
4586	Test a domain .
4587	Test URL .
4588	Colorize the logo .
4589	Format the extracted domain .
4590	Extract the domains from the file .
4591	Test the list of files in the database .
4592	Get file URL .
4593	Toggles the current configuration .
4594	Get the current expiration date .
4595	Process the parsed status file .
4596	Get the production structure .
4597	Create a directory .
4598	Delete all directories .
4599	Initialize the path to the config file .
4600	Load the configuration file .
4601	Install the production configuration link .
4602	Download the IANA configuration file .
4603	Install the link to the PyFunceble .
4604	Install the directory structure .
4605	Merge upstream configuration
4606	Load the configuration file .
4607	Split version string .
4608	Check the version of two versions .
4609	Check if this version is a cloned version .
4610	Handle a non - existing index .
4611	Construct the directory of the analytic host .
4612	Return the path to the unified file .
4613	Print the status file .
4614	Check if the domain is not present .
4615	Parse the extensions file .
4616	Load the public database .
4617	Formats an element .
4618	Create a hierarchical structure .
4619	Load the global database .
4620	Return the referer for the given extension .
4621	Download extension files .
4622	Update the database .
4623	Mine all links .
4624	Retrieve the information from our backup file .
4625	Backup the blockchain .
4626	Add an element to the database .
4627	Remove the element from the blockchain .
4628	Return a list of all mined files .
4629	Process the mined data .
4630	Get content of file
4631	Write content to file .
4632	Handles the WHOIS message .
4633	Write the expiration date .
4634	Called when a file is not found .
4635	Initialize the before header information .
4636	Construct a header object .
4637	Return the header .
4638	Construct the result dictionary .
4639	Extract the size from a header .
4640	Colorize data_to .
4641	Print JSON data to file .
4642	Return the data .
4643	Saves the object to disk .
4644	Calculate the time difference between start and end time .
4645	Returns the execution time as a string .
4646	Return list of files to delete .
4647	Return the list of databases to be deleted .
4648	Delete all files .
4649	Compute the hash of the file .
4650	Return the hash of the data .
4651	Get the hash .
4652	Execute the command .
4653	Removes a key from the main dictionnary .
4654	Rename a key in the main directory .
4655	Merge two dictionaries .
4656	Save the current dictionary to a JSON file .
4657	Save the current dictionary to a yaml file .
4658	Takes a splited path and returns it .
4659	Writes the given data to the file .
4660	Read the file .
4661	Return sorted list
4662	Merges a list into the main dict .
4663	Return a list of strings that match the regex
4664	Match the pattern .
4665	Replace all occurences .
4666	Increment the number of tests .
4667	Calculate the percentage of tests .
4668	Perform the calculation .
4669	Check if the given URL is valid .
4670	Check if a domain is valid .
4671	Check if this element is a subdomain .
4672	Check status .
4673	Reformat the historical error file .
4674	Retrieve the database from the database .
4675	Backup the active DB .
4676	Get the most recent date .
4677	Return the content of the database .
4678	Check if the database is present .
4679	Retrieve the whois database .
4680	Backup the authorization database .
4681	Check if the element is in the database .
4682	Return True if the element is older than the expiration date .
4683	Get the expiration date from the database .
4684	Add an element to the database .
4685	Set travis permissions for travis
4686	Run travis .
4687	Fetches NS lookup information .
4688	Start a Whois client .
4689	Get status code .
4690	Return the test result .
4691	Get current object .
4692	Return a list of standard paths .
4693	Return a generator of standard package names .
4694	Iterate over unused imports
4695	Iterate over unused imports .
4696	Yield line numbers that have been imported .
4697	Iterate over imported name usage messages
4698	Iterate over unused variable numbers .
4699	Replace duplicate key numbers in source code .
4700	Create a dictionary mapping messages to messages .
4701	Check source .
4702	Extract package name from a module .
4703	Check for multiline imports .
4704	Determine if a line is a multiline statement .
4705	Filter from import statements .
4706	Break an import statement into a string .
4707	Filter source code .
4708	Get a dictionary of messages grouped by line number .
4709	Removes a starred star import from a line .
4710	Filter a duplicate key .
4711	Determine if a line entry contains a key .
4712	Return True if value is a literal or variable name .
4713	Yields line numbers from source code .
4714	Yield lines that are not in the source code .
4715	Return the indentation of the given line .
4716	Return the end of the line ending .
4717	Filter source code .
4718	Split a comma separated string .
4719	Check if filename is a Python file .
4720	Return True if filename is in exclude
4721	Find files matching the given filter .
4722	Main entry point .
4723	Reads the LeaseLeaseResponse payload .
4724	Write this LeaseLeaseResponse to a file .
4725	Write this CancelRequest payload to a file - like object .
4726	Reads a cancel response payload .
4727	Create a new NameValue .
4728	Reads a Digest object .
4729	Write the digest to a file - like object .
4730	Create a Digest object .
4731	Read the application specific information .
4732	Write the application data to a file - like object .
4733	Create an application specific information .
4734	Reads the DerivationParameters .
4735	Write the DerivationParameters to a file - like object .
4736	Reads the request payload .
4737	Write this object to a file - like object .
4738	Reads the response payload .
4739	Write the response payload to a file .
4740	Reads the SignatureVerifyRequest payload .
4741	Write data to a file .
4742	Reads the SignatureVerifyResponse payload .
4743	Process the incoming request .
4744	Build an error response .
4745	Processes an attribute attribute .
4746	Gets the attributes from a managed object .
4747	Returns an attribute from a managed object .
4748	Sets the attributes on the specified object .
4749	Sets the value of an attribute on the given object .
4750	Returns True if the policy is allowed to be allowed .
4751	Write this payload to a file - like object .
4752	Create a Secret object
4753	Sets a configuration setting .
4754	Load the server configuration file .
4755	Convert a value to a bitmask .
4756	Return a list of cryptographic usage masks .
4757	Reads a Long integer .
4758	Write the Long integer to the stream .
4759	Validates that the value is a valid integer .
4760	Reads a BigInteger value from the stream .
4761	Write the value to a KMIP file .
4762	Ensure that the value is a valid integer .
4763	Checks that the value is valid .
4764	Read a boolean value from the stream .
4765	Writes a boolean value to the stream .
4766	Write Boolean value to file stream .
4767	Ensure that the value is valid .
4768	Read the interval from the stream .
4769	Validate that the interval is valid .
4770	Return the key wrapping data .
4771	Set the key wrapping data .
4772	Checks that the key is valid .
4773	Validates that the secret data is valid .
4774	Check that the opaque data is valid .
4775	Convert an attribute name to a tag name .
4776	Convert an attribute tag to a name .
4777	Create a bit mask from a list of enumerations .
4778	Get an enumeration from an enumeration mask .
4779	Check if a given enumeration is a bitmask .
4780	Reads a CreateKeyPairRequest payload .
4781	Write a KMIP object to a file .
4782	Reads the CreateKeyPairResponse payload .
4783	Write a KeyPairResponse to a file .
4784	Reads the attribute list .
4785	Write the request payload to a file .
4786	Reads the attribute list response .
4787	Write the list of attributes to a file .
4788	Return a list of json files
4789	Scan the policy directory and add it to disk
4790	Run the scheduler .
4791	Get a certificate from a connection
4792	Get the extended key usage from a certificate .
4793	Get a list of common names from a certificate .
4794	Get client identity from a certificate .
4795	Reads a create request payload .
4796	Write a KMIP object to a file .
4797	Reads the CreateResponse payload .
4798	Write the response payload to the output buffer .
4799	Convert an object into a dict .
4800	Reads the EncryptResponse payload .
4801	Reads the DeriveKey payload .
4802	Write this DeriveKey to a file - like object .
4803	Returns true if the specified attribute is supported .
4804	Returns True if attribute is deprecated .
4805	Returns True if the attribute applies to the given object type .
4806	Returns True if the attribute has multiple instances .
4807	Get the value for a specific option in the configuration file .
4808	Reads CheckResponse payload .
4809	Write this CheckResponse to a file - like object .
4810	Reads an AttributeReference object .
4811	Write the attribute reference to a file .
4812	Reads attributes from a file - like object .
4813	Write the attributes to a KMIP object .
4814	Reads the nonce value .
4815	Writes the nonce value to the output stream .
4816	Reads the username password and password .
4817	Write this object to a file - like object .
4818	Reads a DeviceCredential object .
4819	Write data to a file .
4820	Reads a Credential object .
4821	Write a Credential object to a file .
4822	Reads MAC signature key information .
4823	Write MAC signature information to a file .
4824	Reads KeyWrapper data from a file - like object .
4825	Writes a Key to a file - like object .
4826	Reads a KeyWrapper object .
4827	Write a MIP object to a file - like object .
4828	Read extension information .
4829	Write this extension to a file - like object .
4830	Creates an extension object .
4831	Reads a RevocationReason object .
4832	Write the revocation code to the stream .
4833	Checks the validity of the message
4834	Reads an ObjectDefaults object .
4835	Write the objectDefaults to a file .
4836	Reads the DefaultsInformation object .
4837	Write the DefaultsInformation object to a file .
4838	Reads the RNGParameters object .
4839	Write the parameters to a file .
4840	Reads the ProfileInformation object .
4841	Write this object to a file - like object .
4842	Write the validation information to a file .
4843	Read CapabilityInformation object .
4844	Write capabilities to a file .
4845	Stop the server .
4846	Start listening for connections .
4847	Reads the LocateRequest payload .
4848	Write the object to a file .
4849	Reads the LocateResponse payload .
4850	Write this LocateResponse to a file .
4851	Create a new symmetric key .
4852	Create an asymmetric key pair .
4853	Generate HMAC authentication code .
4854	Encrypt a plaintext message .
4855	Encrypts the given symmetric key .
4856	Encrypts a plaintext message using the given algorithm .
4857	Decrypts a message using the asymmetric algorithm .
4858	Create an RSA key pair .
4859	Derive a key using the derivation method .
4860	Create an RSA private key .
4861	Verify a signature .
4862	Reads the SignResponse payload .
4863	Write this payload to a file - like object .
4864	Reads the request payload .
4865	Convert a KMIP version string to a KMIP version .
4866	Reads a ProtocolVersion object from a file - like object .
4867	Write a ProtocolVersion object to a file - like object .
4868	Read Authentication object .
4869	Write authentication data to a file - like object .
4870	Reads a poll request payload .
4871	Reads a certificate .
4872	Write a Certificate object to a file - like object .
4873	Authenticate to the SLUGS URL .
4874	Reads the ArchiveResponse payload .
4875	Write the response payload to a file .
4876	Start the TLS session .
4877	Reads a RekeyResponse payload .
4878	Returns True if the profile supports the given profile .
4879	Derive a key .
4880	Retrieves the attributes of a device .
4881	Returns a list of all the attributes of a specific device .
4882	Perform a query and return the results .
4883	Sign data .
4884	Open the connection .
4885	Close the connection .
4886	Creates a new key .
4887	Create a new key pair .
4888	Registers a managed object .
4889	Rekey a track .
4890	Derive a key .
4891	Lists managed objects .
4892	Checks the availability of a container .
4893	Gets a single object .
4894	Gets the attributes of a managed object .
4895	Activate the managed object .
4896	Revoke a permission .
4897	Implements the MAC algorithm .
4898	Builds a cryptographic parameters object from a dictionary .
4899	Build an EncryptionKeyInformation object .
4900	Build MACSignatureKey object .
4901	Builds a KeyWrappingSpecification from a dictionary .
4902	Build the common attribute attributes .
4903	Build a list of name attributes .
4904	Reads a query request payload .
4905	Write the query payload to a file .
4906	Write a MIP object to a file .
4907	Reads a getAttributesResponse payload from the buffer .
4908	Write the object to a file - like object .
4909	Get a single entry point .
4910	Return a dictionary with the named group name .
4911	Return a list of EntryPoints for the given group .
4912	Load and return the object
4913	Parse an entry point .
4914	Start the development server
4915	Generate project .
4916	Generate controller .
4917	Generate action source code
4918	Generate a new form .
4919	Generate model .
4920	Generate macro .
4921	Create a directory .
4922	Rewrite src_file to dst_file .
4923	Returns a human - readable version of the given value .
4924	Check if url is empty
4925	Encodes a string into a string .
4926	Decode a string .
4927	A decorator that converts a function to a json response
4928	Returns the absolute URL for the given endpoint .
4929	Load the config .
4930	Set a user in session
4931	Get current user .
4932	Create a Flask application .
4933	Register Jinja2 .
4934	Register routes in application .
4935	Register error handler .
4936	Register request hooks .
4937	Write dataframe to CSV .
4938	Create a dataframe from a csv file .
4939	Serialize a DataFrame to a writer .
4940	Deserialize a dataframe into a DataFrame .
4941	Update this blob from a dataframe .
4942	Update this instance from raw data .
4943	Returns the URL for the download .
4944	Adds a new dataset to the server .
4945	Create a new upload from raw data .
4946	Open an intermediate dataset .
4947	Read the binary data as binary .
4948	Read data as text as text .
4949	Convert to a pandas dataframe .
4950	Returns an IntermediateDataset for the given node .
4951	Get all experiments in a workspace .
4952	Get all datasets in a workspace .
4953	Gets information about a dataset .
4954	Decorator to publish files .
4955	Decorator for service functions .
4956	Decorator to add annotations to a function .
4957	Decorator to mark a function as return .
4958	Attach a function to a decorated function .
4959	Find all globals
4960	Returns a copy of this Pen .
4961	Look up a Gtk color
4962	Draw the bounding box .
4963	Compute the Bernstein - Bernstein extension .
4964	Robuststein algorithm .
4965	Build a list of choices .
4966	Returns a function that takes a list of command options .
4967	Register an item processor .
4968	Create a dynamic sitet .
4969	Initialize the tree .
4970	Empty all sitetrees
4971	Get an entry from the cache
4972	Update the value of an entry in the cache
4973	Set an entry in the cache
4974	Initialize the cache .
4975	Resolve the given alias .
4976	Return True if current app is admin .
4977	Calculate the depth of an item .
4978	Return the current item for the given tree alias .
4979	Returns the URL for the given sitemet item .
4980	Initialize a sitetree .
4981	Get the attribute of the current sitetree item .
4982	Get the ancestor level of the current item .
4983	Returns the menu for the given tree .
4984	Check if the given item is logged in .
4985	Returns a list of breadcrumbs .
4986	Initialize a sitetree tree .
4987	Render the navigation tree .
4988	Get children of given item .
4989	Update the tree s children .
4990	Filter items based on current navigation type .
4991	Get the parent item of a base item
4992	Extracts a new item in the tree
4993	Resolve a variable name
4994	Render a sitetree tree .
4995	Render the children of a sitetree .
4996	Render a sitetree .
4997	Render a sitetree menu .
4998	Render a sitet .
4999	Creates an alias for a tag .
5000	Returns the model URL for the given model .
5001	Reregister the model admin .
5002	Handle redirects .
5003	Redirect to the next item .
5004	Redirect to add new item
5005	Called when the user has changed .
5006	Overrides the default form .
5007	Return the tree for the given tree_id .
5008	Move an item in the tree .
5009	Make sure the item has changed .
5010	Returns the urls for the admin .
5011	Dump model tree .
5012	Create a tree model object .
5013	Create a new item .
5014	Import the sitetree module .
5015	Return the SITETree class for the given settings entry .
5016	Create a new Config object from a mapping .
5017	Load configuration from a Python file .
5018	Create a Config object from a TOML file .
5019	Create a Config object from an object .
5020	Create ZipkinAttrs for a given span .
5021	Create HTTP headers for a new span .
5022	Get the current trace context .
5023	Start the current tracing context .
5024	Stops the tracing context .
5025	Update the binary annotations for this span .
5026	Add a sa binary annotation for this span .
5027	Set the span name of the span .
5028	Create an Endpoint object .
5029	Creates a new Endpoint with the given service name .
5030	Builds a new V1Span span .
5031	Encode a list of spans .
5032	Create a protobuf Span .
5033	Convert a hex string to a binary integer .
5034	Get the protobuf kind for the given kind .
5035	Convert an endpoint object to a zipkin endpoint .
5036	Convert an annotation dictionary to protobuf .
5037	Create an annotation object .
5038	Create a binary annotation object .
5039	Create a Thrift Endpoint .
5040	Create a new zipkin endpoint with the given service name .
5041	Build annotation list .
5042	Build a list of binary annotations .
5043	Create a new Span .
5044	Convert thrift span to bytes .
5045	Encode a list of binary Thrift objects .
5046	Detect the span version and encoding for the message .
5047	Convert a list of spans to a text representation .
5048	Deprecated method .
5049	Convert v2 span to Thrift protobuf .
5050	Create JSON - Endpoint object from endpoint
5051	Encode a single span .
5052	Decodes a list of spans .
5053	Convert Thrift Endpoint to Endpoint
5054	Decode a list of Thrift annotations into a dictionary .
5055	Convert a Thrift Binary annotation to a dict .
5056	Decode a Thrift Span to a Span .
5057	Convert a trace ID to a string .
5058	Convert an unsigned integer to a lower hex string .
5059	Writes a long integer to the specified value .
5060	Fixes the date and day of the tag field .
5061	Sets the transaction_code attribute
5062	setiph_id field
5063	Sets the tnr tag
5064	Parses the data and returns a Tag instance .
5065	Parse a media file .
5066	Join the given string .
5067	Return the JSON representation of the response .
5068	Called when a rate limit is exceeded .
5069	Make a request to the DBL API .
5070	Get information about a bot .
5071	Get all bots .
5072	Read a term from the stream .
5073	Write a message to the stream .
5074	Close the process .
5075	Decodes a string representation of a string .
5076	Encode a term .
5077	Add a new address to the network .
5078	Send all pending messages to the queue .
5079	Register a remote serviceHello callback .
5080	Stop the server .
5081	Clear local services .
5082	Search for remote services .
5083	Create a SOAP message .
5084	Discover logging for the given scope .
5085	Return the object manager for this object .
5086	Return all child relations for a given model .
5087	Get all child m2m relations for a given model
5088	Save the current model to the database .
5089	Create a model instance from serializable data .
5090	Validate the unique checks .
5091	Returns True if the form has changed .
5092	Return a new Address with a valid checksum .
5093	Generate the checksum of the address .
5094	Parse arguments .
5095	Create an argument parser .
5096	Prompt the user for a seed .
5097	Validate signature fragments .
5098	Get a private key .
5099	Get the key for the given address .
5100	Create key iterator .
5101	Creates a Kerasonge .
5102	Copy trits to internal state .
5103	Squeeze the given trits .
5104	Transform the object to a new state .
5105	Gets the hashes from the seed .
5106	Retrieves the list of private keys from the seed .
5107	Prepares a multi - multisig transfer command .
5108	Add two Trits .
5109	Convert an integer to a list of integers .
5110	Add two integers .
5111	Return the sum of the carry with carry .
5112	Prints the given seed .
5113	Runs find_transactions .
5114	Retrieves the input inputs from the device .
5115	Retrieves a list of new addresses .
5116	Retrieves the list of Transfers from the database .
5117	Promote a transaction .
5118	Receive a replay of a transaction .
5119	Send a transfer command .
5120	Send a transaction to the device .
5121	Resolve an adapter spec .
5122	Send a request to the server .
5123	Log a message .
5124	Send an HTTP request .
5125	Interpret the response .
5126	Seed response for given command .
5127	Add a digest .
5128	Get the address of the witness .
5129	Creates a generator of addresses .
5130	Convert a digest object to an Address object .
5131	Generate an address for the given key iterator .
5132	Return a list of Transaction objects .
5133	Iterate over the addresses of the given seed .
5134	Get a list of bundles from a list of transaction hashes .
5135	Check if the given encoding is valid .
5136	Get codec info .
5137	Encodes input into binary data .
5138	Decode input to bytes .
5139	Return a list of addresses .
5140	Register a new route .
5141	Create a Transaction object from a string .
5142	Returns the JSON representation of this Block .
5143	Return a tuple containing the signature validation .
5144	Sets the state of the transaction .
5145	Return a list of all the messages contained in this wallet .
5146	Return a list of tuples representing the transaction .
5147	Return a list of transactions grouped by address .
5148	Find commands in a package .
5149	Execute a request .
5150	Apply filter to value .
5151	Get a full URL for a job .
5152	List of errors .
5153	Check if the bundle is valid .
5154	Create a generator for validators .
5155	Get the signature errors for the bundle .
5156	Check if the group is valid .
5157	Traverse a bundle .
5158	Start IPython interpreter .
5159	Generate a random seed
5160	Get a digest of the key .
5161	Sign the inputs for a bundle .
5162	Pretty - print this object .
5163	Take a list of trits from a given offset .
5164	Squeeze the given trits .
5165	Add a context to an exception .
5166	Generate security level .
5167	Increment the legacy tag .
5168	Return the tag of the chain .
5169	Add a proposed transaction to the bundle .
5170	Finalize the bundle .
5171	Sign the inputs .
5172	Sign the inputs at the given start_index .
5173	Add inputs to the bundle .
5174	Convert a value to an IOTA unit .
5175	Decompress a G1 point .
5176	Increment the inverse of a field .
5177	Create a model instance from a JSON file .
5178	Find words in text .
5179	Find a synonym for a given word .
5180	Expand abbreviations in text .
5181	Split text into parts .
5182	Return a list of all categories .
5183	Generate a new Colour .
5184	Plot component summary .
5185	Create a function from a string .
5186	Create a Timecale from the given name .
5187	Generate a new Decor .
5188	Create a Color object from an image .
5189	Create a Catalog object from a CSV file .
5190	Convert Decor to CSV .
5191	Get the maximum width of the table .
5192	Get a decor for a given component .
5193	Return the attr of the given category .
5194	Get the component of the legend .
5195	Plot the scene .
5196	Create a Component instance from a string .
5197	Return the component summary .
5198	Deprecated .
5199	Process a single row .
5200	Parse a CANstrat file .
5201	Check to see if this set is strict .
5202	Return a sorted list of unique identifiers .
5203	Create a list of intervals from a list of tuples .
5204	Clean longitudinal data .
5205	Read a petrel file .
5206	Build a list of intervals from a dictionary .
5207	Create a Striplog object from a CSV string .
5208	Create a histogram from an image file .
5209	Create a Striplog object from a log .
5210	Create a Language from a LAS3 string .
5211	Create a TimeSeries from a CANstrat file .
5212	Return a copy of the Striplog .
5213	Save the analysis to a CSV file .
5214	Generate a Lithology section .
5215	Plot the axis on the axis .
5216	Get data for a given field .
5217	Extract data from the given basis .
5218	Returns a list of instances that match the given search term .
5219	Find overlaps with gaps .
5220	Find gaps .
5221	Return a copy of the strip .
5222	Anneal Polymer with anneal .
5223	Add a component to the intervals .
5224	Return a new Striplog with the difference between two Striplog objects .
5225	Intersect the Striplog with another Striplog .
5226	Merge two pieces .
5227	Plot a histogram of each class .
5228	Invert Striplog .
5229	Crop the slice to the specified extent .
5230	Check the quality of a curve .
5231	Convert a hex color to a name .
5232	Extract log likelihood from an image .
5233	Overrides custom formatter .
5234	Returns a list of all jobs matching the given prefix .
5235	Parses a job hcl
5236	Update a token
5237	Returns a list of all allocated allocations .
5238	Fail a deployment .
5239	Pause a deployment .
5240	Get the health of a deployment .
5241	Drain a node
5242	Update a node with a drain specification .
5243	Update eligible nodes .
5244	Get a list of files
5245	Get a stream of data from a container .
5246	Get information about a file
5247	Join one or more addresses .
5248	Update existing Servers .
5249	Force a node to leave
5250	Returns a list of nodes matching the given prefix .
5251	Returns a list of evaluations for the given prefix .
5252	Returns a list of all known namespacepaces .
5253	Register a job .
5254	Plots a job .
5255	Dispatch a job .
5256	Revert a job .
5257	Rename a job .
5258	Deregisters a job .
5259	Get the current configuration of the server .
5260	Delete a peer .
5261	Get all deployments for a given prefix .
5262	Get a random value
5263	Get mutator for obj_type .
5264	Get a string of random string attacks .
5265	Fuzzy fuzzing
5266	Convert a string to a safe unicode string .
5267	Run the server .
5268	Stop the server .
5269	Displays a custom HTML file .
5270	Serve fuzzed test .
5271	Simulate fuzzing .
5272	Spawn a subprocess .
5273	Get the output of the process .
5274	Finish the read process .
5275	Terminate the process
5276	Start the worker
5277	Execute the external fuzzer .
5278	Decorator for JSON encode functions
5279	Build a random string .
5280	Build a string representation of the sentence .
5281	Build a Q object .
5282	Build a random chain .
5283	Build an OptGram .
5284	Build a reference definition .
5285	Build a Gram .
5286	Shutdown the process .
5287	Run and monitor the process_to_monitor .
5288	Start monitor .
5289	Generate a random float from a range .
5290	Add a definition to the group .
5291	Add a def_name to a cat group .
5292	Generate a gramfuzzy .
5293	Recursively fuzzing elements .
5294	Fuzzed request
5295	Returns the fuzzed string
5296	Creates a decorator for mutating object .
5297	Signal handler for SIGTERM
5298	quit command
5299	Pause the process
5300	Resume a pause
5301	Handles command stop
5302	Called when the process is restarted
5303	Returns a list of all upcoming events .
5304	Sets the user s mood .
5305	Sets the avatar for this user .
5306	Get metadata for a given URL .
5307	Merge a single contact .
5308	Get a single user by ID .
5309	Return a list of all available bots .
5310	Get a single bot .
5311	Searches for Skype .
5312	Returns a list of all requests for this user .
5313	Create a new object from raw data .
5314	Merge other attributes .
5315	Merge an object into the cache .
5316	Makes a sync call to the remote state .
5317	Read the token file .
5318	Write token to disk .
5319	Verify an authorization token .
5320	Refresh the Skype token
5321	Retrieves the user id .
5322	Get registration token
5323	Sets up all endpoints for this user .
5324	Check if user exists .
5325	Authenticate a token
5326	Authenticate to Skype .
5327	Set the presence of the user
5328	Ping this user .
5329	Return all the most recent conversations in the user .
5330	Get a single chat .
5331	Creates a new thread .
5332	Extract user ID from a URL .
5333	Get chatto id from url
5334	Iterate over an iterable yielding items from the given function .
5335	Convert text to unicode .
5336	Determine the format of the given text .
5337	Parse and return the frontmatter and content
5338	Convert the object to a dictionary .
5339	Load a YAML file .
5340	Export metadata to YAML
5341	Export metadata to a string
5342	Return True if the list matches the pattern .
5343	Return a list of all items in the line .
5344	Return a list of sub - lists of sub - lists .
5345	Convert pattern to newline .
5346	Return list of arguments .
5347	Return a list of lists matching the given pattern .
5348	plant a trie from a list of strings
5349	Build a pattern from a trie .
5350	Check if a key is in the span range .
5351	Insert string at index .
5352	Partition a character at a given character .
5353	Return a list of spans for the given type .
5354	Shrink overlapping spans .
5355	Update the span .
5356	Return the nesting level .
5357	Return the shadow of the span .
5358	Return the extended link shadow .
5359	Return a mapping between spans .
5360	Deprecated method .
5361	The parameter definitions .
5362	The parser functions .
5363	The template elements .
5364	The list of wikilink objects .
5365	A list of comments .
5366	Return list of external links .
5367	Return a list of sections .
5368	Return a list of Table objects .
5369	Return a list of lists matching the given pattern .
5370	Return a list of Tag objects .
5371	Yield all sub - spans of the given type .
5372	Return the list of ancestors of this element .
5373	Return the parent of this node .
5374	Return the maximal mode of a list .
5375	Get argument by name .
5376	Return a normalized name .
5377	Remove the first argument from the list of arguments .
5378	Remove duplicate arguments .
5379	Sets an argument .
5380	Get an argument by name .
5381	Check if the command has a given name and value .
5382	Delete the argument with the given name .
5383	Convert a spatial reference to a string .
5384	Find an ellipsoid and return it .
5385	Loads crs from a URL .
5386	Create a parse object from a GeoJSON file .
5387	Get crs from an EPSG code
5388	Get the crs for an ESRI code
5389	Retrieve the crs from a RSR code .
5390	Create a crs object from unknown text .
5391	Write record data to outfile .
5392	Read a VLR from a stream .
5393	Parses vlrs list into GeoTiff keys .
5394	Parse a geotiff key .
5395	Returns the signedness of the given extra type .
5396	Get the ID for a extra dimension type .
5397	Create a new PointRecord instance from another point record .
5398	Copies fields from other record to self .
5399	Append zeros to the array .
5400	Returns a set of all dimension names .
5401	Create a new instance of zeros .
5402	Create a data object from a stream .
5403	Create a Point object from a compressed buffer .
5404	The dimension of the X axis .
5405	The dimension of the y - axis .
5406	The z dimension of the plane .
5407	Add extra dimensions to the dataset .
5408	Write data to out_stream .
5409	Write image to file .
5410	Write the image to a file .
5411	Build dtypes dtypes to dtypes .
5412	Build a dictionary of unpacked dtypes dtypes .
5413	Convert a numpy array dtype to a point format .
5414	Get the file version for a given point format .
5415	Check if a point format is compatible with the given version .
5416	Returns a list of vlrs with the given type
5417	Extracts a list of vlrs that match the given type .
5418	Create a list of VLR objects from a stream .
5419	Checks if all files have the same point format
5420	Returns True if all files have the same dtype
5421	Check if file signature is correct .
5422	Read a header from the stream .
5423	Reads the VLRS from the stream .
5424	Read points from vlrs .
5425	Reads the compressed points data .
5426	Read the internal waveform packet .
5427	Read EVLRS from the stream .
5428	Warn if we are at the end of the stream .
5429	Open a las file .
5430	Read alas file .
5431	Create lasData object .
5432	Create a las data object .
5433	Convert a Dataset to a PointRecord .
5434	Merge a set of points into a new one .
5435	Writes las file and returns it .
5436	Returns the date of the year .
5437	Set the year of the year .
5438	The minimum coordinates of the ellipsoids .
5439	Set the minimum and z values .
5440	Returns the maximum values of the ellipse .
5441	Set the maximum values .
5442	A tuple of the x y - axis scales .
5443	A 2D numpy array of x y coordinates .
5444	Reads the file version .
5445	Convert a header to a new header .
5446	Unpack a mask from a source array .
5447	Pack a sub - field array into an array .
5448	Return a list of dimension names that are lost .
5449	Get the sub - fields of the dimension .
5450	Return the total number of bytes in the extra dimension .
5451	Checks if the data has a waveform packet .
5452	Example of a demo .
5453	Calculate the checksum of a command
5454	Print a hex message .
5455	Verify response
5456	Returns a list of set bit numbers .
5457	Generate a query string
5458	Demo demo .
5459	Connect to the server .
5460	Start monitoring .
5461	Displays a disarm command .
5462	Clear alarm command .
5463	Turn on output .
5464	Stop the server .
5465	Monitor the status of the device .
5466	Close the connection .
5467	Purge the database .
5468	Guess the type of a file
5469	Get file id .
5470	Get a notebook model from the database .
5471	Build notebook model from database .
5472	Handle a directory .
5473	Convert a list of file records to notebooks
5474	Create a directory model from a database record .
5475	Create a file model from a database record .
5476	Save a notebook to the database .
5477	Saves the file to disk .
5478	Rename a file
5479	Delete a file or directory .
5480	Ensure user_id exists .
5481	Purge user data .
5482	Create a directory .
5483	Generate a WHERE clause for a user .
5484	Delete a directory .
5485	Check if a directory exists .
5486	Return a list of files in a directory .
5487	Return list of directories in directory .
5488	Filter files that match the API path .
5489	Create a query for a file .
5490	Return default fields .
5491	Get a single file from API .
5492	Get a file .
5493	Get file id from API path .
5494	Check if a file exists .
5495	Rename a directory .
5496	Save a file .
5497	Generate a list of notebooks .
5498	Purge remote checkpoints .
5499	Generate checkpoints from remote database .
5500	Generate notebooks from a table .
5501	Reencrypt row .
5502	Reencrypt files with old_decrypt function .
5503	Derives a single Fernet key from a password .
5504	Derives fallback encryption keys from a list of passwords .
5505	Create a crypto - password encryption for a single user .
5506	Memoize a single argument .
5507	Get the name of a column .
5508	Takes a row and a row and returns a dict with the content field removed .
5509	Convert row to dict .
5510	Save notebook to remote database .
5511	Save a remote file to disk .
5512	Delete a remote checkpoint .
5513	Get the content of a remote checkpoint .
5514	Return a list of all checkpoints for a given path .
5515	Rename all remote checkpoints .
5516	Delete all checkpoints for a given path .
5517	Remove all checkpoints from the database .
5518	Resolve a path to a manager .
5519	Applies a prefix to a model .
5520	Decorator for dispatching a path .
5521	Decorator that dispatches a path to a manager .
5522	Decorator to dispatch a path to a different backend .
5523	Called when a manager has changed .
5524	Get a file or directory .
5525	Normalizes an API path .
5526	Split a path into a name and name .
5527	Convert a notebook to base64 encoding .
5528	Read a numpy file .
5529	Try to decode an unknown content .
5530	Decode a base64 encoded file .
5531	Return a list of all directories in a path .
5532	Decorator to raise 404 error
5533	Create user checkpoints .
5534	Separate the directories and files from a list of models .
5535	Yield directories and files .
5536	Yield all files in a directory .
5537	Yield files with content
5538	Reencrypt all users .
5539	Reencrypt a single user .
5540	Unencrypt all users .
5541	Re - encrypt a single user .
5542	Context manager to create an alembic . INI file .
5543	Upgrade an alembic database .
5544	Sanitize the given block .
5545	Queue an instance of the given embed type .
5546	Load embed_type by ids .
5547	Insert an instance into a block .
5548	Load embed type data
5549	Validate data .
5550	The admin view .
5551	Convert to JSON
5552	Hide the authenticated fields .
5553	Exclude fields from the request .
5554	Get the article s parent .
5555	Get queryset of published items .
5556	Get published queryset .
5557	If a NullBooleanField is set to True return False .
5558	Validate the given widget .
5559	Validate a zone .
5560	Check if the given string is a valid UUID
5561	Returns the admin permissions for this user
5562	Modify admin permissions
5563	Checks that the author is valid .
5564	Create a new zone .
5565	Get data as a dictionary .
5566	prepare data
5567	Render the template .
5568	Get the settings for this integration .
5569	Callback for callback integration .
5570	Get integration settings
5571	Update an integration settings .
5572	Register a new user .
5573	Create a tag with the given contents .
5574	Render a zone
5575	Saves a featured image from data .
5576	Save a subsection .
5577	Return the extension of the image .
5578	Returns the medium URL for the image .
5579	Saves the image .
5580	Save the thumbnail to disk .
5581	Return the connection to the database .
5582	Returns a BandwidthStream instance for this bucket .
5583	Reads amount of bytes from the file .
5584	Consume an amt .
5585	Schedule a consumption operation .
5586	Process a scheduled consume token .
5587	Calculate the projected rate for the given amt .
5588	Record the consumption rate .
5589	Download a file from a bucket .
5590	Poll for a transfer .
5591	Get callbacks for a given transfer .
5592	Returns a copy of the original dict with the keys removed .
5593	Decrement the counter .
5594	Finalize the callback .
5595	Determine if a file is a special file .
5596	Acquire a tag .
5597	Release the acquired acquisition .
5598	Adjust the number of chunksize .
5599	Enqueue a file - like write task .
5600	Returns an IOWriteTask for the given file object .
5601	Resolve the download manager .
5602	Main function for download .
5603	Write data to fileobj .
5604	Request a write operation .
5605	Check if the file object is seekable .
5606	Upload a file to a bucket .
5607	Submit a file - like object to a file - like object .
5608	Copy a copy to a bucket .
5609	Deletes a bucket .
5610	Shutdown the server .
5611	Cancel all tracked transfers .
5612	Wait for the transfer to complete .
5613	Read amount of bytes from the fileobj .
5614	Wrap the given data chunk .
5615	Returns the appropriate upload manager class .
5616	Set the exception s exception .
5617	Sets the result .
5618	Set the exception of the future .
5619	Wait for the result to be done .
5620	Called when the future is cancelled .
5621	Submits a task to the given executor .
5622	Add a callback to be called when the future is done .
5623	Register a failure cleanup function .
5624	Called when the task is done .
5625	Submit a task to the executor .
5626	Add a callback to the future .
5627	Upload a file to S3 .
5628	Download a file from S3 .
5629	Iterate function decorators .
5630	Parse a decorator step .
5631	Refactor a step .
5632	Iterate through step function decorators .
5633	Check if a decorator is a string or list of strings .
5634	Refactor a step .
5635	Select python file .
5636	Get team membership objects .
5637	Create a new team membership object .
5638	Updates a team membership object .
5639	Deletes a group
5640	Get the current fact .
5641	Handle POST requests .
5642	Get membership items .
5643	Deletes a group
5644	Validate base_url .
5645	Check if string is a web URL .
5646	Opens a local file located at the given path .
5647	Raise an exception if the object is an instance of acceptable_types .
5648	Given a list of dictionaries return a dictionary of dictionaries .
5649	Checks the response for the expected response code .
5650	Convert json_data to dict .
5651	Convert a date string to a datetime
5652	Get a list of room objects .
5653	Create a room .
5654	Updates a room
5655	Delete a room
5656	Get license objects .
5657	Return the created datetime .
5658	Get access token .
5659	Create a webhook object .
5660	Updates a webhook .
5661	Deletes a webhook .
5662	Make sure the next_url is a valid URL .
5663	Sets the wait_on_limit flag .
5664	Update headers .
5665	Convert a URL to an absolute URL .
5666	Make a request to the API .
5667	Perform a GET request .
5668	Get all pages from a given URL .
5669	Get all items from a URL .
5670	Perform a PUT request .
5671	Perform a DELETE request .
5672	Creates a new user .
5673	Fetches messages from a room .
5674	Create a new message .
5675	Deletes a message
5676	Create a new person .
5677	Gets a person by its Id
5678	Updates a person .
5679	Deletes a person
5680	Fetches the user object .
5681	List roles .
5682	Get a list of Team objects .
5683	Create a new team .
5684	Updates a team .
5685	Deletes a team
5686	Get events from actor .
5687	Freeze the given data .
5688	Get an access token .
5689	Return the last activity of this team .
5690	Create a Webhook service .
5691	Get the public url for ngrok .
5692	Delete all webhooks with the given name .
5693	Create a new ngro webhook .
5694	Create a new webhook .
5695	Command line interface .
5696	Yield telegram data .
5697	Read telegram data into the queue .
5698	Create a DSMR protocol .
5699	Create a DSM reader .
5700	Create a TCP DSM reader .
5701	Handle data received from the server .
5702	Called when the connection is lost .
5703	Handle a Telegram .
5704	Parse telegram data .
5705	Get the version from a file .
5706	Ensure a Python version is valid .
5707	Find all packages in the top directory .
5708	Create a dict subclass of command class .
5709	Returns a Command instance for the given function func .
5710	Run a command .
5711	Return a class that checks that the given targets exist .
5712	Wraps a list of commands into a class .
5713	Create a command handler for a package .
5714	Get the data files from a list of data files .
5715	Get package data .
5716	Compile a regular expression .
5717	Convert a path to a list of paths .
5718	Translate a glob .
5719	Joins translated parts .
5720	Translate a glob pattern pat .
5721	Wrapper for truncate .
5722	Write a table to the database .
5723	Add indexes to the database .
5724	Add triggers to the database .
5725	Write constraint statements to database .
5726	Writes the contents of a table .
5727	Converts a single row into a single row .
5728	Write indexes to file .
5729	Write constraints for a table .
5730	Write triggers for a given table .
5731	Return the number of rows in the queue .
5732	Enqueue data into the queue .
5733	Starts a task .
5734	Build and return an AND predicate .
5735	Serialize a datetime object .
5736	Reconnect to the database .
5737	Execute a query .
5738	Get a connection to the database
5739	Run the benchmark .
5740	Connect to the aggregator .
5741	Look up an error by its error number .
5742	Return the total number of connections .
5743	Handle a connection failure .
5744	Create a simple SQL expression .
5745	Build an UPDATE statement .
5746	Connect to a database .
5747	Setup the database .
5748	Destroy all tables .
5749	Start a step .
5750	Mark a step .
5751	Load the parsed steps
5752	Disconnect from the API .
5753	Perform a reconnect .
5754	Initialize the WebSocket server .
5755	Called when a message is received .
5756	Stop the timers .
5757	Sends a ping to the API .
5758	Check pong timer .
5759	Sends the payload to the client .
5760	Unsubscribe from device .
5761	Dispatch a system message .
5762	Handler for info .
5763	Handles websocket errors
5764	Handle data received from the client .
5765	Resume all subscribed channels .
5766	Handle authentication events .
5767	Called when a configuration is received .
5768	Update the last_update timestamp of a channel
5769	Reset the connection .
5770	Get the candles for a given pair .
5771	Configure the bitfinex configuration
5772	Subscribe to a ticker .
5773	Unsubscribe from a ticker .
5774	Subscribe to order book .
5775	Unsubscribe from book .
5776	Subscribe to raw book .
5777	Unsubscribe from raw book .
5778	Subscribe to the given trade .
5779	Unsubscribe from given trades .
5780	Subscribe to a company .
5781	Unsubscribe from a book .
5782	Authenticate to the channel .
5783	Cancel an order .
5784	Invoked when a command is received .
5785	Called when a device command is received .
5786	Called when a client is received .
5787	Create a new DeviceType
5788	Publish an event .
5789	Update a device .
5790	Returns a list of client status objects .
5791	Get a list of bundles
5792	Create a new bundle
5793	Update a schema
5794	Disconnects the IBM server .
5795	Called when a connection is established .
5796	Subscribe to a specific device
5797	Subscribe to a device status .
5798	Subscribe to a device commands .
5799	Publish a command .
5800	Called when a message is received .
5801	Called when a device event is received .
5802	Respond to a device status callback .
5803	Called when a client is received .
5804	Get last event .
5805	Gets the last events of a device .
5806	Make a request to the API .
5807	Initiate a payment
5808	Get the status of a request
5809	Close the index .
5810	Returns the number of intersects in the index .
5811	Returns the nearest neighbour index for the given coordinates .
5812	Gets the bounds of an array .
5813	Delete the index from the index .
5814	Create an index from a stream of data .
5815	This method is called when the page has been loaded .
5816	Delete an object from the tree .
5817	Checks if the return value is 0 or 0
5818	Load application .
5819	Initialize the Flask - common extension .
5820	Serve the gunicorn server .
5821	Convert value to a native image field .
5822	Crop an image using ppoi
5823	Crop the image .
5824	Transforms an image to an image .
5825	Invert an image into an image .
5826	Convert data to a valid form .
5827	Process a placeholder image .
5828	Update the posteri field .
5829	Updates the field s ppoi field .
5830	Save the PPOI field to the form field .
5831	The default formfield for this field .
5832	Convert Python object to string .
5833	Auto - discover the VersatileFields module .
5834	Unregister a SizedImage subclass from this registry .
5835	Unregister a filter from the registry .
5836	Generate the URL for this field .
5837	Build the filter library
5838	Returns the root folder of the uploaded file
5839	Get the root folder of the uploaded file .
5840	Returns the root folder of the uploaded root folder .
5841	Delete all files matching the given regex .
5842	Preprocess an image .
5843	Preprocess a GIF image .
5844	Preprocess a JPEG image
5845	Retrieve an image
5846	Saves an image to disk .
5847	Return the PPOI as a string .
5848	Creates a resized image .
5849	Render the template .
5850	Return the context for this widget .
5851	Build a dictionary of attributes .
5852	Returns the resized path for the given path
5853	Returns the path to the filtered image
5854	Validate a list of sizes .
5855	Get an image from an image .
5856	Returns the rendition key set for the given key .
5857	Format an instruction .
5858	Format a function body .
5859	Decode a bytecode .
5860	Decode a module .
5861	Mark function as deprecated .
5862	Connect to the server .
5863	Close the socket .
5864	Read the result from the device .
5865	Process a FastAGI request .
5866	Parse an agi result
5867	Check status code .
5868	Reset all instances .
5869	Returns a list of instances representing the current instance .
5870	Get metadata from a path .
5871	Get primary keys for a model
5872	Deserialize value into a dict .
5873	Get an existing instance from the query .
5874	Get fields for a model
5875	Deserialize the data .
5876	Split model data into kwargs .
5877	Delete the database .
5878	Create a snapshot of a database .
5879	List available snapshots .
5880	Restore a snapshot
5881	Delete a snapshot
5882	Rename a snapshot
5883	Replace a snapshot
5884	Initialize the indexes
5885	Sanitize text .
5886	Apply a function to a list of data .
5887	Creates a processor for processing text .
5888	Processes text .
5889	Process a list of strings .
5890	Generate the document length statistics .
5891	Returns a pandas DataFrame with the token_count
5892	Map param_type to string type .
5893	Parse the interface definitions .
5894	The inverse of the bidict .
5895	Internal helper to handle duplicates .
5896	Return a copy of the bidict .
5897	Return a copy of the Bidict .
5898	Check if two dicts are equal order sensitive .
5899	Yield tuples of tuples of key - value pairs .
5900	Clear the context manager .
5901	Move the node to the end of the given key .
5902	Write text to a temporary file .
5903	Search for contacts in a list .
5904	Merge arguments into config object .
5905	Load address books from the configuration file .
5906	Prepare a list of search queries .
5907	Create a new contact .
5908	Gets a list of birthdays .
5909	Executor for subcommand
5910	Gets the list of contacts
5911	Subcommand for modify vCard
5912	Subcommand for remove_vCard
5913	Executes the source code for the selected editor .
5914	Gives a merge command .
5915	Subcommand for copying vCard
5916	Get action by alias .
5917	Convert a boolean value to a boolean
5918	Instantiate a new contact .
5919	Create an object from a file .
5920	Create a contact object from a user input .
5921	Create a contact from an existing contact .
5922	Helper function to get a list of names
5923	Add a category
5924	Parse a list of supported types .
5925	Convert a list to a string .
5926	Convert a string to a datetime object .
5927	Compares two strings
5928	Search for all contacts
5929	Search for contacts that match the given name
5930	Search for all contacts with the given query .
5931	Search the address book .
5932	Returns a dictionary of unique uids .
5933	Returns the short ID of a given UID
5934	Find a list of VCF files .
5935	Load the VDAV files .
5936	Get an abook by name .
5937	Return a list of available architectures .
5938	Return a list of available architectures
5939	Return the inspect . argspec of a function .
5940	Dispatch a parser .
5941	Ask user for input .
5942	Encode value to output_file .
5943	Guess type of kwargs
5944	Add commands to a parser .
5945	Decorator to specify a function name .
5946	Decorator for adding option strings .
5947	Prompt user for confirmation
5948	Returns a new Query object with new parameters replaced with kwargs
5949	Return a new Pattern with the given arguments .
5950	Return a cached result .
5951	Get the first item from the query .
5952	Delete the results from the database .
5953	Called when an entity is deleted .
5954	Emulate a substring .
5955	Estimate the work of the given index .
5956	Searches the given filters
5957	Count the number of records matching a filter
5958	Return the connection object for the given object
5959	return a full text
5960	Generate indices for a given model
5961	Remove all indexes from redis .
5962	Add an object to the session .
5963	Return the value for a given key
5964	Lazy write function .
5965	Save the object to the database .
5966	Deletes the object .
5967	Get a single instance by id
5968	Register dispatcher for given type .
5969	Open a semaphore .
5970	Get the number of available CPUs
5971	Send a result back to the result queue .
5972	Main worker thread .
5973	Add call items to the queue .
5974	Ensure the process is running .
5975	Wrap any non - picklable objects .
5976	start a server
5977	Duplicate a file descriptor .
5978	Get a reusable executor .
5979	Wait for all the jobs to finish .
5980	Get the preparation data for a process .
5981	Prepare process .
5982	Close all open file descriptors .
5983	Terminate a child process .
5984	Recursively terminate a given process .
5985	Get the exit codes of the given processes .
5986	Format a list of exit codes .
5987	Main entry point .
5988	Ensure semaphore is running .
5989	Generate event processor .
5990	Displays the program .
5991	Run interactive Python interpreter .
5992	Split a string into a list of arguments .
5993	Get the stack for the given frame .
5994	Run the specified hooks .
5995	Discard information about the stack .
5996	Get an integer from the current frame
5997	Get an integer .
5998	Process commands .
5999	queue a startfile
6000	returns the next non blank line
6001	Display an error message .
6002	Read a line from the user .
6003	Close the connection
6004	Disassemble a code object from a code object .
6005	Disassemble a byte string into a byte string .
6006	Count the number of frames in a frame
6007	Get call function name
6008	Print the stack trace of a process object .
6009	Lookup a subcmd object for a subcommand .
6010	Shortcut for short help
6011	Add a subcommand callback .
6012	Run a subcommand .
6013	Debugger function .
6014	Show available commands .
6015	Show line information .
6016	Find the frame of the given frame .
6017	Map thread names to thread names
6018	Get an integer .
6019	Parse command line arguments .
6020	Set the value of the debugger .
6021	Set an integer .
6022	Run the show command .
6023	Show an integer .
6024	Show setting value .
6025	Check if a line is a def statement .
6026	Check if a line is a class definition .
6027	quit thread
6028	Determine if the terminal is background color .
6029	Determine if the given RGB color is dark .
6030	Return the signature for a given frame .
6031	return a list of all display expressions
6032	Return the string representation of the given frame .
6033	Returns a string representation of the parameter .
6034	Read a single message .
6035	Shows the debug session .
6036	Handle undefined subcommand .
6037	Run the debugger .
6038	Pretty print a simple array
6039	Lookup the signal name for a signal number .
6040	Lookup a signal by name .
6041	Convert a name number to a valid signature .
6042	Set a signal replacement for a signal .
6043	Checks if all the sigs are correct
6044	Show info about a signal
6045	Handle an action .
6046	Set the print method for the signal
6047	Handle a signal .
6048	Return module name from filename .
6049	Search for a file in a list of directories .
6050	Checks if a file exists in the current directory
6051	Return a list of all python files in the given caller .
6052	Writes msg to output .
6053	Run the program .
6054	Sort a list of commands .
6055	Marks an exception as a postmortem event .
6056	Close the connection
6057	Write a message to TCP .
6058	Complete an identifier .
6059	send string to process
6060	Add one or more frames to ignore .
6061	Convert filename to absolute path .
6062	Return the filename of the debugger .
6063	Check if the trace is running .
6064	Check if the current thread is stopped
6065	Set the next frame to the next frame .
6066	Display a stack trace of a function .
6067	Check if filename is cached
6068	Check if the function name is in the frame .
6069	Delete a breakpoint .
6070	Delete a breakpoint by its number .
6071	Enables all breakpoints
6072	Enables a breakpoint by name
6073	Delete breakpoints by line number .
6074	Open the input .
6075	Read a line from the user .
6076	Ask user for confirmation
6077	\
6078	Number .
6079	Convert a query to a Future .
6080	Restore the user s login .
6081	Load a module from path .
6082	Iterate over all documents in the database .
6083	Main function for the CLI .
6084	Transforms a CSV file into a stream .
6085	Open a file or a csv file .
6086	Convert all documents in a document to a date .
6087	Convert a date string to a float .
6088	Detect file encoding .
6089	Stream lines from a file .
6090	Transforms a file to a temporary file .
6091	Open a CSV file using Python 2 .
6092	Read data from a CSV file .
6093	Main entry point for the script .
6094	Creates a session using the given URL .
6095	Save the token to disk .
6096	Perform a request and return the result .
6097	Perform a DELETE request .
6098	Wait for the project to build .
6099	Get the root URL for a given URL .
6100	Save a new token for this user .
6101	Make a request to the Keen API
6102	Perform a POST request .
6103	Returns a new instance with the given path .
6104	Get the default account id .
6105	Return documentation for this client .
6106	Wait for a job to finish .
6107	Perform a GET request .
6108	Print result to stdout .
6109	Read parameters from file .
6110	Simplify a document .
6111	Create a project with given docs .
6112	Create a new project from a JSON file .
6113	Main function for the CLI .
6114	Uploads a stream to a project .
6115	Upload a file to the server .
6116	Run command - line tool .
6117	Creates a token from a user credentials .
6118	Login to the user .
6119	The login page
6120	Get resource data .
6121	Fetch data for the period
6122	Prepare the view for this view .
6123	Initialize the view .
6124	Handle GET requests .
6125	Handle a change event .
6126	Updates the list of links
6127	Return a list of handlers for this site .
6128	Process a JSON message from the viewer
6129	Called when a DOM changes .
6130	Create the widget for this widget .
6131	Initialize the widget
6132	Destroy this widget .
6133	Add a child to this component .
6134	Remove a child widget
6135	Iterate over all child widgets .
6136	Set an attribute of the widget .
6137	Update the proxy .
6138	Notify changes
6139	Perform a XPath query on the element
6140	Initialize the object .
6141	Set widget source
6142	Sets the HTML source
6143	Receive a change .
6144	Handle a block change .
6145	Change the children of the block .
6146	Returns the content of the given path .
6147	Print error message and exit .
6148	Print error message and exit .
6149	Get a product by its name
6150	Create a new session .
6151	Reset the store .
6152	Gets a list of stores that match the search term .
6153	Set delivery system
6154	Gets the menu for the given store .
6155	Add item to basket .
6156	Add a pizza to the basket .
6157	Add a side to the basket .
6158	Remove an item from the basket .
6159	Sets the payment method for this payment .
6160	Process the payment options .
6161	Makes a GET request
6162	HTTP POST method .
6163	Call the given verb .
6164	Append an item to the menu .
6165	Add an exit .
6166	Draw the menu
6167	Process user input .
6168	Updates the selected item .
6169	Parses the given menu data .
6170	Filters the top dataframe by the given value .
6171	Returns a new DataFrame with the top - level aggregation of each column .
6172	Convert a column to a datetime object .
6173	Convert datetime to strftime
6174	Changes the date format of a column
6175	Cast a column to a given type .
6176	Returns the rank of each column in the DataFrame .
6177	a wrapper around waterfall
6178	Helper function for _basic_math .
6179	Round values in a column to a new column .
6180	Set absolute values to absolute values .
6181	Pivot pivot table .
6182	Pivot data by variable
6183	Groupby columns by aggregations
6184	Compute the cumsum of a new column
6185	Adds a row to the DataFrame with the given reference_cols .
6186	Decorator to log an exception raised by the decorated function .
6187	Log a message to the decorated function .
6188	Log the execution time of a function .
6189	Log shapes and outputs .
6190	Rename values in a DataFrame .
6191	Compute the sum of the columns of a DataFrame .
6192	Combine columns in a DataFrame .
6193	Get parameter value from func .
6194	Removes old entries from cachedir
6195	Roll up a DataFrame with the given levels .
6196	Calculate the maximum value of a column .
6197	Calculate the minimum value of a column .
6198	Fill missing values in a given column .
6199	Add an offset to a date object .
6200	Add nb_months to a date object
6201	Add nb_years to a date object .
6202	Parse a string into a date object
6203	Filter dataframe by date range .
6204	Compute the percentage of the given column .
6205	Core function for the ADA family .
6206	Calculate learning updates .
6207	Get training parameters .
6208	Add free parameters for optimization .
6209	Sample the first glimpse .
6210	Prepare the encoder .
6211	Compute the loss .
6212	Applies a function to each dataset .
6213	Vectorize target size .
6214	Report training data .
6215	Train the network .
6216	Sample from input .
6217	Compute alignment weights .
6218	Compute the context vector .
6219	Concatenate a list of Variables .
6220	Pad the set to the given side .
6221	Generate the rmsprop for each parameter and gradients .
6222	Print the report
6223	Run the objective function .
6224	Run the monitor .
6225	Build loop variables .
6226	Implements the loop .
6227	Core function for the momentum core .
6228	If the branch is true then the next branch is true then return the branch .
6229	Skip the dataset .
6230	Load parameters from disk .
6231	Train the model .
6232	Run the training step .
6233	Run the validation step .
6234	Record the score map .
6235	Get the current data .
6236	Apply a function to this NeuralVariable .
6237	report used parameters
6238	Compute a variance .
6239	Creates a deep variable from the dataset .
6240	Add a shared variable to theano .
6241	Stack multiple encoders .
6242	Stack multiple decoders .
6243	Encode x using the encoder .
6244	Decode input data .
6245	Create a 2D Gaussian kernel
6246	Register a new layer .
6247	Adds the mean and hidden outputs to the training monitor .
6248	Returns a list of all parameters
6249	Setup the input tensor .
6250	Evaluate the model .
6251	Saves model parameters .
6252	Load parameters from file .
6253	Print information about the network .
6254	Register new parameters .
6255	Register new updates .
6256	Register training updates .
6257	Register new monitors .
6258	Compute the L2 norm of multiple tensors .
6259	Write one elt to file_obj .
6260	Loads a pickled object from a file - like object .
6261	Load model parameters .
6262	Create the request elements .
6263	Decode user_state parameter .
6264	Parser for x_credentials .
6265	Filter request_token_request_request_type .
6266	Login to the user .
6267	Normalize a dictionary .
6268	Convert a list of items to a dictionary .
6269	Parse and return a query string .
6270	Resolve provider class by name
6271	Create a cookie .
6272	Save the current session .
6273	Get cookie data .
6274	Deserialize data into a dictionary
6275	Calculate signature .
6276	Serialize data into a base64 string .
6277	Return True if the token is valid .
6278	Determine if the object should be expired .
6279	Serialize the credentials .
6280	Check if the content is a binary string .
6281	The response content .
6282	Create OAuth2 Request element .
6283	Get the user s email address .
6284	Decorator to handle login requests .
6285	Authenticate user .
6286	Returns the session key for the given key .
6287	Set the value of a key in the session .
6288	Generate a random CSRF token .
6289	Log an authomatic message .
6290	Return True if the given status is in category category .
6291	Split a URL into parts .
6292	Enables the decorated function to be used in the Flask application .
6293	Set CORS headers .
6294	Returns a dictionary of key - value pairs with cors_options
6295	Convert an object to a string .
6296	Ensure an instance is iterable .
6297	Return True if two numbers are almost equal .
6298	Mark a function as deprecated .
6299	Deserialize a string into an AudioSegment object .
6300	Create an AudioSegment from a file .
6301	Create an AudioSegment from a numpy array .
6302	Execute a command on a SOX file .
6303	Filter the audio by a certain threshold .
6304	Compute the FFT of this TimeSeries .
6305	Generate frames from the stream .
6306	Normalize the SPL by averaging the average RMS by averaging the RMS .
6307	Return a copy of this AudioSegment with the others .
6308	Resample the audio file .
6309	Serialize to pickle .
6310	Calculate the spectrogram .
6311	Takes a list of candidate offsets and returns the first occurrence of the first one .
6312	Determine the first sample front of an onset sample .
6313	Determine the offset front front front of the onset front .
6314	Finds the onset front - front front front id and the onset front .
6315	Given a list of onset front and offset return a list of consecutive frequencies that overlap .
6316	Update segmentation mask .
6317	Get the first index from the front of a given index
6318	Yields all front ids from onset_fronts
6319	Get the corresponding offsets for the onset front .
6320	Remove overlaps from a segmentation mask .
6321	Removes front indices that are not smaller than size .
6322	Break a list of front - matched front .
6323	Merge adjacent segments .
6324	Split a mask into multiple masks .
6325	Downsampling of a mask .
6326	Perform an ASA task .
6327	Bandpass filter .
6328	Low - pass filter filter .
6329	Convert a list of response data to tf . tf . tf .
6330	Expand and standardize a dataset .
6331	Check if two elements are equal .
6332	Group the audit Ranks .
6333	Loads the confusion matrix from the audit file .
6334	Convert a list of response data to TensorFlow .
6335	Update the index URL based on environment variables .
6336	Autodetect files .
6337	Resolve all available streams .
6338	Return a list of streams describing the given property .
6339	Find streams by predicate .
6340	Handle an error .
6341	Push a sample to the stream .
6342	Pushes a chunk of data into the stream .
6343	Returns information about the stream .
6344	Open a LSL stream .
6345	Calculate the time of the LSL device .
6346	Get a child element .
6347	Return the next sibling element .
6348	Return the previous sibling of the element .
6349	Set the LSL name .
6350	Set the value of a variable .
6351	Append a new child element .
6352	Create new child element .
6353	Append an element to this element .
6354	Create a new element with the given elem .
6355	Remove a child from this node .
6356	Return a list of streamInfo objects .
6357	Identify a word .
6358	Autocomplete .
6359	Compute the n - grams of a token .
6360	Iterate through a pipe .
6361	Apply a function to an iterable .
6362	Makes a fuzzy word .
6363	Do fuzzy .
6364	Fuzzy index
6365	Extract all related relations .
6366	List available commands .
6367	List database information
6368	\ Gets the value of a key
6369	GEOHASH
6370	Get details of a document .
6371	Index a document .
6372	BESSTORE command .
6373	Compare two strings
6374	Send a response .
6375	Return a list of response objects from a pool .
6376	Extract bits from an array .
6377	Reinterpret a set of types from a signature .
6378	Convert a slice value to a Slice
6379	Find all files in a directory .
6380	Evaluate the given iterable .
6381	Generate loop logic for each item .
6382	Left - hand - left - left - than - th signal .
6383	returns the log2 of x
6384	Checks if a number is a power - 2 .
6385	Define a case statement .
6386	Define default statement .
6387	Register interface to vcd .
6388	Called when the simulation is started .
6389	logs a change
6390	Render a HWProcess .
6391	Add agents to the unit .
6392	get the parent clk
6393	Yield distinct elements from iterable .
6394	Group items by fn .
6395	Flatten an iterable .
6396	Merge nested if statements into self .
6397	Remove all unconnected signals from the network .
6398	Determine if the expression is too simple .
6399	Tries to merge process .
6400	Takes a list of processes and returns a list of processes that are identical .
6401	Process a WRITE request
6402	Serialize unit to Rtl .
6403	Determine the best name for all output outputs .
6404	Given a set of statements return a list of statements that are not connected to a destinationSignal .
6405	Create a new signal .
6406	Synthesize this instance with the given name .
6407	Returns the maximum id of the given stm .
6408	Get the maximum number of statements in a Process .
6409	Override the write method
6410	Change the direction of this interface
6411	Load declaration declarations .
6412	Create a list of signals for this interface .
6413	Returns the physical name of the resource .
6414	Return the bit length of the array .
6415	Returns the sensitivity of a given operation .
6416	Evaluate the given operator .
6417	Convert signor to specified type
6418	Re - interpret a bit or struct or struct .
6419	Return the number of words between start and end .
6420	Group parts by offset .
6421	Pretty print an interface
6422	Generate frames from TransTpl template .
6423	Iterate over all words .
6424	Packs data into the wire .
6425	Clean the meta data for each statement .
6426	Find the enclosures for the given statements .
6427	Discovers the presence of a signal dependent .
6428	Get the context of the statement
6429	Called when the node is reduced .
6430	Called when the context is merged .
6431	Return True if two statements are merged .
6432	Merge list of statements into a single statement .
6433	Merge two statements .
6434	Tries to reduce a list of statements .
6435	Called when the parent is complete .
6436	Set parent stm .
6437	Register stments in list of statements .
6438	Destroy this statement .
6439	Create a register .
6440	Create a signature for a given data type .
6441	Cleans up all interfaces
6442	Recursively flatten fields .
6443	Unpack data from frame data .
6444	Convert to signed value .
6445	Sets the sensitivity of a process .
6446	Evaluate a set of conditions .
6447	Connect a signal to another SimUnit .
6448	Create a new update function that returns a new value .
6449	Create an update callback for the next item .
6450	Return a new Bits object initialized with the given width .
6451	Collect INDRA Statements .
6452	Evaluate a parameter .
6453	Set parameter .
6454	Create a struct from an interface
6455	Resolve memory allocated to memory .
6456	Gets the index of the active signal .
6457	Convert a Python value to a Python value .
6458	Auto - cast sigor to specified type
6459	Re - interpret the type of signal .
6460	Iterate over all parameters in the interface .
6461	Return a list of connections connected to the given srcInterface .
6462	Pack an interface .
6463	Create a hardcoded process for a rom .
6464	Convert this unit to Rtl .
6465	Register an interface in this class .
6466	Tries to reduce the operand and return the result .
6467	Tries to reduce a scalar value .
6468	Returns a base name scope
6469	Return True if the unit should be serialized .
6470	Create an HDL Type
6471	Serialize ifContainer .
6472	Returns the base condition of a condition .
6473	Returns a new SimBitsTitsT .
6474	Returns the constant name for a constant
6475	Cuts all drivers that are of the receiver .
6476	Load data from a given dtype .
6477	Loads a struct from a given HDL struct .
6478	Load data from an HDL type .
6479	Return the width of the item .
6480	Recursively walk through all nodes in this HStruct .
6481	Convert a signed value to a signed integer .
6482	Merge self .
6483	Returns the indentation for the given indentNum
6484	Raise an error if the given property is not None .
6485	Add a new parameter to this scope .
6486	Helper method to update parameters from the given object .
6487	Register a unit .
6488	Register an interface .
6489	Register an array with the given name .
6490	Returns the single driver
6491	Evaluate the expression .
6492	Create an RtlSignal operator
6493	Return a new context with the given indent .
6494	Try to connect to a unit .
6495	Propagate clk to all units
6496	Try to connect clk and rst .
6497	Propagate clk and rst
6498	Try to connect the units of an object to another .
6499	Propagate rst to rst
6500	Returns a sequence of bits in sigor .
6501	Serialize the object to be serialized
6502	Serialize a single unit .
6503	Serialize params to val tuple .
6504	Get the full name of the interface .
6505	Make association .
6506	Prepare the unit of a unit .
6507	Convert a unit to a SimModel instance .
6508	Reconnect unit signals from a model
6509	Simulate a unit test unit .
6510	Initialize on write callback .
6511	Connect this port to another signal .
6512	Register an external port .
6513	Connect this point to another signal .
6514	Get the canonical representation of this instruction .
6515	Determine if an event depends on the given process .
6516	Add a process .
6517	Add proc to run .
6518	Schedule the combobox event to be queued .
6519	Schedule the apply values .
6520	Determine the conflict of a newValue .
6521	Runs all the combobProcesses .
6522	Runs the sequence of sequences in the simulation .
6523	Applies a set of values to this signal .
6524	Read the receiver s value .
6525	Write value to receiver .
6526	Add a process .
6527	Simulate this unit .
6528	Create an operand for a function .
6529	Convert statements into a list of IF statements .
6530	Create a child process
6531	Compute the Hamming distance between two strings .
6532	Compute the average hash of an image .
6533	Calculate the distance between two images .
6534	Setup a Vizio device .
6535	Update the power state .
6536	Mute the volume .
6537	Increase the volume .
6538	Decrease the volume .
6539	Set the volume level .
6540	Reset the piece .
6541	Returns the piece at the given square .
6542	Removes the piece at the given square .
6543	Sets the piece at the given square .
6544	Determine if a move isicide or not .
6545	Checks if the game was attacked .
6546	Check if game is over .
6547	Is a checkmate?
6548	Returns True if there is a fourfold repetition .
6549	Removes a move from the stack .
6550	Returns the sfen as a string .
6551	Push a move into the stack .
6552	Return the zobrist hash of the board .
6553	Gets the piece symbol
6554	Return a |PI| object from a given symbol .
6555	Gets the USI representation of a piece .
6556	Create a Piece from string .
6557	Parse the raw commits .
6558	Parses the given parts into a dict .
6559	Load the configuration from the CLI .
6560	Execute the command with the given configuration .
6561	Add an argument parser .
6562	Load configuration from file .
6563	Generate YAML representation of this class .
6564	Generate markdown for this class .
6565	Cast value to string .
6566	Returns a list of dates between two dates .
6567	Parse a date string into a datetime object .
6568	Load currency data from a file .
6569	Set missing rates to None
6570	Compute missing rates
6571	Get the rate for the given currency and date .
6572	Convert amount to new_currency
6573	Divide an iterable into chunks .
6574	Simulate the animation .
6575	Read a single n - th record .
6576	Write n - th record to file .
6577	Return a memory view of a file .
6578	Return the comments of the DAF file .
6579	Add an array to the file .
6580	Close the DAF file .
6581	Compute the position and return the position
6582	Close the DAF file .
6583	Load the PCK data
6584	Compute the linear segment .
6585	Calls function call .
6586	Handle binary operation .
6587	Check for debug messages .
6588	Check if a joined string is within a join statement .
6589	Checks for debug logging calls .
6590	Set exception handler name .
6591	Determine the logging level of a node .
6592	Get an exception handler name .
6593	Get the id attribute for the given value
6594	Check if node is a bare exception .
6595	Check for exc_info .
6596	Deletes the file if the instance has changed .
6597	Create widget for DB file widget
6598	Render PDF content .
6599	Render a PDF template
6600	Quote a string .
6601	Configure the mongodb module .
6602	Convert string to underscore .
6603	Create a new index
6604	Parse a csv file .
6605	Load a file into a list of strings .
6606	Parses a line
6607	Translate a symbol to another symbol
6608	Loads the symbol maps
6609	Get a session
6610	Add a new price
6611	Import prices from file .
6612	Show the latest price for the given symbol .
6613	List the prices for a particular date .
6614	Download prices from stock database .
6615	Prune price entries .
6616	Gets the default session
6617	Create a new symbol map .
6618	List available symbol maps
6619	Get a symbol map by its identifier
6620	Return a list of lines from a file .
6621	Maps Price to Price model
6622	Maps Price to Price
6623	Read configuration file
6624	Returns the path to the config file .
6625	Create user config file
6626	Get the config file path
6627	Get the contents of the config file .
6628	Set an option in the configuration file .
6629	Get the value of an option .
6630	Save configuration to file .
6631	Parse symbol .
6632	Adds a price to the book .
6633	Add a price entity to the database .
6634	Downloads and saves the price
6635	Returns a session object
6636	Get prices .
6637	Get prices on a specific date .
6638	Delete all symbols that have been removed .
6639	Prune prices for a security symbol .
6640	Downloads price data from market agent .
6641	Get securities list
6642	Return a partial state
6643	Update the bound callbacks
6644	Recursively descend the tree .
6645	Decorator to remove child nodes
6646	Fail if student parts are equal .
6647	Check if code has the same AST .
6648	Checks if the student contains text .
6649	Check if a package has an import .
6650	Test if the student output contains text .
6651	Check if printout is printout .
6652	Assert that the code contains an error .
6653	Test if the student has been chosen
6654	Checks the given function at the given index .
6655	Get the result of a process
6656	Overrides the solution of a solution .
6657	Test if an instance is an instance of the student process .
6658	Return a copy of all defined items .
6659	Creates a child state
6660	Run a parser over the tree .
6661	Check if context is a context loop loop .
6662	Ensure that the state contains context with the given context .
6663	Check if a student has a part .
6664	Check that the given part is at least one part .
6665	Check the arguments of a function .
6666	Checks the given call string .
6667	Get the true anomaly
6668	Initialize the application .
6669	Initialize the LDAP configuration .
6670	Add a server to the pool .
6671	Remove a connection from the context manager .
6672	Destroys the connection from the request context .
6673	Authenticate with the LDAP server .
6674	Bind a user to LDAP .
6675	Authenticate to LDAP .
6676	Get LDAP groups for a user .
6677	Get user information .
6678	Returns a User object for the given username .
6679	Get an object from LDAP .
6680	Return an LDAP3 connection .
6681	Create a new connection object .
6682	Create an LDAP3 connection .
6683	Destroys a connection .
6684	Search for a collection .
6685	get a list of labels
6686	search a collection
6687	Search all artifacts in a collection .
6688	speak the client
6689	Announce a command .
6690	update secrets
6691	update headers
6692	a helper function to make sure the client has a secret
6693	download a url to a temporary file
6694	stream url to stream
6695	update authorization token
6696	Get or create a folder .
6697	Reads the response from the response
6698	get the bucket
6699	Update the secrets .
6700	Initialize the client auth client .
6701	Load secrets from cache
6702	Prints the logs of the device
6703	list all logs in the bucket
6704	create folder at endpoint_id
6705	Initialize transfer client
6706	search all containers
6707	Show client status
6708	add a setting
6709	remove a setting
6710	Activate a backend
6711	Delete a backend
6712	Update the base base
6713	Generate a basic auth header .
6714	Generate a signature .
6715	Generate a header signature .
6716	HTTP DELETE request .
6717	HTTP HEAD request .
6718	Perform a GET request
6719	test if certificate is enabled
6720	Remove an image
6721	Reads the installed version file
6722	Gets the requirements from the lookup dict
6723	get singularity version
6724	check installed software
6725	Get the path to the installd directory
6726	Get thumbnail path
6727	Run a command .
6728	Get image metadata
6729	update the secret
6730	Print the output
6731	Kill all commands
6732	List logs for a container .
6733	Returns a list of names of all collections in the account
6734	Update the swift configuration
6735	update secrets
6736	get Singularity client
6737	Run an IPython client
6738	get the manifest for a given repository
6739	get the manifest
6740	Get the download cache directory
6741	Extract the environment variables from the Docker container .
6742	update base url
6743	Update private token header .
6744	Get the metadata for artifacts
6745	Get the settings for a client .
6746	get a single setting
6747	Update a client setting .
6748	Generate authorization for the given names .
6749	list the builders for a project
6750	load a template
6751	get an IP address
6752	run build
6753	list all containers in the bucket
6754	get all containers
6755	Manage sreg registry
6756	Shared entry point
6757	Initialize the database
6758	get the build template
6759	list all shared containers
6760	list all endpoints
6761	list files at endpoint
6762	create a shared link
6763	Reads the client secrets file .
6764	Get the service objects .
6765	Delete an object from a bucket .
6766	delete a file
6767	destroy an instance
6768	Get subparsers for a given parser .
6769	Generate a random string .
6770	Get a temporary directory .
6771	Extract a tar archive .
6772	extract a tar2oci archive
6773	Get the hash of a file .
6774	Read a file .
6775	Read json file .
6776	delete a list of files
6777	push an image
6778	Get or create a collection .
6779	Get collection by name .
6780	Get container by name or version
6781	list images
6782	Inspect a container
6783	rename an image
6784	move an image
6785	remove an image
6786	add image to registry
6787	push an image
6788	Extract the header from the given recipe .
6789	Find a single recipe .
6790	Creates a tar . greg for the given list of files .
6791	run the build
6792	Update the metadata for a blob .
6793	Format a container name .
6794	Whether the user should be colored .
6795	Emit an error message .
6796	Write message to stream .
6797	Creates a table with the given rows
6798	push an image
6799	get a template
6800	get the manifest from a repository
6801	return the build template
6802	update the secrets file
6803	Create a repr string for a class .
6804	Context manager for handling errors .
6805	Create a temporary file for a temporary file .
6806	Get the URL of a user or email .
6807	Get a Gravatar URL .
6808	Check if the user has a Gravatar .
6809	Build a Gravatar profile URL .
6810	Generate a sequence of chimera blocks .
6811	Compute the chimera for a chimera .
6812	Enumerate and return a set of neurons
6813	Enumerate a molecule .
6814	Normalize a molecule .
6815	Apply a rule to a molecule .
6816	Calculate the letter of a molecule .
6817	Validate a molecule .
6818	The Metal Disconnector
6819	Standardize a molecule .
6820	Enumerate Tautomers in a molecule .
6821	Canonicalize a tautomer .
6822	Standardize a molecule .
6823	Return the parent tautomer parent .
6824	Get the parent fragment of a molecule .
6825	Remove stereo information from molecule .
6826	Remove isotopes from a molecule .
6827	Uncharged charges .
6828	Get the super parent parent of a molecule
6829	Main entry point for molvs .
6830	Remove FragmentPatterns from a molecule .
6831	Choose the largest fragment .
6832	Integrate the IVP at the given parameters .
6833	Gets the rate limit
6834	Get all members of the organization
6835	Get all the teams of the organization
6836	Gets all repos
6837	Get the total contributors
6838	Returns the number of open pull requests .
6839	Gets all issues in a repository
6840	Return the readme for the given repo .
6841	Get the license for a repository .
6842	Gets all the commits for a repository
6843	Writes an organization json file
6844	Write total number of contributors to a file .
6845	Write the languages file .
6846	Creates a directory if it doesn t exist
6847	Removes the language of a specific date .
6848	Get a list of GitHub organizations .
6849	Connect to GitHub Enterprise .
6850	Check API limits .
6851	Connect to GitHub .
6852	Query for repositories .
6853	Get current organization .
6854	write stars to a file
6855	Create a Project instance from a Gitlab repository .
6856	Create a Project instance from a DOE code record .
6857	Return the License object
6858	Gets the traffic .
6859	Gets all releases for a given repo
6860	Get list of referrers
6861	Retrieve data from Traffic API
6862	Writes a json file to disk
6863	Writes data to file
6864	check if a file already exists
6865	Writes data to a file
6866	Write referrers to file .
6867	Process a JSON file .
6868	Fetch data from a URL .
6869	Process a file or URL .
6870	Login to GitHub .
6871	Get members of the organization .
6872	Write logins to a file
6873	Connect to a stashy session .
6874	Connect to Gitlab .
6875	Query repositories .
6876	Convert a git repo to a sloc
6877	Calculate the number of hours in the laboratory .
6878	Remove null strings from dictionary
6879	Read a GQL file .
6880	Query the git repository for a given file path .
6881	Submit a git query to the GitHub API
6882	Waits until the given UTC timeStamp is reached .
6883	Called by the client to count a number of seconds .
6884	Import data from file .
6885	Save data to file .
6886	Create a TSSConnection object .
6887	Create a TFS Enterprise client .
6888	Create a TFS Enterprise client .
6889	Creates a TFS client .
6890	Creates a TFS GitService client .
6891	Get Git Repos for a collection .
6892	Get a list of Tfvc repositories
6893	Gets the year commits
6894	calculate total commits
6895	Write last year commits to file
6896	Configure backends .
6897	Get a metric interface for a given thing .
6898	Log a timing value .
6899	Context manager .
6900	A decorator for timing a timer .
6901	Generate a tag .
6902	Log timing information .
6903	Log a histogram .
6904	Calculate and update stats .
6905	Create a Case
6906	Convert a database value to an enum value .
6907	Convert value to python object .
6908	Get the value for the given value .
6909	Recursively resolve the given path .
6910	Given a list of usls and a list of dictionaries return a mapping of table names to tables .
6911	Return the mean value .
6912	Increment the counter with the given value
6913	Return the mean rate in seconds .
6914	Mark the last value as a new value .
6915	Send a metric to the client .
6916	Serialize a metric .
6917	Serialize a metric string .
6918	Add a metric to the batch .
6919	Get the value of an option .
6920	Ensure data is valid .
6921	Get or set a default value .
6922	Get a mapping of ledger code to GUID identifiers .
6923	Get the available divisions and their description .
6924	Map exact invoice numbers .
6925	Solve the sudoku problem .
6926	Creates a Flask view .
6927	Create a form view .
6928	Injects a method view into a method .
6929	Create an API view .
6930	Add generic API view .
6931	Register a ModelViewSet .
6932	Create a stream from a file descriptor .
6933	Read data from the file descriptor .
6934	Close the socket .
6935	Called when a connection is lost .
6936	Register a watch .
6937	Remove a watch .
6938	Setup a watch for a given path .
6939	Setup the watch thread .
6940	Get an event from the watch .
6941	Triggers a touch event .
6942	Validate and update interval .
6943	Called when a failure occurs .
6944	Close all connections .
6945	Return True if all connections have been starred .
6946	Creates a connection to an NNSQd server .
6947	Make a request to lookupd
6948	Set the maximum RDY for this connection .
6949	Called when a message is raised .
6950	Register a callback .
6951	Remove a callback .
6952	Triggers all registered listeners
6953	Publish a message to a topic
6954	set feature transform
6955	Runs prediction on input data .
6956	calculate the angle of the angle in degrees
6957	Parse the log file into a dictionary .
6958	Clean up temporary fastq files .
6959	Merge default adapter .
6960	Main function for trimmomatic .
6961	Read depth file .
6962	Main entry point .
6963	Set the template file path .
6964	Set the main channel names .
6965	Get user channel information
6966	Render a Jinja2 template .
6967	Render the template as a string .
6968	Sets the context of the workflow .
6969	Update main forks .
6970	Set the secondary channel for the given source .
6971	Update component attributes .
6972	Set compiler status channels .
6973	Set the raw inputs for this process .
6974	Set secondary inputs
6975	Set extra inputs for the process .
6976	Extract coverage from header string .
6977	Parse assembly file .
6978	Calculate the proportions of a sequence .
6979	Filter contigs based on comparisons .
6980	Calculate assembly length .
6981	Write the filtered assembly to a file .
6982	Write the report to a file .
6983	Removes all inner forks of a fork .
6984	Checks for errors in the given string .
6985	Runs the sanity checks .
6986	Parse a pipeline string .
6987	Get the source lane for a fork .
6988	Parse a string of lane tokens .
6989	Establish a linear connection between processes .
6990	Create a connection to the given source and sink .
6991	Add unique identifiers to pipeline string
6992	Removes unique identifiers from pipeline links
6993	Check that the required files are present .
6994	Convert a header string to a mapping
6995	Convert seconds to hours seconds
6996	Convert a string to a number of bytes .
6997	Retrieves the list of processes created by the pipeline
6998	Clear inspect information .
6999	Update barrier status .
7000	Retrieve log from path .
7001	Assign resource usage information
7002	Update process stats
7003	Parse the log file .
7004	Update the inspect .
7005	Display the screen .
7006	Updates the top level of the screen .
7007	If left or right is left right then left left right .
7008	Get last n lines from the log file .
7009	Return a dictionary of basic information for the pipeline .
7010	Read the dotDag file and return a dict
7011	Get the hash of the pipeline .
7012	Get the path of the nextflow pipeline .
7013	Split sequences into fasta file
7014	Main entry point for profiling .
7015	Run an innuendo recipe
7016	Returns a Recipe instance for the given recipe name .
7017	List available recipes .
7018	Validate a pipeline string
7019	Build an upstream pipeline .
7020	Build a child process fragment
7021	Define a pipeline string
7022	Define the pipeline .
7023	Get component string .
7024	Write a report to a report .
7025	Main entry point for trimming
7026	Fix all contig names in assembly
7027	Remove temporary fastq files
7028	Parse a list of files
7029	Parse log file
7030	Iterate over the entries in the database .
7031	Get the ID of a contig
7032	Get the plot data for the analysis .
7033	Write plot data to a report .
7034	Generate a report
7035	Parse assembly file .
7036	Get summary statistics
7037	Get labels for a window
7038	Calculate GC percentage .
7039	Calculate GC proportion for a given window
7040	Run skesi analysis
7041	Write a report to a JSON report
7042	Get the index of the nearest position in the list .
7043	Extract the proportion of nucleotide bias from a file .
7044	Determine the optimal trim position for the sample .
7045	Read summary information from a summary file .
7046	Check the health of a summary file .
7047	Parse bowtie log output
7048	Parses a process name string .
7049	Add a dependency
7050	Searches the process tree for a given template .
7051	Build the header
7052	Build the footer
7053	Set the main channels for all processes .
7054	Set initial inputs
7055	Set the secondary channels
7056	Compile status channels .
7057	Generate a string representation of a resource dictionary .
7058	Return the container configuration string
7059	Return a string representation of the parameters .
7060	Returns a string containing the merged parameters .
7061	Returns the manifest string .
7062	Sets the configuration for all processes .
7063	Writes a DAG to a file .
7064	Render the pipeline .
7065	Write configuration files to the project directory .
7066	Export params to stdout .
7067	Export directives to stdout .
7068	Fetch docker tags
7069	Build the project .
7070	Check if kmer option is set .
7071	Run the metadades .
7072	Get a hash of the report .
7073	Update the tracewatch .
7074	Update the logwatch .
7075	Send a live report to the report queue .
7076	Send an initial POST request to the server .
7077	Close the connection to the server .
7078	Convert adapter sequences to tabular format .
7079	Main function for calling fastqc .
7080	Send MASH to the output file
7081	Makes a Mash with the shared hashes
7082	Generate the version information for the template .
7083	Makes a mash file and returns filtered results
7084	Return a string with colored print .
7085	Parser function for processing processes .
7086	Creates a processor for each process .
7087	Guess compression for a file .
7088	Get the range of a qual string .
7089	Return a list of valid encodings in a range .
7090	Parse coverage table .
7091	Filter the assembly file with the given contig threshold .
7092	Filter BAM file based on coverage information .
7093	Evaluate the minimum number of assembly coverage .
7094	Get the size of the assembly file .
7095	Process assembly mapping .
7096	Convert name to camel case
7097	Return a map of component classes .
7098	Process a newick file
7099	Implementation of the quickhull algorithm .
7100	Assign W to next data
7101	Median filter
7102	Compute the Gaussian Krnll kernel .
7103	Compute the SSM
7104	Compute the number of non - overlapping components .
7105	Gaussian filter .
7106	Compute the cross - correlation distance
7107	Circular shift matrix
7108	Compute the embedded space of the given X .
7109	Plotting formatting .
7110	Plot boundaries .
7111	Plot a list of labels .
7112	Plot one track
7113	Plot a tree .
7114	Obtain a list of features from a feature matrix .
7115	This function computes the maximum FFT of a feature segment .
7116	Compute the similarity between two features .
7117	Fit the scatter plot .
7118	Fit the scatter to the data .
7119	Read references from a dataset
7120	Find estimator estimator .
7121	Save estimations .
7122	Get all boundary algorithms
7123	Get configuration for a set of parameters .
7124	Get audio files from a dataset .
7125	Read hierarchy references .
7126	Returns the duration in seconds .
7127	Write a MRX file to a MRX file .
7128	Get the absolute path to the file
7129	Align a segmentation to a segment
7130	Estimate beats from the audio source
7131	Read beat annotations .
7132	Compute beats synchronous features .
7133	Read the features file .
7134	Write features to a JSON file .
7135	Returns a list of all parameter names
7136	Compute the framesync timesync timesync .
7137	Get the time synchronization time for each feature .
7138	Return audio features .
7139	Select a feature based on its type .
7140	Preprocess the MSAF
7141	Performs postprocessing on the segment indexes .
7142	Entry point for the command line interface .
7143	Print results .
7144	Compute GTF results .
7145	Compute the information gain for an annotation .
7146	Process a track .
7147	Return the name of the results file .
7148	Process a set of MSAFs .
7149	Create a ConfigParameter instance with the given name .
7150	Compute all features for a given audio file .
7151	Process a set of msaf files .
7152	Calculate the cost of a Gaussian distribution .
7153	Lognize a frequency matrix .
7154	Normalize a set of values .
7155	Normalize an X .
7156	Return a numpy array of time frames
7157	Remove empty segments from times and labels .
7158	Generate sonify audio with signal clicks
7159	Synchronize labels with new bounding boxes .
7160	Process a segmentation level .
7161	Align two hieraries
7162	Compute the distance between a node .
7163	Estimate the best knee .
7164	Get clustering data .
7165	Run k - means clustering .
7166	Compute BIC parameters .
7167	Returns the magnitude of an X .
7168	Convert json file to numpy array .
7169	Convert a json file to a numpy array .
7170	Convert json file to numpy array .
7171	Convert a json file to a numpy array .
7172	Compute 2D Fourier transform
7173	Compute the most frequent labels for each label .
7174	Filter the activation matrix
7175	Get boundaries module .
7176	Get labels module .
7177	Run a hierarchy on an audio file .
7178	Segmentation function .
7179	Run the algorithm on the audio file .
7180	Process a track .
7181	Process audio data .
7182	Update self . w
7183	Main entry point for translation .
7184	Wrap a function into a coroutine .
7185	Return accumulator .
7186	Set the task as a string
7187	Emulate iterators .
7188	Send a source stream to the target stream .
7189	Decorator that adds a push URL to a push URL .
7190	Makes a request to Google Translate .
7191	Get the translation table for a given language .
7192	Print the translation table .
7193	Remove nodes from a network .
7194	Save network to an HDF5 file .
7195	Create a network from an HDF5 file .
7196	Set a variable to a variable
7197	Compute aggregate accessibility variables for a given distance .
7198	Get the node_ids of the given coordinates .
7199	Plots a scatter plot .
7200	Set the pois for the given category .
7201	Find the nearest pois for a given category .
7202	r Return the number of low connectivity nodes in the network .
7203	Convert a node s tags to a dict
7204	Makes an OSM query
7205	Build a node query
7206	Returns a pandas DataFrame containing all nodes of a node .
7207	Check if the value is a regular expression .
7208	Compare value with given expectation .
7209	Marks a method as a method callable .
7210	Compare two expressions .
7211	Trigger callable methods
7212	Check if a request matches the given request .
7213	Get a matcher by name .
7214	Initialize a matcher by name .
7215	Set the body of the request .
7216	Sets the request body
7217	Set a key and value pair .
7218	Append functions to the list .
7219	Triggers the request
7220	Add a URL to the request .
7221	Specify headers .
7222	Matches the given list of headers .
7223	Checks if the given headers are present .
7224	Set Content - Type header .
7225	Add query parameters to the request .
7226	Set the body of the request .
7227	Specifies that the request is valid .
7228	Sets the XML request .
7229	Open a file at path
7230	Sets the object s status
7231	Set the error
7232	Send a response to this mock .
7233	Match request .
7234	Activate asynchronous coroutine .
7235	Set the mock engine .
7236	Enable network networks .
7237	Create a mock expectation .
7238	Remove a mock .
7239	Activate the engine .
7240	Disable the current mock engine .
7241	Returns True if the request should be used .
7242	Determine if a request matches the given request .
7243	Make a shallow copy of this request .
7244	Activate the wrapped function .
7245	Context manager for running engines .
7246	Add interceptors to the engine .
7247	Remove an interceptor by name
7248	Retrieves a setting from the database .
7249	Add the decrypted column to the database .
7250	Sets the attribute to the original value .
7251	Get the value for a placeholder .
7252	Return a decryptedCol .
7253	Return the placeholder value for the SQLAlchemy key .
7254	Takes a list of YAML keys and returns a list of dictionaries .
7255	Base regression .
7256	Returns the covariance matrix .
7257	Recursively walk the tree .
7258	Calculate the mean and branch variance .
7259	r Generate an array of scalar values .
7260	The explained variance
7261	Calculate the regression model
7262	Find the best root
7263	set tc values
7264	Calculate branch count .
7265	Calculate the cost of a branch .
7266	Attach all branches to the tree .
7267	Optimize the coalescent time scale
7268	Convert a profile into a sequence of sequences .
7269	Normalize a profile .
7270	Set the GTR instance
7271	Set the GTR model .
7272	set sequence length
7273	Assign sequences to nodes
7274	Prepare the tree .
7275	Prepare node names .
7276	Calculate the distance2 root length .
7277	Reconstruct alignment .
7278	Get the mutation matrix for a node .
7279	Returns the expanded sequence
7280	Create the Fitch profile for the tree .
7281	Compute the state of the fitch of a node .
7282	Find the intersection of two arrays .
7283	Calculate the length of the sequence .
7284	Calculate the log likelihood of the tree .
7285	Calculate branch length .
7286	Optimize branch length
7287	Optimize branch length optimization
7288	Calculate the optimal length of a node .
7289	Optimize sequences and branch length .
7290	Reconstruct a SeqAlignment object
7291	Compute the Q matrix
7292	Convenience constructor for creating a Gaussian distribution .
7293	Returns an instance of the given model .
7294	Checks the GTR rate matrix
7295	Calculate the probabilistic probabilistic probabilistic .
7296	Compute optimal t
7297	Optimize the optimal time for a given sequence of sequences .
7298	Calculate the probability of a profile .
7299	Evolve the model at time t .
7300	Calculate the log - likelihood of a sequence .
7301	Sets the branch length mode
7302	Filter the clock model .
7303	Plot root to tip_to_tip
7304	Resolve multiple merges
7305	Print the log - likelihood of the tree .
7306	add a coalescent model to the tree
7307	Find the best root of the tree
7308	Assign a tree based on parameters .
7309	Create a GTR model
7310	Read a VCF file .
7311	Reconstruct ancestral sequences .
7312	Calculate the FWHM .
7313	Create a Normal distribution function .
7314	Multiply multiple distributions .
7315	Assigns all node dates to the node
7316	Sets up the tree regression .
7317	Create a maximum likelihood tree .
7318	Calculate the likelihood of the tree .
7319	Convert all nodes to a human - readable date .
7320	Calculate the date uncertainty of a node
7321	Calculate the maximum probability of a node
7322	Returns the minimum value of an interpolation object
7323	Compute the median interpolation of an object .
7324	Convert datetime to numeric
7325	Create a DataFrame from a regression model .
7326	Connect to guacd server .
7327	Close the connection .
7328	Receive an instruction .
7329	Send data to the server .
7330	Send an instruction .
7331	Establish a handshake connection .
7332	Convert unicode to utf8
7333	Load an instruction .
7334	Encode an arg
7335	Encode the instruction .
7336	Return the URL for the given class .
7337	Get the URL of the current instance .
7338	Return the URL for the given class .
7339	Download a file .
7340	Return the parent object of this job .
7341	Prompt user for credentials .
7342	Login to solver .
7343	Show the user whoami .
7344	Print a user .
7345	Create a new QuerySet with the given filters .
7346	Return a copy of this query with only the specified range .
7347	Return a copy of this query with the specified position .
7348	Performs a search on a query .
7349	Process filters .
7350	Return the next page .
7351	Executes a query and returns the response .
7352	Makes a migration to a dataset .
7353	Entry point for solver .
7354	Download all files from a vault .
7355	Construct an instance from a dictionary of values .
7356	Redirect the user to the OAuth2 client .
7357	Make a request to the API .
7358	Retrieve the child object of this task .
7359	Cancel the task .
7360	Parse snpeff fields .
7361	Convert a row row to a dictionary .
7362	Get authentication credentials .
7363	Save configuration to file .
7364	Helper function to format a value
7365	Convert tabular data to a dictionary .
7366	Build a row from a list of cells .
7367	Build a single line of columns .
7368	Add cell attributes to a row .
7369	Format a table .
7370	Migrate this dataset to another dataset .
7371	Validate that a full path is valid .
7372	Upload files to remote
7373	Validate a vault path .
7374	Validates Solve API host .
7375	Add paths to the manifest .
7376	An iterator over the given records .
7377	Evaluate the expression
7378	Set the format_name .
7379	Register a new output format handler .
7380	Formats the given data using the given format .
7381	Wrapper for tabulate .
7382	Get the user config directory .
7383	Return a list of system config directories .
7384	Read the default config from the file .
7385	Read all config files
7386	Get user config file .
7387	List of system config files .
7388	A list of paths to the additional files .
7389	Write default config file .
7390	Read config files .
7391	Truncate a string .
7392	Replace all occurrences of a string in a string .
7393	Call all commands in sequence .
7394	Apply options to a command .
7395	Apply an option to a command .
7396	Initialize options .
7397	Run pp8radius .
7398	Run clean docs .
7399	Takes a list of tuples and returns a tuple of tuples .
7400	Helper function to format numbers .
7401	Format a row into a single row
7402	Create a vertical table
7403	Convert a list of strings to a table .
7404	Renders a template file .
7405	Check if type is numeric
7406	Check if data is a boolean value
7407	Check if the given type is a binary type .
7408	Generate a key using the given template .
7409	Generate a private key pair .
7410	Find all objects matching the given template .
7411	Insert an image into the current directory .
7412	Export a gene panel .
7413	Determine the first weekday of the given weekday .
7414	Repeat a given day .
7415	Repeatedly repeat the number of days between start and end_repeat .
7416	Increment the number of items in the batch .
7417	Handle a single chunk event .
7418	Generate list of variants for a given collaborator .
7419	Generate documentation for verified variants .
7420	Export the variant variants to a document .
7421	Update a user .
7422	List str variants for the given institute .
7423	Get information about a variant .
7424	Get information about a variant .
7425	View a variant .
7426	Export a clinvar .
7427	List cancer variants
7428	Upload a variant .
7429	Handle an evaluation .
7430	Handles a classification request
7431	Upload a new site panel .
7432	Download the verified Excel files .
7433	Return a mapping of HGNC IDs to gene names .
7434	Add incomplete Penetrance information
7435	Link genes to HGNC .
7436	Send request to MME server .
7437	Get a list of connected nodes .
7438	Get the coordinates of a cytoband coordinate .
7439	Determine the sub - category for a particular variant
7440	Get the length of a variant .
7441	Determine the end of a variant
7442	Parse a variant of a variant .
7443	Check connectivity of a Cytoband file .
7444	Update panel .
7445	Update a panel .
7446	Export a panel .
7447	Edit a gene .
7448	Upload a delivery report to a case .
7449	Get a dictionary of HPO terms matching the given query .
7450	List users whitelist .
7451	Build a phenotype object
7452	Get a single gene .
7453	Convert a query to a list of JSON objects .
7454	Display information about the current user .
7455	Show all transcripts .
7456	Return a list of events for a given day .
7457	Return a list of variants .
7458	Return a list of STRs for the given STRs .
7459	Return information about a variant variant .
7460	Fetch a variant s variant .
7461	Parse a variant .
7462	Return the header for a variant .
7463	Retrieve variant information from a list of genes .
7464	Get predictions from a list of genes .
7465	Generate a case case for a variant .
7466	Find a bai file .
7467	Return information about a particular variant .
7468	Parse a GA gene object .
7469	Convert a transcript object into a string .
7470	Get the end position of a variant .
7471	Determine the most common frequency .
7472	Convert clins to human readable representation .
7473	Return an ensembl link for a variant
7474	Generate a link to the cosmic link
7475	Generate beacon URL for a variant
7476	Generate an UCSC URL for a variant .
7477	Return human readable representation of spidex .
7478	Calculate expected inheritance for a variant
7479	Return a list of callers for a given variant
7480	List cancer variants .
7481	Export a clinvar .
7482	Return a dict containing the clinvar submission for a given variant .
7483	Return information about a variant .
7484	Submit a variant .
7485	Convert an evaluation object to an object .
7486	Generate a list of HGNC symbols from a stream .
7487	Create an Excel spreadsheet for verified variants .
7488	Export all genes to a bed format
7489	Parse a clinvar and return a list of session information
7490	Return a list of compound compounds
7491	Export all genes
7492	Build an Individual object
7493	Load variants for a case .
7494	Evaluate a case .
7495	List the views of the Scout view .
7496	Manage an institute .
7497	Update institute .
7498	Get file handle
7499	Calculate the net next step
7500	Returns the next and prev and prev and prev
7501	Validate year and month .
7502	Checks the current day of the given month .
7503	Parse case data .
7504	Add information about peddy .
7505	Parses a single sample
7506	Parse individual samples .
7507	Parses a config file into a dict
7508	Parse a ped file .
7509	Build an evaluation object .
7510	Export mitochondrial variants .
7511	Checks if the pathogenic terms are pathogenic
7512	Determine if there are any pathogenic terms .
7513	Determine if two bs are likely to be likely to be considered .
7514	Extracts the acmg_terms from the given acmg_terms .
7515	Add extra information to a variant
7516	Fetch variants from a case .
7517	Returns a list of all sanger variants .
7518	Get a variant object
7519	Returns a list of variants matching the given query .
7520	Return evidence for an institute .
7521	Get the causatives of an institute .
7522	Returns a list of possible cause variants for the given institute .
7523	Generator that iterates over the cause of a variant .
7524	Delete old variants for a case .
7525	Returns a list of all variants that have at least one variant .
7526	Get all variants of a case .
7527	Retrieve the VCF for a specific region .
7528	Returns a list of variants for a sample
7529	Get connection to MongoDB
7530	Return a list of submission objects from a variant form .
7531	Generate a header for the given submission objects .
7532	Generates a list of submission lines for the given submission object .
7533	Load all transcripts from the database .
7534	Create a gene panel .
7535	Build an exon object
7536	Delete a panel .
7537	Delete all indexes .
7538	Delete user from database .
7539	Delete genes collection .
7540	Delete exons .
7541	Delete a case .
7542	List individuals .
7543	Parses match objects
7544	Shows the given institute .
7545	Load a user from store
7546	Perform login .
7547	Builds an institute object .
7548	Delete an event .
7549	Save event to database .
7550	Return events for a particular variant .
7551	Get events for a user .
7552	Add a phenotype term to the case .
7553	Remove a phenotype from a case .
7554	Create a comment event .
7555	Parse genotypes for a variant .
7556	Check the coordinates of a given chromosome .
7557	Search HPO terms
7558	Export all transcripts .
7559	Load exons from the database
7560	Lists a region on a case .
7561	Return a queryset of all events in a particular month .
7562	Return a queryset of live events .
7563	Recursive function to parse requirements files .
7564	Return existing gene for the given panel .
7565	update a panel panel
7566	Create a new gene panel .
7567	Export a panel .
7568	Return information about an archive .
7569	Migrate a scout case to an archive .
7570	Migrate the case to an archive .
7571	Load a case .
7572	Load HGNC genes .
7573	View HPO terms
7574	Create a Flask application .
7575	Configure extensions .
7576	Register the blueprint .
7577	Configure coverage .
7578	Get all aliases for a given symbol
7579	Build a panel object .
7580	Export verified variants .
7581	Export variants .
7582	Generate a VCF entry from a variant object .
7583	Serve mongodb connection
7584	Generates an MD5 key from a list of strings .
7585	Initialize the application .
7586	Sets up the collection .
7587	Update the scout index .
7588	Setup the database .
7589	Run a demo setup .
7590	Setup the database .
7591	View institute information .
7592	Parse a list of genetic models .
7593	Show panel panels .
7594	Add institute object to database .
7595	Update an institute .
7596	Get institute object .
7597	Matches a date string
7598	Get a date from a string .
7599	Print HPO_Gene list
7600	Parse a rank score entry .
7601	Add user information .
7602	Check connection to MongoDB
7603	Initialize the application .
7604	Load a delivery report .
7605	Add user to database .
7606	Perform a pileup .
7607	Load exon file .
7608	Update the compounds for a given case .
7609	Add links to a gene object .
7610	List HGNC symbols
7611	Parse a single HGNC line
7612	Parse all HGNC genes
7613	Get an open clinvar submission for a given user and institute .
7614	Updates the submission id for the given clinvar_id .
7615	Returns the clinvar_id for the given submission id .
7616	Add variants and case data to the clinvar collection .
7617	Close the clinvar submission .
7618	Get all clinvar submissions for a given user .
7619	Delete a clinvar object
7620	Returns a dict of CLVs for a case .
7621	Parse a line of hpo output
7622	Show all available genes .
7623	Show a gene .
7624	Return a list of genes .
7625	Check if panels exist
7626	Load clinical SNV variants from a case .
7627	Load a Scout .
7628	Decorate a view function with a template name .
7629	Return an instance of the institute and case .
7630	Return a list of institutes for the given user .
7631	Get the HGNC ID for an HGNC symbol
7632	Update a panel .
7633	Drop all disease terms
7634	Load the disease terms from the omim database .
7635	Parse the variants of a variant .
7636	Parses the frequency of a variant
7637	Parse variants of variant
7638	View user s users .
7639	Build a HGNC Gene object
7640	Load a panel .
7641	Load an OMIM panel from the database .
7642	Return a list of genes that are present in a new panel
7643	Update the database version
7644	Add a gene panel to the database .
7645	Get a panel object .
7646	Delete a panel
7647	Get a gene panel by name .
7648	Get gene panel panels .
7649	Build a mapping between gene names to panels .
7650	Update a panel
7651	Add a pending panel to the database .
7652	Return a new panel with pending changes
7653	Return all clinical symbols in a case
7654	List cases .
7655	Emit an email record .
7656	Load the indexes from the database .
7657	Update the indexes in the database
7658	Drop all indexes
7659	Build a mongo query
7660	Build a MongoDB query .
7661	Performs a clins query based on clins .
7662	Add genomic coordinates to the mongo query
7663	Apply filters to a MongoDB query .
7664	Drops the entire database .
7665	Parses the data from a CSV stream
7666	Build clnsig object
7667	Load genes into database .
7668	Load a transcript .
7669	Load a list of exon objects into the database .
7670	Get a gene by its identifier
7671	Get the HGNC ID for a given HGNC symbol .
7672	Get genes with a given symbol
7673	Get all genes in the database
7674	Returns the number of genes in the given build
7675	Drop all the genes in the database .
7676	Drop the transcripts
7677	Drop the exons collection .
7678	Get all Ensembl transcripts
7679	Return a dict mapping HGNC symbol to HGNC symbol
7680	Find gene by symbol
7681	Get all genes by HGNC symbol
7682	Get all Ensembl genes
7683	Retrieve a HGNC symbol from the database .
7684	Add hgn_id field
7685	Build a dictionary of coding intervals .
7686	Update the omim panel .
7687	Show information about an institute .
7688	Fetch information about an institute .
7689	View for matching matches .
7690	Run matchmaker .
7691	Delete a case from MME .
7692	Return HTML for a case .
7693	Return a pdf of a case .
7694	Go to a case .
7695	Add phenotype items to a case .
7696	Handle case of phenotypes .
7697	Delete an event .
7698	View for the status of an institute .
7699	Assign a case to an institute .
7700	Get a list of HPO terms .
7701	Mark a variant as validation .
7702	Marks a case as a participant .
7703	Serve delivery report .
7704	Shows a case .
7705	Re - run a case .
7706	View for a research .
7707	Deliver a VCF to a file .
7708	Send multiqc data .
7709	Fetch data for a case .
7710	Return the report for the case report .
7711	Return the contents of the coverage report .
7712	Return the submission submissions for the given user .
7713	Export samples to Excel .
7714	Update case synopsis .
7715	Get diseases from HPO terms .
7716	Convert VCF to CCF .
7717	Perform multiqc analysis .
7718	Return a list of all variants in the given institute .
7719	Add a case to a Matchmaker .
7720	Sends delete request to Matchmaker API
7721	Get matches for the given institute .
7722	Perform a match on a case .
7723	Update genes for a build
7724	Parse the callers from a variant .
7725	Build a transcript object
7726	Load an institute into the database .
7727	Parse a variant of a variant .
7728	Create a case .
7729	Update a variant .
7730	Update variant rank .
7731	Update compound compounds
7732	Update compound objects .
7733	Update MongoDB compound variants
7734	Update cases for a given case .
7735	Load a variant into the database .
7736	Inserts a variant into the database .
7737	Load variants into the database .
7738	Create a case event .
7739	Share a case .
7740	Add diagnostic .
7741	Mark a case as checked .
7742	Event handler for ordering variant validation .
7743	Return a list of sanger s sanger order .
7744	Validate a variant .
7745	Mark a variant as causative .
7746	Create a dismiss variant for a variant .
7747	Set a variant for a variant .
7748	Parse the case ids
7749	Convert a simple ID to a simple ID
7750	Generate the MD5 key for a document .
7751	Convert HGNC IDs to HGNC IDs
7752	Get a variant ID from a variant object .
7753	Return the number of cases in institute .
7754	Update dynamic genes list .
7755	Fetch a case .
7756	Delete a case .
7757	Add a case object to the database .
7758	Replace a case .
7759	Update case id .
7760	Submit an evaluation .
7761	Get evaluations for a variant
7762	Parse a list of transcripts .
7763	Parses ensembl query results into dict
7764	Parse Ensembl Transcript request
7765	Parse an ensembl line into a dict .
7766	Parse an ensembl file .
7767	Parse ensembl exons
7768	Parse an ensembl exon request .
7769	Initialize logging .
7770	Parse an OIM line .
7771	Parse morbid output .
7772	Return set of phenotypes that are mapped to phenotypes .
7773	List phenotypes and phenotypes .
7774	Convert string to int
7775	Return a context of a month .
7776	Format calendar day .
7777	Format a month name .
7778	Add the popup information
7779	Parse panel information .
7780	Parse a single gene info
7781	Parse a list of genes .
7782	Parse a gene panel file .
7783	List diseases .
7784	Update HPO terms
7785	Display information about available users .
7786	Parse the conservations
7787	Parses the conservation of a variant
7788	Get basic information about the case .
7789	Return a list of cases grouped by status .
7790	Returns a HttpResponse with the given context .
7791	Gets the year and month and month .
7792	Check if a date is cancelled .
7793	Get a hpo term
7794	Search HPO terms .
7795	Get a term for a disease .
7796	Get disease terms .
7797	Load a disease from the database .
7798	Generate a list of gene IDs for a given term .
7799	Read an HDF5 file .
7800	Setup the frequency axis
7801	Setup the time axis .
7802	Load the filterbank .
7803	Compute the lmst relative to the GPS header .
7804	Blank the DC bin of the DC bin .
7805	show information about the header
7806	Calculate the extent
7807	Plots the waterfall from the data .
7808	Plot a time series .
7809	Write a filterbank to a file .
7810	Helper function to calibrate the bandpass .
7811	Convert data to coarse grayscale .
7812	Apply Mueller algorithm .
7813	Calculate differential flux and phase variables .
7814	Extracts the fracpols from a string
7815	r Write the waterfall data to a stream .
7816	Returns the index of the closest value in xarr
7817	Rebuild a data array .
7818	Unpack nbit data into numpy array .
7819	Calculate the difference between two waterfalls .
7820	Plots the Stokes Diode decomposition of the given waterfall .
7821	Plot the noise diode data for the given GDAL channel .
7822	Plots the phase offsets for the given GWF
7823	Open a file
7824	Setup selection range
7825	Calculate the size of the file .
7826	Calculate the number of integrations .
7827	Calculate channel start and end index
7828	Calculate the frequencies for the channel .
7829	Populate the timestamps .
7830	Populate the frequency array
7831	Determine the number of coarse channels for a file .
7832	Calculate the number of blobs in the dataset .
7833	Returns True if the data is heavy .
7834	Read data from file .
7835	Read all data from the file .
7836	Read a row from the file .
7837	Read data from the container .
7838	Update header .
7839	Print information about the file
7840	Writes the image to a file .
7841	Writes the object to HDF5 file .
7842	Write filter to hdf5 file .
7843	Determine the size of the blob .
7844	Detect the chunk dimensions .
7845	Grab data for plotting .
7846	Command line tool to create spectra
7847	Read the first header .
7848	Find the number of data blocks
7849	Print statistics .
7850	Plot a histogram .
7851	Generate a filterbank header .
7852	find the size of the header
7853	Command line tool for matchfils
7854	Create HDF5 raw file .
7855	Fold the data to the given time samples .
7856	Integrate a waterfall
7857	Calculate the calf flux
7858	Calculate the center of the frequency
7859	Calculate the F_DEM ratios for two detectors .
7860	Calculate the diode spectrum for a signal spectrum
7861	Calculate the Tsys
7862	Calibrates the fluxes of the target source and flux spectrum .
7863	Return the length of the header of a file .
7864	Return True if the file is a filterbank file .
7865	Replace datatype with new_value
7866	Generate a sigproc header string .
7867	Convert angle to signature
7868	Calculate the number of integers in a file .
7869	Convert to a dictionary .
7870	Create a subparser for a record type .
7871	Create a parser for the zonefile line
7872	Remove comments from a string .
7873	Add the default name to the given text
7874	Parse a single record
7875	Parse a list of JSON records .
7876	Parses a JSON zone file .
7877	Quote a field in a field
7878	Parse a schema string
7879	Convert a list of classes to a Python package .
7880	Return the source code for a given schema .
7881	Disable auto - store for auto - store
7882	Convert a record to a dictionary .
7883	Load a JSON serialized record from a dictionary .
7884	Deserialize a JSON string into a Record object .
7885	Add a schema to the registry .
7886	Retrieve the schema for the given record name .
7887	Return a dict representation of the field .
7888	Copy a mixin_cls into a class .
7889	Create a record from a class .
7890	Generate a schema dict .
7891	Get the root schema for a record .
7892	Generator for mr_reader
7893	Write output to a stream .
7894	Return an OrderedDict with the given key and value .
7895	Get a search result .
7896	Returns a filtered search result .
7897	Return a list of all entities in the resource .
7898	Create an entity from a href result .
7899	Find a quote for the given q
7900	Escape a string into a string .
7901	Generate an elementary rotation matrix .
7902	Construct a covariance matrix .
7903	Calculate the average irradiance for a given sky volume .
7904	calculate parallax error
7905	Calculate the magnitude of G .
7906	Return the magnitude error of G in G .
7907	Creates a plot of the magnitudes in the given arguments .
7908	Calculate the average number of Transits for a given beta .
7909	Return the angular distance between two points .
7910	Transform coordinates to cartesian coordinates .
7911	Transform sky coordinates to spherical coordinates .
7912	Transform covariance matrix to Jacobian .
7913	Returns the error scaling factor for the given observable .
7914	Creates a plot of the spectrum .
7915	Make a plot of sky values .
7916	Returns a function that returns the result of the given value .
7917	Decorator to wrap a method on a QQueryException
7918	Unquotes a value
7919	Apply a function to each item in the collection .
7920	Exclude elements that satisfy a given function .
7921	Return a new collection of items filtered by func .
7922	Return a new collection from this collection .
7923	Return a new collection of items from the collection .
7924	Return a new collection with all elements in the collection .
7925	Finds a node in the graph .
7926	Return the path to serach
7927	Iterate over a group .
7928	Iterate through a register descriptor .
7929	Return an event string .
7930	Builds a list of runs that can be used in a single register .
7931	Print results to output file .
7932	Print bottleneck results .
7933	Print the problem results .
7934	Clean the code .
7935	Round x to base .
7936	Sort indices by block_size .
7937	calculate cache access
7938	Calculate the number of cycles per page
7939	Analyze the kernel .
7940	Perform IAC analysis .
7941	Strip whitespace and whitespace from an Assembly .
7942	Strip all non - reference labels from the Assembly .
7943	Select the best matching block .
7944	Prompt user for user input .
7945	Print the userselect block .
7946	Inserts the marker lines into the assembly lines .
7947	Initiate an IAC assembly .
7948	Main entry point for run .
7949	Simulate the kernel .
7950	Generate a set of numbers between start and stop
7951	Get the last modification time of a directory .
7952	Checks the arguments passed to the command line .
7953	Main entry point .
7954	Entry point for pickle .
7955	Define a positive integer
7956	Convert multidimensional array to 1d array declaration .
7957	Transforms an array ref to 1d array ref .
7958	Recursively find all nodes in a given type .
7959	Force a function to be iterable .
7960	Check that all datatypes are allowed .
7961	Set a constant
7962	Substitute constants .
7963	Get array sizes .
7964	Calculate the offset of a variable .
7965	Remove duplicate accesses .
7966	Calculate the length of the iteration .
7967	Generator for loop stack .
7968	Returns an ordered list of free symbols .
7969	Compile sympy accesses
7970	Compute the relative distance between all variables .
7971	Convert global iterator to integer indices .
7972	Calculate the global iterator .
7973	Convert indices to global iterator .
7974	Returns an iterator over the global iteration iterator .
7975	Print kernel info .
7976	Print variables information .
7977	Print constants info .
7978	Print kernel code .
7979	Convert math AST to symbol
7980	Get the offsets for an array reference .
7981	Get the base name of an array .
7982	Get the index type of a loop .
7983	Builds a list of constants .
7984	Return array declarations .
7985	Return the list of loops in the kernel .
7986	Build array declarations .
7987	Find innermost outermost outermost loop .
7988	Build an array of array initialization variables .
7989	Builds a dummy statement .
7990	Build a kernel function declaration .
7991	Builds scalar declarations from kernel .
7992	Get kernel code .
7993	Build a kernel call .
7994	Get the main code .
7995	Analyze the kernel .
7996	Build the executable executable .
7997	Convert a string to a sympy integer .
7998	Get the identifier of the file .
7999	Returns the last modified datetime .
8000	Returns a CacheSimulator object representing the shared caches .
8001	Calculate the bandwidth of the benchmark .
8002	Get compiler and flags .
8003	Parse a perfctr event string
8004	Ensure that the range is not in the range
8005	Get header path
8006	Align a CL boundary to a CL boundary .
8007	Returns a list of load counts
8008	Returns a list of hits
8009	Returns a list of miss counts .
8010	Returns list of stores in the machine
8011	Returns a list of evicts .
8012	Get information about the memory hierarchy .
8013	Context manager to fix environment variables .
8014	Configure the argument parser .
8015	Print the results to a file .
8016	Parse the description .
8017	Schedule a retry .
8018	Build a purchase item .
8019	Record a purchase in Sailthru .
8020	Retrieve the course data for a given course id
8021	Retrieves the course content from the catalog .
8022	Update the unenrolled list of unenrolled users
8023	Send a course refund notification .
8024	Sends an offer assignment notification .
8025	Return a dictionary of logging configuration .
8026	Retry the order of an order .
8027	Fulfill an order .
8028	Returns a SailthruClient object .
8029	Returns the value associated with the given key .
8030	Set the value for the given key .
8031	Get the value of a specific setting .
8032	Get the filename of an override .
8033	Return the value of the key in a dictionary
8034	Get EnergyPlus version .
8035	Return a dictionary of FileRefs .
8036	Load data from json data .
8037	Returns a list of all external files
8038	Set default values for all tables .
8039	Prepare extensible list for extensible fields .
8040	Returns the extended name for the given index .
8041	Dictionary of external references .
8042	Get the value of a column .
8043	Update value in _data_ in_data .
8044	Update a record
8045	Populate self . fields with default values .
8046	Add new fields to this record .
8047	Remove a value from the list
8048	Insert value at given index .
8049	Deletes a record
8050	Register a record hook .
8051	Register a link
8052	Create a regular expression .
8053	Return the remaining duration for the given time .
8054	Serialize the event to a dictionary .
8055	Perform a HTTP request
8056	Get a list of all available services .
8057	Create a directory .
8058	Configure a service .
8059	Register a CA to the server .
8060	Set recording state .
8061	update the status of an event
8062	Update agent state .
8063	Return the configuration file location .
8064	Update the configuration .
8065	Check if we are running
8066	Initialize logging .
8067	Capture preview images .
8068	Serve an image .
8069	Run multiple processes .
8070	Parse an IIC calendar into a list of events .
8071	Get the schedule for the service .
8072	Main control loop .
8073	Main control loop .
8074	Make an error response
8075	Creates a json response .
8076	Return the internal state of the service .
8077	Get all upcoming events .
8078	Get an event
8079	Delete an event
8080	Modify an event by id
8081	Parse a string of configuration parameters .
8082	Process an incoming event .
8083	Start capture
8084	Returns a fragment with javascript and CSS .
8085	Return a list of resources .
8086	Return a dict representation of the resource .
8087	Create a Fragment from a dict
8088	Add the content to the message .
8089	Add a resource to the fragment .
8090	Add a resource url .
8091	Initialize the js_init function
8092	Convert all resources to HTML .
8093	Convert a resource to HTML .
8094	Handle GET requests .
8095	Returns a HttpResponse with the given fragment .
8096	Render a fragment to a standalone HTML fragment .
8097	Calculate power flow distribution
8098	Convert a list of values to one dimension .
8099	Lookup the values in the error table .
8100	Compute hypotheses for a single chromosome .
8101	Generate final error table .
8102	Extract summary errors from a DataFrame
8103	Compute error statistics .
8104	Find the cutoff cutoff .
8105	Score an XGBoost .
8106	Infer peptideforms .
8107	Infer peptide information from input file .
8108	Run inference on a protein file .
8109	Subsample an ow file .
8110	Reduce infile to outfile .
8111	Backpropagate to outfile .
8112	Filter sqmass files
8113	Get a group by its ID .
8114	Create a new group .
8115	Delete a group .
8116	Get the members of a group .
8117	Update the members of a group .
8118	Get the effective member count .
8119	Check if a group is effective
8120	Modify Sphinx configuration .
8121	Create a dataset .
8122	Decrypt a key
8123	Return the stdin object for this command .
8124	Get the stdout of the command .
8125	Get stderr of stderr .
8126	Get the output of the debug process .
8127	Context manager for reading stdin .
8128	Context manager for reading stdout .
8129	Context manager for yielding stderr streams .
8130	Context manager that yields stdout and stderr
8131	List empty accounts .
8132	List empty container contents .
8133	A decorator that handles stdout .
8134	A decorator that converts a message to a file - like object
8135	Log an error message .
8136	Print help for this option .
8137	Print the usage of the parser .
8138	Print the version of the program .
8139	Perform a request
8140	Create a new account .
8141	Delete an account .
8142	Puts a container into a container .
8143	Returns a HEAD object .
8144	Gets an object from a container .
8145	Puts an object into a container .
8146	Creates an object in a container .
8147	Resolve an option in the environment .
8148	Return a copy of this context .
8149	Write headers to file .
8150	Manage authorization information .
8151	Generate a request URL
8152	Quote a string .
8153	Fetch the contents of a container
8154	Get a new client .
8155	Yield data from stdin .
8156	Decrypts data from stdin to stdin .
8157	Upload a directory structure
8158	Put account
8159	Upload a container
8160	Returns the body of the manifest .
8161	Create a prefix for the given path .
8162	Get a temporary URL
8163	Display information about an X - ID .
8164	print help for a command
8165	Determine if there are more data
8166	Encrypt a key .
8167	Get the status of a repository .
8168	Get a single pull request
8169	Get pull requests .
8170	Set the slug title as published
8171	Returns a list of SliderItems
8172	This view is used to render a slide .
8173	Acquire the read lock .
8174	Release the number of reader threads .
8175	Acquire writer lock .
8176	Add a task to the registry .
8177	Removes a task from the registry .
8178	Get a task by its ID .
8179	Return a list of tasks sorted by their id .
8180	Convert object to dict
8181	Create a Task instance from a dictionary .
8182	Execute a perceval job .
8183	Initialize the Archive Manager .
8184	Execute the backend .
8185	Execute the backend .
8186	Create an index .
8187	Create a mapping .
8188	JSON encoder .
8189	Write items to a writer .
8190	Add a task .
8191	Removes a task from the scheduler .
8192	Yield items from the queue
8193	Validate the arguments .
8194	Parse archive arguments .
8195	Perform a single job
8196	Schedule a job task .
8197	Cancel a job .
8198	Run the listener
8199	Listen for messages to the publisher
8200	Schedule the scheduler .
8201	Schedules a task .
8202	Cancel a task .
8203	Handle a successful job .
8204	Handle a failed job .
8205	Build the arguments for a task .
8206	Get the contents of a secret
8207	Register a view .
8208	Decorator for registering a view .
8209	Overrides Django s reverse_action .
8210	Get the name of the view .
8211	Get the version number .
8212	Resolve alias .
8213	Get the appropriate engine for a given scheme .
8214	Parses a path and returns the database and schema .
8215	Return database configuration from a database URL .
8216	Parse a database URL .
8217	Create a new user .
8218	Returns a list of users .
8219	Create password .
8220	Add the view_field to the view .
8221	Parse a boolean value .
8222	Parse value into an integer .
8223	Returns a parser for the given type .
8224	Get django settings from environment variables .
8225	Create a dict from a model .
8226	Encode a base64 encoded string .
8227	Create field from field info .
8228	Create a validator from a dict .
8229	Compute the cartesian product of a parameter dictionary .
8230	Find unique points .
8231	Change logging parameters .
8232	Decorator for logging .
8233	Create directories for given filename .
8234	Get a list of strings from an AST
8235	Rename a log file .
8236	Set the logger for this instance .
8237	Extract variables from a trajectory .
8238	Show progress bar .
8239	Replace the arguments in a parser .
8240	Convert a parser object to a string .
8241	Find the options in the given parser .
8242	Takes a dictionary and returns a copy of the multiprocessing dictionary
8243	Check if log config is set
8244	Parse the log file .
8245	Recursively walks the log config dictionary
8246	Create logging handlers .
8247	Cleanup all tools .
8248	Start the stdout .
8249	Write buffer to stream .
8250	Return True if results are equal .
8251	Compare two parameters
8252	Decorator to run a function on a traj .
8253	Mark a function as deprecated .
8254	Decorator to specify mutually exclusive keyword arguments .
8255	Decorator to mark deprecated keyword arguments .
8256	Decorator to retry function .
8257	Decorator to add prefix to a class .
8258	Add common parameters to a file .
8259	Run the network
8260	Compute the Euler scheme for the given difference function .
8261	Add parameters to f_parameters .
8262	Calculate the difference of a value array .
8263	Helper function to create a storage object .
8264	Creates a storage service .
8265	Add parameters to the f .
8266	Compute the difference between two values
8267	Compact the given HDF5 file .
8268	Check if a group is in a group .
8269	Build model eqs .
8270	Run pre - build .
8271	Build the model .
8272	Build the model .
8273	Pre - build connectivity .
8274	Build the network .
8275	Add parameters to the model .
8276	Compute the FAN factor for a particular neuron .
8277	Compute the mean FANano factor .
8278	Runs the mean fano factor over all spikes .
8279	Add monitors to the network .
8280	Add monitors to the network .
8281	Make a folder for the plot
8282	Plot result .
8283	Print the graph and monitor the VRIAN output .
8284	Analyze the network .
8285	Get batch from command line
8286	Explore a batch .
8287	NodeVars object
8288	Get the node function
8289	Renames the object .
8290	Set the branch details .
8291	Convert a node to a protobuf message .
8292	helper function to remove a node from the tree
8293	Delete a node
8294	Removes a node from the tree .
8295	Removes child nodes from the tree .
8296	Translate a shortcut name into a boolean
8297	Add prefixes to the tree .
8298	Determine the type of a sub - tree .
8299	Create a generic node .
8300	Walk the tree and create a new group .
8301	Create a link pointing to the root node .
8302	Check that the names are valid .
8303	Creates a new group
8304	Create or update an instance of the given type .
8305	Sets the detailed details for a given node .
8306	Iterate over all nodes .
8307	Create an iterator for the children of a node .
8308	Depth - first search .
8309	Fast search algorithm .
8310	Search for a node in the tree .
8311	Helper method for backwards search .
8312	Gets the children of this node .
8313	Add a group from the storage .
8314	Add a leaf node from the storage .
8315	Returns the list of directories of the directory .
8316	Dump the tree
8317	Return the parent of this item
8318	Add a new group .
8319	Add a link to the network .
8320	Remove a link .
8321	Add a leaf node to the network .
8322	Remove a child from the parent .
8323	Remove a child from this group .
8324	Returns True if the object contains the given object
8325	Returns the default value for a file .
8326	returns the children
8327	returns the groups
8328	Returns the list of leaves .
8329	get the links
8330	Store a child of the current trajectory .
8331	Saves the current trajectory .
8332	Fetches a child by name .
8333	Load this trajectory .
8334	Adds a parameter group .
8335	Add a parameter .
8336	Add a result group .
8337	Add a result .
8338	Adds a derived parameter group .
8339	Add a derived parameter .
8340	Add a configuration group .
8341	Add a configuration group .
8342	Evaluate the maximum fitness .
8343	Add configuration variables for a commit .
8344	Make a git commit .
8345	Flatten a nested dictionary .
8346	Convert a nested dictionary into nested dictionaries .
8347	Print a progressbar .
8348	Get the argspec for a function
8349	Get keyword arguments for a function .
8350	Format timestamp .
8351	Create a TCP port from a given port .
8352	Create a directory structure .
8353	Reset the interval .
8354	Get the remaining time .
8355	convert to dict
8356	Remove a key from annotations
8357	convert the annotation to a string
8358	Make a result from a result .
8359	Make a shared result .
8360	Create a new shared data object .
8361	Internal method to request data .
8362	Retrieves the data node .
8363	Return True if the item supports this item .
8364	Create a shared data store .
8365	Manage the data in a trajectory .
8366	Lock a lock .
8367	Send a shutdown signal to the server .
8368	Terminate the context .
8369	Start the client .
8370	Send a request to the server .
8371	Acquire lock .
8372	Listen for requests .
8373	Put data into queue
8374	Detect if the connection is a fork .
8375	Handle a data message .
8376	Main thread .
8377	Receive data from the queue .
8378	Read data from the server .
8379	Acquire and release the given object .
8380	Store msg_to_store
8381	Stores references in the storage .
8382	Decorator that parses the config file .
8383	Collects all options from the given section .
8384	Collect all configuration values from the file .
8385	Interpret the configuration .
8386	Add parameters to the given file .
8387	Convert a rule number to binary form .
8388	Make an initial state .
8389	Plots a pattern .
8390	Compute the cellular automaton using the given rule number .
8391	Simulate all cellular patterns .
8392	Signal a new update .
8393	The overview group .
8394	Actually load a message .
8395	Stores the given message .
8396	Loads messages from an iterable
8397	Check the HDF5 configuration for the given traj .
8398	Store messages in an iterable
8399	Periodically close the internal routine .
8400	Extracts information from a file .
8401	Backup a trajectory .
8402	Read out a row of columns from a trj output row .
8403	Update the MRF5 file if necessary .
8404	Load the metadata of the trj file .
8405	Load a sub - branch .
8406	Check that the current trajectory has the correct version .
8407	Fills the run table for the given traj .
8408	Load the experiment .
8409	Store the explorations table .
8410	Prepare the overview table
8411	Stores a trajectory .
8412	Stores a sub - branch .
8413	Create a leaf node .
8414	Recursively load nodes from a directory .
8415	Store nodes in HDF5
8416	Overrides _allstore_parameter_table .
8417	Get a table or create a table if needed .
8418	Get a node by name .
8419	Sets all attributes of the given data item .
8420	Reconstruct data type from hdf5 node
8421	Add or modify a row .
8422	Recursively insert values into a row .
8423	Return a dictionary containing the values for all columns in the database .
8424	Truncate a string to a maximum length .
8425	Create a new group and return it .
8426	Helper function to create a new group .
8427	Store annotations in the HDF5 file
8428	Loads annotations into an item .
8429	Store a trapezoid group .
8430	Loads a group into the graph .
8431	Load all annotations from an HDF5 file
8432	Extract missing flags from a dictionary .
8433	Add a summary to the overview table .
8434	Add the metadata table to the database .
8435	Store data from a dictionary .
8436	Stores the value of the object .
8437	Write data into a shared array .
8438	Write a shared table .
8439	Write dictionary to HDF5 group .
8440	Write pandas data to a group .
8441	Helper function to write data into an array .
8442	Write data into an array .
8443	Delete a link .
8444	Helper function for _all_parameter .
8445	Internal method to write the data into a pytable .
8446	Create a pytables description
8447	Get a table column from a parameter .
8448	Get the maximum length of a string .
8449	Recursively loads into a dictionary .
8450	Read the contents of a Pbject into a dictionary .
8451	Reads shared data .
8452	Read data from a table or group .
8453	Read an array .
8454	Load a trajectory .
8455	Make a set name from a set idx .
8456	Set property values .
8457	r Add dynamic imports to self . _dynamic_import .
8458	Set the name of the run .
8459	Iterate over a trajectory .
8460	Shrink the trajectory .
8461	Add a parameter to the trajectory .
8462	Defines a preset parameter .
8463	Lock the experiment with the default values .
8464	Fetches a single value from the run .
8465	Check if a run is completed .
8466	Remove expanded parameters from disk .
8467	Creates a copy of the trajectory
8468	Explore the build_dict .
8469	Update the current run information .
8470	Add information about a single run .
8471	Lock all parameters .
8472	Lock all derived parameters
8473	Finalize the run .
8474	Loads the skeleton .
8475	Wrapper for load method .
8476	Store the trajectory into a backup file .
8477	Create a list of wildcards .
8478	Merge multiple trajectories into one .
8479	Merge two trajectories into one .
8480	Rename a full name in the trajectory .
8481	Merge derived parameters from other .
8482	Merge potential links from other .
8483	Merge config data from other .
8484	Merge two trajectories .
8485	Merge the results from the other .
8486	Migrate trajectory .
8487	Store the current trajectory .
8488	Restore default values
8489	Set the parameter access to the given index .
8490	Make a single run
8491	Return a list of run names .
8492	Return the information about the run .
8493	Given a list of parameter names return a boolean index where each parameter matches the predicate .
8494	Starts the trajectory .
8495	Finalize run .
8496	Set the start information for the current run .
8497	Mark the run as finished .
8498	Wrapper for _construct_instance .
8499	Returns the parameter dictionary
8500	Finalize the run .
8501	Returns the configuration dictionary .
8502	Returns the results as a dictionary .
8503	Store items in a trajectory .
8504	Fetch items from the network .
8505	Remove an item from the storage .
8506	Delete links from an iterator .
8507	remove child node
8508	Removes all items from the network .
8509	Handles a single run .
8510	Wrapper for _frozen_run .
8511	Configure the pool .
8512	Configure the frozen pool .
8513	Process a single run .
8514	Configures SCOOP .
8515	Runs a single run .
8516	Configure logging system .
8517	Configure the system niceness .
8518	Handles SIGINT handling .
8519	Run a single run function .
8520	Wrap sigint logging .
8521	Load a class from a string .
8522	Creates a new class based on the given class name .
8523	Returns the length of the parameter
8524	Returns a string representation of the evaluation .
8525	Determine whether two values are equal
8526	Return the range of the parameter .
8527	Explores a parameter range .
8528	Expand the parameter list into this parameter list .
8529	Check that the values are of the same type .
8530	Return the object as a dictionary .
8531	Load the parameter from a dictionary
8532	Loads the parameter from a dictionary
8533	Check if two values are equal
8534	Returns True if the given data is a sparse matrix .
8535	Serialize a sparse matrix .
8536	Build a tuple of names for a given name .
8537	Reconstruct a sparse matrix
8538	Load the parameter from a dictionary .
8539	Store data into a dictionary
8540	Load the parameter from a dictionary
8541	Convert a key to an integer
8542	Return the value as a string .
8543	Convert data to a dictionary
8544	Set a positional value .
8545	Get value from result .
8546	Set a single value .
8547	Returns True if the item supports a sparse parameter .
8548	Serialize the result into a dictionary .
8549	Load data from a dictionary .
8550	Set a single result .
8551	Serialize the result to a dictionary .
8552	Load data from a dictionary .
8553	Merge all files in folder
8554	Upload file to Sftp server .
8555	Download a file from Sftp
8556	Creates a session for the given user passwd .
8557	Merge trajectories .
8558	start the jobs
8559	Multiply a vector
8560	Run the Euler integration
8561	Post - processing function to postprocessing .
8562	Add parameters to neuron .
8563	Add exploration information to the experiment .
8564	Execute pre - run preparation for a network
8565	Execute a single network run
8566	Extracts the subruns of the duration .
8567	Execute a single network run
8568	Add parameters of a trajectory .
8569	Run the network
8570	Run the network .
8571	Run the network
8572	Create a filename for the experiment .
8573	Return the next element in the chain .
8574	Merge all files in folder with the given extension .
8575	Handles SIGINT
8576	Read configuration from a file .
8577	Request authorization code .
8578	Request tokens from Ecobee .
8579	Refresh access token .
8580	Get thermostat list .
8581	Write tokens to config file .
8582	Set hvac mode
8583	Set the fan minimum on time .
8584	Set hold temperature
8585	Set the hold hold
8586	Delete vacation vacation
8587	Resume a program
8588	Send a message to the thermostat
8589	Set the humidity of the specified index .
8590	Generate a random delay .
8591	generate a timeout resend
8592	Generate timeout for a lease
8593	Generate a new expiration time .
8594	Return self as a dict
8595	Reset attributes .
8596	Get the timeout for a given state
8597	Set the timeout
8598	Send a discover packet .
8599	Select an offer .
8600	Send a request to the FSM .
8601	Set the timeout timeouts
8602	Process incoming packet .
8603	Process a received NAK packet .
8604	Set initial state .
8605	Set the lease
8606	Set a new lease
8607	Set the binding .
8608	Set end state
8609	Set the state of an error
8610	Called when a timeout is received .
8611	Called when a request is received .
8612	Called when the request has been renewed .
8613	Called when a request is received .
8614	Handle an offer packet .
8615	Handle an ACK packet .
8616	Handle a NAK request .
8617	Handle an ACK packet .
8618	Handle a NAK .
8619	Handle an ACK .
8620	Handle a NAK .
8621	Called when the client is renewed .
8622	Set a query parameter .
8623	Return a new QuerySet with the given name and value .
8624	Return a copy of this query .
8625	Get nagios status
8626	Create output .
8627	Main entry point .
8628	Validate a message .
8629	Read tdms file
8630	This function is used to add the transformation to the chain .
8631	Convert tdms to fcs
8632	Determine whether two files are equal
8633	Create a new patch .
8634	Delete the next patch
8635	Delete a patch .
8636	Checks if filename is in a patch
8637	Backup a file
8638	Add a file to the repository .
8639	Run the command .
8640	Create the directory if it doesn t exist .
8641	Copies this directory to dest .
8642	Link to file .
8643	Copies the file to dest .
8644	Return the directory of the file .
8645	Backup a file in dest_dir
8646	Refresh the current index .
8647	Unapply a patch .
8648	Unapply the top patch
8649	Remove all applied patches
8650	Applies a patch .
8651	Apply the next patch to the series .
8652	Applies all patches to the series .
8653	Read the series file .
8654	Save the series to disk .
8655	Add a patch object
8656	Insert a list of patches into the document .
8657	Add a list of patches to the document .
8658	Remove a patch .
8659	Return a list of patches after a given patch .
8660	Returns a list of patches before the given patch .
8661	Return a list of patches that have the given patch .
8662	Replace a patch .
8663	Create the repository .
8664	Check that the version file is supported .
8665	Add the argument group to the given parser .
8666	Add the argument to a parser .
8667	Add this command to subparsers .
8668	Set arguments for subparsers .
8669	Add subparsers to the given parser .
8670	Verify that a file is in the patch
8671	Check if a file is modified .
8672	Revert a file
8673	Import a patch .
8674	Import patches .
8675	Add a way
8676	Yield node ids
8677	Add a node
8678	Build a route object .
8679	Create route_short_name from a relation .
8680	Get the agency ID for a relation .
8681	Process a file .
8682	Add a relation to the cache .
8683	Create dummy data .
8684	Patch agencies .
8685	Create dummy trips for a trip .
8686	Write data to a zip file .
8687	Writes all buffered files to destination .
8688	Build agency object .
8689	Extract stops .
8690	Generate shapes for a relation .
8691	Returns a list of supported versions .
8692	Send an APU to the device .
8693	Authenticate devices .
8694	Register an enrollment .
8695	Authenticate with U2F .
8696	Register a U2F device .
8697	Convert unicode strings to strings
8698	Decorator to wrap a function to be wrapped in the client .
8699	Wrap all methods in a class .
8700	Check if the filepath matches the pattern .
8701	Get email address .
8702	Get entry for given entry
8703	Convert markdown to reST
8704	Starts a WSGI server .
8705	Record an error on the host .
8706	Convert a URL to an image .
8707	Convert an image to an Image object .
8708	Decorator to validate image
8709	Check if the image is large enough .
8710	Check that the given width is greater than the width .
8711	Check that the given height is greater than the height .
8712	Returns the category instance for the given item .
8713	Parses a value into an integer .
8714	Yield items from XML source .
8715	Save an error .
8716	Parses the fields from the database
8717	Parse an item into a dictionary .
8718	Get an instance of the model .
8719	Save an item .
8720	Download a file from a URL .
8721	Load the source file .
8722	Yields the items in the CSV file .
8723	Sets the allowed network access settings .
8724	Run a command .
8725	Add files to this container .
8726	Add a file to the working directory .
8727	Get all enrollments for a given course .
8728	Gets the list of enrollments for the given course .
8729	Get all enrollments for a section .
8730	Gets the list of enrollments for a given section .
8731	Returns a list of enrollments for the given regid .
8732	Enrollment for a user .
8733	Get a list of all roles in the account .
8734	Gets all roles in an account
8735	Gets the effective roles in the given account .
8736	Get a single role .
8737	Gets a role by ID .
8738	Get a specific course .
8739	Gets a course by its ID .
8740	Get a list of courses in an account .
8741	Gets a list of courses in a SIS account
8742	Get all courses in a given account
8743	Gets the published courses in a SIS account .
8744	Returns a list of courses for a regid .
8745	Create a new course .
8746	Update an SIS course s course .
8747	Get activity activity information .
8748	Get the grades for an account .
8749	Get statistics for an account .
8750	Returns activity by sis_id
8751	Returns a list of assignments by sis_id
8752	Returns a list of student summaries by sis_id .
8753	Gets the student activity for the given user and user .
8754	Gets the student messages for the given user .
8755	Get all external tools in an account .
8756	Get all external tools in a course .
8757	Create external tools .
8758	Update external tools .
8759	Deletes an external tool .
8760	Check that all required parameters are set .
8761	Get a user s profile .
8762	Returns a list of users for the given course .
8763	Gets the list of users associated with a SIS course id .
8764	Creates a user .
8765	Get user logs
8766	Updates a user login .
8767	Extract next page from response header .
8768	Retrieves the resource url
8769	Get resource URL .
8770	Get a resource URL .
8771	Perform a PUT request
8772	Perform a POST request
8773	Delete a resource .
8774	Get CanvasAdmin instance .
8775	Create an administrator .
8776	Creates an administrator in the given SIS account .
8777	Delete an admin account .
8778	Deletes a user by its ID .
8779	Create a grading standard for the given course .
8780	Get a specific section .
8781	Gets a section by its ID .
8782	Get all the sections in a course .
8783	Gets the sections in a course .
8784	Get a list of sections in the course .
8785	Gets the sections with the given course id .
8786	Create a new section .
8787	Update a section .
8788	Get quizzes for the given course .
8789	Returns a Canvas Account object .
8790	Get a list of sub accounts for the given account .
8791	Update an account .
8792	Updates the SIS ID for the given account .
8793	Gets the authorization settings for the given account .
8794	Updates the authorization settings for an account .
8795	Returns a term by sis_id
8796	Imports a CSV .
8797	Imports a directory into SIS .
8798	Gets the status of a SIS import .
8799	Build the zip archive .
8800	Get all assignments for the given course .
8801	Update an existing assignment .
8802	Get the available report types .
8803	Get a list of reports by the given type .
8804	Create a report .
8805	Create a new course provisioning report .
8806	Creates a SIS export report for the given account .
8807	Creates a report for unused courses .
8808	Gets data for a given report .
8809	Gets the status of a report .
8810	Deletes a report .
8811	Move all detections in a label .
8812	Flip detections .
8813	Convert an object to a dictionary .
8814	Get config from inplace .
8815	Return empty value .
8816	Parses a template and returns a dictionary of keyword arguments .
8817	Create a collection of metrics .
8818	Set up logging to stderr .
8819	Configure the registry .
8820	Create a dictionary with the given metrics .
8821	Get a metric with the given name and labels .
8822	Renders the home page .
8823	Handle the metrics request .
8824	Queries Wolfram API .
8825	Fix http_client . HTTPMessage .
8826	Query WolframAlpha API .
8827	Returns an iterator over the assumptions .
8828	Iterate over the results of this task
8829	Encode the given data .
8830	Make a request to the API .
8831	Send a GET request to the API .
8832	Perform a DELETE request .
8833	Makes a PUT request .
8834	Send a POST request to a URL .
8835	Process a query .
8836	Groups sentences into sentences .
8837	Disambiguate a PDF document .
8838	Disambiguate a query .
8839	Segment a text .
8840	Recognize a text .
8841	Get information about a concept .
8842	Fit the model .
8843	Returns the accuracy score for each feature .
8844	Fit the MDR model to the MDR grid .
8845	Fit the model and return the predictions
8846	Score a set of features and return the accuracy score .
8847	Fit the model to a feature map .
8848	Apply the transformation to features .
8849	Compute the score of the model .
8850	Wrapper for model prediction .
8851	Generates n - way models for a given model instance .
8852	Plots a grid of model instances
8853	Get the config values from the given app .
8854	Get a configuration value .
8855	Convert a list of members to a vector .
8856	Convert a list of members to a vector .
8857	Compile the given file .
8858	Evaluates the given stream .
8859	Evaluate the given string .
8860	Bootstrap repl module .
8861	Runs the CLI .
8862	Create a multi - function dispatch function .
8863	Add method to mapper .
8864	Add a method to the MultiFunction .
8865	Return the method for the given key .
8866	Remove method from mmap .
8867	Removes a method by key .
8868	Return True if v is a macro .
8869	Determine the location of the line .
8870	Decorator for parsing a form .
8871	Raises a ParseException if the node is not present .
8872	Recursively check if the node is tail .
8873	Resolve a bare symbol .
8874	Resolve a dotted form .
8875	Parse a form into an AST .
8876	Whether or not the shadow variable should be ignored .
8877	Put symbol into current scope
8878	Convert a list of dictionaries into a lrepr representation .
8879	Like lrepr .
8880	Return a literal representation of the given object .
8881	Fallback implementation for lrepr .
8882	Ensure that location is missing .
8883	Compile and compile the wrapped function form .
8884	Compile a module .
8885	Compile a module into a module .
8886	Compile bytecode into module .
8887	Extract a sequence from an iterable .
8888	Makes a string from a string .
8889	Removes underscores from a string .
8890	Returns a Fraction instance
8891	Get a logging handler .
8892	Create a map from kvs .
8893	Split a collection into n tuples .
8894	Wrap a function with line numbers and column numbers .
8895	Read a namespace from the context .
8896	Read a collection .
8897	Read a list .
8898	Reads a vector .
8899	Read a set .
8900	Read a map .
8901	Read a string from a string .
8902	Read a symbol .
8903	Read a keyword .
8904	Read metadata from a string .
8905	Read a function body .
8906	Read a quoted string .
8907	Expand a list of unquoted forms .
8908	Process syntax quoting .
8909	Read a lexicographical form .
8910	Read unquoted comment .
8911	Read Deref form .
8912	Read a single character .
8913	Read a regular expression from a string .
8914	Read a LANG reader .
8915	Read the next consuming comment .
8916	Read the next token from the reader .
8917	Read an expression from a stream .
8918	Read a string from a string .
8919	Read a file .
8920	Update the current location .
8921	Removes an index from the stack .
8922	Get the next token from the stream .
8923	Create a bytecode bytecode .
8924	Parse the bytecode cache .
8925	Return the full path to the given path .
8926	If the meta_path is not already imported import it
8927	Find a module spec in the given path .
8928	Execute the given cached module .
8929	Execute the given module .
8930	Compile a module into the base namespace .
8931	Create a symbol
8932	Complete a string of keywords .
8933	Get or create a Keyap from the cache .
8934	Obtain a keyword .
8935	Chain gennedPy AST and nodes .
8936	Load an attribute .
8937	Decorator for simple AST generation .
8938	Generate a collection of AST nodes from a collection of form elements .
8939	Add lineno and col_offset to a Python ast .
8940	Decorator for generating pygments . ast . ast . ast
8941	Decorator for generating py AST nodes .
8942	Check if the variable is dynamic
8943	Return True if the variable is redefable .
8944	Convert an expression to an expression .
8945	Create a function definition .
8946	Determine whether a def symbol should be bound or not .
8947	Convert a DO node to a Python AST .
8948	Generate a name from a string .
8949	Convert a list of arguments to an AST .
8950	Converts a single function node to a Python AST .
8951	Convert a node to a Python AST .
8952	Convert a function node to a Python AST .
8953	Convert an AST node to Python AST .
8954	Convert an IF node to an AST .
8955	Convert an Invoke node to a Python AST .
8956	Convert a quote node to Python AST .
8957	Loop over recurs .
8958	Convert recur to Python AST .
8959	Convert SETANG node to python AST .
8960	Convert a throw node to a Python AST .
8961	Convert a Try node to Python AST .
8962	Convert local node to ast . AST .
8963	Convert a variable name to an AST .
8964	Convert a var node to a Python AST node .
8965	Convert an Interop node to an ast node .
8966	Convert a Python class node to a Python AST .
8967	Convert an AST node to a Python AST .
8968	Convert a constant value to a Python AST .
8969	Convert a list of literals to Python AST AST .
8970	Generate Python AST for a given lisp node .
8971	Yield basic import statements .
8972	Return ast . import from module .
8973	Create an ast . namespace .
8974	Create a set from a set of members .
8975	Return a set of members .
8976	Return ast . ExceptHandler as an ast . Except handler .
8977	Return node s value .
8978	Return astroid . FunctionDef as AST .
8979	Visitor for While node .
8980	Visitor for a Try node .
8981	Create a new module .
8982	Return the first element of a sequence or None .
8983	Return the first element of o .
8984	Find the nth part of a collection .
8985	Return the nth next next nth next sequence .
8986	Concatenate o .
8987	Convert an object to a sequence .
8988	Concatenate multiple sequences .
8989	Create an associative map .
8990	Return the conjugate of xs .
8991	Partial partial function .
8992	Return a dereferenced object .
8993	Compare two strings .
8994	Divide x and y
8995	Sort a collection of elements .
8996	Check if a collection contains a key .
8997	Get a value from a dictionary .
8998	Convert a dictionary to a Lisp object .
8999	Convert an object to a Python object .
9000	Return a string representation of a lobj object .
9001	Convert arguments to a list of Python objects .
9002	Decorator for _TrampolineArgs .
9003	Creates a decorator with the given attributes .
9004	Wrap a function with the given meta .
9005	Decorator to mark a function as a function .
9006	Resolve an alias for a symbol .
9007	Resolve a variable
9008	Add generated_python variable to the current namespace .
9009	Bootstrap a dynamic variable .
9010	Interns a variable .
9011	Intern an unbound variable .
9012	Find a variable in ns_sym
9013	Find a variable in a symbol .
9014	Find a symbol by its qualified name
9015	Add default import for module .
9016	Add an alias .
9017	Get an entry for a symbol .
9018	Return a copy of the given sym .
9019	Returns the first entry for the given symbol .
9020	Add an import statement .
9021	Get the import entry for the given symbol .
9022	Add a referent to sym .
9023	Return the referent entry for the given symbol .
9024	Given a referents and other namespace return the referents .
9025	Refer all Namespace references .
9026	Get or create a namespace .
9027	Get or create a Namespace .
9028	Get a namespace entry .
9029	Remove a namespace .
9030	Return a completion matcher that matches the given string .
9031	Generates a list of aliases for the given prefix .
9032	Generate a list of imports and their aliases .
9033	Return an iterable of intern names for the given value .
9034	Return a list of references to the given value .
9035	Return a list of completions .
9036	Returns a tuple of the arguments as a tuple .
9037	Convert a list of members to a list .
9038	Convert a list of members to a list .
9039	Change the style of a representer .
9040	Decrypt a JWE token .
9041	Encrypt a JWT .
9042	Deletes an object from the cache .
9043	Convert this selector to a tuple .
9044	Close the writer .
9045	Parse a fiql string
9046	Serialize NDB model to file .
9047	Convert datetime objects into a dictionary
9048	Decode a date into a datetime object .
9049	Decode a value to a date .
9050	Default encoder .
9051	Validate the release version
9052	Generate changelog .
9053	Returns a list of strongly connected components .
9054	Robustly sort the strongly connected components .
9055	Set parent
9056	Get the parent of this object
9057	Adds an operator to the expression
9058	Add an element to the expression .
9059	Create and return an AND operator .
9060	Create and return an OR operator .
9061	Decorator to log function .
9062	Parse incoming message .
9063	Convert a list of tuples into an OrderedDict .
9064	Check for a list of messages in a list of messages .
9065	Prepare and prepare commands .
9066	initiate incoming socket
9067	Enables the display .
9068	Save the template to disk .
9069	Load a template .
9070	Get the current stage .
9071	Generate a python file .
9072	Locate the package s directory .
9073	Parse the json file .
9074	Handle API errors and raise an exception
9075	Validate the response against the server .
9076	homogeneity of two waves .
9077	Interpolate the dep_vector
9078	Calculate the indices of the indep of the indep .
9079	Verify that two waveforms are compatible .
9080	Load the system jsons manifest .
9081	Return a namedtuple of parameters for the given mname
9082	Run a pextrace .
9083	Shortcut to shorten url
9084	Expand a short URL
9085	Get statistics about a short URL .
9086	Return statistics about a given filter .
9087	Get DB statistics .
9088	Print pypi command .
9089	Emulate terminal echo
9090	Log a message to stdout .
9091	Decorator to cache a method .
9092	Yield successive chunks of an iterable .
9093	Decorator to convert an iterable into chunksize
9094	Flatten an iterable .
9095	Interrupt a SIGINT signal .
9096	Pretty - print a table .
9097	Create dummy dummy .
9098	Convert string to integer .
9099	Manage user sls client .
9100	Trace the waveform module .
9101	Generate links for the requirements file .
9102	Add common prefix to a list of Python versions .
9103	Make a list of Python versions .
9104	Convert comparison operators to words .
9105	Yield chunk noise
9106	Parse a chunk of data .
9107	Write two - portstone data .
9108	Bound the waveform to a waveform .
9109	Build a string representation of the units and indep .
9110	Create wave operation .
9111	Calculate the area of an indicator .
9112	Validate min and max values for indices
9113	Calculate the cosine of the wave .
9114	Calculate the arc cosine of wave
9115	Inverse of the arcsine wave function
9116	The inverse tangent of a wave .
9117	Average the waveform .
9118	Convert wave to dB
9119	Derivative of a waveform .
9120	Compute the imaginary part of the waveform .
9121	Compute the Fourier Transform
9122	Compute the Fourier transform .
9123	Compute the real Fourier Transform
9124	Calculate the index of the signal
9125	Compute the Fourier transform
9126	Compute the Fourier Transform
9127	Compute the Fourier wave .
9128	Compute the Fourier Transform .
9129	Integrate a waveform .
9130	Calculate the delay of the wave .
9131	Logarithmic wave function
9132	Calculate the NaN over a waveform .
9133	Integrate a waveform
9134	Return the n - th maximum of a waveform .
9135	Return the minimum value of a waveform .
9136	Phase of wave .
9137	Round wave to specified number of decimals .
9138	Compute the square root of a wave
9139	Generate a subwave waveform based on the dependent waveform .
9140	Convert wave to complex .
9141	Convert wave to float .
9142	Convert wave to integer .
9143	Return the value of the dependent variable .
9144	Searches for JSPM_packages .
9145	Extract the short description from a long description .
9146	Build an expression from a list of tokens .
9147	Get the next item from a list of items .
9148	Return a list of tuples from the expression .
9149	Pair remaining delimiters .
9150	Parse text expression .
9151	Remove consecutive delimiters from an expression .
9152	Split text by sep .
9153	Convert a number to a NumPy notation .
9154	Convert a number to a scientific notation .
9155	Return a string representation of a number .
9156	Convert a number to a power number .
9157	Return the fraction of peng .
9158	Convert a number to a float .
9159	r Calculate power number .
9160	r Compute the power of a given suffix .
9161	r Remove extra delimited delimiters .
9162	Convert a number to a scientific string .
9163	Convert a number to a scientific notation .
9164	Find the sourcemap comment for a given file .
9165	Determine if the app needs a javascript extension .
9166	Bundle the app
9167	Trace the stack - dependencies .
9168	Return True if the given dependency tree matches the given path .
9169	Format a hex dump .
9170	Parse the docstring of a function .
9171	Returns a list of valid valid function names .
9172	Dynamically import an action .
9173	Split a line into parts .
9174	Check that the initial commands are running .
9175	Return help text for builtin functions .
9176	Find function in context .
9177	List all functions in a directory .
9178	Determine if arg is a valid flag .
9179	Process positional arguments .
9180	Extract the value for the given argument .
9181	Invoke a single function
9182	Invoke a line
9183	Invoke the given line .
9184	Parse a parameter declaration .
9185	Parse a return line .
9186	Classify a section .
9187	Classify a single line .
9188	Takes a list of lines and returns a list of paragraphs .
9189	Wrap the documentation to a terminal .
9190	Convert value to a python type .
9191	Convert a binary value to a type .
9192	Get the size of a type .
9193	Convert a value to a string .
9194	Validate type object .
9195	Checks if the given type name is known .
9196	Split a complex type into its parts .
9197	Instantiate a complex type .
9198	Get a specific type by name .
9199	Determine if the given format is known
9200	Injects a type object into the registry .
9201	Load all types from a module .
9202	Checks if the spec is filled in pos_args
9203	Add an annotation .
9204	Declare a typed return value .
9205	Custom returnvalue decorator .
9206	Convert a short - name to a short - name .
9207	Return the type of a parameter .
9208	Return the signature of the function .
9209	Format the return value .
9210	Convert a positional argument to a value .
9211	Check that positional arguments are valid .
9212	Convert an argument to a validator .
9213	Format the exception message .
9214	Convert exception to a dictionary .
9215	Validate and execute a function and return its result .
9216	Parse a list of validators
9217	Find all objects in a given container .
9218	Find and return the context of a module .
9219	Get the help text for a function .
9220	Decorator to add a parameter to a function .
9221	Decorator to annotate a return value .
9222	Annotate a function with a specific type .
9223	Decorator to annotate a class .
9224	Annotate the decorated function .
9225	Mark a function as annotated .
9226	Return the short description of a function .
9227	Load all the tasks
9228	Install the crontab
9229	print all registered tasks
9230	Uninstall crontab
9231	Create a handler from a uri .
9232	Load all configs from the path
9233	Save project configuration
9234	Define a singleton instance
9235	Get all dependent projects
9236	Decorator for post - process
9237	Initialize the project .
9238	Set a key to a new value .
9239	Set an attribute on the object .
9240	Convert an iterable into an object .
9241	Creates a function to set the state of the optimizer .
9242	Creates a setter that returns a set of new values .
9243	Returns a function that applies a function to the state .
9244	Return a function that returns a tuple of n arguments .
9245	Implements the lens function .
9246	Apply a function to the state .
9247	View the fold .
9248	Convert this Fold to a list of Fold objects .
9249	Apply a function over the current state .
9250	Set the value of the given state .
9251	Apply the transformation on an iterable .
9252	Find the kind of an instance .
9253	Main entry point .
9254	Return a new vector where each point falls towards another .
9255	Enter game .
9256	Advance robots .
9257	End a game .
9258	Ask user to move a board .
9259	Play a board .
9260	make a move
9261	The winner of the game .
9262	Generator that yields possible positions .
9263	Process a single item .
9264	Initialize the spider .
9265	Upload a chunk to S3 .
9266	Build a gzip file - like object .
9267	Get the state of an account .
9268	Get the current state of an asset .
9269	Gets block by hash .
9270	Get the block hash .
9271	Get the system fee for a block .
9272	Get the contract state of a contract .
9273	Gets a raw transaction by its hash .
9274	This interface is used to get a storage value from the server .
9275	Get a single transaction .
9276	Invoke a script with the given parameters .
9277	Invoke a function .
9278	Invoke a script .
9279	Send a raw transaction .
9280	Validate an address .
9281	Make a call to the server .
9282	Check if a string is a hash256 hash .
9283	Return True if s is a hash160 .
9284	Encodes a list of Invocation params into a byte array .
9285	Decodes the invocation result into a Python object .
9286	Decorator to specify the first kwonly argument .
9287	snap a datetime to a timezone
9288	Apply this time series to a timezone .
9289	Render a PNG file .
9290	Render this barcode .
9291	Calculate the checksum of the data .
9292	Renders the given code
9293	Connect to KVS .
9294	Executor for globus s3conf
9295	Downloads a file to local_path .
9296	Uploads a file to S3 .
9297	Downsynchronize the given section
9298	Show the diff between the local config file .
9299	Parse an environment variable .
9300	Configure the user and password .
9301	Specify the API key for the given API key .
9302	Yields JSON content from a folder
9303	Get all known schemas .
9304	Returns the schema as a dict
9305	Returns a RefResolver object .
9306	Validate an object against the schema .
9307	Return a list of valid examples .
9308	Return the list of invalid examples
9309	Returns the authorization URL for the user
9310	return auth code
9311	Perform an authorization request .
9312	Get the user s id
9313	List files in a folder .
9314	Create a folder .
9315	Add a comment to an object .
9316	Try to decode an object .
9317	Set the drop target for this object .
9318	Start drag operation
9319	Sets the default LWW .
9320	Inspect an object .
9321	Show the interactive shell
9322	Moves font from font
9323	loads a page
9324	Get a parameter from a tag .
9325	Send a message to the user .
9326	Create a custom tool tip
9327	handle mouse down event
9328	mouse move event handler
9329	handle resize event
9330	handle key press event
9331	Deletes the selected objects
9332	Duplicate the selected objects .
9333	Refresh the image .
9334	Calculate the best position for the widget
9335	Returns the python data for the given item
9336	Sets the python data for the given item .
9337	Searches the data for the given py_data
9338	Delete item from list .
9339	Deletes all items from the list
9340	Remove all columns from the dataset .
9341	set selection
9342	get string selection
9343	Sets the data at the given index
9344	add a string to the list
9345	Represent an object
9346	Finds the parent object by name
9347	Duplicate object .
9348	add a child widget
9349	set parent
9350	Tile the background
9351	Erase the background event
9352	Paint event handler
9353	Find all modules in a given rootpath .
9354	Returns the column headers
9355	Reset the view to the given grid
9356	Updates all the values in the grid
9357	Updates grid attributes
9358	Sorts a column by its name .
9359	Clears the grid
9360	Create a Combo
9361	Start editing the widget
9362	Ends the edit
9363	Checks if an event is accepted by this event
9364	Handles the opening key
9365	Create a handler for a form type .
9366	Enable the selected item .
9367	Checks if the menu item is enabled
9368	Enable the selected menu .
9369	Checks if the menu is enabled
9370	Remove an item from the menu .
9371	Trigger a form submit button
9372	Sets the object tag
9373	Handle autosummary table .
9374	Return a fake documenter for the given object .
9375	Mangle signature .
9376	Import module by name .
9377	Link to obj .
9378	Display an alert dialog
9379	Display a prompt dialog
9380	Displays a font dialog
9381	Displays a color dialog .
9382	Displays a directory
9383	Search dialog .
9384	Sets the item s children
9385	set icon
9386	show the window
9387	Parse a resource file .
9388	Save rsrc to filename .
9389	build a window
9390	Build a GUI component from a dict .
9391	Connect a component to a controller .
9392	Convert a property name to a new name
9393	Sets data to the clipboard
9394	Return a list of tuples containing all the lines in the docstring .
9395	load an application
9396	Inspect the given object
9397	Activate an item
9398	update an object
9399	show the context menu
9400	Return the thumbnail url .
9401	Decorator to register an expression filter .
9402	Decorator to register a node filter .
9403	Assert that the current path matches the given path .
9404	Assert that the current path does not exist .
9405	Verify that the current path has the given path .
9406	Fail if the given path has no current path .
9407	Select an option .
9408	Apply the filter .
9409	Return a webdriver instance for the given browser name .
9410	Returns an xpath representation of the expression
9411	Returns True if the node matches the given filters
9412	Switch the context to a frame .
9413	Accept an alert .
9414	Accept a confirm message .
9415	 dismiss a confirm message
9416	Accept a prompt .
9417	 dismiss a prompt
9418	Save HTML page to path .
9419	Saves a screenshot .
9420	Raises an error if the server error is raised .
9421	Determine whether the value matches the filter .
9422	Check if a field is checked .
9423	Check if a field is not checked .
9424	Checks if a field is unchecked .
9425	Check if a field is not checked .
9426	Assert that a query matches a text query .
9427	Assert that the query has no text .
9428	Assert that a title matches the given title .
9429	Assert that a title matches the given title .
9430	Assert that the title has a title .
9431	Assert that a title has no title
9432	Find all documents matching the selector .
9433	Finds the first element matching the criteria
9434	Return the inner content of a node .
9435	Return the inner text of a node .
9436	Normalize a URL .
9437	Create a property decorator .
9438	Decorator to synchronize a function .
9439	Check if an error should be caught .
9440	Compare the query count .
9441	Check if the result is at least one size .
9442	Determine if the options should be None or not .
9443	Creates a failure message .
9444	Returns True if the given count matches the given criteria .
9445	Normalize text .
9446	Normalize whitespace .
9447	Convert a string to a regular expression .
9448	Check if the current URL matches the expected path .
9449	Resize this window .
9450	Start the WSGI application .
9451	Register a function to be called after the property getter .
9452	Sets the instance method for this class .
9453	Sets the class method for this class .
9454	Return the traceback string .
9455	Get the source of an object .
9456	Get the logger for the given instance .
9457	Sets the logger .
9458	Make a request to the API
9459	Retrieve a list of channels
9460	Retrieve a list of users
9461	Make a Slack message
9462	Translate Slack message to user .
9463	Sends a slack slack message
9464	Receive a slack channel .
9465	Run the bot
9466	Bootstrap slack client
9467	Return the difference between two dicts .
9468	Colorize a message .
9469	Called when a task starts .
9470	Called when v2k is successful .
9471	Print a summary of the stats
9472	Called when a task is skipped
9473	Convert a prefix to a network address mask .
9474	Check if a value is empty .
9475	Add a model to the document .
9476	Get a dictionary of values .
9477	Load data from a dictionary
9478	Convert to a dictionary .
9479	Parse config attributes .
9480	Parse the config .
9481	Translate configuration values into a string .
9482	Load all filters
9483	Find YAML file in path .
9484	Return a dict representation of the model .
9485	Return the difference between two strings
9486	Wrapper for requests . post
9487	Returns the authorization code URI .
9488	Gets an OAuth2 access token
9489	Get query parameters from a URL .
9490	Normalize a URL .
9491	Build a URL from a base URL .
9492	Log exception .
9493	Create a response object .
9494	Makes a redirect error .
9495	Make a JSON response .
9496	Get an authorization code .
9497	Create a new refresh token .
9498	Obtain an access token .
9499	Get an authorization code from the URI .
9500	Get token from POST data .
9501	Returns an authorization object
9502	Open the device for the specified bus .
9503	Read a single byte from the bus .
9504	Read a number of bytes from the bus .
9505	Read single byte .
9506	Write bytes to a device .
9507	Write byte data to a device .
9508	Write data to i2c device .
9509	Return the CDN URL for the CDN .
9510	Create a copy of this file .
9511	Create a local copy of this repository .
9512	Create a remote copy .
9513	Construct a new File object from the info dict .
9514	Upload a file object to the server .
9515	Upload a file from a URL .
9516	Upload a file to a remote store .
9517	Returns a list of the CDN URLs for this dataset .
9518	Create a new instance from a group info .
9519	Create a new group .
9520	Base operation for multiprocessing operation .
9521	Yields the uuids of file
9522	Helper function for list_list .
9523	Generate a progress bar .
9524	Make a request to the given path .
9525	Gets the home mode .
9526	List available cameras .
9527	Get camera information .
9528	Get a camera snapshot
9529	Disable a camera .
9530	Get motion setting for a given camera event .
9531	Send MDP parameter save
9532	Update the camera s state .
9533	Return True if the item is a list item .
9534	Yields data nodes of single list .
9535	Get the value of an ILL item from a list .
9536	Get vMerge
9537	Returns the grid span .
9538	Get cell at given index .
9539	Return True if style is false False otherwise .
9540	Check if text is bold .
9541	Check if text is italics .
9542	Return True if the element is underline .
9543	Return True if p is a title
9544	Yield text elements of text .
9545	Parse relationship tree .
9546	Extract document data from a zip file .
9547	Returns the ordered list type for the given numId
9548	Build an HTML list .
9549	Build a tr element .
9550	Build a table element .
9551	Get the content of a t tag .
9552	Strip tag from tree .
9553	Find a dataset and return it
9554	Load MNIST .
9555	Loads CIFAR 10 images .
9556	Plot a list of images .
9557	Plot layers of weights .
9558	plot a set of RGB images
9559	Sample from a list of arrays .
9560	Convert a string to a list of strings .
9561	Return a list of inputs and outputs .
9562	Predict sequence of labels .
9563	Add a convolution layer to the model .
9564	Encodes a tensor into a numpy array .
9565	Decodes z into tensorflow graph .
9566	Find the output layer .
9567	Return the autoencoder score .
9568	Predict the output .
9569	Return the predicted probabilities .
9570	Predict logit .
9571	Compute the score of the model .
9572	Create a batch of features .
9573	Generate a batch of samples .
9574	Load the network .
9575	Generate a random weight matrix .
9576	Return a random vector of size .
9577	Yield outputs that match a pattern .
9578	Find params matching a pattern .
9579	Create a regularizer from keyword arguments .
9580	The target variables .
9581	Calculate accuracy .
9582	Perform a scan .
9583	Build an Activation layer .
9584	Generate a reservoir from a list of data objects .
9585	Set loss .
9586	Iterate over training and validators .
9587	Run the training step .
9588	Return an MD5 hash of the model .
9589	Build a computation graph .
9590	Returns a list of inputs .
9591	Returns a list of all variables in the graph .
9592	Find the layer with the given parameter .
9593	Compute the feed_forward function .
9594	Predict input .
9595	Compute the score of the model .
9596	Save the model to a file .
9597	Load a model from a file .
9598	Compute the loss .
9599	Build the regular expression graph .
9600	The output size of the layer .
9601	Connect the graph with inputs .
9602	Binds the model to the graph .
9603	Resolve shapes .
9604	Resolve outputs .
9605	Log the layer .
9606	Log all parameters .
9607	Helper function to format a string .
9608	Resolve the shape of a layer .
9609	Find a parameter by its key .
9610	Add a bias to the model .
9611	Returns the spec as a dictionary .
9612	Calculate the loggabor environment .
9613	Compute loggabor image
9614	Add a tier to this tier
9615	Remove a tier by name .
9616	Get a tier by name .
9617	Create an Eaf file with the contents of this assessment .
9618	Add a point to the tier .
9619	Add an interval to the tier
9620	Remove an interval from the tier
9621	Remove a point from the tier
9622	Get all intervals
9623	Returns a list of all the intervals in the tier
9624	Indent an element .
9625	Add an annotation to a tier .
9626	Add a value to the controlled vocabulary .
9627	Add a description to a controlled vocabulary
9628	Add an external reference
9629	Add a language definition .
9630	Add a lexicon reference
9631	Add a linguistic type .
9632	Add a link to the media .
9633	Add a local locale .
9634	Add a secondary linked file descriptor .
9635	Add a tier to the layer .
9636	Remove all time slots from the tier
9637	Return a copy of the EAF for the given range .
9638	Generate an annotation id
9639	Generate a unique timestamp
9640	Returns a list of child tiers for the given id
9641	Get the full time interval .
9642	Gets the reference annotation data after the given time series .
9643	Get the reference annotation data before the given id tier .
9644	Returns a list of tiers for a given lingu type .
9645	Merge two tiers .
9646	Remove all annotations from a tier
9647	Removes the description of a controlled vocabulary
9648	Remove a license .
9649	Remove linked files .
9650	Remove a property .
9651	Remove the reference annotation for a given tier .
9652	Remove secondary linked files .
9653	Remove a tier by id
9654	Remove the specified tiers
9655	Rename a tier
9656	Shift annotations by given time
9657	Run the command line tool .
9658	Display information about storage .
9659	Get the base level of text .
9660	Get embedding levels .
9661	Explicit embedding level function .
9662	Calculate R or R - R of - level runs
9663	Replace all weak types in a file .
9664	Resolve neutral types .
9665	Reverse contiguous sequence .
9666	Re - order the embedding levels .
9667	Process the current file
9668	Convert lines from PySide2 .
9669	Add an attribute to an object .
9670	Command line interface .
9671	Maintain the compatibility version of this binding
9672	Show the GUI .
9673	Find the GUI and return the GUI class .
9674	Deregister all hosts .
9675	Add a menu entry to the file menu .
9676	Temporarily restore the current selection .
9677	Context manager to temporarily change the current time .
9678	Show a messagebox with no known GUI interfaces .
9679	Load the types from the Telegram API .
9680	Yield cumulative data .
9681	Return a list of values for a single axis .
9682	Draws a constant line
9683	Load the transform parameters .
9684	Reverse a mapping .
9685	Generate a range of floats .
9686	Add data to the dataset .
9687	Add layer definitions .
9688	Add a new configuration object .
9689	Draws the graph
9690	Calculate left margin .
9691	Calculate right margin
9692	Calculate top margin .
9693	add a popup to the foreground
9694	Calculate bottom margin .
9695	Draws the graph .
9696	Makes a datapoint with the given value .
9697	Draw the x - labels for each step
9698	Draw y - labels for each step
9699	Draws horizontal lines for the graph .
9700	Draws y guides
9701	Draw the graph titles
9702	Render inline styles .
9703	Start SVG .
9704	return a list of stylesheet names
9705	Run a bot .
9706	Send data to the socket .
9707	Connect to the server .
9708	Respond to the client .
9709	Dispatch patterns to patterns .
9710	Set new nick
9711	Handle a ping payload .
9712	Handle registration .
9713	Enter receive loop .
9714	Wait for a connection to the server .
9715	Run task runner .
9716	Decorator to check if the user is boss .
9717	Returns a list of patterns that match the pattern .
9718	Register a channel
9719	Execute a task .
9720	Add a new nick
9721	Send an email notification to the site .
9722	Send a password reset notification .
9723	Validate password strength .
9724	Verify an email token
9725	Delete the user s avatar .
9726	Check if post request is allowed .
9727	The executor executor .
9728	Return an instance of the Docker client .
9729	A tuple containing the TLS client .
9730	The name of the service .
9731	Make a Docker API call to the Docker client .
9732	Execute a Docker container .
9733	Poll the Docker service .
9734	Stop this Docker service .
9735	Return a new queryset .
9736	Update the user s password .
9737	Update the user s password
9738	Validate email address .
9739	Create a new token
9740	Delete a token .
9741	Check if the user is authenticated .
9742	Send confirmation email .
9743	Update the token s expiration date
9744	Generate context for sending email reset message .
9745	Send email notification .
9746	Handler for password reset email .
9747	Handler for email validation .
9748	Authenticate with the given token .
9749	Update the user and token expiration date .
9750	Show Bokeh plot .
9751	Replace all bokeh plots
9752	Get custom JS callback
9753	Get the widget for the given parameter name
9754	Render a HoloViews object .
9755	Creates a TextInput with the given value .
9756	Convert a list of tuples into a list of tuples .
9757	Returns the owner of a method .
9758	Assign HTTP auth credentials
9759	Ping the server .
9760	Get information about the device .
9761	Check the status of the cluster .
9762	Convert a number of bytes to a human readable string .
9763	The total load of the CPU
9764	Return the memory size in bytes .
9765	Get the total amount of network .
9766	List of volumes associated with this container .
9767	Get a volume by its ID
9768	Get the size of a volume
9769	Returns the volume used for a volume
9770	Gets the volume of disk .
9771	Get the maximum disk temp
9772	Get a disk by its ID
9773	Perform the login
9774	Perform a GET request
9775	Execute a GET request
9776	Update internal data .
9777	Returns the system utilization object
9778	Get storage object .
9779	Create a HipchatContext object for a Hipchat request .
9780	Get the access token for the tenant .
9781	Build the attribute attributes .
9782	Applies a set of apps to the INSTALLED_APPS .
9783	Remove all apps from INSTALLED_APPS .
9784	Get all global settings
9785	Handles GET requests .
9786	Get a value from the config .
9787	Change config value
9788	Migrate the config file .
9789	Start the HTTP server .
9790	Wait for a response .
9791	Get new access information from PRAW .
9792	Check if a token is present in the config
9793	Set access credentials .
9794	Refresh the access token .
9795	Create manifest table .
9796	Split a path into bucket and normalize it .
9797	Determine if a bucket is a glacier .
9798	Extract run_id from key
9799	Remove None values from a dictionary .
9800	Add a run to the manifest .
9801	Determine if a run is in the manifest .
9802	Extract the schema from a schema .
9803	Convert schema name to snake case .
9804	Parse a list of contexts
9805	Parses an unstructured event from an unstructured event
9806	Transforms a line into a JSON formatted string .
9807	Takes an event and converts it to a Snowplest event .
9808	Determine the template name from the response object .
9809	Pretty - print the context .
9810	Print all available variables
9811	Format SQL to HTML
9812	Format Django context as HTML .
9813	Format a dictionary summary as HTML .
9814	Return HTML highlighting .
9815	Formats the given object as a string .
9816	Wrapper for _format .
9817	Get the token at the given position .
9818	Return a list of nodes from a string .
9819	Convert a latex string to text .
9820	Sets the template directory
9821	Read a tex file .
9822	Convert latex to text .
9823	r Convert a unicode string to a unicode string .
9824	Convert a string to an ASCII string .
9825	Gets the organization information .
9826	Get a list of boards .
9827	Get a list of members from the organization .
9828	Updates an existing organization .
9829	Removes a member from the team .
9830	Adds a member by ID
9831	Adds a member to the organization .
9832	Gets the list information from the server .
9833	Adds a new card to the organization .
9834	Gets the label information for all labels .
9835	Gets a list of check items .
9836	Updates a label
9837	Update a label dict
9838	Get the user s authorization URL .
9839	Retrieves the card information from the server .
9840	Get a board from the board .
9841	Get a list of resources from the API .
9842	Get all checklists
9843	Creates a new comment .
9844	Add an attachment to a file .
9845	Create a new checklist .
9846	Creates a new label from a dictionary .
9847	Creates a new label from a given class
9848	Add a member to the organization
9849	Gets the members of the organization .
9850	Returns a list of Card objects .
9851	Get a list of organisations .
9852	Create a new board .
9853	Decorator to wrap a single instance of a class .
9854	Returns the information about the dashboard .
9855	Get a list of lists from the API .
9856	Returns a list of labels .
9857	Get a single card .
9858	Get all checklists
9859	Get a single organisation .
9860	Update a board .
9861	Creates a new list .
9862	Creates a new label .
9863	Retrieves information about the current checklist .
9864	Get the card
9865	Returns a list of checklist objects .
9866	Update a checklist
9867	Creates a new check item .
9868	Remove a check item
9869	Update the name of a checklist .
9870	Updates the checklist .
9871	Add authorization parameters to query_params .
9872	Check the response for errors .
9873	Build the URL for the Trello API .
9874	Fetch and return a json object
9875	Create an organisation object
9876	Create a new trolly board .
9877	Create a Label object
9878	Create a new list
9879	Create a new Card from a dictionary .
9880	Create a Checklist from a dict
9881	Create a member from a JSON object
9882	Get an organization .
9883	Get a board by ID .
9884	Get a list .
9885	Get a card .
9886	Get a checklist .
9887	Get a user .
9888	Extract the domain from a URL .
9889	Convert text to raw text .
9890	Convert text to raw text .
9891	Split text into sentences .
9892	Set the password for a given service
9893	Split text into text .
9894	Mark a regex in text .
9895	Mark a regex in text .
9896	Main entry point .
9897	Create and return a cipher object .
9898	Get AES mode .
9899	Default priority .
9900	Validate the encryption scheme .
9901	Called when a message is received
9902	Make a unique id for this node .
9903	Initiate a connection
9904	Handle a CONNACK packet .
9905	Encode a string .
9906	Decode a string to a 2 - byte tuple .
9907	Encode a 16 - bit integer .
9908	Encode a length value .
9909	Decode length of a string .
9910	Encode this message .
9911	Encode this Message to a string .
9912	Decode a packet from a packet .
9913	Encode this message into a string .
9914	Decode a packet .
9915	Decode a packet .
9916	Encode this message .
9917	Encode this message .
9918	Decode a packet .
9919	Encode this message .
9920	Encode this Message .
9921	Decode this packet from a packet .
9922	Decode a packet .
9923	Get API URL .
9924	Make a request to the API .
9925	Refresh the list of blocks .
9926	Formats the data .
9927	Fit data to data
9928	Fit k - means clustering
9929	Fit a mean shift .
9930	Fit the clustering .
9931	Predict clusters
9932	Map the number of clusters to the cluster
9933	Sort the clusters by sort_by_by
9934	Convert datetime to datetime
9935	Get the total number of points in a dictionary
9936	Get the maximum time span of a dictionary
9937	Helper function for unit picker .
9938	returns a pretty element
9939	Convert analyemass to name
9940	Convert analyte name to massname
9941	Collate all files in a directory .
9942	Enumerate a boolean array .
9943	Convert a list of tuples into a boolean array .
9944	Fast smoothing function .
9945	Fast gradient implementation .
9946	Find x in x y and y .
9947	Performs a clustering on data .
9948	K - Means clustering
9949	Clusters data using n_clusters .
9950	Reads the set of domains in the srm file .
9951	Read the configuration file .
9952	Read latools . cfg file .
9953	Print all LATools configurations .
9954	Copy SRM table from configuration file
9955	Create a config file .
9956	Change the default configuration .
9957	Exclude downhole indices .
9958	Defrag a filter .
9959	Demoike
9960	Plot the TimeSeries .
9961	Creates the indices of the time series .
9962	gets the ratio of analytes
9963	Calculate the calibration data
9964	Sample the given statistics .
9965	Dictionary of ablation times .
9966	Filter the current focus and threshold .
9967	Filter gradients based on given threshold
9968	Calculate correlation
9969	Filter the correlation .
9970	Add a new filter
9971	Get the model parameters .
9972	Plots histograms of data
9973	Compute summary statistics
9974	Load reference data .
9975	Lookup the type of a type annotation .
9976	Return list of isotopes .
9977	Calculate molecular weight
9978	Create a namedtuple with keyword arguments .
9979	Return a tuple with all elements in the stack .
9980	Reduce a stack .
9981	Calculate weighted average weighted average weighted average weighted average
9982	Gaussian distribution .
9983	Output standard deviation
9984	Get samples from the dataset .
9985	Propike despikes and dispatches the focus stage
9986	Calculate background weighted average
9987	Calculate background images
9988	Subtract background correction .
9989	Calculate ratio .
9990	Create a subset of samples .
9991	Filter the gradient of the gradients of the gradients .
9992	Fit a classifier .
9993	Apply a classifier .
9994	Applies the correlation filter to the data
9995	Filter the data in samples .
9996	Stop filtering on samples .
9997	Return a summary of the filtered results .
9998	Defragment filter .
9999	Filters out filtered samples .
10000	Create a plot of the gradient histogram
10001	Cross - plot the gradient of the image
10002	Plot the focus stage .
10003	Draw trace plots
10004	Draw gradient plots
10005	Generate plots for filtered reports
10006	Generate sample statistics
10007	Calculate statistics for each sample
10008	Export traces to outdir .
10009	Export traces to a file .
10010	Saves the log to the specified directory .
10011	Exports minimal data
10012	Split a file by regex
10013	Apply a function to each fold .
10014	Plots a plot of the components
10015	Binary scale function .
10016	Scaling a set of values to a median .
10017	Discpike noise
10018	Perform exponential decay based on exponential decay .
10019	add a new component
10020	Remove a component
10021	Clear the configuration .
10022	Remove unused components
10023	Given a fuzzkey find the most common filter name
10024	Make runable from key
10025	Grab a filter
10026	Get information about components
10027	Decorator to log a function
10028	Write log file
10029	Read a log file .
10030	Decorator to log a function .
10031	Get information about modem .
10032	Send a message to the modem .
10033	Parse a file - like object or file - like object .
10034	Generate a link to a notebook .
10035	The thumbnail for the thumbnail .
10036	Divide the snippet .
10037	The code example of the notebook
10038	The url of the notebook
10039	Returns the final output file .
10040	Convert notebook to rst file
10041	Create a python file from a notebook
10042	Return data download URL
10043	Create thumbnail .
10044	Extract the description from the header .
10045	Scale an image to out_fname
10046	Saves the thumbnail to the given path .
10047	Copy the image to the output file .
10048	Returns the URL for a given nbfile
10049	Yield languages that have changed .
10050	Returns default value for given field
10051	Process a thumbnail .
10052	Process the model instance .
10053	Refresh thumbnail cache .
10054	Return a list of all thumbnails .
10055	Create a thumbnail .
10056	Delete a thumbnail .
10057	Create a Thumbnail for the given source .
10058	Get a Thumbnail object .
10059	Delete the thumbnail .
10060	Process incoming message .
10061	Subscribe to a given number .
10062	Return a set of states that are accepted .
10063	Register a new provider
10064	Send a message .
10065	Returns a receiver with the given name .
10066	Returns a mapping of receiver names to receivers .
10067	Receive a message from the gateway
10068	Receive a status message
10069	A decorator to make a callable API call
10070	Forward an object to all connected clients .
10071	Sign a transaction .
10072	Estimate gas gas using web3 .
10073	Estimates the gas gas at the given address .
10074	Write bytes to the stream .
10075	Read a line from the serial port .
10076	Sends a message .
10077	Return the message as a string .
10078	Check if this message has bad headers .
10079	Attach an attachment .
10080	Register multiple services .
10081	Create a Config object from a module .
10082	Registers the given resources .
10083	Get the value of a key .
10084	Exit the context .
10085	Setup the data manager .
10086	Evaluate the number of wavelength
10087	Calculate theauchy equation .
10088	Initialize the backend .
10089	Login to the server .
10090	Returns a list of domains
10091	Get all elements
10092	Perform a PATCH request
10093	DELETE operation
10094	Check if two files are on the same volume .
10095	Create a junction link .
10096	Initialize the logger .
10097	Raise a UsageError
10098	Claims a list of read readers .
10099	Build a new column header according to MuTect .
10100	Claim unclaimed VCF readers .
10101	Initialize population stats .
10102	Claim unclaimed VCF readers .
10103	Split the given string .
10104	Return the first line terminator for the given string .
10105	Return the suffix of the given string .
10106	Seek to the next line .
10107	Seek to previous line .
10108	Return the tail of the file .
10109	Return the first n lines of the file .
10110	Yield lines from the file .
10111	Claims a set of Strelka readers .
10112	Parse a VCF record .
10113	Return a dict of sample tag values .
10114	Return a set of tags for the variant .
10115	Join the info fields .
10116	Return the field name .
10117	Return the sample field for the given sample
10118	Return a text representation of the header .
10119	Add a new sample tag value .
10120	Add or replace a new filter .
10121	Return a list of available categories for a user .
10122	Returns a form for a product .
10123	Create a form for staff products .
10124	Add an error for a product .
10125	Decorator for caching a function .
10126	Create a model form for a model .
10127	Gets items pending or purchases .
10128	Send email .
10129	Generator for OpenStreetMap stream .
10130	Parse OSM XML file .
10131	Iterate over OpenStreetMap notes .
10132	Returns True if the condition passes the condition .
10133	Check if user is met
10134	Return the remainder of a given user .
10135	Filter queryset by user .
10136	Filter queryset by user .
10137	Pre - filter queryset .
10138	Filter the queryset .
10139	Pre - filter conditions .
10140	Decorator for caching the cart .
10141	Returns a new Cart object for the given user .
10142	Add the reservation duration to the reservation .
10143	Add a voucher to the inventory .
10144	Validate the cart .
10145	Fixes simple errors .
10146	Recalculate the discounts for the cart .
10147	Adds a discount to the cart .
10148	Create a report view .
10149	Iterate over the rows of the table .
10150	Return the form instance .
10151	Render the given data .
10152	List all reports
10153	Lists all items sold in the invoice .
10154	Return a summary of all sales .
10155	Lists all payments .
10156	Gets the refunds of the credit note
10157	Display product status .
10158	Displays all discounts for the given discount .
10159	Return a list of product items for the given product .
10160	Return a list of invoices that are paid at the date .
10161	Lists all credit notes .
10162	List all invoices .
10163	Returns a list of attendees .
10164	Returns a list of speaker s registration status
10165	Manage product items .
10166	Return the set of available categories for the given user .
10167	Returns the available credit note .
10168	Check if the user has not been sold out .
10169	Go through the user s registration .
10170	Edit the attendee profile .
10171	Handle a profile form .
10172	View for a product .
10173	Handles POST requests .
10174	Handles the form of the current cart .
10175	View for the current invoice .
10176	View for the most recent invoice .
10177	View the current invoice .
10178	View for manual payment .
10179	Refund the current invoice .
10180	Applies a credit note to the invoice .
10181	Modify staff s staff products .
10182	Extend the reservation for a given user
10183	Send an email to the user .
10184	Generate badges for the invoice .
10185	Render a badge .
10186	Returns a list of discounts for the given user and products .
10187	Annotate queryset with the most recent use of the queryset .
10188	Return a list of available products .
10189	Applies the credit to an invoice .
10190	Calculate the cancellation fee for this credit note .
10191	Generate access code .
10192	Lazy evaluation of function .
10193	Get object from module name .
10194	Create a Invoice for a given cart .
10195	Creates a manual invoice for a given user .
10196	Generate cart items from a cart .
10197	Applies the unpaid credit notes to the invoice .
10198	Check if the user can view this invoice .
10199	Refresh invoice from database .
10200	Validate that the invoice is allowed .
10201	Updates the invoice status .
10202	Marks the invoice as paid .
10203	Returns True if the invoice matches the current order .
10204	Update the validity of the invoice .
10205	Validate the invoice .
10206	Refund this invoice .
10207	Send email to invoice
10208	Update the annotation with the given data .
10209	Flatten a field
10210	Print download files .
10211	Download the file of the field
10212	Get project data
10213	Retrieve a list of processors
10214	Print processor inputs
10215	Unset data from the server
10216	Upload fields to project .
10217	Upload a file
10218	Download data objects
10219	Get all subclasses of a class
10220	Get repository and project project .
10221	Get a list of phenotypes with suggested changes .
10222	Given a list of variant IDs return a list of variants that have changed .
10223	Search for variants by coordinate .
10224	Bulk search for variants by their coordinates .
10225	Update this element .
10226	Remove duplicates from a sequence .
10227	Authenticate to Asana .
10228	Prompt the user for a given string .
10229	Get the issue data for a given issue .
10230	Move the issue data for the given issue .
10231	Get saved task data .
10232	Get ASAN task by ID .
10233	Save the configuration to disk .
10234	Prompt user for a key .
10235	Decorator to handle Asana errors .
10236	Flush all items in the queue .
10237	Create a task .
10238	Takes a list of task numbers and formats it as a string .
10239	Create a task in the given workspace .
10240	Get all data types for this project
10241	Log a message to the EKM meter .
10242	init serial port
10243	Sets the value of the polling values for this object .
10244	Combine the fields of the fields
10245	Render a list of readings since the given timestamp .
10246	set the context string
10247	Calculates the power of a function .
10248	Set the maximum demand period
10249	Set the password of the meter .
10250	Unpack struct data .
10251	Convert meter data to raw format
10252	Return a JSON - serialized representation of the meter data .
10253	Calculate the CRC of the data
10254	Split an Ekm date into a named tuple .
10255	Gets the month buffer
10256	Set new CT ratio
10257	Assign a schedule
10258	Assign a season and schedule to the schedule
10259	Set season parameters
10260	assign holiday date parameters
10261	Reads the specified tables from the device .
10262	Extract a schedule from a schedule
10263	This method is used to read the month tariffs .
10264	Returns a namedtuple for each month .
10265	Request the holiday date and Schedules and Schedules
10266	Extract holiday date .
10267	Reads and returns True if all calendars are present .
10268	write a command message
10269	Serialize a password
10270	Update all observers of this request .
10271	Initialize the LCD lookups .
10272	send a request to the device
10273	Request A response .
10274	Request a B value
10275	Convert all the fields in the m_req_a and b .
10276	Calculates the power of the field .
10277	Set the LCDD command
10278	Set relay duration .
10279	Send the termination string to the serial port .
10280	Set pulse input ratio
10281	Set the zero - resettableKWKWKWKW algorithm .
10282	Set the LCD for the device .
10283	Iterate over all fields in a schema .
10284	Recursively iterate over all fields in a schema .
10285	Generates paragraphs .
10286	Generate random text .
10287	Returns a formatted statistics string
10288	Colorize text .
10289	Display the given text .
10290	Return a summary of the given result .
10291	Parse command line arguments .
10292	Set up ivoire instance .
10293	Runs the given config .
10294	Run the transform function .
10295	Transform a description .
10296	Transform a description into a description .
10297	Transform an example node into an ast . FunctionDef
10298	Iterate over the examples in the example body .
10299	Create an astroid . ast . ast . ast . ast .
10300	Register a new path hook .
10301	Convert a byte string to a python code .
10302	Apply an argument parser to the argumentsParser .
10303	Load a module by name .
10304	Load modules from a path .
10305	Find filenames in path .
10306	Returns a function that checks the receiver s receiver .
10307	Fetch messages from a given location
10308	Add a command to a config file .
10309	Remove a file from the config .
10310	Send a restart message .
10311	Calls the given results
10312	Return a multiprocessing service .
10313	Return a service instance
10314	Refresh the current session
10315	Remove expired nodes .
10316	Remove a node from the cluster .
10317	Get the last updated datetime of a node
10318	Return a dictionary of all nodes in the cluster .
10319	Refresh session .
10320	Increment the time modified times .
10321	Dereference a resource .
10322	Split a list of tokens into tokens .
10323	Check if path is bad
10324	Merge new message with new message .
10325	Check if a value exists
10326	Instantiate a query .
10327	Return a function that returns a constant .
10328	Split a function into an iterable .
10329	Convert a function to an iterable .
10330	Run a process and wait for it to finish .
10331	Create a timed service
10332	Attempt to parse a parser .
10333	Parse a literal expression .
10334	Create an optional parser .
10335	Create a new one - time parser .
10336	Create a new parser .
10337	Create a new parser with a single separator .
10338	Create a new separator .
10339	Check the state of a location .
10340	Close the future .
10341	Checks if the URL is valid .
10342	Add a heartbeat
10343	Wrap a TASService into a MultiService .
10344	Freeze a checkpoint from a checkpoint .
10345	Freeze a checkpoint .
10346	Save a sub - graph of nodes to a file .
10347	Save a checkpoint from a checkpoint .
10348	Save weights from checkpoint .
10349	Restore a checkpoint from a checkpoint .
10350	Parse the given token .
10351	Render a tag .
10352	Check that the arguments are valid .
10353	Return the context data for this tag .
10354	Parse a template tag .
10355	Return the context data for this tag .
10356	Creates a TensorFlow session from a caffe model .
10357	Freeze a checkpoint .
10358	Saves all the inputs to file .
10359	Takes a seq and returns a list of rows .
10360	Yield n items from iterable .
10361	Yield all elements from an iterable .
10362	Remove duplicates from an iterable .
10363	Return the next item from an iterable .
10364	Takes an iterable and yields the next iteration of the iterable .
10365	Split a set of items into bins
10366	Make sure item is iterable .
10367	Supply suppress exceptions .
10368	Find duplicates in iterables .
10369	Assert that an iterable is ordered .
10370	Swap partition results .
10371	Partition a dictionary by key .
10372	Get the first n n queues
10373	Reset the iterator .
10374	Parse the as part of a variable .
10375	Decorator to register a template tag .
10376	Get a descendant of the public keychain
10377	Fetches all the SQLite master record information .
10378	Recursively iterate through an object .
10379	Selects the given selector
10380	Parse a selector .
10381	The selector production .
10382	Return parents of lhs and rhs .
10383	Returns ancestors of lhs and rhs .
10384	Return the siblings of lhs .
10385	Nth child node .
10386	Return a list of nodes matching validators .
10387	Send a ping to a destination .
10388	Send a request to the API .
10389	Expire expired items .
10390	Store a key in the cache
10391	Get a value from the cache .
10392	Check if a key exists in the cache .
10393	Returns True if the beacon is valid .
10394	Create a NistValue instance from a JSON string .
10395	Create a NIST beacon value from an XML string .
10396	Returns the jsminified version of the response if it exists
10397	Get a file fn .
10398	Return a list of rows .
10399	Validate a token .
10400	Obtain a Fernet engine .
10401	validate token against supported ones
10402	Create a token link
10403	Simple Counter32 .
10404	Compute a counter - clockwise counter - clockwise counter - value .
10405	Compute the average duration between visits and visits .
10406	Setup the output dictionary
10407	Setup the sources
10408	Send events to a specific event .
10409	Start the source watchdog .
10410	Parse format string .
10411	Parses a log line
10412	Validate that the user has an expiration date .
10413	Ensure that the user is not valid .
10414	Verify the token
10415	The name of the device .
10416	Warn warning about nonlocal image URI
10417	Connect the receivers .
10418	Create secret link .
10419	Send an acceptance notification .
10420	Send the confirmation email to the user .
10421	Send email notification .
10422	Send a reject notification .
10423	Send a notification to the user .
10424	Create a new secret link .
10425	Validate a token
10426	Revoke this link .
10427	Create a model .
10428	Get receiver instance .
10429	Confirm email is confirmed .
10430	Called when a request is accepted .
10431	Reject this request .
10432	Create a secret link
10433	Return a SHA512 hash .
10434	Verify signature .
10435	Determine if a record is allowed
10436	Handle access request .
10437	Confirm email address .
10438	Return an SSH command client .
10439	Reverse column
10440	Determine the selected option
10441	Gets the items in the query
10442	Return the version string
10443	Set the version of the file
10444	Initialize the SSH connection .
10445	Start timer .
10446	Called by the service .
10447	Delete shared link .
10448	Create a connection to the Riemann server .
10449	Stop the gateway .
10450	Empty the queue .
10451	Add events to the queue .
10452	create a connection to the reactor
10453	Create an elasticsearch client
10454	Encodes an event into a protobuf .
10455	Encode a list of Riemann events .
10456	Decodes a protobuf message .
10457	Send a list of events to the device .
10458	Generate file preview .
10459	Retrieve a file preview .
10460	Send a message to the RQ queue .
10461	Main worker loop .
10462	Return True if the current log has been changed .
10463	Respond to the server .
10464	Abort the connection .
10465	Mapping charsprepare
10466	Render a footer tag .
10467	Build payment parameters .
10468	Build register_credit card parameters .
10469	Creates a payment with an alias .
10470	Get version string .
10471	Constructs the widget .
10472	Initializes the layout widget .
10473	Configure the shortcuts .
10474	Callback when the item is activated .
10475	Called when an item is selected .
10476	Called when the user is clicked .
10477	Finalize resources .
10478	Compile resource .
10479	Clean up compiled resources .
10480	Return a list of children .
10481	Reset children .
10482	Returns the icon for the given index .
10483	Call a child process .
10484	Get the maximum file descriptor .
10485	Closes a file descriptor .
10486	Close all open file descriptors .
10487	Redirect stream to target file .
10488	Set the attributes of the form .
10489	Imports a module and returns it .
10490	Import all submodules of all installed apps
10491	Include template .
10492	Get the URL of a Gravatar .
10493	Returns an HTML tag for the given object .
10494	Checks if path is a valid filesystem location
10495	Validate a remote port
10496	Return the absolute path to a template file .
10497	List objects in a bucket .
10498	Build the workflow json .
10499	Execute this widget .
10500	Archive a project folder .
10501	Create a directory .
10502	List all files in the project .
10503	Restore a folder from the project .
10504	Create a new API client .
10505	Returns a list of files in the given path .
10506	Download file to target path .
10507	Check if a path exists in the given path .
10508	Get parent entity .
10509	Create a directory .
10510	Uploads a file to the container
10511	Deletes the specified path .
10512	Validates the given path .
10513	Create a new instance of the service .
10514	Create a new Storage instance .
10515	Gets the details of an entity .
10516	Sets the metadata for an entity .
10517	Gets the metadata for an entity .
10518	Updates the given entity s metadata .
10519	Deletes the specified metadata for a given entity .
10520	Returns a list of all projects in the project .
10521	Gets the details of a project .
10522	Creates a new Project in the specified collection .
10523	Deletes a project .
10524	Creates a new folder .
10525	Gets the details of a folder .
10526	Deletes a folder .
10527	Uploads a file to S3 .
10528	Copies the contents of a file to another file .
10529	Downloads the contents of a file .
10530	Gets the signed URL for a file .
10531	Send a record to the database .
10532	Creates a service URL for the given service and version .
10533	Return a copy of this request .
10534	Returns a copy of the request with new parameters .
10535	Declare the given exception .
10536	Set the list_display field of the model .
10537	Apply a function to a job .
10538	Implements GATK VVCFs
10539	Run oncotator on the VCF .
10540	Sort the list .
10541	Returns a list of timestamps
10542	Load data from exported folder
10543	Shift a t .
10544	Return the sum of all measurements
10545	Collect rfxcom from the given device .
10546	Create a new user .
10547	Parses the vn results .
10548	Parses release data .
10549	Parses the prod staff staff page
10550	Parses the character results .
10551	Parses tags from HTML page
10552	Parses the user results .
10553	Create a tarball of a list of files .
10554	Apply a function to all files in a file .
10555	Copy a single file to the output directory
10556	Creates a list of Spark configuration parameters .
10557	Add the docker - master - master - master - master parameters to the docker daemon .
10558	Refresh the metadata
10559	This module will run MuTect
10560	Create a new object
10561	Return a list of Streamm objects representing all streams in the database .
10562	Export this device to a JSON file .
10563	Search VNDB for a given term .
10564	Parse search results
10565	Add a stream to the dataset .
10566	Reset the device and reset it .
10567	Return a list of users .
10568	Create the index file
10569	Return a connection to the server .
10570	Add a stream
10571	Add a stream to the database
10572	Insert a datapoint into the database
10573	Synchronize the database
10574	Start the logger .
10575	Stop the thread .
10576	Download a file from a given URL .
10577	Uploads an S3AM file to S3 .
10578	Print ontology labels .
10579	Print ontology tree .
10580	Get the mean size for a bam file .
10581	Get the current container ID
10582	This module is used to run the STAR STAR command .
10583	Creates a new object
10584	Export the stream s data to a JSON file .
10585	Get a device object .
10586	Get labels for an ontology
10587	Get the hierarchy of an ontology .
10588	Creates a Tool instance .
10589	Populates the arg_parser with the given data .
10590	Get empty config file .
10591	Get the mount path for this container
10592	Add an option to an arg_parser .
10593	Create an argument parser .
10594	Create the command line for the jobStore .
10595	Set authentication for the connection .
10596	Check the result of an HTTP response .
10597	Ping the server
10598	Creates a resource
10599	Update a resource
10600	Delete a resource
10601	Subscribe to a stream .
10602	Create a new user .
10603	Return a list of devices .
10604	This module will run the cutadapt command on the paired endpoints
10605	This module will run samtools on the fasta file
10606	This index the samtools index in the input sample
10607	Runs sambamba on the input bam
10608	Run samblaster
10609	Removes duplicates from the bam file
10610	This module is used to sort the input bam file .
10611	This module will run the baseRecalibrator on the GATK file
10612	This module will run the kallisto_ido_indexo_hg38
10613	This module will run the RSEM on the server .
10614	Get the user affinity matrix for a test .
10615	Send a command to the websocket .
10616	Subscribe to a stream .
10617	Connects to the websocket
10618	Reconnect to the server .
10619	Reserve all subscriptions .
10620	Called when websocket connection is established
10621	Called when the websocket connection is closed .
10622	Called when a connection is received
10623	Process a websocket message
10624	Ensures that the websocket connection is alive .
10625	This module will run the GATK selectVariant on the genome .
10626	Run GATK VariantFiltering on a genome .
10627	Run GATK variantRecalibrator on a variant .
10628	Perform a variant recalibration on a genome .
10629	This module will run the GATK CombineVariant
10630	Run a quickcheck on a file
10631	Load handlers from a dictionary .
10632	Write the configuration to a JSON file .
10633	Get the current configuration .
10634	Get a term for an ontology
10635	Search for ontology search
10636	Suggest an ontology
10637	Return an iterator over the descendants of an ontology
10638	Iterate over labels of ontology
10639	Iterate over labels .
10640	Iterate the terms of the ontology .
10641	This module will run fastqc
10642	Add a stream to the query
10643	Create a Flask application .
10644	Start the Spark master container .
10645	Start the spark worker
10646	Start a new HDFS container
10647	Stops the worker process .
10648	Check the status of the container .
10649	Base tokenizer
10650	Lookup a zone by name .
10651	Fetch the R53 configuration
10652	Merge a list of resource records into an XML tree .
10653	Validate a change set .
10654	Return a list of the best n - n members sorted by fitness score .
10655	Returns the fitness of the group .
10656	Calculate the average cost function
10657	Calculate the median cost function for each member .
10658	Calculate the average of each parameter .
10659	Returns a list of member members
10660	Add a parameter .
10661	Generate a new population .
10662	Normalize key - value pairs
10663	Get environment variables .
10664	Wrap a callable with the given exceptions .
10665	Transform a list of pypi packages into a dictionary .
10666	Transforms the result into a string .
10667	Convert HTML to XHTML
10668	Convert an XHTML document to HTML .
10669	Convert a document to a string .
10670	Open an HTML document in a browser .
10671	Replace the tail of the tree .
10672	Drop the current tag .
10673	Get element by id
10674	Create a CSS selector .
10675	Iterate over all handler handlers
10676	Get the count of all tests .
10677	Determine if the count is a single class
10678	Check if a single module is a single module
10679	Ensure the request parameter is a list of dictionaries .
10680	Ensure the identifier is a valid integer .
10681	Attempt to decode a file system path .
10682	Escape an iterable of arguments in an object .
10683	Get the codec name for an encoding .
10684	Detect BOM BOM .
10685	Get the remote address from a forwarded request .
10686	Convert amount to decimal
10687	Parse BeautifulSoup string .
10688	Parse a file .
10689	Convert a beautiful soup tree into an XML tree .
10690	Get the current traceback .
10691	The string representation of the exception .
10692	Render the traceback as HTML .
10693	Generate plaintext traceback .
10694	Return a list of lines marked as in_frame .
10695	Render the annotation table .
10696	Determine if an egg name matches the given egg name .
10697	Get locations for index_urls .
10698	Find all versions of a project .
10699	Find a version matching req .
10700	Sort links .
10701	Get the content type of a given URL .
10702	Iterate over all links .
10703	Return True if this link has been verified .
10704	Find data files for package .
10705	Return a list of filenames for the given package .
10706	Parse a requirements file .
10707	Join the given iterable .
10708	Ignore comments .
10709	compile marker
10710	Visitor for AST node .
10711	visit an attribute node
10712	Coerce a value to a number .
10713	Return a copy of the current request context .
10714	Push a context to the stack .
10715	Remove the current context .
10716	Return a copy of the current instance .
10717	Match request .
10718	Push the current context to the request stack .
10719	Makes a path relative to a relative path .
10720	Determine if a distribution is editable .
10721	Decorator for adding a URL value preprocessor .
10722	Add a function to this view .
10723	Decorator for registering an error handler .
10724	A generator that yields a generator with a context manager .
10725	Create a response object .
10726	Generate a URL for the given endpoint .
10727	Safely join a filename .
10728	Get the root path of a module .
10729	Returns a jinja2 loader for the template .
10730	Run the completion script .
10731	Get the cookie domain .
10732	Generate a cache key for a link .
10733	Determine whether the root is a Purelib wheel .
10734	Iterate over uninstallation paths
10735	Check that the given wheel is compatible with the current version .
10736	Build a wheel .
10737	Iterate over all symbols in code .
10738	A decorator to ensure the rate limit is refreshed .
10739	Add egg - info files .
10740	Write delete marker file .
10741	Check if a virtualenv is running in a virtualenv
10742	Get username .
10743	Create a distutils distribution object for dist_name .
10744	Parse the cache - Control header
10745	Check if a request is cached .
10746	Cache the response .
10747	Update the zipimporter cache .
10748	Load template template .
10749	Install site - patch . py . py
10750	Save the current path to disk .
10751	convert value to a converter
10752	Add filters to a filterer
10753	Configure a logging handler .
10754	Add handlers to a logger .
10755	Common logger configuration .
10756	Execute a Python script .
10757	Context manager to override the temporary directory .
10758	Add url and revision
10759	Get an item from an object .
10760	Generate code .
10761	Compile Jinja2 templates .
10762	Get the default cache directory .
10763	Find eggs in a zip archive .
10764	Find eggs on the given path .
10765	Declare a package in sys . path .
10766	Return the mRO of a class
10767	Find an adapter for a registry .
10768	Ensure directory exists .
10769	Iterate over all entry points in the distribution .
10770	Returns True if the given dist can be added to this distribution .
10771	Find the best matching requirement .
10772	Evaluate marker .
10773	Evaluate a marker library .
10774	Format a record .
10775	Formats a number according to the given locale .
10776	Parse a number pattern .
10777	Gets a decimal value for a given precision .
10778	Get the decimal precision of a number .
10779	Normalize scientific notation .
10780	Return the total seconds of a datetime object .
10781	Parse a list of requirements .
10782	Return unpatched version of distutils .
10783	Verify that value is a string or list of strings .
10784	Fetches the build egg .
10785	Do dice roll
10786	Convert obj to PriceClass
10787	Create a price attribute .
10788	Validate the request .
10789	Get method from args .
10790	Apply a request to the API .
10791	The module associated with this request .
10792	The blueprint blueprint .
10793	Attach an enctype error message to the request .
10794	Return an abstract dist .
10795	Add a requirement .
10796	Walk a list of requirements to install .
10797	Check if req_to_install is skipped .
10798	Return an ordered list of install requirements .
10799	Get all namespace packages .
10800	Encodes an object into a JSON response .
10801	Tokenize a document .
10802	Merge annotated annotations .
10803	Copy annotations from source to dest .
10804	Compress a list of tokens .
10805	Serialize tokens .
10806	Expand tokens .
10807	Locate unbalanced end of unbalanced end .
10808	Replace tags in chunks .
10809	Flatten an element .
10810	Split text into words .
10811	Return HTML start tag .
10812	Return end tag .
10813	Serialize an HTML fragment .
10814	Fix ins and del tags inside .
10815	Extract constant value from code .
10816	Returns a URL for the cache URL .
10817	Autolink an element .
10818	Kill conditional comments .
10819	Parse a string into a DOM .
10820	Decorator to check that the given return value is a JsonResponse .
10821	Returns a TreeWalker instance for the specified type .
10822	Export an svn repository
10823	Get the revision of the given location .
10824	Decorator to mark setup methods .
10825	The name of the module .
10826	Determine whether or not propagate or not .
10827	Find the instance path for this instance .
10828	Update the template context .
10829	Handle an exception .
10830	Returns True if exception is raised .
10831	Handle an exception .
10832	Raise the routing exception .
10833	Perform the actual dispatch
10834	Creates a default response for the request .
10835	Creates a URL adapter for the given request .
10836	Inject default url defaults to values .
10837	Yield unique values from an iterable .
10838	Processes the requirements section .
10839	Convert a requirement to a string .
10840	Convert a pkgininfo file to metadata .
10841	Iterate over all the available modules .
10842	Iterate over all classes in this module .
10843	Returns a list of all methods defined in this class
10844	Find the basename of the given file name .
10845	Check if the given path is a module prefix .
10846	Generator for os . walk
10847	Yields the absolute path of the module .
10848	Set the default argument defaults to JSON .
10849	Set default argument decoder defaults .
10850	Set multiple keys to a set of values .
10851	Increment the value of a key .
10852	Dumps an object into a string
10853	Build editable options dictionary from request request .
10854	Populate the link for this requirement .
10855	Ensure that the build directory exists .
10856	Remove the temporary source directory .
10857	Get the distribution .
10858	Get the request body .
10859	Extract the headers from the given environ .
10860	Convert an IRI object to a native URI .
10861	Return the path to the user cache directory .
10862	Return the path to the user data directory .
10863	Return the path to the user s log directory .
10864	Returns the user - config directory for the given application name .
10865	Return a list of directories for the given application name .
10866	Iterate over all the file paths .
10867	Starts a new worker thread .
10868	Convert a string to text
10869	Find the CA bundle .
10870	Parse an HTML document .
10871	Parses the given HTML stream into a DOM tree .
10872	Parse a HTML fragment into a fragment tree .
10873	Translate a word .
10874	Convert a file to a list of tokens .
10875	Bind the server to the server .
10876	Print report .
10877	Load bytecode from file .
10878	Merge kwargs into a dictionary
10879	Run a command and return its output .
10880	Get the python implementation version
10881	Return a list of distro objects for a given location .
10882	Find external links in a page .
10883	Open a local file .
10884	Process a given URL .
10885	Return a list of paths that are not absolute paths .
10886	Return a set of paths
10887	Add a package to the specified directory .
10888	Add sitedir to the current path .
10889	Check if the user is enabled on the system .
10890	Add site - packages .
10891	Set quit and exit .
10892	Set the encoding aliases for the current platform .
10893	Set the default encoding .
10894	Force global egg - packages after local site packages .
10895	Fix sys . path
10896	Wrapper for subprocess . Popen
10897	Check if pyrex supports build_ext
10898	Convert the source file to the given language .
10899	Run the application .
10900	Get a resource .
10901	Return user - agent data .
10902	Return True if the given name is a URL .
10903	Unpack a file to a location .
10904	Download a URL to a temporary directory .
10905	Check if a link is downloaded .
10906	Register a currency .
10907	Register an exchange .
10908	Decode the response .
10909	Return the default template context processor .
10910	Render a template .
10911	Render a template .
10912	Render a template string .
10913	Parse a version string .
10914	Return True if the given name is declared in this scope .
10915	Visitor for named variable .
10916	Handle include node .
10917	Visit from import node .
10918	Create a whl file from base_dir .
10919	A decorator for atomic operations .
10920	Start a service factory .
10921	URL encode an object .
10922	Returns a list of wheels that match the requirement .
10923	Populate an InstallRequirementSet .
10924	Export the package to a temporary directory
10925	Perform an item lookup .
10926	Iterate over pages .
10927	The ancestor of this element
10928	The children of this node
10929	Safely retrieve an element .
10930	Get the text of an element .
10931	Safely get a date element .
10932	The Offer Price .
10933	List price .
10934	Send a request to the controller .
10935	Build a response .
10936	Create an attribute getter for an attribute .
10937	Convert string to title
10938	Sort a list of strings .
10939	Group elements by attribute .
10940	Perform a map operation on an item .
10941	Create a logger for the app .
10942	Compare two constant time series .
10943	Verify the signature .
10944	Derive the key derivation
10945	Return the signature of the given value .
10946	Sign a value
10947	Verify a signature .
10948	Unpack a signed value .
10949	Sign a value
10950	Validate a signed_value
10951	Dumps an object into a signature
10952	Handles a server error .
10953	Find all packages matching the given path .
10954	Yields all parent packages that require parent .
10955	Yield all directories in base_path .
10956	Return an HTTPResponse .
10957	Remove a record from a zip archive .
10958	Unpack a wheel .
10959	Install the contents of the given distributions .
10960	Prepare the graph
10961	Create a redraw canvas .
10962	Get a node by ID .
10963	Called when the graph has changed .
10964	Handle an edge event .
10965	Called when a component has changed .
10966	Handle mouse click on left click .
10967	Called when the diagram canvas has changed .
10968	Clear the diagram canvas .
10969	Called when a domain model is changed
10970	Map the domain model to a new one .
10971	Removes all elements from the model
10972	Add new element to diagram .
10973	Sets the style of a node .
10974	Parse xot data .
10975	Process font size
10976	Process an ellipse .
10977	Process a Polygon .
10978	Process a Polyline .
10979	Process a Text component .
10980	Process image tokens .
10981	Serve a GridFS file .
10982	Save the dot file .
10983	Load the DOT file .
10984	Determine if a point is within this rectangle
10985	Draw the bounding box .
10986	Perform a new graph step
10987	Connect to the database .
10988	Parses the dot data
10989	Create new graph .
10990	Opens a file dialog .
10991	Save the graph to disk .
10992	Save the model as a file
10993	Configure the graph
10994	Configure nodes
10995	Configure the edges view
10996	Shows the about robots .
10997	Add a new node to the graph .
10998	Adds a new edge to the graph .
10999	Add a subgraph to the graph
11000	Create a new cluster .
11001	Request a single graph from the graph .
11002	Update the options view
11003	Configure dot code
11004	Called when the user exits
11005	Moves x y coordinates to origin
11006	Save this instance to a file - like object .
11007	Load a file - like object from a file - like object .
11008	Save data to file .
11009	Load a file from a file .
11010	Create an alias for an attribute .
11011	Parse a text file .
11012	return list of start words
11013	Add a Markov chain .
11014	Removes a chain from the chain
11015	Build a chain .
11016	Generate a sentence from the chain .
11017	Create a graph and return it .
11018	Add a new node to the graph .
11019	Delete a node .
11020	Get a node by ID
11021	Removes an edge from the graph .
11022	Add an edge to the graph .
11023	Add a subgraph .
11024	Called when a program is changed
11025	Set the _nodes and _nodes .
11026	Parse a DOT file
11027	Parse a DOT file .
11028	Build the top graph .
11029	Build a subgraph from tokens .
11030	Return the time unit and multiplier for a given number of seconds .
11031	Format a duration in seconds .
11032	Load the graph from a new path
11033	Create the UI for this widget
11034	Split a sequence into n chunks .
11035	Yield successive windows .
11036	Main entry point .
11037	Get all children of a graph .
11038	Append a child to an object
11039	Insert a child into an object .
11040	Deletes a child from an object .
11041	Called when a node is replaced .
11042	Called when a node has changed
11043	Get the label for this object .
11044	Set the label on an object .
11045	Called when a label is changed
11046	Initialize the panel .
11047	Update the editor .
11048	Add the listeners to the canvas
11049	Replace nodes with new nodes .
11050	Called when a node changes .
11051	Add nodes to the graph .
11052	Replace old edges .
11053	Called when an edge has been changed .
11054	Add edges to the graph .
11055	Parse Xdot directive .
11056	Handle drawing event
11057	Return a node factory .
11058	Return an edge factory .
11059	Create a proxy proxy for this proxy .
11060	Parse a drawing directive .
11061	Parse a Xdot label directive .
11062	Handle drawing changes .
11063	Update the position of the widget .
11064	Called when the widget has changed
11065	Hook on right click .
11066	Display information about a specific style .
11067	Draw the main layer .
11068	Check if point is in the polygon .
11069	Draws the main layer
11070	Handle an event .
11071	Main thread .
11072	Returns the full URL for a specific page .
11073	Render previous page links .
11074	Return list of links for the page .
11075	Return True if the candidate content type matches the given pattern .
11076	Select a content type based on requested parameters .
11077	Rewrite a URL .
11078	Remove authentication from a URL .
11079	Create a URL identifier .
11080	Normalize host string .
11081	Find all modules in a directory .
11082	Recursively find all modules in a directory .
11083	Return a list of all modules in the system .
11084	List all classes in a module .
11085	List all classes in a module .
11086	Ensure directory exists .
11087	Creates a blob from a text file .
11088	Check if card number is valid .
11089	Get the current git version
11090	Load a module .
11091	Add a path to the list of paths
11092	Find a module by name .
11093	Split a line into multiple lines .
11094	Remove all namespaces from the document .
11095	Check that the version matches the desired version .
11096	Initialize an object from yaml .
11097	Merge a dictionary of actions .
11098	Execute all actions in the given directory .
11099	Create a config object from a yaml file .
11100	Add details to the message .
11101	Send a message to the rate limit .
11102	Add image_rendition to context
11103	Log an account attempt .
11104	Add a URL to the queue .
11105	Start the workers .
11106	Set a key in KVStore
11107	Get a value from KVStore
11108	Retrieves the contents of a KVStore .
11109	Returns the index for a given key
11110	Delete a key from KVStore
11111	Plots a heatmap for each feature in X .
11112	Add a number of months to a timestamp .
11113	Add months to a date .
11114	Checks if the current period is a christmas period .
11115	Set a music service .
11116	Set storage service .
11117	Read data from CSV file .
11118	Returns a list of tuples from the json file
11119	Write data to a JSON file .
11120	Filter data by reference label .
11121	Calculate the mean of each label in the data set .
11122	Compute feature importance .
11123	Restore session data .
11124	Recursively merge two dicts .
11125	Decorator to register multiple callbacks .
11126	Decorator to add a method to the dispatch method .
11127	Load all registered blocks .
11128	Verify that the given block is registered .
11129	Register a block .
11130	Unregisters the given block type .
11131	Convert a file to an mp3 file .
11132	Returns a string indicating the desired version .
11133	Redirects the request if SSL is enabled .
11134	Initialize celery .
11135	Queues an email to the database .
11136	Parse Accept header .
11137	Parse a cache control header .
11138	Parses a ContentType string into a ContentType object .
11139	Parse a forwarded header value .
11140	Parse a list of strings .
11141	Parse parameter list .
11142	Resizes an image to the specified width
11143	Add a value to the link .
11144	Download a YouTube file .
11145	Connect to Google Drive .
11146	Upload a file to Google Music .
11147	Connect to the music folder .
11148	Write sky parameters to file .
11149	Update the filenames .
11150	Read the ahpi from a file .
11151	Scale the phi by the given parameter
11152	Read the pure water absorption from a file
11153	Read the pure water scattering from a file .
11154	Read the IOP wavelengths from a file .
11155	write iop to file
11156	builds the b b
11157	Build the absorption matrix .
11158	Build the total attenuation C .
11159	Build all b and c
11160	Set batch parameters .
11161	Read parameter file .
11162	Convert a string to a list of floats .
11163	Read PR report .
11164	Create a handler for a signal .
11165	Called when a signal is running .
11166	Default handler .
11167	Pause a signal by waiting for a signal .
11168	Handle an abort request .
11169	Handle a status signal .
11170	Unregisters an event
11171	Fetch data for a metric .
11172	Returns a sorted list of values sorted by numerical values .
11173	Collect n items from an iterable .
11174	Print an item to stdout .
11175	Print all items in an iterable .
11176	Extract signature information from a function .
11177	Initialize signature from a partial partial instance .
11178	Return a copy of the argv with new_pargs .
11179	Return True if the given file should be ignored .
11180	Determine the priority of a file .
11181	Convert a VLQ to an integer .
11182	Read a table from data .
11183	Parses the archive header .
11184	Returns a duration string
11185	Print details about the game .
11186	Populate the data from the UI .
11187	Displays the search file
11188	Write the batch data to a file .
11189	Perform the actual data extraction .
11190	Displays the connection
11191	Print information about the visualization .
11192	Display the error message .
11193	Hide the error message .
11194	Execute the planar
11195	Cancel the planar
11196	Quit the program .
11197	Save the figure to disk
11198	Open the log file .
11199	Opens the documentation .
11200	Perform actions on GUI .
11201	Handles the click event
11202	Moves the mouse position to the current position .
11203	Display the graphic
11204	Return a LockSet for the given genesis block .
11205	Sign message with private key
11206	Return the SHA3 hash of the message .
11207	Check if the configuration is valid .
11208	Issues a new cash entry with the given amount
11209	Returns the lock for the highest round .
11210	Return the last voted block proposal
11211	Returns the last valid lock set
11212	Get the timeout for this round
11213	Called when a proposal is finished .
11214	Generate a list of hex keys
11215	Calculate the delay .
11216	Deliver a packet
11217	Create a proxy proxy for the given chain address .
11218	Converts an address to a native contract class .
11219	Register a native contract .
11220	Update the filter list
11221	Called when a transaction is received .
11222	Convert vgg to RGB image
11223	Convert image to VGG format .
11224	Get the F layer
11225	Get the output of a layer .
11226	Get feature features .
11227	Create a new key file
11228	Finish the bulk load .
11229	Load data from a file .
11230	Put the given items into the batch .
11231	Release a memory table
11232	List of the target tables .
11233	Replace the compile_co compiler with the given flags .
11234	Find the location of the teradata installation .
11235	Gets a configuration value from the config .
11236	Set a config value
11237	Handles table output
11238	Execute a command .
11239	Get a value from a key
11240	Write default configuration file .
11241	Set the column names
11242	Writes the GRAFFE data to the given writer .
11243	Returns a list of string values as a string
11244	Extract a float from a string .
11245	Parse a string of gains .
11246	Parse device settings .
11247	Wrap given text .
11248	Detect and return a list of devices .
11249	Set the center frequency of the peak
11250	Compute the FFT of the PSD .
11251	Wait for the result to finish .
11252	Update the PSD .
11253	Read the header and return a numpy array .
11254	Write pwr_array to file .
11255	Submits the given function to the maximum number of work .
11256	Determine the number of times to repeat .
11257	Generate a frequency plan for a given interval .
11258	Create a memory buffer .
11259	Setup the PSD data for the given bins .
11260	Stops the stream .
11261	Tells PCS to start streaming
11262	Perform a sweep of the data
11263	Set the slave address .
11264	Run CMake with CMake
11265	Return a subset of the given datetimes .
11266	Mask a datetime .
11267	Mask a given datetime .
11268	Return a subset of datetimes .
11269	Return a subset of the given datetimes .
11270	Convert a list of dates into a set of dates .
11271	Return a list of dates to be deleted .
11272	Return the control byte for this SPI device .
11273	Read a bit from the specified address .
11274	Writes a bit to an address .
11275	Get bit number .
11276	Blocking function to listen for events to an event queue .
11277	Helper function to process events from a queue
11278	Bring the GPIO interrupt into the userpace space .
11279	Set the GPIO interrupt edge .
11280	Waits until a file exists .
11281	Register a callback for a pin .
11282	Deregisters a pin function .
11283	Enables GPIO interrupts .
11284	Send a SPI command to the device .
11285	Renders the tabs .
11286	Return True if this form has any errors in this form .
11287	Render a link to the form .
11288	Extract the version of a package .
11289	Returns the keyword arguments for the form .
11290	Check the status of the response .
11291	Perform a GET request
11292	Get download link .
11293	Get a file link .
11294	Upload a file to a folder
11295	Upload a remote URL to a folder .
11296	Get status of a remote upload .
11297	Get a folder .
11298	Retrieve a list of files in a folder .
11299	Calculate humidity .
11300	Calculate windpoint from temperature and temperature .
11301	Publish a message .
11302	Get the CRC of the given data .
11303	Verify the CRC of data
11304	Unpack a date into a string .
11305	Determine whether or not a file rev or not .
11306	wakeup device
11307	Send a command to the device
11308	Send DMPFT command .
11309	Get the newest record
11310	Parse the loop .
11311	Upload weather data to publishers
11312	Initialize logging .
11313	Returns a list of all available services .
11314	Get wind speed from station
11315	Set parameters for wunderground .
11316	set the args
11317	Publish configuration to file .
11318	Decorator for view functions .
11319	Initialize the application .
11320	Check if requirements are fulfilled .
11321	Push a context onto the override stack .
11322	Pop the override context .
11323	Context manager to override the current context .
11324	Add additional context to the stack .
11325	Remove an additional context from the stack .
11326	Add additional information to the context .
11327	Undo duplicated field names
11328	Interpret the results .
11329	Extract params from a query string
11330	Run a query and return the result .
11331	Get a pandas DataFrame from the dataframe .
11332	Returns the networkx graph as a MultiDiGraph object .
11333	Plot pie chart .
11334	Plot the data .
11335	Create a bar plot .
11336	Writes the results to a csv file .
11337	Decorator that checks if the user has permission to login .
11338	Add widget data to the context .
11339	Return a list of widgets sorted by position
11340	Returns a list of widgets that need to update
11341	Register a dashboard .
11342	Unregisters given widget class .
11343	Gets the last update update of this Dashboard .
11344	Get a dashboard setting .
11345	Save a dashboard setting .
11346	Determine if the last update_interval is needed .
11347	Create a numpy array from an array .
11348	Return an array of ones filled with the given shape .
11349	Concatenate multiple Spark arrays .
11350	Checks the arguments of the given arguments .
11351	Helper function for formatting axes arguments .
11352	Wrap a function in parallel .
11353	Align the array to the given axes .
11354	Convert Series to Spark .
11355	Sort Series .
11356	Return a new RDD of RDDs .
11357	Apply a function to each RDD .
11358	Create a chunk of the RDD .
11359	Applies a function to each chunk .
11360	Apply func to each RDD .
11361	Calculate the plan for this dataset .
11362	Remove padding .
11363	Calculate the number of chunks for a plan .
11364	Convert a plan to a list of slices .
11365	Create a boolean mask from a list of indices .
11366	Return a copy of this RDD .
11367	Create a new StackedArray from this RDD .
11368	Align the given axis to the given axis .
11369	Get the first element in the RDD .
11370	Compute statistics .
11371	Compute mean .
11372	Compute variance .
11373	Compute standard deviation .
11374	Sum of the DataFrame .
11375	Maximum value .
11376	Calculate the minimum value .
11377	Returns a chunk of this RDD .
11378	Swap the values of a key in the array .
11379	Transpose self .
11380	Swap two axes .
11381	Reshape this array .
11382	Reshape self .
11383	Remove one or more dimension .
11384	Create a new RDD with the given dtype .
11385	Clip this RDD .
11386	Convert this RDD to a numpy array .
11387	Convert an argument to a tuple .
11388	Convert a list of arguments to a tuple .
11389	Assert that the given shape is a valid shape .
11390	Return True if two arrays are equal .
11391	Ensure a list is a list of integers .
11392	Convert a slice to a slice .
11393	Check if two axes are transposeable .
11394	Check that new keys are reshapeable .
11395	Recursively flatten a list of arrays
11396	Expand an array .
11397	Zips an RDD with index elements .
11398	Decorator to wrap a function
11399	Return a ConstructLocal instance for the given arguments .
11400	Reshape this RDD .
11401	Return a new BoltArray with the given axes .
11402	Return a new array with a new shape .
11403	Return a new RDD with the given axes .
11404	Return an instance of one or more ones .
11405	Create a new instance of zeros .
11406	Concatenate multiple arrays .
11407	Determine the discrete likelihood of the given data .
11408	Return the most likely alpha value for a given xmin .
11409	Determine the discrete alpha .
11410	Determine the most likely alpha .
11411	Determine the best alpha for the given data .
11412	Plots the probability density plot .
11413	Compute the likelihood of the data .
11414	Sanitize HTML .
11415	Configure an Analytics Analytics
11416	Return a list of tags for the given list of tags .
11417	Return the MD5 hash of the key .
11418	Return the SHA256 hash of the key .
11419	Return the SHA512 hash of the key .
11420	Parse a long integer .
11421	Decode a public key
11422	Parse command line options .
11423	Parse SSH RSA key data .
11424	Decode SSH DSA data .
11425	Process ECDS signature .
11426	Processed ed25516 key .
11427	Parse SSH key data .
11428	Process a single step .
11429	Step a single token .
11430	Get a list of mechs .
11431	Store a new credentials .
11432	Main entry point .
11433	Initialize setup .
11434	Create a new audio file .
11435	Template tag for django - frontend links .
11436	Template tag for django frontend .
11437	Render fontawesome font .
11438	Displays the moderniziz site .
11439	Template tag for django - frontend .
11440	Template tag for django - frontend .
11441	Template tag for django . datatables
11442	Generate a javascript link to the DJFT frontend tables .
11443	Link to the jquery_datatables_jango_jango_jango_jango_jango_jtables_jango_jango_jango_jtables_jango_jango_jango_jango_jtables_jango_jango_jtables_jango_jango_jango_jango_jango .
11444	Template tag for django - frontend
11445	Template tag for django s scrollend .
11446	Render jquery s smooth scroll
11447	Template tag for django . twbs . twbs
11448	Template tag for django - frontend
11449	Render textarea .
11450	Generate an iterable of auth hashes for a user .
11451	Calculate the expiration time .
11452	Get user token .
11453	Serialize obj to profile .
11454	Deserialize a profile .
11455	Update a user .
11456	Called when an authentication failed .
11457	Checks if the token is valid .
11458	Check if request is secure
11459	Get username from user
11460	Create a new user .
11461	do login
11462	Logout the user
11463	Authenticate with the given parameters .
11464	Authenticate with a user .
11465	Login to the user .
11466	Change the user s password
11467	Send a password to the user
11468	Reset a user s password .
11469	Recursively merge two dicts .
11470	Read the contents of a file .
11471	Get the AleaId field of an object .
11472	Get metadata for a list of objects .
11473	Get the object s primary key .
11474	Get a dict of object ids for the given meteoroids .
11475	Get an object from the meteora model .
11476	Set the default redeor id for all documents .
11477	Set the default metadata for each object .
11478	Truncate all models .
11479	Truncate the database .
11480	Truncate the database .
11481	Initialize options .
11482	Set the options to be used for building .
11483	Run the meteor build .
11484	Convert path arguments to a directory .
11485	Seed the database .
11486	Dictionary representation of state
11487	Generate a random string of given length .
11488	Decorator to mark an API endpoint .
11489	Yield all the API endpoints for an object
11490	Clears all registered API paths .
11491	Print name and value .
11492	Validate keyword arguments .
11493	Called when the websocket connection is received .
11494	Called when a connection is closed .
11495	Called when a message is received .
11496	Yield frames from a SDP message .
11497	Process a DDP message .
11498	Dispatch a message .
11499	Handle a connection .
11500	Receive a ping .
11501	Receive a sub subscription .
11502	Receive a subscription .
11503	Receive a method .
11504	Serve websocket info .
11505	Run DDP server
11506	Entry point for the command line interface .
11507	Print msg if verbosity is level .
11508	Stop all threads .
11509	Start postgres greenlet
11510	Run the connection .
11511	Poll notifications .
11512	Patch all threads .
11513	Generate a random random ID .
11514	Auto discover API .
11515	Return the result as a dict .
11516	Get an instance of a given factory .
11517	Send a record to the server .
11518	Create a middleware that negotiates a request handler .
11519	Context manager for adding a route context .
11520	Add a resource object to the route .
11521	Main entry point for the application .
11522	Send a message to the device .
11523	Send a notification to the APNS .
11524	Return a list of inactive IDs .
11525	Send a GCM message to GCM .
11526	Send a GCM message to GCM .
11527	Send JSON request to GCMP .
11528	Send data to the API .
11529	Returns a model class from a module location .
11530	Run the fast forward selection algorithm .
11531	Search for a given term .
11532	Translate a term to a phrase .
11533	Return a list of trending tweets .
11534	Get a GIF by its ID
11535	Shows a screenshot .
11536	Upload tags to a file .
11537	Convert frames to integers .
11538	Fetch data from API endpoint
11539	Translate a term or phrase
11540	Return a generator of Giphy images .
11541	Returns a Giphy Image object
11542	Upload a gif to a given file .
11543	Generate access control element .
11544	Authenticate with Google .
11545	Create a video entry .
11546	Check the status of a video .
11547	Update a video entry .
11548	Delete a video entry .
11549	Check the status of a video
11550	Check the status of a video
11551	Displays the user s videos .
11552	Direct upload to youtube server
11553	Upload a video .
11554	Handles upload requests .
11555	Remove video from database .
11556	Get video entry
11557	Saves the video instance .
11558	Delete a video .
11559	Update the metadata of the container .
11560	Updates a specific metadata field .
11561	Update this item s attributes .
11562	Parse a string and return a list of nodes .
11563	Dump a tree to a newick string .
11564	Load data from a file - like object .
11565	Load the contents of a file .
11566	Parse a string into a Node .
11567	Create a new node .
11568	Return a string representation of the tree .
11569	Generate ASCII art .
11570	Get the node with the given label .
11571	Remove nodes from the tree .
11572	Resolve polytomies .
11573	Removes internal names
11574	Removes all leaf names
11575	Decorator to check if a user is authenticated
11576	Disposes a JSON string .
11577	Raise an exception if the given setting does not exist .
11578	Get a single argument from the request .
11579	Return a list of all the values in the request .
11580	Create an async callback .
11581	Get a cookie .
11582	Clear a cookie
11583	Redirect to the user .
11584	Get the authenticated user .
11585	Calculate the parameters for a request .
11586	Redirect to the authorization endpoint .
11587	Send a request to Facebook .
11588	Get the authenticated user .
11589	Concatenate a URL with the given arguments .
11590	Parse a header line .
11591	Add a new header value .
11592	Get a list of headers .
11593	Parse a single line .
11594	Parse headers .
11595	Normalize header name .
11596	Ensure value is UTF - 8 .
11597	Convert value to unicode .
11598	Convert a string to a byte string .
11599	Recursively convert unicode objects to unicode
11600	Check that all registered auth plugins are valid .
11601	Iterate over all subclasses of cls .
11602	Select a policy based on the current policy .
11603	Determine if a grid is occupied
11604	Write a ROOT file
11605	Write a PDB file
11606	Determine a list of molecules .
11607	Resize PBCs for given lipids .
11608	Write a topology file .
11609	Yields the contents of a resource file .
11610	Send a message to the specified user .
11611	Send a message to a list of users
11612	Get all messages for a given user .
11613	Add messages to the request .
11614	Check config file .
11615	Verify that the given profile is in the config .
11616	Retrieve data from a protobuf message .
11617	Retrieve user password from config .
11618	Update config data in cfg
11619	Update the user s password
11620	Create a config message .
11621	Print the required items for a profile message .
11622	Get data from user
11623	Get authentication information from the user .
11624	Configure a profile .
11625	Write data to profile .
11626	writes the auth header
11627	Add attachments to message
11628	Send message .
11629	Sends a message .
11630	Create a message based on the given type .
11631	Create a private property .
11632	Creates a property that will validate the given attribute .
11633	Validate incoming message .
11634	Checks to see if the input attribute is valid .
11635	Validate slack post .
11636	Checks the watsapp attribute .
11637	Coroutine to send messages .
11638	Add a message to the queue .
11639	Get body from file .
11640	Remove duplicate keys from keyword arguments .
11641	Send a message .
11642	Get chat id
11643	Send the content to the server .
11644	Send the message .
11645	Return the SMTP server name .
11646	Generate the email .
11647	Add headers to message
11648	Attach the body to the message .
11649	Add attachments to the message .
11650	Get a session
11651	Return an smtplib object
11652	Return a SMTP session object .
11653	Send email .
11654	Save image to file .
11655	Unload the image .
11656	Get a region of the image .
11657	Validate the dictionary .
11658	Clear the internal list .
11659	Serialize the object to a byte string .
11660	Read the file .
11661	Delete the file .
11662	Resize the file .
11663	Insert a new chunk into this file .
11664	Save the ID3 file .
11665	Deletes the given file .
11666	Parse a file .
11667	Process a line .
11668	Add a block to the block
11669	Draw a string on the given font .
11670	Parse an ISO 8601 time string .
11671	Make a list of words .
11672	Make an HTML word .
11673	Create an HTML para for a list of words .
11674	Make HTML code .
11675	Make HTML code .
11676	Save metadata to file .
11677	Update parent path
11678	Start the event loop .
11679	Register a mapping .
11680	Get the controller for a given controller and product id .
11681	Register a freeform key .
11682	Return the HMAC - SHA - 256 encoded string .
11683	Get the headers for the route .
11684	Send request to Route53
11685	Send GET request
11686	Send POST request
11687	Send a DELETE request
11688	Return an APEval value .
11689	Send a request to the server .
11690	Perform an autopaginating API call .
11691	List all hosted zones .
11692	Create a new hosted zone .
11693	List resource record sets by the given zone ID .
11694	Generate a change record set .
11695	Draw an image .
11696	Draw a region of an image .
11697	Calculate the size of the packet .
11698	Replace old pages .
11699	Find the last page of the given stream .
11700	Set a section .
11701	Add a new DocMarkup object
11702	Processes given content .
11703	Return the markup with the given tag name .
11704	Create a new hosted zone .
11705	Lock a file - like object
11706	Insert bytes into a file - like object .
11707	Delete bytes from a file - like object .
11708	convert data to UTF - 8
11709	Add a change .
11710	Parses a change XML element
11711	Measure the width of a string .
11712	Return True if the object has been modified .
11713	Delete this hosted zone record .
11714	Save this resource record .
11715	Parse ID3v1v1v1 tag .
11716	Make an ID3v1 v1v1 v1v2 v1v2v2 .
11717	Perform a full read operation .
11718	Deletes all keys matching a key
11719	load a frame
11720	Update common APIC files .
11721	Convert the frame to 2 . 4 . 4 . 4 . 4 . 4 . 4 . 4 . 4 . 4 . 4 . 4 . 4 . 4 . 4 . 4 . 4 . 4 . 4 . 4 . 4 . 4 . 4 . 4 . 4 . 4 . 4 . 4 . 4 . 4 . 4 . 4 . 4 . 4 . 4 . 4 . 4 . 4 . 4 . 4 . 4 . 4 . 4 . 4 . 4 . 4 . 4 . 4 . 4 . 4 . 4 . 4 . 4 . 4 . 4 . 4 . 4 . 4 . 4 . 4 . 4 . 4
11722	Unload sound .
11723	Play sound .
11724	Set the loop points for the audio recording .
11725	return a list of glyphs and values
11726	Return a list of glyph names that match the given filter .
11727	Dump an encoding table .
11728	Dump the array to a file
11729	NAME all glyph names .
11730	Check if a file exists
11731	Generate a list of file paths .
11732	Parses a HostedZone instance into a HostedZone instance .
11733	Parses the delegation set element .
11734	Convert a list of blocks to a binary string .
11735	Group padding blocks .
11736	Delete the metadata block
11737	Save audio to file .
11738	Parses an RRset alias .
11739	Parses a list of RRset values
11740	Parse an XML record .
11741	Delete this hosted zone .
11742	Add a record to the hosted zone .
11743	Create a new record .
11744	Create a new AAAAR record .
11745	Create a new CNAME record .
11746	Create a new MX resource record .
11747	Create a new NS resource set .
11748	Create a new PTR record .
11749	Create a new SPF record .
11750	Create a new SRV record set .
11751	Create a TXT record set .
11752	Register a txt key .
11753	Extract the initial values from a change set .
11754	Write a change to a ChangeRecord
11755	Generate a ChangeRecordSetRequest XML document .
11756	Initialize logging .
11757	Retrieve an item by its alias .
11758	Freeze a dictionary into a sorted tuple .
11759	Join HTML attributes .
11760	Initialize the application .
11761	Initialize all bars .
11762	Bind a new bar .
11763	Return the arguments as a dictionary .
11764	The URL for this endpoint .
11765	Return True if current URL is current
11766	Validate a metric class .
11767	Get a stat by name .
11768	Calculate statistics .
11769	Autodiscover gadgets .
11770	Dump statistics to a csv file .
11771	Handles maintenance .
11772	Get a list of values from a GET request .
11773	Returns a boolean value as a boolean
11774	Get next colour in settings
11775	Returns a dict of gecko parameters .
11776	Returns the number and cumulative number of statistics
11777	Displays a list of metrics for the given uids .
11778	Generate a line chart for a given metric .
11779	Returns a tuple of the latest metrics for the given geckoboard .
11780	Takes a geckoboard and returns a dict with the most recent number of available metrics .
11781	Return a list of inactive gadgets .
11782	Register a gadgets .
11783	Returns the context data for this widget .
11784	Prints an error message .
11785	Decorator to validate parameters
11786	Prompts for a user input .
11787	Prompt the user for a list of strings .
11788	Prompt user for input filename
11789	Returns a pandas DataFrame containing games for a given year .
11790	Returns the winner of the game .
11791	The season of the game .
11792	Returns a pandas DataFrame of starters .
11793	The surface of the game .
11794	Get coin Toss .
11795	Weather data .
11796	Information about the team s ref .
11797	Returns a pandas DataFrame containing all players for the given kind .
11798	Returns a pandas DataFrame containing all standings for the team .
11799	Returns a pandas DataFrame containing the team stats .
11800	Return a pandas DataFrame of Roting votes .
11801	Returns a pandas DataFrame of the team s team scores .
11802	Returns the season of this week .
11803	Get stats for each team .
11804	Decorator to switch to the decorated function .
11805	A decorator that checks if a URL is stale
11806	Generate a unique key for the class and kwargs .
11807	Decorator for memoization .
11808	Returns the age of a year
11809	Get a pandas dataframe from a table .
11810	Get the stats for the per game .
11811	Get the total totals for the distribution .
11812	Return the per minute stats
11813	Return the stats for perPoss .
11814	Get the statistics for the advanced statistics .
11815	Return a stats table for the given machine .
11816	Return the statistics for a given endpoint .
11817	Returns a DataFrame with the basic stats for the given year .
11818	Obtain session data
11819	Expand the details of the details in the main dataframe
11820	Add team columns to features .
11821	Add feature features to dataframe .
11822	Calculate initial probability for a line .
11823	Return a pandas DataFrame containing the passoff data .
11824	A simple year award for a single year .
11825	Returns team name
11826	All box scores for a given year .
11827	Look for a year in a year .
11828	Get the head of the game by year .
11829	Returns a pandas DataFrame for the given year .
11830	Return the off coordinator of a given year .
11831	Return the def coordinator for a given year .
11832	Return team ID for a given year .
11833	Get the offensive scheme .
11834	Return the default alignment for a given year .
11835	Return a pandas DataFrame with the split values for the given year .
11836	get html from url
11837	Flatten links to text .
11838	Convert a URL to an ID .
11839	Convert keyword arguments to a query string .
11840	Read data from HDF5 .
11841	Releases the lock .
11842	Get the direct access to the read queue .
11843	Close the connection .
11844	Get a batch of batches from the dataset .
11845	Get the remainder of a file
11846	Get a queue from the dataset .
11847	Get a generator from a queue .
11848	Parses a file - like object .
11849	Write pb_objs to a file .
11850	Read a varint from the stream .
11851	Get objects from the stream .
11852	Close the file .
11853	Write pb2 object to the file .
11854	Flush all buffered records .
11855	Get the directory of the game s directory .
11856	Uses keyboard input to input text .
11857	Make a fake movie .
11858	Evaluate the trait s traits .
11859	Waits until a condition is reached
11860	Waits until all traits are present .
11861	Sets ignored_exceptions to be ignored .
11862	return the current volume
11863	return the source
11864	Sends a message to the socket
11865	Returns the status of the player .
11866	Power off the device .
11867	Power on the device .
11868	Set the volume .
11869	Set device .
11870	Disobfuscate a view .
11871	Calculate the CRC of a given plaintext .
11872	Blobfuscate a value
11873	print a missing schema
11874	returns list of all links
11875	Check if the song name is a song name .
11876	Parse a song
11877	returns a url for a song
11878	Parses a Google website .
11879	Parses a song .
11880	Get the HTML response of a given URL .
11881	Download file using requests library .
11882	Download file using wget
11883	Find stations by city name .
11884	Returns observation information for a given location .
11885	Parse observation response
11886	Returns information about a station
11887	Return a list of paths to search for this index .
11888	Return a list of all the supported compiler extensions .
11889	Return the mimetype .
11890	Return the mime type of the compiler .
11891	Determine the extension extension extension .
11892	Register a processor for a mimetype .
11893	Remove a processor from a mimetype .
11894	The list of paths to finders .
11895	Register default defaults .
11896	Try to import Qt module .
11897	Get metanode object
11898	Add a netnode plugin name
11899	Delete a netnode plugin name
11900	Import settings from a config file
11901	Exports settings to a QSettings object
11902	The DAGSettings object for this plugin .
11903	Iterate over keys .
11904	Simple error handler .
11905	Get a DynamoDB table .
11906	List all tables
11907	Fetch items for given category
11908	Get the ID of a metadata object
11909	Get the updated timestamp of an item
11910	Get the owner of a crate .
11911	Fetch the owner of a crate .
11912	Fetch versions of a crate .
11913	Fetch a crate version
11914	Fetch raw data for a crate
11915	Get the category summary
11916	Get a list of crates
11917	Get a crate by ID
11918	Get the raw attribute of a crate .
11919	Fetch items from path
11920	Fetch items from category .
11921	Return number of questions for given category .
11922	Returns a generator of questions .
11923	Fetch events from category .
11924	Get the updated timestamp of an event
11925	Determine the category of an item .
11926	Get items from ReMo API .
11927	List of buffer list .
11928	Priority of IOCB .
11929	Close the IO context .
11930	Submit transfer blocks .
11931	Cancel an IOCB .
11932	Cancel all transfers .
11933	Get events from the queue .
11934	Fetch events for given category .
11935	Get all cells spreadsheet .
11936	Parse the feed
11937	Get export formats for given pid_type .
11938	Default permission factory .
11939	Create Invenio_records blueprint .
11940	Create a url rule .
11941	View for a record .
11942	Default view method .
11943	Export a record .
11944	Time a callable .
11945	Close the socket .
11946	Remove a client .
11947	Increment a counter .
11948	Sends a timing metric .
11949	Record the time since the given time .
11950	Send a gauge .
11951	Send a gauge delta .
11952	Sets a metric .
11953	Send data to the client .
11954	Get a batch client .
11955	Return a unit test client .
11956	Flush all pending batches .
11957	Custom PermissionChecker factory
11958	Get a batch client .
11959	Flush all pending batches .
11960	Return a new unit client .
11961	Creates a user with the given password and permissions .
11962	Convert an object to an OpenMath object .
11963	Converts a term to an OpenMath term
11964	Convert an OM object to a Python object .
11965	Convert an object to an OpenMath object .
11966	Register a conversion function to an openmath .
11967	Registers a converter to python type .
11968	Initialize the Flask application .
11969	Generator for valid choices
11970	Split model fields into dictionaries .
11971	Decorator to register a function .
11972	Creates a value based on the given object .
11973	Return default form data .
11974	Decorator to check if a field is required
11975	Decorator for field choices attribute .
11976	Generate data for a decimal field .
11977	Generate email field data .
11978	Generate a random string from a date field .
11979	Generate a random datetime for a field .
11980	Returns a string representation of a float field .
11981	Formats a field for integer field .
11982	Generate a random time field .
11983	Generate a random choice field .
11984	Return the data for multiple choice field .
11985	Return random data from queryset .
11986	Encodes a Python object into a string .
11987	Publish package .
11988	Tag current version
11989	Decorator to check if any field is not null .
11990	Load a global variable from a python module .
11991	Create a new class from an instance .
11992	Create an OML list .
11993	Create an application for a tuple .
11994	Decode string to bytes .
11995	Encode a string with RLE bytes .
11996	Convert a number to a fixed number .
11997	Formats a number .
11998	Convert number to money format
11999	Convert blosc data to numpy array .
12000	Convert an array to a blosc compressed data .
12001	Add a workspace .
12002	Remove a workspace .
12003	List all available workspaces
12004	Get a Widget by name
12005	Check if a repository exists in the workspace .
12006	synchronize a workspace
12007	Clone a remote repository .
12008	Check if ndio is available .
12009	Extract voxels from a numpy array .
12010	Convert a list of voxels into a numpy array .
12011	Print the current workspace .
12012	print latest update
12013	Add a console handler .
12014	Execute a command and return the process .
12015	Load image from png file .
12016	Save numpy array to PNG file .
12017	Save a collection of numpy arrays .
12018	Print a workspace .
12019	Print repository status
12020	Get the block size
12021	Post cutout and chunking .
12022	Load a tiff file .
12023	Save numpy data to PNG file .
12024	Load data from TIFF file .
12025	Writes the config to disk
12026	Clone the current branch
12027	Get the version of yoda .
12028	Takes a greeting and prints it with a greeting .
12029	Wrap the command line options .
12030	Reserve ids for a given quantity
12031	Merge multiple ids .
12032	set propagate status
12033	List all projects in the dataset .
12034	Get a single dataset by name .
12035	Returns a list of all available datasets .
12036	Add command line options
12037	Show information about a given workspace .
12038	Shows a workspace
12039	Show all workspace
12040	Returns the URL for the given endpoint .
12041	Try to guess the format from the file extension .
12042	Opens an image .
12043	Convert one file to another .
12044	Build a build graph .
12045	Compute invariants .
12046	Convert a graph to the given format .
12047	Convert a list of ramons into a dictionary .
12048	Return the RAM on the given type .
12049	Delete a channel .
12050	Add a dataset to the model .
12051	Convert dataset to JSON .
12052	Create a dictionary for the dataset .
12053	Create a channel dictionary
12054	Create a project dictionary .
12055	Determine the size of an image .
12056	Upload data to ndio
12057	Find a workspace in the workspace .
12058	Get public tokens
12059	Returns project information
12060	Set the metadata for an OCP token
12061	Perform a GET request
12062	Wrapper for requests . post
12063	Delete a URL .
12064	Loads data from hdf5 file .
12065	Save an array to an HDF5 file .
12066	Infer gaps in a tree
12067	Take a list of io objects and return the result
12068	Install gettext translations for jinja2
12069	A context manager .
12070	Returns the percentage of the given part .
12071	Get cache stats .
12072	Get server slugs .
12073	Return the context data .
12074	Show server status .
12075	Show memcached stats .
12076	Show memcache statistics .
12077	Show a list of slabs .
12078	Convert a number of bytes into a human readable string .
12079	Find a Config object from a dictionary .
12080	Add children to the environment .
12081	Applies the applicator applied to the configuration .
12082	The path of the file .
12083	read the file
12084	Write data to file .
12085	Configure the logging .
12086	Create the file .
12087	Apply an applicator to this node .
12088	The path of this node .
12089	Remove this directory .
12090	Prepares all children .
12091	Cleanup the container
12092	Returns the path to the target directory
12093	Return a list of File objects .
12094	Write data to a file .
12095	read a file
12096	Add one or more files to this directory .
12097	Save configuration to disk
12098	Load yaml file
12099	Remove the temporary directory .
12100	Load all plugins in a directory
12101	Recursively update a dictionary .
12102	Create a child node for the given path .
12103	Resolve the path
12104	Get the value of the field .
12105	Update the configuration with the given options .
12106	Load the configuration .
12107	Return a string representation of a config object .
12108	Builds the URL for the given message .
12109	Read input from socket and process it .
12110	Send output to socket .
12111	send an RPC request
12112	Read input from socket .
12113	Write output to socket .
12114	Decorator to raise a RuntimeError .
12115	Gets the remote set modes from a remote link
12116	Configure a NAT node .
12117	The source address of the link .
12118	The target address of the link .
12119	Called when a session is closed .
12120	Create a new sender .
12121	Request a sender link .
12122	Create a new receiver .
12123	Request a receiver link .
12124	Called when a connection is destroyed .
12125	Called when the session is closed .
12126	Process an endpoint event .
12127	Extend mark pattern .
12128	Called when the receiver is closed .
12129	Called when the receiver failed .
12130	Extract host and port from an AMQP server_address .
12131	create a socket
12132	create a server socket
12133	Return the number of connections that need to be processed .
12134	Decorator to check if connection is not reentrant .
12135	Process a SASL connection .
12136	Return the next output of the stream .
12137	Create a new sender .
12138	Reject a sender link .
12139	Create a new receiver .
12140	Called when a connection failed .
12141	Called when the connection is active .
12142	Called when the connection is closed .
12143	Called when an error occurred .
12144	Decorator for Twilio authentication .
12145	Returns a string representation of the color .
12146	Returns a dict of all font files in the search path
12147	Sets the compression flag .
12148	Add a new object to the buffer .
12149	Append a string to the buffer .
12150	Print stream .
12151	Add a new page .
12152	Set the color scheme
12153	Set the default font
12154	Add a new page
12155	Sets the font size
12156	Add text to PDF .
12157	Add a new line .
12158	Add a pie chart to the page .
12159	Output the pages .
12160	Get list of orientation changes
12161	Output font files .
12162	Output images .
12163	Output the image .
12164	Apply transformation to the image .
12165	Returns the absolute position of x and y .
12166	Set style .
12167	Rotate a point to a point .
12168	Sets information about the object .
12169	Set display mode
12170	Write the document to disk .
12171	Put header .
12172	Output pages .
12173	Put resource dict into document
12174	Print information about the object .
12175	Write catalog .
12176	Add trailer to file
12177	Flatten a sequence of sequences using floyd .
12178	A naive implementation of naive implementation .
12179	Generate a sequence of sequences from a sequence .
12180	Takes a sequence of sequences and returns a brent .
12181	Determine if x is greater than length
12182	Determine if y is fit
12183	Checks if the x coordinate is greater than the x - coordinate .
12184	Returns True if the y_ordinate is greater than the y_ordinate .
12185	Returns a copy of the current cursor .
12186	Increases the x - axis .
12187	Add dy to y
12188	Draw the table .
12189	Create a new tag .
12190	List all tags
12191	Get labels by name .
12192	Update a label .
12193	Delete a tag
12194	Create a new tag
12195	Get a list of tags .
12196	Retrieve tags with the specified label .
12197	Create a hook .
12198	List all hooks
12199	Update a hook
12200	Create an alert .
12201	Get alerts by type .
12202	Update an alert .
12203	Setup the extension .
12204	Returns the path to the theme .
12205	Makes a POST request .
12206	Return a list of all known hosts
12207	Get a single log set .
12208	Find a tracker for a piece of piece .
12209	Calculate the duration in seconds .
12210	Update the parameters .
12211	Compute the model .
12212	Initialize data .
12213	Returns a free pointer to the array .
12214	Receive data from the socket .
12215	Generator for line generator .
12216	Generator for iterating over data
12217	Get status and message from server
12218	Generate info generator
12219	Generate info .
12220	Send a command to the server .
12221	Get capabilities .
12222	Sets the mode of the server .
12223	Quit the server .
12224	Send a DATE command .
12225	Send HELP command .
12226	Generator for new newsgroups
12227	Generator for NEWNEWS
12228	Return a list of news
12229	Return a generator of active newsgroups .
12230	Generate a list of active times .
12231	Generator for listing newsgroups
12232	Generator for LIST OVERVIEW .
12233	Generator for listing extensions
12234	Return a list generator .
12235	Return a list of strings .
12236	Get group information .
12237	The next NEXT command .
12238	Send an article
12239	Send HEAD request
12240	Return the body of a NNTPR message .
12241	Send XGT title .
12242	Send an XHDR command .
12243	Send an XZHDR command .
12244	Generator for XOVER packets .
12245	Generator for xpat command .
12246	Return a list of features matching the given pattern .
12247	Send a compressed Xfeature command .
12248	Send a POST request .
12249	Calculate the offset of an integer .
12250	Convert a value to a timestamp .
12251	Convert a string to a datetime object .
12252	Perform an HTTP POST request .
12253	Perform an HTTP DELETE request .
12254	Make a GET request to the API .
12255	List scheduled queries .
12256	List tags associated with this account .
12257	Get tags by name or id
12258	Create an alert .
12259	Delete a tag .
12260	Create a scheduled query .
12261	Create a new alert
12262	Delete an alert tag .
12263	Unparse an integer or tuple .
12264	Parse newsgroup info
12265	Parse a single header line .
12266	Convert a list of headers to a string .
12267	Do a POST request
12268	Run a test suite .
12269	Return a docstring of defaults .
12270	Add default kwargs to function docstring .
12271	Generate a docstring from defaults .
12272	Set the value of the parameter
12273	Check that the value is of the correct type .
12274	Return the value of the variable
12275	Check if value is a scalar type .
12276	Calculate the squared error .
12277	Set errors .
12278	Set the bounds .
12279	Import metrics .
12280	Convert metrics to a dictionary
12281	Filter metrics according to the filter expression
12282	Call the RPC method
12283	Parse an expression .
12284	Parse operator .
12285	Perform an op .
12286	Initialize missing properties
12287	Return a list of Parameter objects
12288	Return a list of parameter values .
12289	Return the error errors for all parameters .
12290	Clears all derived parameters
12291	Set the method s method
12292	Parse the environment variables .
12293	Get the URL parameters .
12294	Perform a GET request
12295	Do a DELETE request
12296	Perform a POST request
12297	Perform a PUT request
12298	Call the API .
12299	Validates that sceneInfo is correct .
12300	Verify type of satellite
12301	Get the size of a remote file
12302	Download scene .
12303	Validate bands
12304	Establish a connection to Earthexplorer
12305	Returns a function that takes a prefix of a given string .
12306	Convert a string to a timezone name .
12307	Convert a datetime object to a timezone .
12308	Concatenate an iterable .
12309	Get the positions of newlines in text .
12310	Makes a point to a source position .
12311	Dump results to text
12312	Remove metrics from the response .
12313	Create a fortune object from a list of fortune files .
12314	Set a random fortune .
12315	Main entry point .
12316	Parse a rule .
12317	Apply special handling .
12318	Gets the grammar for the input file .
12319	The rules in the grammar .
12320	The list of comments in the grammar .
12321	A list of directive directives .
12322	Return the compiled source code .
12323	Generate the parser .
12324	Return the imports of the module .
12325	Generate the enum type .
12326	Generate a parser class .
12327	Returns the entry point name .
12328	Get the grammar for the given rule .
12329	Get the source of the given rule .
12330	Get the transform directive for the given rule .
12331	Convert an AST to an ASN node .
12332	Convert an AST node to an ASN .
12333	Takes a list of operands and returns them as a list
12334	Recursively remove grouping groups .
12335	Convert AST to code .
12336	Convert an AST node to code .
12337	Convert a terminal AST to code .
12338	Convert an option group to code .
12339	Convert a repetition group to code .
12340	Convert special handling special handling .
12341	Generate code for an AST node .
12342	Generate code for an AST node .
12343	Convert an AST node to a code block .
12344	Return code for repeated operation .
12345	Convert an AST node to code .
12346	Find directives that match pred .
12347	Return True if the child is a child of the parent .
12348	Yield directives from a comment .
12349	Handle the results of the API .
12350	Get an id .
12351	remove a hotkey
12352	Add command line arguments .
12353	Configure logging .
12354	Validate the arguments
12355	Converts a list of nodes into postfix operators .
12356	Convert a list of nodes to an OptreeNode .
12357	Reduce a list of nodes into an OperatorNode .
12358	Add command line arguments
12359	Load the manifest .
12360	Get a metric definition by name
12361	Calculate the length of the fields column .
12362	Calculate the width of the metrics column
12363	Escapes underscores .
12364	Print field markdown .
12365	Print the metric markdown
12366	Generate markdown file
12367	Parses the input and returns a tree .
12368	Makes sure that the text has been consumed .
12369	Add command line arguments to parser .
12370	Parses a time string into a datetime object .
12371	Outputs the output of the aggregates
12372	Outputs the output of the output
12373	Output raw JSON
12374	Translate the JSON output to XML
12375	Return True if the parse node is empty .
12376	Pretty print a tree .
12377	Returns a function that returns a repetition .
12378	Get a terminal node .
12379	Get a repetition .
12380	Returns the exclusion value for the given exclusion .
12381	Count leading whitespace in text .
12382	Call extractor .
12383	Get the position of this node .
12384	Returns True if all children are empty
12385	Add ignored items to the parser .
12386	Check if value is a type of type
12387	Return a new ParseNode with a flattened leaf .
12388	Return a copy of this node with a trimmed tree .
12389	Return a copy of this ParseNode .
12390	Return a new ParseNode with new_type .
12391	Return a copy of this ParseNode .
12392	Return a new Position object .
12393	Return the max readed position .
12394	Step the next character in the list .
12395	Move the next line to the next line .
12396	Step to the previous line .
12397	Return last readed line .
12398	Increment the cursor position .
12399	Save current cursor position .
12400	Restores the current context .
12401	Return formatted message .
12402	Set the name of the signature .
12403	Count the number of variables in the signature .
12404	Count the number of functions in the higle
12405	Update the number of variables .
12406	Update this scope .
12407	Return a new scope with the current scope .
12408	Update the set with the intersection of two sets .
12409	Return a new Scope with the intersection of this scope .
12410	Update scope with oset .
12411	Return a new Scope with the difference between the current scope .
12412	Update the set with symmetric difference .
12413	Return a new scope with the same scope .
12414	Add an element to the signature
12415	Remove an item from the set .
12416	Discard the signature from the signature .
12417	Return a list of all signatures .
12418	The first signature .
12419	The last signature .
12420	Returns the value associated with key .
12421	Get a scope by its name
12422	Get a signature by its name .
12423	Get a scope for all of the return types
12424	Create an ast translator injector
12425	Normalize AST nodes .
12426	Set values from othernode to self .
12427	Returns an iterator over r values .
12428	Return True if the hit is ok .
12429	Get the signature of the function .
12430	Resolve the type definition .
12431	Returns a list of resolved names for the given type .
12432	Sets the resolved name for the given type
12433	Delete a local file .
12434	Delete a file from S3
12435	Delete a file .
12436	Saves the object to a local file .
12437	Saves a temp file to S3
12438	Save object to temp file .
12439	Find objects by path .
12440	Build an Enum class
12441	Check the arguments of the function signature .
12442	set one or more thing_name
12443	Decorator to add a method to a class .
12444	Decorator to register hook
12445	Decorator to add rule .
12446	Mark a function as a directive .
12447	Decorator for registering decorators .
12448	Bind a node to dst .
12449	Read an EOF character .
12450	Create a new rule node .
12451	Pop the rule nodes .
12452	Get the node s value .
12453	Add a parsed stream .
12454	Begin tag .
12455	Set the end of the tag .
12456	Set the rules .
12457	Set the hooks .
12458	Set directives .
12459	Evaluate a rule .
12460	Evaluate a hook .
12461	Peeks at the given string into the stream .
12462	Read one character from the stream .
12463	Read a character from the stream .
12464	Read until EOF is reached .
12465	Ignore whitespace .
12466	Sets the hit type for this cluster .
12467	Set the cluster dtype
12468	Ensure that the hit data is compatible with this hit .
12469	Add a rule to a namespace clause .
12470	Add rules to bnf .
12471	Add a new rule .
12472	Add sequences to the parser .
12473	Add alternative .
12474	Adds a range to the sequence .
12475	Add a rule to the sequence .
12476	Add a capture to the sequence .
12477	Add a bind to the sequence .
12478	Add a hook to the sequence .
12479	Parse parameter .
12480	Parse a string from a string .
12481	Parse a parameter .
12482	Parse parameter .
12483	set hook name
12484	add a parameter
12485	Evaluate the rule .
12486	Ignore Cxx .
12487	Add a state
12488	Returns a DOT representation of the state .
12489	Save the graph to a DOT file .
12490	Writes the graph to a PNG file .
12491	Return a string representation of the state .
12492	Return the next state .
12493	reset all living state
12494	Infer block nodes
12495	Infer a subexpr
12496	Infer an identifier
12497	Infer a literal node
12498	dump local infos
12499	Generate a function definition for a given parser rule .
12500	Exit scope .
12501	Return a list of statements .
12502	Return an astroid . Call object .
12503	Return a lambda expression
12504	Return an astroid . Hook node .
12505	Return an astroid . rule .
12506	Visit a capture node .
12507	Return AST node .
12508	Return ast .
12509	Parse a Seq node .
12510	Visitor for RepOptional node .
12511	Return AST node .
12512	Return AST node .
12513	catend src with indentation
12514	Recursively set indentation
12515	Recursively convert a list to a string
12516	Echo all nodes
12517	Populates the state from a sequence .
12518	Merge all sequences into a tree
12519	Traverses tree into state register
12520	Compare two predicates
12521	Build a Grammar from a string .
12522	Build a Grammar from a file .
12523	Parse source into a Node object .
12524	Parse a file .
12525	set node value
12526	Set node value as int
12527	Evaluate a subnode
12528	Default serializer .
12529	Get deposits
12530	Dump a deposition .
12531	Get records from invenio .
12532	Get records from invenio2 .
12533	Imports the bibdoc file .
12534	Dump all files in a given record .
12535	Return a tuple of db IDs .
12536	Check a BibDoc
12537	Serialize an access token .
12538	Retrieve user data .
12539	Dump a user .
12540	Get the featured community .
12541	Get the set of modified records .
12542	Gets all records that have been modified since_date .
12543	Returns a set of grants for the given collection .
12544	Get all revisions of a record .
12545	Get collection collections .
12546	Dump record to JSON .
12547	Get all records that match a given date .
12548	Dump a record
12549	Return a dict representation of the RA .
12550	Load data from database
12551	Collect things .
12552	Initialize the application context .
12553	A memoization decorator .
12554	Get the SQLAlchemy database .
12555	Return a dictionary of connected roles .
12556	Retrieve list of available actions .
12557	Serialize the token to JSON .
12558	Load a token .
12559	Import a record into database .
12560	Import importer from config
12561	Dump object to a dict .
12562	Get information about users .
12563	Gets count of users in invenio2 .
12564	Serialize a user
12565	Load a deposit .
12566	Create a record and record identifier .
12567	Load a record from the database .
12568	Load records from a list of sources .
12569	Inspect dump records
12570	Load dump files .
12571	Load communities .
12572	Load users from sources .
12573	Load data from sources
12574	Returns a list of tuples containing the profiler stats .
12575	Start the application .
12576	Dump profiler .
12577	Delete the profile .
12578	Deletes the resource .
12579	Get the current state of the service
12580	Decorator to disable the correct timestamp .
12581	Load a user profile .
12582	Calculate translation of images .
12583	Merge multiple images together .
12584	Concatenate an array with 1 - dimensional ones .
12585	Create a new dump .
12586	Create record for given dump dump .
12587	Update a record
12588	Create persistent identifiers .
12589	Delete a record .
12590	Create files in a record .
12591	Create a file instance .
12592	Delete all buckets
12593	Return the list of persistent identifiers that are missing .
12594	Prepare list of revisions
12595	Prepare files
12596	Fetches the pids from the database
12597	Return True if record is deleted .
12598	Load a community .
12599	Load a Featured community .
12600	Download a thing .
12601	Check a thing .
12602	Delete this widget .
12603	Returns the magnitude of a vector .
12604	Normalize a vector .
12605	Apply transform to tex coordinates .
12606	Ensure that the bone has been created
12607	Set the length of the bone
12608	Set the parent of the bone .
12609	Get pivot point
12610	Start animation
12611	Set the current camera state .
12612	Unset the camera .
12613	Set the region of the region
12614	Unset the bone state
12615	Ensure model data is created for the given object .
12616	Redraw the given object .
12617	Draw the model .
12618	Set the model for this dataset
12619	Write reports to a file .
12620	Create a testsuite XML element .
12621	Adds a menu to the window
12622	Redraw the label .
12623	Redraw the label .
12624	Draw the background .
12625	delete a widget
12626	Redraw the label .
12627	Register event handlers .
12628	Register keyboard event handlers .
12629	Add main label
12630	Add OK button
12631	Close the dialog .
12632	Add a confirmation button .
12633	Add a cancel button .
12634	Update the progress bar .
12635	Render all actors .
12636	Render the canvas .
12637	Context manager for context manager .
12638	Checks if a resource exists
12639	add a category
12640	Returns a pyglet image .
12641	Get a model by name
12642	Load a model .
12643	Return model data
12644	Load a model from a JSON file .
12645	Add a widget to this widget .
12646	Draws the menu .
12647	Redraw the current image
12648	Redraw the scrollbar .
12649	Check if mouse is a bounding box
12650	Percentage .
12651	Adds a layer to the stack .
12652	Get a region of an array .
12653	Draw the buffers .
12654	Add an action .
12655	Run an action .
12656	Register a new registry .
12657	Add a layer to the graph .
12658	Render the layout .
12659	Delete the widget .
12660	Returns a list of tuples representing the border .
12661	Offset of the screen .
12662	Returns the size of the widget
12663	Read a Mesh from an HDF5 file .
12664	Makes a connection matrix .
12665	Set fields
12666	Adds multiple fields to the batch
12667	Check type of elements
12668	A list of tuples representing the space of the element .
12669	Calculate centroids and volumes of each vertex .
12670	A list of angles for each element .
12671	Calculate the edge data
12672	Summary of the centroids and edges
12673	Convert an element to a node set .
12674	Convert node set to surfaces .
12675	Convert a surface tag to element sets .
12676	Return a pandas DataFrame of all fields .
12677	The metadata of the step .
12678	creates the workdir if necessary
12679	Run post - processing .
12680	Run Mesh .
12681	Read a history report
12682	Read field report .
12683	convert list to string
12684	Returns an equation string
12685	Return an un - sorted set of unordered sets .
12686	Parse the response .
12687	Makes a GET request
12688	Write XYZ report to file .
12689	Write field report
12690	List available components .
12691	Create an error message for this field .
12692	Return True if the exception was raised by the descriptor .
12693	Sets the data for this variable .
12694	Return the axis mode for the given axis
12695	Set axes options
12696	Create a class based on a given function .
12697	Poll the data feed .
12698	Try to convert value to float .
12699	Convert str to int
12700	Plots a graph .
12701	Convert raw string to unicode .
12702	Makes a cleaned HTML string .
12703	Return True if mime_type matches include_mime_type
12704	Clean the domain name .
12705	Return a list of cut cuts for the given domain .
12706	Create a hash key for a token .
12707	Collect all words that are in a sentence .
12708	Index keywords .
12709	Invert a token hash .
12710	Get a dictionary of document frequencies .
12711	Lookup stream id for stream .
12712	Lookup the stream id for a given hash .
12713	Generator for iterable items from a stream .
12714	Create a streamitem from a permalink entry .
12715	Create a ContentItem from a node .
12716	Read a varint from the stream .
12717	Read A . A block .
12718	Serialize a streamitem key .
12719	Return the key and data for a stream item .
12720	Change the current working directory .
12721	Strip prefix from string
12722	Strip a suffix from a string .
12723	Check if needle is a subsequence .
12724	A simple cube application .
12725	Run the wsgiref server .
12726	Shutdown the server .
12727	Decorator for registering a callback .
12728	Register an error handler .
12729	Serve a static file .
12730	Gets the error handler for the given status code .
12731	Add a callback to the route .
12732	Resolve the given method and path .
12733	Resolve a non - literal route .
12734	Normalize regex pattern .
12735	Returns the response body
12736	Add a new header .
12737	Sets a cookie .
12738	Return the status line .
12739	Return the Content - Type header .
12740	Get all values for a given key
12741	Recursively remove files .
12742	Get all open file descriptors
12743	Show file type stats
12744	Run a verify step .
12745	Fetch the contents of the given work unit .
12746	Return a list of lines of a file .
12747	Return a random suffix pair .
12748	Return random adjspecies pair .
12749	Morph a sentence .
12750	Get similarity .
12751	Convert a GIRana sentence to hoolana .
12752	List entities .
12753	Generate a shortsum .
12754	Get keywords .
12755	Get information about a given app .
12756	Create a new stage .
12757	Initialize a stage by name .
12758	Initialize all stages .
12759	Run the stream
12760	Run all the writers
12761	run the incremental transform
12762	Replace the pipeline with the given configuration .
12763	Returns a WSGI application .
12764	Takes a list of sentences and merges them together with the same name .
12765	Return True if all Mentions are in target_ments .
12766	Check if target mentions are in target_ments .
12767	Takes a list of tokens and returns a list of regexes that match the rating .
12768	Match a stream of tokens to a stream .
12769	Creates a tagger .
12770	align the input chunk with the n_chunk
12771	Shutdown the child process .
12772	Multiply p .
12773	Fix email addresses .
12774	Yield spans from a string .
12775	Makes a sorted list of labels from the stream .
12776	Make a list of sentences from the stream .
12777	Convert HTML entities to unicode strings .
12778	creates a cleaned file with cleaned content
12779	Create a scanner for a tagger .
12780	Convert a span to a string .
12781	Align the chunk with the input file
12782	Make a list of paths to absolute paths
12783	Instantiate a pipeline .
12784	Generates a JSON chunk of the file from the path_to_original directory .
12785	Replace invisible elements in HTML .
12786	Removes invisible characters from HTML .
12787	Makes a list of files to be cleaned up .
12788	Remove whitespace from a string .
12789	Main entry point .
12790	Load a stage .
12791	Load external stages from path .
12792	Load modules from a module .
12793	Initialize a stage by name .
12794	Read a sequence of bytes from the index
12795	Return True if the href is valid .
12796	make html labels
12797	Iterate over all files in input_dir .
12798	Returns a generator of all task data
12799	Get a random key range
12800	Generator that yields tokens from a sentence .
12801	Return a list of sentences and relations .
12802	Decorator for retry logic .
12803	Verify the MD5 of the received data .
12804	Get an S3 bucket .
12805	Decode data to streamor .
12806	Retrieve a chunk from a file .
12807	Convert stream_id to kvlayer key .
12808	Convert a kvlayer key to a stream ID .
12809	Generate a hash for a stream item .
12810	Main entry point .
12811	Build an argument parser .
12812	Add XPath to the HTML stream .
12813	Yields a list of character tokens that are character offsets .
12814	Convert ASCII tokens to character offsets .
12815	Convert character offsets to xpaths .
12816	Add a new element .
12817	The xpath element of the last element .
12818	Return the index of the current text node .
12819	Return all descendants of elem .
12820	Select all the elements of a source .
12821	Select elements by name
12822	Select elements that match the given pattern .
12823	Select elements that match the given name and value .
12824	Returns an iterator over the next sibling of elem .
12825	Makes a pretty XML tree .
12826	Call inkscape binary .
12827	Export inkscape file .
12828	Export svg to PDF
12829	Convert SVG to PNG file .
12830	Returns an Environment object for the given file path .
12831	Set up the template file .
12832	Fill the document with the template .
12833	Save the document content to file .
12834	Create a document type from a template file .
12835	Replace SVG characters in SVG document .
12836	Render the SVG to a temporary file .
12837	Renders the function to a PDF file .
12838	Parse an XML string containing a handler .
12839	Parse an HTML document and return the first element .
12840	Extract HTML fragment from HTML .
12841	Insert text into the element .
12842	Insert node before refNode .
12843	Return a clone of this node .
12844	Execute the benchmark .
12845	Recursively get XML value
12846	Insert a child element .
12847	Parse config file
12848	Get Google API credentials .
12849	Create datetime datetimes .
12850	Create a Google calendar event .
12851	Main entry point
12852	Get file extension
12853	Add extension to filepath if necessary
12854	Get a temporary file .
12855	Remove all files in workdir .
12856	Convert CSV file to json
12857	Replace the content of a file .
12858	Parses the HTML .
12859	Checks to see if the next tag is a tag
12860	Creates italic tag
12861	Creates a strong tag
12862	Creates an underscore tag
12863	Parse the attributes of a tag .
12864	Remove line breaks from tag .
12865	Parses a href to a query
12866	Return the value of an attribute .
12867	Translate a dictionary of translations to a default value
12868	Convert to json string
12869	Find all files matching a regular expression
12870	Concatenate multiple strings .
12871	Yields if full starts with part .
12872	Check if part is part of full .
12873	Generate the length of a string .
12874	Convert an object to a boolean
12875	Evaluate a sequence .
12876	Evaluate lookup table .
12877	Replace characters in SVG content .
12878	Convert an svg file to an svg figure .
12879	Merge two SVG files together .
12880	Merge multiple PDFs into one .
12881	Embed font files into svg
12882	Embed font files to SVG .
12883	Check that the inputs are valid .
12884	Check if the function is callable .
12885	Recurse through all outputs
12886	Load a template from a template
12887	Recursively walk through inputs .
12888	Convert an object to a string .
12889	Convert an object to a number .
12890	Convert an object to boolean
12891	Generator for serialization .
12892	Change the encoding of an XML file .
12893	Save text into out_file .
12894	Launch a gromacs command
12895	Call command with given args .
12896	Convert a PDF file to a PDF .
12897	Compute the options of a psycopg .
12898	Transforms a geometry to another .
12899	Create a geometry object .
12900	Expand self into self .
12901	Intersect this envelope with another .
12902	Return True if other intersects with other .
12903	Returns a 2D polygon representing this point .
12904	Create a DataFrame from a Z matrix .
12905	Save dataframe to a file .
12906	Select rows that match a condition .
12907	Returns a table with the given nucleotides
12908	Return a Table containing the intersection of two DataFrames .
12909	Return a new table where the table is not in the table .
12910	Selects rows where each element is odd .
12911	Selects only elements that are evenodds .
12912	Selects all elements that are odd - odd .
12913	Returns a DataFrame with the error
12914	Root Mean Square Error
12915	Table of binding energy .
12916	r Calculate the neutron area of the neutron system
12917	r Calculate the neutron volume
12918	returns the secondary pressure
12919	calculate s1p mass
12920	Returns a table of the daughter species derived from the given species .
12921	Decorator to ensure a transaction is committed .
12922	Derive key from master password .
12923	Bootstrap a new database .
12924	Search for domain names .
12925	Modify a domain by name .
12926	Create a new domain .
12927	Parse a HBS file .
12928	Return the prefix of the given path
12929	Get the SID of the authority .
12930	Main entry point .
12931	Initialize logging .
12932	Update a file .
12933	Return a dictionary of available drivers
12934	Return an image driver for the given path .
12935	Convert geom to raster
12936	Rasterize a raster
12937	Opens a raster
12938	Creates a raster
12939	Returns a copy of the raster
12940	The DMD_CREATION option list
12941	Create a raster
12942	Sets the GeoTransform .
12943	Return a numpy array as an array .
12944	The raster .
12945	Drives the driver
12946	Create a new raster
12947	Return a masked array with the given geometry .
12948	Retrieves the number of rows in the data set .
12949	Reads a raster .
12950	Resample the Raster to a new size .
12951	Save image to disk .
12952	Sets the projection .
12953	Warp the raster to a spatial spatial reference .
12954	Calculate the chunklen for the given alph_len .
12955	Lookup a character set for a given character set .
12956	Encode a single chunk .
12957	Convert a chunk to a long integer
12958	Get a chunk of data
12959	Decorator for caching a function .
12960	Convert filename to a regular expression .
12961	Normalize date format .
12962	Detect the current timezone .
12963	Convert the object to a dictionary
12964	Activate postmortem hook .
12965	Returns an emphasis message
12966	Handle job_handler .
12967	The main worker worker .
12968	Run a multiprocessing worker pool .
12969	Sets the classification .
12970	Send a message to the queue .
12971	Turn a light .
12972	Turn on switch
12973	Turn a light on a device .
12974	Turn a device .
12975	Send all pending messages to the queue .
12976	Send a message to the relay .
12977	Create an adapter object .
12978	Sets the nature of this Product .
12979	Update the configuration with the given parameters .
12980	Reset the default values
12981	Set the path to the config files .
12982	Iterate over option values
12983	Yield default values for all options .
12984	Create a config file .
12985	Update the configuration .
12986	Read the configuration file .
12987	Read all config files and return them as a dict .
12988	Get the list of options for a section .
12989	Return a list of commands for a specific command .
12990	Solve command options .
12991	Add options to parser .
12992	Build the parser .
12993	Parse command line arguments .
12994	Generate a zsh command for a given command .
12995	Print the completion of a command .
12996	Return shell command for given command .
12997	Run bash completion
12998	Start a new master server .
12999	Called when a new connection is established .
13000	Called when a line is received .
13001	Called when a worker is lost .
13002	Called when a job is loaded
13003	Called when a response is received .
13004	Releases the job .
13005	Run a list of jobs .
13006	Close the server .
13007	Called by all waiting threads .
13008	Add a result to the list .
13009	Wait for the future to be completed .
13010	Load the next job .
13011	Mark the results as done .
13012	Add a result to the pool .
13013	Cancel all active jobs .
13014	Mark a future as done .
13015	Distribute jobs from active jobs .
13016	Add a new job set .
13017	Get a job .
13018	Releases a job .
13019	Add a result for a job .
13020	Called when a job set is done .
13021	Close the thread .
13022	Remove duplicates .
13023	Return True if the given regex matches the given regular expression .
13024	Return a list of cached entries .
13025	Get the global EC2 region .
13026	Filter entries according to filters .
13027	Get information about a host .
13028	Create an instance from a dictionary .
13029	Gets an attribute .
13030	Sort entries by attribute .
13031	Represent the table as a line .
13032	Create instance from boto instance
13033	Determine if the filter matches the given filter .
13034	Display the name and public ip address
13035	Render a list of entries .
13036	Add a timestamp to an event dictionary .
13037	Create a logbook .
13038	Create a structlog .
13039	Setup a Celery application .
13040	Get information about a specific worker .
13041	Delete a worker .
13042	Create a ConfOpt .
13043	Ordered configuration section
13044	Set a set of options to a conf .
13045	Execute the config command
13046	Create the complete files for the given command .
13047	Render a list of columns .
13048	Render a single row of columns .
13049	Render a table .
13050	Prepare all rows in a table .
13051	Encode text with terminal color .
13052	Get a color from a string .
13053	Return a random color .
13054	Prompt user for input .
13055	Check user credentials
13056	Checks the given token
13057	Decorator for views that require a token
13058	Check if a process is running .
13059	Dynamically import a module .
13060	Get the current IP address
13061	Make a request to the API .
13062	Prepare post parameters .
13063	Serve the application .
13064	Renders the template .
13065	Runs a command as a stream .
13066	Stream a list of commands
13067	Generates a stream of command dictionaries .
13068	Return a list of networkdays between two dates .
13069	Get the path to a command .
13070	Build the ssh command .
13071	Build a scp command .
13072	Copy entries to remote_path
13073	Copy a list of files to a remote path .
13074	Run a command on a list of hosts .
13075	Connect to an SSH entry .
13076	Load the LSI profile .
13077	Create a LsiProfile object from command line arguments .
13078	Add a relationship .
13079	Return a list of all related parts of the given reltype .
13080	Load relationships from a file
13081	Add a part to the document .
13082	Load a Part from the data store .
13083	Find the override for the given name .
13084	Create a ContentType instance from a ContentType element .
13085	Parse an input string and return a list of nodes .
13086	Builds a JWT .
13087	Assign a force field to an AMPAL object .
13088	Find the maximum radius and NPNP
13089	Make a force field structure .
13090	Return a stream of bytes .
13091	Get all the segments that match the given name .
13092	Copy a directory .
13093	Open an S3 bucket .
13094	Uploads a directory to S3 .
13095	Upload a file to a bucket .
13096	Upload an object to a bucket .
13097	List all files in a directory .
13098	Get a list of directory names under a given directory .
13099	Create a prefix for a bucket .
13100	Delete a file .
13101	Ensure LTD Keeper is logged in .
13102	Returns the English string as a string
13103	Delete a directory .
13104	Return the URL for the home page .
13105	Decorator to silence the home label .
13106	Binary breadcrumb
13107	Binary breadcrumb .
13108	Calculate interaction energy for all AMP objects .
13109	Get the internal energy of an AMP object .
13110	The number of samples in the tree .
13111	Get a token from the Keeper API .
13112	Upload ltd to LTD Keeper .
13113	Check if Travis event should be skipped .
13114	Purge a surrogate .
13115	Register a build .
13116	Confirm a build .
13117	Recursively update nested dictionaries .
13118	Main entry point for lstdconveyor .
13119	Edit part .
13120	Pack directory .
13121	Split a path .
13122	Find a file in a path
13123	Get editor name .
13124	Parse a file node .
13125	Generate a HTML chart .
13126	Generates HTML for a chart
13127	Serialize data to a PNG file .
13128	Patch json data
13129	Returns HTML for the given chart
13130	Convert a dict to a pandas DataFrame .
13131	write html file
13132	Mark a chart as a chart class
13133	Generate a byte string for the X field .
13134	Link to a GitHub user .
13135	Infer the tarball URL from the app . json .
13136	Create a new app .
13137	Delete app .
13138	Decorator to add an iterator attribute to an object .
13139	Generate a random binary string .
13140	Generate a random IP address .
13141	Generate a random date between two dates .
13142	Sets up a session object
13143	Make a request to Heroku API
13144	Create a build .
13145	Check the status of a build .
13146	Generate a sequence of sequences .
13147	Decorator for caching functions .
13148	Decorator to draw a function .
13149	Register sub - commands for this parser .
13150	Return the root arg parser for this command .
13151	Return the description of the class .
13152	Get the help string
13153	Run the action .
13154	Convert a dataset or list of strings into a string .
13155	Returns a pandas DataFrame containing all the athlete deleted .
13156	Returns a list of the last n n times .
13157	Get the activity list for the given athlete .
13158	Get the activity data for the given athlete .
13159	Return the endpoint for the athlete .
13160	Return the URL for an activity .
13161	Perform a GET request .
13162	Create a build .
13163	Return url with api auth
13164	Get a random title .
13165	Generate a random person .
13166	Get the last name of the last name .
13167	Render the chart .
13168	Set the dataset
13169	Render the chart
13170	Check if the given type is valid .
13171	Returns the URL for this query .
13172	Show this element .
13173	Save image to file .
13174	Return a URLopen to the server .
13175	Return an image as an image object .
13176	Write URL to file object .
13177	Calculate the checksum of the file .
13178	Return a floating point number .
13179	Decorator for creating an entity name .
13180	Returns a list of unprotected claims that are protected by this node .
13181	Return a JWKS as JWKS
13182	Unpack a ClientMetadataStatement .
13183	Pack metadata statement .
13184	Evaluate the metadata statement
13185	Ensure that the given Federation usage is correct .
13186	Extend the request with sms
13187	Parse command line arguments
13188	Register command line arguments .
13189	Apply logging options to log levels .
13190	Log a verbose message .
13191	Convert a word to a dictionary .
13192	Find anagram in a word .
13193	Convert the class name to a class name .
13194	Transforms the timeseries data from a time series .
13195	Get the last value of a timeseries
13196	Validates that a page number is a valid page number .
13197	Get a single page of items from an iterator .
13198	Wrapper for chmod
13199	Creates an InternalSigningService based on the given configuration .
13200	Creates a SigningServiceClient
13201	Sign a request .
13202	Create a new resource
13203	Update metadata statement .
13204	Update the signature for a given location
13205	Yield bundle contents .
13206	Create a bundle
13207	Returns a list of urls for the given asset type .
13208	Generate HTML tags for the given asset type .
13209	Return HTML tags for all asset types .
13210	Convert url to protocol
13211	Find links in a given URL .
13212	Connect to the AMP server .
13213	Get list of available modules .
13214	import service modules
13215	Split a string into two dates .
13216	return a copy of the given list of fields
13217	Applies a date map to a document .
13218	Print the number of fields in the table .
13219	Print the results of the current cursor .
13220	Get a list of tasks from a list of tasks .
13221	Add default deps for project
13222	Add default assettypes for a project
13223	Add default sequences to a project .
13224	Creates a new rnd shot for a project
13225	Called when a project is created
13226	Create a shot for a sequence
13227	Create all tasks for the given element .
13228	Pre - connect to a peer .
13229	Send a packet to a peer .
13230	Get a config value from a section .
13231	Decorator to register a function to be used for Nova .
13232	Decorator to register a CinderCinder function .
13233	Decorator to add a function to a neutron customer process .
13234	Decorator to add a glance processor to a glance account .
13235	Decorator to register a swift customer process .
13236	Decorator to register a custom event processor .
13237	Decorator to add a heat processor to a heat processor .
13238	Add a factory factory .
13239	Removes the specified factory
13240	Connect to a given factory .
13241	Called when a data packet is received .
13242	Disconnect a connection .
13243	Call a remote command .
13244	Create a new AMP connection .
13245	Handle a multiplexed connection .
13246	Called when data is received .
13247	Send data to the remote device .
13248	Called when a connection is lost .
13249	Returns the protocol object for the specified connection identifier .
13250	Called when a remote connection is received .
13251	Disconnect from a remote device .
13252	Return a centered string centered on line width .
13253	prints a string on the screen
13254	Generate a version number .
13255	Identify the unit of a target unit .
13256	Assert that value is convertible to target_framework
13257	Pad data to block_size
13258	Unpad data to block_size .
13259	Create a new sms .
13260	Gather metadata statements for a given context
13261	Pretty print a word .
13262	Return an argument parser .
13263	Main function for parsing a word
13264	Called when data is received .
13265	Called when a packet is unregistered .
13266	Create a remote function stub .
13267	Check for presence of a remote call
13268	Return a regex pattern for this command .
13269	Deserialize and return a list .
13270	Convert a list to a string .
13271	Verify that the metadata statement is valid .
13272	Parse a JWKS response .
13273	Dump a database to a file .
13274	List database databases
13275	Get a dictionary of local files for a given path .
13276	Synchronize local files to S3
13277	Decorator for views that require a user token .
13278	Login to the user .
13279	Build all modules in the given path .
13280	Creates a fresh instance of readonly .
13281	Load JSON from file .
13282	Create a signed JWT
13283	Create a JWT signed by signing keyjar .
13284	Decorator to register library functions .
13285	Deserialize a testdir .
13286	Run the test runner .
13287	Return the score of a letter .
13288	Calculate the word score for a word
13289	Generator of wordlists
13290	Check if a word is valid .
13291	Run the SOS search
13292	Command line interface .
13293	Called when a string is received .
13294	Get command and responder function
13295	Parse request arguments .
13296	Run the responder .
13297	Write a response to the transport .
13298	Called when a connection is lost .
13299	Build a JSONAM Dialect receiver .
13300	Create a KeyJar from a JWT object
13301	Load a KeyJar into the KeyJar .
13302	Process an event .
13303	Dispatch a cinder customer process .
13304	Entry point for neutron customer process .
13305	Dispatch a customer process .
13306	Dispatch to a swift customer process .
13307	Entry point for customer process .
13308	Dispatch a heat customer process .
13309	Serve the application .
13310	Print msg to stdout .
13311	Print msg to stderr .
13312	Register a new CommandSub class .
13313	Registers a CommandSub class .
13314	Convert value to a string .
13315	Convert a string to a value .
13316	Update completers in a dictionary .
13317	Initialize the module
13318	initialize mq connection
13319	Initialize service modules .
13320	Initialize a new consumer
13321	Initialize cinder consumer .
13322	Initialize the neutron consumer .
13323	Initialize AMQ consumer .
13324	init the heat consumer
13325	Enable or disable a specific component .
13326	Get information about a song
13327	download a song
13328	Execute instructions .
13329	Load a variable by name
13330	call function
13331	Dump mysqldump to a temporary file .
13332	Render ditaa image .
13333	Called when the application is exited .
13334	Run the application .
13335	Change the current working directory .
13336	Recursively copy a directory .
13337	Starts the debugger .
13338	Get the mtime of a file .
13339	Return True if item has changed since file
13340	Synchronize the database .
13341	Remove all files
13342	Scrape a given URL .
13343	Download the image
13344	Check if the image has been modified .
13345	Compile a tag function .
13346	Find the most recent caller from the stack .
13347	Get the defining component of a PE .
13348	Main entry point .
13349	Find a symbol by its name and kind .
13350	Returns True if PE_PE is contained in root
13351	Returns True if the PE is global False otherwise
13352	Get the data type name for the given type .
13353	Get related attributes .
13354	Makes a namedtuple from an expression
13355	Create a function that will run the given action .
13356	Reconstruct an external entity
13357	Builds a function for a given model s sync .
13358	Makes a constant
13359	Create an operation method .
13360	Create a property based on an object .
13361	Creates a new class from an object
13362	Create a simple association .
13363	Create a linked association .
13364	Create associations for a relationship .
13365	Build a component from a BEL model .
13366	Perform a RPC call .
13367	Accept the connection .
13368	Reject this call .
13369	Send an exc .
13370	Wait for a call .
13371	Establish a result queue .
13372	Dispatch a reply .
13373	Guess the type name from a string
13374	Deserialize value to python type .
13375	r
13376	r
13377	Retrieve a feature by id
13378	Get documents from the index .
13379	Put features into the index .
13380	Delete a document by id
13381	Delete all type mapping
13382	Delete the index
13383	Iterate over all documents in the database .
13384	Return a list of document ids .
13385	Scan a prefix and return a list of features .
13386	Return a list of all ids belonging to a prefix .
13387	Perform fulltext scan .
13388	Iterate over fulltext documents of a fulltext query .
13389	Iterate over keywords .
13390	Return a list of ids for a query .
13391	Find all documents that match a field .
13392	Return feature names
13393	Return a list of key_ranges .
13394	Create the index .
13395	Create a mapping for this index .
13396	Return a mapping of indexes to their index types .
13397	Get field types
13398	Returns a list of disjoints for a query .
13399	Calculate the number of bytes in a feature dictionary .
13400	Count the number of bytes for a given filter .
13401	Return a pretty string representation of the FeatureCounter .
13402	Process command line options
13403	Default formatter .
13404	Convert a Link object to a string .
13405	Return a unique identifier for an instance .
13406	Check the uniqueness constraint for uniqueness .
13407	Check for integrity of a link .
13408	Check for integrity of a subtype .
13409	Create a function that maps a sequence of feature names .
13410	Convert value to bytes .
13411	Store items in the cache .
13412	Delete all data from the database .
13413	Iterate over the files in the cache .
13414	Returns a list of tuples for the given key ranges .
13415	Perform an index scan .
13416	Get the index for a given index .
13417	Scan a prefix and return the corresponding key .
13418	Perform an index scan on the index .
13419	Define an index .
13420	Put an index into the index .
13421	Put a value into the index .
13422	Generator for index keys .
13423	Return the index associated with the given name .
13424	Check if the given package name is valid .
13425	Adds a direction to the language .
13426	Get the type of the data type
13427	Returns the referenced attribute .
13428	Builds the core type XML element .
13429	Build an enum element .
13430	Build struct XML element .
13431	Build an XML element for a user .
13432	Builds the type for the given data type .
13433	Builds the XML element .
13434	Build an XML element .
13435	Build an XML schema .
13436	Pretty - print an XML string .
13437	Fetches a list of bike data .
13438	Set the position of node .
13439	Decorator to track the position of a function .
13440	r
13441	r
13442	Array .
13443	r
13444	r
13445	r
13446	r
13447	r
13448	r
13449	MARK .
13450	r
13451	r
13452	Number .
13453	Create a queue
13454	Delete a queue from the server .
13455	List all available queues
13456	List all exchanges
13457	The purge queue method
13458	Create a MIME message
13459	Read the image and return it as a string .
13460	Check if the text is visible .
13461	Main entry point .
13462	Serialize value to python type
13463	Serialize an association into a SQL statement .
13464	Convert a class to a CREATE TABLE statement .
13465	Main entry point
13466	Searches for a query
13467	Partition a collection by a condition .
13468	The main function for viewing .
13469	Add bidi context to the context .
13470	Find a link based on a relationship .
13471	Make a reference to the target class .
13472	Compute the lookup key for the given instance .
13473	Compute the index key for the given object .
13474	Returns the type of an attribute
13475	Create a new instance and return it .
13476	Iterate over all metaclasses .
13477	Define a new class .
13478	Send a ZAM message .
13479	Receive messages from a socket .
13480	Check dead code .
13481	Return a list of email addresses .
13482	Decorator for registering rpc functions .
13483	Generate a dictionary of RPC - RPC spec .
13484	Normalize postcode .
13485	Returns the next value
13486	Called when an instance is received .
13487	Accept C_C .
13488	Called when an ep_PKG is encountered .
13489	Gets the brightness of the lamp .
13490	Match pattern .
13491	Determine the position of a match .
13492	Return a ExtraSelection for the given character position .
13493	Callback when the cursor position changes .
13494	Return the traceback of the exception .
13495	Create a PyOS_Input hook for the application .
13496	Get a mapper by name .
13497	Register a URL pattern .
13498	Decorator for adding a URL path
13499	Add a new pattern to the registry .
13500	Add a path to the server .
13501	Calls the given URL .
13502	Execute the command .
13503	Called when the user is pressed .
13504	Handles the down press event .
13505	Return the previous occurrence of a substring .
13506	Return the next occurrence in the history .
13507	Process a reply message .
13508	Returns True if the history is locked .
13509	Return the edited history .
13510	Set the state of the editor .
13511	Store the edited input buffer .
13512	Event handler .
13513	Build a record collection from a pandas DataFrame
13514	Convert a collection of records to a pandas DataFrame .
13515	Perform a series of samples from a DataFrame .
13516	Set attributes from kwargs .
13517	Subscribe to all topics
13518	Log a message
13519	Yield merges from a list of lists .
13520	Generator that iterates over remote objects .
13521	Convert notebook to a new notebook
13522	Returns the supported platform .
13523	Get the importer for the given path_item
13524	Creates a stringIO object with cStringIO .
13525	Parse version string .
13526	Determine whether or not setuptools needs to override .
13527	Add a distribution .
13528	Find all available plugins .
13529	Get a path to a cache file .
13530	Parse an entry point .
13531	Parses package metadata .
13532	Compute dependencies .
13533	Parse filename .
13534	Collapse leading whitespace .
13535	Disables the hide event filter .
13536	Connects to the completion widget .
13537	Return the current text cursor .
13538	Updates the currently selected item .
13539	Register the admin site
13540	Return a list of partitions for all windows .
13541	Returns a tuple of all cpu time and idle time .
13542	Return a list of tuples of per cpu .
13543	Read raw input from stdin .
13544	Read raw data from stdin .
13545	Updates the tab bar .
13546	Create a tab with the current kernel
13547	Add a new tab with frontend
13548	Adds an action to the menu .
13549	Create dynamic magic function .
13550	Populate all MagIC magic menu
13551	Handle closing event .
13552	Generate a password
13553	Check that the passed passphrase matches the passed passphrase .
13554	Returns a boolean cell for an editable cell .
13555	Return an indented short title for the given item .
13556	Collects a dictionary of editable booleans
13557	Toggles a boolean value
13558	Check if the user has permission to change the permission of the object .
13559	Check if the user has permission to be deleted .
13560	Add nodes to the graph .
13561	Make a bintree .
13562	Apply a set of jobs to the graph .
13563	Ensure that the tree graph is consistent .
13564	Make the color table for a class .
13565	Return a copy of this color scheme .
13566	Add a new color scheme .
13567	Set the active color scheme .
13568	Return the path to the home directory
13569	Process messages from the AMQP server .
13570	Handle a single stdin request
13571	Wait for kernel to finish .
13572	Set HTML style
13573	Get the format for a token .
13574	Get the format from the document .
13575	Returns a QTextCharFormat instance for the given token .
13576	Find a command in PATH .
13577	Normalize a path .
13578	Ensure that a namespace namespace is declared .
13579	Parse entry points .
13580	Return True if the last blank line is blank
13581	Determine whether there are two blank lines in the source .
13582	Translates a shell command line .
13583	Replace ipython magic magic .
13584	Remove the first line of the line from the line .
13585	Transform an IPython prompt into a single line .
13586	Push a list of lines to the source .
13587	Determine if there is more more than one input .
13588	Find indent_spaces .
13589	Store the given lines into the buffer .
13590	Get the raw and reset the source
13591	Process cell magic magic .
13592	Append lines to line mode .
13593	Transform a cell into a new cell .
13594	Push input lines to the processor .
13595	Initialize the observers .
13596	Post a notification for a notification
13597	Return a set of observers for a given ntype
13598	Register a callback for a given ntype .
13599	Create a new job .
13600	Update the status list
13601	print a group of jobs
13602	Flushes a group to a group .
13603	Update the status of the status report
13604	Report the status of the CPU .
13605	Initialize the background job .
13606	Insert the value at the given index .
13607	Make a deep copy of the data .
13608	Declare a special variable .
13609	Declare a list .
13610	Declare a set variable .
13611	Set the cwd .
13612	Moves lock to state
13613	Calculate the energy of a given state .
13614	Return a dict with default values
13615	Check that the table exists .
13616	Convert a line to a dictionary .
13617	Render a check .
13618	Print a warning message .
13619	Parse a config file .
13620	Format a list of rows
13621	Create a link .
13622	Render a javascript file .
13623	Return HTML file for given URL .
13624	Generate an HTML image .
13625	Subtract number from value
13626	Multiply a value .
13627	Divide value to arg
13628	Return the modulo number
13629	Get model verbose name .
13630	Split a line into two parts .
13631	Add command line options .
13632	Add a builtin property .
13633	Remove a builtin function .
13634	Deactivate this module .
13635	Find the appropriate URL for the given URL .
13636	Iterate over all links in this page .
13637	Return a list of filenames .
13638	Run the coverage script .
13639	Add an action to the dashboard .
13640	Append an action to the parser .
13641	Parse the command - line options .
13642	Print help message .
13643	Handles help .
13644	Check if arguments are allowed
13645	Execute the script .
13646	Debug - print information
13647	Unserialize an object
13648	Set the display hook .
13649	Log uncaught exceptions .
13650	Return True if the given URL is a valid URL .
13651	Validate a URL
13652	Validate a URL .
13653	Pull values from a set of keys .
13654	Returns a list of n random ports
13655	Decorator to create a remote function .
13656	Decorator to create a parallel function .
13657	Apply the function to the map .
13658	Returns the last n lines of the readline
13659	Sets auto - indent feature .
13660	Initialize logging .
13661	Save sys module state .
13662	Restore sys . modules .
13663	Register a callback function .
13664	Return a new main module .
13665	Cache the main namespace for the main module .
13666	Initialize the user namespace .
13667	Returns a list of all known namespace references .
13668	Reset the state .
13669	Delete variable
13670	Remove all keys that match a regular expression .
13671	Push variables to user namespace .
13672	Find and return the result of an object .
13673	Return the object s docstring .
13674	Return a struct with the given name .
13675	Implement inspect method .
13676	Initialize the history manager
13677	Show traceback .
13678	Show traceback .
13679	Show traceback .
13680	Show the traceback of the exception .
13681	Prepare the current readline .
13682	Handles completion .
13683	Add a custom completer to the completer
13684	Set the frame of the completer frame .
13685	Run a line magic magic .
13686	Find magic by name
13687	Define a macro .
13688	Execute a subprocess .
13689	Auto rewrite input .
13690	Get a dictionary of user variables .
13691	Evaluate user - defined expressions .
13692	Evaluate an expression .
13693	Run a file in the system .
13694	Run a cell magic magic .
13695	Run a single cell .
13696	Execute the given list of nodes .
13697	Enable pylabtools in IPython .
13698	Expand the namespace of a command .
13699	Create a temporary file .
13700	Extract the lines of a given range .
13701	Find user code .
13702	Called when the user exits .
13703	Publish a message to a destination .
13704	Send a message to target .
13705	Decorator to skip a test condition .
13706	Raise a test if a test fails .
13707	Mark a function as deprecated .
13708	List all profiles in the given directory
13709	Return a list of all installed profiles .
13710	Find a distribution by its requirement
13711	Run a command .
13712	Return path to filename .
13713	Return the next line .
13714	send a string to the child process
13715	Send a command to the terminal .
13716	Prepare compiled regex pattern .
13717	Wait for a pattern to match the given pattern .
13718	Read data from a searcher .
13719	Prepare a regular expression .
13720	Search the buffer for all strings in the buffer .
13721	Perform a search on a buffer .
13722	Log listener for progress monitor .
13723	Unpack a directory .
13724	Print a message to stdout .
13725	Returns the last error
13726	Execute a command and return its output .
13727	Find the filename for the given filename .
13728	Returns a list of tuples that are executed by the line .
13729	Return a list of missing arcs that are missing
13730	Return a list of arcs that are unpredicted
13731	Returns a list of line lines for each exit .
13732	Return the number of branches in the parser .
13733	Return a dictionary with the missing branch arcs .
13734	Calculate the number of branches and missing branches .
13735	Set the precision of a number .
13736	Return the percentage of pc covered by branch .
13737	Returns a string representing the pc covered by this span .
13738	Highlight a given string of needles .
13739	Highlight a string .
13740	Highlight keywords in string .
13741	Runs a function in the context .
13742	Remove trailing quotes .
13743	Indent a string .
13744	Return a marquee .
13745	Convert a string to a screen .
13746	Remove all lines from a string .
13747	Return a list of paragraphs of text .
13748	Find the optimal subset of a list .
13749	Return the value of the item at the given position .
13750	Compute an item matrix given a list of items .
13751	Return a SList with the specified fields .
13752	Build the kernel argument list .
13753	Setup SSH connections .
13754	Pretty - print an object .
13755	Pretty print object representation .
13756	Get the MRO of an object .
13757	Default printer .
13758	Create a pprinter .
13759	Create a pprinter .
13760	Print the super class .
13761	Print regex pattern .
13762	Print type information .
13763	Print function information .
13764	Print exception information .
13765	Store a function for a given type .
13766	Decorator to add a function to the given type .
13767	Add an object to the output .
13768	Add a breakable to the current group .
13769	End a group .
13770	Flush the buffer .
13771	Pretty print an object .
13772	Return a list of tuples containing the color scheme .
13773	Writes row into ods
13774	Get the text from the windows clipboard .
13775	Get text from OSX clipboard .
13776	Get the text from Tkinter .
13777	Get the path to the build prefix
13778	Replace keys in a dictionary
13779	Extract datetimes from an object
13780	Recursively squash datetimes .
13781	Convert datetime to ISO8601 format .
13782	Convert an object to JSON .
13783	Checks if the site directory is valid .
13784	Write a script to a directory .
13785	Sleep at a time .
13786	Create an argument parser .
13787	Convert pyx files to csv
13788	Main entry point for the engine .
13789	Build a PackageFinder instance .
13790	Called when the log level is changed
13791	Return a default logger .
13792	Called when a new flag has changed .
13793	Prints a list of available aliases .
13794	Print all flags for this flag .
13795	Print the subcommands .
13796	Print help for this command
13797	Print examples .
13798	Update the config with the given config .
13799	Initialize a subcommand .
13800	Flatten flags dictionary into a dictionary .
13801	Parse the command line .
13802	Load a config file .
13803	Generate the configuration file .
13804	Downsample an array .
13805	Format a list of labels
13806	write a message to stdout
13807	Called when the config has changed .
13808	Get the help for this class .
13809	Get the documentation for a trait .
13810	Return a section of a class .
13811	Clear all instances of this class .
13812	Create an instance of this class .
13813	Format a test failure .
13814	Print a crash handler to stdout .
13815	Flush all channel events .
13816	Emits the start_channel signal .
13817	Read data from a file - like object .
13818	Read data from a PINTR stream .
13819	Wrapper for subprocess handler .
13820	Split a string into a list of arguments .
13821	Compress a DHistogram .
13822	Instantiate the magics class
13823	Add a magic function
13824	Create a decorator for a method magic .
13825	Create a decorator that registers a function in the current context .
13826	Return a dictionary of magics and their documentation
13827	Register arbitrary magic objects .
13828	Register a function in the user_magics table .
13829	Formats a string in LaTeX format .
13830	Parse command line options .
13831	Set a default option for a file
13832	View the given GUI reference .
13833	Create a task with the given callable .
13834	Return task info
13835	Get func from info
13836	Calculate the next run .
13837	Submit a task to the scheduler .
13838	Run a callable on the channel .
13839	Asynchronously run asynchronously
13840	Run a callable with the given callable .
13841	Run a callable .
13842	Find the controller key file
13843	Bind an IPython kernel .
13844	Run a test suite .
13845	Create an interrupt event .
13846	Start listening on windows .
13847	Filter a dictionary of Namespace objects .
13848	List all objects in a namespace
13849	Raises ValueError if options are mutually exclusive .
13850	Sends the current figure to the active figure .
13851	Send all figures to the screen .
13852	Send a figure to the backend
13853	Load an IPython extension .
13854	Unload an IPython extension
13855	Generate random ports .
13856	Initialize the web application .
13857	Handle SIGINT signal .
13858	Ask user to confirm exit
13859	Shut down kernel manager
13860	Generate market price options
13861	Replace multiple values in a dictionary .
13862	Render a shell
13863	Build a kernel launch command .
13864	Create a zipfile .
13865	Fix version . txt
13866	Return True if the object is mappable .
13867	Get a partition of seq .
13868	Monkey patch pexpect . spawn
13869	Read a file and return its output .
13870	Run the given source command .
13871	Generate coverage report .
13872	Generates the XML for the given C ++ C ++ file .
13873	Fetch a file from ftp
13874	Reduce a frequency list of frequencies
13875	Compute n - digit frequencies for a file .
13876	Yields digits from a text file
13877	Calculate the frequency of one digit .
13878	Compute two - digit frequencies
13879	Compute n - digit frequencies
13880	plot two digit frequencies
13881	plot a single digit frequency spectrum
13882	Prints a debug expression to the stack .
13883	Reverse a view .
13884	Deprecated .
13885	Create a test suite .
13886	Run a script .
13887	Run a Python script .
13888	Generate a debug script for a module .
13889	get all files in hashroot
13890	compress a hashroot
13891	Return a list of all keys in the directory .
13892	Evaluate the given record .
13893	Return True if a record matches any of the given matchers .
13894	Called when an error occurs .
13895	Create an interactive shell embed .
13896	Main entry point for IPython .
13897	Create and return a new writer writer .
13898	Creates directories for the given languages .
13899	Write POI entries to a list of po files .
13900	Write header to file .
13901	Subscribe to a user .
13902	Initialize the parser .
13903	Run a Python module .
13904	Run a Python file .
13905	Create a code object from a python file .
13906	Load a Python code from a file .
13907	Convert an item matrix to an HTML table .
13908	Set the current value .
13909	Cancel the current tab .
13910	Select a new index .
13911	Move the cursor up to the right .
13912	Move the cursor down .
13913	Move the cursor to the left .
13914	Select the right position .
13915	Updates the list .
13916	Calculate word frequency
13917	Print n words .
13918	Serialize the object as a string .
13919	Writes the graph to a file .
13920	Validate a PIN
13921	Send a single pin to a topic .
13922	Delete a shared pin .
13923	Send a user pin .
13924	Delete a user pin .
13925	Subscribe to a topic .
13926	Get a list of all subscribed topics .
13927	Decorator to monitor a task .
13928	Initialize the progress bar .
13929	Context manager .
13930	A context manager that yields a subtask .
13931	Update the progress bar .
13932	Create a new progress monitor .
13933	Update the progress of the work .
13934	Generate a page of text .
13935	Makes sure this package is correct .
13936	Load one or more config files .
13937	Load the config file
13938	Read the config file as a dictionary .
13939	Load flag from config .
13940	Decodes argument list into unicode strings .
13941	Load IPython configuration .
13942	Load the configuration .
13943	Parse command - line arguments .
13944	Converts parsed data into Namespace
13945	Find a module by name .
13946	Register a callback to be run after a stop .
13947	Notify the process .
13948	Called when the process is stopped .
13949	Send a SIGINT signal to the daemon .
13950	Build command line arguments .
13951	Start the simulation .
13952	send a file to remote
13953	Fetch file from remote
13954	Return the total number of engines .
13955	Start one or more engines .
13956	Start a WinHPC job .
13957	Return the default context .
13958	Parse the output of the job .
13959	Write a batch script to the template .
13960	Start the job .
13961	Create and save the context menu
13962	Append a JPEG to the QR code .
13963	Append a PNG image .
13964	Appends a svg to the dialog .
13965	Add image to the document .
13966	Copy image to clipboard
13967	Returns the image for the given name
13968	Insert an image into the cursor .
13969	Insert an SVG into the cursor .
13970	Saves an image .
13971	Exit the timeout .
13972	Initialize the environment .
13973	Rewrite input to stdout .
13974	Tell the user to exit .
13975	Set the next input to the next input .
13976	Read config file .
13977	Get a list of values from an option .
13978	Get a list of values from a section .
13979	Set the context based on an environment variable .
13980	Set attributes from a list of dictionaries .
13981	Load configuration from a file .
13982	Set an attribute from a config file .
13983	Expand ~user . path .
13984	Set self . _delims
13985	Split a line into a single line .
13986	Find all keywords that match the given text .
13987	Completes attribute names .
13988	Called when the lexer is changed .
13989	return a list of filename matches
13990	Return a list of aliases that match the given text .
13991	Return a list of matches for the given python object .
13992	Returns the default arguments for the given object .
13993	Handles completion .
13994	Handles tab completion
13995	Returns True if the record matches the given criteria .
13996	Match a set of records .
13997	Extract a subdict from a dict
13998	Return True if the shell is quiet or not .
13999	Write out the output prompt .
14000	Write format data to stdout .
14001	Log output .
14002	Check if the object is free .
14003	Convert timestamp to Timestamp .
14004	Called when the eventloop has changed
14005	Dispatch a control message .
14006	Dispatch a shell message .
14007	Start the shell
14008	Do one iteration of shell streams .
14009	Publish a pyin .
14010	Abort a request .
14011	Send a clear request to the given stream .
14012	Construct the kernel name for the given topic .
14013	Send the shutdown message
14014	Add the current modules to the context stack .
14015	Remove sys . modules from the stack .
14016	Return the absolute path of a given path .
14017	Check if the given name is a file - like object .
14018	Check if an object is a class .
14019	Return True if the given path is a package .
14020	Get the package name of a file .
14021	Convert a label to a string .
14022	Returns a function that returns the last item of an object .
14023	Copies a function to the given module .
14024	Transfer the class to the specified module .
14025	Get CPU CPU time .
14026	Returns the command line for this process .
14027	Return a list of open files for this process .
14028	Return a list of connections for the process .
14029	Check if a user has a given group .
14030	Resolve a class .
14031	Calculate the usage percentage
14032	Memoize a function .
14033	Mark a function as deprecated .
14034	Login to Google docs .
14035	Get the GDoc key from the URL .
14036	Ensure temporary path exists .
14037	Clear temporary files
14038	Upload file to Google Documents .
14039	Synchronize local and gdocs files .
14040	Downloads data from GDOCs .
14041	Upload the given po files to the local file .
14042	Clear the contents of the collection .
14043	Creates a new Qt console
14044	Check URL is accessible
14045	Determine if a URL contains content .
14046	Get response code from a URL .
14047	Compare content type with given content type .
14048	Compare response code with given url
14049	Validate data .
14050	Clear output .
14051	Find the path of a command .
14052	Create a CodeUnit instance from a list of files .
14053	Return the root name of the module .
14054	Return the source file containing the source code .
14055	Determine whether the file should be Python .
14056	Return the total number of seconds in a Python datetime object .
14057	Block until the result is ready .
14058	Wait for the result to complete .
14059	Get the results of the job .
14060	Abort this batch .
14061	Return the elapsed time in seconds .
14062	Wait for all tasks to finish .
14063	Publish a displaypub
14064	Wait for outputs to be ready .
14065	Wait for messages to finish .
14066	Return the absolute path of a filename .
14067	Prepare patterns .
14068	Return the separator for the given string .
14069	Find all Python files in a directory .
14070	Returns the relative filename for the given filename .
14071	Return canonical filename .
14072	Extract zip data from a file
14073	Determine if a file matches the same directory
14074	return True iff path matches pattern
14075	Maps a path to a canonical filename .
14076	Run an IPython interpreter .
14077	Run an event loop .
14078	Run one iteration loop .
14079	Run a GTK kernel
14080	Run the COCA loop on the kernel .
14081	Enable GUI event loop .
14082	Calculate GOE E .
14083	Calculate the center eigenvalues of a matrix .
14084	Calculate the ensemble of ensemble members .
14085	Initialize this step .
14086	Parse a step configuration file .
14087	Parse a step .
14088	Initialize the crash handler .
14089	Load the config file
14090	Initialize profile dir .
14091	Stage the default config file .
14092	Write to file .
14093	Erase the text .
14094	Dictionary of key - value pairs
14095	A dictionary of the arc data .
14096	Write the data to a file .
14097	Read a file .
14098	Read raw data from a file .
14099	Read a file and return lines and arcs .
14100	Combine data from parallel files .
14101	Add line data .
14102	Add the given arc data .
14103	Add executed lines to the given file .
14104	Summarize the file contents .
14105	Yields all lines from the specified line .
14106	Main loop .
14107	Replace old rlhist with new history
14108	Read a prompt and return it .
14109	Edit the last_syntaxError .
14110	Return True if the exception should be recompiled .
14111	Exit the program .
14112	Return the URL and revision
14113	Start a new frontend master
14114	Initialize the IPython widget .
14115	Retrieve information about the user .
14116	Convert roj to numpy array
14117	Return the source code for the given object .
14118	Set colors for the current color scheme .
14119	Toggle the color scheme .
14120	Return a textual representation of the traceback .
14121	Return a structured traceback .
14122	Format the extracted list .
14123	Format exception only .
14124	Show exception only .
14125	Start the debugger .
14126	Set formatting mode .
14127	Decorator for views that require a specific group .
14128	Ensure modules are imported from a list .
14129	Add a new line
14130	Create a new section .
14131	Get a function from the source code .
14132	Generate code for the given expression .
14133	Render the template .
14134	Apply dots to value .
14135	Render a template .
14136	Return default formatters .
14137	Add a function to the printer .
14138	Register a function for a given type and type .
14139	Called when a float precision is changed .
14140	Return a list of user config files .
14141	Configure the experiment .
14142	Configure logging .
14143	Configure the working directory .
14144	Prints a number of screen lines to stdout .
14145	Page a string on screen .
14146	Page a file .
14147	Get pager command .
14148	Get start string
14149	Prints a string to the screen .
14150	Pretty print the given object
14151	Convert a latex object to PNG .
14152	Convert a latex object to a PNG image .
14153	Returns True if the given object is a latex representation .
14154	Try to print a latex object .
14155	Add options to the given parser .
14156	validate a list of strings
14157	Validate that all keys in a dictionary are strings .
14158	Start the IOLoop loop .
14159	Handle incoming messages .
14160	Execute given code .
14161	Request completion .
14162	Get information about an object
14163	Perform a history request .
14164	Shutdown the server .
14165	Flush the queue .
14166	Ask the user for a given string .
14167	Start the channel
14168	Stop all channels
14169	Check if channels are running
14170	Load the connection file .
14171	Write the connection configuration file .
14172	Launch a new kernel .
14173	Shutdown the kernel .
14174	Restart the current kernel .
14175	Kill the current kernel .
14176	Interrupt the kernel .
14177	Send a signal to the kernel .
14178	Determine if the kernel is running .
14179	The shell channel
14180	Return the sub - channel object .
14181	Return the HbChannel object .
14182	Bind a kernel to an IPython application .
14183	Log a debug message .
14184	Get the list of entrypoints .
14185	Run pre_step .
14186	Performs post - step after a step .
14187	Finalize all extensions .
14188	Walk an egg directory .
14189	Scan a module in the egg_dir .
14190	Launch a new instance of the controller .
14191	Save connection info to file .
14192	load config from json file
14193	Loads secondary config from json file
14194	Execute a cell
14195	Enable autopx on shell
14196	Disable auto - run cell
14197	Runs a python cell .
14198	Runs heartbeat after a message .
14199	Run a task .
14200	Remove task from task
14201	Patch a Protocol .
14202	Patch an object with the given name .
14203	Accept a new connection .
14204	Reject a connection .
14205	Return an instance of the proxy .
14206	Handle form validation .
14207	Handle POST request .
14208	Set the user s attribute of the request .
14209	Produce a report of coverage reports .
14210	Check if modules have changed .
14211	Open an IPython editor .
14212	Try to fix the error editor .
14213	Get the contents of the clipboard .
14214	Add a function to the chain .
14215	Retrieve a metadata object for a given path .
14216	Configure the plugin .
14217	Import an object from a module .
14218	Try to use passwordless .
14219	Try to authenticate a passwordless server .
14220	Try to connect to a paramiko paramiko .
14221	Open a tunnel
14222	Open a tunnel
14223	Stop the task scheduler .
14224	Unwrap an exception .
14225	Register a new engine
14226	Unregister engine .
14227	Handle an execute reply message
14228	Flush all notifications from the server .
14229	Flushes all results from the socket to the given socket .
14230	Flush control messages from the given socket .
14231	Flush all control replies to the control socket .
14232	Receive IOPub messages from a socket .
14233	Perform a spin .
14234	Stop the spin thread .
14235	Perform the scheduler .
14236	Wait for jobs to finish .
14237	Send a function to the given socket .
14238	Send a request to the client .
14239	Get an AsyncResult object for the given messages .
14240	Query the queue for the given targets .
14241	Purge results from one or more targets .
14242	Request history from hub .
14243	Execute a query .
14244	Return a set of opcodes .
14245	Get the byte parser .
14246	Return a set of lines matching regexes .
14247	Parse the raw text .
14248	Return the first line of a line
14249	Given a list of lines return a set of lines .
14250	Parse the source .
14251	Returns a sorted list of all arcs in byte order .
14252	Return a dictionary of counts of exit counts .
14253	Return a list of child parsers .
14254	Yield byte numbers .
14255	Find all lines of the child parser .
14256	Return a string representation of the block stack .
14257	Split code into chunks .
14258	Check that the chunks are valid
14259	Yield the arcs of the trace .
14260	Return a list of all child parsers .
14261	Return all arcs in this parser .
14262	Add coverage options .
14263	Start coverage
14264	Generate coverage report
14265	Returns True if the given file should be ignored .
14266	Interpret a source distro name .
14267	Open a URL with authentication .
14268	Fetch a distribution .
14269	Get the parent of an object .
14270	The root topic .
14271	Render a template .
14272	Configure the plugin .
14273	Format an error
14274	Split the given data into a list .
14275	Convert notebook to nbformat
14276	Convert hex color to RGB
14277	Return a dict of the current color for a given style .
14278	Get a QFont for the given family .
14279	Update the execution count of the reply .
14280	Handle a history reply .
14281	Handle a pyout message .
14282	Handle display data .
14283	Initialize channel history
14284	Execute a file .
14285	Process an error message .
14286	Process an execute payload .
14287	Set the default style sheet .
14288	Edit a file .
14289	Make an interactive prompt .
14290	Make a continuation prompt
14291	Handle the style sheet .
14292	Handle syntax highlighting .
14293	Handle an async response .
14294	Sign the request parameters .
14295	Transforms the data into a dictionary .
14296	Returns information about virtual memory .
14297	Get system CPU times .
14298	Get the UID of the process .
14299	Get the gids of the process .
14300	Return a list of process threads
14301	Return list of open files .
14302	Get the commit hash of a package .
14303	Return package info .
14304	Print sys . path
14305	Returns the number of cpu cores on the system .
14306	Get the number of available CPUs .
14307	Returns the next set .
14308	Fetch a single row and return it .
14309	Fetch one or more rows .
14310	Fetch all rows
14311	Connect to a peer
14312	Read a notebook from json format .
14313	Convert a string to a notebook .
14314	Read a file and return a numpy array .
14315	Writes a notebook to the given format .
14316	Write a string to a file - like object .
14317	Convert ipynb files to metadata
14318	Load a value from a dictionary .
14319	Check if the given name matches the filter .
14320	Return True if the given class matches the given class .
14321	Return True if dirname should be ignored .
14322	Return True if the given file matches the given file .
14323	Determine if a function should be called .
14324	Determine if a method should be called .
14325	Determine if a module wants to use .
14326	Return a list of lines from a file .
14327	get list of lines
14328	Print a list of lines to stdout .
14329	Print a pdef definition .
14330	Returns the conversion factor between two currencies
14331	Converts value from one currency to another
14332	Compute the currency return between two dates .
14333	Get the encoding of a stream .
14334	Get the default encoding .
14335	Write the connection file .
14336	Initialize the heartbeat channel .
14337	log the connection info
14338	Initialize session .
14339	Initialize IO streams .
14340	Initialize the kernel .
14341	Create a connection to the controller .
14342	Register a new controller
14343	Convert HTML to text .
14344	Convert markdown to text
14345	Return the FQDN of a domain .
14346	Add options to nose .
14347	Configure noseExclude .
14348	Return True if the given directory should be ignored .
14349	Return True if the given extension is a dynamic library .
14350	Takes a list of functions and returns the result .
14351	Call each function in reverse order .
14352	Append a function to the list of functions .
14353	Inserts a function at the given position .
14354	Format usage message .
14355	Initialize application .
14356	Write the pid file .
14357	Remove the pid file
14358	Get the PID from the pid file .
14359	Construct an argument parser .
14360	Get the real name of a magic function .
14361	Highlight the current block .
14362	Rehighlight block .
14363	Sets the format for the current offset .
14364	Copies the text to the clipboard .
14365	Execute a shell command
14366	Callback when the prompt finished .
14367	Handles a tab press .
14368	Return the context menu .
14369	Process key press events .
14370	Insert a continuation prompt .
14371	Handle a complete reply
14372	Sends a callback to the shell .
14373	Handle an exec callback .
14374	Process a reply message .
14375	Handle incoming input request .
14376	Called when a kernel died .
14377	Handle an object info reply .
14378	Handle a pyout message .
14379	Handle a stream message .
14380	Handle a shutdown message .
14381	Execute the given file .
14382	Interrupt the kernel .
14383	Restart kernel .
14384	Prompt the user to restart the kernel .
14385	Show the call tip .
14386	Handle completion request .
14387	Process an error message .
14388	Process the execution of the execute command .
14389	Update the document contents .
14390	Add a plugin to the list of plugins .
14391	Chain all registered plugins .
14392	Yield the results .
14393	Executes all registered plugins .
14394	Configure the plugins
14395	Load the plugins .
14396	Load plugins .
14397	Convert a latex string to PNG .
14398	Convert a latex string to a PNG image .
14399	Convert a math string to an image .
14400	Check if the requirement exists
14401	Return an iterator of processes .
14402	Get the current CPU usage .
14403	Return the object as a dictionary .
14404	The name of the process .
14405	The name of the exe .
14406	Get the children of this process .
14407	Returns CPU percent .
14408	Gets the memory usage of the device .
14409	Returns a list of memory maps .
14410	Check if the process is running .
14411	Suspend the current process .
14412	Resume the current process .
14413	Kill the current process .
14414	Wait for the process to finish .
14415	Wrap the gtk kernel
14416	Hijack gtk . gtk
14417	Return True if identifier is shadowed by user
14418	Initialize the transformer instances .
14419	Register a new transformer .
14420	Unregister a transformer .
14421	Initialize checkers .
14422	Register a checker .
14423	Unregister a checker .
14424	Initialize handlers .
14425	Register a handler for a given name .
14426	Unregister a handler .
14427	Pre - filter handler .
14428	Find handler for line info .
14429	Apply transforms to a single line .
14430	Process a single line .
14431	Convert a list of lines into prefilters .
14432	Check if the current object is a prefilter
14433	Check for special characters .
14434	Check if a line is available .
14435	Check if alias is used .
14436	Handle line info .
14437	Expand aliases .
14438	Execute magic handler .
14439	Process magic line .
14440	Process a line .
14441	Compile a line .
14442	Reimplemented to hide the widget .
14443	Stop the hide timer .
14444	Draws the tooltip for the event
14445	Show call info
14446	Show the call tip .
14447	Handle the cursor position .
14448	Creates a property based on a proxied attribute .
14449	Convert a path to an absolute path .
14450	Validate an instance against a schema .
14451	The maskedDict
14452	Determine if a virtualenv is running on a virtualenv .
14453	Predict word frequency
14454	Create a view decorator .
14455	Return a list of default aliases for the current platform .
14456	Define a new alias .
14457	Define an alias .
14458	Validate an alias command .
14459	Execute an alias
14460	Transform an alias .
14461	Expand aliases .
14462	Generate the autodoc directive .
14463	Reset the current state
14464	Split a string into tokens .
14465	Return a QColor based on the given color .
14466	Returns a QTextCharFormat instance
14467	Generate a JWT
14468	A decorator for mutex .
14469	Remove expired tokens .
14470	Check to see if a token is already used .
14471	Validate a JWT
14472	Create a semaphore .
14473	Find common prefix
14474	Filter event handlers for this widget .
14475	Return the size of the widget .
14476	Check if the cursor can be cut .
14477	Checks if the clipboard can be paste .
14478	Clear the input buffer .
14479	Cut the text .
14480	Execute the given source .
14481	Get input buffer .
14482	Set the input buffer into the input buffer .
14483	Sets the font width
14484	Pastes the clipboard .
14485	Print the widget .
14486	Move the cursor to the top of the prompt .
14487	Reset the current font .
14488	Default implementation of insert method .
14489	Append HTML .
14490	Add HTML to the queue .
14491	Appends a plain text to the prompt .
14492	Clear the input buffer .
14493	Completes the completion widget .
14494	Fill text with given text .
14495	Check if a control key is down .
14496	Create the control interface .
14497	Create a QTextEdit object .
14498	Handle key press events .
14499	Return the plain text as plain text
14500	Return the end cursor to the end of the widget .
14501	Returns the column number in the input buffer .
14502	Gets the line from the input buffer .
14503	Returns prompt cursor
14504	Get text cursor
14505	Insert a continuation prompt .
14506	Insert HTML into the cursor .
14507	Insert HTML into the cursor .
14508	Inserts text into the cursor .
14509	Keep the cursor position in the buffer .
14510	Queries keyboard .
14511	Pager to page .
14512	Start the prompt .
14513	Read a line from the widget .
14514	Set the continuation prompt
14515	Set the top cursor .
14516	Display a prompt .
14517	Adjust the scrollbars .
14518	Main entry point .
14519	Copies the config file to the given location .
14520	Create a profile directory by name .
14521	Find a profile directory by name .
14522	Create a key based on the given comparison .
14523	Read a file
14524	Return a list of lines from a list of PS1 .
14525	Write a file to a temporary file .
14526	Close the stream .
14527	Write data to file .
14528	Register a new Heart Handler .
14529	Register a failure handler .
14530	handle a pong message
14531	Returns a list of batches of a given sequence .
14532	Return a path and filename from a path .
14533	Recursively walk the directory tree .
14534	Display all elapsed time
14535	Compute the time unit of elapsed time
14536	Extract wininst config from dist_filename .
14537	Uncache the given path .
14538	Quote an argument .
14539	Check if dist is missing .
14540	Write fetch options to setup . cfg file .
14541	Create the home directory if necessary .
14542	Determine if a file is an archive file .
14543	Makes a mutable class .
14544	Create a readonly proxy for an object .
14545	Create a new heading cell .
14546	Create a new notebook node .
14547	Create a new notebook node .
14548	Check if a directory exists .
14549	Unquote a filename .
14550	Get a file name .
14551	Find a file in the given path .
14552	Get the user s home directory .
14553	Return the xdg directory .
14554	Get IPython directory .
14555	Get IPython package directory .
14556	Get the path of an IPython module
14557	Check if target is outdated .
14558	Return the md5 hash of a file .
14559	Check for old config files .
14560	Update the suggestions dictionary .
14561	Returns a list of suggested objects with the given size .
14562	Return the suggestions for the given object .
14563	Return the relative path to this directory .
14564	Return a list of files matching a pattern .
14565	Return a list of lines .
14566	Read the md5 of the file .
14567	Begin a new snapshot .
14568	Print the profiler .
14569	Close the profiler .
14570	Called when the client is listening .
14571	enable wx
14572	Disable thewx event loop .
14573	Disable the Qt4 event loop .
14574	Enable gtk . gtk
14575	Enable Tkinter .
14576	Enable the pyglet .
14577	Save wave_saver
14578	Initialize the database .
14579	Runs a SQL query and returns a list of tuples .
14580	Get information about session .
14581	Get the last n rows .
14582	Get a range of histogram records .
14583	Get history file name .
14584	Change session name .
14585	Reset the history .
14586	Generator for histogram session
14587	Store output for a given line number .
14588	Write the current session to the database .
14589	Stop the simulation .
14590	Get the number of CPU cores .
14591	Get a list of CPU CPU times per CPU .
14592	Return a list of disk partitions .
14593	Return a list of PIDs
14594	Nicely format a range .
14595	Format a list of statements .
14596	Return a short representation of the stack .
14597	Decorator for expensive caching .
14598	Join a list of regexes .
14599	Remove a file .
14600	Updates the contents of a dict
14601	Update cluster profiles
14602	Start a cluster .
14603	Stop a cluster .
14604	Search for a command in the PATH
14605	Read the system body and wait for it to finish .
14606	Find all code units in morfs .
14607	Run a report on the given morfs .
14608	A decorator that raises an AssertionError .
14609	Sets the trace for the current frame .
14610	A decorator that restricts the time of the decorated function .
14611	Initialize IPython extensions
14612	Run the code
14613	Run code in user namespace .
14614	Run all startup files
14615	Run all files in the app .
14616	Execute code_to_run if needed .
14617	Run the module .
14618	Decorator for generic methods .
14619	Find the data filename for a static file
14620	Return the contents of a file .
14621	Escape HTML characters .
14622	Generate HTML report .
14623	Make local static report files .
14624	Write HTML to file .
14625	Return the hash for the given file .
14626	Generate the index file .
14627	Read coverage file .
14628	Write coverage status to directory .
14629	Compare two lists
14630	get a slice from a sequence
14631	Split seq into chunks .
14632	Read the configuration file .
14633	Read manifest from MANIFEST . INIFEST .
14634	Convert a glob pattern to a regular expression .
14635	Check if filename matches a pattern .
14636	Return a list of all files in the git repository .
14637	Start a new kernel .
14638	Shutdown kernel .
14639	Kill a kernel .
14640	Get a kernel by its id .
14641	Get the ports for a kernel .
14642	Returns the notebook associated with the given kernel_id .
14643	Start a kernel .
14644	Shut down a kernel .
14645	Interrupt the kernel .
14646	Restart a kernel .
14647	Create an IOPub stream for the given kernel .
14648	Create a shell stream for the kernel .
14649	Create a HB stream for the kernel .
14650	Remove all properties from the descriptor .
14651	Export HTML to file .
14652	Export HTML to file .
14653	Ensure an image tag is unicode .
14654	Fix HTML tags .
14655	Exports this widget to a file .
14656	Get a single object from the given class .
14657	Build a query from a list of terms .
14658	Convert a query string to a query .
14659	Gets a queryset of days from the given date .
14660	Gets a queryset of days less than the given date .
14661	Determine if a field is null or blank .
14662	Ensure fields are case insensitive
14663	Add options to parser .
14664	Validate attributes against this instance
14665	Determine if the method should be called .
14666	Rotate the text .
14667	Monkey patch pyzmq
14668	Create an XML parser from a URL .
14669	The websocket url
14670	Re - serialize a reply message .
14671	Inject a cookie message into the request object .
14672	Start the Hb thread .
14673	Actually start the Hb thread .
14674	Stop playback .
14675	If the source is a file - like object load it .
14676	Get the index for the given index .
14677	Seek to a given index .
14678	Edit the given index .
14679	Display the block at the given index .
14680	Print all src blocks .
14681	Perform a series of data against a collection
14682	Execute a collection of batches .
14683	Perform a thread - wise operation on a sequence of subjects
14684	run a collection in parallel
14685	A decorator that wraps a function in a context manager .
14686	Decorator to inject object attributes into object .
14687	Return traceback source code for traceback .
14688	Return a list of lines that have been inspected .
14689	Displays a countdown .
14690	Clean up the controller and kill it .
14691	Pre - call method .
14692	Ignore the state of the result .
14693	Decorator to add message IDs to the outstanding state .
14694	This method is called when the client has completed .
14695	Runs the function after f .
14696	Get all the messages .
14697	Get a single message from the queue .
14698	Decorator to add a property to an object .
14699	Return only one or more fields
14700	Parse the given URL .
14701	Return a list of modules that match the given path .
14702	Get a list of all root modules
14703	Quick completions
14704	Return a list of module names .
14705	Prompts the user for interactive completion .
14706	returns a list of completion completions
14707	Quote an attribute .
14708	Configure the plugin .
14709	Write error list to stream .
14710	Add an error to the testlist .
14711	Add a failure to the report .
14712	Add a test to the report .
14713	Generate a random number of bytes
14714	Given a list of loads return the index of the weight
14715	register engine engine
14716	Unregister an engine .
14717	Handle all pending tasks .
14718	Dispatch a task submission .
14719	Evaluate the timeouts that are not reachable .
14720	Fail an unreachable message .
14721	Determine if a job should be run .
14722	Save a job that has been met .
14723	Submit a task to the engine .
14724	Dispatch the result of a task .
14725	Handle a result message .
14726	Handle unmetric dependencies .
14727	Update the dependency graph .
14728	Start logging .
14729	Print the state of the log .
14730	Write a log line .
14731	write to logfile
14732	Stop logging .
14733	Return a new worksheet node .
14734	Add a command chain .
14735	Register a regular expression .
14736	Match a key .
14737	Yield tuples matching the given key .
14738	Called when the notebook directory is changed .
14739	Return a list of notebook names .
14740	Create a new notebook_id for the given notebook .
14741	Delete notebook with given id .
14742	Check if notebook exists .
14743	Return the path to a notebook
14744	Get file path by name
14745	Get a notebook
14746	Return the last modified notebook object .
14747	Create a new notebook
14748	Save a notebook
14749	Save a notebook object
14750	Delete a notebook .
14751	Create a new notebook .
14752	Copy a notebook .
14753	Remove tokens from a list of tokens .
14754	Tokenize source code .
14755	Load the default config file .
14756	Return a list of the default application classes .
14757	Overrides pylab .
14758	Initialize the IPython application .
14759	Create an interactive shell instance .
14760	Initialize banner .
14761	Return a string representation of an object .
14762	Parses a name into a list of names .
14763	Set the default value for this trait .
14764	Called when a change is changed .
14765	Return a mapping of traits to traits .
14766	Return the metadata for a trait .
14767	Check if value is a subclass of klass
14768	Return the default value .
14769	Returns True if all tasks have been satisfied .
14770	Return True if all tasks are unreachable .
14771	Json - serializable representation of the dependency .
14772	Calculate the depth of a node in a tree
14773	Pretty print a binary tree .
14774	Disambiguate a DNS URL .
14775	Return the result of all elements in this RDD .
14776	validate targets
14777	Dispatch a monitor message .
14778	Dispatch a query message .
14779	Handle a new Heart
14780	Handle a heart failure
14781	Save a task request to the queue .
14782	Save a task result .
14783	Save an IOPub message
14784	send a connection request
14785	register engine
14786	Unregister an engine .
14787	register a new engine
14788	Send a shutdown request
14789	Purge results from the database .
14790	Extract data from a record .
14791	Get results from client .
14792	Get history of a client .
14793	Process a query message .
14794	Change the directory to the given directory .
14795	Decodes stdout and stderr from a completed command .
14796	Run a command under r root .
14797	Execute the rscript command
14798	Dispatch a message .
14799	Determine if a message is from a frontend
14800	Report the given morfs .
14801	Add analysis to a file .
14802	Get installed version
14803	Recursively convert unicode strings to unicode
14804	Extract the header .
14805	Check to see if packer is valid .
14806	Create a message .
14807	Sign a list of messages .
14808	Packs a message into the wire .
14809	Send a message .
14810	Send a message to a stream .
14811	Receive a message from a socket .
14812	Return ident_list and msg_list from msg_list .
14813	Unpack a message list .
14814	Save SVG document .
14815	Write svg to clipboard .
14816	Convert a SVG string to a QImage
14817	Create a dictionary of information about an object .
14818	Get the docstring of an object .
14819	Get the source of an object .
14820	Get the argument signature of an object .
14821	Generate call documentation for a callable object .
14822	Get the absolute file of an object .
14823	Get the source line number of the given object .
14824	Get the definition of an object .
14825	Return header string .
14826	print a message
14827	Print function definition .
14828	Display the documentation of an object .
14829	Show the source of an object .
14830	Print the contents of a file .
14831	Format fields .
14832	Display information about an object .
14833	Parses namespace patterns .
14834	Returns a threaded reactor .
14835	Decorator that returns a Deferred .
14836	Find the best matching string .
14837	Return a string representation of the document .
14838	Convert to XML
14839	Load all the modules in a package .
14840	Invert a dictionary into a dictionary
14841	Merge two data structures .
14842	Convert an object to primitives .
14843	Convert raw string to string
14844	Return a list of figs .
14845	Print the figure as a string .
14846	wrapper for matplotlib runner
14847	Select figure format
14848	Return gui and backend
14849	Activate matplotlib .
14850	Configure inline backend .
14851	Activate a pylab .
14852	Called when a function is called .
14853	Start the current thread .
14854	Stop tracing .
14855	Start a new tracer .
14856	Instantiates the execution function .
14857	Start the collector .
14858	Stops this collector .
14859	Stop tracing .
14860	Resumes execution .
14861	Get line data .
14862	Collect exceptions from a callable object .
14863	Return a list of traceback lines .
14864	Start the coverage process .
14865	Get the canonical directory of a morf .
14866	Return the source code for the given filename .
14867	Return True if filename should be traced False otherwise .
14868	Determine if the debug flag should be traced .
14869	Log a warning message .
14870	Check if any of the source packages are imported .
14871	Initialize the configuration .
14872	Internal method to terminate the object .
14873	Exclude a regex from the configuration .
14874	Returns the regex for the exclude attribute .
14875	Save the data to disk .
14876	Combine parallel data .
14877	Harvest the data .
14878	Perform analysis of morf .
14879	Parse morf .
14880	Analyze the given input into a AnalysisUnit object .
14881	Return a report of the given morfs .
14882	Annotate the given morfs .
14883	Generate HTML report .
14884	Produce a XML report of the coverage report .
14885	Display a list of objects
14886	Display a list of objects .
14887	Displays one or more or more objects .
14888	Display a PNG image .
14889	Displays a JPEG or JPEG image .
14890	Displays a LaTeX object .
14891	Display a list of objects
14892	Displays a set of javascript objects .
14893	Reload file .
14894	Find the path of a command .
14895	Implement pexpect .
14896	Forward read events to fd .
14897	Main thread .
14898	Determine the launcher class .
14899	Starts the cluster .
14900	Build and return a launcher instance .
14901	Start the engine .
14902	Start the cluster .
14903	Return wx . py
14904	Check if the application is running in an event loop .
14905	Start an event loop .
14906	Get an IPython application .
14907	Return True if the app is running in an event loop .
14908	Start an event loop .
14909	Create a blank canvas .
14910	Draw a cross .
14911	Draws a line between two positions .
14912	Set text at given position .
14913	Create an ANTsImage from a grayscale image .
14914	Generate a UUID
14915	Return a unique key from a GET request .
14916	Get the domain of a given URL .
14917	Parse URL arguments
