0	converts xml to url list
1	Download url from url
2	Download a video page .
3	Print text .
4	Prints text to stderr .
5	Prints a message to the console .
6	Prints a log message .
7	Detects the operating system .
8	Download vimeo by url
9	get info by xml
10	Generate video url
11	get real URL
12	Computes the text according to the operating system .
13	Download video by pid
14	Display the output of this stream .
15	Download a video by vid
16	Returns all matches of the given text .
17	Get the value of a query parameter
18	Get content from URL .
19	Fetch content from URL .
20	Parse a host name and port .
21	Get roomid by room url key
22	get title by topic
23	Download a jsonapi content by topic topic .
24	Download a topic by topic part
25	Check if a task is running .
26	Removes the event buffer from the event buffer .
27	Connects to Snowflake .
28	Get the AWS credentials from the server .
29	Returns the value of the given field .
30	Copy an expert .
31	Dumps a table to stdout .
32	Upload this object to Google Cloud Storage .
33	Get the maximum partition for a table .
34	Get database connection .
35	The current state of the task .
36	Wait for all workers in the Gunicorn web server .
37	Gets the client connection .
38	Translates a set of values .
39	Gets an instance .
40	Insert an instance .
41	Updates an instance .
42	Deletes an instance .
43	Gets a database .
44	Creates a database .
45	Updates a database .
46	Deletes a database .
47	Exports an instance .
48	Executes the SQL proxy .
49	Removes the SQL proxy .
50	Get the version of the SQL proxy .
51	Creates a new connection .
52	Retrieves a connection from the database .
53	Deletes a connection .
54	Get CloudSqlProxy runner
55	Get database hook .
56	Called when the database hook is invoked .
57	Free TCP port .
58	Normalize job id .
59	Get the error code for an error .
60	Deletes dag runs .
61	Deletes DAG task instances .
62	Sets the state of the DAG .
63	Prints performance statistics .
64	Runs the scheduler metrics .
65	Invokes Lambda function .
66	Evaluates the operator .
67	Creates a directory with the given mode .
68	Convert string to float .
69	Make sure that the given value is an aware value .
70	Convert a value to ana date .
71	Create a new date from the arguments .
72	Get the druid connection
73	Creates a new HTTP connection .
74	Sends a request .
75	Handle response .
76	Execute request and check response
77	Closes the session .
78	Creates a new session for the given arguments .
79	Drops tables .
80	Formats an exception message .
81	Gets records .
82	Execute a HQL query
83	Executes the SQL .
84	Insert rows in the table .
85	Gets the CosmosDB client .
86	Checks if a collection exists .
87	Creates a collection .
88	Checks if a database exists .
89	Create a database .
90	Deletes a database .
91	Deletes a collection .
92	Insert documents into database .
93	Deletes a document .
94	Gets document .
95	Query for documents .
96	Get a function .
97	Creates a new function .
98	Update a function .
99	Upload a function to a function .
100	Deletes a function .
101	Returns the status of the given dependency .
102	Checks if the dependency is met .
103	Returns the reason of failure reason .
104	Parses the s3 config file .
105	Get the credentials .
106	Get vertica connection .
107	Log the message .
108	Returns the file location of a zip file .
109	Get the paths of the files in the given directory .
110	Returns the task instance of this task .
111	Launches the process manager .
112	Send termination message to DagParser .
113	Exit the process .
114	Starts the DagFileManager manager .
115	A helper method to process the incoming dag .
116	Waits for a given dag .
117	Refresh the dag directory .
118	This method is used to print statistics .
119	Deletes any import errors that were not found .
120	Logs the graph file processing statistics .
121	Sets the file paths .
122	Wait until all processors have finished .
123	Initializes the DAGs .
124	Wait for the process to exit .
125	Creates a new SSH connection .
126	Creates a transfer job .
127	Transfer a job .
128	Transfer jobs from a project .
129	Transfer a job .
130	Transfers a job to a Gcp job .
131	Cancels a transfer operation .
132	Transfer operation .
133	Resume a transfer operation .
134	Waits for a job to complete .
135	Returns the task reschedules for a given task instance .
136	Get the number of slots in the pool .
137	Execute a command
138	Removes an option from the given section .
139	Get the specified section .
140	Allocate the keys for the project .
141	Starts a transaction .
142	Commit a project .
143	Writes a set of keys to the project .
144	Rollback a transaction .
145	Execute a query on a project .
146	Retrieve an operation .
147	Delete an operation .
148	Polls until the operation is running .
149	Export project to storage bucket
150	Imports a file from storage bucket .
151	Publishes a message to a target .
152	Get the hostname .
153	Gets the language client .
154	Analyze entity .
155	Annotate a document .
156	Classify a document .
157	Get the template field of a class .
158	Processes a template field .
159	Dispose the DB connection pool .
160	Adds the classpath to the classpath .
161	Check the task id
162	Returns the value of the cacheconf variable .
163	Convert an object to a JSON object .
164	Returns a chunk of items from the specified chunk size .
165	Iterates over the iterable using the given initializer .
166	Sets up all of the given tasks .
167	Prints a table to a table
168	Returns the filename for the given task .
169	Returns a connection to the API .
170	Performs a dataproc operation .
171	Coerces the content to JSON .
172	Handle the operator execution .
173	Executes pig command .
174	Get the state of a celery task .
175	Calculate the number of tasks per send process .
176	Returns the number of tasks per fetch .
177	Get the default value for the given key
178	Create a connection to the client
179	Creates a job .
180	Gets a job .
181	Wait for a job to finish .
182	Creates a new version .
183	Sets the default version .
184	Returns a list of versions .
185	Deletes a version from a model .
186	Create a new model
187	Get a model by name
188	Insert items in dynamodb .
189	 integrates the plugins in the system .
190	Get the default executor .
191	Get executor .
192	Handle an error .
193	Get the mssql connection .
194	Triggers a dag .
195	Deletes a dag .
196	Get task info .
197	Get the list of all pools .
198	Create a new pool
199	Delete a pool
200	Creates or updates a container group .
201	Get the exit code of the instance .
202	Gets the messages for the instance .
203	List logs in a container .
204	Deletes a container group .
205	Check if a container exists in a resource group .
206	Applies default parameters to this function .
207	Get the ingest query for this index .
208	Looks for messages on all channels .
209	Search for a DagRun .
210	Returns all the task instances of this flow .
211	Retrieves the task instance of the given task .
212	Returns the previous dag run .
213	Gets the previous scheduled dag run .
214	Update the state of this task .
215	Checks the integrity of this task instance .
216	Sends a request to Jenkins .
217	Extracts the airflow variables from the given context .
218	conditionally trigger
219	Send a metric
220	Query for metric
221	Retrieves a dag .
222	Marks a task instance as a zombie .
223	Loads a DAG from the DAG .
224	Iterates over all DagBag files and processes them .
225	Returns a report of the dagbag loading stats .
226	Add days to the specified date .
227	Converts the given date to the given output format
228	Checks whether the path matches the given regex .
229	Checks to see if the file exists or not .
230	Updates the task instances .
231	Returns a number for this task .
232	Returns the command to run a task .
233	Get the state of this task .
234	Records the task instance as FAILED .
235	Read a task instance from the database .
236	Deletes the XCom .
237	Get the node id .
238	Check if the dependents of this dependency is done .
239	Get the time for retry time .
240	Check if the state is up for retry .
241	Returns whether this task is full .
242	Get the Dagrun of this task .
243	Adds a new value to the X com .
244	Pulls a single task .
245	Run the context .
246	Close the logger .
247	Returns a connection to the compute service .
248	Start an instance .
249	Sets machine type .
250	Gets an instance template .
251	Adds an instance template .
252	Gets the instance group manager .
253	Updates an instance group manager .
254	Waits for an operation to complete .
255	Check if bucket exists
256	Creates a bucket .
257	Returns true if the bucket with the given prefix exists .
258	Gets the prefixes for the specified bucket .
259	List keys in given bucket .
260	Check if key exists in S3 .
261	Loads a key from S3 .
262	Get key from bucket .
263	Retrieves a key from S3 .
264	Check if a wildcard key exists in the bucket .
265	Get the key for a wildcard key .
266	Uploads a file .
267	Loads a string from a string .
268	Uploads the given bytes to S3 .
269	Uploads a file .
270	Creates an object from the given bucket key .
271	Query the Cassandra connection
272	Converts a user type value into a data map .
273	Send an email .
274	Gets the speech client .
275	Attempts to recognize speech .
276	Run Spark SQL hook .
277	Imports the airflow plugins .
278	Checks if a plugin is valid .
279	Adds tasks to the task instances .
280	Get an AzureDL file client
281	Checks if a file exists in the cache .
282	Uploads a local file .
283	Recursively walks a path .
284	Runs the query .
285	Compress a file .
286	Execute mssql .
287	Wrapper for logging .
288	Build metrics .
289	Creates a cgroup .
290	Deletes a cgroup .
291	Parses the host and returns it as a URL .
292	Perform an API call .
293	Gets the connection .
294	Execute a query .
295	Get the description of an object .
296	Returns the available fields for an object .
297	Get an object from Salesforce .
298	Convert a column to a timestamp
299	Write an object to a file .
300	Get the mongo connection .
301	Gets the mongo collection .
302	Replaces a collection with the specified documents .
303	Checks if mail attachment exists .
304	Retrieves mail attachments .
305	Retrieves the mail attachments .
306	Find attachment by name .
307	Get the file name and payload .
308	Put records in the firehose .
309	Get the status of the given dependency instance .
310	Sends an email to the server .
311	Send email .
312	Returns the value of the result value .
313	Check if blob exists .
314	Returns true if the blob with the given prefix exists .
315	Load string data .
316	Gets the content of a blob .
317	Deletes a file .
318	Execute MLSD command .
319	Get the FTP connection .
320	Returns the contents of a directory .
321	Retrieve a file from the remote server .
322	Write a local file to a remote file .
323	Get the modification time of a file .
324	Executes the webhook hook .
325	Gets the file service .
326	Check if a directory exists .
327	Check if a file exists .
328	List directories and files in a share .
329	Create a directory .
330	Create a file .
331	Create a string from a string .
332	Create a file from a stream .
333	Gets the storage client .
334	Copies object from source bucket to destination bucket .
335	Download given object from given bucket and filename .
336	Uploads a file .
337	Checks if the given object exists .
338	Check if the blob is updated after the given timestamp .
339	Deletes the given object .
340	List the contents of a bucket .
341	Get the file size of the given object
342	Gets the CRC32c checksum of the given object .
343	Get the MD5 hash of the given object
344	Create a bucket .
345	Composes the given source object to the destination object .
346	Checks if the current job status has changed .
347	Get the status message for a job .
348	Uploads a file and adds it to S3 .
349	Loads s3 resources .
350	Checks if the given S3 url exists in the bucket .
351	Get the log connection .
352	Create a training job .
353	Creates a tuning job .
354	Creates a transform job .
355	Creates an endpoint .
356	Handles a training job .
357	Get the status of a job .
358	Determines the status of a training job .
359	Start the dataflow hook .
360	Run SQL migrations .
361	Run migrations in the database .
362	Deletes an instance .
363	Creates an instance .
364	Creates a table .
365	Deletes a table .
366	Updates a cluster .
367	Prepare CLI command .
368	Prepares hive configuration .
369	Infers the field types for the given table .
370	Writes a table to the file .
371	Configure the metastore client .
372	Check for a named partition
373	Checks if table exists .
374	Get a new connection .
375	Get the results of a HQL query .
376	Writes the results to a csv file .
377	Get records from the given HQL .
378	Get PQL results from a HQL query
379	Gets the product search client .
380	Get the endpoint for sending requests .
381	Send message type
382	Bind parameters .
383	Escape a string
384	Checks to see if the string field is null or null .
385	Validates the given value against the expected type .
386	Gets the BigQuery connection .
387	Builds a service for HTTP requests .
388	Checks if a table exists .
389	Creates an empty table .
390	Updates a table .
391	Wait for running BigQuery jobs .
392	Deletes a table .
393	Updates a table .
394	Grant access to a source dataset .
395	Gets a dataset .
396	Get the list of datasets .
397	Inserts all rows in a table .
398	Executes the given operation .
399	Executes the given operation on the given sequence .
400	Loads a batch of rows from the job .
401	Execute postgres query .
402	Make temporary directories in the remote directory .
403	Creates a queue .
404	Sends a message to a queue .
405	Executes a command .
406	Clean up the configuration file .
407	Main entry point .
408	Renders the HTML header .
409	Get the container of this element
410	generate js chart
411	Add a x axis to the list
412	Add a y axis axis .
413	Get a connection to the database .
414	This method is used to log a task .
415	Wraps the given file as a gzip file .
416	Get last dag run .
417	Create a dagrun .
418	Send message .
419	Converts an object to a JSON response .
420	Opens a file or a zip file .
421	Generate a cache key for the request .
422	Gets the VideoIntelligenceServiceClient .
423	Annotate video .
424	Get the API key .
425	Get a new HTTP connection
426	Sends an alert to the client .
427	Build the opsgenie payload .
428	Build the opsgenie alert hook
429	Get the client type
430	Starts a query .
431	Get query status
432	Check query status .
433	Get the connection to the remote server .
434	Handle a rate limit exception .
435	Call a request .
436	Returns a set of partitions .
437	Gets the table .
438	Gets the location of a table .
439	Get the status of a cluster .
440	Deletes a cluster .
441	Get snapshots for a cluster .
442	Restores a snapshot from a cluster .
443	Creates a cluster snapshot .
444	Call this method .
445	Create a job flow .
446	Filter results from result .
447	Filters the result that matches the given extension .
448	Execute mongo hook
449	Get the pool by name
450	Create a pool .
451	Get a pool .
452	Convert a proto object to a proto .
453	Wait for a operation .
454	Get operation .
455	Appends a label to the cluster .
456	Creates a cluster .
457	Fetches a cluster .
458	Gets the endpoint for the Discord webhook .
459	Builds the message payload .
460	Starts the webhook .
461	Encrypt a plaintext .
462	Imports a table .
463	Imports a query .
464	Export a table .
465	Gets the TextToSpeechClient .
466	Synthesize speech from input data .
467	Closes the log file .
468	Returns a list of init containers .
469	Get environment variables .
470	Gets the worker secrets .
471	Build security context .
472	Get extra links .
473	Schedules a job .
474	Launch the process .
475	Starts the process .
476	Wait for the result .
477	Exit the process .
478	Adds import errors to the graph .
479	Processes the task instances .
480	Change the state of a task instance .
481	Gets the concurrency map for a given state .
482	Change the state of the executable task instances to be updated .
483	Enqueue task instances with queued state .
484	Executes the task instances .
485	Changes the state of the TaskInstance to be executed .
486	Process executor events .
487	Load a file from a file .
488	Update counters .
489	Manage executor state .
490	Get the dag run for the given dag .
491	Returns the task instances for a given dag .
492	Executes the task instances for a task .
493	Sets the unfinished dag runs to failed .
494	Executes the workflow .
495	Called when the task is running .
496	Gets the client for a project .
497	Gets the instance .
498	Applies the given function to the given instance .
499	Apply configuration to an instance .
500	Apply configuration to an instance .
501	Deletes an instance .
502	Retrieves a database from an instance .
503	Creates a database .
504	Updates a database .
505	Deletes a database from an instance .
506	Checks if animap attachment exists .
507	Add additional parameters to the additional parameters
508	Get a connection to the keyspace .
509	Check if a table exists .
510	Checks if a table exists .
511	Builds the command to poll the driver s driver status .
512	Submit Spark driver .
513	Processes a spark submit log .
514	Processes the driver status log .
515	Get the task runner .
516	Wait for the task to end .
517	Execute SQL query .
518	Configure CSV file .
519	Write the schema to the local schema file .
520	Get column type map from schema
521	Map mysql_type to string .
522	Invokes the hook for exporting
523	Sends a lineage .
524	Dejson with extra data
525	Returns a range of dates
526	Convert time seconds to a list of minutes
527	Returns the number of days ago .
528	Find a role in the database .
529	Deletes a role .
530	Get user roles .
531	Returns all permission views of this user .
532	Checks if the user has the specified role .
533	Checks if a permission has the given permission .
534	Delete faulty permissions
535	Merge permission .
536	Sets admin permission view .
537	Synchronizes the permissions on a dag .
538	Merges the permission VM for all DAGs .
539	Get a Fernet object .
540	Check for partition .
541	Get the catalog hook
542	Checks to see if there is a batch of messages .
543	Get the connection to use .
544	Get a connection from the webhdfs connection .
545	Check if the given HDFS path exists .
546	Upload a file to the destination .
547	Get a connection to the pinot broker .
548	Get the URI for the connection .
549	Convert a date to a dictionary .
550	Convert a time to a JSON object .
551	Gets the redis object .
552	Execute a SQL query with a PQL query and return the result as a DataFrame .
553	Execute SQL statement .
554	Set autocommit on connection .
555	Insert rows into a table .
556	Serialize a cell to ISO format
557	Returns a JSON representation of the job .
558	Get link information
559	Gets the cloudant connection .
560	Executes the hook .
561	Gets the credentials from the key file .
562	This method is used to authorize Google API requests .
563	If the given function throws an exception .
564	Wraps the given function with the project_id parameter .
565	Returns whether this class is finished .
566	Prepare the connection command .
567	Convert an image into a torch tensor .
568	Create a new tensor with mean and standard deviation
569	Resize image .
570	Fills an image with padding .
571	Crop the image .
572	Crop the image .
573	Flips the image .
574	Transform an image into a PPI perspective image .
575	Convert an image to a Plip image .
576	Crop the image
577	Enhanced brightness factor .
578	Apply contrast factor .
579	Apply saturation factor .
580	Change the hue of an image .
581	Applies a gamma function to the image .
582	Rotate an image .
583	Transform an image .
584	Convert image to gray scale
585	Converts a tensor into an image .
586	Find classes in a directory .
587	Finds the files that have the specified extension .
588	Extracts the labels of the given info file .
589	Read matches files .
590	Returns a batch size of the output .
591	For distributed .
592	Download url from url
593	Get a directory for a given root .
594	Returns a list of all files in the given root .
595	Download a file from Google drive .
596	Generate random parameters
597	Generate random parameters
598	Generate random crop parameters .
599	Apply the parameters to the image parameters .
600	Generate random parameters .
601	Download the file .
602	Download the training folder
603	Download a folder
604	Returns the current theme name .
605	Do auto completer .
606	Render the current preferences .
607	Get all themes .
608	This method is used to parse the query
609	converts currency to currency
610	Computes a custom gradient using the gradient .
611	Creates an Independent Normal diagnostic .
612	Compute the log probability of a sholment .
613	Example of EMC .
614	Wraps the given function and replaces it with the docstring .
615	Returns the simple name for the given distribution .
616	Builds a custom RV variable for the given distribution .
617	Build a random variable .
618	Creates a new random variable for the given distribution .
619	Computes the predictive mean and variance of a given model .
620	Performs a forecast on the forecast model .
621	Returns the maximum mask for the given axis
622	Assert that the given value is true .
623	Assert that the rank is less than the given rank .
624	Returns the event size for the given event shape .
625	Evaluates all - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
626	Convert to a function function name .
627	Compute the size of the mixture parameters
628	Gets the next interceptor from the stack .
629	Wraps the given function with an interceptor .
630	Record execution to a tape .
631	Generate logistic data .
632	Visualizes decisions .
633	Returns the training input pipeline for the input dataset
634	Checks that the map_value is valid .
635	Trace a transition operator .
636	Executes the given transition operator .
637	Call the given transition operator .
638	Converts an object into a broadcast structure .
639	Transform the log probability of the given bijector to the given bijector .
640	Runs the leap frogg step .
641	Generates a new state for the current state .
642	The monte carlo .
643	Applies adaptation .
644	Create a new layer configuration from the given configuration .
645	Converts the given value to a tensor .
646	Creates a scale operator .
647	Creates a function that takes a random state part of the Markov chain .
648	Returns a function that assigns a uniform distribution to the current state .
649	Expand the shape to the event rank
650	Returns the lower bound of this distribution .
651	Computes the softmax probabilities for this category .
652	Checks that the outputs are valid .
653	Installs TF features .
654	Performs a regression on the features .
655	Get the coverage matrix .
656	Computes the cholesky of a vector .
657	Returns the standard deviation of the given value .
658	Computes the variance of the given value .
659	Make a positive axis .
660	Squeeze the input tensor .
661	Standardization function .
662	Reconstruct the inverse of z .
663	Create a transition matrix for a specific autoregressive factor .
664	Compute the stochastic trend .
665	Generate a sequence of sequence indices .
666	Generate permutations for a given number of results .
667	Get the indices of the sequence
668	Compute the base expansion size .
669	Returns all primes less than n .
670	Returns the epsilon of the machine .
671	Runs Hager_zhang .
672	Fixes the step size .
673	Performs bracketing .
674	Performs a loop after bracketing .
675	Performs an inner bisection .
676	Prepares the arguments for the gradient .
677	Print values to a print stream .
678	Generate a softmax kernel for a quermite transformation .
679	Create a softmax vector for softmax .
680	Checks that the quadrature parameter is valid .
681	Determines the shape of the batch event .
682	Interpolates a grid location .
683	Interpolate the scale of a grid .
684	Scale a linear operator .
685	Concatenates the arguments .
686	Computes the log explication of a vector matrix .
687	Computes the log expression for the given matrix vector .
688	Computes the matrix of a vector matrix .
689	Extracts log probabilities from a number of states .
690	Returns the marginalized probabilities of the current state .
691	Computes the posterior marginals of the given observations .
692	Sets the posterior mode .
693	Choose a random direction across all input components .
694	Sample the next state of the current state .
695	Call the given function and return the result .
696	Pads x to the right - padded rank
697	Initialize a single - step .
698	Builds a trainable posterior from the posterior .
699	Build a Factored varational loss .
700	Performs a minimal optimization on a graph .
701	Computes the mean and variance of a given time series .
702	Computes the initial value of a time series in a batch .
703	Get the batch shape for the distribution .
704	Creates a new Multivariate NormalOperator for the given distributions .
705	Computes the sum of multvariate norms .
706	Computes the empirical statistics for the observed time series .
707	Expand the trailing dimension
708	Converts an observed time series into a mask .
709	Performs the posterior draws .
710	Get range .
711	Make a summary statistic for the given attribute .
712	Unified function signature .
713	Resolve the name of the distribution .
714	Returns the required arguments for this function .
715	Computes the KL divergence between two distributions .
716	Build the distribution from the given model .
717	Resolves a graph .
718	Computes the entropy of this distribution .
719	Checks that the argument is in the support of the support .
720	Creates a summary of the specified sequences
721	Creates a summary of the reconstruction .
722	Visualizes qualitative analysis .
723	Add mean parameters .
724	Computes the mean for nats and bits .
725	Creates a MultivariateNormal diagnostic .
726	Generate the state of the given batch .
727	Creates a Multivariate Normal diagnostic .
728	This method is used to perform a batch of samples .
729	Returns the likelihood of the decoder .
730	Preconstructs the given inputs .
731	Computes the static prior of a sample
732	Applies dynamic prior to the given samples .
733	Returns the shape of the batch .
734	Get the batch shape of the parameters
735	Returns a state space model with the given parameters .
736	Samples the prior state space .
737	Compute the minimum event name of the given bijector list .
738	Convert vector size to square matrix size .
739	Returns a sorted sort for the specified values .
740	Sorts the values in the specified axis in ascending order .
741	Convert an ndarray to an ndtr
742	ndtr function
743	Compute an ndtriing tensor .
744	Log the log - ndtr at the given index .
745	Computes the log - ndtric series .
746	erfinv .
747	Computes the log - distribution for a given distribution .
748	Computes the log probability of messages from the data set .
749	Sample text messages .
750	Returns true if the given index_point is a multivariate parameter .
751	Returns the marginal distribution for the given index points .
752	Returns the index point of the Gaussian process .
753	Make an IAF layer stack .
754	Performs a single step .
755	Returns the result of the training state .
756	Returns the outer squared difference between two values .
757	Computes the value of the given function and returns the batch jars .
758	Prevent the second derivative of x .
759	Perform a distributional transform .
760	Split the covariance matrix into marginals .
761	Decompose a state space from the posterior marginals .
762	Decompose the state space by the given model .
763	Decompose forecast by component
764	Converts a dense vector to a sparse tensor .
765	Returns a new operator for this operator .
766	Returns a string representation of the ndarray .
767	Get the sample shape
768	Get the sample shape
769	Get the value of the distribution .
770	Evaluate the value .
771	Returns an eager tensor of this tensor .
772	Computes the conjugates from the given posterior .
773	Default template for realnvP parameters .
774	Returns the unit norm of the given dimension
775	Computes the log - unnormalized probability of a matrix .
776	Log normalization .
777	Returns the preferred type of the given arguments .
778	Make a summary statistic .
779	Adds the given tensor to the output .
780	Returns the pdf of the peak
781	Returns the effective sample size of the given states .
782	Calculate the effective sample size of a single state .
783	Computes the scale reduction for a single state .
784	Returns the size of the axis
785	Ensure that the second argument is a broadcast list .
786	Instantiates a Gauss - Hauss - Hauss - Haussian quadrature scheme .
787	Builds the lognormal quantiles for a quadrature scheme .
788	Merges this object with the specified mapping .
789	Returns a mapping for the given field .
790	Merge two values .
791	Convert an object to a deep - tuple
792	Computes the left - doubling in batch .
793	Finds the index of the best interval that is used to find the index of a given value .
794	Computes the bounds of a slice of the given x - axis .
795	Samples a sample with a sample of the chain .
796	Creates a slice for a single dimension of a single dimension .
797	Sets the value setter for a random variable .
798	Returns the log - probability function for the given model .
799	Get function inputs for the given function .
800	For vgg convolution .
801	Builds the tree .
802	Checks that the value is not null .
803	Returns true if no turn has no turn
804	Generates a leap -frog gradient from the current state .
805	Computes the log - joint log of the current target .
806	Generates a random Bernoulli with the given probabilities .
807	Creates a function that computes the loc and scale parameters .
808	Creates a function that initializes the mean field normal function .
809	Create a function for a multivariate normal function .
810	Get Keras function from the input stream .
811	map to lambda name
812	Converts a structure into a new structure .
813	Convert a nested structure to a tensor .
814	Convert arguments to a tensor
815	Executes the given function .
816	Get attributes for this tensor .
817	Returns the probability of the mixture .
818	Transforms a batch of images into a matrix .
819	Download a file from a directory .
820	Creates and returns a fake input functions that can be used to transform a batch size .
821	Validate block sizes .
822	Checks that the given model is broadcasting .
823	Creates a Multivariate Normal_tril for the given dimensions .
824	Creates a Bernoulli from the given input .
825	Creates a normal normalization function .
826	Creates a poisson for the given value .
827	Creates a new Euler method which can be used to visualize the Euler .
828	Get the drift .
829	Computes the log acceptance correction .
830	Call the volatility function and gradients .
831	Adds volatility to the state .
832	Create an ar transition matrix .
833	Samples the shape of the given event and batch_shape
834	This method is used to perform a reshape operation .
835	Resizes the output of the output .
836	Computes the gradients for a given k parameter .
837	Flattens a set of distributions .
838	Creates a dirichlet allocation for the given topics .
839	Creates a variational solver for a variational classifier .
840	Convert topics to strings .
841	Get a dataset for a given split .
842	Generate fake input functions .
843	Returns an iterator for training input functions .
844	Minimize the gradient with the given parameters .
845	Updates the ema dependencies of this vector .
846	Display an image .
847	Save training images .
848	Get a Bernoulli data dataset .
849	Convert a Java type to a primitive type
850	Get the data type for the given type
851	Check if the given type is a boolean
852	Check if the type is complex
853	Returns the maximum value of the given type .
854	Returns the type of the given type .
855	Get the data type for the given type
856	Assert that the items are of the same type .
857	Check the type of tensors for the given tensors
858	Minimize the simplex
859	Nelder - mead .
860	Accepts a simple simple x and replaces it with the best objective values .
861	Performs an expansion step .
862	Performs a contraction of the given Simplex function .
863	Shrinks the given simplex .
864	Replace at index with replacement
865	Checks if the given simplex is converged to the best objective .
866	Prepares the arguments for a simplex .
867	Prepares the arguments for a simple simple simple Simplex .
868	Prepare the arguments for a simplex vertex .
869	Evaluates an objective function using a batch - objective function .
870	Plot the posteriors .
871	Generate a prediction plot for the given input values .
872	Create fake data .
873	Get the configuration for this model .
874	Loads the configuration from the given configuration .
875	Multiplies two matrices .
876	Helper to perform the standard deviation of the distribution .
877	Assigns the log - moving mean expression to the given value .
878	Make columnar .
879	Generate a random rademacher with the given shape
880	Generate a random rayleigh with a given shape
881	Picks a scalar condition from the predicate .
882	Finishes the log probability for a given fiber .
883	Finishes the prob for a single fiber .
884	Rotates the dimensions of the given shape .
885	Undo batch normalization .
886	Validates a batch normalization layer .
887	Slice a single parameter .
888	Convert the given slice parameters to a dictionary .
889	Applies a single step to a distribution .
890	Applies the given slice overrides .
891	Applies a slice to the original distribution .
892	Fit the model .
893	Returns true if the size of the fitting procedure has changed .
894	Prepares the arguments of the model .
895	Returns the number of columns for the input
896	Wraps the original function with a static function .
897	Copy the docstring of a function .
898	Gets the static predicate .
899	Obtains the size of the shape from the given shape shape and the given tensor shape name .
900	Case - insensitive case .
901	Creates a scope for this name .
902	Calculate the standard deviation of a mixture weight .
903	Make a tril scale scaling factor .
904	Make a diagonal scaling .
905	Extract shapes from the location and scale .
906	Returns the scale of a diagonal operator .
907	Checks that the given distribution is a scalar distribution .
908	Compute the dimensions for the mixture of the mixture distribution
909	Picks a scalar condition .
910	Compute the permutation of the given dimensions .
911	Checks that x is a non - negative integer form .
912	Returns the dynamic shape of two shapes .
913	Get the static value for the given value
914	Returns true if the data type is a known unsigned by data type
915	Returns true if the data type is known by the given type
916	Returns the largest integer value of the given type .
917	Returns the smallest integer value of the given type .
918	Returns true if the given data type is an integer type .
919	Checks the size of a categorical event .
920	Returns the number of permutations of the distribution .
921	Rotates an array .
922	Convert a boolean vector to a boolean .
923	Returns a broadcast shape for the given shape .
924	Generate a new seed .
925	Creates a tridiagonal matrix .
926	Returns the size of the given axis .
927	Process a quadrature grid .
928	Get the arguments for this call .
929	Expand a vector to a vector .
930	Returns the output - dependencies of the given output_tensor .
931	Returns true if the rightmost dimension of the rightmost dimension is valid .
932	Validates a permutation vector .
933	Compute the event shape for the event shape .
934	Concatenate two tensors .
935	Returns the dimensions of the given tensor .
936	Merges two tensors together .
937	Returns a new tensor with the given rank .
938	Checks that the target and the dynamic target is equal .
939	Augments the given batch shape with the given batch shape .
940	Run a backward smoothing step of the given state .
941	Compute backward smoothing .
942	Run a single kalman filter step .
943	Update the Gaussian mean using the observation model .
944	Propagate mean .
945	Get the kalman mean step .
946	Computes the covariance matrix for a given time step
947	Sample values for a single time step .
948	Propagate mean .
949	Propagate the covariance matrix .
950	Performs a backward smoothing .
951	Sample the number of samples in a linear state space .
952	Smooths the matrix of marginals using the given mask .
953	Samples the mean from the initial state model
954	Returns the covariance of the initial state .
955	Converts latents to observations .
956	Log normalization of the event shape .
957	Returns the mode mode .
958	Rotate the given samples .
959	Sample 3d CDF .
960	Make a copy of a function .
961	Removes all keys that match the given value
962	Recursively replace the contents of a JSON object .
963	Get samples from a distribution .
964	Checks if an object is a named tuple .
965	Choose the base case of the input .
966	Creates a base case based on the input field of the input .
967	Returns the sum of the input tensor .
968	Returns the value and gradients .
969	Call the given function and gradients .
970	A function that runs a loop .
971	Trace a loop .
972	Wraps the wrapper around the kernel .
973	Wraps the wrapper around the kernel .
974	Helper method to store the parameters in the kernel .
975	Replace the event shape in the input shape with the given event shape .
976	Replace event shape in the input tensor .
977	Checks that the given shape is valid .
978	Returns true if all inputs are converged .
979	Returns the initial state arguments .
980	Performs a line search .
981	Restricts the given value and direction to the given direction .
982	Updates the state of the current objective .
983	Checks if the current position is converged .
984	Broadcasts value to target
985	Harmonic number .
986	Returns a function that can be used for exchange .
987	Extracts a field from the kernel result .
988	Extracts the exchanged states for a particular exchange .
989	Returns the variance scale term .
990	Returns a function that transforms the given bijector to the given bijector .
991	Returns a transform for the given bijector .
992	Returns a transform for the given bijector .
993	Performs one - step on the kernel .
994	Return the value of the given condition
995	Evaluates the secant2 gradients .
996	Update the secant2 parameters .
997	The inner update function .
998	Update the gradient function .
999	Evaluates the gradient of the given interval .
1000	Performs a bisecting of the gradients on the gradients .
1001	Iterates over the gradients of the gradient and returns the result .
1002	Returns true if two values are true .
1003	Checks if the wolfe is satisfied .
1004	The secant function .
1005	Creates a new step size update policy .
1006	Updates the leapfrog integrator .
1007	Compute the log acceptance correction .
1008	Iterate over the kernel results .
1009	Bootstrap the kernel results .
1010	Creates an image representation of an image .
1011	Build a network block from a network .
1012	Creates a new encoder for the given topics .
1013	Creates and returns a new decoder for topics .
1014	Computes the prior variables .
1015	Runs the Markov chain .
1016	Creates an exponential family .
1017	Creates a trained learnistic variable .
1018	Creates a gamma variable .
1019	Downloads the nips - year from the database .
1020	Initializes the parameters of the encoder .
1021	Returns the probability of a given type .
1022	Read an image from a file .
1023	Extracts the sprites .
1024	Generate a character for a character
1025	Generate a sequence of patches for a given character .
1026	Generate random sequence
1027	Creates a dataset for sprites .
1028	Validates the given distributions .
1029	Flattens a list of kernels into a list of kernels
1030	Flattens a list of product kernels .
1031	Generate fake data
1032	Counts the number of integers in the given array .
1033	Find the bin in the graph .
1034	Create a histogram at the given axis .
1035	Quantiles the given value .
1036	Returns the static dimensions of the given tensor .
1037	This method is used to insert back axes into the back axis
1038	Makes a non - negative axis of the given axis .
1039	Moves all dimensions to a flat shape .
1040	Sorts the given tensor .
1041	Build a state space model for this component .
1042	Compute the amari alpha value .
1043	Returns amari alpha value .
1044	Jensen - shannon function .
1045	pearson function
1046	Returns the squared pearinger value .
1047	Returns the pearson logu .
1048	Returns the t - power of t .
1049	Returns the absolute logu of the logu .
1050	Computes the effreys of the logu .
1051	Gan - square function .
1052	Ciszar function .
1053	Symmzar function .
1054	Creates a new Moniszar_fgence .
1055	Helper function to make a Viszar
1056	Checks that the given element is static .
1057	Batch gather .
1058	Broadcast event .
1059	Returns the mean of expectation importance samples .
1060	Broadcast event and samples .
1061	Minimize the gradient
1062	Validates the inverse hessian inputs .
1063	Updates the inverse hessian .
1064	Computes the inverse hessian update .
1065	Multiply two vectors together .
1066	Computes the product of two tensors .
1067	Transpose a matrix .
1068	Returns the shape with the right dimensions of the given shape .
1069	Returns the rightmost dimensions of the given shape .
1070	Computes the gradients for the given input .
1071	Returns the common type of the argument list .
1072	Minimize the gradient
1073	Gets the initial state .
1074	Compute the search direction .
1075	Creates an empty queue for the given element .
1076	Pushes a new vector onto the queue .
1077	Computes the mask for a given matrix .
1078	Returns a mask that is larger than the given matrix .
1079	Generate a uniform correlation of a matrix .
1080	Samples of proposals from a given matrix
1081	Computes the confidence interval for the given samples .
1082	Estimates the true volume of the given determinant matrix .
1083	Function to compute a von - mise distribution series .
1084	CDF of von mise
1085	Performs a single - step on a single - step .
1086	Minimize the objective function .
1087	Gets the initial arguments .
1088	Finds the best value in the population
1089	Checks if the population is converged .
1090	Constructs the starting population .
1091	Performs binary crossover .
1092	Gets mutants .
1093	Returns the mixing indices of the given size .
1094	Ensure that the given tensor is a list
1095	Returns the tol value of this distribution with the given tolerance .
1096	Derivative of soft threshold
1097	Clips the value of a gradient with clipping .
1098	Creates an input pipeline for training images .
1099	Displays the generated images .
1100	Converts the given productions into a string .
1101	Returns the list of productions for the given inputs .
1102	Creates a multi -variate code .
1103	Returns the integral value of a tensor .
1104	Returns the integral value of a tensor .
1105	Returns the rank of a matrix .
1106	Creates a pinv matrix .
1107	Solves the solver .
1108	Solves the LU matrix inverse .
1109	Reconstructs assertions .
1110	Solves the permutation .
1111	Creates a sparse block diagonal matrix .
1112	Checks that a matrix is valid .
1113	Computes the grad - log likelihood for a given linear response matrix
1114	Fit a sparse model .
1115	Generate the slices of the given number of blocks .
1116	Generate a mask for the given number of blocks .
1117	Create a dense dense layer .
1118	Creates an input order .
1119	Creates a degree based on the input direction .
1120	Create the masks for the input degrees
1121	Creates a masked initializer with the given mask .
1122	Initializes the event shape .
1123	Call this method .
1124	Draws a multinomial sample .
1125	Create a new multi - dimensional matrix with zero dimensions .
1126	Creates a function which converts a timeseries to an observation vector .
1127	Converts global scale variance to global scale factors .
1128	Explore depth .
1129	Find the best order .
1130	Flatten the prob chain rule .
1131	Build the prob chain rule from the given model .
1132	Creates a variational loss .
1133	Creates an optimal variational posterior
1134	Checks if the number of steps in the season is last day of the season
1135	Computes the mean effects to be applied to the mean effect
1136	Build the transition matrix for the seasonal state .
1137	Computes the variance of the seasonal transition based on the drift scale
1138	Computes the noise covariance of the seasonal state space .
1139	Returns true if the observation data is empty .
1140	Validates that the observation data is valid .
1141	Adds a scheduler to the scheduler .
1142	Check a checkpoint .
1143	Set the gradient clip
1144	Returns the optimized layer of this model .
1145	Set train summary
1146	Sets the value of the value of this DL .
1147	Create a local optimizer .
1148	Set training data .
1149	Set summary trigger .
1150	Downloads the data sets from the training directory .
1151	Downloads texts from the news website .
1152	Download glove file from W2v
1153	Compiles this value using the given optimizer .
1154	Fit the dataset
1155	Evaluates the evaluation data .
1156	Performs a prediction on a dataset .
1157	This method is used to read a labeled data set .
1158	Get train data from the dataset .
1159	Returns the end trigger .
1160	Configures the optimizer .
1161	Loads the value of the property .
1162	Call Java function .
1163	Java function .
1164	Convert a RDD to a java object .
1165	Convert java .
1166	Get an activation by name
1167	Construct a new ndarray from the given array
1168	Get the label of the image feature
1169	Read a parquet frame from a Parquet file .
1170	Write parquet .
1171	Get the image of the image .
1172	Convert a local image frame to an image .
1173	Get the label of this image frame
1174	Get the predict for this image frame
1175	Predicts a single value .
1176	Run the optimizer .
1177	Converts an image transform into a Java image transform .
1178	Write Keras model definition .
1179	Build Keras model .
1180	Predicts the model class of the data .
1181	Sets the weights
1182	Get the weights
1183	SaveTF function .
1184	Executes the Java function .
1185	Load Torch layer .
1186	Load Keras model .
1187	Create a criterion .
1188	Load weights from a model file
1189	Load imdb .
1190	Build Keras model .
1191	Get the input shape of this DL
1192	Get the output shape
1193	Read a dataset from a given location
1194	Extract the data sets from the ratings .
1195	Returns the classpath of the jar .
1196	Returns true if spark version is below 2 .
1197	Read a checkpoint .
1198	Save a bigdl variable
1199	Returns a tile tile for the specified axis .
1200	Precompute future symbols .
1201	Draws the given memory attention .
1202	Generates an attention message for the given state .
1203	Computes the bleu of the reference corpus and the translation corpus .
1204	Returns the log file for the agent .
1205	Writes a message to the log .
1206	Get the summaries for the gradients
1207	Generate weights for a given model .
1208	Loads data from a JSON configuration .
1209	Load model from configuration .
1210	This is a helper method that takes care of the incoming messages .
1211	1 - 1 . 1
1212	Convert proba to one hot labels .
1213	Creates a new configuration session .
1214	Load the model .
1215	Returns the current momentum variable .
1216	Update graph variables .
1217	F1 macro score
1218	Converts a word to a string
1219	Creates a convolution layer for the given parameters .
1220	Run RNN .
1221	Run the RNN_ RNN layer of a RNN layer .
1222	Helper method to create a new image units .
1223	Creates a new token layer .
1224	Creates a Cudnn GRU .
1225	Returns a CudUCell that is cudnn compatible with CudnnCell
1226	Creates a Cudnn LSTM LSTM LSTM .
1227	Construct a Cudnn Ludnn Ludnn Ludnn Ludnn and Ludnn input state .
1228	Cudnn_gru function .
1229	Creates a Cudnn Ludnn Ludnn_ Ludnn_ LudNN_ Ludnn_ Ludnn_ Ludnn_ Ludnn Ludnn_ Ludnn Ludnn_ Ludnn_ Ludnn_ Ludnn_ Ludnn Ludnn Ludnn LudNN_ Ludnn Ludnn Ludnn Ludnn Ludnn Ludnn Ludnn Ludnn Ludnn Ludnn_ Ludnn Ludnn Ludnn Ludnn Ludnn Ludnn Ludnn Ludnn Lud
1230	Cudnn RNNs for a bi - network .
1231	Generate dropout for the given units .
1232	Build the word model .
1233	Builds a word - word word convolution layer .
1234	Build basic network .
1235	Train the model on a batch .
1236	Predict a batch of labels .
1237	Creates a vector with the specified bucket length .
1238	Creates a vector of tags .
1239	Returns the bleu measure based on predicted words
1240	Returns true if the URL is a S3 S3 access .
1241	Extracts the certificates from a string .
1242	Adds certificates from the provided certs chain .
1243	Verifies the signature of the request body .
1244	Verifies the signature chain url .
1245	Returns JSON representation of controls .
1246	Returns a list of all controls that are supported by this control .
1247	Gets the telegram controls .
1248	Gets the alexa controls .
1249	Populates the default settings directory .
1250	Wraps the given function with the given graph .
1251	Wraps a Keras function with Keras model .
1252	Computes the correct number of examples
1253	Computes the accuracy for the prediction
1254	Create a pre - pretrained initializer .
1255	Load the data path .
1256	Creates a default agent for hello bots .
1257	1 - hot
1258	Prettify metrics .
1259	Copy the default settings directory
1260	Restores the model .
1261	Saves the model to the given path .
1262	Creates a new train operation .
1263	Search for a word .
1264	Make default operation cost .
1265	Start timer .
1266	Handles a request .
1267	Performs the agent action .
1268	Generates the response from the session .
1269	Handles an intent .
1270	Handle launch .
1271	Handle unsupported message .
1272	Prints a pretty representation of this struct .
1273	Convert average loss to Pl
1274	Load a Chainer .
1275	Runs the model .
1276	Process data from a stream .
1277	Reads data from input file .
1278	Loads a function from a string .
1279	Register a function to the registry .
1280	Get a metric by name .
1281	Gets the label of a given label .
1282	Gets the best value for the given loss .
1283	Encodes a list of tokens .
1284	Get the list of install dependencies .
1285	log - loss
1286	Convert a hub file to a hub .
1287	Prints details about the item .
1288	Creates an Emerce agent .
1289	Run the application framework .
1290	Download a file .
1291	Extracts a tar file .
1292	Decompress a URL .
1293	Updates the editable object .
1294	set md5 of the URL
1295	Get a query parameter
1296	Gets the exexa response .
1297	Returns the JSON representation of this control .
1298	Build the card action .
1299	Returns the JSON representation of this control .
1300	This method is used to build the bot framework .
1301	Calculates the F1 and F1 for the predicted predictions .
1302	Returns the number of examples in the matrix
1303	Check if a GPU is available
1304	Parse configuration property .
1305	Loads variables from the properties file .
1306	Resolve path .
1307	Loads a component from a json .
1308	Handle the request .
1309	Deletes a conversation .
1310	Refresh all valid certificates .
1311	Verifies the signature .
1312	Handle request .
1313	Loads a class from a string .
1314	Returns a decorator that registers a model .
1315	Get model by name .
1316	Get the GLM regularization path
1317	Make a GLM model .
1318	Sets the values on the H2O cluster .
1319	Shutdown the H2O instance .
1320	Check if local server is running .
1321	Display the status of the Cloud cluster .
1322	Get the list of jobs
1323	Returns the list of time zones .
1324	Fills the properties from the other instance .
1325	Get metalearner params
1326	Runs the test function with the given timeout and throws an exception .
1327	Get summary of a column
1328	Deletes a frame .
1329	Get model builders
1330	Get the parameters for a given training frame .
1331	Report metrics for a given frame .
1332	Get model metrics
1333	Delete a model
1334	Prints a table table to a table
1335	Run instances .
1336	Terminates the specified instances .
1337	Stops the specified instances .
1338	Start the instances .
1339	Reboots the specified instances .
1340	Wait for SSH on the given IP .
1341	Returns the full name of the given method .
1342	Finds a function from the frame .
1343	Get the arguments string .
1344	Wraps the given text into a new line .
1345	Resolves a model .
1346	Train the model .
1347	Train the model .
1348	Get the parameters for this H2OO estimator .
1349	Handle signal .
1350	Removes the output directory .
1351	Removes a Randbox directory .
1352	Read port from stdout .
1353	Read cloud size from stdout .
1354	Kill the JVM .
1355	Stop all nodes .
1356	Get the IP of the client
1357	Returns the port of the client .
1358	Get metrics for this model .
1359	Determines the vector size of a given frame
1360	Computes the absolute mean error .
1361	Returns the mean - squared mean error .
1362	Computes the median absolute error .
1363	Compute the explained variance score .
1364	Check that the variable is a valid type .
1365	Check if the value matches a regular expression
1366	Checks that the given condition is satisfied .
1367	Retrieve the arguments from the stack trace .
1368	Checks if the given variable type matches the given type .
1369	Returns the name of a type .
1370	Returns the source code for the lambda function .
1371	Checks if the given variable is a valid type .
1372	Returns true if the given variable is a constant .
1373	Get the configuration .
1374	Read config file .
1375	Finds the log files that have been configured .
1376	Run a progress function .
1377	Updates the progress data .
1378	Recalculates the model parameters .
1379	Estimate the completion time for the raw progress .
1380	Guess the next poll interval .
1381	Compute the progress at a given time .
1382	Computes the time prediction at the given time .
1383	Draws the given text .
1384	Computes and returns the size of the widgets that have been added to the progress bar .
1385	Get the terminal size .
1386	Sets the encoding .
1387	Builds the encoder map .
1388	Load a frame .
1389	Flushes the frame .
1390	Get the type of a column .
1391	Create a column by type .
1392	Get the data from the H2O frame .
1393	Prints the contents of the frame
1394	Create a new frame from this frame .
1395	Multiply a matrix
1396	Get the levels .
1397	Get the number of levels .
1398	Set the level of this frame
1399	Set domain .
1400	Sets the columns of this table .
1401	Sets column names .
1402	Lookup column name .
1403	Compare two frames
1404	Returns the kfold column of this H2O frame
1405	Returns the k foldified kfold column .
1406	Print this H2O frame
1407	Get the data frame for this frame
1408	Get a column .
1409	Get the quantile .
1410	Concatenates a list of frames into the DataFrame .
1411	Bind a data frame to a data frame .
1412	Row - bind .
1413	Splits the input buffer into a destination frame .
1414	Create a new GroupBy object
1415	Fills all elements in the H2O frame .
1416	Impute values for a given column
1417	Merge two columns .
1418	relevel
1419	Insert missing values .
1420	Returns a variable value .
1421	Compute the correlation value .
1422	Returns the distance of this H2O frame .
1423	As factor .
1424	Split this frame into a single frame .
1425	Count the number of matches
1426	Create a substring of this frame .
1427	Returns a new frame with leading and trailing whitespace .
1428	Returns an entropy object .
1429	Returns the number of valid substrings in the frame
1430	Create a table from this H2O frame .
1431	Create a histogram .
1432	Isax .
1433	Replaces all occurrences of a pattern with a replacement pattern .
1434	 upper case .
1435	Returns a list of thegrep pattern matching the given pattern .
1436	Returns an empty frame .
1437	Get the difflag1 frame
1438	Return a frame with a null value
1439	Create a new minute frame .
1440	Run the H2O frame .
1441	Generate a random stratified split .
1442	Cut a frame
1443	Returns the max value of this frame
1444	Apply a function to this frame .
1445	Tokenizes the given text .
1446	Parse a file .
1447	Add a new row .
1448	Parses the token and returns the result .
1449	Get the metrics for this model .
1450	Returns the centers of the model .
1451	Returns the standard deviation of this model .
1452	Open H2O connection .
1453	Sends a request to the H2O connection .
1454	Check the H2O version .
1455	Import a path .
1456	Writes a file to the given destination frame .
1457	Parses a file .
1458	Import Hive table .
1459	Import a SQL table .
1460	Import SQL select .
1461	Parse an H2O frame
1462	Create a duplicate node .
1463	Get a model
1464	Get a grid .
1465	Get a frame .
1466	Export a POJO to a POJO .
1467	Download a dataset
1468	Download all logs from a directory .
1469	Export a frame .
1470	Convert data to a list of H2O objects .
1471	Show a demo function .
1472	Fetch a file from a H2O file .
1473	Get model metrics
1474	Puts a file .
1475	Generates a custom metric code .
1476	Get a frame id .
1477	Returns a human readable representation of the given size .
1478	Returns a slice of the given slice .
1479	Checks if the given range is normalized .
1480	This method converts a DataFrame to a CSV file .
1481	Get the prediction .
1482	Creates a deprecated decorator .
1483	Poll for a future .
1484	Get deep features from test data
1485	Display the grid summary
1486	Prints the grid search table .
1487	Get the hyperparams for the model
1488	Get model parameters from a model
1489	Get a grid
1490	Returns F1 F1 for all models .
1491	Get the importance of this model .
1492	Get the archetypes
1493	Plots a scree plot .
1494	Returns the name of the given name .
1495	Dedent indentation .
1496	Reads the java log text into disk .
1497	Extract java log . log .
1498	Delete the session .
1499	Gets the session id .
1500	Log all API requests .
1501	Prepare the data payload .
1502	Prepare file payload .
1503	Log start transaction
1504	Log end time .
1505	Log a message .
1506	Process response .
1507	Print a message .
1508	Fetch automl from a project
1509	Download a pojo
1510	Download mojo .
1511	Loads the mean and mean values from the given X .
1512	Performs a scaling operation .
1513	Returns the transformation of the given data .
1514	Returns true if the string is a boolean .
1515	Looks for the node name in the function list .
1516	Find the git hash branch .
1517	Check if build timeout is found
1518	Check if build failed
1519	Extracts the build id from the file
1520	Build job url .
1521	Read the java message .
1522	This method is used to initialize the output file
1523	Write the summary file .
1524	Writes the content of the file .
1525	Write java message .
1526	Load java messages to ignore .
1527	Convert an enum constant .
1528	get synonyms
1529	Update job status .
1530	Download a POJO
1531	Get the frame
1532	Performs a percentile on sorted list
1533	Get the default parameters .
1534	Get the parameters from the model
1535	Get deep features from the frame
1536	Get the scoring history for this model
1537	Print the H2O estimator .
1538	Imports a model .
1539	Returns the residuals of this model .
1540	Get the coefficients of the model .
1541	Download pojo .
1542	Export mojo to MOJO
1543	Get model details
1544	Check that the actual row matches the predicted row .
1545	Get the cross - validation models
1546	Starts a demo .
1547	Creates a demo .
1548	Show a demo .
1549	Waits for a command on the stdin .
1550	Get the data frame for this cell .
1551	Prints a table to display
1552	Checks that the given jar path is valid .
1553	Find H2O jar .
1554	Get the path of the H2O jar file .
1555	Returns the hit ratio table .
1556	Write a CSV file to a CSV file .
1557	Convert a URI to a path .
1558	Convert a directory path to a URI .
1559	Parses the lines from the lines .
1560	Generate the documentation for the API .
1561	Get a list of module names .
1562	Create the API docs for all modules .
1563	Write the module index to index .
1564	Get a list of cell values .
1565	Load java message dictionary .
1566	Process a new warning message .
1567	Add action to message map .
1568	Read a message to a map .
1569	Saves the dictionary to disk .
1570	Prints all java messages to stdout .
1571	Process the command line arguments
1572	Prints the command line .
1573	Returns all the files in the given root directory .
1574	looks for the magic in the file
1575	Processes all the files in the root directory .
1576	Transform data into H2O frame .
1577	Scans the files for failed runs .
1578	This method will save all of the intermittens .
1579	Plots the roc curve .
1580	Returns a matrix of the H2OBomial model .
1581	Check if a deep water model is available
1582	Clean up the data back to the given month
1583	Returns the groups associated with this class .
1584	Forwards to a site .
1585	Serialize data to JSON .
1586	Comment a user .
1587	Get the credentials .
1588	Returns true if the user is like a user .
1589	Search for media with the given hashtag .
1590	Checks if the user is not bot .
1591	Reads a file from a file .
1592	Sets the schedule time .
1593	Modifies this message .
1594	Downloads a resource .
1595	Extract service info from a path .
1596	Updates a PowerShell command .
1597	Deletes an application definition .
1598	Gets or updates an application definition .
1599	Returns the URI for the given request .
1600	Creates a connection to the given request .
1601	Sends a request .
1602	Executes script actions .
1603	Checks that the front control name is available .
1604	Purges the specified vault .
1605	Get the authorization server value .
1606	Validates the request_uri .
1607	Load Azure CLI profile .
1608	Get credentials from Azure CLI profile .
1609	Build a query .
1610	Check name availability .
1611	Open an HTTP request .
1612	Set the timeout for this request .
1613	Sets a request header .
1614	Get all response headers .
1615	Sends a request to the client .
1616	Get the status code .
1617	Get the status text .
1618	Get the response body .
1619	Sets the client certificate .
1620	Perform a HTTP request .
1621	Sets the request header .
1622	Send request body .
1623	Gets the response .
1624	Returns the readable id from the given id name .
1625	Returns the name of the given element .
1626	Verify a face .
1627	Add a job .
1628	Extracts the entry properties from an entry .
1629	Get children from a path .
1630	Helper method to find namespaces from parent node .
1631	Converts an XML string to a ServiceBusNamespace .
1632	Convert an XML string to a service bus region .
1633	Convert an XML document to a namespace availability response .
1634	Converts an XML document to a metrics object .
1635	Updates the raw runbook content .
1636	List domain recommendations .
1637	Update a KKB .
1638	Get member groups .
1639	Builds a package from a Github PR .
1640	Imports raw data .
1641	Publish a runbook .
1642	Renew the lock .
1643	Issue a word alterations .
1644	Add a secret value resource .
1645	Gets the list of storage account properties .
1646	Gets the keys of the storage account .
1647	Regenerate the keys of a Storage account .
1648	Request a storage account .
1649	Updates an existing storage account .
1650	Deletes a storage account .
1651	Retrieve the availability of a Storage account .
1652	Retrieve information about a hosted service .
1653	Gets an XML representation of a hosted service .
1654	Delete a hosted service .
1655	Create a deployment resource .
1656	Delete a deployment .
1657	Swap a deployment on a hosted service .
1658	Changes a deployment configuration .
1659	Sets the status of a deployment .
1660	Upgrades a deployment .
1661	Download an upgrade domain .
1662	Deletes a role instance .
1663	Delete a role instances .
1664	Check if a hosted service name is available .
1665	Get the certificates for a given service .
1666	Retrieve a service certificate .
1667	Add a certificate to a hosted service .
1668	Delete a service certificate .
1669	Get a subscription certificate .
1670	Request a subscription certificate .
1671	Delete a certificate .
1672	Get the properties of an affinity group .
1673	Create a new affinity group
1674	Delete an affinity group .
1675	Retrieve a list of subscription operations .
1676	Sends a reserved IP address to the server .
1677	Deletes a reserved IP address .
1678	Associates the reserved IP address with the specified virtual IP address .
1679	Associates a reserved IP address with a virtual IP address .
1680	Gets the reserved IP address .
1681	Retrieve a Persistent VM role .
1682	Create a new virtual machine deployment .
1683	Performs a persistent role .
1684	Update a persistent role .
1685	Delete a role .
1686	Captures a role .
1687	Retrieve a role .
1688	Retrieve the specified roles .
1689	Restart a role .
1690	Shutdown a role .
1691	Shutdown the specified roles .
1692	Retrieve a dns server .
1693	Download a dns server .
1694	Delete a dns server by name .
1695	Gets the version of a resource extension .
1696	Replicates a VM image .
1697	Replicates a VM image .
1698	Share a VM image .
1699	Create a VM image .
1700	Delete VM image .
1701	Get the images for the VM .
1702	Update the VM image .
1703	Download an OS image .
1704	Uploads an OS image to disk .
1705	Uploads an image from an image reference .
1706	Delete an OS image .
1707	Get data virtual disk resource .
1708	Get data disk resource .
1709	Get data disk resource .
1710	Delete data disk .
1711	Download a disk .
1712	Download a disk .
1713	Delete disk .
1714	Gets the policy for a management group .
1715	Builds the receiver .
1716	Gets the next batch of messages .
1717	Recycles the session lock .
1718	Creates or updates a VM scale set .
1719	Converts a VM scale set to a single placement group .
1720	Updates the screen text .
1721	Create a key .
1722	Import a key .
1723	Update a key .
1724	Set a secret .
1725	Set a certificate issuer .
1726	Parses a connection string from a connection string .
1727	Gets a subscription .
1728	List subscriptions for a topic .
1729	Sends a message to the queue .
1730	Creates a new sender .
1731	Creates a session receiver .
1732	Creates a new dead letter receiver .
1733	Converts an asynchronous operation response to an asynchronous operation result .
1734	Performs a GET request .
1735	Performs a PUT request .
1736	Wait for operation status .
1737	Retrieves the status of an operation .
1738	Updates the management header for the request .
1739	Run the travis_ tag .
1740	Get certificates .
1741	Gets the regions .
1742	Retrieves the namespaces for the service bus .
1743	Retrieves a namespace .
1744	Retrieve a namespace .
1745	Deletes a namespace .
1746	Check the namespace availability of a given namespace .
1747	Gets the topics .
1748	Gets a list of notification hubs .
1749	Retrieves the relays for a given name .
1750	Retrieves metrics rollups for a given queue .
1751	Gets metrics rollups for a given topic .
1752	Retrieves the metric rollups for the given metric hub .
1753	Sends metrics rollups to a service bus .
1754	Creates an environment context .
1755	Creates a Venv with the specified packages .
1756	Create a server .
1757	Set admin password .
1758	Retrieve a server quota .
1759	Retrieve all event logs for a given server
1760	Create a new firewall rule .
1761	Update a firewall rule .
1762	Delete a firewall rule .
1763	Get firewall rules for a server .
1764	Retrieve service level objectives .
1765	Create a SQL database .
1766	Updates a database .
1767	Delete a database .
1768	Get a list of databases .
1769	Listagements .
1770	Close the message handler .
1771	Closes the receiver .
1772	Gets the current session state .
1773	Sets the session state .
1774	Receive deferred messages .
1775	Loads a reservation order .
1776	Validate the challenge .
1777	Purges a table .
1778	Handler for error .
1779	Performs a PUT request to Azure Storage .
1780	Deletes a queue .
1781	Requests a queue .
1782	Update topic .
1783	Gets a topic .
1784	Update a rule .
1785	Gets a rule .
1786	Retrieve rules for a topic and subscription .
1787	Sends a subscription to a topic .
1788	Retrieve a subscription .
1789	Retrieve subscriptions for a given topic .
1790	Sends a message to a topic .
1791	Update a subscription message .
1792	Sends a batch of messages to a given queue .
1793	Sends a message to the service bus .
1794	Reads a queue message .
1795	Reads a subscription message .
1796	Update event hub .
1797	Updates an event hub .
1798	Performs an event hub .
1799	Sends a message to a hub .
1800	Update service bus header .
1801	Get authorization string .
1802	Returns true if the token is expired .
1803	Get a token from access constants .
1804	Update the request URI and query string .
1805	Reset service principal profile .
1806	Deletes the peek message .
1807	Unlock the message .
1808	Renew the peek lock .
1809	Add custom headers to the request
1810	Create a batch body for this request .
1811	Get cluster health .
1812	Get cluster health .
1813	Unprovision an application type .
1814	Get task list .
1815	Submit a property batch .
1816	Generic error handler .
1817	Start a network network .
1818	Lists the differences of a slot .
1819	Swap a slot .
1820	Get by type .
1821	Add a face from a stream .
1822	Handle redirect .
1823	Starts a post migration .
1824	Publish events .
1825	Move resources .
1826	Sets the profile
1827	List query results for a management group .
1828	Creates a queue .
1829	Deletes a queue .
1830	Creates a topic .
1831	Delete topic .
1832	Creates a subscription .
1833	Parses a connection string from a connection string .
1834	Get properties from queue .
1835	Check if this object is locked .
1836	Creates a session .
1837	Creates a subscription .
1838	Export request rate by interval .
1839	Handles the output of the results .
1840	Bulk add tasks .
1841	A helper function to add tasks to the result queue .
1842	Build the configuration .
1843	Reset password .
1844	Starts an environment .
1845	Creates message from response .
1846	Convert XML element to rule rule element .
1847	Convert an entry element to a queue .
1848	Converts a topic element to a topic element .
1849	Converts an entry to a subscription description .
1850	Creates a certificate .
1851	Deletes the specified certificate .
1852	Get a client from the CLI profile
1853	Construct a client from the json json
1854	Loads a client from the auth file
1855	Parses an enumeration result list .
1856	Extracts the entry properties from an XML element .
1857	Delete a certificate .
1858	Gets a queue .
1859	List queues .
1860	Get topic .
1861	List topics .
1862	Handles deferred messages .
1863	Set deferred messages .
1864	Gets a site .
1865	Creates a site .
1866	Deletes a site .
1867	Download a site .
1868	Restart a site .
1869	Gets the historical usage metrics .
1870	Retrieves the metric definitions for a given webspace .
1871	Gets the publish xml for a webspace .
1872	Gets the publish profile for a webspace .
1873	Updates the registry policies .
1874	Request a cloud service .
1875	Get the name of a job collection .
1876	Retrieve a job collection .
1877	Completes a restore operation .
1878	Cancel scheduled messages .
1879	Sends pending messages .
1880	Reconnects the message .
1881	Gets the certificate from the publish settings file .
1882	Loads cookies from the cache .
1883	Returns the width of the specified value .
1884	Cut prefix .
1885	Writes the message to the console .
1886	Convert file size to human readable format .
1887	Convert elapsed time to string
1888	Gets the status line .
1889	Writes an iterator to the output stream .
1890	Generates the segment numbers for a playlist .
1891	Gets a segment .
1892	Wait for a given time .
1893	Submits a segment to the queue .
1894	Puts a value into the queue .
1895	Get the parameters from the VWF player .
1896	Extracts the nonce from the URL .
1897	Fetch the v pid from the url .
1898	Validates a JSON data .
1899	Converts XML data to XML .
1900	Parse query string .
1901	Iterates over all values found in the given data and returns the result .
1902	Starts the process .
1903	Get tag from HTML .
1904	Fetch the manifest from the manifest .
1905	Returns the UTF - 8 encoding for the given sample .
1906	Parses the response .
1907	Parse XML response .
1908	Adds cookies to the client .
1909	Parses the headers .
1910	Parse query parameters .
1911	Returns the message .
1912	Create a LogRecord .
1913	Login to LiveEdu account
1914	Load a plugin .
1915	Get query string .
1916	Iterates over all the tags and writes them to the output stream .
1917	Returns a dependency with the specified name .
1918	Checks if the file is already exists .
1919	Initializes the output file .
1920	Create a HTTP server .
1921	Open http requests .
1922	Starts the http server .
1923	Passes the stream .
1924	Opens the stream .
1925	Opens a stream .
1926	Displays the output stream .
1927	Translates a stream .
1928	Get the streams for the plugin .
1929	Fetches streams from the plugin .
1930	Returns the stream name for the given stream name .
1931	Helper method to generate a list of valid streams
1932	Looks for a plugin URL .
1933	Prints the plugin list .
1934	Opens the stream link with twitch .
1935	Load plugins .
1936	Parse the known arguments from the command line .
1937	Initialize console .
1938	Initialize http session .
1939	Load plugins .
1940	Set the stream link options .
1941	Prints the current version information .
1942	Extracts the stream id from the given text .
1943	Gets the iframe .
1944	Sets the option .
1945	Get a resource option .
1946	Sets a plugin option .
1947	Get a plugin option .
1948	Tries to handle a URL .
1949	Load plugins .
1950	Parse hours minutes seconds .
1951	Checks that the given string starts with the specified string .
1952	Checks that the given string ends with the given string .
1953	Checks if the given string contains the given string .
1954	Returns the value of the given attribute .
1955	Returns a new instance of the given function .
1956	Convert a function to a string .
1957	Validates a URL .
1958	Finds the element with the specified xpath .
1959	Find all elements matching the XPath .
1960	Finds the player URL for the player .
1961	Parse data from the given data .
1962	Returns the player for the specified command .
1963	do login
1964	Extract stream id from HTML .
1965	Extract stream information from the HTML .
1966	Login website .
1967	Add a function to the map .
1968	Perform an API call .
1969	Starts a new session .
1970	Get information about a media .
1971	Creates a Crunyroll API .
1972	Compress string .
1973	Formatter for a character .
1974	Output a character formatter
1975	Read n bytes .
1976	Get value for this code .
1977	Call this method .
1978	Initialize the decoding table
1979	Initialize the length table
1980	Prints the code to a table
1981	Read a tuple from the stream .
1982	Returns a string representation of a bit .
1983	Returns the value at the specified index .
1984	Returns the lower value for the given index .
1985	Returns the bit at the given index .
1986	Returns a string representation of this symbol .
1987	Returns a string representation of the given index .
1988	Parses the actions table .
1989	Execute an action .
1990	Returns hex data in the stream .
1991	Prints output stream .
1992	Reads the metablock length .
1993	Checks if the stream is uncompressed .
1994	Read block type data .
1995	Transform a value into a MTF value .
1996	Read prefix array .
1997	Computes the normalized color for the specified color .
1998	Normalizes the specified colors .
1999	Convert a Vex_df to a table
2000	Add a function to the dataset
2001	Adds a virtual column to the virtual columns .
2002	Configures the virtual columns that are properpendicular .
2003	Generate a graphviz graph .
2004	Counts the counts for this dataset .
2005	Convert the value of the column to an ordinal value .
2006	Returns a VaexApp instance .
2007	This method is used to convert files into a DataFrame
2008	Read a sample message .
2009	Convert a table to an Astropy Table
2010	Create a DataFrame with the given arrays
2011	Creates a new vector with the given arguments .
2012	Convert a DataFrame to a DataFrame
2013	Read a CSV file .
2014	Create a server rest
2015	zeldovich
2016	Concatenates the given dfs into one .
2017	Create a virtual range
2018	Open a dataset .
2019	Evaluates an expression .
2020	Wraps the given arguments
2021	Returns the dependent columns for this column
2022	Schedule a task .
2023	Sets the indices of the table .
2024	Detects gadgets .
2025	Call this method .
2026	Wait for last plot .
2027	Opens a document .
2028	Write the file to the stream
2029	Splits the arrays into a new one .
2030	Applies an expression to the map .
2031	Compute the aggregate for the given expression .
2032	Computes the mean of the expression .
2033	Computes the sum of the expression
2034	Evaluates an expression using a binby expression .
2035	Calculate the covariance values .
2036	Calculate min max value .
2037	Computes the minimum value for the given expression .
2038	Returns an approximate percentile for the specified percentile expression .
2039	Create a plot widget .
2040	Counts the number of heal pixels in the image .
2041	Draws a plot on the heal image .
2042	Create a 3d plot .
2043	Evaluates the expression using the given expression .
2044	Get private directory
2045	Gets the selection .
2046	Updates the state .
2047	Removes the virtual meta file .
2048	Writes the virtual meta data to a yaml file
2049	Write meta data .
2050	Returns true if all expressions in the specified dimensions are excluded .
2051	Adds an expression to the variable .
2052	Get a variable .
2053	Evaluate a selection mask .
2054	Get a list of all items in the table .
2055	Copy the filter .
2056	Convert this object to a Pdf DataFrame
2057	Convert an arrow table to an arrow table .
2058	Convert this object to a Table
2059	Add a column to the DataFrame
2060	Update a virtual column .
2061	Converts the virtual columns to polar coordinates .
2062	Add a virtual column to the mesh .
2063	Updates the virtual columns of the virtual columns .
2064	Translates virtual columns to cartesian vectors .
2065	Performs a virtual column rotation .
2066	Translates virtual columns to cartesian coordinates .
2067	Fills the virtual columns with cartesian coordinates .
2068	Add a virtual column .
2069	Deletes a virtual column .
2070	Adds an expression to the variable list .
2071	Deletes a variable .
2072	Returns a new copy of this sequence .
2073	Prints the head and tail of the table
2074	Selects the values of the feature in the model
2075	Prints a table to the output table .
2076	Sets the current row value .
2077	Returns the column names that match the given regular expression .
2078	Set the active fraction of this column
2079	Create a new ColumnIndex with the specified indices
2080	Returns a new trimmed string consisting of the contents of the trimmed string .
2081	Returns a random number of randomly selected elements .
2082	Generates a random number of elements from the given fraction .
2083	Extracts a sequence of offsets from a sequence .
2084	Performs a quicksort .
2085	Adds a virtual column to the table .
2086	Undo the given selection .
2087	Redo the selection
2088	Returns true if the given selection can be redo
2089	Replace the given boolean expression with the given boolean expression .
2090	Drop non - missing values .
2091	Selects all non - null values in the filter .
2092	Select a rectangle .
2093	Select limits .
2094	Select a circle
2095	Draws an ellipse .
2096	Adds a Lasso selection to the current selection .
2097	Invert the selection .
2098	Select selection .
2099	Creates a selection .
2100	find a valid name in the table
2101	Recursively walk the expression graph .
2102	Generate a graphviz graphviz for this dataset .
2103	Adds a column to the categories .
2104	Encodes the values of the given column using the given values .
2105	Creates a Datas object with the given columns .
2106	Returns the number of elements in the image .
2107	Horizontally stack the specified data frames .
2108	Concatenates this one and another one .
2109	Export this object into HH5 .
2110	Adds a column to this array .
2111	Add a function to the DataFrame
2112	Creates a lazy function .
2113	Fills an array with a value
2114	get day of week
2115	get day of year
2116	Check if is a leap year
2117	Gets the year of the given value .
2118	Returns the month of the given value
2119	Get the month name of the given date
2120	Returns the day of the given value .
2121	Get day name .
2122	Get the week of the year
2123	Returns the hour of the given value
2124	Get minute value .
2125	Get second value
2126	Capitalize a string .
2127	Creates an arrow from two strings .
2128	Returns true if x contains pattern
2129	Count the number of occurrences of the given pattern .
2130	Find the first occurrence of a substring in a string sequence .
2131	Get the index at the specified index .
2132	Returns the index of a sub - string
2133	Returns the lower case of the given value .
2134	Returns a new instance of the beginning of a string .
2135	Pads a string to an arrow .
2136	Creates a column of a string
2137	Returns the index of the first occurrence of the given substring in the given sequence .
2138	Returns the index of the first occurrence of the first occurrence of the specified substring .
2139	Right justify a string .
2140	Returns a copy of the specified value .
2141	Returns a slice of the given sequence .
2142	Returns an arrow from the given value .
2143	Returns the title of the given object .
2144	Returns the upper case of a string .
2145	Check if an array is an integer .
2146	Create a record array from the data structure .
2147	Write properties .
2148	Write a comment .
2149	Write a property .
2150	Read properties from the file .
2151	Converts the given file to universal newlines .
2152	Prints the versions .
2153	Update the old value with a deprecated name .
2154	Set fftlib
2155	Track beat events .
2156	Estimates the tuning of the input file .
2157	Convert the frames to samples .
2158	Convert the given samples to a frame .
2159	Convert the given time to frames .
2160	Converts a midi note to a note .
2161	Converts a set of frequencies to Mels .
2162	Convert mels to frequency .
2163	Computes the frequency of the fft .
2164	Calculate the frequencies .
2165	Compute the frequency of mel bands .
2166	Compute the weighting for a given frequency .
2167	Converts the given frame to time .
2168	Convert a frame to a sample .
2169	Static factory method for using Pseudo CQT .
2170	Project a function to a pseudo - cq - cq - t component .
2171	This function is used to compute a transform of a filter .
2172	Apply a filter to the cqt transform .
2173	Trims the stack from a CQT response .
2174	Compute the cqt response energy .
2175	Returns the low - down sample count for the given hop length .
2176	Performs a downsampling on an audio signal .
2177	Calculates the accu_ cost of the data set .
2178	This method is used to perform the backtracking .
2179	Viterbi function .
2180	Performs an iterbi discriminative algorithm .
2181	Generate a transition
2182	Creates a transition from the given number of states .
2183	Computes the transition between the given number of states .
2184	Creates a transition from the given window .
2185	Detects onsets .
2186	Compute onset strength .
2187	Find the backtrack for the given energy .
2188	Compute the feature strength .
2189	Write times to a csv file .
2190	Write the audio buffer to a file .
2191	Returns the cmap for the given data .
2192	Create a plot for a sample .
2193	Sets the current image .
2194	Map the mesh coordinates .
2195	Helper method to check if the axes is valid .
2196	Scale an axes
2197	This function centers the coordinate of the transform histogram .
2198	Calculate mel frequency .
2199	Compute the frequency of a coordinate coordinate .
2200	Compute the color of the coordinate .
2201	Returns the coordinates of the coordinate in milliseconds .
2202	Count pitch tuning .
2203	Create a track .
2204	Compute the HSS matrix .
2205	Compute the Harmonic matrix .
2206	Compute the Ccussive matrix for the given value .
2207	Stretch the image using the specified rate
2208	Shift the y - shift of the image using the specified bins .
2209	Merges the array of events at the given intervals .
2210	Computes the MSE of the given frame .
2211	Convert a signal to a frame .
2212	Convert a signal to an interval .
2213	Compute the vocoder
2214	Converts the power information into a database .
2215	Compute a magnitude spectrogram .
2216	Scans the given file and saves them into a csv file .
2217	Performs the NMF decomposition .
2218	Performs a filter on a recurrence matrix .
2219	Helper function .
2220	Performs a mel filter .
2221	Create a copy of the FFT .
2222	Wraps a float window .
2223	Computes the frequency of the given frequency .
2224	Computes the q lengths of the histogram
2225	Merges a range of chroma to a Chromave .
2226	Get bandwidth for a given window .
2227	Returns a window for a given window size .
2228	Performs a multirate filter .
2229	Calculate the center frequency rates .
2230	Fills the window with the specified hop length .
2231	Computes the squared window of a given window .
2232	Applies a filter to a window .
2233	Computes the centroid of a spectrum .
2234	Compute the waveloff rolloff .
2235	Computes the spectness flatness of the given spectrum .
2236	Computes the feature features of the specified frame .
2237	Computes the crossing rate of the frame .
2238	Compute the stft kernel .
2239	Create a CQT .
2240	Computes a melpectrogram from the given transform .
2241	Computes the jcard between two integers .
2242	Returns the index of the best match between the given intervals .
2243	Matches intervals from the given intervals .
2244	Matches intervals from a list of intervals .
2245	Matches events from the given events to the given events list .
2246	Computes the Salience for a given frequency .
2247	Computes the harmonics of the x and harmonics
2248	Computes the harmonics of the given harmonics .
2249	Computes the harmonics of a single axis .
2250	Load audio data .
2251	Load audio data from audio file .
2252	Returns the mono channel of the stream .
2253	Resample the given sampling rate .
2254	Computes the autocorrelate of the given axis .
2255	Compute the lpc value .
2256	Create sample positions for a given time .
2257	Compute a single signal .
2258	Computes the chirp of a signal .
2259	Returns a set of files matching the given extensions .
2260	Demonstrates a sample of audio file .
2261	Parse the time stretching example .
2262	Resample a sample of the input file .
2263	Get the track of an onset .
2264	Compute the beat tracker for an onset envelope .
2265	Compute the local score for the onset envelope
2266	Compute the track location for the beat
2267	Returns the last beat in the cum score
2268	Converts a recurrence matrix to a lag matrix .
2269	Converts a lag matrix into a recurrence matrix .
2270	Wraps a recurrence function on a recurrence space .
2271	Segments the given data into an array of segments .
2272	Performs an agglomerative clustering algorithm .
2273	Enhance the kernel .
2274	Detect onsets .
2275	Creates a sequence of frames .
2276	Convert audio buffer to audio .
2277	Convert x to int .
2278	Returns the length of the specified data .
2279	Sorts the specified array by axis and index .
2280	Computes the maximum value of the given input .
2281	Returns true if x is max .
2282	Picks a single value .
2283	Converts rows into sparse matrix .
2284	Applies shift to a sparse matrix .
2285	Convert data to float
2286	Convert an index set to a slice .
2287	Applies an aggregation to the specified data .
2288	Compute the softmask for a given data set .
2289	Returns the big - bit type of the given array .
2290	Convert a video file to a video file .
2291	Read an image .
2292	Read a frame .
2293	Convert image to images .
2294	Prints a progress bar .
2295	Performs a parallel parallel progress .
2296	Flips the image .
2297	Rotate an image .
2298	Clips the specified bboxes and returns the clipped boxes .
2299	Scaling the bounding box with the specified scale .
2300	Crop the image .
2301	Pad the image with the specified shape
2302	Multiply the input image to multiple padding .
2303	Scale size .
2304	Resize the image
2305	Resize image .
2306	Rescale the image .
2307	Register a file handler .
2308	Get priority value .
2309	Converts an array to quantiles .
2310	Show image .
2311	Shows the specified bboxes .
2312	Read flow .
2313	Writes a flow to a file .
2314	Convert a flow to a flow
2315	Fills the given state from the given model .
2316	Loads a checkpoint from a model .
2317	Convert a state to cpu
2318	Save a checkpoint .
2319	Obtains an optimizer object from the model
2320	Create a logger .
2321	Get the rate of the optimizer .
2322	Inserts a hook .
2323	Run a workflow .
2324	Registers training hooks .
2325	Print a video file .
2326	Convert a video to an output file .
2327	Convert a video to an output file .
2328	Convert video list to output file .
2329	Read a list of items from a file .
2330	Read a mapping from a file .
2331	Create a convolution convolution from the input planes .
2332	Creates an object from a JSON object .
2333	Read image .
2334	Decodes an image from bytes .
2335	Write image .
2336	Convert image to gray .
2337	Convert image to bgr
2338	Convert an iterable to an iterable .
2339	Checks if the given sequence matches the expected type .
2340	Converts a list of indices to a list of indices .
2341	Wraps the given method .
2342	Update the average of the history
2343	Copies the input stream to the specified devices .
2344	Convert color to a color
2345	Returns the time of a given timer .
2346	Starts the running process .
2347	Returns the duration of the timer .
2348	Returns the duration of the timer .
2349	Show a flow
2350	Convert the flow to RGB .
2351	Generate color wheel
2352	Returns a batch size of the output .
2353	Performs a scatter function .
2354	Generate arguments for the targetgpus .
2355	Fetches the response .
2356	Returns a JSON object from AWS .
2357	Returns the contents of this token as a string .
2358	Handle a callback .
2359	Perform multiple requests .
2360	Creates a new Request .
2361	Start the master .
2362	Parses an Ansible task .
2363	Builds the line number for the previous token .
2364	Get the name of the distribution .
2365	Returns the basename of the archive .
2366	Updates the required requirements .
2367	Tries to delete the egg - info file .
2368	Creates an activity .
2369	Creates an activity with the given actions .
2370	Adds an attachment to the list .
2371	Creates an activity for a list of attachments .
2372	Creates an attachment .
2373	Trace an activity .
2374	Sets the telemetry client .
2375	Reads a list of keys from the database .
2376	Writes changes to store .
2377	Delete items .
2378	Creates a StoreItem from the result .
2379	Creates a dictionary from the content of the item .
2380	Sanitize a key .
2381	Creates the database and container .
2382	Gets the database .
2383	Gets the container or creates it if it doesn t exist .
2384	Defines event for Qna results .
2385	Converts an activity to a conversation reference .
2386	Returns the name of the step .
2387	Checks to see if the given channel is suggested for the given channel .
2388	Checks if a channel has a number of buttons .
2389	Gets the channel id .
2390	Attempts to parse the token from an emulator token .
2391	Creates an attachment for a hero card .
2392	Get the parameters for this instruction .
2393	Returns a copy of this instance .
2394	Returns a copy of the inverse gate .
2395	Set the control value for a classical register
2396	Returns a copy of this cpy .
2397	Returns a string that is an expression .
2398	Returns the string representation of this instruction .
2399	Performs a circuit .
2400	Performs a pass .
2401	Dump all passes in the working list .
2402	Generate a dump of passes
2403	Creates a new flow controller .
2404	A base function .
2405	Get the parameters of a gate .
2406	Returns the transformation matrix for a given gate .
2407	Returns a matrix multiplication string for the given indices .
2408	Returns the vcmul index for the given gate indices .
2409	Helper method to use the multiplication operator .
2410	Converts a circuit to a DAG circuit .
2411	Compute the fit function .
2412	Function .
2413	Plots the coherence of x data
2414	Extract data from raw data
2415	Plot the data for each sequence .
2416	Splits all runs on a graph .
2417	The U3 factor of U3 .
2418	Converts YYZ rotation matrix to ZYZ .
2419	Validates the input state of the given quantum state .
2420	Trims the image .
2421	Gets the gate span for this instruction .
2422	Converts a circuit to an instruction .
2423	Sets the layout of the given dag .
2424	Returns the best subset of the coupling map .
2425	Appends quantits to this bar .
2426	Computes the data of the observable
2427	Processes a bit .
2428	Process a custom unitary node .
2429	Process a gate .
2430	Process a CNOT node .
2431	Process a measure .
2432	Process an IF node .
2433	Create a dag op .
2434	Returns the duration of the given channels .
2435	Returns the start time for the given channels .
2436	Returns the stop time for the given channels .
2437	Returns the instructions of this schedule .
2438	Checks that the given value matches the expected type .
2439	Sets additional data .
2440	Sets additional data .
2441	Creates a validation schema .
2442	Validates an instance .
2443	Performs validation after initialization .
2444	Serialize this model to a JSON object .
2445	Loads a model from a JSON object .
2446	Compute the vertical direction .
2447	Calculate a partial trace vector .
2448	Convert a density matrix to a density matrix .
2449	Vectorized matrix .
2450	Convert chou to pauliop .
2451	Sets an array to zero .
2452	Computes the conjunctive product of two vectors .
2453	Compute the concurrence .
2454	Computes the entropy of the given pvec .
2455	Computes the shannon entropy .
2456	Computes the entropy of a state .
2457	Compute the entropy of a given state .
2458	Returns the entropy for the eof frame .
2459	Create a schedule from a schedule .
2460	Create a schedule from a schedule .
2461	Creates a new schedule .
2462	Creates a new schedule at the given parent .
2463	Adds a U3 gate .
2464	Gets the status of this backend .
2465	Updates the state of the scene .
2466	Returns the duration of the remaining iteration .
2467	This method is used to assemble the circuits .
2468	Returns the distance between two strings .
2469	Creates a quaternion from axis rotation .
2470	Create a quaternion from rotation angles .
2471	Returns a quaternion representation of this quaternion .
2472	Returns the transformation matrix .
2473	Returns the euler of this matrix .
2474	Keep the data in the data set
2475	Plots the histogram
2476	Checks the type of an instruction .
2477	Sets the register index .
2478	Returns true if the square matrix is a square matrix .
2479	Returns true if the matrix is a diagonal .
2480	Returns true if the operation is a symmetric matrix .
2481	Returns true if the matrix is a hermitian matrix .
2482	Returns true if the matrix is non - positive .
2483	Checks to see if the matrix is an identity matrix .
2484	Returns true if the matrix is a unitary matrix .
2485	Converts a quanti to a chi channel .
2486	Converts a quantop to a super operator .
2487	Convert data to Kraus dimension .
2488	Convert data to Chi representation .
2489	Converts the data into a PMM representation .
2490	Convert data to stinespring .
2491	Convert data to operator .
2492	Convert a operator to its output dimension .
2493	Converts a channel into an Operator representation .
2494	Convert a superop to a chi .
2495	Converts the choi to a superop .
2496	Convert the kraus data to a choi .
2497	Converts a Chi matrix into a Kraus matrix .
2498	Convert stines to kraus pair .
2499	Transform the stinespring elements into the output matrix .
2500	Converts the kraus data into a tuple of stines .
2501	Convert kraus data to superop .
2502	Converts the chi to chi transform .
2503	Converts the chi to a Pauli operator .
2504	Reverses two matrices .
2505	Creates a transformation from pauli data .
2506	Checks that the input dimension is an input dimension .
2507	Hide the ticklines and labels .
2508	Sets the x label convention .
2509	Resets the state of this object .
2510	Adds a vector to the vector
2511	Adds a position annotation .
2512	Renders the plot .
2513	Draws the front of the sphere .
2514	Render the plot .
2515	Create a two - qak function for the given unitary matrix .
2516	Build the top padding .
2517	Returns the mid part of the mid frame .
2518	Get the bot .
2519	Returns the maximum size of the image .
2520	Returns a string representation of a label .
2521	Generates a label for a box .
2522	Generates a latex node .
2523	Compiles the given circuits .
2524	Filter deprecated warnings .
2525	Get hardware information .
2526	Checks if a connection has been established .
2527	Check the status of a job .
2528	Creates a new matrix for the given times .
2529	Calculate the value of a complex array .
2530	Calculates the ampers of the given times and phase .
2531	Returns a matrix with a given frequency .
2532	Fixes a gaussian width using zeroed width .
2533	Calculates the gaussian with zeroed width
2534	Computes the derivative of a Gaussian .
2535	Returns a square with zeroed width
2536	Create a pass manager .
2537	Create pass manager simulator .
2538	Returns true if the given register has the given register .
2539	Returns a copy of this instance .
2540	Returns the inverse direction .
2541	Appends an instruction to the current data .
2542	Attach instruction .
2543	Registers a new register .
2544	Checks that there is duplicate qubits .
2545	Checks all qargs in the circuit .
2546	Check the circuit s arguments .
2547	Check that two circuits are compatible
2548	Returns a string representation of the instruction .
2549	Draws the circuit drawer .
2550	Returns number of gate operations .
2551	Returns the size of this instruction .
2552	Get the number of operations in the instruction
2553	Returns the connected components of this instruction .
2554	Binds parameters to the circuit .
2555	Binds a parameter to the instruction .
2556	Draws the pulse drawer
2557	Search for a forward n - n - n - gates .
2558	Applies free gates to a given layout .
2559	Calculates the distance between a layout .
2560	Compute score for a step .
2561	Copies the metadata of the circuit .
2562	Transform a gate for a given layout .
2563	Create a swap op from the edge layout
2564	Applies the coupling map to the DAG .
2565	Adds a node to the coupling graph .
2566	Adds an edge to the graph .
2567	Creates a coupling map for the given nodelist .
2568	Returns the list of qqubits in the graph .
2569	Check if the graph is connected .
2570	Compute the distance matrix .
2571	Returns the distance matrix for the two coupling graph .
2572	Transpile circuits .
2573	Adds a Cu1 gate .
2574	Reverse the instruction .
2575	Performs a Q_if on this instruction .
2576	Performs a c_if on the instruction .
2577	Register a callback .
2578	Calls the callback for the given event .
2579	Unsubscribe an event .
2580	Dispatch an event .
2581	Append a new initialize instruction .
2582	Initialize the circuit .
2583	Returns a circuit to uncompute all rotations that have been re - computed .
2584	Returns the angle of a given pair .
2585	Creates a circuit for multiplexings .
2586	Returns true if the value is virtual .
2587	Creates a copy of this layout .
2588	Converts a layout into edge map .
2589	Adds ctl2 to this gate .
2590	Inserts a schedule into the schedule .
2591	Check if a fenced property exists .
2592	Convert gates to index
2593	Initializes the stochastic swap .
2594	Update the layer .
2595	Returns the PauliGroup for the given number of qits .
2596	Constructs a Pauli string from a Pauli string .
2597	Initializes this quaternion from a boolean vector .
2598	Computes the product of p1 p1 and p2 .
2599	Gets an Operator .
2600	Returns the instruction to be used by the program .
2601	Sets the z value of the qubits .
2602	Sets the q x .
2603	Adds a Paulis to the plane .
2604	Inserts pauls into the Paulis .
2605	Delete the quantits from the given indices .
2606	Create a random random seed with a seed .
2607	Creates a new Pauli_label from a Pauli_label .
2608	Computes and returns the outcome string for a measure .
2609	Adds samples to the state vector .
2610	Adds a q asm measure .
2611	Reset the quantary state .
2612	Validate the initial statevector .
2613	Initialize the state vector .
2614	Get the state vector .
2615	Check if the given experiment is a measure sampling
2616	Submits aer job .
2617	Run a job .
2618	Validates this circuit .
2619	Validates the initial unitary .
2620	Initialize unitary matrix .
2621	Gets the unitary unitary .
2622	Run a job .
2623	Validates this circuit .
2624	Checks if the given object is a bit .
2625	Computes the layout of the given dag .
2626	Determines if this interval overlaps with another interval .
2627	Returns an interval with the specified time .
2628	Creates a Timeslot with the specified time .
2629	Returns the start time of the given channels .
2630	Returns the stop time for the given channels .
2631	Check if the timeslot collection is mergeable with the given timeslot collection .
2632	Create a TimeslotCollection with the given timeslot collection .
2633	Returns a timeslot collection with the specified time .
2634	Report as a comment .
2635	Convert the rho into a map .
2636	Plot state .
2637	Add a z - axis to the graph .
2638	Swap two targets .
2639	Initialize the backend .
2640	Creates the program graph for the program .
2641	Selects the next edge .
2642	Selects the best circuit .
2643	Selects the best available fragment in the program .
2644	Loads the program graph from the program .
2645	Gets the instruction list .
2646	Sets inverse flag .
2647	Performs a q_if on this gate .
2648	Performs a c_if on this gate .
2649	Returns true if this matrix is a unitary matrix .
2650	Returns a conjugate of this operator .
2651	Create a new Operator
2652	Returns a power of this Operator .
2653	Returns the shape of this image .
2654	Converts an instruction to an identity operator .
2655	Update the current layer .
2656	Split a bitstring into spaces .
2657	Format a level zero memory .
2658	Format a memory .
2659	Format memory to a list of memory .
2660	Converts counts into a dictionary .
2661	Returns the state vector of a given vector .
2662	Convert a matrix to a unitary matrix .
2663	Asynchronously submit a job .
2664	Submits the job .
2665	Returns the status of this job .
2666	Check if lo_freq is in lo_freq
2667	Plot the bloch
2668	Looks up the QLLs defined in the config .
2669	Looks for measurement frequencies in the config .
2670	Unroll the circuit .
2671	Plots the Qsphere state
2672	Choose k .
2673	Get the index of the given list .
2674	Plots a pauli vector .
2675	Finds unique hardware backends .
2676	Get the op node
2677	Create a constant pulse .
2678	Create a zero pulse .
2679	Samples a square pulse .
2680	Samples a sawto hand pulse .
2681	Samples a triangle pulse .
2682	Samples a wave pulse .
2683	Samples a sin pulse .
2684	Samples a Gaussian pulse .
2685	Sample Gaussian derivative .
2686	Samples a Gaussian Gaussian square .
2687	Returns the real value of this axis .
2688	Prints a string representation of the qreg .
2689	Gets the backend instance .
2690	Register a new name .
2691	Removes all operations with the given name .
2692	Adds a quantregister to this circuit .
2693	Adds a ClassicalRegister to this DAG .
2694	Adds a wire to the DAG .
2695	Checks if the given condition exists .
2696	Get the bits in a given condition
2697	add an operation node to the DAG
2698	Add an operation back to the DAG .
2699	Check that the edge_map registers are valid .
2700	Checks the validity of the wire map .
2701	Map a condition to a new condition .
2702	Compose back from the given dag .
2703	Prepares the input circuit .
2704	Check a list of wires .
2705	Builds the predicates map for the given node .
2706	Helper method to compute the full predecessor map .
2707	Returns the topological order of this graph .
2708	Get the edges for this graph .
2709	Returns all the nodes in the multi - graph .
2710	Returns the nodes of this gate .
2711	Get a list of named nodes .
2712	Returns two q - gates for this node .
2713	Returns the predecessors of a given node .
2714	Gets the predecessors of a given node .
2715	Get the ancestors of a given node .
2716	Returns the quantum successors for a given node .
2717	Remove an op node .
2718	Removes all ancestors of the given node .
2719	Removes all descendants of a given node .
2720	Removes all non - ancestors of the given node .
2721	Removes all non - descendants of the given node .
2722	Creates a copy of this circuit .
2723	Creates a new list of layers .
2724	Get the layers of the input graph .
2725	Returns a set of gates in the topological order .
2726	Find the node that is on the given wire .
2727	Returns the number of operations in topological .
2728	Returns a summary of the input
2729	Create a tomography basis .
2730	Configures the Pauli measurement .
2731	Sets the basis for a given basis .
2732	Create a tomography set .
2733	Add tomo circuit to tomography set .
2734	Get the tomoset data .
2735	Returns the summing counts for the given qubits .
2736	Fit the tomography data .
2737	Fit the given tomo .
2738	Compute the projector for a given basis .
2739	Computes the inverse of the terms of terms .
2740	Calculate rho wizard .
2741	Calculates the signer data .
2742	Execute a gate .
2743	Checks the text of a job .
2744	Monitor job status .
2745	Returns the rotation angle of a unitary matrix .
2746	Applies U1 transformation to U3 .
2747	Adds a new dag to the dag .
2748	Generate a tab table for the given backend .
2749	Creates a tab for the job history .
2750	Get job history
2751	Draws a pulse drawer .
2752	Adds a Cu3 gate .
2753	Returns a bell - circuit circuit .
2754	Applies transpilation to circuits .
2755	Runs a transpile circuit .
2756	Executes the configuration .
2757	Get the drive channel .
2758	Get the first control channel in the frame .
2759	Get the first measurement channel in the queue .
2760	Gets the acquire channel .
2761	Computes the state of the given state .
2762	Configures the run options .
2763	Remove qiskit logger .
2764	Plots the state of the GUI .
2765	Converts two channels into a fidelity matrix .
2766	Handle the lexer .
2767	Pop the current lexer from the stack .
2768	Create a new lexer .
2769	Creates a new DAG from the topological circuit .
2770	Gets the bound method for the given instruction .
2771	Executes the acquire command .
2772	Called when a frame is changed .
2773	Executes a persistent value .
2774	Create a drive command .
2775	Creates a snapshot command .
2776	Updates annotations of the pulse annotations .
2777	Decorates a function to generate a sampler that can be applied to a function .
2778	Determine whether or not the given backends can be filtered .
2779	Get the name of a backend .
2780	Converts a topological control into a circuit .
2781	Convert a matrix observable to a dictionary
2782	Add a symbol to the current symtab .
2783	Verify that a bit is declared .
2784	Recursively walk a list of expressions .
2785	Checks that the given symbol is used as a gate .
2786	Check the symbol for a register
2787	Verify that the given object is a bit list .
2788	Returns the column of the given token .
2789	Parse debug value .
2790	Parse the given data .
2791	Parse the given data into a string .
2792	Parse the Qasm file .
2793	Adds a Crz gate .
2794	Get the state of a bit string .
2795	Returns the density matrix of the given state .
2796	Returns the reality of the state .
2797	Initializes the commutation set .
2798	Create HTML widget for a backend .
2799	Iterates over all backends and returns status information .
2800	Creates a widget for pending jobs .
2801	Simplify the vertex .
2802	Get a backend by name
2803	Returns the shape of the bipartite shape .
2804	Returns the register specs for the given bit labels .
2805	Truncate float .
2806	Builds the latex array .
2807	Returns the width of the image .
2808	Get the Beamerer page .
2809	Load a schema from a file .
2810	Gets a validator .
2811	Load all schemas and validators from the classpath .
2812	Validates a JSON object against the given schema
2813	Formats the causes of an error .
2814	Compute the clusterority .
2815	Major majority .
2816	Generates the latex source for a circuit .
2817	Draws a circuit .
2818	Create a unitary operator .
2819	Generate a random density matrix .
2820	Generate a random Gaussian matrix .
2821	Returns the random density of a random distribution .
2822	Returns a random density number of bres .
2823	Returns the name of the custom unitary .
2824	Power the matrix with an integer power .
2825	Recompose a subsystem .
2826	Converts an instruction to a super operator .
2827	Creates a layer of the DAG for the given DAG .
2828	Serialize circuits into a QObject .
2829	Unroll the DAG .
2830	Expand the gate .
2831	Defines the definition to be used in the current state .
2832	Checks if the value is an iterable .
2833	Checks if the value is a valid type .
2834	Sets the absolute tolerance .
2835	Sets the ratio of this quaternion .
2836	Reshape the input and output dimensions .
2837	Get the dimensions of the input stream
2838	Returns the dimensions of the output .
2839	Creates a copy of this image .
2840	Returns a copy of this component with a positive integer dimension .
2841	Returns the automatic dimensions for the given dimension size .
2842	Multiplies the matrix with the specified indices .
2843	Returns the deserialized schema .
2844	Serializes the given value to the validator .
2845	Check if the given value matches the choices .
2846	Calculates the fidelity of two state vectors
2847	Svd function
2848	Create a snapshot of this node .
2849	Sets the name of the label .
2850	Returns true if this quaternion is unitary .
2851	Convert this matrix to an operator .
2852	Converts this circuit to an instruction .
2853	This method is used to convert a QuantumChannel object into an Operator .
2854	Returns the enum value for the given model .
2855	Parses calendar formats .
2856	Returns an ordered map of locales and locales .
2857	Returns a list of locales for the specified locales .
2858	Checks if the given tokens are valid .
2859	Splits the string according to the relative regex .
2860	Returns the date object corresponding to the given date string .
2861	Parses a time string .
2862	Checks if the given date string is applicable to this context .
2863	Converts a date string to a string .
2864	Returns the date object with the given date formats .
2865	This method is used to generate an ammo_file .
2866	Convert an exception to a net exception .
2867	Convert exception to http .
2868	Parse the configuration .
2869	Generate the config file .
2870	Get information about all streams .
2871	Configures the STPD file .
2872	Process stdout and stderr .
2873	Converts a time string to an integer .
2874	Configures the options .
2875	Publish the stepper information .
2876	Generate stpd file name .
2877	Read the stepper info .
2878	Write the stepper info to a file .
2879	Make a stpd - file .
2880	Publish a RPS schedule .
2881	Get the time at time
2882	Execute the given command
2883	Create a list of monitoring points .
2884	Make the points for a given label .
2885	Publish a new value .
2886	Count the number of matched codes
2887	Waits for the current task .
2888	Feeds the plan to a queue
2889	Configure logging .
2890	Add user options .
2891	Starts the lock .
2892	Graceful shutdown
2893	Collect data from queue
2894	Notifies all listeners that the data has been aggregated .
2895	Get marker .
2896	Parse duration .
2897	Starts the agent on localhost .
2898	Starts ssh session .
2899	Discover the jMeter UDP port .
2900	Add jmx components .
2901	Terminate the process .
2902	Read data from a line .
2903	Create a criterion based on the criteria string .
2904	Parses the configuration for monitoring .
2905	Loads the startup config file .
2906	Check the disk usage .
2907	Check the virtual memory .
2908	Get the terminal size
2909	Gets right line .
2910	Truncate the line array to the specified maximum width .
2911	Renders left panel .
2912	Processes the terminal .
2913	Adds a new info widget .
2914	Calculate the width of the rectangle .
2915	Returns the length of the line .
2916	Create a load plan .
2917	Get level string .
2918	Add a widget to the screen .
2919	Sends a request to the writer .
2920	Load plugins .
2921	Get the first plugin of the plugin type .
2922	Search for plugins of a given type .
2923	Collect a file
2924	Adds an artifact file to the collector .
2925	Create a temporary file name .
2926	Load config files .
2927	Write the configuration .
2928	Get the options for a given section .
2929	Returns the section of the config .
2930	Decodes statistics .
2931	Get the cached info .
2932	Installs the monitoring agent .
2933	Process the agent data .
2934	Collects collected data .
2935	Detects configuration .
2936	Handle data items .
2937	Decodes agents data .
2938	Subscribe to the given channels .
2939	Subscribes the channel .
2940	Closes the connection .
2941	Perform a single request .
2942	Create an order
2943	Gets an order .
2944	Get the position of a symbol
2945	Returns all the assets with the given status .
2946	Gets the asset for the given symbol .
2947	Create a value subplan .
2948	Check the given parameter name and value type .
2949	Checks the given param name and value type of the given object .
2950	Creates an event logger handler .
2951	Construct a JSON event logger for the given json path .
2952	Loads a config file .
2953	Find the configuration for a repository .
2954	Format a graphql configuration .
2955	Get a pipeline by name .
2956	Generates a list of all the pipelines in the graph .
2957	Gets the next event from the process .
2958	Executes a pipeline through the pipeline .
2959	Wait for processing .
2960	Resolves a dagster type .
2961	Create an execution plan .
2962	Creates the execution plan for the given pipeline .
2963	Builds a sub pipeline for a given pipeline .
2964	Get the solid with the given name .
2965	Returns a list of all the commands that will be published .
2966	Updates the version .
2967	Returns a context definition for the given context .
2968	Returns a input schema for a selector .
2969	Creates a schema for a selector .
2970	Wrap the given text .
2971	Download file from S3 .
2972	Write file to S3 .
2973	Throws an error boundary .
2974	Creates a directory with the given mode .
2975	Creates and returns a context manager for the given user code .
2976	Creates a context free log .
2977	Checks if the step event is successful .
2978	Checks if the step event is skipped .
2979	Gets the values for the step .
2980	Get the value of the execution .
2981	Get step failure data .
2982	Creates a permissive Dictionary object .
2983	Checks if config value is a valid dataset .
2984	Checks if a configuration value is valid .
2985	Execute a core transform .
2986	Decorates a dagster type .
2987	Creates a new resource definition .
2988	Create a new event .
2989	Returns an ordered map of topological steps from the execution plan .
2990	Build connection params .
2991	Creates a new connection .
2992	Get a cursor
2993	Closes the connection .
2994	Convert a model to a model .
2995	Converts a value into a list of MDL objects .
2996	Overrides default formfield with default values .
2997	Convert a value to a model .
2998	Apply rel filters to the queryset .
2999	Compute the number of NFPs uniformly .
3000	Compute the real NFPs .
3001	Compute the best partition for the given number of partitions .
3002	Computes the best partitions for the given sizes .
3003	Calculates the c .
3004	Initialize slots .
3005	Returns the size of this hash table .
3006	Packs this MinHash into the given buffer .
3007	Load a lean min hash from a buffer .
3008	Compute hash values .
3009	Merges this object with the minimum hash values of this one .
3010	Creates a new union of the given MinHash .
3011	Inserts entries into the index .
3012	Iterates over all indexes and returns the optimal key .
3013	Hashes a vector .
3014	Removes a key from the hashtable .
3015	Computes the hash value for a given hash object .
3016	Performs hyperlog estimation .
3017	Merges this hyperLogLog with another .
3018	Initializes the registry .
3019	Calculates thepk score of actual .
3020	Computes the mean k of actual and predicted values
3021	Sorts the hash table .
3022	Returns a list of permutations of a given minhash .
3023	Closes this instance .
3024	Returns the storage for the given type .
3025	Returns the storage for the given type .
3026	Get user data .
3027	Add social login .
3028	Selects the text from the input text .
3029	Extracts the scoped selector .
3030	Parse a statement .
3031	Tries to parse the value .
3032	Consumes a single line .
3033	Parses a configurable reference .
3034	Wraps an exception with the given message .
3035	Converts the given string to Markdown format .
3036	Creates a new session .
3037	Ensure that the wrapped function has been wrapped .
3038	Decorates a function or class .
3039	Format a value .
3040	Clears the configuration .
3041	Set a binding parameter value .
3042	Returns the value bound for the given binding key .
3043	Returns true if the given method has a parameter .
3044	Returns a cached argument spec for the given function .
3045	Returns the names of the positional parameter names for the given arguments .
3046	Returns the names of all positional parameter names .
3047	Returns the default value for the given argument .
3048	Returns a scope .
3049	Perform decoration .
3050	Pretty print configuration .
3051	Parses the bindings .
3052	Registers a file reader .
3053	Parses a config file .
3054	Parses config files and bindings .
3055	Parses the given value .
3056	Finalize the configuration .
3057	Iterate over the flattened values .
3058	Iterates over all references in the given configuration .
3059	Sets a constant .
3060	Loads a class from an enum .
3061	Returns the selectors for the given partial selector .
3062	Returns all matches in the given partial selector .
3063	Returns the value of the given selector .
3064	Returns the search query string .
3065	Parses the retry - after response .
3066	Validates the property value .
3067	Get a description for a property
3068	Sets the value of the given value .
3069	Get the item at the specified index .
3070	Initialize this object .
3071	Set default headers for this request .
3072	Check if the request is valid .
3073	Handles the request .
3074	Handles a message .
3075	Perform an action .
3076	Remove action .
3077	Start the server .
3078	Create a description for this action .
3079	Sends a pending action to the queue .
3080	Sets the status of this task .
3081	Generate a description for this event .
3082	Get the IP address .
3083	Returns a list of all the IP addresses in the network .
3084	Sends a value to the external update .
3085	Handles an external update .
3086	Generate a description for this resource .
3087	Sets the href prefix .
3088	Returns a list of property descriptions .
3089	Returns the description of the action .
3090	Returns an event description for the given event .
3091	Adds a property .
3092	Removes a property .
3093	Returns the value of the specified property .
3094	Get the properties .
3095	Sets a property .
3096	Returns the action with the given name and action id .
3097	Send an event .
3098	Registers an event to be available .
3099	Creates an action .
3100	Cancel an action .
3101	Adds an available action .
3102	Remove a subscriber .
3103	Adds an event subscriber .
3104	Removes an event subscriber .
3105	Sends a notification about a property .
3106	Sends an action to all subscribers .
3107	Sends a message to the websocket .
3108	Renames the fields with the given annotations .
3109	Execute an update .
3110	Bulk insert .
3111	Returns the primary key of the insert .
3112	Create and return a new model .
3113	Builds a Postgres insert query .
3114	Checks if the field is magical .
3115	Builds and returns the fields of the model .
3116	On model save .
3117	On model delete .
3118	Returns a case that is not null
3119	Resolve expression .
3120	Generates the SQL for this Hstore .
3121	Create a clone of this object .
3122	Adds additional join conditions .
3123	Checks if the given field is a hstore field .
3124	Insert values into the database .
3125	Creates a required constraint .
3126	Renames required constraint .
3127	Drop required constraint .
3128	Returns the name of a required constraint .
3129	Creates and returns SQL statement .
3130	Creates a custom command
3131	Returns the base class for the PostgreSQL backend wrapper .
3132	Creates the Hstore extension .
3133	Prepares the value for the given value .
3134	Returns the form of this statement .
3135	Rewrites the insert statement .
3136	Rewrites an insert .
3137	Rewrites an insert .
3138	Rewrites an INSERT statement .
3139	Builds the conflict target .
3140	Returns the field with the given name .
3141	Format field name .
3142	Returns the value of the given field .
3143	Creates a unique constraint .
3144	Renames a unique constraint .
3145	Drop a unique constraint .
3146	Returns the unique constraint name .
3147	Iterate over the set of unique keys .
3148	Adds a condition to the extra conditions .
3149	Returns the SQL for this table .
3150	Returns the dist95 configuration level .
3151	Returns the variance of two samples .
3152	Computes the variance of two samples .
3153	Determines if the tdist 95 confidence level is significant .
3154	Recursive sort method .
3155	Returns a list of all queued vectors .
3156	Iterates over the given board .
3157	Get the best child position .
3158	Draws a random move .
3159	Remove benchmarks from the base version .
3160	Returns the name of the given benchmark .
3161	Generate a table of strings .
3162	Generate benchmarkmarks .
3163	Get the domain of a knot .
3164	Fetches messages from the channel .
3165	Parse posts from raw posts .
3166	Retrieves a user .
3167	Fetches the items of this category .
3168	Fetches the items from the RSS feed .
3169	Builds the command - line command - line command .
3170	Fetches all items of the given category .
3171	Fetches all bugs from a given date .
3172	Get bug information .
3173	Retrieve a bug list .
3174	Execute a bug .
3175	Get the notes for an issue .
3176	Fetches all merge requests from a specific date .
3177	Get the notes for a merge .
3178	Get the versions of a merge .
3179	Fetches all items from the repository .
3180	Fetch a merge .
3181	Get all versions of a merge .
3182	Fetch a merge version .
3183	Fetches all items with the specified type .
3184	Get all emoji items .
3185	Get all emojis for the specified note .
3186	Gets the time to reset .
3187	Fetches items from a project .
3188	Initializes the rate limit .
3189	Build the backend command parser .
3190	Fetches the messages from the message that are in the given category .
3191	Generate a nick id for an item
3192	Returns the number of members of a conversation .
3193	Retrieves information about a channel .
3194	Retrieves information about a user .
3195	Build the command line parser .
3196	Returns the timestamp for the updated item .
3197	Extracts a list of buglist from a raw file .
3198	Getbugs details from raw xml .
3199	Parse bug activity .
3200	Logs out the user .
3201	Call this method .
3202	Get the BugList for a given date
3203	Get bug information .
3204	Gets the activity of a bug .
3205	Fetches the events for a given category .
3206	Fetches the items of a group .
3207	Fetches events from a group .
3208	Fetches the specified event .
3209	Retrieves the RRSVPS page for an event .
3210	get question items
3211	Fetch comments from a question .
3212	Builds a question .
3213	Fetch all questions from a resource
3214	Get HTML question .
3215	Get comments for a post .
3216	Get the question info for a given question .
3217	Parses the answer information for a given HTML question .
3218	Get the number of pages of a page .
3219	Get user info from update info .
3220	Fetches the items for the given category .
3221	Extract reviews from raw data
3222	Fetches all reviews in the Gerrit group .
3223	Get the version .
3224	Retrieves reviews for a given last item .
3225	Retrieve the next group item .
3226	Executes a command .
3227	Executes a command on the archive
3228	Executes the given command and returns the result .
3229	Build the backend command parser .
3230	Fetches the issue data .
3231	Fetches the attachments of an issue .
3232	Fetches messages from an issue .
3233	Fetch activities for an issue .
3234	Fetch user data .
3235	Get a user .
3236	Issue an issue .
3237	Retrieves a collection of bugs for a given issue
3238	Get url project .
3239	Fetches items from a path .
3240	Get groupsio subscriptions .
3241	Find the group id .
3242	Perform a GET request .
3243	Creates the command line parser .
3244	Generates a UUID for the given arguments .
3245	Fetches a backend .
3246	Fetches all files from the archive .
3247	Load the backends for the given package .
3248	Fetches items from the category .
3249	Fetches the items from the archive .
3250	Filter the classified data for an item .
3251	Entry point for parsing .
3252	Sets authentication arguments .
3253	Sets the archive arguments .
3254	Sets output arguments .
3255	Fetches the items from the command line .
3256	Initialize archive manager .
3257	Returns the timestamp of the updated date .
3258	Reads a file into a list of messages .
3259	Fetches all messages from the given date from the given date .
3260	Copies the given mbox to a temp folder .
3261	Validates the message .
3262	Converts a case dictionary to a JSON object .
3263	Reads a message from the file .
3264	Fetches the items for the commit .
3265	Fetches the items from the repository .
3266	Read git log from file .
3267	Initializes git path .
3268	Creates the backend command parser .
3269	Runs the handler on the stream .
3270	Clones a repository .
3271	Counts the number of objects in the repository .
3272	Checks if the branch is detached .
3273	Update repository .
3274	Fetch all commits from the repository .
3275	Gets the revision - list .
3276	Get the git log .
3277	Shows the repository .
3278	Fetches the pack .
3279	Reads commits from a pack file .
3280	Updates references .
3281	Discovers all references in the repository .
3282	Update a git ref .
3283	Executes git command .
3284	Read stderr from stderr .
3285	Execute git command
3286	Fetches the items of the specified category .
3287	Fetches all items in the category .
3288	Fetches a list of tweets .
3289	Build the backend command parser .
3290	Fetches items from this table .
3291	Fetch items from the query .
3292	Parse hits from query string .
3293	Fetches the query for the given keywords .
3294	Get the updated date of an item .
3295	Returns the category for the given item .
3296	Fetches pull requests from a specific date .
3297	Fetches the repository info .
3298	Get reactions for an issue .
3299	Get reactions for a comment .
3300	get issue assignees
3301	get the requested reviewers
3302	Get the list of pull commits for a given pr number
3303	Get reactions for a given comment
3304	Get user
3305	Fetches reactions for an issue .
3306	Fetches all issues .
3307	Get pulls from the repository .
3308	Fetches the repository .
3309	Fetches the requested reviewers
3310	Fetches all commits from a PR .
3311	Get all reactions for a given comment .
3312	Fetches a user .
3313	Get the orgs of the given user .
3314	Retrieves the number of available rate limit for a given token .
3315	Get the rate limits for the token .
3316	Choose the best API token .
3317	Check if tokens have been checked .
3318	Updates the current rate limit .
3319	Updates the archive metadata .
3320	Archive an entry .
3321	Retrieves an archive entry from the archive .
3322	Creates an archive .
3323	Calculate the hashcode for the given uri and payload
3324	Verifies that the archive exists .
3325	Load the archive metadata .
3326	Returns the number of rows in the archive .
3327	Creates a new archive .
3328	Remove an archive from the filesystem .
3329	Returns a list of archives sorted by category name
3330	Search for files in the given origin and category
3331	Search for files in the directory .
3332	Get the file type of a file .
3333	Returns a range of months from the given date range .
3334	Parses the email message .
3335	Removes invalid XML characters from raw XML .
3336	Convert raw XML to a json object
3337	Extracts issues from raw json .
3338	Returns all open issues .
3339	Get information about an issue .
3340	Get a user
3341	Call a resource .
3342	Fetches the items for the given category .
3343	Fetch items from repository .
3344	Fetch data from docker hub .
3345	Build a custom field from custom fields .
3346	Get custom fields
3347	Read issues from a page .
3348	Fetches issues .
3349	Get all issues that have been added to the repository .
3350	Get the comments for an issue .
3351	Get the field names .
3352	Fetches the items of this build .
3353	Get the number of jobs
3354	Fetches a build .
3355	Get questions from raw page .
3356	Get questions .
3357	Creates the command line parser .
3358	Fetches the reviews of a category .
3359	Get the maximum date for all reviews .
3360	Fetch the number of pages from the reviews API .
3361	get all pages
3362	List recent changes .
3363	Fetches messages for the given category .
3364	Get messages from raw json
3365	Filter a message by chats .
3366	Executes the update .
3367	Fetch items of this category .
3368	Method to get metadata .
3369	Parses the raw article .
3370	Fetches the data from the remote URL .
3371	Fetches an article .
3372	Fetch data from remote
3373	Fetch data from archive
3374	Create http request session .
3375	Handle rate limit handler .
3376	Sleep for rate limit .
3377	Reads the rate limit from the response .
3378	Parse the supybot log file .
3379	Retrieves the archives that were stored before the given date .
3380	List supy bots .
3381	Parses the content from the stream .
3382	Parses the given line and returns the timestamp .
3383	Parse the supy bot message .
3384	Fetches the items of the category .
3385	Parses the topics page and returns the pinned information .
3386	Get topic .
3387	Get a post .
3388	Fetches the items of the category .
3389	Reads a list of tasks from a raw JSON string .
3390	Get users from raw json
3391	Finds all tasks that have been modified .
3392	Find all transactions for a given phids .
3393	Get users users
3394	Get phids from a list of phids
3395	Perform a call to the Conduit client
3396	Generate a unique id for an item
3397	Extracts the contents of the raw json .
3398	Executes the Msearch query .
3399	Retrieve a historical content .
3400	Parse the result .
3401	Returns the URL of the service .
3402	Get XML document from URL
3403	Parse a string from a string .
3404	Parse the WML2 query result .
3405	Build the URL .
3406	Get the elements of a complex type
3407	Construct the schema .
3408	Get the describe feature type URL
3409	Performs complex input .
3410	Get the movie list
3411	Retrieves a list of tv_list values .
3412	Retrieves a list of movies .
3413	Get information about a resource .
3414	Gets alternative titles .
3415	Gets the credits .
3416	Gets external ids .
3417	Gets the keywords .
3418	Retrieve recommendations .
3419	Retrieves the release dates for the release .
3420	Retrieves information about the release .
3421	Retrieves a list of translations for this entity .
3422	Retrieves a list of similar movies .
3423	Retrieves a list of reviews .
3424	Retrieves information about a change .
3425	Retrieves upcoming requests for the current user .
3426	Requests that the playback is playing .
3427	Retrieves a list of popular values .
3428	Returns the top - rated page of the user .
3429	Retrieves the state of the account .
3430	Updates the rating .
3431	Gets the movie credits .
3432	Retrieves the TV credits .
3433	Retrieves information about the credit id .
3434	Sends a GET request to the TV movie .
3435	Makes a GET request .
3436	Gets the movie list .
3437	Retrieves information about this session .
3438	Retrieves a list of movies for the watchlist .
3439	Gets a new token .
3440	Validates the token with the given login token .
3441	Gets a new session .
3442	Creates a new guest session .
3443	Retrieves the rated movies for the guest session .
3444	Retrieves the status of the item .
3445	Creates a list of sessions .
3446	Removes an item from the media list .
3447	Clears the session .
3448	Gets the ratings for the content .
3449	Gets the similarity of the similarity query .
3450	Fetches the on - air .
3451	Retrieves information about a season .
3452	Retrieves the credits for the season .
3453	Get external ids .
3454	Get information about the episode number .
3455	Gets the credits for the season .
3456	Get external ids .
3457	Sets attributes from response to values .
3458	Retrieves a movie from the movie .
3459	Executes a GET request .
3460	Retrieves the TV TV TV TV data .
3461	Performs a GET request .
3462	Retrieves information about the company .
3463	Executes a GET request .
3464	Performs a GET request .
3465	Returns the language - dependent part .
3466	Counts the number of ngrams in the given refs .
3467	Returns a set of ngrams for the given ref .
3468	Returns the FCC value of the given value .
3469	Align the texts of the given source blocks .
3470	Returns all descriptors in the given module .
3471	Registers the given JSON object as a descriptor .
3472	Register a version descriptor .
3473	Prints a string to the console .
3474	Returns true if the given descriptor is a descriptor class .
3475	Returns the JSON representation of this object .
3476	Get the coordinate of this descriptor .
3477	Get the radius of a sphere .
3478	Returns the area of this symbol .
3479	Creates a new instance from a given molecule .
3480	Deserialize a descriptor from a JSON object .
3481	Returns a new instance with missing values .
3482	Returns a new instance with all missing values .
3483	Get all the values in this map .
3484	Get a map of all items as a string .
3485	Get the value of the property .
3486	Wrap the given function .
3487	Returns a new thread - safe lock
3488	Show the progress message .
3489	Prints a message to stdout .
3490	Prints an error message .
3491	Generate a temporary file
3492	Rename a tempfile .
3493	Remove temp files .
3494	Returns a fixed path .
3495	Returns the legal params for a method .
3496	Merge the parameters of the opt option .
3497	Adds options to the parser .
3498	Wait for the queue to finish .
3499	Register a new task .
3500	Wait for all tasks to terminate .
3501	Adds the progress to the progress bar .
3502	Read S3 access key from environment .
3503	Read S3 keys from command line .
3504	Read the access key from the config file .
3505	Load S3 keys from the command line arguments .
3506	Connects to S3 .
3507	List all buckets in S3 .
3508	Walks the given basedir and returns the result .
3509	Walk the given basedir and return the result .
3510	Expand the source .
3511	Upload a single file .
3512	Copies files from source to target .
3513	Create a bucket .
3514	Set privilege permission .
3515	Download files from S3 .
3516	Download single file .
3517	Get a file from S3 .
3518	Copy a single file .
3519	Copy files from source to target .
3520	Delete files from a source .
3521	Walks a directory .
3522	Sync files to target directory .
3523	Returns the MD5 hash of the given file .
3524	Get the MD5 hash of the file .
3525	Creates the directory if necessary .
3526	Check if the remote key matches the remote key
3527	Check if path matches path
3528	S3 walks a list of objects .
3529	Add object to result .
3530	Retrieves the privilege of a source file
3531	Get object from s3 url .
3532	Read a file at the given position .
3533	Uploads a source file .
3534	Verifies that the downloaded file size is consistent .
3535	Writes a chunk to a file .
3536	Copy source file to target .
3537	Handle command .
3538	Check if format is valid
3539	Print the contents of the object list .
3540	List buckets .
3541	Creates a new bucket .
3542	S3 handler .
3543	S3 handler .
3544	S3 handler .
3545	Dsync files .
3546	S3 handler
3547	S3 handler
3548	S3 handler .
3549	Handler handler .
3550	Handler for totalsize
3551	Extracts a date from a value .
3552	Extracts the time from a value .
3553	Get delta delta .
3554	Parses the value of an option .
3555	Load gateways .
3556	Starts the multicast socket .
3557	Read from hub .
3558	Handles the callback callback .
3559	Gets the key of the token .
3560	Reports an exception to the rollbar .
3561	Register a hook for this request .
3562	Ensure log handler exists .
3563	Get a request object from the stack .
3564	Configures the rollbar .
3565	Wraps the given function .
3566	Reports a message to Rollbar .
3567	Get items by title
3568	Create an agent log .
3569	Build person data .
3570	Adds the Lambda context data to the map .
3571	Add request data .
3572	Checks to see if the frame has been included in the current context .
3573	Build request data .
3574	Build server data .
3575	Build the payload .
3576	Starts the rollbar .
3577	Returns the Hangul character index .
3578	Returns the hangul letter
3579	Checks if the given letter is a jongsung .
3580	Returns the word in the word
3581	Check if a node is inside an ExceptHandler
3582	Check if the node is inside lambda
3583	get all elements from a node
3584	check if a node is in the outer scope
3585	Returns true if the node is a super .
3586	Checks if the given node is an error .
3587	looks for a default argument
3588	Check if a node is a function decorator
3589	Returns true if the given node is an ancestor of the given node
3590	Get the parent of the given node
3591	Stores the given messages in the given function .
3592	Returns the field names of the given format string .
3593	Get argument from a call
3594	Checks if a node is a standard exception .
3595	Check if the handler is of the expected type
3596	Returns true if the given node is a property of a function .
3597	Returns true if the given function is a qualified name .
3598	If the given node is a TryExceptHandler return it .
3599	Returns true if this node is a fallback block
3600	Find the exception handlers for a given node
3601	Checks if the given node has an exception handler .
3602	Check if a class definition is abstract
3603	Get the value of the given node .
3604	Get the type of an assign node .
3605	Checks if the given node is registered in ssingledispatch
3606	Check if a node is postponed evaluation .
3607	Returns the fully qualified names of the given module .
3608	get the name of an import
3609	Pretty prints a tree definition .
3610	Adds the graph to the graph .
3611	Check import .
3612	Check that a node is imported .
3613	Checks the position of an import instruction .
3614	Record an import
3615	Check the order of imports .
3616	Check if a module is a relative import .
3617	Add an imported module .
3618	Check for deprecated modules .
3619	Checks that the given module is preferred .
3620	Report external dependencies .
3621	Filters the dependencies from the dependency graph .
3622	Get the default options .
3623	Add default options .
3624	Check if a node is visible .
3625	Get the callback for a visitor node .
3626	Visit a node .
3627	Check that the checker part is consistent .
3628	Check for a call .
3629	Check if the node is a datetime .
3630	Check the mode argument
3631	Add a message .
3632	Prints all messages in JSON format .
3633	Returns the title of a node .
3634	Sets the default options .
3635	Checks if the node is a BUIINS node .
3636	Generate class diagram .
3637	Returns the ancestors of the given node .
3638	Iterates over the nodes of a class
3639	Extract classes from a class diagram .
3640	Build project diagram .
3641	Add import from import diagram .
3642	Generate class diagram .
3643	Reads the dia definition of the class .
3644	Determines if the owner is ignored .
3645	Returns a list of names that are similar to the given owner .
3646	Emits a member of the given owner .
3647	Checks if the given node has the parent of the given statement .
3648	Returns true if the given name is used as variadic .
3649	Returns true if the node has a variadic name in the context
3650	Check for missing attribute names .
3651	This method is called when an assignment is found .
3652	Check if the call is uninferable .
3653	Processes a unary operand node .
3654	Implements interface .
3655	build an AST from a file
3656	Visits the node of a package .
3657	Sets the local name of a function .
3658	Assigns a name to a node in the frame .
3659	Assigns the type of an attribute .
3660	Imports a module .
3661	Imports a module from the given node .
3662	Checks if a module is a standard module .
3663	Finds an imported module .
3664	Generate ANSI code .
3665	Converts the given text to ANSI .
3666	Register reporter for the given Linter .
3667	Write a message .
3668	Displays the given layout .
3669	Print a message
3670	Write the graph .
3671	Write node .
3672	Write edge attributes .
3673	Check that a new format method has been assigned .
3674	Process a non - raw string token .
3675	Add a section .
3676	Start evaluation section .
3677	Prints a table
3678	Write table content .
3679	Registers a new alternative name .
3680	Reads messages from a checker .
3681	Registers a message .
3682	Checks that the given symbol has the given symbol .
3683	Throws an exception if the given symbol is duplicate .
3684	Throws an exception if the message id is duplicate .
3685	Gets the message definitions for a given message id or symbol .
3686	Get display string for given message id .
3687	Prints help information about a message .
3688	Prints messages .
3689	Called when the application has been loaded .
3690	Returns the number of threads in this process .
3691	Adds the messages stats to the section .
3692	Import the command line arguments .
3693	Registers plugin modules .
3694	Load plugin configuration
3695	Sets an option .
3696	Register a checker .
3697	Disables reporters .
3698	Enables the porting mode .
3699	Returns the list of checkers for this check .
3700	Returns the name of the checker .
3701	Returns needed checkers .
3702	Processes the given modules and adds them to the list of files .
3703	Set the current module .
3704	Runs an AST node on the given AST node .
3705	Report the evaluation .
3706	Prints the help message .
3707	Prints the full documentation .
3708	List messages .
3709	List checker groups .
3710	Wrap the given text .
3711	Returns the module name and frame id of the given node .
3712	Decodes a line .
3713	Checks if the base name is in the blacklist list .
3714	Register plugins in a directory .
3715	Convert a string to a comment .
3716	Format option value .
3717	Prints an ini section .
3718	Format options .
3719	Inserts a child at the specified index .
3720	Append a child to this VNode .
3721	Returns the parent of this node .
3722	Writes the output to the specified layout .
3723	Computes the content of a table
3724	Apply content to the output stream .
3725	Collects the lines of a module .
3726	Records an ignored message .
3727	Adds a report to the report .
3728	Returns the section of the report
3729	Add stats to the cache
3730	Returns the name of the setter property on the given node .
3731	Returns the property associated with the given node .
3732	Checks if the return node is a constant .
3733	Infer the exception types of the node .
3734	Add message emission .
3735	Reads the given module .
3736	Processes the given tokens .
3737	looks to see if the name is a futures import
3738	Returns true if the statement is a statement of the statement
3739	Find a method definition .
3740	Returns the extra extra info for the given node .
3741	Detects the global scope .
3742	Returns true if the given name node is assigned to this node .
3743	Marks a node as consumed .
3744	This method is called when a global is assigned to a module .
3745	Detect if the given node is in a class scope .
3746	Returns true if there is a homonym node in the upper function scope .
3747	Check the unpacking of the given node .
3748	Check class definition .
3749	Finds all the packages in the given directory .
3750	Run the setup tool .
3751	Installs all included directories
3752	Adds similar similarityities .
3753	Main entry point .
3754	Decodes a stream .
3755	Compute the Sims from the ensemble .
3756	Displays a list of sims .
3757	Finds common common lines .
3758	Iterates over all the sims in the lineset .
3759	Returns the index of the content of the line .
3760	Create a new index based on the stripped line number .
3761	Returns true if the definition is equivalent to the given call .
3762	Checks if two arguments are equal .
3763	Returns true if the original parameter has a different default value
3764	Determines if the original parameters are different .
3765	Infers a call result from the caller .
3766	Adds a node to the scope .
3767	Check a class definition .
3768	Check that the given node is consistent .
3769	Check if the base is a base class
3770	Check a function definition .
3771	Check if the given function is a super call .
3772	Process a function definition .
3773	Check if a class is in slots .
3774	Check if the node is a method name .
3775	Check that all members of this node are accessed .
3776	Check that the base class is abstract .
3777	Check method signature .
3778	Check if the node is mandatory method param .
3779	Returns true if the node is raising .
3780	Check for bad exception context
3781	looks for a function definition
3782	Displays the report .
3783	Determine if the class is a typed tuple .
3784	Returns true if this is an enum class .
3785	Check if the node is a data class
3786	Initialize the stats .
3787	Check if a class definition is too large .
3788	Check that a class definition contains more public methods .
3789	Counts the number of statements .
3790	Check if the given node is too many boolean expressions .
3791	Checks the spelling of the given node .
3792	Converts this object into a template .
3793	Returns true if the given index is trailing comma .
3794	Returns true if node is actual if .
3795	Check if if statement can be simplified .
3796	Check if stop iteration is inside a generator .
3797	Check if an exception inherits from stop iteration .
3798	Check if there is a stop iteration in a generator .
3799	Check the stack of nested blocks
3800	Return a map of type types that are not duplicated .
3801	Checks if the node is the type of the type .
3802	for chained comparison
3803	Tells whether or is an AND or or or or t
3804	Checks if the given node is consistent with the given node .
3805	Check if a node is a return statement .
3806	Verify that an object is iterated .
3807	Checks if Graphviz is available .
3808	Main entry point .
3809	Generate the package dependencies .
3810	Generate classes .
3811	Setup the printer .
3812	Create a VCGPrinter .
3813	Checks if the version is emitted .
3814	Generate a help message .
3815	Get the environment environment
3816	Run the Epylint command .
3817	Execute the given command options .
3818	Get the cycles in the graph .
3819	Emit the source code .
3820	Writes the graph .
3821	Prints the rest options .
3822	Registers a message with the given message id .
3823	Register a message .
3824	Register a message .
3825	Returns the symbol of a given message .
3826	Check if a message is enabled .
3827	Add one message with the given description .
3828	Prints full documentation .
3829	Print documentation for a given checker .
3830	Returns the indentation length of a line .
3831	Returns a line of indentation for the given indentation .
3832	Returns the indentation of the given index .
3833	Sets the line start position .
3834	Returns the indent strings for a given index .
3835	Returns a new indent for a given bracket .
3836	Returns a continuation for a given bracket .
3837	Append a token .
3838	Check if the last token exists .
3839	Checks to see if the next token is a paren .
3840	Checks if the token has a valid type annotation .
3841	Checks that equals spacing .
3842	Check if the token surrounded by a space .
3843	Check if a node is a default block .
3844	Check a single - statement line line .
3845	Check the options .
3846	Checks the indentation level of the string .
3847	Returns true if the node is in an iterator .
3848	Check if the node is a conditional import
3849	Looks for the name of a node and adds it to it
3850	This method is called when an index script is found .
3851	Process an attribute
3852	looks for an ExceptHandler
3853	Check if an exception is thrown .
3854	Returns the path to which the file is defined .
3855	Validate the given value
3856	Expand the option .
3857	Checks if the given option matches the option .
3858	add option provider
3859	Set a provider option .
3860	Sets an option .
3861	Prints the options of the provider .
3862	Parses the configuration file .
3863	Parse command line configuration .
3864	Adds a help section .
3865	Format command line output .
3866	Sets the default options .
3867	Returns the name of an option .
3868	Returns the option definition for the given option .
3869	Get the options for this option .
3870	Return true if the given method is a bound method .
3871	Determines whether the given node is a complex format string .
3872	Initializes the logging module .
3873	Adds logging imports to the logger .
3874	Looks for logging .
3875	looks for logging method
3876	Checks if the given format string is valid .
3877	looks for a loop
3878	Get the parent of the break loop node .
3879	looks to see if the loop exits early
3880	Get the property class names from the configuration .
3881	Determines the name type of the function .
3882	Report stats for a specific type .
3883	Check if the given node is defined by a decorator
3884	Returns true if the call is a one argument .
3885	Check if the node is a starred assignment .
3886	Check the nonlocal and global and global variables
3887	Check that a call is abstract
3888	Checks if an else is on loop .
3889	check in loop
3890	Start the linter .
3891	Check if the node is a string or a string .
3892	If the given lambda node is a lambda expression return it .
3893	Add an assert on a tuple
3894	add duplicate keys
3895	Checks the unreachable statement .
3896	Check if the node is not in the finally block .
3897	Check that the node is reversed .
3898	Check the name of an assignment .
3899	Check if a node is a valid name
3900	Checks if the given node is a docstring .
3901	Check if literal is equal
3902	Adds a new path graph to the path graph .
3903	Parse a subgraph .
3904	Visits the module .
3905	Add a checker .
3906	Recursively walks an AST node .
3907	Adds a relationship .
3908	Gets a relationship from a given object .
3909	Get the attributes of a node
3910	Returns a sorted list of methods that are defined by this node
3911	Adds an object to the diagram .
3912	Return the name of the class
3913	list of classes
3914	Get class by name .
3915	returns a list of objects
3916	Get the module with the given name .
3917	Get a module by name .
3918	Adds a dependency from a given module to this module .
3919	Deletes a grant .
3920	Gets the query .
3921	Get a user by username and password .
3922	Returns the first matching access token .
3923	Deletes a token .
3924	Adds a grant to the user .
3925	Returns the first matching client id .
3926	Perform a request .
3927	Sets the state of this application .
3928	Creates a remote app .
3929	Perform an OAuth request .
3930	Generate OAuth2 token .
3931	Get the OAuth1 response .
3932	Prepare OAuth2 response .
3933	Handle the response .
3934	This method is called when an authorized response is received .
3935	Hashes a token .
3936	Creates a client with the given token .
3937	Create an OAuth client from the given token .
3938	Set the insecure transport .
3939	Perform authorization request .
3940	Returns a new request token handler .
3941	Get client secret .
3942	Get the secret of the request token .
3943	Get the access token secret .
3944	Get the default realms for a client .
3945	Get realms of a token .
3946	Get redirect uri .
3947	Get RSA key .
3948	Validate client key .
3949	Validate request token .
3950	Validates an access token .
3951	Validate timestamp and nonce .
3952	Check if redirect_uri is valid
3953	Validate the realms .
3954	Validate verifier .
3955	Verify request token .
3956	Verify realms .
3957	Sets the access token .
3958	Store request token .
3959	Store a verifier .
3960	Returns the error uri .
3961	Handles authorization request .
3962	Verify a request .
3963	Gets the client_id from the request .
3964	Check if the request is required for authentication .
3965	Authenticate client .
3966	Authenticate client id .
3967	Gets the original scopes of the token .
3968	Checks if the given scopes are valid .
3969	Returns the default redirect uri .
3970	Returns the default scopes for a client .
3971	Destroy a grant token .
3972	Persist authorization code .
3973	Save bearer token .
3974	Validatearer token .
3975	Validate client id .
3976	Validate code .
3977	Check if the grant type is allowed .
3978	Updates the refresh token .
3979	Checks if the given response type is allowed .
3980	Check if the scopes are valid .
3981	Validate user .
3982	Handles access token .
3983	Get default data from QQ token
3984	Convert keys to string
3985	Adds the authorization header to the user .
3986	Creates a remote app with the given name .
3987	Creates a remote app .
3988	Extracts the parameters from the request .
3989	Encodes the given text using the specified encoding .
3990	Converts the given text to a unicode string .
3991	Creates a new response with the given headers .
3992	Get cached clients .
3993	Add a remote app .
3994	Creates a remote application .
3995	Try to find an exception .
3996	Generate a new certificate .
3997	Load private key .
3998	Load private key callback .
3999	Load private key callback .
4000	Gets revoked certificates .
4001	Copies all revoked revoked certificates .
4002	Create a certificate request .
4003	Create a certificate for a request .
4004	Returns a decorator that requires a given flag
4005	Load verify locations .
4006	Set password password callback .
4007	Use a certificate chain file .
4008	Use certificate file to use .
4009	Set the certificate to use .
4010	Add an extra chain certificate .
4011	Open a private key file .
4012	Sets the private key .
4013	Sets the client CA list .
4014	Set verify depth .
4015	Set temporary DH data .
4016	Sets the cipher list .
4017	Sets the list of client CA CA names .
4018	Adds a client CA .
4019	Sets the callback for the tsext name .
4020	Set the SRTP profiles for this context .
4021	Set the callback for the NPN select .
4022	Set alpn protocols .
4023	Set the callback for an alpn select .
4024	Set the OCSP callback .
4025	Set OCSP server callback .
4026	Set OCSP client callback .
4027	Set the context .
4028	Get the server name .
4029	Set the host name for this SSL SSL SSL .
4030	Reads a buffer from the socket .
4031	Reads a buffer into the buffer .
4032	Read data from the socket .
4033	Renegotiate the SSL connection .
4034	Shuts down the server .
4035	Returns a list of ciphers .
4036	Get the list of client CA names .
4037	Shutdown the SSL .
4038	Get a random number from the server .
4039	Get a random number from the client .
4040	Get the master key .
4041	Export a keying material .
4042	Get the session .
4043	Returns the cipher name .
4044	Returns the bits of the current cipher .
4045	Returns the current cipher version .
4046	Get the protocol version name .
4047	Gets the next protocol negotiation .
4048	Set the list of protocol protocols .
4049	Obtains the protocol supported by this SSL protocol .
4050	New memory buffer .
4051	Convert a BIO to a string .
4052	Set an ASN1 time value .
4053	Returns the ASN1_TIME for the given timestamp .
4054	Get the elliptic curve with the given name .
4055	Writes a public key as a string .
4056	Returns a public key .
4057	Sign key with digest .
4058	Verifies a signature .
4059	Writes a CRL .
4060	Convert key to key .
4061	Assigns a key to the RSA key .
4062	Check if the key is public key .
4063	Load elliptic curves .
4064	Load elliptic curves .
4065	Converts this curve to an EC key .
4066	Get the certificate name .
4067	Get the components of this certificate .
4068	Returns the short name of the extension .
4069	Get the extension data .
4070	Builds a certificate request for the certificate .
4071	Sets the public key .
4072	Get the public key .
4073	Returns the subject name of the request .
4074	Adds extensions to the request .
4075	Get the extensions of the request .
4076	Verify that the certificate is valid .
4077	Create a certificate from the certificate .
4078	Set version .
4079	Get the public key .
4080	Sets the public key for this certificate .
4081	Sign a key .
4082	Get signature algorithm name .
4083	Computes the digest for the given digest name .
4084	Retrieves the serial number for this certificate .
4085	Get the serial number for this certificate .
4086	Adjusts the timestamp at the given amount .
4087	Adjusts the mtime before the given amount .
4088	Returns true if the date is expired .
4089	Get the issuer name .
4090	Set the issuer name .
4091	Get the subject name .
4092	Set the subject name .
4093	Add extensions .
4094	Get the extension at the given index .
4095	Adds a certificate to the store .
4096	Adds a CRL to the store .
4097	Verify the vy time .
4098	Initializes the store context .
4099	Returns an exception from the context .
4100	Verify certificate .
4101	Returns the serial number for this certificate .
4102	Returns the serial number for this certificate .
4103	Delete CRL reason .
4104	Returns the reason of the CRL .
4105	Set the revocation date .
4106	Gets the certificate revocation list .
4107	Returns a list of revoked certificates .
4108	Get the issuer name .
4109	Sign the CRL .
4110	Create a CRL .
4111	Returns the type name of the object .
4112	Set cac certificates .
4113	Perform a Cacert .
4114	Sign key digest .
4115	Verify a key .
4116	Returns the base64 encoded string .
4117	Get the public key .
4118	Sets the pubkey key .
4119	Get an exception from the queue
4120	Converts the given object to bytes .
4121	Helper method for printing tokens .
4122	Get service metadata .
4123	Get the issue for the issue .
4124	Get annotations for a given card
4125	Returns a list of available boards .
4126	Open a board .
4127	Gets the card card list .
4128	Get comments for a card
4129	Returns the URL of the API .
4130	Get url by url
4131	Convert a link field to a map .
4132	Get issues by query
4133	Get requests for a given tag .
4134	Aggregates issues in the configuration .
4135	Returns a configuration value or the default if not found .
4136	Get the template for this task .
4137	Check that the service configuration has been set .
4138	Checks if an issue is assigned .
4139	Convert a grid to a table
4140	Evaluates a password .
4141	Gets an integer value .
4142	Synchronize the Bugwarrior database .
4143	Get data from URL .
4144	Get all values from a collection
4145	Find the local task uuid .
4146	Adds a remote issue to the local issue .
4147	Override this to override the unit class overrides
4148	Parse a sprint string .
4149	Get the OAuth2 credentials .
4150	Evaluates the rouge scores for the given sequences .
4151	Get the pvals for the given gene set
4152	Returns true if the pvals are less than the given alpha
4153	Score the data in each axis
4154	Apply the z score to the plot .
4155	Draws spines on the axis .
4156	Create the argument parser .
4157	Add pre ranking tool .
4158	Creates a sub - plot .
4159	Creates a sub - parser for the Gor API .
4160	Compute enrichment score
4161	Returns a tensor for theing metric
4162	Calculate theing metric
4163	Compute the pval for a sea
4164	Compute the significance .
4165	Returns a series of mart names .
4166	Read datasets from a CSV file .
4167	Get the attributes of a dataset
4168	Get the filters
4169	Queries the Biomart .
4170	Generate GSEA .
4171	SSEA function .
4172	Generate a pre - rank score .
4173	Run the Replot .
4174	Sets the cores of the process .
4175	Filters the gene_sets .
4176	Returns the list of libraries that have been set .
4177	Download enrichr library
4178	Generate heatmat .
4179	Save results in the results .
4180	Read gene expression data .
4181	Parse GSEA .
4182	Main entry point .
4183	Computes the results for a single sample
4184	Performs the Ssgsea for a sample
4185	Save raw ES
4186	Parse GSEA .
4187	Performs enrichr on the gene list .
4188	get gene sets file
4189	Get genes from the gene list
4190	Analyzes a list of genes .
4191	Read genes from the user list
4192	Get the background
4193	Execute the Enrichr API
4194	Scale a filter script
4195	Adds a sphere filter script
4196	Generates the Torus filter .
4197	Computes the edges of the graph .
4198	Generate hires .
4199	Get the color values for the color .
4200	Creates a list of terms .
4201	Returns a list of variables .
4202	Adds a filter to the script
4203	Generates a L3 loop script .
4204	Write vertices .
4205	Generates a filter for holes
4206	Creates a filter for vertices in the non manifold .
4207	Generates a filter for mismatched borders
4208	Executes the script with the given value .
4209	Adds a function to the script .
4210	Executes the script for vertically rendering .
4211	This function is used to evaluate the formula
4212	Executes the script for a cylinder .
4213	Bend script
4214	Converts a curve to a curve .
4215	Generates a script with a texture .
4216	Writes the color to faces
4217	Evaluates a uniform mesh
4218	Scans a poisson surface .
4219	Voronoi function .
4220	Adds a filter to the script
4221	Writes a filter to the source .
4222	Write boolean function
4223	Write boolean function .
4224	Evaluates the vertical vertical script .
4225	Calculates the vert function with the specified radius and radius .
4226	Executes the script .
4227	Rename a filter script .
4228	Change the current layer
4229	Writes a filter to the script .
4230	Remove a layer from the script .
4231	Prints an error .
4232	Filter script .
4233	Adds a new layer .
4234	Remove a layer from the stack .
4235	Save this script to a file .
4236	Executes the script .
4237	Calculate the star .
4238	Generates a filter for a Husdorf distance .
4239	Generates a poisson script
4240	Generates a filter element
4241	Generates a clustered vertex script .
4242	Generates the parametrization script
4243	Generates the filter script
4244	Generates a Voronoi script for the specified region .
4245	Parses the topology
4246	Returns the topology of the manifold .
4247	Read husdorff .
4248	Generates a PSV script
4249	Generates the Voronoi filter script
4250	Generates a Rrainbow script
4251	Returns the atan2 function .
4252	Cross - cross function .
4253	Multiply a vector by a scalar .
4254	Generates the filter script
4255	Generates the filter script
4256	Generates the filter script
4257	Generates a Tubin script
4258	Generates the depth smoothing script
4259	Sorts the bounding box of the specified file .
4260	Compute measure topology
4261	Run the compute script
4262	Evaluates a temp3D measure dimension .
4263	Returns the extension of the given filename .
4264	Patches the request class .
4265	Get the destination for the given uset .
4266	Register uploads .
4267	Gets the configuration for the upload set .
4268	Returns the URL for the uploaded file .
4269	Returns the file name of the folder
4270	Check if the given extension is allowed .
4271	Finds a conflict with a new name .
4272	Get the version information from the vprof file .
4273	Removes duplicate duplicates .
4274	Gets the difference between two objects .
4275	Formats the count of objects in a list .
4276	Trace memory usage .
4277	Get the resulting events .
4278	Count overhead of this module .
4279	Get memory overhead .
4280	This method is used to start profiling of the run object .
4281	Execute the module .
4282	Run the function and compute the memory overhead .
4283	Get information about the profiling profile .
4284	Returns all the module names in the given package .
4285	Runs a function in a separate process .
4286	get run object type
4287	Loads the module from the run object .
4288	Extract the package name from the run object .
4289	Sets the profile function .
4290	Replace the command line arguments .
4291	Processes the profiler .
4292	Add stack to the call tree .
4293	Fills the sample count .
4294	Format tree .
4295	Build the tree for the call .
4296	Get the profile package for this run object .
4297	Load the profile module .
4298	Run the function .
4299	Transform profiling information from profiling .
4300	Get the profile package .
4301	Get the profile module
4302	Run the object
4303	Updates the database .
4304	Render the guestbook .
4305	Insert an entry .
4306	Handle http request .
4307	Starts the HTTP server .
4308	Handle the root profile .
4309	Read other content .
4310	Handles the HTTP GET request .
4311	Post a POST request
4312	Sends a HTTP response .
4313	Returns true if the given module path is a standard directory .
4314	Record a line event .
4315	Iterates over the lines and returns the line that are not included in the standard library .
4316	Adds the execution count .
4317	Returns the lines of the source code .
4318	Builds the profile package .
4319	Format the heatmap .
4320	Get the profile module
4321	Run the object .
4322	Runs the profiling .
4323	Run the given function with the given options .
4324	Predicts the model of the given dataset .
4325	Returns the log proba for the given dataset .
4326	Fit the model .
4327	Counts all documents in the given vocabulary .
4328	Sorts the features in the vocabulary
4329	Removes features from the given vocabulary .
4330	Transform a dataset .
4331	Scans the vocabulary using the vocabulary .
4332	Scikit .
4333	Fit model .
4334	Predicts the prediction of a dataset .
4335	Fit the linear regression .
4336	Performs the pre - transform .
4337	Apply the transform to the model
4338	Computes the score of the step .
4339	Fit the estimator .
4340	Computes the score of the given estimator .
4341	Fit KMeans .
4342	Predicts the model of the given dataset .
4343	Predicts a SSGD classifier .
4344	Checks to see if the given RDD has the expected data type .
4345	Creates the vocabulary .
4346	Computes the statistics for each block .
4347	Perform SVD transformation .
4348	Transform a truncated SVD to a truncated SVD
4349	Convert an iterator to a block collection
4350	Blocks an iterator into a block of bytes .
4351	Create a RDD from a RDD
4352	Map this RDD to an arrayRDD
4353	Returns the shape of this sequence .
4354	Get the array as array .
4355	Apply a transformer function to the result .
4356	Sets the permission for the given permission .
4357	Checks if user permissions are writable .
4358	Check the configuration file .
4359	Validates the configuration file .
4360	Executes the given command with the given user .
4361	Executes a command .
4362	Executes ssh command on the ssh config .
4363	Update the configuration .
4364	Gets the headers .
4365	Get the default body .
4366	Returns the URL of the HomeAssistant .
4367	Get the URL for an IFTTT event .
4368	Get the body of a packet .
4369	Print a packet .
4370	Scan devices .
4371	Executes the device .
4372	Sends a confirmation message .
4373	Pushes a device .
4374	Execute a device
4375	Scan device .
4376	Convert a transaction to a transaction
4377	Returns the file of the ledger file .
4378	Run the install
4379	Returns the long description .
4380	Loads a precalculated text measurer from a text file .
4381	Load a precalculated text measurer .
4382	Render badge .
4383	Returns an iterable of supported characters in the TuFont .
4384	Attempts to encode the given characters .
4385	Returns a mapping of characters to length .
4386	Generate a JSON object .
4387	Solves a gaussian kernel
4388	Creates a Gaussian kernel .
4389	Convert image to gray scale
4390	Compares an image with a list of images .
4391	Returns the SSIM value of this image .
4392	Computes the SSIM value of the two images .
4393	This method is called when the animation is destroyed .
4394	Update code version .
4395	Get the status of the cluster .
4396	Print status information .
4397	Gets the node associated with the given connection .
4398	Tries to bind to the server .
4399	On incoming connection .
4400	Handle incoming message .
4401	Helper method to call the utility method .
4402	Checks if a node should connect to a TCP node .
4403	Tries to connect to the given node if necessary .
4404	On outgoing connection .
4405	On outgoing message received .
4406	On disconnected connection .
4407	Adds a new connection to the socket .
4408	Disconnects a node .
4409	Send a message to a given node .
4410	Disconnects all nodes .
4411	Adds an item to the queue .
4412	Inserts an item into the queue .
4413	Returns the next element in the queue .
4414	Acquires a lock .
4415	Check if lock is acquired .
4416	Release a lock .
4417	Wraps the given check function .
4418	Creates a view that is required by the client .
4419	Create a connection .
4420	Creates an Elasticsearch index .
4421	Adds a new index to the aggregate .
4422	Extracts the metadata from a report .
4423	Sends aggregate reports to Kafka .
4424	Reads XML from an XML file .
4425	Parse an aggregate report file .
4426	Convert a report to a CSV file
4427	Parses a report file
4428	Get the supported capabilities .
4429	Writes the results to the output directory .
4430	Writes results to a zip file .
4431	Sends a report to the mail .
4432	Saves aggregate reports to splunk .
4433	Persists the specified forensic report to splunk .
4434	Convert data to base64 .
4435	Downloads the base domain .
4436	Get a reverse DNS address .
4437	Converts a human - readable timestamp to a datetime .
4438	Download GeoLite 2 country database
4439	Get information about an IP address .
4440	Converts the given bytes to an Outlook message file .
4441	Converts a string to a list of strings .
4442	Parses a report file .
4443	Drain the subscriptions .
4444	Publishes a message to the connection .
4445	Sends a request to the connection .
4446	Publish a subject .
4447	Asynchronously subscribe .
4448	Unsubscribe from a connection .
4449	Sends a ping to the server .
4450	Select the next server .
4451	Process an error .
4452	Process an op error .
4453	Builds the connection command .
4454	Process a PP ping
4455	Process a message .
4456	Process the server information .
4457	Process the connect request .
4458	Sends a flusher .
4459	Read data from the socket .
4460	Performs activation .
4461	Decode image .
4462	Load features from an array .
4463	Load features from images
4464	Calculate the ppearson correlation value
4465	Computes the dot product of the feature images
4466	Select features based on feature_select .
4467	Find studies by regions .
4468	Get the order of the features in the dataset
4469	Classify a dataset using the specified region .
4470	Scans the classifier using the given classifier .
4471	Fit classifier .
4472	Set class weight .
4473	Apply a cross - validation method .
4474	Fit the dataset .
4475	Returns true if the specified regions are within the specified regions .
4476	Randomly shuffle the image data
4477	Returns the top words in the model .
4478	earson distance
4479	This method is used to search for a series of samples
4480	Load activations from a file .
4481	Creates the image table .
4482	Returns a list of studies matching the specified criteria .
4483	Adds features to the feature table .
4484	Get feature names .
4485	Get feature counts
4486	Load a dataset from a file .
4487	Serialize this feature to a sparse file
4488	Get the image data .
4489	Get the data for a feature .
4490	Get the names of the given feature
4491	Returns the ids of the specified features .
4492	Returns all features that match the given search .
4493	Gets the ids of the dataset by expression .
4494	Converts the data to a sparse sparse matrix .
4495	Wrap a function .
4496	Computes the foci of a matrix .
4497	Convert a foci to a matrix .
4498	Returns the foci with the given name .
4499	Mask the image .
4500	Get the mask for the image .
4501	Mask the image
4502	Convert a data to an image
4503	Set the logging level .
4504	Expand the address .
4505	Splits the given string into tokens .
4506	Parses an address .
4507	Returns a copy of the hash table with the given values .
4508	Convert a JSON object to an object .
4509	Get the price of a ticker
4510	Get a dataframe from the tickers
4511	Request bulk news .
4512	Perform a HTTP request .
4513	Get the Bearer information .
4514	Perform a request .
4515	Get the tracks for a Spotify .
4516	Get a Spotify .
4517	Get albums .
4518	Get the top tracks for a Spotify .
4519	Get related artists .
4520	Get the artists for the given Spotify ids .
4521	Retrieves information about a category .
4522	Retrieves the playlists for a given category .
4523	Retrieves a list of all categories .
4524	Retrieves a list of feature playlists .
4525	Returns a list of released releases .
4526	Returns the recommendations .
4527	Search for an artists or users or users .
4528	Gets albums .
4529	Gets all albums .
4530	Returns the total number of albums .
4531	Returns the related artists of this artist .
4532	Gets the current playback state .
4533	Gets the current player .
4534	Get available devices .
4535	Gets recently played tracks .
4536	Replace tracks of a playlist .
4537	Reorder tracks in a playlist .
4538	Create a playlist .
4539	Gets all playlists .
4540	Gets the tracks of the album .
4541	Gets all tracks in the album .
4542	Returns an OAuth2 URL .
4543	Gets an album .
4544	Get an artist .
4545	Get a track .
4546	Get a user .
4547	Gets albums .
4548	Gets a list of artists with the specified ids .
4549	Search for tracks .
4550	Returns the id of a URI .
4551	Returns a decorator that matches the given attribute .
4552	Returns a new instance of the given client .
4553	Returns the OAuth2 URL .
4554	Returns a JSON representation of this request .
4555	Returns the query string .
4556	Build a list of tracks .
4557	Gets all tracks in the playlist .
4558	Resume playback .
4559	Transfer a device to a device .
4560	Retrieve an object from the Spotify object .
4561	Get the status of the element .
4562	Convert month name to short format .
4563	Update the code urls in the current directory .
4564	Check current version .
4565	Returns whether or not the current branch is not running .
4566	Returns true if the current version should be deprecation .
4567	Initializes the data to backup .
4568	This method initialises the backup content .
4569	Determines if the line is ignored .
4570	Handle the options .
4571	Extract base from a list .
4572	Format the decoded data .
4573	Get the HTTP status code .
4574	Get the http status code .
4575	Checks the given domain .
4576	Checks if the given domain is a subdomain .
4577	Checks the given IP address .
4578	Checks if the given IP address is an IPv4 range .
4579	Checks if the given URL is valid .
4580	Load the configuration .
4581	Print random information .
4582	Downloads the content of the URL .
4583	Do the entry management url download .
4584	Print the header .
4585	Handle a file decision .
4586	Runs the file decision logic .
4587	Run the file decision logic .
4588	Print the logo .
4589	Formats the domain string .
4590	Extracts the domain from the file .
4591	This method validates the list of files .
4592	Returns the URL of the file .
4593	Returns true if the current state of the given variable is true otherwise false .
4594	Get the expiration date .
4595	Generate the status file .
4596	Gets the structure instance .
4597	Create a directory .
4598	This method is called when the parent is uneeded .
4599	Sets the path to the config file .
4600	Load the configuration file .
4601	Installs the production configuration .
4602	Installs the IANA configuration file .
4603	Installs the PSL configuration file .
4604	Install directory structure file .
4605	Merge values from the upstream configuration .
4606	Load the upstream configuration .
4607	Extracts the version from the parsed version .
4608	Get the status of the local version .
4609	Checks if the current version is cloned .
4610	Handle non - existant index .
4611	Compute the path to the analyzed file directory .
4612	Generate the unified file path .
4613	Test a file .
4614	Do not produce a file .
4615	Retrieves the extensions for a given line .
4616	Loads the public database .
4617	Returns the formatted string for the given element .
4618	Process an element .
4619	Update the global database content .
4620	Get the referer header .
4621	Extracts the extension from the URL .
4622	Update the databae database .
4623	Attempt to get the list of links .
4624	Retrieve information from the backup file .
4625	Backup the mining informations .
4626	Add to the file path database .
4627	Remove the mining element .
4628	This method is used to determine whether the mining database is running .
4629	Load the mining data .
4630	Gets the content of a file .
4631	Write content to file
4632	Runs the whois .
4633	Sets the date to the date .
4634	Handle noferer not found .
4635	Initializes the before header informations .
4636	Initialize the header data .
4637	Print the header .
4638	Create a new object with the specified size .
4639	Get the size from the header .
4640	Colorify the data .
4641	Writes the output to JSON .
4642	Print the data to the JSON file .
4643	Save the output file
4644	Calculate the date and hours .
4645	Gets the execution time .
4646	Initializes the list of files to delete .
4647	Generate the directory to delete .
4648	Deletes all files .
4649	Hashes a file .
4650	Hashes the data using the specified algorithm function .
4651	Get the result of the algorithm .
4652	Executes the command .
4653	Removes the key from the main dictionnary .
4654	Rename a key .
4655	Merges the given elements into a single result .
4656	Serializes this object to a JSON file .
4657	Serializes this object to a JSON file .
4658	Get the path .
4659	Write the data to the file .
4660	Read the content of the file .
4661	Returns a sorted list of strings .
4662	Merge the given list to the main list .
4663	Returns a list of matching matches .
4664	Extracts the data from the data .
4665	Get the data of this instance .
4666	Increase the status number .
4667	Calculate the percentage of the actual status counter .
4668	Calculates the percentage of the file .
4669	Checks if the URL is valid .
4670	Returns the regular expression for a valid domain .
4671	Checks if the element is a subdomain .
4672	Check if the test type is valid
4673	Reformat the historical formating error .
4674	Retrieve the historical database file .
4675	Backup current database state .
4676	Returns the timestamp of the current file .
4677	Get the file database content .
4678	Checks if the database subsystem is active .
4679	Retrieve the current database .
4680	Backup current state .
4681	Check if the file path is in the database
4682	Check if the epoch is older than the epoch .
4683	Get the expiration date .
4684	Update the state .
4685	Sets permissions for travising .
4686	Runs travising .
4687	Get the list of addresse information .
4688	Creates a PyFunceble socket .
4689	Initializes the http status code .
4690	Get the response from the test result .
4691	Get the current object bound to .
4692	Returns a list of all native libraries .
4693	Returns the list of package names .
4694	Returns the line number of imported imports .
4695	Find the module name of an imported message .
4696	Gets the line number of imported imports .
4697	Get the name of an import - usage message .
4698	Gets the line number of unused variables .
4699	Get the line number for the given source .
4700	Converts a message key to a dictionary .
4701	Checks the given source .
4702	Extracts the package name from the line .
4703	Checks if the line is imported .
4704	Returns true if the line ends with a backslash .
4705	Parses an import line .
4706	Parses an import line .
4707	Processes the given source .
4708	Find messages by line .
4709	Convert a line to a star import .
4710	Returns the key for duplicate line number .
4711	Checks if a line contains a key
4712	Determines whether the value is a literal or not .
4713	Get the line number of pass lines .
4714	Iterates over the source of the given source .
4715	Gets the indentation of a line .
4716	Returns the end of the line .
4717	Returns the code in the given source .
4718	Splits a string into a set of strings .
4719	Checks if the given filename is a python file .
4720	Checks to see if the file should be excluded .
4721	Iterates through the files and returns the result .
4722	Main entry point .
4723	Read the lease response payload from the input stream .
4724	Writes the K mip - lease response payload .
4725	Writes the K mip request payload .
4726	Read the cancel response payload .
4727	Create a new name from the expression .
4728	Read digest value .
4729	Write the digest value .
4730	Creates a Digest object .
4731	Read application specific information .
4732	Writes the application specific information .
4733	Create application specific information .
4734	Read the Derivation parameters from the input stream .
4735	Writes the k mip - parameters to the output stream .
4736	Read request payload .
4737	Writes the KMI request payload .
4738	Reads the response payload from the input stream .
4739	Writes the get response payload .
4740	Read the signature verify request payload from the input stream .
4741	Writes the k mip - data to the output stream .
4742	Read the signature verify response payload from the input stream .
4743	Handles a request .
4744	Create an error response .
4745	Processes a template attribute .
4746	Gets attributes from managed object .
4747	Gets the attribute of a managed object .
4748	Sets attributes on a managed object .
4749	Sets attribute on managed object .
4750	Returns whether or not the given session user is allowed .
4751	Write the decrypt request payload .
4752	Creates a secret key .
4753	Sets a configuration setting .
4754	Loads the configuration settings from the specified path .
4755	Convert a value to a bitmask .
4756	Returns the mask for the result value .
4757	Read the integer value from the stream .
4758	Writes the k mip_version to the stream .
4759	Validates the value .
4760	Reads a BigInteger value .
4761	Updates the K mip - byte value .
4762	Check that the value is an integer .
4763	Validates the enumeration .
4764	Reads the value from the stream .
4765	Writes the boolean value to the stream .
4766	Write boolean value .
4767	Check if the value is true .
4768	Read the Interval value .
4769	Validates this interval .
4770	Get keywrapping data .
4771	Sets the key wrapping data .
4772	Validates the key value .
4773	Validates the secret value .
4774	Validates this enumeration .
4775	Convert an attribute name to a tag .
4776	Convert an attribute tag to a value .
4777	Returns bit mask from enumerations .
4778	Gets enumerations from a bit mask .
4779	Returns true if the given mask matches the given value .
4780	Read the create key pair request payload .
4781	Writes the K mip_template attribute to the output buffer .
4782	Read the create key response payload .
4783	Writes the K mip key payload to the output buffer .
4784	Read the list attribute request .
4785	Writes the GetAttributeList request to the output buffer .
4786	Read attribute list response payload .
4787	Writes the GetAttributeList response .
4788	Returns a list of all json files in the given directory .
4789	Remove policies from the cache .
4790	Starts the operation policy file monitor .
4791	Get certificate from a connection .
4792	Gets the extended key usage from a certificate .
4793	Gets the common names from the certificate .
4794	Gets the client identity from the certificate .
4795	Read the create request payload .
4796	Writes the KMI request payload .
4797	Reads the Create response payload from the input buffer .
4798	Writes the create response payload .
4799	Builds the core key from the given object .
4800	Read encrypt response payload .
4801	Read the key request payload .
4802	Writes the K mip - key payload to the output buffer .
4803	Check if the given attribute is supported by this rule .
4804	Is the attribute deprecated?
4805	Returns true if attribute is applicable to the given object type .
4806	Check if attribute is multi -valued .
4807	Get a valid value from the configuration file .
4808	Read the check response payload .
4809	Writes the check response payload .
4810	Read the attribute reference from the input buffer .
4811	Writes this AttributeReference to the output buffer .
4812	Reads attributes from the input stream .
4813	Writes this Attributes object to the output stream .
4814	Read the nonce value from the input stream .
4815	Writes the Nonce into the output stream .
4816	Read the username and password credential from the input stream .
4817	Writes the username and password to the output stream .
4818	Read device credential .
4819	Writes the k mip - data to the output stream .
4820	Read the credential data from the input stream .
4821	Writes the credential data to the output stream .
4822	Read the MAC signature key information from the input stream .
4823	Writes the MAC signature key information .
4824	Read keywrapping data .
4825	Writes the k mip - data to the output stream .
4826	Read the keywrapping method from the input stream .
4827	Writes the keywrapping method .
4828	Read extension information .
4829	Writes the extension information .
4830	Create an extension information .
4831	Read revocation reason message .
4832	Writes the revocation message .
4833	Validate the revocation reaon message .
4834	Reads the object defaults from the input buffer .
4835	Writes the object defaults to the output buffer .
4836	Reads the defaults information from the input buffer .
4837	Writes the defaults field .
4838	Reads the RNG parameters object from the input buffer .
4839	Writes the generator parameters to the output stream .
4840	Read the profile information from the input buffer .
4841	Writes the KmipInfo object to the output buffer .
4842	Writes the validation information object to the output stream .
4843	Read the capability information from the input buffer .
4844	Writes a K mip - version into the output buffer .
4845	Shuts down the socket handler .
4846	Starts the connection service .
4847	Read the location request payload .
4848	Writes the k mip - data to the output buffer .
4849	Read located response payload .
4850	Writes the k mip - response payload .
4851	Generates a symmetric key .
4852	Creates a key pair for the symmetric symmetric key algorithm .
4853	Generates a message authentication code .
4854	Encrypt a plain text .
4855	Encrypts the given plaintext .
4856	Encrypt an asymmetric encryption key .
4857	Decrypts the given cipher .
4858	Generates an RSA key pair .
4859	Returns the encryption key .
4860	Create RSA private key .
4861	Sign a digital signature .
4862	Read the sign response payload from the input stream .
4863	Writes the signature to the output stream .
4864	Reads the usage allocation request from the input stream .
4865	Convert the KMIPVersion to KMIPVersion .
4866	Read the protocol version from the input stream .
4867	Writes the K mip version to the output stream .
4868	Read the authentication data from the input stream .
4869	Writes the authentication data to the output stream .
4870	Reads data from the input stream .
4871	Read the certificate .
4872	Write the certificate .
4873	Fetches the user s groups and groups .
4874	Read the archive response payload .
4875	Writes the k mip_version to the output stream .
4876	Starts the session .
4877	Read the rekey response payload .
4878	Determines if the given conformance suite is supported .
4879	Derives a key .
4880	Sends a batch of attributes .
4881	Gets a batch of attribute names .
4882	Sends a batch request .
4883	Signs a batch request .
4884	Opens the proxy .
4885	Closes the proxy .
4886	Create a new key with the specified parameters .
4887	Creates a key pair .
4888	Create attributes from a PieObject .
4889	Generates a unique key .
4890	Creates a key for the given object type .
4891	Locate managed objects .
4892	Checks whether a user s usage limit is valid .
4893	Gets a managed object .
4894	Gets the attributes of a managed object .
4895	Activate the managed object .
4896	Revoke the managed object .
4897	Sends a message authentication code .
4898	Builds the Cryptographic parameters .
4899	Builds the encryption key information .
4900	Builds a MAC_ signature key information from the given value .
4901	Builds the keywrapping specification .
4902	Build common attributes .
4903	Builds a name attribute .
4904	Read the query request payload .
4905	Writes the query request payload .
4906	Writes the k mip - data to the output stream .
4907	Read attributes response payload .
4908	Writes the GetAttributes response payload .
4909	Gets a single entry from the given group and path .
4910	Get a group by its name .
4911	Returns all entries in the given group .
4912	Get the object s object .
4913	Parses an entry point string .
4914	Starts the livereload server .
4915	Generate project files .
4916	Generates the controller .
4917	Generates the action .
4918	Generate the form .
4919	Generates the model .
4920	Generates a macro .
4921	Create a directory at the given path .
4922	rewrite file to new file
4923	Display the time since the given value .
4924	Adds the URL to the form field .
4925	Serializes the given object to JSON .
4926	Returns a JSON representation of the given object .
4927	Wraps the given function and returns a response .
4928	Returns the url for the given endpoint .
4929	Get the configuration .
4930	Sends a user in the session .
4931	Find current user .
4932	Loads the application .
4933	Configures the URL for pagination .
4934	Registers the routes for the controller .
4935	Render error handler .
4936	Called before request time .
4937	Write a dataframe to a csv file
4938	Read a dataframe from a CSV reader .
4939	Serializes a dataframe to a Dataframe
4940	Converts a data type to a dataframe .
4941	Update data from a dataframe
4942	Updates data from raw data data .
4943	Get the URL of the download request
4944	Upload data from a dataframe
4945	Upload data from raw data .
4946	Open an intermediate dataset .
4947	Read an intermediate dataset as binary .
4948	Get the intermediate dataset contents .
4949	Deserialize this object to a dataframe .
4950	Create an intermediate dataset .
4951	Sends a request to a workspace .
4952	Gets a list of datasets for a given workspace .
4953	Sends a dataset to specified workspace .
4954	Publish a worker .
4955	Publish a function .
4956	Create a new annotation for the given annotations .
4957	Adds a return type annotation .
4958	Adds an attachment to this class .
4959	Returns the names of the global .
4960	Creates a new Pen object from this object .
4961	Convert a color .
4962	Draws the bounding box with the specified bounding box .
4963	Compute a cubic cubic cubic curve .
4964	The cubic cubic cubic function .
4965	Builds the choices .
4966	Gets option options .
4967	Register items hook .
4968	Register a dynamic tree .
4969	Reset cache .
4970	Clears cache .
4971	Gets an entry from the cache .
4972	Updates the value of an entry in the cache .
4973	Sets an entry in the cache .
4974	Initializes the cache .
4975	Sets the i18n tree alias .
4976	Returns the current app is admin .
4977	Calculates the depth of an item
4978	Get the current item for the given tree alias .
4979	Resolves the URL of an item .
4980	Resolves the tree for the given tree .
4981	Returns the attribute value for the current page .
4982	Returns the ancestor of the given item .
4983	Initializes the tree .
4984	Check if the item has access .
4985	Builds the breadcrumbs for a tree .
4986	Gets the items of the tree .
4987	Renders children .
4988	Gets the children of a tree .
4989	Sets all children of a tree item .
4990	Filters the given items .
4991	Returns the ancestor of the given base item
4992	Adds a base item to the tree
4993	Resolves a variable in the context .
4994	Parses a tag from a tag .
4995	Parses the children of a menu tag .
4996	Creates a breadcrumb page .
4997	Parses a sub - menu tag .
4998	Renders the tree
4999	Loads a tag from a tag .
5000	Returns the url name for the model .
5001	Unregister tree admin .
5002	Handle tree item .
5003	Returns the redirect for the request
5004	Add to the tree .
5005	Redirect to the tree .
5006	Sets the form of the tree item .
5007	Sets the tree .
5008	Moves the item to the previous item .
5009	Update model .
5010	Returns the urls for the tree admin .
5011	Render the model tree .
5012	Creates a new tree object .
5013	Create a tree item .
5014	Get the sub module for the app .
5015	Returns the model class for the given settings entry .
5016	Creates a configuration object with the specified mapping .
5017	Loads a configuration from a file .
5018	Loads a config file from a file .
5019	Converts an instance to a Config object .
5020	Generate zipkin attributes .
5021	Returns HTTP headers for a new span .
5022	Gets the current context .
5023	Populates a new span .
5024	Called when an exception occurs .
5025	Updates the binary annotations for this span .
5026	Sets the remote endpoint annotation .
5027	Sets the span name .
5028	Creates an endpoint .
5029	Create an endpoint with new service name and new service name .
5030	Create a V1 span .
5031	Create a list of Zipkin spans .
5032	Convert a protobuf span to a protobuf span .
5033	Convert a hex id to a byte array .
5034	Returns the Zipkin Span corresponding to the given kind .
5035	Convert an endpoint to a zipkin endpoint .
5036	Convert the given annotations to a zipkin annotation .
5037	Create an annotation .
5038	Create a binary annotation .
5039	Creates an endpoint .
5040	Creates an endpoint with a new service name .
5041	Build a list of annotations .
5042	Helper method to build a list of binary annotations .
5043	Creates a map of span information .
5044	Converts a thrift span to bytes .
5045	Serialize a binary thrift object list .
5046	Check span version and encoding .
5047	Encodes spans into a list of spans .
5048	Pushes zipkin attributes to threadLocal .
5049	Converts a V2 span into a thrift span .
5050	Create json endpoint from endpoint
5051	Encodes a span .
5052	Decode spans .
5053	Convert a thrift endpoint to an Endpoint object .
5054	Decodes thrift annotations .
5055	Helper method to convert binary annotations from thrift binary annotations .
5056	Decodes a thrift span .
5057	Convert trace id to string .
5058	Converts an unsigned long to lower hex bytes .
5059	Writes a long to the buffer at the given position .
5060	Fixes the pre - processor for the pre - processor .
5061	set transaction code
5062	Sets the iph_id of a tag .
5063	Sets the tnr of a tag .
5064	Extracts the text from the given data .
5065	Parses the given source .
5066	Splits a string into lines .
5067	Gets the response or text from the response .
5068	Check for a ratelimit quota .
5069	Perform a request .
5070	Get information about a bot
5071	Returns all the bots .
5072	Get the term .
5073	Writes a message to the output stream .
5074	Closes the output file .
5075	Decodes a tag .
5076	Compress a term .
5077	Register an IP address .
5078	Sends pending messages .
5079	Sets a callback for the remote service .
5080	Stop the server .
5081	Send all local services .
5082	Sends a probe to the remote service .
5083	Create SOAP message .
5084	Set logging level .
5085	Gets the item manager for the item .
5086	returns all child relations
5087	Gets all child m2mToMany relations .
5088	Saves a clusterable model .
5089	Deserializes the data from a serializable object .
5090	Runs all unique checks in the form .
5091	Returns true if this form has changed .
5092	Returns a valid checksum for this address .
5093	Generate an address checksum .
5094	Parses the command line arguments .
5095	Creates an argument parser for this node .
5096	Creates a random seed .
5097	Generate signature fragments .
5098	Gets the private key .
5099	Returns the key for the given address .
5100	Returns a KeyIterator for the given seed .
5101	Creates a Sponge from the given seed .
5102	Obtains the given trits from the given trits .
5103	Removes all trits from the given trits .
5104	Transform the state .
5105	Gets digests .
5106	Gets private keys .
5107	Prepare multisig transfer .
5108	Returns a list of trits .
5109	Returns a list of trits for a given number of trits .
5110	Adds trits to left .
5111	Add trits to a tuple .
5112	Show a seed .
5113	Finds transactions that are associated with the given addresses .
5114	Gets inputs .
5115	Gets new addresses .
5116	Gets the transfer command .
5117	Promotes a transaction .
5118	Plays a bundle .
5119	Sends a transfer command .
5120	Sends a trytes to the transaction .
5121	Get adapter from URI .
5122	Handles a request .
5123	Logs a message at the specified level .
5124	Sends a HTTP request .
5125	Interprets the response .
5126	Adds a response to the adapter .
5127	Adds a digest .
5128	Returns the address of this MultisigAddress .
5129	Returns an iterator over the keys of the key .
5130	Converts a digest into an address .
5131	Generates an address from the given key iterator .
5132	Retrieves all trytes associated with a given adapter .
5133	Returns a list of addresses used by the given seed .
5134	Returns a list of bundles from the given transaction hashes .
5135	Returns the codec for a given encoding .
5136	Returns the codec info .
5137	Generates the trytes of the given input .
5138	Decodes a trytes from the given input .
5139	Finds addresses in the given seed .
5140	Route a command .
5141	Creates a new Transaction object from the given trytes .
5142	Returns a JSON representation of this transaction .
5143	Returns the signature validation string .
5144	Sets the is confirmed value for this transaction .
5145	Returns a list of message messages for all transactions .
5146	Returns a list of trytes of this transaction .
5147	Returns a list of transactions grouped by address .
5148	Loads all commands in a package .
5149	Sends a request .
5150	Applies the given filter .
5151	Get the URL of the job .
5152	Returns a list of errors .
5153	Checks if the bundle is valid .
5154	Creates a validator for the given transactions .
5155	Gets the message signature errors for the given groups .
5156	Returns an error message for the given group .
5157	Traverses a bundle into a list of trytes .
5158	Starts the REPL .
5159	Generate random seed .
5160	Generate a digest for the key fragment .
5161	Signs the input transactions in the given bundle .
5162	Pretty print the object .
5163	Obtains the trits from the given trits .
5164	Squeeze the trits into a sequence of trits .
5165	Updates the context of an exception .
5166	Generate security level .
5167	Convert the legacy tag to a tag .
5168	Returns the tag for this transaction .
5169	Adds a transaction to the bundle .
5170	Generate the bundle hash .
5171	Signs the inputs in the bundle .
5172	Signs the input stream at the given start index .
5173	Adds the input transactions to the bundle .
5174	Converts a value to a standard unit .
5175	Solves G1 .
5176	Returns the inverse of a field of a given integer .
5177	Loads a JSON file from a JSON file .
5178	Finds all words that match the given category .
5179	Returns the synonym for the given word .
5180	Search for abbreviations .
5181	Returns the description of the text .
5182	Returns all the keys in the map
5183	Generate a random random value .
5184	Draws this component .
5185	Creates a new class from a CSV file .
5186	Returns the timescale value for the given name .
5187	Creates a striplog .
5188	Creates a Decor from an image .
5189	Read a CSV file .
5190	Returns a CSV representation of this Decor .
5191	Get the width of all rows in the list .
5192	Get the decor with the specified component .
5193	Returns the specified attribute of the specified class or the default value if not found .
5194	Get the component of the legend .
5195	Plot the list .
5196	Gets a component from a lexicon .
5197	Format this component .
5198	Create a new component class .
5199	Extracts a row from the text .
5200	Extracts a single record from a string .
5201	Check if this axis is strict .
5202	Returns a sorted table with the primary and thickness .
5203	Create a list of intervals from the given values from the given values .
5204	Clean out the longitudinal data .
5205	Read an Interval from a file .
5206	Build a list of intervals from a list of intervals .
5207	Formats a CSV file .
5208	Build an image from an image .
5209	Adds a log entry to the log .
5210	Creates a las description from a string .
5211	Create an Interval from a file .
5212	Create a copy of this Striplog .
5213	CSV file .
5214	Format a Lithology file .
5215	Add an axis to the axis .
5216	Get the data for the specified field
5217	Sets the log value for the given basis .
5218	Search all components matching the search term .
5219	Returns true if there are overlaps
5220	Find all gaps in the given index .
5221	Returns a copy of the strip with the specified limit .
5222	Removes gaps from the base .
5223	Finds all gaps in this interval .
5224	Create a striplog from another object .
5225	Creates a new Striplog object that intersects the given two intervals .
5226	Returns the number of overlapping pieces .
5227	Visualizes the table .
5228	Returns a new striplog .
5229	Create a new striplog log entry .
5230	Adds all tests to the curve .
5231	Convert hex x to lower case name .
5232	Returns a line from an image
5233	Gets the field with the given name .
5234	Get the list of jobs for this job .
5235	Parses the job HCL
5236	Request token .
5237	Get all allocated allocations .
5238	Fails a deployment .
5239	Pause a deployment .
5240	Request the health of the allocation
5241	Drain a node .
5242	Adds a node to the node .
5243	Adds eligibility to a node .
5244	Fetches a file .
5245	Gets the content of a file .
5246	Get a file
5247	Join an agent .
5248	Create a list of servers .
5249	Leave a node .
5250	Get nodes .
5251	Get the list of evaluations for a given prefix .
5252	Get all namespaces .
5253	Send a job
5254	Add a job to the plan
5255	Dispatches a job .
5256	Revert a job .
5257	Sends a revert job .
5258	Deletes a job .
5259	Get the cluster configuration .
5260	Deletes a peer .
5261	Gets the deployments .
5262	Returns a random value of the given object type .
5263	Returns a random mutation .
5264	Generate a polyglot attack
5265	Generates a string representation of an object
5266	Convert buffer to unicode .
5267	Starts the route .
5268	Waits for the server to complete .
5269	Generates a static file
5270	This is a helper method that will be called when the client is fuzzed .
5271	Mutate an object .
5272	Opens a binary .
5273	Reads the output of the process .
5274	Read output from the process .
5275	Close the process .
5276	Starts PF worker .
5277	Process the given object .
5278	Wrap the given function .
5279	Generate a random string .
5280	Appends the value to the current scope .
5281	Build the Q value .
5282	Get a random value
5283	Builds an OptGram .
5284	Get a value from the fuzzer
5285	Generate a GAR .
5286	Called by PJFProcessMonitor
5287	Process the process and monitor the process .
5288	Start the process .
5289	Generate a random float .
5290	Adds a definition to the rule group .
5291	Adds a default name to a given category .
5292	Processes the given number of variables .
5293	Replaces all elements in the given element .
5294	Get the fuzzed JSON .
5295	Returns the fuzzed result of the JSON
5296	Decorates an object with a mutator .
5297	Stops the process .
5298	Exit the command .
5299	Pause command .
5300	Resume command .
5301	Called when the command is stopped .
5302	Called when the command is running .
5303	Get the events for this service .
5304	Set the mood for the user
5305	Sets the avatar for the user .
5306	Get the metadata for a given URL .
5307	Updates the profile with the specified id .
5308	Get a profile with the specified id .
5309	Get the agent s agents .
5310	Gets a bot .
5311	Fetches a user from a user .
5312	Gets a request for a user invites .
5313	Creates a new instance from raw data .
5314	Sets the attributes of the other object .
5315	Merge an object into the cache .
5316	Get a state call .
5317	Read the token from the file .
5318	Write token file .
5319	Get the skype token .
5320	Refreshes the skype token .
5321	Get the user id .
5322	Verify the skype token .
5323	Finds all the endpoints for this messaging service .
5324	Check if a user is valid
5325	Send a token .
5326	Redirects the user endpoint to the user .
5327	Updates the messaging service presence documentation .
5328	Sends a message to the user .
5329	Fetches the user s conversations .
5330	Creates a new chat message .
5331	Send a message to a thread .
5332	Get the id of a user
5333	Convert a URL to an id
5334	Iterates over the result and returns the result .
5335	Converts text to UTF - 8 .
5336	Returns the handler for the given text .
5337	Parses the given text using the specified handler .
5338	Get a copy of this object
5339	Load yaml .
5340	Dump the metadata .
5341	Dump the metadata .
5342	Get the match .
5343	Returns a list of items .
5344	Returns a list of sublists that match the specified pattern .
5345	Replaces the string with a new start position .
5346	Returns a list of argument arguments .
5347	Returns a list of lists matching the given pattern .
5348	Plant the trie .
5349	Returns the pattern pattern for the given trie .
5350	Checks that the index is in the range .
5351	Inserts a string at the specified index .
5352	Atomically partition a character .
5353	Returns the list of spans for a given type .
5354	Shrinks spans .
5355	Update the span at the given index .
5356	Get the current level of this template .
5357	Returns a byte array containing the shadow .
5358	Get extension link shadow .
5359	Returns a map of spans for the given type .
5360	Pretty print method .
5361	Get a list of parameter spans .
5362	Get parser functions .
5363	Returns a list of templates for this template .
5364	Returns a list of WikilLinks for this document .
5365	Returns a list of comments for this comment .
5366	Gets the external links .
5367	Returns a list of sections .
5368	Returns a list of tables .
5369	Returns a wiki list with the specified pattern .
5370	Get extension tags .
5371	Returns the span of the given type .
5372	Returns a list of all ancestors of this parser .
5373	Returns the first wiki text of the given type .
5374	Returns the maximum value of the given list
5375	Looks up an argument with the given name .
5376	Returns the name of this template .
5377	Removes first argument from the list .
5378	Removes duplicate arguments .
5379	Adds an argument .
5380	Get an argument by name .
5381	Searches for an argument with the given name and value .
5382	Removes the argument with the given name .
5383	Convert a spatial reference code to a string .
5384	Look up an ellipsoid with the specified crstype .
5385	Load a CRS from a URL .
5386	Parses a GeoJSON file .
5387	Get the crs information from an epsg code .
5388	Get the crs information from an ERI code .
5389	Get the crs information from the SR - project code .
5390	Attempts to auto - detect the crs from unknown formats .
5391	Write this record to the given output stream .
5392	Loads a VLR from the given data stream .
5393	Get geo tiff keys from vlr list .
5394	Get a GeoTiffKey from a GeoKey directory .
5395	Returns the signedness of an extra dimension .
5396	Returns the id for the given extra dimension type .
5397	Creates a new record from the other point_format fields .
5398	Copies all fields from another record to another record .
5399	Appends zeros if needed
5400	Get the names of the dimensions of this array .
5401	Creates a new instance of the given data .
5402	Read point data from stream .
5403	Decompress a compressed buffer .
5404	Returns the scale dimension of the X .
5405	Get the y dimension of this axis .
5406	Returns the scale dimension of this X .
5407	Adds an extra dimension .
5408	Writes this object to the output stream .
5409	Write the file to a file .
5410	Write the file to the specified destination .
5411	Builds a map of point formats based on the given dimensions .
5412	Unpacks a list of point formats from a list of field formats .
5413	Converts an array type to a point format .
5414	Returns the version of the point file .
5415	Checks if a point format is compatible with the given file version .
5416	Get the vlr with the given type
5417	Extracts the vlrs from the cache .
5418	Reads a VLR from a data stream .
5419	Returns true if the las file has the same point format id
5420	Returns true if the file has the same type
5421	This method checks the file signature of the given stream .
5422	Reads the header from the stream .
5423	Read VLR list from the stream .
5424	Read points from the stream .
5425	Read point data from the stream .
5426	Read the waveform data packet from the stream .
5427	Read evlr list .
5428	Logs a warning if the stream is not at the end of the stream .
5429	Creates a las reader from the given source .
5430	Reads a source from a source .
5431	Creates a las data from the given header .
5432	Creates a las data .
5433	Creates a point format from a source .
5434	Merges a las file .
5435	Reads a las .
5436	Gets the creation date .
5437	Sets the creation date .
5438	Get the minimum and min values .
5439	Set the minimum and min values .
5440	Get the maximum values .
5441	Set the maximum values for this element .
5442	Get the scale factors .
5443	Get the coordinates of this vector .
5444	Reads the major version from the stream .
5445	New header .
5446	Applies the given mask to the source array .
5447	Applies the mask to the given sub - field .
5448	Check for missing dimensions .
5449	Returns a map of sub - fields for the composed dimension .
5450	Get the size of the extra data for this image .
5451	Returns true if there is a waveform packet .
5452	Displays a demo .
5453	Calculates the CRC of a command
5454	Converts data to hex
5455	Returns the checksum of the response .
5456	set bits from the r
5457	Converts a command to a byte array .
5458	Connects to the server .
5459	Connects to the server .
5460	Starts monitoring monitoring .
5461	Disarm command .
5462	Clears the alarm command .
5463	Enables an output .
5464	Tries to keep alive .
5465	Starts monitoring monitoring .
5466	Closes the connection .
5467	Purges the user .
5468	Returns the type of the ipynb .
5469	Returns the file id for the given path .
5470	Loads a notebook from the database .
5471	Load a notebook model from the database .
5472	Gets a directory .
5473	Convert file records to file model .
5474	Build a directory model from the database .
5475	Loads a file model from the database .
5476	Save a notebook into the database .
5477	Save a model to a file
5478	Rename a file .
5479	Deletes a file .
5480	Inserts a user in the database .
5481	Deletes a user .
5482	Adds a directory to the database .
5483	Returns true if the table is in the given directory .
5484	Deletes a directory .
5485	Checks if a directory exists .
5486	Retrieves a list of files in a directory in a directory .
5487	Checks if the directory is in the directory .
5488	Returns true if the file path is within the given path .
5489	Selects a file .
5490	Get file default fields .
5491	Retrieves a file from the database .
5492	Gets a file .
5493	Get the file id of a file .
5494	Checks if a file exists .
5495	Renames a directory .
5496	Inserts a file into the database .
5497	Generate notes files .
5498	Delete all remote checkpoints for a user
5499	Generates a list of notepoints for the remote server .
5500	Returns a list of notes that match the given timestamp column .
5501	Encrypt the content of a row .
5502	Re - encrypt a user .
5503	Generate a single key from the given password .
5504	Derives a fallback key from a list of passwords .
5505	Creates a Fernet encryption factory for the given password .
5506	Cache a single argument .
5507	Get column name
5508	Verifies that the row has no content .
5509	Decrypt a row with the given fields .
5510	Saves a checkpoint for the given notebook .
5511	Saves a checkpoint .
5512	Deletes a checkpoint .
5513	Gets the content of a checkpoint .
5514	Retrieves the list of checkpoints for a given path .
5515	Move all remote checkpoints to the new path .
5516	Deletes all checkpoints from the given path .
5517	Purges all remote checkpoints .
5518	Resolves a path for a path .
5519	Apply a prefix to a model .
5520	Dispatches a managers to a model .
5521	Returns a wrapper for the specified managers .
5522	Maps old path to a model .
5523	Called when the manager has changed .
5524	Gets the root model .
5525	Normalizes an API path .
5526	Returns the path to the file path .
5527	Encodes the given nb format to base64 .
5528	Decodes the given nb format into a base64 format .
5529	Decodes unknown data from base64 .
5530	Decodes bytes from base64 .
5531	Returns all directories in the given path .
5532	Wraps a path outside the root .
5533	Adds a user to the database .
5534	Splits the models and files into a list of files
5535	Iterates through the given dirs and returns the contents of the directory .
5536	Finds all files in the given manager .
5537	Iterates over the files and returns the contents of the given manager .
5538	Recrypts all users .
5539	Recrypts a single user .
5540	Uncrypts all users .
5541	Recrypts a single user .
5542	Generate an alembic ini file .
5543	Upgrade an alembic database .
5544	Converts an embed to an embed .
5545	Generates an instance of an embed .
5546	Fetches the instances for the given embed type .
5547	Serialize an embed instance .
5548	Loads all instances from the embed .
5549	Validates the theme .
5550	Returns the index of the manager .
5551	Convert this object to JSON .
5552	Remove all authenticated fields .
5553	Remove any excluded fields from the request .
5554	Gets the article from the url request .
5555	Get the query set for the query
5556	Returns the queryset that should be used for publishing .
5557	Returns true if this field is null .
5558	Validates a widget .
5559	Validates the zone .
5560	Validates a UUID
5561	Returns the permissions for this group .
5562	Sets the group permissions .
5563	Validates an author .
5564	Saves the zone .
5565	Get the data for this object .
5566	Prepare the data .
5567	Render template .
5568	Get settings for this integration .
5569	Fetches all pages belonging to the user .
5570	Get settings for an integration .
5571	Updates the settings of an integration .
5572	Sign up the user .
5573	Builds a tag with the given tagname and contents .
5574	Render the zone .
5575	Updates the featured image .
5576	Updates an Article .
5577	Get extension .
5578	Returns the url of the media .
5579	Saves the image .
5580	Resize image .
5581	Get mysql connection .
5582	Create a bandwidth limiting stream
5583	Read amount of bytes .
5584	Releases an amount from the specified request token .
5585	Add an amount of tokens to the queue .
5586	Remove a token from the queue .
5587	Calculate projected rate .
5588	Calculate the current consumption rate
5589	Sends a download file request .
5590	Wait for the given transfer .
5591	Gets callback callbacks for the transfer .
5592	Filter the original map with whitelisted keys
5593	Decrement the counter .
5594	Invokes the callback .
5595	Returns true if the file is a special file .
5596	Acquires a tag .
5597	Releases an acquire token .
5598	Adjusts the current chunk size .
5599	Submits a task for writing to a file .
5600	Creates a new IOWriteTask for the given file object .
5601	Returns the download output manager class for this transfer .
5602	Main entry point .
5603	main method for testing
5604	Returns a list of writes for the given offset .
5605	Determines whether the given file object is seekable .
5606	Submits a file object to the upload task .
5607	Submits a download task for download .
5608	Submit a transfer .
5609	Submit a delete task to a bucket .
5610	Shutdown the server .
5611	Cancel the transfer .
5612	Wait for the transfer .
5613	Read data from the file .
5614	Wrap the given data .
5615	Gets the upload input manager class for the transfer .
5616	Sets the exception for this transfer .
5617	Sets the result of this task .
5618	Set an exception .
5619	Wait for this result .
5620	Cancel this task .
5621	Submits a task to the executor .
5622	Called when the function is called .
5623	Appends the failure cleanup of the given function .
5624	Called when the task has finished .
5625	Submits a task to the executor .
5626	Adds a callback to the future .
5627	Uploads a file .
5628	Download a file from S3 .
5629	Iterates over the step function definitions and returns the decorator .
5630	Helper method to get a step decorator .
5631	Refactor the text of a step .
5632	Iterates over the step function decorators of a step function .
5633	Helper method to get a step from a step .
5634	Refactor the text of a step .
5635	Sets the parser for the parser .
5636	Fetches membership objects from a team .
5637	Create a team membership object .
5638	Create a team membership object .
5639	Delete membership .
5640	Get category fact .
5641	Start the webhook .
5642	Gets membership objects from a room .
5643	Delete membership
5644	Given a base url return a valid URL .
5645	Determine if the given string is a web url .
5646	Loads a file from a file .
5647	Checks that an object is an acceptable type .
5648	Creates a new key - value pair with values from items and values .
5649	Check if the expected response code matches the expected response code .
5650	Converts a JSON string to an object .
5651	Converts a date string to a webex teams date .
5652	Get room objects for a room
5653	Create a room object
5654	Create a room object
5655	Delete a room .
5656	Fetches license objects from the license
5657	Get the date of this team
5658	Gets the access token .
5659	Create a webhook
5660	Create a webhook
5661	Delete a webhook
5662	Fixes the next URL .
5663	Sets the wait on rate limit .
5664	Updates the request headers .
5665	Get the URL for the given URL .
5666	Perform a HTTP request .
5667	Perform a GET request .
5668	Get pages from a URL .
5669	Get items from a URL .
5670	Perform a PUT request .
5671	Perform a DELETE request .
5672	Create an object from the JWT
5673	Gets messages from a room .
5674	Post a message to a room .
5675	Delete a message
5676	Create a person .
5677	Create a person object .
5678	Create a person object
5679	Delete a person
5680	Gets the person object .
5681	Gets role objects .
5682	Fetches team objects from the API .
5683	Create a team object
5684	Create a team object
5685	Delete a team
5686	Gets event objects .
5687	Serialize a data object .
5688	Create an access token .
5689	Get the last activity
5690	Handle event events .
5691	Get the public URL for the ngrok client .
5692	Delete webhook with given name
5693	Create webhook .
5694	Delete http webhook
5695	Prints teler values .
5696	Reads the telegram from the serial stream .
5697	Parses the telegram buffer into a queue .
5698	Creates a new DSMr protocol .
5699	Opens a Dsmr connection to the specified port .
5700	Creates a connection to a TCP DSMr reader .
5701	Receives data from the telegram buffer .
5702	Called when a connection is lost .
5703	Process a telegram
5704	Parses the telegram data .
5705	Loads version from file .
5706	Returns the version of the version .
5707	Returns the list of packages found in the root directory .
5708	Build the command class .
5709	Creates a function that updates the package data .
5710	Executes the command .
5711	Creates new targets check .
5712	Wrap a command .
5713	Gets the file handler .
5714	Builds a staging object .
5715	Get the data for the package .
5716	Compile a glob pattern
5717	Explode a path .
5718	Translate a glob pattern .
5719	Joins the translated parts with a separator .
5720	Translate a glob part .
5721	Truncate the table .
5722	Writes the given table to the database .
5723	Writes the indexes for the given table .
5724	Writes triggers to a table .
5725	Writes all constraints for a table .
5726	Copy the contents of a table .
5727	Convert a row to a row .
5728	Writes the indexes for the given table .
5729	Writes the given table s constraints .
5730	Write triggers for a table .
5731	Returns the number of items in the queue .
5732	Insert data into database .
5733	Tries to dequeue a task .
5734	Build the extra predicate .
5735	Serialize an object to JSON format .
5736	Closes the database connection .
5737	Executes a query .
5738	Get database connection .
5739	Run benchmark .
5740	Connects to the aggregator .
5741	Looks up a map with the given errno .
5742	Returns the total size of this connection
5743	Checks if connection fails .
5744	Builds the query expression .
5745	Adds a set of fields to the table .
5746	Load a database .
5747	Executes the database .
5748	Drop all tables .
5749	Adds a step to the pipeline .
5750	Gets the given step name .
5751	Load steps from raw data .
5752	Disconnects from the API .
5753	Reconnects the initial zion .
5754	Initializes the WebSocket connection .
5755	Handle a message .
5756	Stop timers .
5757	Send ping to API .
5758	Check the pong .
5759	Sends a payload to the client .
5760	Unpause the resource .
5761	Handles a system message .
5762	Handler for info message .
5763	Handler handler .
5764	Sends data handler to the client .
5765	Resubscribe channel .
5766	Handle authentication .
5767	Handle configuration .
5768	Updates the timestamp of a channel .
5769	Resets the connection .
5770	Get candles for a given pair .
5771	Send configuration
5772	Subscribe to a ticker
5773	Unsubscribe from a ticker
5774	Subscribe to order book
5775	Unsubscribe from an order book .
5776	Subscribe to raw order book .
5777	Unsubscribe from raw order book .
5778	Subscribe to the trades channel
5779	Unsubscribe from a given pair
5780	Subscribe to a candles pair .
5781	Unsubscribe from candles .
5782	Sends an auth message to the client .
5783	Sends an order command .
5784	Called when a command is received .
5785	Called when a device command is received .
5786	Handles a notification .
5787	Creates a device type .
5788	Publish event .
5789	Updates a device .
5790	Get a List of ClientStatus objects
5791	Retrieve a custom bundle .
5792	Upload a custom bundle to a custom bundle .
5793	Update a schema
5794	Closes the connection .
5795	Called when a connection is established .
5796	Subscribe to event events
5797	Subscribe to device status
5798	Subscribe to device commands
5799	Send a command .
5800	On unsupported message .
5801	Handles a device event .
5802	Process device status message .
5803	On app status callback .
5804	Retrieve the last event for a device
5805	Get last events for a device
5806	Make an API call .
5807	Sends a request to the server .
5808	Get status of mgmt request .
5809	Destroys the index .
5810	Computes the index of the specified coordinates .
5811	Finds the nearest neighbors of a point .
5812	Get the bounds of a coordinate .
5813	Delete an index .
5814	Creates an index from the given stream .
5815	This method is used to generate a byte array .
5816	Deletes an object from the index .
5817	Returns true if the current thread was successful .
5818	Get application .
5819	Initialize the app .
5820	Starts the web server .
5821	Get the native url of the image field .
5822	On center point .
5823	Crop an image .
5824	Performs a thumbnail on the image .
5825	Converts an image into an image file .
5826	Converts the value of the field to the form .
5827	Load placeholder image .
5828	Saves the versatile image field .
5829	Update the poi field .
5830	Saves the data in the form .
5831	Sets the default formfield for the user .
5832	Convert an object to a string .
5833	Attempt to load the versodimage field registry .
5834	Removes the size of an image .
5835	Deletes a filtered image class .
5836	Returns the url of the image .
5837	Sets the filters and sizers .
5838	Get the root folder of the image field
5839	Returns the root folder of the image field .
5840	Gets the filtered root folder .
5841	Deletes all files that match the given regular expression .
5842	Encrypts the image .
5843	Creates a GG image .
5844	Convert image to jpeg
5845	Load image from file .
5846	Saves an image to disk .
5847	Get the ppoi name as a string .
5848	Resize an image .
5849	Renders the template with the given name and value .
5850	Returns the context for the clearable file preview .
5851	Returns a copy of the given attributes .
5852	Returns the path to the resized file .
5853	Get the path to the filtered path
5854	Validates the size key set .
5855	Get image url from image key .
5856	Validates the specified rendition field key set .
5857	Returns a string representation of an instruction .
5858	Prints a function .
5859	Get instructions from bytecode .
5860	Reads a module .
5861	Wrap the given function .
5862	Creates a new connection .
5863	Closes the connection .
5864	Reads an agi result .
5865	Process a FastAGI request .
5866	Parses a GANG result line .
5867	Returns a status code .
5868	Initialize all instances with the given uid .
5869	List of instances .
5870	Get the metadata .
5871	Returns the primary key of the model .
5872	Deserializes the given value into a related object .
5873	Gets an instance of an existing instance .
5874	Gets the declared fields .
5875	Loads the schema from the given data .
5876	Splits the model and attributes of a model using the association .
5877	Delete all orphan snapshots .
5878	Upgrades a snapshot .
5879	Prints the snapshot of the app .
5880	Search for a snapshot with the given name .
5881	Deletes a snapshot .
5882	Rename a snapshot .
5883	Replace a snapshot .
5884	Sets the end of the epoch .
5885	Clean the text .
5886	Apply a function to a list of data .
5887	Constructor of text .
5888	Processes the given text .
5889	Process text .
5890	Calculate document length statistics .
5891	This method is used to retrieve the frequency of word count .
5892	Get the type of a parameter .
5893	Parses the implemented interfaces .
5894	Get the inverse .
5895	Update the item with rollback .
5896	Creates a copy of this bid .
5897	Returns a copy of this node .
5898	Returns true if the two Bidict objects are sensitive .
5899	Convert an argument to a mapping .
5900	Clear current state .
5901	move to end
5902	Create a temporary file .
5903	Search for contacts in all address books .
5904	Adds the given args to the configuration .
5905	Load address books from the configuration file
5906	Returns all the search queries for an address book .
5907	Command - line command .
5908	Adds birthdays to the list of vcard objects .
5909	Executes the VCard command .
5910	Performs a sub - command .
5911	Runs the command on the selected vcard .
5912	Deletes a vcard file .
5913	Executes a command on the selected vcard .
5914	Runs the command .
5915	Choose a new Vcard or move or move .
5916	Returns the action for the given alias .
5917	Converts a boolean value into a boolean value .
5918	Creates a new contact object .
5919	Creates a new object from a file .
5920	Creates a contact from the user - input .
5921	Creates a new contact with new user input .
5922	Get the names of the VCard .
5923	Adds a vcard to the vcard .
5924	Parses a custom type value .
5925	Converts input to string .
5926	Convert input to date
5927	Compare two uids
5928	Search all contacts in all contacts .
5929	Search for contacts that match a regular expression .
5930	Search for contacts that match the given UID .
5931	Search the address book with the given query .
5932	Returns a list of short ids for all contacts .
5933	Get the short uid string .
5934	Finds a list of Vcard files that match the given search .
5935	Loads the vcard file with the given query .
5936	Get abook by name
5937	Returns the architecture of the architecture .
5938	Returns the architecture of the architecture .
5939	Returns an ArgSpec for the given function .
5940	Executes the given parser .
5941	Opens a prompt .
5942	Encodes value to output file .
5943	Attempts to guess the type of the parser .
5944	Add commands to the parser .
5945	Creates a new wrapper for the given name .
5946	Creates a new function that wraps the given arguments .
5947	Executes an action on the prompt .
5948	Creates a new Query .
5949	Add a pattern to this pattern
5950	Gets the result of the query .
5951	Search for entities .
5952	Delete all entities from the database .
5953	On delete .
5954	 lua prefix .
5955	Updates the lua code for a given index .
5956	Performs a range of documents .
5957	Iterates over the elements in the sorted set .
5958	Get the connection to the database .
5959	Convert a value to a string .
5960	Returns the indices of the given model .
5961	Remove old index .
5962	Adds an object to the database .
5963	Get the known data for a given key .
5964	Updates the lua statement .
5965	Applies the commit hooks .
5966	On delete .
5967	Fetches a model from the session .
5968	Dispatches an object to the dispatcher .
5969	Open a semaphore .
5970	Get cpu count
5971	Sends a result to the result queue .
5972	Process a worker .
5973	Adds a call item to the call queue .
5974	Ensure the executor is running .
5975	Wraps the given object into CloudPickledObjectWrapper .
5976	Starts a server .
5977	Create a copy of the given fd .
5978	Create a reusable executor .
5979	Wait for the job completion .
5980	Prepares the preparation data .
5981	Set current process data .
5982	Returns all open streams .
5983	This method is used to kill the process without a process .
5984	Terminate a process .
5985	Get the exitcode of the terminated worker .
5986	Formats the given exitcodes object .
5987	Starts the main semaphore tracker .
5988	Attempts to launch the semaphore .
5989	Process an event .
5990	Disassemble the program .
5991	Enter a console .
5992	Splits the given string into whitespace .
5993	Returns the stack position of the stack .
5994	Executes the given hook if any .
5995	Reset the stack to null .
5996	Evaluate an argument to an integer .
5997	Reads an integer from the command argument .
5998	Process commands .
5999	Add a file to the command queue .
6000	Returns the next token from the given string .
6001	Print the given message .
6002	Reads a command .
6003	Closes the connection .
6004	Performs a disassemble of the given code .
6005	This method is used to assemble instructions .
6006	Counts the number of frames in the frame .
6007	Returns the name of the call function .
6008	Print stack trace .
6009	Gets the sub - command with the given prefix .
6010	Called by subcmd
6011	Add a sub - command .
6012	Call the named command .
6013	Starts the debugger .
6014	Displays the category of the given category .
6015	Command line number information .
6016	Returns the current frame of the trace .
6017	Get thread names .
6018	Prints an integer .
6019	Prints on - off .
6020	Helper function to set a boolean value .
6021	Set an integer value .
6022	Show boolean .
6023	Show int .
6024	Show the value of the given value .
6025	Returns true if the line is a function definition .
6026	Determines if the given line is a class definition .
6027	This method is called when the debugger exits .
6028	Determines if the default background is set .
6029	Determine if the dark color is dark .
6030	Returns the line number for the given frame .
6031	Returns the auto - display expression .
6032	Returns a string representation of the specified frame .
6033	Display this object as a string .
6034	Reads a message from the socket .
6035	Debug the session .
6036	Prints command .
6037	Entry point for debugging .
6038	Checks that the given value is a simple array or not .
6039	Returns the signal name for the given number .
6040	Get the signal s signum .
6041	Returns the signature name of the signal .
6042	Handle the replacement of a signal .
6043	Check and adjust the signal handler .
6044	Handle signal .
6045	Handle command .
6046	Set the print method .
6047	Called when a signal is received .
6048	Convert filename to module name
6049	Looks up a file in the directory .
6050	Find the script file in the environment .
6051	Get the name of all the files in the caller .
6052	Write a message to the output stream
6053	Prints out information about the process .
6054	Columnizes the commands .
6055	This method is called by the post - m_moror .
6056	Closes the connection .
6057	Send a message to the server .
6058	Completes an identifier .
6059	Process the command .
6060	Ignore the given frames .
6061	Returns the filename of the given filename .
6062	Get the filename of the debugger .
6063	Check if tracing is started
6064	Check if the given frame is stopped .
6065	Process next frame .
6066	Prints stack trace .
6067	Command line .
6068	Check if function name is defined .
6069	Remove a breakpoint from the list .
6070	Delete a breakpoint by number .
6071	Disable all breakpoints .
6072	Disables a breakpoint by number .
6073	Removes breakpoint numbers from the given filename and line .
6074	Open input stream
6075	Reads a line from the input .
6076	Ask the prompt for the given prompt .
6077	Emit a whitespace token .
6078	Parses a number .
6079	Submits a query to the future .
6080	Logs the original user .
6081	Load the user - login - as function .
6082	Download a list of documents from a project .
6083	Main entry point .
6084	Reads a JSON file into a temporary file .
6085	Tries to load a file or csv file .
6086	Converts the document data to a date format .
6087	Convert a date string to a timestamp .
6088	Returns the encoding of the file .
6089	Reads the contents of the given file into a list of lines .
6090	Converts a file to UTF - 8 .
6091	Reads a csv file and converts it to a CSV file .
6092	Read a CSV file .
6093	Translates a CSV file .
6094	Creates a new auth token using the specified URL .
6095	Writes a token to the cache .
6096	Sends a request to the given URL .
6097	Perform a DELETE request .
6098	Wait for the last build .
6099	Returns the root URL of the given URL .
6100	Fetches a token .
6101	Sends a request to a specific URL .
6102	Perform a POST request .
6103	Creates a new URL with the given path .
6104	Get the default account .
6105	Gets the raw client .
6106	Wait for a job .
6107	Get raw text .
6108	Print result to stdout .
6109	Read the parameters from the input file and return it .
6110	Simplify a document .
6111	Upload a project .
6112	Adds docs to a project .
6113	Main entry point .
6114	Writes a stream to the project .
6115	Transcodes a file .
6116	Start the command line .
6117	Fetches a user s credentials .
6118	Post login page .
6119	Post login page .
6120	Fetch data from P_p resource .
6121	Get the data for this period .
6122	Loads the view .
6123	Loads the view .
6124	Render the view .
6125	Handle a message .
6126	Update menus .
6127	Returns the default handlers for this site .
6128	Trigger a change event .
6129	This method is called when a DOM node is modified .
6130	Sets the parent widget .
6131	Set the widget for this element .
6132	Destroy this component .
6133	Add a child to this component .
6134	Removes a child component .
6135	Get the child widgets for this node .
6136	Sets an attribute .
6137	Update proxy .
6138	Notifies the content of an HTML document .
6139	Finds all nodes matching the given query .
6140	Initializes the proxy with the given arguments .
6141	Initializes the raw component .
6142	Sets the content of the HTML component .
6143	Called when change is observed .
6144	Observe a block .
6145	Update the children of this block .
6146	Returns the contents of the file .
6147	Prints the given message and exit code .
6148	Called when the command line is parsing .
6149	Get a product by name .
6150	Expire a session
6151	Reset the session .
6152	Get stores for a given search term
6153	Initialize the delivery system
6154	Retrieves a menu for a given store
6155	Adds an item to the Bbbb Bb Bb Bb .
6156	Adds a pizza to the bimap
6157	Adds a product to the bom
6158	Remove an item from the basket item
6159	Set the payment method
6160	Perform payment .
6161	Perform a GET request .
6162	Perform a POST request .
6163	Call a REST API call .
6164	Adds an item to the menu .
6165	Adds the exit item to the menu .
6166	Display the current items .
6167	Get user input .
6168	Executes the selected option .
6169	Create a new menu from an old menu .
6170	Group by value
6171	Group the data in the table using the aggregation function .
6172	Converts a column to a datetime
6173	Converts a column into a string .
6174	Converts a column to a date format
6175	Convert a column to a type
6176	Sorts the data of a column in the given table .
6177	Calculate waterfall for a given date
6178	Apply a basic formula operation on a column
6179	Round the values of a column to a new column
6180	Set the absolute values of a column in the given column
6181	Apply a single column to the pivot table .
6182	Groups a group by group .
6183	Group by aggregations
6184	Compute the cumsum of the given column
6185	Adds missing rows to the table .
6186	Returns a decorator that logs exceptions .
6187	Logs a function with a given message .
6188	Log the time of the given function .
6189	Returns the shape of the given function and output shapes .
6190	Replace the values for the given locale and locale
6191	Cumulative sum sum of columns
6192	Performs aggregation on the given columns
6193	Get the value of a parameter from a call .
6194	Removes old entries from cache .
6195	Create a deep copy of the given data .
6196	Filter column with max .
6197	Select the minimum value for a column
6198	Fill the given column with the given value
6199	Calculates the offset for a given date object
6200	Returns the number of months in the given date object .
6201	Adds the number of years to a date .
6202	Parse a date string .
6203	Filter a column by date
6204	Apply a column to a column
6205	Run an A_ family core
6206	Returns the current training updates .
6207	Get the parameters of the network .
6208	Performs an optimization .
6209	Samples the first glimpse
6210	Initializes the activation layer .
6211	Computes the cost of the given input .
6212	Apply the given function to the model .
6213	Vectorize the target .
6214	Log the training set .
6215	Evaluate the training network .
6216	Computes the target of the given input .
6217	Computes the alignments for the given state and weights
6218	Compute the context vector .
6219	Computes the concatenation of the given variables .
6220	Pads the dataset with the specified length .
6221	Compute rmsprop core .
6222	Prints the elapsed time
6223	Computes the cost of a dataset .
6224	Run the benchmark .
6225	Build loop variables .
6226	Scans a loop .
6227	Compute the core of the given parameters
6228	if training flag is false otherwise .
6229	Sets the skip number of batches .
6230	Load the best parameters .
6231	Run the training .
6232	Run train .
6233	Run a valid set .
6234	Record a score .
6235	Get the current data set .
6236	Executes the given function with the given dimension .
6237	Prints information about all used parameters .
6238	Creates a variable for the given type .
6239	Gets the neural variables from a dataset .
6240	Convert an input value to an array
6241	Add encoder to the stack .
6242	Adds the decoders to the stack .
6243	Computes the encoding network .
6244	Computes the decoding network .
6245	Calculates a 2D Gaussian kernel .
6246	Updates a layer .
6247	Add mean outputs to the training monitor .
6248	Returns the free parameters .
6249	Adds the input variables to the output .
6250	Computes the output map .
6251	Saves the parameters of the network .
6252	Load the parameters from the given path .
6253	Prints information about this network .
6254	Adds parameters to the parameter list .
6255	Registers a new update .
6256	Registers a training update .
6257	Register monitors .
6258	L2 norm .
6259	Write an element to a file .
6260	Read a file from a file .
6261	Load the parameters from this block .
6262	Build request elements .
6263	Get the state of a user - state .
6264	Parses the OAuth credentials and parses it .
6265	Filter the request element .
6266	Login the user .
6267	Returns a deep copy of the given object .
6268	Convert a list of items to a map
6269	Parse query string .
6270	Try to load a provider class .
6271	Returns a cookie string .
6272	Sets the cookie .
6273	Get data from cookie .
6274	Get the data .
6275	Generates a signature for the given parts .
6276	Serialize the given value to the output .
6277	Check if the entry has expired .
6278	Check if the expiration time is in milliseconds .
6279	Returns the value of this credential .
6280	Converts the given content into a binary string .
6281	Get the content of the response .
6282	Build request elements .
6283	Get user info .
6284	Override this method to perform the login action .
6285	Authenticates the user .
6286	Returns session key .
6287	Sets a session value .
6288	Generate a random random hash .
6289	Log a message at the specified level .
6290	Checks if the given status is in the given category .
6291	Split the URL and query parameters .
6292	Register a decorator for cross - origin
6293	Sets the CORS headers .
6294	Returns a key - value pair for the application .
6295	Convert an object to a string .
6296	Converts an instance to an iterable
6297	Returns true if the two values are close .
6298	Wraps the given function .
6299	Create a new AudioSegment from a file .
6300	Create an AudioSegment from a file .
6301	Helper function for interleaved arrays .
6302	Executes a Sox command .
6303	Silly silence the audio file .
6304	Fills the image with zero padding .
6305	Builds a Frame from the frame .
6306	Normalizes the AudioSegment by average averages
6307	Create a new AudioSegment with other .
6308	Samples a audio file .
6309	Serialize this object to JSON .
6310	Creates apectrogram .
6311	Choose the front_id from the candidate offset front_id list .
6312	Gets the offset front id after the onset sample sample sample_id .
6313	Gets the offset front id after the onset front
6314	Matches onset front_id to the offset front of the onset .
6315	Finds consecutive consecutive fronts that overlap on the onset .
6316	Updates the segmentation mask .
6317	Returns the index of the front of the front
6318	Iterates over all fronts in the onset .
6319	Returns the corresponding offsets corresponding to the onset .
6320	Removes overlaps from fronts
6321	Removes all fronts that are too large
6322	Searches for poorly matched fronts .
6323	Merges segments that are adjacent to two segments .
6324	Separate masks with a threshold .
6325	Downsampling the given mask and stft .
6326	This method performs a task .
6327	Apply a filter to a band
6328	Apply a filter to a filter
6329	Converts the input data into atf input matrix .
6330	Modifies the dataset and standardizes the data set .
6331	Ignore order .
6332	Produce audit ranks .
6333	Extracts the confusion matrices from the audit file .
6334	Converts the input data into atf input matrix
6335	Update the index url from the pip_config file .
6336	Tries to find files that are valid .
6337	Get all available streams .
6338	Resolves a stream by property name .
6339	Search by predicate .
6340	Throw an error .
6341	Pushes a sample from the stream .
6342	Pushes a single chunk .
6343	Get stream info .
6344	Opens a stream for reading .
6345	Time correction .
6346	Create a child element .
6347	Get the next sibling element .
6348	Get the previous sibling element .
6349	Set name .
6350	Sets a value .
6351	Create a child element .
6352	Prepend a child element .
6353	Create a copy of this element .
6354	Create a copy of this element .
6355	Remove a child .
6356	Get stream info .
6357	Prints the list of words .
6358	Performs auto - completion on the query .
6359	Returns the edge ngrams for the given token .
6360	Helper method to create a pipe from a pipe
6361	Executes the given iterator on the cache .
6362	Performs fuzzy substitution .
6363	Performs fuzzy search .
6364	Find the fuzzy index of a word
6365	Extrapolating relations in the bucket .
6366	Prints help .
6367	Prints the database info .
6368	Displays the given key .
6369	Prints the geohash .
6370	Gets the housenumbers for a given id .
6371	Prints the index information for the given index .
6372	Determines the best score of a word
6373	Print the distance between two strings .
6374	Sends the response .
6375	Send requests to the pool .
6376	Create bits from an array
6377	casts a signature to a bit array
6378	Convert a slice to a slice
6379	Iterates through the directory and returns the files matching the pattern .
6380	Returns true if the given parameter is equal to the given value .
6381	Iterate over items .
6382	Returns a copy of a signal .
6383	Floor x .
6384	Test if a number is power 2 .
6385	Adds a constraint to this condition .
6386	Registers the stements .
6387	Registers the interfaces of the given interface .
6388	Called by the simulator .
6389	Sends a change to the VCD writer .
6390	Render a process
6391	Initialize the list of agents .
6392	Get the track associated with this clock
6393	Iterates over the elements of the iterable using the specified function .
6394	Iterates over the items in a collection and returns the results as a collection .
6395	Flattens the iterables .
6396	Merges a nested IfContainer from a IfContainer .
6397	Removes all unconnected signals .
6398	Returns true if the statement is too simple .
6399	Merges two processes .
6400	Sorts processes .
6401	Add a write request to the network
6402	For unit or unit
6403	Returns the name of the output for a process .
6404	Cut off drivers of a given signal
6405	Set default value .
6406	Creates an instance .
6407	Get the id for a stm .
6408	Get the max id of a process .
6409	Write data to the device
6410	Change the master direction .
6411	Load declarations .
6412	Create the signal for this interface .
6413	Gets the physical name of this entity .
6414	Returns the bit length .
6415	Returns the strength of the edge
6416	Evaluates the given operator .
6417	Read bits .
6418	Convert bits to a struct .
6419	Returns the number of words between start and end
6420	Split by word index .
6421	Pretty prints the interface .
6422	Finds all the parts of a template .
6423	Iterates over the parts of this word and adds them to each word .
6424	get data type
6425	Clean the meta data of a signal .
6426	Discover the enclosed statements for statements .
6427	Looks for all the sensitivity dependent on all signals .
6428	Gets the rtl context for this statement .
6429	On reduce statement .
6430	Merge two inputs into this statement .
6431	Returns true if the given statement is a mergable statement list .
6432	Merges the given statements into a list of statements .
6433	Merge two statements .
6434	Reduce a list of HDL statements .
6435	Called when a parent node is completly event dependent .
6436	Sets the parent statement of the parent statement .
6437	Adds the stements to the target list .
6438	Destroy this rule .
6439	Register a new field .
6440	Creates a signature object for the given type .
6441	Clean up a subunit .
6442	Flattens the fields of the given type .
6443	Unpack data into a struct
6444	convenience function .
6445	Add a process to the system .
6446	Evaluate condition .
6447	Set the port of the subSimUnit
6448	Creates an updater for the given value .
6449	Create an updater that updates the next item value .
6450	Create a bit value .
6451	Registers the memory port for the given hardware process
6452	Get parameter value .
6453	Change the value of this parameter .
6454	Create a HType from an interface map .
6455	Remove ports from all resources .
6456	Get index .
6457	Convert a value to a Java value .
6458	casts a type to a type
6459	casts an object to a type
6460	Recursively walk the parameters of the interface .
6461	Extracts the connected interfaces from the dst interface .
6462	Returns the signature of the interface .
6463	Generates a process for a rom .
6464	Translates this unit to RTL .
6465	Register an interface .
6466	Reduces and returns a new value .
6467	Reduces an xor value .
6468	Create a name scope .
6469	Returns true if the unit is successfully serialized .
6470	Create HDL type .
6471	Convert an if container to a statement .
6472	Get a conjunction from a given condition
6473	Get Sim t .
6474	Returns the constant name for the given constant .
6475	Cut off driver .
6476	load an array from an array
6477	Load a template from a struct
6478	Load data from a given type
6479	Returns the width of this HArray .
6480	Recursively walk all children of this tree .
6481	Fix value .
6482	Merges the given IFContainer with the given statement .
6483	Get the indent number .
6484	Check that an object has already been available .
6485	Register a parameter .
6486	Update parameters from another object .
6487	Register a unit .
6488	Register an interface .
6489	Registers an array with the given name .
6490	Get the first driver
6491	Evaluate the operands .
6492	Create a result .
6493	Creates a copy of this context .
6494	Tries to connect to the target unit .
6495	Connects the clock clock .
6496	Connects clock rst rst n .
6497	Reset clock rst .
6498	Attempt to connect to rstn .
6499	Helper method to connect to all units
6500	Read bits from a signal or one .
6501	This method is used to serialize an entity to an entity .
6502	This method is called when the object is evaluated .
6503	This method is used to serialize parameters into a unit .
6504	Returns the full name of this interface .
6505	Makes the association of all objects .
6506	Prepare a unit .
6507	Create SimModel from unit .
6508	Reconnect unit signals to the model .
6509	Computes the VCD for the given unit model
6510	Register a write callback
6511	Associates this port .
6512	Set the input signal on this port .
6513	Appends a signature to the target .
6514	This method is used to determine if the signature is in an intern .
6515	Determines if the process is dependent on the process .
6516	Adds a process to the event queue .
6517	Adds a process to the run .
6518	Schedules the completion of the CombUpdate done event .
6519	Schedule apply values .
6520	Resolve the conflict resolution strategy .
6521	Run all the components in the output container .
6522	Run sequence processes .
6523	Apply values to the signal .
6524	Get the value of the given signature .
6525	Update signal value .
6526	Process a process .
6527	Runs a unit .
6528	create an op
6529	Appends all Ternary ops to the IF container
6530	Create a signal .
6531	Calculates the Hamming distance between two hashes .
6532	Compute the hash of an image .
6533	Returns the distance between two image paths
6534	Setup the Vizio platform .
6535	Updates the state of the device .
6536	Mute the volume .
6537	Increments the volume level up .
6538	Downwards down the volume level .
6539	Set volume level
6540	Initialize the pieces .
6541	Returns the piece at the given square .
6542	Sets the piece at the given square .
6543	Removes a piece at the given square .
6544	Checks if the given move is suicide or not .
6545	Check if the turn is a suicide
6546	Checks if the game is over .
6547	Checks a checkmate .
6548	Returns true if the position of the current position is played .
6549	Restore the current move .
6550	Get the pieces .
6551	Pushes a new move .
6552	Returns the zobrist of this board .
6553	Get the symbol for this piece .
6554	Returns a new color for the given symbol .
6555	Get the symbol for this item .
6556	Parses ausi string .
6557	Extracts commits from the given data .
6558	Parses a commit .
6559	Load config from CLI .
6560	Load configuration from command line
6561	Adds an argument to the parser .
6562	Loads the configuration .
6563	Converts a yaml object into a YAML string .
6564	Generate a Markdown comment .
6565	casts a value to a string
6566	Returns a list of dates between two dates .
6567	Convert a string to a date .
6568	Load a currency file .
6569	Sets the missing rates for a given currency .
6570	Fills missing rates .
6571	Get the rate for a given date .
6572	Calculates the rate of the given amount .
6573	Returns a new lineer for the given iterable .
6574	Displays the frames .
6575	Read a record from the file .
6576	Write a record .
6577	Returns a memory view of the file .
6578	Read comment area .
6579	Write an array .
6580	Closes the DAF file .
6581	Generates a position using tdb2 .
6582	Closes the file .
6583	Load the PCK data .
6584	Adds a Chebyshev segment to this segment .
6585	Visits a call .
6586	Visits a binary operator .
6587	Visits a node .
6588	Visits a string representation of a string .
6589	Checks whether the given node is violations .
6590	implements the visitor to look for an exception handler .
6591	Returns the logging level for the given node .
6592	Returns the name of the exception handler .
6593	Returns the id of a value .
6594	Returns true if the node is a bare name .
6595	Adds an exception info violation to the log .
6596	Check if the instance has a file .
6597	Sets the file widget for the file .
6598	Renders the template .
6599	Renders template to response .
6600	Quote string .
6601	Configure the options for the given module .
6602	Converts a string to underscore .
6603	Ensure that the collection exists .
6604	Load price model from file .
6605	Gets the contents of a file .
6606	Parses a line into a price model .
6607	Translate a symbol .
6608	Load symbol maps .
6609	Get the default session .
6610	Adds a price to the database .
6611	Imports the price database .
6612	Display the latest price of a security .
6613	Fetch price for a given date .
6614	Download price .
6615	Removes old price entries from the database .
6616	Gets the default session .
6617	Save symbol map .
6618	Dump symbol maps .
6619	Gets symbol map by symbol id .
6620	Reads the lines from a file .
6621	Converts an entity to a price model .
6622	Convert a model to a price .
6623	Read configuration file .
6624	Returns the path to the config file path .
6625	Copy config file to user dir
6626	Gets the configuration path .
6627	Load the configuration contents .
6628	Sets an option .
6629	Get an option .
6630	Writes the configuration .
6631	Sets namespace and mnemonic .
6632	Adds a price to the price
6633	Updates the price entity .
6634	Download the price
6635	Get the session .
6636	Returns all price objects for a given date .
6637	Returns the price of price on a given namespace or symbol
6638	Get all security symbols .
6639	Removes the price for the given symbol .
6640	Downloads the price from the given symbol .
6641	Returns all securities .
6642	Returns the current state .
6643	Add child calls .
6644	Recursively descend this node .
6645	Returns a new wrapper for this node .
6646	Checks if the length of an equal part is equal to the solution .
6647	Checks that the AST is equal .
6648	Checks if the text contains the given text .
6649	Adds an import to the solution .
6650	Performs the test of the given text .
6651	Checks the printout of a solution .
6652	Report an error .
6653	Checks if the selected option is selected .
6654	Get function .
6655	Returns the representation of the result .
6656	Create a child node from the solution .
6657	Checks an instance .
6658	Returns a copy of the items in this map .
6659	Adds a child to this state .
6660	Get a parser from a tree .
6661	Test a context loop .
6662	Checks if the context has a context .
6663	Get the part with the given name .
6664	Checks that a part is at the given index .
6665	Check the arguments for a function .
6666	Builds a call .
6667	Get the true error of the tsky .
6668	Sets the LDAP3 login manager .
6669	Update the configuration .
6670	Create a new LDAP server .
6671	Decontextual connection .
6672	Unbinds a connection .
6673	Attempts to authenticate an LDAP user .
6674	Bind a user .
6675	Performs an LDAP search .
6676	Search for groups for a specific user .
6677	Get user info .
6678	Retrieves the user info for the specified username .
6679	Performs a search on the LDAP server .
6680	Create a new LDAP connection .
6681	Creates a new connection with the given parameters .
6682	Creates a new LDAP connection .
6683	Destroys a connection .
6684	Search for collection .
6685	Search for labels .
6686	Search for a collection .
6687	Get all jobs in a collection .
6688	Show the bot .
6689	Sends a command .
6690	Update secret settings .
6691	Sets the headers .
6692	Check if the secrets file exists .
6693	Stream URL to file
6694	Perform a GET request .
6695	Gets the authorization token .
6696	Get folder or create a folder .
6697	Read response message .
6698	Get the bucket .
6699	Read the secrets from the registry .
6700	Initialize the native app auth client .
6701	Load secrets from cache .
6702	Get the most recent log .
6703	List the logs
6704	Create a folder for an endpoint
6705	Transfer client .
6706	List all containers
6707	Display status of the given backend .
6708	Add a variable .
6709	Remove variable .
6710	Activate a backend
6711	Delete a backend .
6712	Updates the base for the image .
6713	Generates the Authorization header for the given username and password .
6714	Returns the signature of the payload .
6715	Generates a signature for the SRegistry header .
6716	Perform a DELETE request .
6717	Perform a HEAD request .
6718	Perform a GET request .
6719	Enable SSL check .
6720	Delete an image .
6721	Lookup version .
6722	Returns a list of installed dependencies .
6723	Get the singularity version .
6724	Installs a software .
6725	Get the installation directory .
6726	Returns the thumbnail of the robot .
6727	Execute a command
6728	Get metadata from database file
6729	Updates the secret .
6730	Show the output of the container
6731	Destroys all commands .
6732	Main entry point for logs .
6733	Get the list of collection names
6734	Update the secret information .
6735	Updates the secret settings .
6736	Get the S registry client .
6737	Installs a command .
6738	Get manifests .
6739	Get the manifest
6740	Download cache .
6741	Gets the environment variable .
6742	Update base settings .
6743	Update secret token .
6744	Get the metadata for the job
6745	Returns the settings for the given client .
6746	Get and update a setting .
6747	Updates the setting .
6748	Generate a signature for the registry request .
6749	Dump the builders for a specific project .
6750	Looks for a specific configuration .
6751	Get the IP address for a given name .
6752	Build an instance .
6753	List the containers
6754	List all containers in the bucket .
6755	Entry point to the S registry .
6756	Shares the command to the command .
6757	Initialize the database .
6758	Get the build template
6759	List endpoints .
6760	Display a list of endpoints
6761	Get list of files under a specific endpoint .
6762	Creates a shared link .
6763	Gets the client secrets .
6764	Build service services .
6765	Delete object .
6766	Delete file .
6767	Kills an instance .
6768	Gets the sub parsers for this parser .
6769	Returns a string with the given delimiter .
6770	Creates the temporary directory .
6771	Extracts a tar archive .
6772	Extracts a tar archive .
6773	Hashes a file .
6774	Read file content .
6775	Read a json file .
6776	Remove files .
6777	Uploads an image .
6778	Get a collection by name .
6779	Gets the collection with the given name .
6780	Get a container by name and version
6781	Display all containers in the database
6782	Get the collection fields as JSON .
6783	Renames a container file .
6784	Moves image to the specified path .
6785	Remove a remote container
6786	Adds the image to the registry .
6787	Intercepts an image .
6788	Get the header from the recipe
6789	Add a recipe to the manifest
6790	Generate the build package .
6791	Starts a build .
6792	Get metadata for blob
6793	Converts a container name into a container name .
6794	Get the color of the user .
6795	Checks if the given level is an error .
6796	Write message to stream .
6797	Adds a message label to the table
6798	Sends a push request to the container .
6799	Get the template for the given name .
6800	Get manifest for a specific tag
6801	Tries to build a template .
6802	Read client secrets .
6803	Returns a representation of the given class .
6804	Extracts the errors from the response .
6805	Creates a temporary proxy instance .
6806	Gets the Gravatar url for a user .
6807	Get a Gravatar URL
6808	Gets the gravatar image .
6809	Get the Gravatar profile URL .
6810	Generate a block of blocks .
6811	Returns a graph of blocks between two blocks .
6812	get resonance s smiles
6813	Returns the mol supplier for the given mol .
6814	Converts the given molecule into a single molecule .
6815	Apply transform to the given mols .
6816	Get the best tautomers .
6817	Validate smiles .
6818	Remove all covalent bonds from the given molecule .
6819	Convert smiles to smiles .
6820	Convert tutomers smiles to smiles .
6821	Converts Tutomer smiles into a canonical smiles .
6822	This method is used to calculate stereochemistry .
6823	Returns the tautomer parent of the given mol .
6824	Returns the parent of this molecule .
6825	Remove stereochemistry from the given mol
6826	Returns the parent of this Motope object .
6827	Gets the charges of this molecule .
6828	Get the parent of this molecule .
6829	Main entry point .
6830	Removes all fragments in the given mol
6831	Runs the LargestFragmentChooser on the given mol .
6832	This method is used to integrate anivp .
6833	Get the stats for the github organization
6834	Get the members of an organization .
6835	Get the teams of the given organization
6836	Get all the repositories .
6837	Counts the total contributors
6838	Iterates over all pull requests in the given repository .
6839	Retrieve all issues for the given repository .
6840	Gets the readme for a given repository
6841	Searches for a license .
6842	Retrieve all commits for the given repository
6843	Generates a JSON file for the given organization
6844	Writes the total number of items to the file .
6845	Write all languages .
6846	Creates the directory for the given file .
6847	Updates the date with the given date .
6848	Gets the gov_orgs for the gov .
6849	Open an enterprise session .
6850	Check API limits
6851	Creates a new session using the provided URL .
6852	Returns a list of repositories .
6853	Get an organization
6854	Writes a file to a file
6855	Loads a project from a repository .
6856	Convert a record to a project .
6857	Returns the URL of the given license .
6858	Get traffic from the user
6859	Fetch the release information from the repository
6860	get referrers
6861	Fetch data from a specific date
6862	Writes a list of repositories to a JSON file .
6863	Writes data to a file .
6864	Read redundancy data .
6865	Write data to file
6866	Write referrers to file
6867	Read a JSON document from a file .
6868	Fetches a URL from a URL .
6869	Process json file .
6870	Authenticates the user with the given username and password .
6871	Get the members of an organization
6872	Write the logins to a file
6873	Connects to the given URL .
6874	Get the gitlab version .
6875	Get a list of projects .
6876	Get the sloc from a repository
6877	Calculates thelabor hours of a sloc .
6878	Removes null values from a dictionary
6879	Read the GQL query file .
6880	Queries a GQL file .
6881	Submit a git query
6882	Waits for the current time to reset .
6883	Wait for a number of seconds .
6884	Load the data .
6885	Save the data to a file .
6886	Creates a Vss connection to Vss .
6887	Create a new TFS project analysis client .
6888	Creates a TFS core client .
6889	Creates a TFS Git client .
6890	Creates a TFS Git client .
6891	Retrieves git repositories for a collection
6892	Retrieves a list of TfVC branches for a collection
6893	Calculates the number of commit commits .
6894	Adjusts the total number of commits
6895	Writes the last year commits to the file .
6896	Instantiates the backend .
6897	Get metrics interface .
6898	Log a timing value .
6899	Record a timing value .
6900	Returns a timer decorator for the given timer .
6901	Builds a tag .
6902	Log a timing event .
6903	Log a histogram .
6904	Flushes the gauge .
6905	Builds a case field of the given members .
6906	Convert a value to an enum value .
6907	Convert a value to a enum .
6908	Prepares a value .
6909	Resolves a path for a given path .
6910	Find the usls on a dictionary .
6911	Returns the sum of the current value .
6912	Update the counter .
6913	Returns the rate of the current thread
6914	Marks the current value as a Derive .
6915	Send a metric .
6916	Formats a metric as string .
6917	Returns a serialized metric string .
6918	Sends a metric .
6919	Returns the value for the given option in the given section .
6920	Converts the given data to JSON .
6921	Gets the value of the given option .
6922	Returns a map of ledger identifiers for the given codes .
6923	Returns the current divisions .
6924	Get the foreign invoice number from the exact invoice number .
6925	Solves the SAT .
6926	Creates a view .
6927	Creates a form view .
6928	Creates a method view .
6929	Creates the API view .
6930	Applies the generic API view .
6931	Creates a view set .
6932	Read a reader from a file .
6933	Read data from the file .
6934	Closes the connection .
6935	Call the connection lost .
6936	Registers a watch request .
6937	Closes a watch .
6938	Sets up a watch on a path .
6939	Open inotify stream .
6940	Get an event from the stream .
6941	Trigger a touch event .
6942	Update the interval .
6943	Update the interval .
6944	Close the connection .
6945	Check if the connection is starved .
6946	Connect to the specified host and port .
6947	Start lookupd request .
6948	Set max in - flight state .
6949	Logs up a message .
6950	Adds a callback to the listener .
6951	Removes a listener .
6952	Calls the event listener .
6953	Publish a message to a topic .
6954	Apply feature transform .
6955	Run the prediction on the input data
6956	Calculate the value of a Gaussian value .
6957	Parses the log .
6958	Remove all unpaired fastq files .
6959	Reads the default adapters .
6960	Run trimmomatic
6961	Read depth file .
6962	Generate coverage results
6963	Sets the template file path .
6964	Sets the main channel name of the main channel .
6965	Get user channel information
6966	Render a template
6967	Render the template .
6968	Sets the input channel channels .
6969	Appends the main_forks to the output channel .
6970	Set the secondary channel .
6971	Updates attributes of this component .
6972	Sets the compiler channels .
6973	Sets the raw inputs of the process .
6974	Sets secondary inputs .
6975	Adds extra inputs to the process .
6976	Parses the coverage string .
6977	Parses the given assembly file .
6978	Get the content of the sequence
6979	Performs filtering on all contigs .
6980	Returns the length of the assembly .
6981	Writes the filtered assembly to the output file .
6982	Writes the report to the output file .
6983	Iterates through the text into a nested structure .
6984	This method checks for a fork of a pipeline string .
6985	Executes the sanity checks in a pipeline string .
6986	Parses a pipeline string .
6987	Determines the source lane for a fork process .
6988	Parse lanes from raw string .
6989	Establishes a linear connection between two processes .
6990	Establish a connection to a process .
6991	Replaces all unique identifiers in the pipeline string .
6992	Replaces all unique identifiers in the pipeline links .
6993	Check the required files and log files .
6994	Maps a header to a mapping .
6995	Returns the HMs from the given string .
6996	Convert size to KB .
6997	Retrieves the process names from the log file .
6998	Clean up the statistics .
6999	Updates the barrier status .
7000	Retrieve log from file .
7001	Assess the resource usage .
7002	Update the process stats for each process
7003	Parses the log file .
7004	Perform inspection .
7005	Render the overview .
7006	Upwards the top line of the screen .
7007	Right left and right padding for the screen .
7008	Read log lines from the log file .
7009	Prepare the static configuration files .
7010	Read dag file from the tree . json
7011	Calculates the hash of the run .
7012	Returns the path of the nextflow pipeline file .
7013	Main method for splitting a sequence of sequences
7014	Process the trace file .
7015	Run innuendo pipeline .
7016	Get the brew recipe .
7017	Load the recipes .
7018	Check if pipeline string is valid
7019	Adds the upstream pipeline to the pipeline .
7020	Recursively builds the downstream pipeline fragment .
7021	Builds the task pipeline string .
7022	Auto - pipeline string .
7023	Returns a string representation of a component .
7024	Write report .
7025	Extract the trimmomatic report from the given log files .
7026	This method is used to write a sequence of assembly names .
7027	Cleans up a temporary file .
7028	Process files .
7029	Parses the contents of a file .
7030	Applies filters to the storage .
7031	Returns the id of the given contig string .
7032	get plot data
7033	Write report data
7034	Process the assembly file .
7035	Parse an assembly file into a sequence
7036	Get summary statistics .
7037	Returns the window labels for the given window .
7038	Calculates the GC property .
7039	Calculates the sliding sliding window values for this sequence .
7040	Performs the skesa command .
7041	generate JSON report
7042	Removes the biased position from the biased list array .
7043	Read trim range .
7044	Calculate the optimal trim position for five samples .
7045	Retrieve summary information from a file .
7046	Performs the health check .
7047	Print the log
7048	Parses a process name .
7049	Adds a dependency to the pipeline .
7050	Searches the tree for the given template in reverse direction .
7051	Builds the header .
7052	Builds the footer .
7053	Sets the main channels for this process .
7054	Sets the init process .
7055	Sets secondary channels .
7056	Sets the status channels .
7057	Returns a string representation of resources .
7058	Returns the container config string .
7059	Returns a string containing the parameters for this process .
7060	Gets the merged configuration string .
7061	Get manifest string
7062	Sets the configuration .
7063	Write the DAG to a file .
7064	Generates a visualization of the pipeline .
7065	Write resources config files .
7066	Write the parameters to stdout .
7067	Write directives to stdout .
7068	Builds the container tag list .
7069	Builds the configuration file .
7070	Determine the kmer option .
7071	Runs the Metades
7072	Returns the id of the report .
7073	Process the trace file .
7074	Check to see if the log file has changed .
7075	Send a live report .
7076	Start a report live update .
7077	Closes the connection to the given report .
7078	Convert an adapter file to an adapter file .
7079	Runs the FastQC command .
7080	Write mash distribution to output file
7081	Extracts the shared hashes from the input file .
7082	Writes additional version information .
7083	Reads the data from the mash output .
7084	Print a message to stdout
7085	This method is used to print a list of processes to stdout .
7086	Runs the process collector
7087	Returns the file type of the file .
7088	Returns the range of the qualifier .
7089	Returns a list of all encodings in the range
7090	Get the coverage table .
7091	Write sequence data to output file
7092	Calculate the list of contigs for the given coverage file .
7093	Determines the minimum coverage .
7094	Calculates the size of the assembly file
7095	Process the assembly .
7096	Converts a name to camel case .
7097	Load the process map .
7098	Process a newick file .
7099	Returns the hull .
7100	Maps data to the best data sample .
7101	Returns the median filter .
7102	Gaussian gaussian function .
7103	Computes SM distance between X and Suclidean distance .
7104	Compute the nc value
7105	Apply a gaussian filter on the axis
7106	Computes the variance of the given dataset
7107	Shifts the given matrix to a lower case .
7108	Returns the space of the given data .
7109	Plots the formatting of the algorithm .
7110	Plots the boundaries of the estimates .
7111	Plots all labels in the estimates .
7112	Generate a single track .
7113	Plots a tree with a given path
7114	Get the feature segments for the given feature dimensions .
7115	Computes the 2D feature segments for each feature .
7116	Computes the similarity between two features .
7117	Applies the dataset to the dataset .
7118	Performs the fit algorithm .
7119	Read references from the audio file .
7120	Determines estimations for the given boundaries .
7121	Generate the estimations for the given times .
7122	Get all boundary algorithms .
7123	Returns the configuration of the feature .
7124	Get the files from a dataset .
7125	Builds the hierarchy references .
7126	Get the duration of the features file
7127	Converts times to mirex .
7128	Gets the file name for the dataset .
7129	Attempt to segment the beat information .
7130	Compute the beat tracks .
7131	Read beat annotations .
7132	Make the beat sync features .
7133	Check for features .
7134	Read the features from the file .
7135	Returns the names of all parameter names in this object .
7136	Compute framesync times .
7137	Compute the frame times .
7138	Compute the features
7139	Select features from the file .
7140	Prepares the feature .
7141	Performs the post - processing of the F .
7142	Run the speficied algorithm .
7143	Print results .
7144	Evaluates the estimations for estimations .
7145	Computes the information gain of a beat .
7146	Performs a track on the file .
7147	Generate the file name for the results .
7148	Run a segmentation .
7149	Adds a config param .
7150	Computes all features from a file .
7151	Get all features from a file .
7152	Computes the cost of a Gaussian Gaussian .
7153	Normalizes the F and returns the normalized F .
7154	Maxizes F .
7155	Normalize the given X .
7156	Returns the time frames in milliseconds .
7157	Adds empty segments .
7158	Converts an audio file into an audio file .
7159	Convert labels to new labels
7160	Computes the segmentation level for a given frame .
7161	Calculate the end of hierarchies .
7162	Computes the distance between the specified node .
7163	Computes the k - k - means of the dataset
7164	Clustered data .
7165	Performs kmeans on a dataset .
7166	Calculates the BIC for the data
7167	Returns the norm of a matrix
7168	Convert segments to bounds .
7169	Convert bounds to bounds .
7170	Converts the given segments to labels .
7171	Convert beats to beats .
7172	Perform a 2D transform
7173	Get the labels for the given rank
7174	Computes activation matrix .
7175	Returns the module for boundaries .
7176	Get the module for the labels .
7177	Performs a hierarchical segmentation on the hierarchy .
7178	Segment the file .
7179	Run audio algorithms .
7180	Segment the given file .
7181	Load audio files .
7182	Compute the single w .
7183	Execute translation .
7184	Returns a new initialization of the given function .
7185	Add the initial and update .
7186	Translates a translator to a string .
7187	Helper method to pool all words in the iterable
7188	Send stdin to the target .
7189	Wrap a HTTP interface .
7190	Performs a GET request .
7191	Get the table for a given language .
7192	Prints the table for the given language .
7193	Remove nodes from the given network .
7194	Convert a network to a PDF file .
7195	Create a new instance from a PDF file
7196	Removes a new variable from the network .
7197	Get all access variables for a given distance
7198	Returns the node id for the given X and mapping distance
7199	Draw data .
7200	Initializes the poi category .
7201	Finds the pois for a given distance
7202	Returns the connectivity of the given impedance range .
7203	Convert a node to a node .
7204	Performs an OM query on an OSM query .
7205	Returns a query for a node .
7206	Execute an OSM query .
7207	Check if the value is a regular expression
7208	Compares value with expected expectation .
7209	Wrap a method .
7210	Returns true if the given value matches the given value .
7211	Sets the methods of the given instance .
7212	Checks if matches the given request .
7213	Get matcher by name .
7214	Get matcher by name .
7215	Sets the body of this request .
7216	Sets the response body .
7217	Adds a new value to the container .
7218	append functions to target
7219	Trigger a request instance .
7220	Set URL .
7221	Set headers .
7222	Adds a matcher to the list of headers .
7223	Adds a matcher to the header .
7224	Sets the header value .
7225	Add a query parameter .
7226	Sets the body of this request .
7227	Sets the JSON value .
7228	Sets the XML .
7229	Read body from file .
7230	Sets the state of this item .
7231	Sets the error .
7232	Create a Response instance with the given status .
7233	Matches a mock request .
7234	Wraps the given function .
7235	Configure the mock engine .
7236	Check if network is connected .
7237	Creates a new HTTP mock expectation .
7238	Adds a mock to the mock list .
7239	Activate mock engine .
7240	Disable mock engine .
7241	Checks whether or not the given request should be used .
7242	Matches the given request .
7243	Create a new request from this request .
7244	Activates the given function .
7245	Returns the current engine s engine .
7246	Add interceptor to the engine .
7247	Remove an interceptor with the specified name .
7248	Get a setting from the connection .
7249	Returns the SQL for the derypted column .
7250	Saves the original hash value .
7251	Generate placeholder .
7252	Returns the column for the given alias .
7253	Generate placeholder .
7254	Transforms a list of keys into a list of keys .
7255	Calculates the regression
7256	Returns the inverse of this tree .
7257	Computes the variance of a tree .
7258	Calculates the averages for a given tree .
7259	Calculate average averages for a given node .
7260	Returns the variance of the tree .
7261	Calculate the clock model
7262	Finds the best root of the tree
7263	Sets the tc .
7264	Calculates the sum of branch counts
7265	Calculates the rate for a given branch length
7266	Translates clade to tree .
7267	Update the coalescent time scale .
7268	Convert a profile into a sequence
7269	Returns a profiling profile .
7270	Sets the GTR instance .
7271	Sets the GTR model .
7272	Set sequence length .
7273	Attach sequences to the tree .
7274	Initializes the tree .
7275	Prepares the nodes of the tree .
7276	Calculates dist2 root of the tree .
7277	This method can be used to infer an an acstral from the tree .
7278	Compute branch mutation matrix .
7279	Get the reduced sequence of the given node .
7280	Creates the Fitch profile for the tree .
7281	Returns the fitch state of a given node .
7282	Computes the fitch_intersect between two arrays .
7283	Returns the sequence for the given position .
7284	Returns the likelihood of all nucleotide
7285	Computes the maximum branch length of a node .
7286	Optimize the branch length .
7287	Optimize branch length .
7288	Computes the optimal branch length
7289	Optimize sequence and branch length .
7290	Reconstructed alignment .
7291	Computes the diagonal of this matrix .
7292	Creates a new instance of GTR .
7293	Get a model .
7294	Check the GTR rate matrix .
7295	Compress t t t
7296	Computes the optimal t of the sequence pair .
7297	Computes the probability of a sequence of sequences to be separated by a given time .
7298	Computes the probability of the given profile pair .
7299	Solves the profile and returns the log
7300	Computes the log likelihood of a sequence sequence .
7301	Sets the branch length mode .
7302	Filter the tree .
7303	Draw the tree tree to the tip .
7304	Resolve polytomies .
7305	Prints the tree log - likelihood .
7306	Adds the coalescent model to the tree
7307	Find the best root .
7308	Replies the tree .
7309	Creates the GTR .
7310	Check if VCF is in VCF format
7311	Performs the reconstruction of the VCF .
7312	Computes the FWHM for the given distribution
7313	Creates a new distribution from x_pos .
7314	Multiply delta functions
7315	Assign dates .
7316	Tree regression .
7317	Obtains the maximum likelihood tree .
7318	Computes the likelihood of the tree .
7319	Converts the dates in the tree to human readable dates .
7320	Get the uncertainty of a node
7321	Returns the max posterior region of a node .
7322	Returns the interpolation value .
7323	Computes the median of the grid .
7324	Returns the date of the current date .
7325	Create a regression model from the clock model
7326	Gets the client .
7327	Closes the connection .
7328	Receives instruction .
7329	Send data to the client .
7330	Sends an instruction to the server .
7331	Starts the handshake .
7332	Convert a string to a UTF - 8 encoding .
7333	Parses an instruction .
7334	Returns the string representation of the argument .
7335	Returns the instruction representation of this instruction .
7336	Returns the URL for the resource .
7337	Returns the URL of this instance .
7338	Returns the URL of the class .
7339	Performs a download request .
7340	Gets the parent job object .
7341	Ask for a domain .
7342	Ask for a login token
7343	Display the user
7344	Logs a user .
7345	Create a clone of this Filter .
7346	Create a clone of this Genomic filter .
7347	Create a clone of this Genomic filter .
7348	Returns a list of facets .
7349	Process filters .
7350	Gets the cursor .
7351	Executes a solve query .
7352	Creates a dataset migration .
7353	Parse the solvebio command
7354	Downloads a vault folder .
7355	Refreshes the instance from the given values .
7356	Revokes the OAuth2 token .
7357	Perform a HTTP request .
7358	Gets the child object of this task .
7359	Update this object s status .
7360	Parse the SSNPEFF information from the SNA record .
7361	Converts the given row to a JSON string .
7362	Get the credentials .
7363	Writes a file to a file .
7364	Format a value .
7365	Normalizes the tabular data .
7366	Builds a row of cells .
7367	Build a line of cells .
7368	Returns the cell attributes for the specified row .
7369	Format a table .
7370	Creates a dataset migration .
7371	Parses the vault s path .
7372	Uploads a file to the vault .
7373	Validates a vault path .
7374	Check if the given URL is valid .
7375	Adds files to the manifest .
7376	Execute records .
7377	Evaluates the expression .
7378	Sets the format name .
7379	Creates a new formatter handler .
7380	Formats the output data .
7381	Write data to table .
7382	Returns the directory of the user - config file .
7383	Get the directories for the system configuration files .
7384	Read the default config .
7385	Get the configuration .
7386	Gets the config file .
7387	Gets the config files for the application .
7388	Returns the path of the file .
7389	Writes the default config file .
7390	Read the configuration files from the given files .
7391	Returns the string value of the given value .
7392	Replaces all occurrences of a string in s s .
7393	Run the commands in a sequence
7394	Apply options to the command .
7395	Apply option to command .
7396	Initialize the options .
7397	Apply fix fix option .
7398	Calls the command on the command line .
7399	Truncate string .
7400	Formats a list of numbers using the specified format and column types .
7401	Formats a row with the given headers .
7402	Creates a table with columns and headers .
7403	Generates a table with the specified headers .
7404	Write template .
7405	Checks if the certificate type is valid .
7406	Returns boolean .
7407	Check if the type is a bin
7408	Generates a key .
7409	Generates a public key pair .
7410	Find objects .
7411	Insert an image .
7412	Export the panel
7413	Returns the first weekday of the specified weekday .
7414	Counts the number of occurrences of the specified day .
7415	Reverse the event .
7416	helper method to perform biweekly .
7417	Handle a single chunk event .
7418	Returns a list of variants for the given document .
7419	Generate a document for verified variants .
7420	This method is used to format the MIT_ variants of the given sample .
7421	Update role .
7422	Retrieves a list of variants for a given case and case name
7423	Fetch data for a variant .
7424	Load a string variant .
7425	Handles a variant verification request .
7426	Export data for clinvar .
7427	Get the possible variants for a given instance .
7428	Process a variant
7429	Handle an evaluation .
7430	Gets classification .
7431	Upload a panel to the user .
7432	Downloads the user s verified data .
7433	Returns a set of genes for a given gene alias .
7434	Add incomplete penetrance information
7435	Link the genes .
7436	Send a request to MME
7437	Get the connected nodes .
7438	Get the cytoband coordinates for a given chrom position
7439	Returns the sub category for the given category .
7440	Get the length of the alt_length
7441	Get the end position of the end field .
7442	Get the coordinates of a variant .
7443	Check to see if any coordinates are present
7444	Update a panel
7445	Update a panel .
7446	Export a panel .
7447	Edit a panel
7448	Load delivery report .
7449	Returns a list of hpo terms for a given query
7450	Run all users .
7451	Read a phenotype from the adapter
7452	This method is used to generate gene variables .
7453	Returns the JSON for the given query
7454	Handles the user access .
7455	Demonstrates how to display the transcripts .
7456	List of events on a given day .
7457	Get information about the variants in the case .
7458	Search for variants in a particular case .
7459	Retrieve information about a variant .
7460	Adds information about a variant .
7461	Update a variant .
7462	Generate the header for a case object
7463	Get the variant information for the given genes .
7464	Generate the predictions for the given genes .
7465	Adds a case object to the case .
7466	Get the bi file name
7467	Returns the observation data for a given variant .
7468	Parses the gene object and adds the primary transcripts for each gene
7469	Convert a transcript object to a change string
7470	Returns the position of a variant object .
7471	Returns the title of the variant
7472	Get clinsig objects from a variant object
7473	Returns a link to the resource
7474	Returns the cosmic link .
7475	Returns a link to a variant
7476	Returns a link to a variant .
7477	Returns a human readable representation of the spidex object
7478	Returns the set of auto inheritance models for the given variant object .
7479	Get a list of calls for a given variant object .
7480	Get a list of all the variants for a given request
7481	Export a variant from a store .
7482	Returns a copy of the clinvar submission .
7483	Generate ACM G for a specific variant .
7484	Submits a classification for a variant .
7485	Implementation of ACMG evaluation .
7486	Display the environment panel .
7487	Export the verified variants .
7488	Export all genes from the adapter
7489	Generate clnsig information .
7490	Build a list of compounds from a case_info file
7491	Export genes .
7492	Converts an individual object into a Pedigree object .
7493	Load a case .
7494	Handles an institute and case .
7495	Runs the scout view views .
7496	Load an institute .
7497	Update an institute .
7498	Open file handle .
7499	Get the network number
7500	This method is used to determine the next and the next one .
7501	Check the year and error .
7502	Get the weekday of the given year and day
7503	Get the data for the case .
7504	Parse Peddy data .
7505	Get the individual information for a given sample .
7506	Extracts the individuals from a sample .
7507	Parses the case data .
7508	Extracts a Pedigree from a PED file .
7509	Create an evaluation object .
7510	Generate the report for the given case .
7511	Returns whether or not the pathogenic term is pathogible .
7512	Returns true if there are any pathogenic terms .
7513	Returns true if benign is likely to be determined by bp .
7514	Predicts the prediction for the acmg .
7515	Add information about the gene in the variant object
7516	Fetches all variants from the given case .
7517	Returns all variants in the variant collection .
7518	Returns the variant object for the given document
7519	Returns a collection of variants with the specified category .
7520	Returns all valid events for the given institute .
7521	Returns the causatives for the given case .
7522	Returns all causatives for the given case object .
7523	Get all causatives from the given case object and variant object
7524	Delete old variants for a case
7525	Returns a collection of variants for a given variant
7526	Get all variants for a particular case
7527	Get the vf file for a given case object
7528	Retrieves the variants for a specific sample
7529	Open a MongoDB connection .
7530	Generates a collection of object objects from the form data .
7531	Returns the header of all clinvar objects that have been passed in .
7532	Generates a line of invar submission objects .
7533	Fetch all transcripts from the ensembl file .
7534	Load OMI panel
7535	Get the exon information .
7536	Delete a panel
7537	Delete all indexes
7538	Delete a user .
7539	Delete genes .
7540	Delete exons from a build .
7541	Deletes a case .
7542	Display the individuals of the given case .
7543	Parse match objects from a patient .
7544	Demonstrates how to show a case .
7545	Looks up a user .
7546	Login the user .
7547	Build an instutes object .
7548	Deletes an event .
7549	Save an event
7550	Fetches all comments for a variant .
7551	Returns the events for the given user .
7552	Retrieves the phenotype information from the given case
7553	Remove a phenotype term from the case
7554	Create a comment .
7555	Returns the genotypes for the given individuals .
7556	Checks if the given chromosome is valid
7557	Fetches a list of hpo terms
7558	Export transcripts .
7559	Load exons .
7560	Load region .
7561	Returns a list of events for a particular month
7562	Removes all events that have a given time .
7563	Parses the requirements file .
7564	Check if a gene exists in the panel
7565	Process a gene panel
7566	Build gene panel
7567	Export panel object
7568	Get information about the archive
7569	Update the case .
7570	Migrate to the archive
7571	Load a case .
7572	Fetch gene objects .
7573	Runs hpo view hpo view .
7574	Initializes the application .
7575	Initialize extensions .
7576	Register all the blue - blue blue blue .
7577	Processes the application .
7578	Executes the scout view aliases .
7579	Build panel .
7580	Export verified variants .
7581	Export VCF variants .
7582	Adds a VCF entry to the VCF file .
7583	Test if mongod is running .
7584	Generate a key for a list of arguments
7585	Connects to the given application .
7586	Initializes the collection collection .
7587	Run scout index .
7588	Runs the scout .
7589	Run scout demo
7590	Connect to Scout - demo
7591	Display all the institutes .
7592	get genetic models from the model info
7593	Demonstrates how many panels are available .
7594	Adds an institute to the database .
7595	Updates an institute .
7596	Fetch the institute with the given id .
7597	Checks if the given date is a valid date .
7598	Parse a date .
7599	Export hpo genes .
7600	get rank score
7601	Add user .
7602	Test a MongoDB connection .
7603	Configures the application .
7604	Saves the delivery report .
7605	Adds a user object to the database .
7606	Run pilup .
7607	Load exons .
7608	Updates the compounds of a case .
7609	Add links to gene_object
7610	Display the gene variables .
7611	Looks for hgnc_ gene .
7612	Parse hgnc genes from lines .
7613	Retrieves an openclvar submission for a user .
7614	Updates the clinvar submission .
7615	Returns the clinvar id for the given submission .
7616	Insert variants and case data in the cluster .
7617	Closes a clinvar submission .
7618	Retrieves all clinvar submissions for a given user .
7619	Deletes the clinvar object from the submission object .
7620	Gets the clinvars from the given case
7621	Extracts the OPO data from the lines .
7622	Return all genes in the database
7623	Gets the genes .
7624	Returns a list of generated genes
7625	Checks if panels exist .
7626	Load the VNV variants for the given case
7627	Loads the case .
7628	Decorates a template with the specified template .
7629	Handle institute and case .
7630	Get the institutes for the login user
7631	Get the unique ID of the given gene .
7632	Updates a gene panel .
7633	Load all diseases terms
7634	Fetches the dhoase terms from the hpo dpo .
7635	Get the frequency of a variant
7636	Get the frequency of a variant .
7637	Returns the frequency for the SSV variant .
7638	Display users .
7639	Fetches the gene information for the given gene
7640	Builds the gene panel .
7641	Fetchomim panel .
7642	Given an existing panel creates a new panel if it doesn t exist .
7643	Update the version for the mim table
7644	Adds a gene panel to the database .
7645	Returns the panel object with the given id .
7646	Deletes a panel .
7647	Fetch gene panel from database .
7648	Returns the panel with the specified id .
7649	Build the gene to panels .
7650	Updates panel .
7651	Add a pending action to a panel
7652	Add pending panel to the panel
7653	Returns the set of symbols for a specific panel .
7654	Handles a case .
7655	Send a record to mail .
7656	Creates indexes for the given collection .
7657	Update indexes .
7658	Drops all indexes
7659	Build a mongo variant query .
7660	Build a mongo query based on a case id
7661	Returns a query for clinsig values .
7662	Add genomic coordinates to the query
7663	Add a query to the mongo query .
7664	Dipes a database .
7665	Parse the gene panel
7666	Convert clnsig_info object to clnsig object
7667	Bulk bulk .
7668	Bulk bulk operation .
7669	Bulk bulk operation .
7670	Fetch the gene object for the gene .
7671	Get the gene id for the gene
7672	Fetches the genes with symbol that match the given symbol .
7673	Fetch all genes in the database .
7674	Returns the number of genes for the given build .
7675	Cleans up the gene collection .
7676	Drop the transcript collection .
7677	Drops the exons collection .
7678	Fetch all ensembl transcripts from the ensemble collection .
7679	This method is used to build HGNCS symbol map from the given genes .
7680	Looks for the given symbol in the database .
7681	Fetch all genes by alias .
7682	Fetch all genes from ensembl .
7683	Get the hgnc symbol for the hgnc
7684	Set the hgnc_id of the gene
7685	Build intervals for the coding intervals .
7686	Updateomim panel .
7687	Returns a list of cases matching the query parameters
7688	Executes an institute and case .
7689	Redirect match to match .
7690	Handle match .
7691	Handle delete request .
7692	Gets the case report .
7693	Renders a case .
7694	Dnose the given instance and case name .
7695	Deletes a phenotypes from a case .
7696	Handles actions for a specific case .
7697	Handles an institute and comment .
7698	Handle an institute and archive case .
7699	Attempts to assign an institute and user .
7700	List of hpo terms
7701	Handle validation of a variant .
7702	Handles a causative request .
7703	Gets the delivery report .
7704	Share an instance with the given case name .
7705	Sends a rerun action to the server .
7706	Opens an institute with the given name and case name .
7707	Sends a VCF2SS file to the controller .
7708	Download multiqc file .
7709	Fetches a list of cases .
7710	Generate the report content .
7711	Builds the report contents .
7712	Returns the clinvar submissions for a given user .
7713	Exports the given case object to an Excel file .
7714	Updates the synopsis of a case .
7715	Query the diseases .
7716	Convert the given individual to a cyf style .
7717	Queries the institute and case .
7718	Retrieves a list of all variants that have been un evaluated .
7719	Create a new MME
7720	Perform a DELETE request on a MME .
7721	Get a list of matches for a given MME .
7722	Performs a local match .
7723	Performs the Scout update .
7724	Get the caller names for the specified variant .
7725	Looks for the given transcript information .
7726	Adds an institute to the database .
7727	Get the cadd of the variant
7728	Called when the Scout is running .
7729	Updates a variant .
7730	Updates the rank of a case .
7731	Collects the compounds for a given variant .
7732	Updates the compounds of a variant .
7733	Updates the compound variants in the bulk .
7734	Updates the compounds of a case .
7735	Load a variant .
7736	Upsert a variant .
7737	Load variant bulk .
7738	Adds a user to the case
7739	Updates a case .
7740	Checks if there is a diagnosis .
7741	Update the status of a case
7742	Update the verification for a variant .
7743	Returns all sanger variants sorted by case_id .
7744	Validates a variant .
7745	Marks a case as causative .
7746	Dismiss a variant .
7747	Sets the acmg value for a variant .
7748	Parse the ids of a sequence .
7749	Generate simple id .
7750	Generate a MD5 document id .
7751	Parse genes panel .
7752	Convert a variant object to a new document id .
7753	Fetch all cases that match the query
7754	Update dynamic gene list .
7755	Fetches a case .
7756	Delete case .
7757	Adds a case .
7758	Saves a case object .
7759	Updates the case id of a case .
7760	Builds an evaluation .
7761	Returns the evaluations for the given variant .
7762	Parses the transcripts from the ensembl file .
7763	Parse the genes from the query request
7764	Parses the ensembl query from the request .
7765	Parses the ensembl line .
7766	Builds a list of ensembl genes from a file .
7767	Parses the ensembl exons .
7768	Extracts the exon information from the query result .
7769	Add log messages to a logger .
7770	Extracts a line from a line .
7771	Returns a list of Momimid from the given lines .
7772	Extracts the phenotypes of the mim2 gene
7773	Prints all files .
7774	Converts a string to a number .
7775	Renders a month
7776	Set day .
7777	Display the month name
7778	helper method to handle the event
7779	Get panel info .
7780	Get the gene information from the database .
7781	Returns the genes of the gene file .
7782	Parses a gene panel .
7783	Displays all diseases .
7784	Drops hpo terms .
7785	Sorts all users .
7786	Parse the conservations from a variant .
7787	Get the conservations for a variant
7788	Get general case information .
7789	Group all cases in the database .
7790	Converts the context to JSON .
7791	Get year and year and month .
7792	Add a title for cancelled events .
7793	Returns the term for the given hpo id .
7794	Search for hpo terms .
7795	Returns the term for a disease .
7796	Returns all diseases for this gene .
7797	Inserts a disease term into the database .
7798	Returns a sorted list of gene names
7799	Load an HDF5 file .
7800	Setup the frequency axis
7801	Setup time axis .
7802	Load filterbank data .
7803	Get the list of last coordinates in the file
7804	Creates a DC bin for the selection .
7805	Prints the information about the file .
7806	Calculates the extent of the extent of the plot .
7807	Draw the waterfall plot .
7808	Plots a time series .
7809	Write the filterbank to a filterbank file .
7810	ibrate the band pass
7811	Returns the average of the coarse channels in the input data .
7812	Mueller
7813	Calculates the Mueller Matrix for a given noise diode .
7814	Calculate the stracpols
7815	Load the waterfalls
7816	Returns the closest closest value
7817	Applies a bin to a bin
7818	Unpack data from a byte array .
7819	Do the difference
7820	Plots the stokes in stokes .
7821	cals the noise diode data
7822	Get the gain offsets
7823	Open a file .
7824	Sets the selection range .
7825	Calculates the selection size
7826	Calculates the shape of the selection
7827	Calculate the channel channels .
7828	Set the frequency number
7829	Get timestamps for all integrations .
7830	Get the frequency array
7831	Returns the number of coarse channelizations for this file
7832	Get the number of blobs for the given blob dimension
7833	Determines if the selection is heavy .
7834	Initializes the data array .
7835	Read all data from the file .
7836	Read a row from the file
7837	Load data from the container .
7838	Update the header .
7839	Prints information about the file .
7840	Writes the file to the file .
7841	Write this object to an attribute file .
7842	Write this filter file to an H5 file .
7843	Get the blob dimensions for the given chunk
7844	Determine the chunk dimensions for the file .
7845	Populate the plot
7846	Command line tool .
7847	Reads the first header of the file .
7848	Reads the number of data blocks .
7849	Prints statistics about the next data
7850	Plots the histogram
7851	Read filterbank header
7852	Get the size of the file
7853	Creates the batch script .
7854	Command line tool .
7855	Adjusts the data using the specified time samples .
7856	Load the data .
7857	Calculate the constant of the calfluxes .
7858	Center freqs .
7859	Calculate the noise ratio .
7860	Obtains the spectrum of the calibrator .
7861	Cal system .
7862	Load thefluxes from the target source .
7863	Returns the index of the header in the file .
7864	Check if the file is a filterbank file
7865	Updates the header .
7866	Convert a sigproc file to a string .
7867	Convert angle to angle .
7868	Returns the number of ints in the given file .
7869	Returns a list of information about this stack trace .
7870	Creates a sub parser for the RR type .
7871	Parse zonefile options .
7872	Returns comments in the given text .
7873	Returns the default name for a record .
7874	Parse a line .
7875	Extracts the zone data from the given text .
7876	Parses the given text into a JSON zone file .
7877	Copy a field
7878	Parse schema string
7879	Generates a python package .
7880	Returns the source of a class .
7881	Disable auto - store
7882	Convert a record to JSON format .
7883	Loads a record from a JSON object .
7884	Load a record .
7885	Add a schema .
7886	Returns the schema for the given record name .
7887	Returns an immutable representation of this object .
7888	Copies the given mixin .
7889	Creates a new class using auto - store .
7890	Returns the JSON schema for this record .
7891	Get the root schema for a record .
7892	Read a single line from the input stream .
7893	Write outputs to stdout .
7894	Pushes the given key and value onto the front .
7895	Sends a query to a string .
7896	Filters the result using the specified filters .
7897	Returns all entities that match the given attributes .
7898	Creates an entity from the href result .
7899	Look for another quote .
7900	Filter a string .
7901	Returns the rotation matrix for a given axis .
7902	Calculate the covariance matrix .
7903	Returns the value of the sky average for a given virtual point .
7904	Prints the parallax error .
7905	Returns the magnitude error .
7906	Calculates the magnitude error of G .
7907	Generate the plot .
7908	Returns the average transits for a given beta
7909	Calculates the distance between two angles .
7910	Calculates the rotation matrix for the given coordinates .
7911	Transform the sky coordinates from the given phi and angles .
7912	Computes the covariance matrix .
7913	Create a scaling factor for the given observable .
7914	Create a plot for the plot .
7915	Plot the plot
7916	Returns null if the function is not null
7917	This method is used to show a failure .
7918	Unquote a value .
7919	Applies a function to each item .
7920	Returns a filter that matches the given function .
7921	Returns a collection of items filtered by the given function .
7922	Returns a collection of items that match the given function .
7923	Returns a collection of items that match the given function .
7924	Returns a collection containing all items in the collection .
7925	Find a node .
7926	Returns the path to use for the kernel .
7927	Iterates over the given group .
7928	Get the options for the register .
7929	Convert an event tuple to a string .
7930	Compute minimal runs for all registered events .
7931	Prints the robots .
7932	Prints the robots .
7933	Prints the layer condition .
7934	Parses the given code .
7935	Returns the next index of x .
7936	Creates a sorted list of blocks .
7937	Updates the cache .
7938	calculate cycles in memory
7939	Calculates the results of the kernel .
7940	Performs the ICA analysis .
7941	Removes the comments from the given lines .
7942	Removes unreferenced labels from the given line .
7943	Find the best block for the assembly .
7944	Select a pointer increment
7945	Displays a single block .
7946	Returns the markers for the given start line .
7947	Performs instrumentation on an input file .
7948	Main entry point .
7949	Analyze a kernel .
7950	Returns a number of intergers .
7951	Returns the last modified time of all files in the directory .
7952	Sets the arguments to be used .
7953	Main entry point .
7954	Merge two pickle files .
7955	Returns symbol for pos
7956	Convert a multidimensional array to an array type .
7957	Convert multidim to a reference
7958	Finds the node type of the given node .
7959	Creates a wrapper for the given function .
7960	Check that the kernel is supported .
7961	helper method to set a constant
7962	Get the constant constants
7963	Returns the size of the variable .
7964	Calculates relative offset
7965	Removes duplicate access from destination
7966	Returns the total length of the loop .
7967	get loop stack
7968	Returns a list of free symbols .
7969	Convert variables to symbols .
7970	Computes the relative distances between all accesses .
7971	Converts the global iterator to indices .
7972	Returns an iterator over the items in the stack .
7973	To global iterator .
7974	Iterates over global variables .
7975	Prints information about the kernel .
7976	Prints information about the variables in a table .
7977	Prints information about all constant constants .
7978	Prints the kernel code .
7979	Convert an AST to a symbol .
7980	Gets the offsets for a given node .
7981	Get the basename of a reference
7982	Get the index of the loop .
7983	Builds the const declaration for the constant list .
7984	Returns the array declarations of an array .
7985	Looks for all blocks in the kernel .
7986	Build array declarations .
7987	Find the inner loop .
7988	Build array initializers .
7989	Build dummy calls .
7990	Builds a function declaration .
7991	Build scalar declarations .
7992	Get the kernel code .
7993	Builds a function call .
7994	Loads the main code .
7995	Analyze the architecture of the binary .
7996	Compiles the kernel .
7997	Converts a string to a symbol .
7998	Get the hash identifier of the resource .
7999	Get the last modified time of this file .
8000	Scans the memory hierarchy .
8001	Calculate bandwidth of the kernel
8002	Selects the compiler .
8003	Parses a perfctr event
8004	Enforce no overlap .
8005	Returns the path of the header file .
8006	Aligns the iteration with clach line information .
8007	Get the load count of the cache .
8008	Gets the hits in the cache .
8009	Returns the count of miss misses .
8010	Get the store number of stores
8011	Get the evicts of the cache .
8012	Returns information about the cache info .
8013	Set an environment variable .
8014	Adds arguments to the parser .
8015	Prints out information about the analysis .
8016	Get the description for the documentation .
8017	Retries retry .
8018	Build purchase item
8019	Record purchase in Sailthru .
8020	get course content
8021	Retrieves the content of a course .
8022	update the unenrolled list
8023	Send a course refund notification
8024	Send an offer assignment notification
8025	Build logger configuration .
8026	Retry an order .
8027	Request fulfillment of an order .
8028	Returns a SailthruClient for the specified site code .
8029	Get the value associated with the specified key .
8030	Adds a new object to the cache .
8031	Get the configuration value for the specified variable .
8032	Gets the file name from the environment variable .
8033	Get the value by version
8034	Get the most recent version
8035	Get file references .
8036	Populate data from json .
8037	Returns all external files
8038	Sets the default values for all tables .
8039	Check if the field descriptor is extensible .
8040	Returns the extended name for the given field .
8041	This method is used to build external files .
8042	Get the value of a column in the table .
8043	Updates the value at the given index .
8044	Executes the workflow .
8045	Updates the default values for this field .
8046	Add fields to this record .
8047	Pop the value with the specified index .
8048	Inserts the specified value at the specified index .
8049	Unregister this record .
8050	Record hook .
8051	Sets the link target .
8052	Creates a regex for the given intent line .
8053	Returns the duration between the start and end time .
8054	Convert this event to an event type
8055	Request a URL .
8056	Get the endpoints for a given service type
8057	Creates the given directory .
8058	Wait for a service .
8059	Sets the state of the agent .
8060	Sets the state of a recording .
8061	Updates the status of an event .
8062	Determines the state of the agent .
8063	Find the configuration file .
8064	Load configuration .
8065	Called when the server is running .
8066	Initialize logging .
8067	Get recording images .
8068	Search for a file in the capture directory .
8069	Run all the given modules .
8070	Converts a VCalendar into an ICalendar object .
8071	Get the calendar schedule .
8072	Starts the service .
8073	Starts the agent state .
8074	Sends an error response .
8075	Generates a response with the given status code .
8076	Get the status of the service .
8077	Gets upcoming events .
8078	Retrieves an event with the specified uid .
8079	Deletes an event with the specified uid .
8080	Fetches a record for a particular event .
8081	Read configuration parameters from the properties file .
8082	Starts the ingest agent .
8083	Start capture event .
8084	Create a fragment that can be used to render the HTML .
8085	Returns the list of resources for this resource .
8086	Get the JSON representation of this resource .
8087	Creates a fragment from a pod
8088	Adds content to the content .
8089	Adds a resource to the fragment .
8090	Adds a URL to the fragment .
8091	Initialize javascript .
8092	Convert resources to HTML .
8093	Convert resource to HTML .
8094	Render a fragment
8095	Renders a fragment into a standalone HTML page .
8096	Render a standalone fragment .
8097	FDR function
8098	Convert a single dimension to a single dimension
8099	Get the values from an error table
8100	fast algorithm for testing
8101	Sample error table .
8102	Extract error error table .
8103	Computes the statistics of the target scores .
8104	Calculate the cutoff value .
8105	Runs the XG boost algorithm .
8106	Infer peptidoforms .
8107	Infer peptides .
8108	Infer proteins .
8109	Subsample a file .
8110	Reduce file .
8111	Apply scores to the output file .
8112	Filter S mass files .
8113	Gets a group by ID .
8114	Updates a group .
8115	Delete a group .
8116	Retrieves the members of a group .
8117	Updates the members of a group .
8118	Returns the effective member count of the specified group .
8119	Get the effective member of a group .
8120	Fills the RTF documentation .
8121	Create a dataset .
8122	Decrypt contents .
8123	Get stdin of this command .
8124	Get stdout .
8125	Gets the stderr output .
8126	Get debug output .
8127	Get stdin from stdin .
8128	Returns the stdout of this command .
8129	Reads the stderr from the stderr .
8130	Executes debug command .
8131	Listing account .
8132	Listing a container .
8133	Wrap the given function to stdout .
8134	Wraps the given function on stderr .
8135	Write error message .
8136	Prints help .
8137	Prints usage information .
8138	Prints version information .
8139	Perform a request .
8140	Request an account .
8141	Delete an account
8142	Update a container .
8143	Sends a HEAD request to the specified object .
8144	Sends a GET request to the specified container .
8145	Sends a PUT request to the specified object .
8146	Send an object to a container
8147	Resolves an option .
8148	Fills the CLIContext with properties .
8149	Write headers .
8150	Displays the authentication information .
8151	Generate a temp url .
8152	Quote a value .
8153	Perform a request on a container .
8154	Get a client
8155	Encrypts the input stream .
8156	Decrypt the input stream .
8157	Upload a directory structure .
8158	Put account .
8159	Put a container .
8160	Gets the body of the manifest .
8161	Create a container for the given path and size .
8162	Gets a tempurl .
8163	Writes the X - Trans - Trans - ID to stdout .
8164	Prints the help for the given command .
8165	Read an empty message .
8166	Encrypt a key
8167	Gets the status of the github repository .
8168	Gets a pull request .
8169	Get all pull requests for the specified repository .
8170	Updates the slider s items .
8171	Get all slider items in the request .
8172	Get the slider items
8173	Acquires the reader .
8174	Releases the readers .
8175	Acquires the lock .
8176	Adds a new task to the registry .
8177	Removes a task from the registry .
8178	Returns the task with the given id .
8179	Returns a sorted list of tasks .
8180	Returns a map of properties for this class .
8181	Creates an object from the given configuration .
8182	Run a perceval job .
8183	Sets the archive manager .
8184	Executes the job .
8185	Fetches the archive .
8186	Get an ElasticSearch index .
8187	Create an ElasticSearch mapping .
8188	Encode the given object into a JSONEncoder .
8189	Write items to writer .
8190	Schedules a task .
8191	Cancel a task .
8192	Gets all queued items .
8193	Validates that the task_args is valid .
8194	Parse archive_args from archive_path
8195	Perform a job .
8196	Enqueue a task .
8197	Cancel a task .
8198	Starts the job listener .
8199	Starts the job .
8200	Starts the listener .
8201	Schedules a task .
8202	Cancel a task .
8203	Handles a successful job .
8204	Handles a job failed .
8205	Builds the job arguments .
8206	Gets a secret .
8207	This method is used to register admins .
8208	Wrap the given view .
8209	Returns the reverse action .
8210	Returns the name of the view
8211	Builds a version number from a version number .
8212	Looks up a key in the engine .
8213	Returns the engine for the given scheme .
8214	Extracts and schema from a path .
8215	Get the configuration from a URL .
8216	Parses a database URL .
8217	Login form .
8218	Returns the user s serializer .
8219	Handles password change form .
8220	Builds the url field with the given name and view name .
8221	Parses a boolean value .
8222	Parse an integer value .
8223	Returns the parser for the given setting type .
8224	Reads the DANGO settings from the environment .
8225	Loads a model from the model .
8226	Encodes a string .
8227	Get field class .
8228	Creates a validator for a data struct .
8229	Calculates the cartesian product of the given parameter .
8230	Finds unique points .
8231	Change logging arguments .
8232	Sets logging configuration to use .
8233	Creates the dirs for the given filename .
8234	Return a list of strings from args
8235	Replaces the log file with the given parameters .
8236	Set the logger .
8237	Updates the replacements for the trajectory .
8238	Prints the progress bar .
8239	Check and replace the arguments with the given option .
8240	Converts a parser to a string .
8241	Finds the options for a multiproc .
8242	Finds the multiproc dictionary .
8243	Loads the log config file .
8244	Handle configuration parsing .
8245	Helper method to handle the log configuration .
8246	Initialize logging handlers .
8247	Finalize the tool .
8248	Establish the redirection to stdout .
8249	Logs a stream .
8250	Checks if two parameters are equal .
8251	Checks if two parameters are equal .
8252	Returns a new function that runs the traj .
8253	Log a warning .
8254	Allows the parameter to be mutual exclusive .
8255	Returns a new function that is deprecated .
8256	Creates a new function with retries .
8257	Naming of class .
8258	Add parameters for this network
8259	Create a neuron
8260	Compute the Euler scheme .
8261	Add the parameters of the Lorenz equation .
8262	Calculate lorenz .
8263	Helper method to create a storage service .
8264	Creates a storage service .
8265	Add parameters .
8266	Calculates the roessler
8267	Populates a HEV5 file .
8268	Returns true if all parameters in the given group are explored .
8269	Build the model eqs .
8270	Builds the model .
8271	Builds the model .
8272	Builds the model .
8273	Builds the network .
8274	Builds the connections .
8275	Add parameters to the simulation .
8276	Compute the fano factor of a given neuron
8277	Compute the mean fano factor .
8278	Computes the average Fano factor for all subruns
8279	Add monitors to a network
8280	Add monitors .
8281	Create the folder if it doesn t exist .
8282	Plots a result .
8283	Print the graph graph .
8284	Plot the network .
8285	Get the batch number .
8286	Explore a batch
8287	Get the variable variables .
8288	Get node function .
8289	Renames a name .
8290	Sets the details of this object .
8291	Convert a node to a message .
8292	Removes a subtree from the given node .
8293	Delete a node .
8294	Remove a node or leaf .
8295	Remove a node from the actual branch .
8296	Translate a shortcut .
8297	Add prefix for the given node .
8298	Determine the type of a node .
8299	Add generic method .
8300	Adds a new group node to the tree .
8301	Creates a link .
8302	Generate check names .
8303	Creates an instance of a group .
8304	Creates an instance of a param or result .
8305	Set details of a tree node .
8306	Iterates over all nodes in the tree .
8307	Create a child iterator for a child node .
8308	Recursive traversal .
8309	Performs a fast search .
8310	Search for a node in the tree .
8311	Performs a backwards search for a given node .
8312	Get the kids of this node .
8313	Add a group from storage .
8314	Add a leaf from storage
8315	Load directory data .
8316	Debug tree .
8317	Get parent .
8318	Add a group .
8319	Add a link to a group .
8320	Remove a link with the given name .
8321	Add a leaf node .
8322	Remove a parent node .
8323	Remove a child .
8324	Checks if a given item is contained in the trajectory .
8325	Get the default value .
8326	Get children .
8327	Get group list .
8328	Get the leaf leaves .
8329	Get links .
8330	Store a child group .
8331	Store a group .
8332	Load a child .
8333	Load a group .
8334	Add a parameter group .
8335	Add a parameter .
8336	Add a result group .
8337	Add a result .
8338	Add a derived parameter group .
8339	Add a derived parameter .
8340	Add a configuration group .
8341	Add a configuration object .
8342	Computes the fitness for the given individual
8343	Adds the commit variables to the traj .
8344	Executes git commit .
8345	Flattens a nested dictionary .
8346	Flattens a nested dictionary with a separator
8347	Create a progress bar with a progress bar .
8348	Get the arguments for the given function .
8349	Returns the matching arguments for the given function .
8350	Formats a timestamp
8351	Tries to connect to the given port .
8352	Creates a directory if it already exists .
8353	Reset the interval .
8354	Returns the remaining seconds .
8355	Convert this object to a copy
8356	Removes the given key from the annotation .
8357	Convert an annotation to a string
8358	Make anordinary result .
8359	Creates a new result .
8360	Request shared data .
8361	Requests the access data for the given request .
8362	Get data node .
8363	Determines if the given item is supported .
8364	Creates shared data .
8365	Manipulates a trajectory .
8366	Lock a request .
8367	Start the server .
8368	Closes the socket .
8369	Starts the client .
8370	Sends a request to the server .
8371	Wait for lock .
8372	Send a request to the server .
8373	Sends a space request .
8374	Detects fork .
8375	Handle data .
8376	Receive data from storage .
8377	Receive data from the queue .
8378	Receive data from the connection .
8379	Store the current storage service .
8380	This method is used to store information about a trajectory
8381	Adds references to the graph .
8382	Loads the config data from the configuration file .
8383	Collect options from a section
8384	Collects the configuration of the storage service .
8385	Extracts the configuration from the configuration file .
8386	Adds parameters to the traj file .
8387	Returns a binary rule .
8388	The initial state .
8389	Plots the pattern with a specific rule .
8390	Compute a single automaton based on a rule number .
8391	Simulates the simulation .
8392	Increment the number of updates .
8393	Gets the overview group .
8394	Load the given items .
8395	This method is used to store the contents of a parameter .
8396	Load items from the given iterable .
8397	Check the properties of the RDF5 .
8398	Store items in the given iterable .
8399	This method is called when the SRVC is closed .
8400	Extract file information from SSRVC .
8401	Backup a trajectory .
8402	Read out a row from a table .
8403	Merges the given traj into the tree .
8404	Loads the meta data from the traj file .
8405	Load a sub - branch .
8406	Check the trajectory s version .
8407	Fill the run table .
8408	Load explorations .
8409	Store explorations table .
8410	Make an overview table .
8411	Store a trajectory .
8412	Store a sub - branch .
8413	Create a leaf tree .
8414	Load nodes from the trajectory .
8415	Store all nodes in the tree .
8416	Search for a parameter table or result table .
8417	Get or create a table .
8418	Get node by name .
8419	Set attributes to recall .
8420	 recall the data type
8421	Add or modify or modify row .
8422	Inserts all of the given insert into a row .
8423	Extract the insert data from an item .
8424	Truncate the string .
8425	Create or get a group .
8426	Get or create a trajectory group .
8427	Store annotations on an item .
8428	Load annotations from an item .
8429	Store group data .
8430	Load a traj file .
8431	Load the traj node .
8432	Extracts missing flags from the data_map .
8433	Check to see if the instance has a summary comment
8434	Adds the meta information table to the PPM file .
8435	This method is called from HDF5 .
8436	Store an instance
8437	Write shared array .
8438	Write shared table .
8439	Write a dictionary as object table .
8440	This method is used to write data to a PPM file .
8441	Write data to other array
8442	Write an array into an array .
8443	Delete a link
8444	Remove all parameter or group or group or group .
8445	This method is used to write data into a python table .
8446	Build a description for a PPPP parameter .
8447	Returns a table column for a parameter .
8448	Computes the longest length of the given string list
8449	Load parameters into a given map .
8450	Loads a PObject table from a leaf .
8451	Read the shared data .
8452	Read a PPM file from HDF5 .
8453	Read the given array and return it .
8454	Load a trajectory
8455	Generate a set name for a set .
8456	Sets the properties of the object .
8457	Add dynamic imports to the dynamic import list .
8458	Set crun .
8459	Iterates over the trajectory .
8460	Shrinks the trajectory .
8461	Sets a preset configuration .
8462	Set a preset parameter .
8463	Prepare an experiment .
8464	Get a value from a run .
8465	Check if run is completed .
8466	Remove expanded parameters from disk .
8467	Copies the trajectory from the trajectory .
8468	Explore a trajectory .
8469	Update run information .
8470	Adds a run information .
8471	Lock parameters .
8472	Lock derived parameters .
8473	Finalize the function .
8474	Load the skeleton .
8475	Load data .
8476	Store a backup .
8477	Creates the reversed wildcard names .
8478	Merges multiple trajectories into the current one .
8479	Merges a single trajectory with a single run name from another trajectory .
8480	Rename the full name of a trajectory
8481	Merges all of the derived parameters from the other trajectory .
8482	Merges the links of this trajectory to another .
8483	Merges the configuration .
8484	Merge this trajectory with the same keys from another trajectory .
8485	Merges the results of this trajectory into another trajectory .
8486	Migrate a trajectory to a new name .
8487	Store a trajectory
8488	Restores the default values .
8489	Set explored parameters to index
8490	Make a single run .
8491	Get run names .
8492	Get run information .
8493	Find the index of a parameter .
8494	Starts a run .
8495	Finalize the run .
8496	Set start time .
8497	Sets the finish information for this run .
8498	Construct an instance of a class .
8499	Returns the item dictionary .
8500	Finalize the run .
8501	Gets the configuration .
8502	Gets the result dictionary .
8503	Store items in the trajectory .
8504	Load items from the trajectory .
8505	Removes items from the iterator .
8506	Delete links from an iterator .
8507	Remove all children from the parent
8508	Deletes items from the trajectory .
8509	Used to release a single run .
8510	frozen pool for single run
8511	Configure pool .
8512	Configure the frozen pool
8513	Process a single run .
8514	Configures the SCOOP .
8515	This method is used to run the scoop .
8516	Configure logging system .
8517	Configures the niceness for this process .
8518	Handle a single run .
8519	Run a single run function .
8520	Wrap the logging handler .
8521	Get the class from a full class string .
8522	Get a class by name .
8523	Get the length of the parameter
8524	Convert the value to a string .
8525	Checks if two values are equal .
8526	Get range .
8527	Explore a parameter .
8528	Expand an iterable .
8529	Explore the data list .
8530	Store the data in the object .
8531	Load the parameters from the given load dict .
8532	Loads the parameter from the given load - data .
8533	Checks whether the given values are equal .
8534	Checks to see if the data is supported .
8535	Serialize a matrix
8536	Builds the names for a sparse parameter .
8537	Reconstruct the matrix .
8538	Load the data from the given parameter .
8539	Stores this object into a dictionary .
8540	Load this parameter from the given data .
8541	Translate a key .
8542	Convert HDF5 to string .
8543	Convert this object to a map
8544	set the value of the arguments
8545	Gets the result .
8546	Sets a single result .
8547	Returns true if the given item is supported .
8548	Store a sparse parameter .
8549	Loads the sparse parameter data from the given load .
8550	Set a single result .
8551	Stores the result in a pickle .
8552	Load this parameter from the given data .
8553	Merge all files in the directory .
8554	Download a file .
8555	Download a file .
8556	Creates a session .
8557	Start the saga job .
8558	Starts the saga job .
8559	Performs the product of two reals .
8560	Performs Euler integration .
8561	Computes the firing rates for a neuron .
8562	Add the parameters to the experiment
8563	Add exploration of the neuron .
8564	Executes a network pre - run .
8565	Execute a network .
8566	Extract subruns from traj .
8567	Executes a network .
8568	Adds the parameters of a traj .
8569	Run the network .
8570	Runs the network .
8571	Run the network .
8572	Generates a filename for the explored parameters
8573	Get the next element from the chain .
8574	Find all files in a folder .
8575	Handle a SIGINT .
8576	Read config from file .
8577	Authorizes an ecobee app .
8578	Request token from ecobee .
8579	Request access token .
8580	Get the thermostats
8581	Sets the token to a file .
8582	Set the hvac mode
8583	Set the fan minimum on time
8584	Set hold temp .
8585	Set climate hold .
8586	Delete a vacation .
8587	Resume a program .
8588	Send a message
8589	Set humidity .
8590	Determines the delay to select the future .
8591	Returns the next timeout
8592	Calculates the timeout in seconds for renewing .
8593	Calculate the renewing time .
8594	Returns a copy of the FSM attributes .
8595	Reset attributes .
8596	Get the timeout for a given function .
8597	Set the timeout to a new timeout .
8598	Send a discover message .
8599	Select offer .
8600	Send a DHCP request .
8601	Set timeouts for the client .
8602	Called when an ACK is received .
8603	This method is called when a kak is received .
8604	Reset the state .
8605	bound state .
8606	Change the state of the lease .
8607	Rebinding the script .
8608	Start the script .
8609	Init script .
8610	Called when a response is received .
8611	Handle requesting .
8612	Handle request renewing .
8613	Rebinding response message .
8614	Called when an offer is received .
8615	Process an ACK .
8616	Receives a KACK .
8617	Process an ACK .
8618	This method is called when a ACK is received .
8619	Process an ACK .
8620	This method is called when a KACK is received .
8621	Called when the client is renewing .
8622	Create a clone of this query .
8623	Returns a clone of this attribute with the specified name and value .
8624	Returns a clone of this object with the specified name and value .
8625	Get the status of the supervisor .
8626	Extract output from data .
8627	Runs the command .
8628	Validates a message .
8629	Read tdms data .
8630	Add deformation data .
8631	Converts a TDMS file into a FCS file .
8632	Checks if the subprocess is a diff command .
8633	Create a patch .
8634	Get the next patch
8635	Delete a patch .
8636	Check if a file is in the given patch
8637	Backup file .
8638	Add a file to the file
8639	Starts a sub process .
8640	Create the directory if necessary .
8641	Copy a directory to a directory
8642	Links this file to the given link .
8643	Copies the file to the given destination .
8644	Get the directory for this file .
8645	Copy a file to the destination directory
8646	Refreshes the patch .
8647	UnApply a patch .
8648	Apply top patch .
8649	Unapply all patches .
8650	Apply a patch .
8651	Apply the next patch .
8652	Apply all patches in the series .
8653	Loads all the patches from the series file .
8654	Write the series file .
8655	Add a patch
8656	Add patches to the current line .
8657	Insert patches into the current line .
8658	Remove a patch
8659	Get the last patch line after the given patch .
8660	Find the last patch before the given patch .
8661	Returns the last patch that matches the given patch .
8662	Inserts a new patch line .
8663	Creates the version file .
8664	Check the version of the database .
8665	Adds this command to the given parser .
8666	Adds the arguments to the parser .
8667	Adds arguments to the sub parser .
8668	Set sub parsers arguments .
8669	Adds sub parsers to the parser .
8670	Check if the file is in the given patch
8671	Finds a file in the next patch
8672	Revert a file .
8673	Copy a patch .
8674	Copy patches .
8675	Create a way from a way .
8676	Get the node ids for all nodes
8677	Creates a node .
8678	Build a route for a relation .
8679	Returns the short name of a relation
8680	Returns the id of the agreement for the given relation .
8681	Extract the public transport relations from the file .
8682	Adds a Relation to the Relation .
8683	Build dummy data .
8684	Get a list of agencies .
8685	Create dummy trip stopt times .
8686	Zips the contents of this file into a ZIP file .
8687	Extracts the unzipped buffers from the given destination .
8688	Create a agency from a relation .
8689	Generate a stop from a relation .
8690	Get the shapes for a relation .
8691	Get the supported versions .
8692	Sends an APDU .
8693	Authenticate a U2F device .
8694	Send a U2F request to the device .
8695	Send a U2F request .
8696	Registers a U2F device .
8697	Convert data to string
8698	Wraps a function with an error threshold .
8699	Wrap the given class .
8700	Returns true if the file path matches the pattern
8701	Gets the email address .
8702	Returns the entry at the given entry .
8703	Converts the given text to a reST .
8704	Initialize Flawless service .
8705	Handle an error .
8706	Get image from URL .
8707	Converts an image to an image
8708	Wraps the given validator on the given validator .
8709	Check if the image is big enough .
8710	Checks if the image s width is larger than the specified width .
8711	Checks if the image height is big enough .
8712	Gets the category .
8713	Returns the total total value of an item .
8714	Get items from source .
8715	Add an error to the log .
8716	Loads the data from the source .
8717	Parses an item .
8718	Gets the instance of the model .
8719	Update item .
8720	Download data to a file
8721	Load the source file .
8722	Get items from the source file .
8723	Sets whether or not network access settings on a sandbox .
8724	Builds a command .
8725	Copy files to a temporary file .
8726	Renames a file .
8727	Retrieves the enrollments for a given course .
8728	Retrieves the enrollments for a given site .
8729	Retrieves the enrollments for a specific section .
8730	Gets enrollments for a given section .
8731	Gets enrollments for a regid .
8732	Enroll a user .
8733	Returns all roles in the specified account .
8734	Retrieves roles in an account
8735	Returns the effective course roles in the specified account .
8736	Gets a role .
8737	Get role by account id
8738	Gets a course .
8739	Retrieves a course by its id .
8740	Gets all courses in an account .
8741	Gets a list of courses in an account .
8742	Get all published courses in an account .
8743	Get all published courses in an account
8744	Retrieves the courses for a given regid .
8745	Creates a new course .
8746	Get thesis class of a given course
8747	Returns the activity for the given account .
8748	Returns the grabs of the given term .
8749	Returns the statistics for a given term .
8750	Returns the activity for the specified site .
8751	Returns the assignments for the specified SIScourse .
8752	Returns the user s summaries for the specified course .
8753	Returns the user activity for a given Sourses .
8754	Gets the student messaging message for a given site .
8755	Returns all external tools in the specified account .
8756	Retrieves all external tool in the specified course .
8757	Creates a new external tool .
8758	Updates an external tool .
8759	Deletes an external tool .
8760	Check that all required parameters are set .
8761	Get a user .
8762	Retrieve users for a given course .
8763	Gets users for a given site .
8764	Sends a user to the canvas .
8765	Gets the logins for a given user .
8766	Sends a user login .
8767	Get the next page URL .
8768	Get resource URL
8769	Gets a paged resource .
8770	Get resource
8771	HTTP PUT request
8772	Perform a POST request .
8773	Delete a resource
8774	Gets a page of admins .
8775	Create a user admin .
8776	Create admin by user id
8777	Deletes an admin user .
8778	Delete admin by user id
8779	Creates a GradingStandard for a given user .
8780	Get a specific section .
8781	Retrieves a section by its id .
8782	Gets all sections in the specified course .
8783	Gets all sections in the specified site .
8784	Gets all sections in the given course .
8785	Gets sections that have students in a given site .
8786	Creates a section .
8787	Updates a section .
8788	Get quizzes for a given course .
8789	Gets an account .
8790	Returns a page of sub - accounts .
8791	Creates a new account .
8792	Updates theSIS ID of an account
8793	Gets the authentication settings for a given account .
8794	Sets the authentication settings .
8795	Gets a term by its id .
8796	Imports a CSV string .
8797	Imports a directory .
8798	Get status of an import .
8799	Builds the archive .
8800	Retrieves the assignments for a particular course .
8801	Updates an assignment .
8802	Returns available report types .
8803	Retrieves reports for a given report type .
8804	Creates a report .
8805	Create a report for a Provisioning report .
8806	Create a report for SIS_ export .
8807	Create a report for unused courses .
8808	Retrieves data from a report .
8809	Retrieves status of a report .
8810	Deletes a report .
8811	Move the detections from the label
8812	Flips the detections
8813	Returns a copy of the object .
8814	Returns the config for the given request .
8815	Returns the value of the user for editing .
8816	Parses a list of arguments .
8817	Creates metrics for the given metric configurations .
8818	Setup logging .
8819	Configures the registry .
8820	Register metrics .
8821	Get a metric by name .
8822	Handle the home page .
8823	Handle metrics .
8824	Performs a query .
8825	Get HTTP message .
8826	Execute a query
8827	Gets the pod .
8828	Returns the pod for this result .
8829	Add data to the request
8830	Perform an API call .
8831	Makes a GET request .
8832	Makes a DELETE request .
8833	Makes a PUT request .
8834	Make a POST request .
8835	Performs a disambiguation .
8836	Group sentences .
8837	Disambiguate a PDF file .
8838	Disambiguate a query
8839	Segmentation of text .
8840	Download language recognition .
8841	Fetch concept .
8842	Fit the ensemble .
8843	Predicts a single feature .
8844	Sets the features of the given feature .
8845	Predicts a set of features .
8846	Score the given features .
8847	Initializes the CMDR object with the given features and targets .
8848	New feature .
8849	Compute the score for a continuous MDR model .
8850	Predicts the MDR model .
8851	Get the way models for the given feature .
8852	Generates a grid for a mdr instance .
8853	Get the configuration for the application .
8854	Get a configuration value .
8855	Creates a vector from the given members .
8856	Creates a vector with the given members .
8857	Compiles a file .
8858	Compiles the given stream .
8859	Reads a string from a string .
8860	Import repl .
8861	Evaluates a script .
8862	Create a multi - function .
8863	Adds a method to the map .
8864	Adds a method .
8865	Gets a method .
8866	Dissoc method .
8867	Gets a method .
8868	Returns true if the variable is a macro .
8869	Returns the location of the line .
8870	Returns a parse function with the given location .
8871	Assert that there is no recur .
8872	Asserts that a node is a tail node .
8873	Resolve a symbol .
8874	Resolve a symbol .
8875	Parse an AST from a reader context .
8876	Returns true if the variable is on shadowed variable .
8877	Adds a new symbol .
8878	Returns a string representation of entries .
8879	Returns a string representation of an iterable .
8880	Pretty representation of an object .
8881	Lumps the given object as a string .
8882	Updates the locations of this node .
8883	Execute the given form .
8884	Compiles a module .
8885	Compile a module .
8886	Bootstraps bytecode .
8887	Returns an empty sequence of the given sequence .
8888	Munge the string .
8889	Munge a string .
8890	Creates a new fraction .
8891	Creates logging handler .
8892	Create a map with the given keys .
8893	Iterates over the elements of the given collection .
8894	Returns a new function that wraps the current line and line information .
8895	Reads a namespace namespace .
8896	Reads a collection from the reader .
8897	Read a list .
8898	Reads a vector .
8899	Reads a set .
8900	Reads a map .
8901	Reads a string from the reader .
8902	Read a Gensym symbol .
8903	Read a namespace declaration .
8904	Read comment .
8905	Read function .
8906	Read quoted comment .
8907	Expand a syntax quote .
8908	Processes a syntax - quoted form .
8909	Read a syntax quoted form .
8910	Reads an unquoted string from the reader .
8911	Read a dereference
8912	Reads a character from the reader .
8913	Read a regular expression .
8914	Reads a reader macro .
8915	Reads the next comment from the reader .
8916	Read next token .
8917	Reads the next expression from the given stream .
8918	Read a string from a string .
8919	Reads a file .
8920	Update the location .
8921	Removes the push back from the stack .
8922	Returns the next token in the stream .
8923	Converts a bytecode code to a byte array .
8924	Loads the bytecode data from the cache .
8925	Returns the cache file for the given source .
8926	Add imports to the classloader
8927	Returns the module spec for the given module .
8928	Executes the given module .
8929	Execute a module .
8930	Loads a module .
8931	Creates a symbol .
8932	Returns an iterable of prefixes that start with the given text .
8933	Gets or creates a new PMap .
8934	Returns an atom .
8935	Builds a stream of the dependencies of the given generator .
8936	Load an attribute .
8937	Generates a simple AST for a simple AST .
8938	Builds a list of Python AST from a given form .
8939	Updates the location of an AST with the location of the given environment .
8940	Returns a new AST for the given node and line location .
8941	Returns a new AST for the given node and line dependencies .
8942	Returns true if the variable is dynamic .
8943	Returns true if the variable is redefable .
8944	Convert an AST to an AST .
8945	Create a function definition .
8946	Returns true if a redef symbol should be logged or not .
8947	Converts a DO to a Python AST .
8948	Returns the name of a function .
8949	Converts a function arguments into an AST .
8950	Converts a single function name into an AST .
8951	Converts a function to a Python function definition .
8952	Converts a function to a Python AST .
8953	Converts a IF_ body to a Python AST .
8954	Converts an IF to an IF .
8955	Creates a Python AST from an Invoke object .
8956	Converts a quote node to a Python AST .
8957	Generates a Python AST for a loop .
8958	Handle a recur .
8959	Converts a set bang node to a Python file .
8960	Converts a throwable to a Python AST .
8961	Converts a Try to a Python AST .
8962	Converts a local symbol to a local symbol .
8963	Converts a var_name to a python var .
8964	Converts a var symbol to a Python symbol .
8965	Create a Python AST from an interface .
8966	Creates a Python AST from the given node .
8967	Creates a Python AST from the given node .
8968	Convert a constant value to a Python AST .
8969	Convert a collection literal to a Python AST .
8970	Generates a generated Python AST from the given lispast node .
8971	Returns an iterable of module imports .
8972	Creates an import from a module .
8973	Creates a namespace variable .
8974	Creates a set from the given members .
8975	Returns a set containing the given members .
8976	Visits an ExceptHandler .
8977	If the given node is a constant return it .
8978	Visits a function definition .
8979	Visits a While statement .
8980	Visits a Try .
8981	Creates a new module .
8982	Get the first element of a sequence
8983	Returns an ISeq for the given object
8984	Returns the rest of the coll .
8985	Returns the next element in the collection .
8986	Assumes o is a sequence
8987	Returns an ISeq for the given object
8988	Returns an ISeq for the given sequences
8989	Associates the given object with the given keys .
8990	Create a collection from the given list
8991	Wraps the given arguments .
8992	Dereferences an object .
8993	Compare two boolean values .
8994	Converts a number to a fraction .
8995	Returns a sorted sequence of the elements in the collection sorted order
8996	Checks if a key is contained in the collection
8997	Returns the value of the given key in the map .
8998	Converts an object to a lisp .
8999	Convert an object to a list .
9000	Returns a representation of the object .
9001	Collect a list of arguments
9002	Returns a trampoline of the given function .
9003	Returns a decorator that adds the given attributes to this function .
9004	Wrap the given function with meta .
9005	Wrap a baseilisp object with meta data
9006	Returns the symbol for the given symbol .
9007	Resolves a variable .
9008	Adds the generated python variable .
9009	Registers a dynamic variable .
9010	Creates a new variable .
9011	Creates an unbound variable .
9012	Finds an optional variable in the namespace .
9013	Returns the variable for the given namespace .
9014	Resolves a variable .
9015	Change the default import .
9016	Replaces an alias with the given namespace .
9017	Returns the variable with the given symbol .
9018	Interns a new variable .
9019	Returns the variable for the given symbol .
9020	Imports a module .
9021	Returns the module for the given symbol .
9022	Resolves a reference to a variable .
9023	Returns the reference for the given symbol .
9024	Refers all references in the given map .
9025	Refer to another namespace .
9026	Gets or creates a new namespace .
9027	Gets the namespace .
9028	Returns the namespace for the given symbol .
9029	Dissocates a namespace .
9030	Returns a Matcher that matches the given text .
9031	Completes all aliases in the given prefix .
9032	Completes imports and aliases for the given prefix .
9033	Completes the completion of the given value .
9034	Returns the completion of the given value .
9035	Completes the given text .
9036	Returns the argument list .
9037	Creates a list of members .
9038	Returns a list of members .
9039	Create a style for a scalar
9040	Decrypt a token .
9041	Encodes the JWT key .
9042	Delete cache .
9043	This is a helper method that is used to convert the comparison to a string .
9044	Closes the writer .
9045	Convert a string to an expression
9046	Encodes the given OData model into a JSON file .
9047	Handle hook .
9048	Convert a string to a date .
9049	Attempts to decode the given value .
9050	Returns the JSON encoding for the given object .
9051	Get release version .
9052	Generates the changelog for the given version .
9053	Returns a list of all components connected to a given graph .
9054	Computes the topological sort of the given graph .
9055	Sets the parent node .
9056	Returns the parent of this Expression .
9057	Add operator .
9058	Adds an element to the expression
9059	Creates an AND expression .
9060	Create an OR expression
9061	Wraps the given function .
9062	Parses the received message into a list of messages .
9063	Convert a list of strings to a dictionary .
9064	Get a message by command
9065	Prepare send .
9066	Send messages to the socket .
9067	Enables or disables the button .
9068	Saves the leicacam template
9069	Loads the leicacam template .
9070	Get information about this device
9071	Parses a file .
9072	Returns the path of the package . json file .
9073	Loads the package json .
9074	Handle api error .
9075	Validates the response .
9076	Computes the homogenize of the given wave_a .
9077	Interpolates the dependency vector of the wave .
9078	Get the value of the indep_b from the wave_b .
9079	Verify that the given waveforms are compatible with the given waveforms .
9080	Load the system js manifest file .
9081	Load the parameters .
9082	Print trace .
9083	Get a short URL
9084	Expand short url
9085	Get url stats for a short
9086	Get stats from database .
9087	Get database stats
9088	Prints a command
9089	Echo the command .
9090	Writes the message to stdout .
9091	Returns a property with the specified method name .
9092	Iterates over the given iterable using the specified chunk size .
9093	Processes the given iterable using the given chunk size .
9094	Flatten the given iterable into a list of items .
9095	Starts an interrupt signal .
9096	Prints a table to stdout
9097	Returns a dummy object with given name and attributes .
9098	Converts a human readable string to a number of digits .
9099	Connect to YOURLS client
9100	Get the waveform module .
9101	Generate the links for the dependency .
9102	Adds the common version entry .
9103	Adds a multi - entry to the list of versions .
9104	Returns a string representation of the comparison operator .
9105	Chunk noise .
9106	Chunk the data .
9107	Touchstone .
9108	Returns the bounds of the specified waveform .
9109	Builds the unit units .
9110	Creates a copy of this wave .
9111	Calculates the area of the running area .
9112	Validate the min and max and indep_max .
9113	Computes the arc cos of a wave .
9114	Cossh function .
9115	Returns the arc in the wave .
9116	Computes the angle of the wave
9117	Returns a copy of this waveform .
9118	Creates a copy of this wave
9119	Returns a copy of the waveform .
9120	Compute the image i .
9121	Computes the absolute norm of a wave .
9122	Computes the phase of a wave .
9123	Computes the real tr .
9124	Compute the index of a wave .
9125	Returns the image of this wave .
9126	Computes the absolute transform of a wave .
9127	Compresses the wave .
9128	Returns the real tr of the wave .
9129	Returns a copy of the specified waveform .
9130	Returns the delay of the wave .
9131	Log the wave to log
9132	Applies a waveform to a waveform .
9133	Returns the integral value of the specified waveform .
9134	Returns the maximum value of a waveform .
9135	Returns the minimum of the waveform .
9136	Creates a copy of the wave
9137	Rounds a wave to an integer .
9138	Computes the square unit of this wave .
9139	Create a new waveform
9140	Creates a complex wave .
9141	Convert a wave to a float .
9142	Convert a wave to an integer .
9143	Returns the value of the component of the given wave .
9144	Finds the system javascript files .
9145	Gets the short description .
9146	Build an expression from a list of tokens .
9147	Get the next r delim .
9148	get functions from an expression
9149	Extracts the remaining delimiters from the given expression .
9150	Parse an expression .
9151	Remove consecutive delimiters from the expression .
9152	Splits the given text using the given separator .
9153	Convert a number to engineering tuple .
9154	Returns the exponent of a number .
9155	Returns the engineering notation string .
9156	Convert a string to a float .
9157	Get the fraction of a number .
9158	Get the mantissa of a number .
9159	Generate ENg power .
9160	Returns true if the suffix of the given suffix .
9161	Adds extra delimiters to the expression .
9162	Converts a number to a scientific string .
9163	Convert a number to a scientificific part .
9164	Reads a sourcemap comment from a file .
9165	Returns the default JS file extension .
9166	Starts the bundle .
9167	Get trace dependencies for the given app .
9168	Check if the dependency tree matches the MD5 hash
9169	Convert a string to a hex dump .
9170	Extracts parameters from a docstring .
9171	Returns the names of all functions in the context .
9172	Load an action from the module .
9173	Splits a line .
9174	Checks if the context is initialized .
9175	Returns the help text for the given arguments .
9176	Get a function from the given context .
9177	Returns a directory for the given context .
9178	Checks if the argument is a flag .
9179	Extracts arguments from the given command line .
9180	Extracts the value of an argument .
9181	Call a single function .
9182	Invoke a single line .
9183	Checks if the given line is a string .
9184	Parses a parameter .
9185	Parses return .
9186	Classify a section .
9187	Classify a line .
9188	Joins a list of paragraphs .
9189	Writes the documentation to the output file .
9190	Converts value to given type .
9191	Convert binary data to a type
9192	Get the size of a type
9193	Converts the given value to the given type .
9194	Validates a type .
9195	Returns true if the given type is a known type .
9196	Parse a complex type .
9197	Creates a type object from the given base type .
9198	Looks up a type .
9199	Checks if the given type has a known format
9200	Inject a type .
9201	Loads a type from a module .
9202	Returns true if pos_args is satisfied .
9203	Registers a parameter .
9204	Defines the return value .
9205	Sets the return value .
9206	Converts a short - name to a short - name .
9207	Gets the type of a parameter .
9208	Returns the argument name .
9209	Returns the value of the given value .
9210	Returns the argument at the given index .
9211	Fills the parameter with the given arguments .
9212	Executes the given argument with the given value .
9213	Print the message .
9214	Get a JSON representation of this object .
9215	Check and execute the given function .
9216	Parse a list of validators .
9217	Build a context from a container .
9218	Find a con from a module .
9219	Returns the help text for the given function .
9220	Adds a parameter to this decorator .
9221	Creates an annotated function .
9222	Returns a function that returns the given type .
9223	Creates a new instance of the annotated class .
9224	Annotate a function .
9225	Marks the given function as annotated .
9226	Returns the description of the given function .
9227	Load cron tasks .
9228	Loads the registry .
9229	Load tasks .
9230	Removes the cron tab .
9231	Handle a uri .
9232	Loads the project config file .
9233	Save project configuration to yaml
9234	Creates a singleton instance .
9235	Gets the project dependent projects .
9236	Processes the given command .
9237	Initialize the project .
9238	set an item to a copy
9239	Set a value to a specific attribute .
9240	Returns an instance of the given iterable .
9241	Sets a new value .
9242	Iterate over all the values of this state .
9243	Create a modifier for the given state .
9244	Create a new argument collector
9245	Try to use this lens .
9246	Returns the result of the given function .
9247	Returns the focus of this fold .
9248	Converts this Fold to a List of Lists .
9249	Apply a function to a Setter .
9250	Sets the value of this setter .
9251	Iterates over the given iterable using the given state .
9252	Returns the optics .
9253	Runs the game .
9254	Moves this vector to another .
9255	Checks if the input is inside the player .
9256	Move the robots towards the current position .
9257	Starts the game .
9258	Enter a move
9259	Make a random move
9260	Sets a move to the current board .
9261	Determines if the outcome is ongoing .
9262	Gets the potential wins .
9263	Adds an item to the spider .
9264	Process spider .
9265	Uploads a chunk to S3 .
9266	Creates a file object that will be written to the output file .
9267	Retrieves the state of an account .
9268	Retrieves the state of an asset .
9269	Gets a block .
9270	Returns the block hash for the given block index .
9271	Retrieves the system fee for a given block .
9272	Retrieves the contract state for the given script .
9273	Gets the raw transaction .
9274	Retrieves the storage for the given script
9275	Retrieves the out of the given transaction .
9276	Sends an INVOKE request .
9277	Sends an INVOKE function .
9278	Sends a script to the RPC server .
9279	Send a raw transaction
9280	Validate the address .
9281	Executes a JSON - RPC call .
9282	Hashes a string .
9283	Returns true if the given string is a 32 bit number .
9284	Builds the invocation parameters .
9285	Decodes an invocation result .
9286	Returns a decorator that wraps an argument with a default value .
9287	Apply transformation to date and timezone
9288	Apply query to date and timezone
9289	Renders the template with the given options .
9290	Renders this bar .
9291	Calculates the checksum for the ean .
9292	Paint code .
9293	Initializes the Kvs session .
9294	Main entry point .
9295	Download a remote path .
9296	Uploads the local path to the local file .
9297	Downsync the local config files .
9298	Scans the configuration file .
9299	Parse the value of an environment variable .
9300	Set username and password .
9301	Sets the API key .
9302	Get the json content from a folder
9303	Get a list of schemas from the JSON files .
9304	Get the schema for the schema
9305	Get the ref resolver for this resource .
9306	Validate object .
9307	Retrieves a list of valid examples from the schema folder .
9308	Retrieves a list of invalid examples from the schema folder .
9309	Returns the URL of the user
9310	Process the URL
9311	Get token .
9312	Get user id .
9313	Get a directory for a folder
9314	Create a skydrive .
9315	Add a message to an object .
9316	Convert an object to a string .
9317	Sets the drop target .
9318	Start the drag and drop the button .
9319	Set default tw .
9320	Show the inspector .
9321	Show the shell
9322	Change the font .
9323	Load page .
9324	Get a parameter from a tag .
9325	Logs the text box .
9326	Exit the main tool tip window
9327	down the mouse down
9328	Move the current object .
9329	Handle resize .
9330	Called when the cursor is pressed .
9331	Deletes the selected objects .
9332	Duplicate the selected objects .
9333	Updates the bitmap .
9334	Calculates the best position of the widget .
9335	Get the python data for the item .
9336	Set the data for the given item .
9337	Search for the data at the specified start .
9338	Delete an item
9339	Clear all items
9340	Clear all columns .
9341	Set selection .
9342	Gets the string selection .
9343	Sets the client data .
9344	Add a string to the menu .
9345	Print an object .
9346	Get the GUI object for the specified object .
9347	Create a copy of this object .
9348	Add child to sizer
9349	Set the parent component .
9350	Tile the bitmap .
9351	On erase background .
9352	Handle paint .
9353	Search for modules in the given root path .
9354	Returns a sorted list of column headings .
9355	Update the grid view .
9356	Sends a request to the grid s values .
9357	Update column attributes .
9358	Sorts the given column .
9359	Clear the list
9360	Creates a combo box
9361	Sets the value of the selected choices .
9362	Update the value of this cell
9363	Is an accepted key?
9364	This method is called when the key is pressed .
9365	Creates a metaclass for a form tag handler .
9366	Enables or disables the given value .
9367	Whether this menu item is enabled .
9368	Enables the top menu .
9369	Returns true if menu items are enabled .
9370	Set menu item .
9371	Process the form submit event .
9372	Updates object attributes .
9373	Visit HTML table .
9374	Returns a documenter for the given object .
9375	Converts a signature to a compact signature .
9376	Import object by name .
9377	Create an emolink role .
9378	Dialog with scrolled .
9379	Dialog for text entry .
9380	Select the font .
9381	Display a color dialog .
9382	Dialog with a directory .
9383	Search dialog .
9384	Sets whether the item has children .
9385	Set the icon .
9386	Show the value of the modal
9387	Load the resource file .
9388	Write r src to file
9389	Create a window from a response .
9390	Builds a GUI object .
9391	Find a component .
9392	Get property name .
9393	Set the clipboard data
9394	Get the auto - summary of the given object .
9395	Builds the tree .
9396	Inspect a child object .
9397	Update the item .
9398	Update a child node .
9399	Make the context menu .
9400	Returns the representation of the image value .
9401	Add an expression to the filter
9402	Register a filter on a node .
9403	Asserts that the current path matches the current path .
9404	Asserts that there is no current path .
9405	Asserts that the current path is met .
9406	Asserts that there is no current path .
9407	Select option .
9408	Applies the filter to the filter .
9409	Creates a webdriver .
9410	Returns the xpath expression .
9411	Returns whether or not the given node is filtered .
9412	Switch to a frame .
9413	Accepts an alert .
9414	Accepts a confirmation .
9415	Dismiss a confirmation message .
9416	Accepts a prompt .
9417	Dismiss a prompt message .
9418	Write a page to a file .
9419	Save a screenshot to the current page .
9420	Allow server error .
9421	Returns true if the value is valid .
9422	Checks to see if a field is checked .
9423	Checks if a field has no checked field .
9424	Checks to see if a field is checked .
9425	Checks if the element has no unchecked field .
9426	Asserts that the text matches the query .
9427	Expects no text .
9428	Asserts that the title matches the given title .
9429	Asserts that no title exists .
9430	Asserts that the given title is met .
9431	Asserts that no title is present .
9432	Finds all of the selector .
9433	Finds and returns the first element matching the arguments .
9434	Returns the content of the given node .
9435	Returns the text of the given node .
9436	Parse a URL
9437	Returns a decorator that returns a new value .
9438	Wraps the given function .
9439	Determines if the given error should be thrown .
9440	Get the count of the query
9441	Caches the result in the cache .
9442	Check if any of the options are not null .
9443	Generate an error message .
9444	Checks if the given count is valid .
9445	Returns the text of the given value .
9446	Removes whitespace from the given text .
9447	Converts the given text to a regular expression .
9448	Checks if the current URL matches the given session .
9449	Resize the window to the specified width and height
9450	Starts the server .
9451	Sets the field getter .
9452	Sets the instance method .
9453	Sets the class method .
9454	Get the traceback string for the current stack trace .
9455	Returns an object source .
9456	Returns the logger for the given instance .
9457	Sets the logger .
9458	Call an API call .
9459	Get the channels .
9460	Returns a list of users .
9461	Create a message .
9462	Translates a message .
9463	Sends a message to Slack .
9464	Reads a channel from the channel .
9465	Start Slack client
9466	Boot the client .
9467	Get the difference between two pairs
9468	Returns the message color .
9469	On task start .
9470	This method is called when the task is running .
9471	Prints on stats .
9472	On skipped task .
9473	Convert a value to an address mask .
9474	Returns a decorator that returns an empty value .
9475	Adds a model to this element .
9476	Iterates over all the elements in the tree .
9477	Loads the data from the model .
9478	Returns a deep copy of this object as a map .
9479	Parses configuration attributes .
9480	Parse configuration state .
9481	Translates configuration from configuration file .
9482	Returns all the filters found in the JINJA file
9483	Looks up the path for the yang file .
9484	Convert model to json .
9485	Compare two values .
9486	Perform a POST request .
9487	Build a URI for authorization code .
9488	Request a token .
9489	Get query parameters
9490	Returns the dequery string .
9491	Build a URL
9492	Handle an exception .
9493	Creates a response with the given body and headers .
9494	Makes a redirect error response .
9495	Creates a JSON response with the given data .
9496	Validates an authorization code .
9497	Validates a refresh token .
9498	Generates a token from authorization code .
9499	Get authorization code from URI .
9500	Fetches the token from the request .
9501	Gets the authorization token .
9502	Open the device for the specified bus .
9503	Reads a byte from the device .
9504	Read bytes from a device .
9505	Read byte data .
9506	Write bytes to a device .
9507	Sends a byte data to a device .
9508	Sends an I2C block data to the device .
9509	Get the cdn url .
9510	Copy a file to a remote file .
9511	Create a local copy of a file
9512	Copy a remote file .
9513	Creates a new file from the given file .
9514	Uploads a file .
9515	Download a file from a URL
9516	Upload a file from a URL .
9517	Get the cdn urls for all files
9518	Creates a new group from a group .
9519	Create a group from a set of files .
9520	Perform a request to the REST API .
9521	Get the UUID of the sequence .
9522	Generate a list of API items .
9523	Prints the content to stdout .
9524	Sends a request to the API .
9525	Returns status of home mode .
9526	Get list of cameras .
9527	Get the list of camera information for the specified camera ids .
9528	Get a snapshot of a camera .
9529	Disables a camera .
9530	Gets the motion enum for a camera .
9531	Send camera event save .
9532	Read motion settings .
9533	looks for the last list item in the current list
9534	Iterates over the nodes of a list .
9535	Get the ilvl value
9536	Get the V_merge value for a V_merge
9537	Get the grid span .
9538	Get the td at the specified index .
9539	Check if style is false
9540	Check if the r is bold
9541	Returns true if the sitalics is a font .
9542	Check if the r is underline
9543	Check if a p is title
9544	Extract data from text run .
9545	Get the relationship information for the relationship .
9546	Get document data from a file .
9547	Determine the type of an ordered list .
9548	Build a list of li tags .
9549	Build a new tr .
9550	Build a table element for a table .
9551	Returns the content of a T tag .
9552	Removes a tag from a tree .
9553	Download a dataset .
9554	Load a model from the classifier .
9555	Extract a cifar from a CCIF file .
9556	Draws an image in a plot
9557	Plot the layers .
9558	Plot RGB filters
9559	Generate a sample of the given arrays .
9560	Returns the list of characters in the given text
9561	Generates a batch of batches .
9562	Generates a sequence of sequences for the given labels .
9563	Get the weights for the convolution
9564	Feeds an output stream into the output stream .
9565	Returns the graph with the given parameters .
9566	Find the output of a layer .
9567	Score an autoencoder .
9568	Get the output of the current layer .
9569	Proba function .
9570	Logit function .
9571	Computes and returns the mean of the classifier .
9572	Returns the features at the beginning of the sequence
9573	Generates a sample of samples from a sequence of sequences .
9574	Load the network .
9575	Generate a random weight matrix .
9576	Generate a random vector .
9577	Returns the name of the outputs matching the given patterns
9578	Returns the name of the layers matching the given patterns .
9579	This method is used to configure the graph .
9580	Get the target .
9581	Computes the mean value of the target .
9582	Performs a scan .
9583	Build an activation .
9584	Randomly generate a random number of items .
9585	Add the loss of the optimizer .
9586	Train a dataset .
9587	Iterates over all monitors .
9588	Generates a hash for all layers .
9589	Builds a computation graph .
9590	Get the input layers
9591	Get the outputs of this model .
9592	Find a layer with the specified parameter .
9593	Computes the feed - forward function for the given input .
9594	Feed forward .
9595	Computes the prediction of a dataset .
9596	Save model to file
9597	Load a network .
9598	Build the graph of the outputs .
9599	Builds a graph from the given parameters .
9600	Get the output size of this layer .
9601	Transforms the outputs into a list of outputs .
9602	Initialize the network .
9603	Resolve input shapes .
9604	Sets the output shapes for this layer .
9605	Log the layers .
9606	Returns the total number of parameters
9607	Format a string .
9608	Resolves the shape of a layer .
9609	Gets the parameter with the given key .
9610	Add a bias vector .
9611	Returns the spec that can be used to build the feature .
9612	Computes the gabor for a given point .
9613	Computes the logabor of the image
9614	Create a new tier .
9615	Delete a tier .
9616	Get the tier with the given name .
9617	Returns an EAF instance with the specified pointlength .
9618	Add point .
9619	Add an interval to this interval
9620	Remove intervals that have a given time .
9621	Set time point .
9622	Iterates over the intervals in the range of intervals .
9623	Get all intervals
9624	Indent an element .
9625	Adds an annotation to a tier .
9626	Adds a cve entry .
9627	Adds a description to the vocabulary .
9628	Registers an external reference .
9629	Register a language .
9630	Adds a lexicon reference to the list of lexicon references .
9631	Add a linguistic type .
9632	Add a linked file .
9633	Register a locale .
9634	Add a secondary file .
9635	Adds a tier .
9636	Fills the time slots .
9637	Removes annotation data from start and end slots .
9638	Generate an annotation id .
9639	Generates a unique id for a given time .
9640	Get child tiers for the given ID tier
9641	Returns the full time interval .
9642	Gets the ref - annotation data for a given time .
9643	Gets the ref - annotation data before time .
9644	Gets the tier ids for a given ling type .
9645	Merges a tier with the specified tier .
9646	Remove all annotations from a tier .
9647	Deletes the vocabulary description from the vocabulary .
9648	Delete a license .
9649	Deletes linked files .
9650	Deletes a property .
9651	Removes a reference annotation from the table .
9652	Clear secondary files .
9653	Delete a tier .
9654	Remove tier slots .
9655	Remove a tier from this tier .
9656	Get annotations for the specified time .
9657	Main entry point .
9658	Write storage .
9659	Returns the base level of the text .
9660	Sets the embedding level of the text .
9661	Embed level and overrides .
9662	Calculates the runs of the specified level .
9663	Updates the strong type of the text in the storage .
9664	Looks for neutrals that are neutrals .
9665	Appends contiguous sequence to the specified sequence .
9666	Computes the embedding level of the text .
9667	Sets current file .
9668	Parse the lines into a list of strings .
9669	Add a new object to the object .
9670	Parses the command line arguments .
9671	Change the version of this object backwards compatibility .
9672	Tries to discover a GUI .
9673	Discovers a GUI .
9674	Deregister host .
9675	Adds the entry to the file menu .
9676	Selects the selected selection .
9677	Returns the current time in milliseconds .
9678	Show a GUI .
9679	Loads the type of the Telegram bot .
9680	Get cumulative cumulative data .
9681	Get the values for a single axis .
9682	Draw a constant line
9683	Get the transform parameters .
9684	Get a mapping from the given mapping .
9685	Iterates over the specified range and returns the start of the range .
9686	Add data to the data descriptor .
9687	Add a filter definition element .
9688	Processes the configuration .
9689	Renders the graph .
9690	Calculates the border margin .
9691	Fill the right margin for the key
9692	Add top margin .
9693	Adds a popup to the foreground .
9694	Calculate bottom margin .
9695	Generate the graph element .
9696	Add a data point to the foreground .
9697	Draws the x labels for the step .
9698	Draws the y labels for the step step .
9699	Generate the x - guidelines element .
9700	Draws the y - guidelines .
9701	Draws the title of the graph .
9702	Looks for inline styles in the CSS file .
9703	Generate SVG element .
9704	Load the stylesheets .
9705	Connects to the IRC server .
9706	Send data to the socket .
9707	Connects to the server .
9708	Sends a message to the specified nick .
9709	Build the list of patterns for the nick pattern .
9710	Registers a nick .
9711	Sends a ping to the server .
9712	Registers the server .
9713	Process event loop .
9714	Registers the boss on the server .
9715	Execute a task .
9716	Callback for a boss message .
9717	Returns a pattern for the pattern that matches this pattern .
9718	Called when the channel is successful .
9719	Sends a task .
9720	Remove a nick
9721	Validates the user s email .
9722	Sends a password reset notification .
9723	Validates a password strength .
9724	Validates user token .
9725	Updates the avatar .
9726	Check if request is allowed for POST request .
9727	Get thread pool executor .
9728	Get the API client .
9729	Get the TLS client .
9730	Get server name .
9731	Executes a docker method .
9732	Submits a method to the executor .
9733	Get number of running tasks in a docker service .
9734	Remove the docker service .
9735	Filter a unique email validator .
9736	Validates an instance .
9737	Sets the password .
9738	Validates an email address .
9739	Creates a new token .
9740	This method is called when the user has expired .
9741	Checks to see if the email is valid .
9742	Sends a response to the user .
9743	Updates the expiry time .
9744	Reset email context .
9745	Sends a notification .
9746	Sends a password reset email handler .
9747	Handler for email validation .
9748	Returns the user s token .
9749	Authenticate credentials .
9750	Publish a Bokeh plot .
9751	Update the charts .
9752	Get custom javascript callback
9753	Get the widget with the given name .
9754	Get the plot .
9755	Create a TextInput widget .
9756	convert a list of objects to a string
9757	Returns the owner of the method .
9758	Assigns the values of the HTTP authentication credentials .
9759	Perform a HEAD request .
9760	Perform a GET request .
9761	Retrieves the health of the cluster .
9762	Converts a number to a readable string .
9763	Get the total load of the CPU .
9764	Get memory size .
9765	Returns the number of transactions in the network
9766	Get the volumes
9767	Get volume by id
9768	Get the total size of a volume
9769	Gets the percentage of the volume used .
9770	Get the average disk temp
9771	Get the max temp of a volume
9772	Gets the disk with the given id .
9773	login
9774	Perform a GET request .
9775	Execute a GET request
9776	Update the url
9777	Get the utilisation
9778	Get the Storage object
9779	Builds a context for a request .
9780	Get the tenant token .
9781	Build attributes .
9782	Updates the specified apps .
9783	Enables the specified apps .
9784	Get global settings .
9785	HTTP GET request
9786	Get a value from the config .
9787	Changes a configuration value .
9788	Migrate to a new config file .
9789	Start the webserver .
9790	Wait for a response code .
9791	Get new access information .
9792	Check if the token is present
9793	Refreshes the OAuth2 token .
9794	Refreshes the OAuth2 token .
9795	Creates a manifest table .
9796	Gets the full path .
9797	Checks if Glacier is a Glacier bucket .
9798	Get run id from filename
9799	Returns a copy of the given object .
9800	Adds a run_id to a manifest .
9801	Check if the run_id is in manifest
9802	Extracts a schema from a URI .
9803	Generate a snake schema for the given schema .
9804	Collects a list of contexts from a JSON document .
9805	Extracts the inner data field from an unstructured event .
9806	Creates a good event .
9807	Convert an event to a good event .
9808	Get the template name from the response .
9809	Format a context .
9810	Resolves all variables in the given context .
9811	Format SQL .
9812	Formats an instance of the context .
9813	Returns a human - readable summary of the given dictionary .
9814	Style text .
9815	Format an object .
9816	Format an object .
9817	Returns a token from a given position .
9818	Returns the latex expression for the given string .
9819	Converts latex text to text .
9820	Sets the latex input directory .
9821	Reads the input file .
9822	Converts the latex tree to a latex expression .
9823	Translates the given string to unicode .
9824	Convert a string to a string .
9825	Fetches the organisation information .
9826	Get a list of boards
9827	Get a list of members
9828	Create an organisation .
9829	Deletes a member .
9830	Retrieves a member by its id .
9831	Fetches a member
9832	Retrieves information about the specified query parameters .
9833	Create a new card
9834	Fetches the label information .
9835	Checks all items in the cache .
9836	Updates a label .
9837	Updates a label .
9838	Get the authorisation URL
9839	Fetches the card information for this card .
9840	Get a new board
9841	Get list .
9842	Get list of checklists
9843	Sends a comment to the user .
9844	Download an attachment
9845	Create a new check list .
9846	Adds a label to the graph
9847	Adds a label to the label .
9848	Create a member .
9849	Fetches member information .
9850	Get card list by query params
9851	Get organisation list by query params
9852	Creates a new new board
9853	Singled dispatch method .
9854	Retrieves information about a board .
9855	Get list .
9856	Get labels by query params
9857	Get a card .
9858	Get checklists list
9859	Get an organisation
9860	Get a new board
9861	Creates a list with the specified query parameters .
9862	Create a new label .
9863	Fetches the list of checklists .
9864	Get the card
9865	Gets the list items from the card .
9866	Creates a new checklist .
9867	Checks the item .
9868	Deletes an item .
9869	Sets the name of a checklist item
9870	Updates the state of the Checklist item
9871	Add authorisation token
9872	Handle errors .
9873	Returns the URI of the given path .
9874	Perform a JSON request .
9875	Convert an organisation to an organisation object .
9876	Create a new board .
9877	Create a new label from trolly .
9878	Create a list from a list .
9879	Create a card .
9880	Create a Checklist from trolly .
9881	Create a member from Tolly .
9882	Create an organisation .
9883	Create a new board
9884	Creates a list with the specified id .
9885	Create a card .
9886	Create a checklist .
9887	Create a member .
9888	Extracts a URL from a URL .
9889	Marks raw text .
9890	Returns the raw text .
9891	Removes all sentences from the text .
9892	Encrypt a password
9893	Returns the text with the given locations .
9894	Applies a regular expression to the given text .
9895	Sets the start and end locations of the given regex .
9896	Run the command .
9897	Creates a new AES cipher .
9898	Get mode .
9899	Package private for testing
9900	Check the scheme properties .
9901	Publish a message .
9902	Generate a unique id .
9903	Connects to the server .
9904	Logs a connectionACK .
9905	Encode a string .
9906	Returns the encoded string .
9907	Encodes a 16 - bit integer into a byte array .
9908	Returns the length of the given value .
9909	Returns the length of encoded encoded bytes .
9910	Returns the header as a byte array .
9911	Encodes this packet .
9912	Decodes packet .
9913	Encodes this result as a byte array .
9914	Parses the packet .
9915	Decodes packet .
9916	Encodes the Authorization header .
9917	Returns the QoS 1 packet .
9918	Decodes a packet .
9919	Encodes the message header .
9920	Encodes this message .
9921	Decodes packet from packet .
9922	Decodes a packet from a packet .
9923	Returns the url of a method .
9924	Perform a GET request .
9925	List the blocks .
9926	Extracts the data from the data .
9927	Fit the data .
9928	Fit kmeans .
9929	Estimates the mean shift .
9930	Fit the classifier .
9931	Extracts the clusters from the data .
9932	This method is used to generate cluster clusters
9933	Labels clusters according to the specified clusters .
9934	Converts a date to a date .
9935	Returns the total number of points in the graph .
9936	get total time span
9937	Generate a percentage picker for the specified value .
9938	Parse an element .
9939	2 name mass .
9940	Returns the massname of a string .
9941	Copy data from a directory to the output directory .
9942	Creates a copy of the given boolean array .
9943	2 - 1
9944	Smooths the kernel .
9945	Apply rolling gradient to a matrix
9946	Returns the min min of x
9947	Compute the mean shift .
9948	Performs kmeans on the data .
9949	Performs DBSCAN .
9950	Extracts the srms table from a file .
9951	Get the configuration
9952	load latools config file
9953	Prints all Ltools configurations .
9954	Copy SRM file .
9955	Loads a configuration file .
9956	Change the default configuration .
9957	Filter out hole
9958	Remove filter from filter
9959	Despike .
9960	Obtains the plot of the average data .
9961	Get the number of traces .
9962	Calculate the ratio of an alytes
9963	Apply calibration function .
9964	Get statistics for a filter
9965	Returns the time sblation times .
9966	Applies a threshold to the focus
9967	Calculate the absolute gradient
9968	Calculate the correlation information for a given window .
9969	Calculate the correlation .
9970	Add new filter
9971	Get the parameters
9972	Plots the data plot with the given keys .
9973	Returns the statistics for the given values .
9974	Read reference data .
9975	Looks up a type .
9976	Get the element s mass
9977	Calculates the MM of a molecule
9978	Constructs and returns a named ANSI sequences .
9979	Returns a new tuple that is not present in the stack .
9980	Reduces the stack .
9981	Calculates Gaussian stats for the given data .
9982	Gaussian function .
9983	Returns the standard deviation of a value
9984	Get the samples for a given subset .
9985	Depike .
9986	Calculate the background mean
9987	helper function to calculate the background interpolation
9988	Subtracts background corrections from the background stage
9989	Calculates the ratio of the data .
9990	Adds a subset of a subset to this analysis .
9991	Calculate the gradient threshold for a given image .
9992	Fit a classifier .
9993	Apply a classifier .
9994	Filter the correlation filter .
9995	Apply filter on .
9996	Apply filter off .
9997	Get the status of the filter
9998	Defrag a filter using a filter .
9999	print all samples in the subsets
10000	Plots the gradient of the image .
10001	Cross plot .
10002	Computes the histograms for the focus stage .
10003	Draws a t plot .
10004	Draws G plots .
10005	Draws a report .
10006	This method is used to set statistics .
10007	Get standard statistics for all the statistics in the dataset
10008	This method is used to export the traces of the analysis .
10009	Generate traces for a specific stage .
10010	Write the analysis log to the given directory .
10011	Export the minimal data .
10012	Splits the given file into segments .
10013	map f to g
10014	Create a plot of the features in a plot .
10015	Returns the bayes scale .
10016	scaler function .
10017	Performs a despkeing .
10018	Performs despike decay .
10019	Add a filter .
10020	Delete this resource .
10021	Reset this object to its initial state .
10022	Removes all unused components .
10023	Checks if the filter key matches the filter key .
10024	Get a value from a key
10025	Get the component for a filter
10026	Get information about all components in a file .
10027	Log the given function .
10028	Write log file to log
10029	Load log file .
10030	Auto login function .
10031	Get information from modem .
10032	Sends a message .
10033	Parses the given file as a string .
10034	Returns the URL for the nbviewer .
10035	Returns the template of this snippet .
10036	Returns the div of the example .
10037	Gets code example .
10038	Returns the URL of the image .
10039	Returns the output file name .
10040	Read the notebook and process it .
10041	Export a python file .
10042	Generate the download request .
10043	Copy the thumbnail to the image .
10044	Returns the description of the header .
10045	Resize image .
10046	Scale the image to a thumbnail .
10047	Get the thumbnail figure .
10048	Get the url for the nbfile
10049	Returns the language code for the given field name .
10050	Returns the default value for the given field .
10051	Process the thumbnail file with the given size .
10052	Save an image to the model .
10053	Refreshes the cache .
10054	Get the thumbnails
10055	Create a thumbnail for the source image
10056	Delete an image .
10057	Creates a thumbnail for the given source name and size .
10058	Get a thumbnail from the given source name .
10059	Delete thumbnail .
10060	Handle an incoming message .
10061	Subscribe to a number .
10062	Returns the set of accepted messages .
10063	Register a provider .
10064	Send a message .
10065	Returns a Flaskblueprint for the given provider name
10066	Get the blueprints for this provider .
10067	Receives a message .
10068	Receives a status message .
10069	Wraps the given method .
10070	Forwards an object .
10071	Sign a web3 transaction
10072	Estimates the gas of a transaction .
10073	Estimates the gas value for the transaction .
10074	Write to the output stream .
10075	Reads a line from the serial stream .
10076	Sends a message to the mail .
10077	Converts the message to a string .
10078	Check for bad headers .
10079	Add an attachment .
10080	Registers a service with the given services .
10081	Loads a configuration from a module .
10082	Registers a service with the given resources .
10083	Get the value for the given key .
10084	Throws an exception .
10085	Sets up all registered services .
10086	Returns the nder of the given wavelength .
10087	Calculates the Cuchy equation .
10088	Authenticates the backend .
10089	Login the backend .
10090	Get the domains for this domain .
10091	Get all items .
10092	Performs a PATCH operation .
10093	Perform a DELETE request .
10094	Compare two files
10095	Create a junction link .
10096	Initialize logger .
10097	Raises a usage error message .
10098	Extracts VCF data from the specified file .
10099	Get new column header .
10100	Reads a set of VCF files and validates it .
10101	Initialize the population statistics .
10102	Claim a set of unclaimed file readers .
10103	Splits the given data into lines .
10104	Returns the line terminator for the given data .
10105	Returns the line terminator for the given data .
10106	Reads the next line from the file .
10107	Reads the next line from the file .
10108	Splits the file into a list of lines .
10109	Reads the contents of the file into a list of lines .
10110	Read the contents of the file .
10111	Retrieve VCF readers from the VCF files .
10112	Create a VCF record from a VCF line .
10113	Returns the VCF tag values for the given sample names .
10114	Get VCF tags .
10115	Join info fields .
10116	Get format field .
10117	Returns the field of a sample .
10118	Returns a VCF stringifier for this VCF .
10119	Sets a new sample tag value .
10120	Replace the filter .
10121	Returns a list of all categories in the inventory .
10122	Create a ProductsForm .
10123	Factory method for creating a Staff products form for a user .
10124	Adds an error for a product .
10125	Wrap a user in cache .
10126	Creates a FormFieldForm for the model .
10127	Gets all pending items .
10128	Send email .
10129	Returns a stream for the OS .
10130	Parses an OS file .
10131	Iterates over the OS map files and returns a list of notes .
10132	Check if the condition is in the post - filter .
10133	Checks if the user is met .
10134	Returns the amount of remaining items in the given user .
10135	Filter carts from user
10136	Filter out carts that are currently enabled in a cart
10137	Filter items from the queryset .
10138	Filter out a user .
10139	Filter the given user .
10140	Wraps the given cart in a batch .
10141	Creates a new cart item .
10142	Auto extend the reservation duration .
10143	Try to find a voucher .
10144	Validates the cart
10145	Fixes the errors in the cart .
10146	Recalculates all available discounts .
10147	Adds a discount item to the cart .
10148	Create a report view
10149	Returns the content type of the table with the given content type .
10150	Get the form for this request .
10151	Renders the given data .
10152	List all reports
10153	Get the list of items sold
10154	Get the summary of all payment items .
10155	Returns the PaymentBase for this invoice .
10156	Returns a list of credit note refunds .
10157	Display the status of the cart .
10158	Returns the usage report .
10159	Display the line items in the cart .
10160	Gets invoices by date .
10161	List of credit notes .
10162	Display invoices .
10163	Returns a list of currently registered personets .
10164	Returns a list of users registered with the speaker profile .
10165	Returns the items in the cart .
10166	Returns a set of all categories that are held by the user .
10167	Get credit notes
10168	Check out the user s out and unregistered .
10169	Handle a guided registration .
10170	Render the user s profile .
10171	Handle the request for a profile .
10172	Display the products for a given category .
10173	Handles the form of products for the given category .
10174	Handle a voucher form .
10175	Checks to see if invoice is valid .
10176	Redirect to an invoice .
10177	Returns page of invoice .
10178	Render the manual payment form .
10179	Refund the invoice .
10180	Apply a credit note to the invoice .
10181	Handles the registration of a user .
10182	Add reservation to cart .
10183	Sends an invoice message to the invoice .
10184	Render badges .
10185	Render the badge .
10186	Gets the discounts for a given user .
10187	Annotate a discount item with the past use count
10188	Returns a list of products for a given user
10189	Apply payment to invoice .
10190	Use this method to create an invoice with the specified percentage .
10191	Generates a random access code .
10192	Evaluates the given function .
10193	Get object from module name .
10194	Gets an invoice from a cart .
10195	Creates an invoice for an invoice .
10196	Generates the line items from a cart .
10197	Apply credit notes to an invoice .
10198	Check if the invoice is view .
10199	Refresh the invoice .
10200	Checks if the invoice is allowed to pay .
10201	Updates the status of the invoice .
10202	Marks the invoice as paid .
10203	Checks if the invoice matches the invoice .
10204	Validates the invoice .
10205	Resets the invoice .
10206	Refund the invoice .
10207	Sends an email email .
10208	Sets the fields from the given data .
10209	Flattens a field into a flat map .
10210	Download downloads from the annotation .
10211	Download field .
10212	Get data for a project
10213	Gets the objects associated with the processor .
10214	Prints the inputs of a processor .
10215	Load data from a string
10216	Uploads fields from a file .
10217	Upload a file .
10218	Download a field from the cache .
10219	Returns the subclasses of the given class .
10220	Get the github repo and project .
10221	Get the list of evidence for a given variant id
10222	Iterates over the list of evidence and merges them with a merged list .
10223	Returns all variants that match the given coordinate query .
10224	Search variants by coordinates .
10225	Loads an element .
10226	Returns a copy of the given sequence .
10227	Attempt to authenticate asana api .
10228	Select a list .
10229	Save issue data .
10230	Save issue data .
10231	Saves the task data .
10232	Gets the asana task .
10233	Write the file to a file .
10234	Writes a flag .
10235	Wraps the given function .
10236	Puts an item into the queue .
10237	Create a new task .
10238	Returns a list of task numbers with links .
10239	Add missing task .
10240	Returns the set of type types for this project .
10241	Log a log message
10242	Starts a serial port .
10243	Set the polling values .
10244	Make an AAB
10245	Retrieves the reads from a given timestamp .
10246	Sets the M_context .
10247	Returns the PPF
10248	Set the maximum demand period
10249	Set meter password .
10250	Read a struct .
10251	Read data .
10252	Render a serial block
10253	Check if raw data is read .
10254	Parses a date integer into an EmDate object
10255	Get months buffer .
10256	Set Legal CT Ratios
10257	Validates a schedule .
10258	This method is used to check the year schedule and schedule
10259	Set season schedules .
10260	Set the holiday date for the given month and day .
10261	Reads schedules from a tableset .
10262	Get the tariff information for a period .
10263	Read month tariffs .
10264	Get the month of the month
10265	Reads holidays and schedules and schedules .
10266	Get the holiday date .
10267	Read schedules .
10268	Send a command message .
10269	Performs password authentication .
10270	Update the MM observers .
10271	Sets the LCD lookup lookup .
10272	This method is used to perform a request .
10273	Reads the A and CRC value
10274	Reads B and returns CRC code .
10275	Sets the fields of a block .
10276	Calculates the fields
10277	Sends a LCD command .
10278	Sets a relay duration .
10279	Send termination string .
10280	Set the pulse input ratio .
10281	Set zero reset table .
10282	Sends a LCD LCD command .
10283	Iterates over all fields in the given schema .
10284	Iterate over the fields and return the result .
10285	Returns a list of sentences with the specified separator .
10286	Generates a random string of the specified length .
10287	Print a result .
10288	Escape text .
10289	Write text .
10290	Returns a summary of the given result .
10291	Parse the command line arguments .
10292	Initializes the example .
10293	Load example .
10294	Run the example .
10295	Transform a class definition into a class definition .
10296	Returns the description of the given body .
10297	Transforms an example to a function definition .
10298	This method is used to walk the body of an example statement .
10299	Returns an AST that is only one argument .
10300	Register a file finder .
10301	Compiles source bytes to code .
10302	Parses arguments and returns the arguments .
10303	Load by name .
10304	Load source from the given path .
10305	Finds files in the given path using the given filter specs .
10306	Checks to see if the location is a new file .
10307	Removes a new file .
10308	Create a child file .
10309	Removes a configuration .
10310	Sends a restart message .
10311	Called when the results are loaded .
10312	Create a service .
10313	Use this method to get the processmon configuration .
10314	Create session .
10315	Delete expired nodes .
10316	Removes a node from the list .
10317	Returns the last updated timestamp .
10318	Get all nodes .
10319	Refreshes the session .
10320	Increment the times modified time .
10321	Deletes the resource .
10322	limit a list of values
10323	looks for bad names .
10324	Merges the message with the current status .
10325	Returns a query that matches the given value .
10326	Returns a query that matches the given value .
10327	Returns a function that takes an argument .
10328	Splat a function .
10329	Returns a function that takes a list of arguments .
10330	Spawn a process .
10331	Create a scheduler service .
10332	Parses the reader and returns the result .
10333	Creates an alternative parser .
10334	Creates an optional parser .
10335	Creates a parser that parses the given parser .
10336	Creates a new parser .
10337	Creates a new parser with a single separator .
10338	Creates a new parser with a separator .
10339	Returns the state names for the given location .
10340	Cancel the call .
10341	Check if the URL is valid .
10342	Add heart .
10343	Create a new heart .
10344	Restore a checkpoint from an input checkpoint .
10345	Freeze the model .
10346	Extracts the graph from the given session .
10347	Saves the graph from an input checkpoint .
10348	Load weights from a checkpoint .
10349	Restore a checkpoint from a checkpoint .
10350	Parse token .
10351	Render tag .
10352	Validates the given arguments .
10353	Gets the context data .
10354	Parses the token .
10355	Gets the context data .
10356	Convert caffeflow data to a network .
10357	Saves the input stream .
10358	Save graph only .
10359	Returns the number of rows required to fit the given sequence .
10360	Returns a chunked chunk of the given iterable .
10361	Iterates over the elements of the given iterable .
10362	Removes duplicates from an iterable .
10363	Returns the next element in the iterable .
10364	Iterates over the iterable using the given predicate .
10365	Returns the items in the histogram .
10366	Returns an iterable that iterates over the given item .
10367	Iterates over the given callables and throws an exception .
10368	Iterates over the given iterables .
10369	Iterates over the given iterable using the provided key .
10370	Swap the item in the partition result .
10371	Returns a new object that contains the items of the given key .
10372	Get the first queue of n queues
10373	Iterates over the saved state .
10374	Parse an as variable .
10375	Creates a tag for a class .
10376	Create a public keychain from a path .
10377	Queries the SQLite master .
10378	Iterates over the given object .
10379	Parse a selector into a boolean value .
10380	Evaluates a selector .
10381	Produces a production for the given tokens .
10382	Find nodes in lhs .
10383	Find node in lhs .
10384	Find nodes in lhs and rhs .
10385	Determines if the nth child is a child of the nth child .
10386	Returns a list of nodes matching the given validators .
10387	Sends anICMP ping message .
10388	Perform a HTTP request .
10389	Removes expired entries from the cache .
10390	Stores a key in the store .
10391	Returns the value of the specified key .
10392	Returns true if the key has changed .
10393	Check if the given timestamp matches the given timestamp .
10394	Creates a new NistBeaconValue from the given JSON string .
10395	Attempts to load the given XML string .
10396	Returns the rendered content .
10397	Read log file .
10398	Get a list of rows .
10399	Load a token .
10400	Returns the Fernet engine .
10401	Validates a token against the supported digest algorithms .
10402	Creates a token for a secret link .
10403	Computes a 32 - bit value between two integers .
10404	Calculate a 64 - bit delta
10405	Calculates the duration of the total duration
10406	Load outputs from the config .
10407	Parses the configuration file .
10408	Route an event .
10409	Starts the watchdog .
10410	Parse the format .
10411	Parses the given line into a map
10412	Validates that the current date has expired .
10413	Throws an exception if the message is missing .
10414	Fetches a token from the request .
10415	Gets the device .
10416	Warning warning .
10417	Connect to this request .
10418	Creates a link to the secret request .
10419	Sends an accepted notification for the access request .
10420	Sends a confirmation notification .
10421	Sends an email validation notification .
10422	Sends a notification that the access request was rejected .
10423	Sends a notification to the email .
10424	Creates a new secret link .
10425	Validates a token .
10426	Sends link revoked .
10427	Create a new object .
10428	Returns the object that matches the given receiver .
10429	Sends email to the request .
10430	Sets the request status .
10431	Sets the status of this request .
10432	Create a secret link .
10433	Generates a SHA512 hash for a given version .
10434	Verifies the signature of the record .
10435	Check if the record is emargoed
10436	Handle an access request .
10437	Validate email confirmation .
10438	Gets the endpoint for the command .
10439	Gets the column name .
10440	Get the selected value .
10441	Returns a query that can be applied to the selected user .
10442	Returns the version of the file .
10443	Adds the version to the file .
10444	Initialize ssh .
10445	Start timer .
10446	Wait for the service to run .
10447	Revoke shared link .
10448	Start the Riemann client .
10449	Stops the connection .
10450	Sends all events to the aggregator .
10451	Called when an event is received .
10452	Connects to Riann .
10453	Create Elasticsearch client .
10454	Convert an event to a proto message .
10455	Encodes the given events to a string .
10456	Create a message from the given data .
10457	Send a single event .
10458	Generate file previews .
10459	Download file previews .
10460	Send a message .
10461	Main loop loop .
10462	Check if the hot loop has elapsed .
10463	Respond to the SASL mechanism .
10464	Aborts SASL authentication .
10465	do mapping .
10466	Parses the footer tag .
10467	Build payment parameters .
10468	Build payment parameters .
10469	Pay with alias .
10470	Get version .
10471	Constructor .
10472	Post construction .
10473	Configure the up shortcuts .
10474	Called when an item is activated .
10475	On select item .
10476	On navigate .
10477	Initialize resource options .
10478	Compile the resource .
10479	Clean up resources .
10480	Fetches the children .
10481	Reset all children .
10482	Get the icon at the given index .
10483	Opens a new process .
10484	Get the max file fd .
10485	Closes the given file descriptor .
10486	Closes open files .
10487	Redirects stream to target .
10488	Sets attributes to attributes .
10489	Returns the sub module of the given app .
10490	Returns the submodules for the given module name .
10491	Compile an include node .
10492	Get the Gravatar url
10493	Gets the Gravatar image .
10494	Checks if the path is a file system .
10495	Checks if the given URL is a valid S3 location .
10496	Returns the absolute path of the template .
10497	List the contents of a bucket .
10498	Build worklfow json
10499	Update the status of this task .
10500	archive a folder
10501	Creates a directory if it exists .
10502	Looks for files in the archive .
10503	Moves a folder to the most recent project files
10504	Create a new instance with access token and environment
10505	List file names .
10506	Downloads a file .
10507	Checks if a storage path exists .
10508	Returns the parent entity of the given path .
10509	Create a folder
10510	Uploads a file to a destination file .
10511	Deletes an entity .
10512	Validates the given path .
10513	Creates a new instance with the given access token and environment .
10514	Creates a new storage request with the given access token .
10515	Retrieves details of an entity .
10516	Sends metadata for the given entity type .
10517	Retrieves metadata for the given entity type .
10518	Updates the metadata of the given entity .
10519	Deletes the metadata of an entity .
10520	Retrieves a list of projects .
10521	Retrieves information about a project .
10522	Get a project
10523	Deletes a project .
10524	Creates a new folder .
10525	Retrieves details of a folder .
10526	Deletes a folder .
10527	Uploads the content of a file .
10528	Sets the content of a file .
10529	Gets the content of a file .
10530	Returns the signed url of a file .
10531	Write record to collection .
10532	Get the service url .
10533	Copy the response headers .
10534	Update parameters .
10535	Adds an exception to be thrown .
10536	Returns the list of field names .
10537	Run a map job .
10538	Processes the genotype for a GATK file .
10539	Run oncotator .
10540	Sorts the elements of this list using the given f .
10541	Returns a list of timestamps representing the timestamp .
10542	Loads the data from a folder
10543	Shifts the raw text at the specified t .
10544	Get the total number of data
10545	Runs the RFX com .
10546	Creates a user .
10547	Parse VNs results from the page .
10548	Parses the release results .
10549	Parses the producers for producers
10550	Parses the character results from thesoup
10551	Parse tag results .
10552	Parse user results from thesoup
10553	Adds files to a tar file .
10554	Executes the given operation for all files in the given output directory .
10555	Read the global file .
10556	Creates the spark parameters .
10557	Build docker parameters .
10558	Read metadata from the file .
10559	Mute the input file
10560	Creates a metadata object .
10561	List all streams in the file .
10562	Export the device data to a directory
10563	Search VNDDB by term
10564	Parses the results of a search page .
10565	Query a stream
10566	Reset apikey
10567	List all users .
10568	Create an index file for the bwaits .
10569	Get the connector DB
10570	Create a stream by name and schema
10571	Force the given stream to be used .
10572	Insert data point into cache .
10573	Synchronizes the data point in the database .
10574	Start syncer
10575	Cancel the sync thread
10576	Download a job from S3 .
10577	Uploads a S3am file .
10578	Displays all labels from an ontology .
10579	Prints all children of an ontology .
10580	Calculate mean size of the BAM
10581	Get the current container ID .
10582	Download a star index
10583	Creates the Draft4 schema and validates it .
10584	Write the stream to the directory
10585	Create a device from the path
10586	Returns the labels of an ontology .
10587	Iterates over the ontology and returns the results in an ontology .
10588	Create a new wrapper .
10589	Populates the arg parser with the given config data .
10590	Generate an empty config .
10591	Get the mount path .
10592	Add an option to the argument parser .
10593	Create an argument parser for this workflow .
10594	Creates the command to run the pipeline .
10595	Set authentication for the websocket connection .
10596	Extracts the result from the HTTP response .
10597	Get the content of this resource .
10598	Sends a request to the REST API .
10599	Sends a request to the REST API .
10600	Perform a DELETE operation .
10601	Subscribe a stream
10602	Create a metadata object .
10603	List devices .
10604	Executes the cut adapt .
10605	Create a reference index for the SAM tools .
10606	Index the SAM tools .
10607	Create a Sambamba file .
10608	Samblaster
10609	Marks the picard tool .
10610	Sort a BAM by name .
10611	Check the base calibration .
10612	Download kallisto index .
10613	Download a rsem file
10614	Assign user affinity .
10615	Send a command to the server .
10616	Subscribe to a stream .
10617	Create a new websocket .
10618	Attempts to reconnect the connection .
10619	Resubscribes to all the subscriptions .
10620	Handle websocket connection .
10621	On close .
10622	Handle connection error .
10623	Handle a message
10624	Check if the connection is alive .
10625	Select VCF variants .
10626	Run the GATK variant filtration using the specified filter expression .
10627	Executes a VATK command .
10628	Apply re calibration .
10629	Run the GATK variants on the GATK .
10630	Check for quick check .
10631	Returns the handlers for the given handler mapping .
10632	Writes the configuration to a JSON file .
10633	Loads the config file .
10634	Get a term from an ontology .
10635	Perform an ontology search .
10636	Suggests an ontology .
10637	Gets all descendants of an ontology .
10638	Return all descendants of an ontology .
10639	Returns all labels of the given ontology .
10640	Get the hierarchy of the ontology .
10641	Run fastqc .
10642	Add a stream to the query parameters
10643	Initializes the app .
10644	Start Spark Datanode .
10645	Start Spark .
10646	Start a datanode
10647	Stops the worker .
10648	Check the status of the Spark container .
10649	Tokenize a file .
10650	Get the zone ID .
10651	Get the configuration for the specified zone .
10652	Parse the configuration .
10653	Check if the changeset is valid
10654	Returns the best number of members .
10655	Get the fitness score .
10656	Get the cost function value .
10657	Get the cost function value .
10658	Get the parameters .
10659	Get the current process .
10660	Add a parameter .
10661	Generate generation .
10662	Normalizes a list of options .
10663	Get the values from the environment variables .
10664	Invokes the callable with the given exceptions .
10665	Given a list of hits return a list of packages .
10666	Transform result into string
10667	Converts the HTML document to XHTML .
10668	Removes all elements from the HTML .
10669	Convert a document to a string .
10670	Opens a document in the browser .
10671	Remove this node from the tree .
10672	Sets the tag of this comment .
10673	Get an element by id .
10674	Translates a CSS select expression into a CSS select .
10675	Get the members of the handler .
10676	Loads the counts from the environment variable .
10677	Check if a single class is a single class
10678	Checks if a single module is a single module .
10679	Check if the parameters are correct .
10680	Check if the request is valid .
10681	Decodes the path .
10682	Escape the arguments of an iterable using an escape function .
10683	Returns the canonical name of the given encoding .
10684	Reads the BOM from the stream .
10685	Returns the remote address of the remote address .
10686	Convert an object to a number
10687	Parse string .
10688	Parse the given file into an element tree .
10689	Remove all children from asoup
10690	Get the current stack trace stack trace .
10691	Get the stack trace .
10692	Returns a summary of the exception .
10693	Formats the traceback of the stack trace .
10694	Find lines in the source line .
10695	Render the source table .
10696	Returns true if the entry matches the given url .
10697	Get the index URLs for a given project name .
10698	Finds all versions of a given project .
10699	Adds a requirement to the list of installed versions .
10700	Sorts the links .
10701	Get the content type of a URL .
10702	Get a link from this context .
10703	Checks if the link is verifiable .
10704	Finds all data files from the given package .
10705	Find all files that match the given package .
10706	Parses a file and returns a list of required requirements .
10707	Iterates over the given iterator .
10708	Removes comments from an iterator .
10709	Returns a marker for the given marker .
10710	Visits a node .
10711	Create a copy of an attribute .
10712	Converts a JSON value to a JSON value .
10713	Wraps a request context on the stack .
10714	Add a reference to this context .
10715	Pop the app context .
10716	Returns a new instance of this request .
10717	Fills the request with the url rule .
10718	Pop the request context .
10719	Returns the path relative to the given relative path .
10720	Checks if a dist is editable .
10721	Records a url value preprocessor .
10722	Adds a default function to the url .
10723	Register an error handler .
10724	Wraps the given generator .
10725	Returns the response .
10726	Generate a URL for the request .
10727	Returns the path to the given directory .
10728	Get the root path for the given import .
10729	Get template loader
10730	Prints completion .
10731	Returns the cookie domain for the given app .
10732	Generate a cache key for a link .
10733	Checks if the package is purelib name .
10734	Returns the paths of the files in the package .
10735	Check if the version is compatible with the pip version .
10736	Build a wheel .
10737	Returns all symbols in the given code .
10738	Tries to refresh the rates in the cache .
10739	Add egg - info files .
10740	Write the delete marker file to the given directory .
10741	Returns whether the virtual environment is under the virtual environment .
10742	Returns the username .
10743	Creates a distribution scheme .
10744	Parses cache - control header .
10745	Check if a request is cached .
10746	Handle a response .
10747	Update the zip import cache .
10748	Load template .
10749	Checks if the site - version is already installed .
10750	Saves the contents of the archive to the disk .
10751	Convert a value to a value .
10752	Adds the given filters .
10753	Sets the handler .
10754	Adds handlers to the logger .
10755	Sets the logger configuration .
10756	Execute a file .
10757	Create a temporary directory .
10758	Gets the git url .
10759	Retrieves an item from an object .
10760	Generates the generated code .
10761	Load templates .
10762	Get the default environment cache .
10763	Iterates through the given path item and returns it in the zip .
10764	Looks for the entry in the given path item .
10765	Declare a namespace .
10766	Get the class s mro .
10767	Finds adapter for an ob .
10768	Creates the directory if necessary .
10769	Get the entry points for the specified group .
10770	Check if the dist is compatible with this dist .
10771	Find the best match for the request .
10772	Gets marker .
10773	Evaluates a marker library .
10774	Format a record .
10775	Converts a number to a currency .
10776	Parse a number pattern .
10777	Returns a decimal quantum .
10778	Returns the precision of a number .
10779	Returns the representation of the specified value .
10780	Get the total seconds of a td
10781	Parse a list of requirements .
10782	Check that the class is un patched .
10783	Validates the specified value .
10784	Build the environment .
10785	Dice roll .
10786	Convert an object to a price class
10787	Create an ib instance with the given parameters .
10788	Validates the request .
10789	Get a method .
10790	Perform a method .
10791	Get the blueprint .
10792	Gets the endpoint name .
10793	Creates a new file with an error message .
10794	Checks if a request is an abstract dist .
10795	Adds a requirement to the environment .
10796	Walks all required requirements and adds them to the registry .
10797	Check if a requirement is installed .
10798	Returns the order of the dependencies in topological order .
10799	Get all namespace packages .
10800	Converts the given object to JSON .
10801	Returns tokens annotated with annotation .
10802	Merge annotations .
10803	Copies annotations from src to dest .
10804	Merge tokens into a single token .
10805	Serialize tokens using markup function .
10806	Get tokens from the given tokens .
10807	Searches for an unbalanced end tag .
10808	Transforms a list of chunks into a tag .
10809	Flattens an element into HTML .
10810	Returns the words in the given text .
10811	Returns the tag for an element .
10812	Returns the tag for an element .
10813	Convert an element to an HTML fragment .
10814	Remove tags that are inside a block .
10815	Returns the constant for the given symbol .
10816	Returns the URL for the operation .
10817	Autoolinks an element .
10818	Iterates over the elements of a document and removes any comments that have been found .
10819	Parse HTML from string .
10820	Returns a decorator that returns the requested value .
10821	Get the TreeWalker for the given tree type .
10822	Exports the repository to a location .
10823	Returns the revision of the given location .
10824	Wraps the given function with the first request .
10825	Returns the name of the import .
10826	Determines whether or not exceptions should be ignored .
10827	Find the path for the instance .
10828	Processes the template context .
10829	Handle an http exception .
10830	Check if an exception is an exception
10831	Handle an exception .
10832	Handle the routing exception .
10833	Actually dispatches the request .
10834	Get default options response
10835	Get the URL adapter for the given request .
10836	Apply the default defaults for a given endpoint .
10837	Iterates over the given iterable .
10838	Adds a requirement to the metadata .
10839	Converts a requirement to a Require dist string .
10840	Copy the package info to a metadata file .
10841	Imports a module .
10842	Iterates over all test classes and returns a list of TestCase instances .
10843	Returns a regular expression that matches all methods in this class .
10844	Finds the basename for a given module name .
10845	Checks if the given path is a module path .
10846	Get all the files in the given basedir and directories .
10847	Iterates through the base directory and returns the file path .
10848	Dumps the default arguments to JSON .
10849	Loads the default arguments from the current thread .
10850	Applies the specified mapping to the map .
10851	Add a new key to the cache .
10852	Convert an object to its binary representation .
10853	Build editable options .
10854	Find the link .
10855	Returns the location of the source directory .
10856	Remove temporary source files .
10857	Get the distribution from the archive .
10858	Get data from the stream .
10859	Get the headers from the http request .
10860	Convert iri to URI
10861	Returns the directory for the given app name .
10862	Returns the path for the given application .
10863	Returns the directory for the given app .
10864	Returns the path for the given application .
10865	Get the configuration directories for the given application .
10866	Iterates over all module files in the system .
10867	Starts the process .
10868	Converts a string to a string
10869	Get the CA bundle .
10870	Parse an HTML document .
10871	Parse the document into a DOM tree .
10872	Parse the input stream into a fragment .
10873	Returns a list of all non - zero transmissions .
10874	Reads the arguments from the given data file .
10875	Creates a new HTTP server .
10876	Print report message .
10877	Loads the bytecode from the given file .
10878	Create a stylesheet param map from stylesheet parameters .
10879	Executes a VCS command .
10880	Get native implementation version .
10881	Find the distribution for a given location .
10882	Gets external links for a page .
10883	Open a URL .
10884	Looks for a URL .
10885	Returns a set of known paths that are relative to the interpreter .
10886	Initialize the path with the file path name .
10887	Load a package .
10888	Add a path to the system .
10889	Check if user site is enabled .
10890	looks for usersitepackages
10891	Set the exit code .
10892	Looks for mcs .
10893	Set the default encoding .
10894	This method is called after the global site packages have been added .
10895	Add classpath .
10896	Opens a new process .
10897	Check if pyrex is available
10898	Converts the source files to a language .
10899	Process the application .
10900	Reads a resource .
10901	Get the agent information .
10902	Checks if the given name is a URL .
10903	Copies a link to a location .
10904	Download a URL from a URL
10905	Checks if the file is already downloaded .
10906	Register currency format .
10907	Registers the currency .
10908	Decodes the response .
10909	Default template context processor .
10910	Renders a template
10911	Render a template .
10912	Render template string .
10913	Parses the specified version .
10914	Returns true if the name of the parameter is declared .
10915	Looks for a name .
10916	Write an include statement .
10917	Writes the contents of an import statement .
10918	Creates a wheel file .
10919	Executes the given function and executes it asynchronously .
10920	Create a service factory .
10921	URL - encodes an object .
10922	Selects a requirement from the package .
10923	Creates a requirement set .
10924	Export the Pazaar to a location .
10925	Get an Amazon product .
10926	Fetches the current page of items .
10927	Gets the ancestor of this element .
10928	Gets the children of this element .
10929	Get element by path .
10930	Gets the text of a element .
10931	Returns the value of the element as a date .
10932	Gets the price and currency .
10933	Returns the price of the item .
10934	Sends a request to the cache control .
10935	Updates the response .
10936	Returns an attribute getter for the given attribute .
10937	Returns the title of the given string .
10938	Sorts the specified value using the specified attribute .
10939	Group by attribute
10940	Map a filter .
10941	Creates a new logger .
10942	Compare two values .
10943	Compare the signature of a key .
10944	Returns the secret key .
10945	Generate a signature .
10946	Returns the signature of the given value .
10947	Verifies a signature .
10948	Sign a value .
10949	Generate base64 signature .
10950	Returns true if the given signed value is not signed .
10951	Generates a JSON representation of the object .
10952	Handles an error .
10953	Returns a list of classes that match the given path .
10954	Gets the parents of the given packages .
10955	Get all directories in base path .
10956	Returns an HTTP response based on the cached Vary headers .
10957	Sign a wheel file .
10958	Unpacks a wheel file .
10959	Installs a wheel script .
10960	Builds the graph .
10961	Build a canvas from the graph
10962	Gets the node with the given ID .
10963	Called when the graph has changed .
10964	On edges .
10965	Called when a component is changed .
10966	Click on left and right components .
10967	Called when the diagram canvas is changed .
10968	Clears the diagram canvas .
10969	Called when a domain model is changed .
10970	Maps the domain model to a dot model .
10971	This method is called when an element has changed .
10972	Mapping element .
10973	Set the node style .
10974	Parse x dot data .
10975	Sets the font .
10976	Process an ellipse .
10977	Process a polygon
10978	Create a polyline from the tokens .
10979	Create a Text object from the given tokens .
10980	Print image .
10981	Serves a GridFS file .
10982	Saves the object to disk
10983	Parses the dot file .
10984	Returns true if the given point is in the plane
10985	Draws the bounds of this rectangle .
10986	Open a new Graph wizard .
10987	Connects to the database layer .
10988	Parses the dot code .
10989	Configure the graph model .
10990	Opens a file .
10991	Saves the model to disk .
10992	Save the model
10993	Initialize graph .
10994	Edit nodes .
10995	Updates edges .
10996	This method is used to edit the user
10997	Add a node to the graph
10998	Adds an edge to the graph
10999	Request a new subgraph
11000	Request a cluster
11001	Request a graph from the graph
11002	Edit options .
11003	Edit dot code
11004	Prompt the user to exit .
11005	Moves all components to the origin .
11006	Saves this object to a file .
11007	Loads a class from a file .
11008	Save the file to a file .
11009	Loads from a file .
11010	Creates a new Property with the specified name and metadata .
11011	Read a file from a file .
11012	Returns the list of start words .
11013	Creates a markov chain .
11014	Removes a chain from the chain .
11015	Add a chain to the chain .
11016	Generate a sentence .
11017	Process the graph .
11018	Add a node to the graph
11019	Remove a node from the graph
11020	Gets the node with the given ID .
11021	Remove an edge from the graph .
11022	Adds an edge to the graph .
11023	Adds a subgraph to the graph
11024	Called when the program is changed .
11025	Sets the node list to the new nodes .
11026	Parses a dot file into a graph .
11027	Read a dot file .
11028	Builds the top - level graph .
11029	Add a graph to the graph
11030	Returns the time units and multiplier .
11031	Converts the given seconds to a duration .
11032	Changes the path of the file .
11033	Creates the graph UI .
11034	Split a sequence into two sequences .
11035	Iterates over the specified iterable using the specified length .
11036	Starts Godot application .
11037	Returns the children of the given object .
11038	Add a child object to the object
11039	Inserts a child object at the given index .
11040	Remove a child from the object
11041	Called when a node is replaced .
11042	Called when an object has changed .
11043	Get the label for the given object .
11044	Sets the label of an object .
11045	Invoked when a trait is changed .
11046	Initializes the panel .
11047	Graph the editor .
11048	Add listeners to the graph editor .
11049	Update nodes .
11050	Called when nodes changed .
11051	Add features to the graph .
11052	Updates the edges of an object .
11053	Called when the graph changes .
11054	Adds edges to the graph .
11055	Parse x dot directive .
11056	On drawing .
11057	Factory method for creating a node .
11058	Create an edge based on the table editor .
11059	Create a MongoEngine proxy .
11060	Update the drawing directive .
11061	Draws a label directive .
11062	Called when drawing changes .
11063	On position change .
11064	Changes the position of the component .
11065	Click on mouse down .
11066	Prints information about a specific style .
11067	Draw the main layer .
11068	Returns the point in the polygon
11069	Draw the main layer
11070	Handle an event
11071	Process the input queue and return the result .
11072	Returns the full page url .
11073	Generate the links for this page .
11074	Returns the links for the SESE page .
11075	Returns true if the candidate content type matches the given pattern .
11076	Sorts the content type based on the content type .
11077	Parses the input url and returns the result .
11078	Remove authentication from the URL .
11079	Creates a URL identifier .
11080	Normalize host .
11081	Returns a list of modules in the given directory .
11082	Looks for modules in the given directory .
11083	Returns a list of all modules in the system .
11084	Returns all classes in the given module .
11085	List classes in a module .
11086	Creates a directory if necessary .
11087	Create a blob from a key
11088	Checks if a card number is valid .
11089	Returns the version of the git revision .
11090	Loads a module .
11091	Add a path .
11092	Load a module .
11093	Splits a line into a single line .
11094	Removes all namespaces from the document .
11095	Checks to see if the version matches the setup .
11096	Creates a new instance with the specified parameters .
11097	Updates the object s actions .
11098	Executes all registered actions .
11099	Creates a new instance with default configuration .
11100	Format request details .
11101	Format a record .
11102	Sets the context for the RenditionAwareBlock .
11103	Locks an account .
11104	Add url to download queue .
11105	Start the worker threads .
11106	Sends a PUT request .
11107	Gets the value of the key .
11108	Retrieve a key from the store .
11109	Get the index of a key
11110	Delete a key .
11111	Generates a heatmap for a given dataset .
11112	Returns the given number of months in the timestamp .
11113	Convert months to a date .
11114	Check if the month is a period
11115	Get music service .
11116	Get a storage service .
11117	Read a CSV file from a CSV file .
11118	Get the JSON representation of the file .
11119	Write a JSON file .
11120	Filter by label .
11121	Computes the mean value for a given label
11122	Get importance report
11123	Sets the data in the session .
11124	Merges two keys into the same object .
11125	Wraps the given dispatch function .
11126	Add a decorator to the dispatch function .
11127	Try to import the block_blocks module .
11128	Verifies that the block is already registered .
11129	Registers a block with the given type .
11130	Deletes a block from the registry .
11131	Converts a file to a mp3 file .
11132	Checks if the current version is valid .
11133	Check if ssl is enabled .
11134	Configure the celery task .
11135	Queues an email to be queued .
11136	Sort headers .
11137	Parse cache control header value .
11138	Parses a content type .
11139	Parses the forwarded header value from the given header value .
11140	Returns a list of quotes .
11141	Parse parameter list .
11142	Scaling image to fit width
11143	Adds a parameter to the URL .
11144	Download a file .
11145	Create music folder .
11146	Uploads a file .
11147	Create music folder .
11148	Write the sky parameters to a file
11149	Load the sky files .
11150	Read the arpiption from the file .
11151	Scale the A_phi by scaling parameter
11152	Read water absorption from file
11153	Read water scattering from file
11154	Read iop from file .
11155	Write iop to file
11156	Build the b .
11157	Build the total absption .
11158	Build the total attenuation C
11159	Build all iops from the IOPs .
11160	Sets the parameters .
11161	Load a param file
11162	Converts a string variable to a float list .
11163	Read the pr - report .
11164	Creates the handler for the given signal .
11165	Handler for processing a previous signal .
11166	Handle the process .
11167	This method is called when a signal is received .
11168	Handles an abort request .
11169	Process a status signal .
11170	Unregister an event from the event list .
11171	Query a metric .
11172	Get the sorted metric .
11173	Returns a list of elements of the given iterable .
11174	Print an item to stdout .
11175	Print all items in the iterable .
11176	Parse the signature from the given function .
11177	Read the signature from a partial .
11178	New argv .
11179	Checks to see if the file is a certainf file .
11180	Returns priority for filename .
11181	Converts a VLQ value to an integer .
11182	Reads a table .
11183	Parses the header .
11184	Returns the duration of the given seconds .
11185	Prints information about the players .
11186	Render the text .
11187	Opens the file .
11188	Write batch .
11189	Process the result file .
11190	Displays the graphic connection .
11191	Creates the graphic information .
11192	Show the error message .
11193	Hides the error message .
11194	Execute planarrad .
11195	Ask to cancel the planarrad .
11196	Called when the planarrad is pressed .
11197	Print the figure .
11198	Opens the log file .
11199	Display documentation .
11200	Sets the actions for therequisite actions .
11201	Handle the graphic context menu .
11202	Handle the mouse position .
11203	Display the target .
11204	Creates a signing lockset .
11205	Sign this signature .
11206	Hashes the signature .
11207	Returns true if this object is valid .
11208	Issue a cundsance .
11209	Returns the lock for the given rounds .
11210	Gets the block proposal for a vote .
11211	Returns the lockset if the lockset is valid
11212	Calculates the timeout for the current round .
11213	Check if the proposal is valid .
11214	Generates a number of private keys .
11215	Add a packet to the network
11216	Delivers the given packet .
11217	Creates a proxy for the given contract .
11218	Returns the native contract class corresponding to the given address .
11219	Registers a native contract .
11220	Add data to filter .
11221	Receives transactions from the remote client .
11222	Convert the vgg value to RGB
11223	Converts the given value to BGR .
11224	Get a function for the given layer .
11225	Get the output of a layer .
11226	Get features for a given layer .
11227	Generate a new key file
11228	Runs the bulk load .
11229	Load a file .
11230	Performs a bulk load .
11231	Attempt to release the bulk load .
11232	Get the target table .
11233	This method is used to perform compilation .
11234	Returns the version of the Teradata .
11235	Get a configuration value .
11236	Sets a configuration value .
11237	Handle table .
11238	Executes a command .
11239	Get a value from the settings .
11240	Load the default configuration file .
11241	Filter columns .
11242	Generate the archive .
11243	Fetches the settings from the settings .
11244	Parses a floating point string .
11245	Read gains from a string .
11246	Extracts the settings from a string .
11247	Wrap the given text .
11248	Detect devices .
11249	Calculate the psd state for a given center_freq
11250	Calculate the frequency array .
11251	Wait for a result
11252	Welch shelch
11253	Read the header from the file .
11254	Write data to a file
11255	Submits a task to the pool .
11256	Calculates the repeats for the given sample rate
11257	Create a plan for overlapping bins .
11258	Generate buffer size .
11259	Creates a PSD image .
11260	Stops the digital stream .
11261	Read a streaming stream .
11262	Setup the frequency list .
11263	Set the slave address .
11264	Executes the cmake command .
11265	Returns a list of datetimes from the given date range .
11266	Creates a new date from the specified time zone .
11267	Returns a new instance of the specified date .
11268	Returns a filter that should be used to keep the date .
11269	Deletes the specified datetimes .
11270	Returns a set of date from the given dates .
11271	Removes all dates from the given dates .
11272	Gets the SPI control byte .
11273	Reads a bit .
11274	Writes a bit .
11275	Get the bit number .
11276	Read events from the GPIO port .
11277	Wait for events to be processed .
11278	Activates GPIO interrupt into users space .
11279	Interrupt the GPIO device edge .
11280	Waits until a file exists .
11281	Add settle function map .
11282	Delete a pin - function map .
11283	Enable GPIO interrupts .
11284	Sends the bytes to the SPI .
11285	Render the content of this accordion .
11286	Returns true if this field has error .
11287	Render the link to the form .
11288	Extracts the version of a package .
11289	Returns the form arguments for the form container .
11290	Check status code .
11291	Perform a GET request .
11292	Get download link
11293	Gets link .
11294	Upload a file to a file
11295	Upload a remote url .
11296	Get upload status .
11297	List a folder
11298	Get all conversions for this file .
11299	Returns the hhidity value
11300	Convert a dewpoint to a dewpoint .
11301	Publishes the message to the server .
11302	Calculate the CRC value for the given data .
11303	Check the CRC of the data
11304	Unpacks a date from the topology .
11305	Determine whether or not a rev - archive should be used .
11306	Wake up the device .
11307	Sends a command .
11308	Send DMPAFT command .
11309	Find the fields that are newer than the archive time
11310	Calculates the fields of the loop .
11311	Update the weather data
11312	Configure logging .
11313	Get the pub service list .
11314	Get the gust value .
11315	Upload the parameters to the file .
11316	Set the arguments .
11317	Write the arguments to the file .
11318	Returns a wrapper for the given user .
11319	Registers the given app .
11320	Returns true if all requirements are satisfied .
11321	Adds an override to the stack .
11322	Pop an override context .
11323	Pushes the current thread to the current thread .
11324	Adds additional context .
11325	Throw an additional context .
11326	Add additional information to the stack .
11327	Duplicate field names .
11328	Get stats from results
11329	Convert user_ns query to user namespace
11330	Queries a query using the specified connection .
11331	Get the dataframe for this object .
11332	Get the graph of this result .
11333	Creates a pie plot with the first column of the first column .
11334	Create a plot for this matrix .
11335	Plots the plot
11336	Writes a CSV result to a CSV file .
11337	Checks if the user is required .
11338	Get the context data for this widget .
11339	Returns a sorted sorted list of widget names .
11340	Returns a list of widgets that have been updated .
11341	Register a new widget .
11342	Removes a widget .
11343	Returns the last update of the dashboard widget .
11344	Returns the setting of the dashboard widget .
11345	Adds a setting .
11346	Returns true if the last update has been updated
11347	Convert a key - value vector into a Spark Spark Spark Spark partition .
11348	Create a spark with the given shape
11349	Concatenates a bolt array with a given axis .
11350	Check the arguments of a BoltArray .
11351	Checks that the given axes are valid .
11352	Wrap the given function with the given shape .
11353	Aligns the array with the given axes .
11354	Creates a Spark array for the given axis .
11355	Returns the tordd of this bolt .
11356	Maps this RDD to an array .
11357	Execute a function on the rdd .
11358	Chunks the data .
11359	Execute a function on this RDD .
11360	Apply a function to the BoltArray .
11361	Calculate the plan for each element
11362	Pads the specified value with the specified padding .
11363	Calculates the number of chunks of the plan
11364	Returns the slices of the given plan .
11365	Mask the specified indices
11366	Repartition this RDD .
11367	Creates a StackedArray with the specified size .
11368	Aligns the specified axis with the specified axis .
11369	Gets the local array .
11370	Returns the statistics of this array .
11371	Returns the mean .
11372	Returns the variance of this matrix .
11373	Get the statistics for this axis .
11374	Returns the statistics of this image .
11375	Returns the maximum statistics of this matrix .
11376	Returns the minimum statistics of this matrix .
11377	Creates a ChunkedArray with the specified size .
11378	Swaps the rows with the specified size .
11379	Swaps the axes of the given axes .
11380	Returns a transpose of the specified axis .
11381	Reshape the array with the given shape
11382	Resizes the element with the specified shape .
11383	Squeeze this axis into a single axis .
11384	Sorts this RDD with the given type .
11385	Returns a new RDD with the specified min and max values .
11386	Get the data as array
11387	Convert an argument to a tuple
11388	Convert the arguments to a tuple .
11389	Check that the given shape is valid
11390	Returns true if the arrays are close .
11391	Returns a list of indices of the specified dimension
11392	Returns a slice of the specified dimension .
11393	Checks that two axes are valid .
11394	Resizes the size of the new key and old .
11395	Stack for all values in the stack
11396	Expands all dimensions of an array with extra dimensions
11397	Maps a RDD to an index .
11398	Format a function .
11399	Get a constructor .
11400	Create a BoltArray with the given shape
11401	Create a BoltArray with the specified axes .
11402	Create a BoltArray with the given shape
11403	Create a BoltArray with the specified axes .
11404	Create a new array with the given shape
11405	Creates a new array with the given shape .
11406	Create a boltArray for the given arrays
11407	Calculates the likelihood of the given data
11408	Returns probability probability for a given array
11409	Returns the minimum alpha value of the given min
11410	Find the best alpha .
11411	Estimates the best alpha for the given range .
11412	Plot the PPPf
11413	Fit the lognormal
11414	Removes TURBO tags from HTML .
11415	Add a Yandex to the analytics list
11416	Returns the tag list for the tag git - tag .
11417	Get the MD5 hash of this key .
11418	Calculates the SHA256 hash of the key .
11419	Calculates the SHA512 hash of the key .
11420	Parse a long from the given data .
11421	Decodes a key .
11422	Parses options .
11423	Process SSH RSA key .
11424	Process SSH DSA key parameters .
11425	Processes the ECDSA SHA key .
11426	Process an ed 255 key .
11427	Parses the private key data .
11428	Writes the input token to the output stream .
11429	Process an input token .
11430	Returns the mechs .
11431	Store a credential .
11432	Initializes the instance with the given properties .
11433	Runs the setup .
11434	Create a wave file
11435	Returns the CSS stylesheet for the h5bp .
11436	Returns a CSS stylesheet for JJF frontend .
11437	Returns the fontawesome fontawesome url .
11438	Returns an HTML version of the JJ frontend class .
11439	This method is used to generate jQuery . jquery . js file .
11440	Returns the JavaScript script for jquery - ui .
11441	Configures the jQuery frontend to use .
11442	Returns a CSS stylesheet to use for jquery jquery data tables .
11443	Returns a CSS stylesheet to be used for jQuery tables .
11444	Returns the jquery formset .
11445	The jquery scrollto function .
11446	This method is used to render a jquery jquery smooth scroll .
11447	Returns the CSS to be used for twbs .
11448	Creates the Google Analytics API with the given account .
11449	Renders the code area .
11450	Generate hash hashes for a given user .
11451	Returns the expiration time in seconds .
11452	Generate a token for a user .
11453	Serializes the attributes of the user .
11454	Get a profile
11455	Update a user s profile .
11456	Called when the user failed .
11457	Attempts to authenticate a user .
11458	Is secure?
11459	Find username by name .
11460	Create a user .
11461	Logs a user .
11462	Logout the user .
11463	login with the given params
11464	Authenticates a user with a password .
11465	Performs a resume token .
11466	Update password .
11467	Called when a user has been received .
11468	Set password .
11469	merge two values
11470	Reads the contents of the file at the given path .
11471	Returns the primary key of an object .
11472	Returns an object mapping for the given object ids .
11473	Returns the object id for the given meteor_id .
11474	Map an object mapping to an object mapping .
11475	Gets the object for a given meteor_id .
11476	Default forwards for the given operation .
11477	Get the default model id for this operation .
11478	Deletes all models .
11479	Truncate forwards .
11480	Truncate the current state .
11481	Initialize options .
11482	Sets the options for the installation .
11483	Builds the meteor app .
11484	Convert path arguments to directory .
11485	Set the random value .
11486	Get the properties of this line .
11487	Returns a random string of the specified length .
11488	Decorates an API endpoint .
11489	Returns the endpoints for the given object .
11490	Clear api path map cache .
11491	Print a value .
11492	Looks up the arguments for the given function .
11493	Start the server .
11494	Closes the connection .
11495	Process a message .
11496	Process a message from a message .
11497	Dispatches the data to the server .
11498	Dispatches a method invocation .
11499	Connects to the server .
11500	Sends a ping message .
11501	Executes a sub sub .
11502	Unsub method .
11503	Sends a method .
11504	Generate socket js info .
11505	Starts the server .
11506	Creates the command line arguments .
11507	Print the given message .
11508	Stop the Postgres Greenlet .
11509	Run the postgres greenlet .
11510	Run the PostgreSQL connection .
11511	Poll a notification from the connection .
11512	Gives the green code .
11513	Generate a random unique ID .
11514	Load API objects .
11515	This method is used to build a list of arguments .
11516	Creates a new object using the specified factory .
11517	Add a record to the server .
11518	Creates a middleware middleware .
11519	Adds a route to the application .
11520	Adds a route to the resource .
11521	Runs the application .
11522	Send message to gcm
11523	Sends a bulk message to the APNS service .
11524	Fetches inactive ids from the socket .
11525	Sends a message .
11526	Send bulk message .
11527	Send a JSON message to the server .
11528	Send data to server .
11529	Get the model class from the given module location .
11530	Fast forward selection algorithm .
11531	Search for Giphy .
11532	Get the Giphy language .
11533	Get trending for the Giphy .
11534	Get a GIF .
11535	Get screensaver .
11536	Uploads a Giphy file .
11537	Normalize the image data .
11538	Perform a GET request .
11539	Translates the Giphy image .
11540	Get the trending image .
11541	Get GIF from GIF .
11542	Uploads a file to a GIF .
11543	Creates an extension for the access control .
11544	Programmatic authentication
11545	Upload a video .
11546	Get video upload status .
11547	Updates video .
11548	Deletes a video .
11549	Check the availability of a video
11550	Check if the given video is available or not .
11551	Returns the list of videos for the specified user .
11552	This method is used to upload a video
11553	Method to upload video
11554	This method is called when a video is uploaded .
11555	Deletes the video .
11556	Fetch video .
11557	Update the Video instance .
11558	Deletes the video .
11559	Uploads metadata .
11560	Sets a metadata field .
11561	Updates the item with the specified attributes .
11562	Parse a string of comments .
11563	Dumps a tree to a string representation .
11564	Load the contents of the file .
11565	Load a file .
11566	Parse a node .
11567	Creates a new node .
11568	Returns a new name of this node .
11569	Generate the art .
11570	Returns the node with the given label .
11571	Removes all nodes from the tree .
11572	Resolve polytomies .
11573	Visits all internal names .
11574	Visits all leaf names .
11575	Returns a decorator that requires authentication .
11576	Decodes a JSON string
11577	Checks that the given name is defined in the application .
11578	Get an argument by name .
11579	Get all the arguments from the request .
11580	Override this to handle a callback .
11581	Get cookie by name
11582	Deletes a cookie .
11583	Redirect to the OpenID endpoint .
11584	Fetches an authenticated user .
11585	Sets the parameters for the request .
11586	Redirect to OpenID endpoint .
11587	Makes a request to Facebook .
11588	Request an authenticated user .
11589	Concatenates arguments .
11590	Parse a header
11591	Set a header value .
11592	Gets a list of headers .
11593	Adds a line to the header .
11594	Creates a new instance from the given headers .
11595	Normalize header name .
11596	Converts the given value to UTF - 8 encoding .
11597	Convert value to UTF - 8 .
11598	Convert a value to a basestring .
11599	Convert object to unicode .
11600	Checks if the auth plugin has conflicting settings .
11601	Iterates over all subclasses of the given class .
11602	Get the origin of the CORS policy .
11603	Determine the occupancy of the grid .
11604	Print the groovy box .
11605	Print a PDB file
11606	Calculates the number of molecules and relative numbers .
11607	Helper method to set the PBC and area size .
11608	Writes a rudiment file to the output file .
11609	Read resource from file .
11610	Adds a message to the cache .
11611	Sends a message to all users .
11612	Retrieves messages for a given user .
11613	Adds messages to the response .
11614	Update the config file .
11615	Checks if the profile name is valid .
11616	Read data from configuration .
11617	Extract password from config .
11618	Fills the config data for the specified profile .
11619	Set the password for the user
11620	Configure a config profile .
11621	Prints required items .
11622	Read data from user
11623	Get auth from user
11624	Write a profile .
11625	Sets the data for the given message type .
11626	Fills the user s password .
11627	Add attachments to message .
11628	Send a message .
11629	Send a message .
11630	Returns a factory for the given message type .
11631	Creates a property that is obfuscated with the given credential .
11632	Creates a property for an instance .
11633	Validate input .
11634	Check that the Twilio tenant is valid .
11635	Check that a slack post is valid .
11636	Check that the WatsApp is valid .
11637	Sends a coroutine to the client .
11638	Send a message .
11639	Read body from file
11640	Helper method to convert the parameters to a list of arguments .
11641	Send a message .
11642	Gets the chat id of a given user .
11643	Sends a message to the server .
11644	Send the message to the server .
11645	Get the SMTP server .
11646	Generates the email .
11647	Adds the header to the message .
11648	Add body to message .
11649	Adds attachments to the message .
11650	Gets the session .
11651	Get the SSL .
11652	Get TLS session .
11653	Send the email .
11654	Save the tags in the file .
11655	Unloads the image .
11656	Get the region of the image .
11657	Returns true if this object is valid .
11658	Removes all entries from the internal list .
11659	Encodes this object into a byte array .
11660	Read the data from the file .
11661	Deletes the contents of this file .
11662	Writes the data to the file .
11663	Write an IFFFF file .
11664	Saves the ID3 file to an ID3 file .
11665	Clears the image .
11666	Read the input file .
11667	Adds a line to the file .
11668	Add a block of lines to the source block .
11669	Draw a string .
11670	Convert a time string to an ISO8601 time string .
11671	Convert a list of words to HTML .
11672	Looks for a word in the identifier .
11673	Convert a list of words to HTML .
11674	Builds HTML code .
11675	Convert items to HTML .
11676	Saves the Atoms to a file .
11677	Update the parents of a file .
11678	Set current game .
11679	Registers a mapping for a vendor and product id .
11680	Returns the registered controller .
11681	Register a freeform key
11682	Computes the HMAC for the given string .
11683	Build request headers .
11684	Sends a request to the route .
11685	Sends a GET request .
11686	Sends a POST request .
11687	Sends a DELETE request .
11688	Converts a value into an APEValue .
11689	Sends a request to the server .
11690	Perform a HTTP call on the API .
11691	Get all hosted zones .
11692	Sends a request to a hosted zone .
11693	List resource record sets by zone ID .
11694	Send a resource record set to the hosted zone .
11695	Draws an image .
11696	Draw an image region .
11697	Returns the size of this packet .
11698	Write new pages .
11699	Find the last page in the stream .
11700	Creates a section .
11701	Appends the markup to the doc .
11702	Parse markup content .
11703	Returns the markup for the given tag name .
11704	Writes an XML document to a hosted zone .
11705	Check if file object is locked .
11706	Write bytes to a file .
11707	Read bytes from file .
11708	Converts data to UTF - 8 encoding .
11709	Adds an action to the route53 request .
11710	Extracts the request info from the e_change info
11711	Returns the string width of the given string .
11712	Checks if the object is modified .
11713	Deletes a resource record set .
11714	Creates a ChangeSet for this resource .
11715	Parse ID3v1 version .
11716	Build the ID3 version of an ID3 object .
11717	Read bytes from the file .
11718	Remove all keys from the cache .
11719	Adds a tag to the frame .
11720	Update common frames .
11721	Converts the unknown frames to a version .
11722	Unloads the sound .
11723	Play the sound .
11724	Set the voice loop points .
11725	Get a list of glyphs .
11726	Get all glyph names that match the filter
11727	Write the encoding list .
11728	Write an array
11729	Prints the glyph names .
11730	Checks if file exists .
11731	Get a list of files from the command line .
11732	Construct a HostedZone instance from an XML element
11733	Read the delegation set from the zone .
11734	Write a block of blocks .
11735	Removes padding from a block .
11736	Removes the VCFLAC file .
11737	Write the metadata to the file .
11738	Get the alias from an alias
11739	Get a list of RR records from an e - resource record .
11740	Construct a ResourceSet instance from an E_rrset .
11741	Deletes the zone .
11742	Adds a record set to the zone .
11743	Adds a new A resource record .
11744	Add an AAAA record .
11745	Add a cname record .
11746	Add an MX record .
11747	Add a new namespace record to the resource .
11748	Add a PTR record .
11749	Add a SPF record .
11750	Add an SRV record .
11751	Add a TXT record .
11752	Register a TXXX key .
11753	Get the values for a recordset .
11754	Generate an XML change .
11755	Write a resource record set to a resource record set .
11756	Creates the log name of the nanoGUI .
11757	Get an item by its alias .
11758	Returns a sorted list of keys .
11759	Generate HTML attributes .
11760	Initializes the app .
11761	Calls the initializers of the bar .
11762	Add a bar to the bar .
11763	Get the arguments .
11764	Returns the url for this endpoint .
11765	Returns true if the current URL is the same as the request .
11766	Validate the given metric class .
11767	Get statistic by name .
11768	Calculates the statistics .
11769	Tries to load the gadgets module .
11770	Dump the statistics of a metric .
11771	Executes the statistics .
11772	Get a list of values from the request .
11773	Get the value of a variable from the request .
11774	Get the next colour .
11775	Returns the query parameters for gecko charts .
11776	Obtains a number widget that can be used to visualize a chart .
11777	Returns a list of metrics that can be used to visualize the UI .
11778	Get the number of line charts for a metric
11779	Returns a metric count for the geckometer
11780	Returns a list of all metrics that have been added to the browser .
11781	Returns the active stats .
11782	Adds a gadget to this registry .
11783	Get the context data .
11784	Prints a message to stderr .
11785	Validates a function .
11786	This method is used to enter a multi - line input .
11787	List items on a line .
11788	Enter a file .
11789	Get the games for a given year
11790	Gets the home box .
11791	Get the year of the year .
11792	Get the data for this port
11793	Get the surface surface .
11794	This method is used to check toss in the world .
11795	Get theweather information .
11796	Get information about this port .
11797	Get the games for a given kind .
11798	Get standings .
11799	Get the team stats table
11800	Get the foting for voting on the year .
11801	Get the score for the line score
11802	Get the year .
11803	Get player stats for a given table
11804	Changes the current directory to the given directory .
11805	Cache url .
11806	Returns a key for the class instance .
11807	Cache the given function .
11808	Get the birth date
11809	Get the stats table .
11810	Get the statistics for the per - game .
11811	Returns the total total stats for the specified kind .
11812	Get the statistics for the per minute .
11813	Get the statistics for the per popo .
11814	Get information about advanced stats .
11815	Get theshooting table
11816	Get the basic Pp statistics for the given type .
11817	Get the basic log information for a given year
11818	Example of debugging .
11819	This method is used to parse the play list of play - details .
11820	Fills the team and teams columns with the team .
11821	Add team features
11822	Returns the win probability of a line .
11823	Get the results for this port .
11824	Get award for a single year
11825	Get the team words
11826	Gets the box scores for a given year .
11827	Gets the page info for a given year and keyword .
11828	Get the coaches for a given year
11829	Get the games for a given year .
11830	Returns the coordinator link for the given year .
11831	Returns the coordinator link for the given year .
11832	Get the stadium id for a given year
11833	Get the scheme of the year
11834	Gets the defensive alignment .
11835	Get splits for a given year .
11836	Get HTML from URL .
11837	Flattens all links in a td
11838	Convert URL to id
11839	Convert input parameters to query parameters
11840	Read data from the stream .
11841	Create a guard .
11842	Puts the read queue to write .
11843	Waits for the queue to be closed .
11844	Reads a batch of examples from the dataset .
11845	Gets the remainder .
11846	Read data from a dataset .
11847	Get a batch of rows from the queue .
11848	Reads the contents of a file from a file .
11849	Write objects to a file .
11850	Read varint .
11851	Read an object group from the stream .
11852	Flushes the file .
11853	Appends messages to the write buffer .
11854	Write to the output stream .
11855	Returns the directory of the game .
11856	Performs keyboard emulation .
11857	Generate a fake movie
11858	Returns the trait description .
11859	Executes the given condition and returns the result .
11860	Checks if the element is present .
11861	Sets the ignore exceptions .
11862	Executes the volume operator on the system .
11863	Executes the given operator .
11864	Sends a message to the socket .
11865	Poll a volume .
11866	Power off the server .
11867	Send on power .
11868	Sends a volume .
11869	Change the source .
11870	Obfuscates the given key from the request .
11871	Calculates the CRC code of plaintext .
11872	Encodes the given value to unfuscate .
11873	Get the schema for the given HTML page .
11874	Get the links of all links
11875	looks to see if the song name is download
11876	Download a song from the given URL .
11877	Get the url for a given song
11878	Get Google google url .
11879	Get the url of a given song
11880	Download page from URL .
11881	Download a file
11882	Download a file .
11883	Get station codes by city name .
11884	Get the observation for a given location
11885	Parses the observation response
11886	Get the observation for a given station
11887	Returns the paths to use for the path .
11888	Get the compiler extensions .
11889	Get the mimetype of the compiler .
11890	Returns the mimetype of the result .
11891	Returns the extension of the compiler .
11892	Add processor .
11893	Remove processor .
11894	Returns the path of all found finders .
11895	Register default defaults .
11896	This method is used to load the QA core .
11897	Creates a netnode with the meta data .
11898	Adds a plugin name to the network node .
11899	Removes the plugin name from the network node .
11900	Loads the settings from the configuration file .
11901	Sets the settings from the input settings .
11902	Create and return a Settings object
11903	Returns the keys in the system .
11904	Handles an error response .
11905	Get the DynamoDB table .
11906	List all of the DynamoDB tables .
11907	Fetches the items of the category .
11908	Returns the id of an item .
11909	Returns the timestamp of the updated date .
11910	Fetches the owner team of a crate .
11911	Fetches the owner user from the crate table
11912	Fetches the versions of a crate .
11913	Fetches the download downloads for a c rate
11914	Fetches data for a crate .
11915	Fetches the content of the CATEORY summary .
11916	Fetches all crates from the API .
11917	Retrieves the raw crate from the database .
11918	Retrieves information about a crate attribute .
11919	Fetches items from a path .
11920	Fetches items from the given category .
11921	Gets items from the API .
11922	Gets questions .
11923	Fetches the items of the event .
11924	Get the updated field of an item .
11925	Defines the category of an item .
11926	Fetches a list of items .
11927	Get the list of buffered buffers .
11928	Get the priority of an IOCB
11929	Releases the queue .
11930	Submit an IO_submit block .
11931	Cancel an IO event
11932	Cancel all the submitted blocks .
11933	Get all events from the input stream
11934	Fetches the items of this event .
11935	Retrieves the content of the spreadsheet .
11936	Get the next event from the feed
11937	Returns the export formats for the given type .
11938	Get permission factory .
11939	Creates a blueprint .
11940	Builds a URL rule .
11941	Resolves a PID .
11942	Render method for record .
11943	Render the record .
11944	Called when a chronometer is called .
11945	Closes the socket .
11946	Closes a client .
11947	Sends a metric .
11948	Sends a metric .
11949	Add a timing event
11950	Sends a gauge to the gauge .
11951	Sends a gauge delta .
11952	Sends a metric .
11953	Sends a request to the batch .
11954	Creates a batch client .
11955	Returns a new client instance .
11956	Sends a message to the remote server .
11957	Returns a factory to allow the user to open a record .
11958	Creates a TCPBatchClient using the specified size .
11959	Sends all batches to the server .
11960	Creates a TCPClient .
11961	Creates a user .
11962	Convert an object to an OM object .
11963	Interprets the term as OpenMath helper .
11964	Convert an object to a python object .
11965	Convert object to OpenMath .
11966	Append a converter to the openmathy object .
11967	Helper method to register a converter for a given type .
11968	Configures the application .
11969	Returns a list of choices .
11970	Returns the model parameters for the model .
11971	Register a field .
11972	Creates a value from the registry .
11973	Get default form data .
11974	Returns the value of the required field .
11975	Returns the value of the selected choices attribute .
11976	Gets the data for the field .
11977	Generate a string representation of a field .
11978	Generate data for a given field .
11979	Generate data for a field .
11980	Gets the data for the field .
11981	Gets the data for the field .
11982	Get the time field data .
11983	Returns a random field data .
11984	Generate a random choice field data .
11985	Returns a random choice field of the given field .
11986	Encode an object into a string .
11987	Publish the package .
11988	Executes git tag .
11989	Returns a field that is blank .
11990	Get the named global .
11991	Build a pickler object .
11992	Converts a list to a list .
11993	Produce an OMT tuple .
11994	Convert a byte array to a byte array .
11995	Encodes the given data .
11996	Convert a value to a fixed precision .
11997	Format number .
11998	Converts a number to a money object .
11999	Convert a data data to a Java array .
12000	Convert an array to a byte array .
12001	Write workspace .
12002	Remove workspace .
12003	Get workspace list .
12004	Gets a websocket with the given name .
12005	Checks if a repository exists .
12006	Read repositories from a workspace .
12007	Clone a repository .
12008	Check if ndio version is available
12009	Returns the vector of voels in the array
12010	Returns a vector of voxels .
12011	Prints workspace information .
12012	Update repository .
12013	Add console handler .
12014	Executes a command .
12015	Convert a png file to an array .
12016	Converts a ndarray to a PNG file .
12017	Create a collection of files .
12018	Checks if workspace exists .
12019	Displays the repository status .
12020	Get block size .
12021	Post a cutout .
12022	Converts a tiff file to an image .
12023	Saves the specified data to the TIFF file .
12024	Get the multipage of a Tiff file
12025	Writes the configuration to a file .
12026	Executes a branch .
12027	Get the version .
12028	Prints a greeting .
12029	This method is used to print a greeting .
12030	Returns the ids of a given channel .
12031	Merges the specified ids into the memory .
12032	Propagate this channel .
12033	Retrieves the project information for a given dataset .
12034	Retrieves a dataset .
12035	Get all available datasets .
12036	Show workspace details .
12037	Show workspace .
12038	Display workspace name .
12039	Show all workspaces .
12040	Create a new endpoint .
12041	Tries to guess the format of the file .
12042	Opens an image using the specified format .
12043	Checks for conversion formats .
12044	Build a build graph .
12045	Validates a graph .
12046	Convert a graph file to a file .
12047	Convert ramons to a json object
12048	Get ramon type .
12049	Deletes a channel .
12050	Set the dataset name .
12051	json to json
12052	Returns the dataset as a dictionary .
12053	Gets the channel data .
12054	Get the dictionary for the project .
12055	Get the dimensions of the image .
12056	Post data to data
12057	Get the path for a repository .
12058	Retrieves a list of public tokens .
12059	Get project info
12060	Upload metadata .
12061	Perform a GET request .
12062	Perform a POST request .
12063	Perform a DELETE request .
12064	Extracts the data from the given H5 dataset .
12065	Saves an HDF5 dataset to the output file .
12066	Gets the gaps in the tree .
12067	Recover an IO .
12068	Installs the Jinja translation .
12069	Acquires a state guard .
12070	Returns the percent of a part .
12071	Get cache stats .
12072	Get the cached slabs
12073	Returns the current context data .
12074	Returns the server status .
12075	Render the dashboard .
12076	Returns the statistics for the given server .
12077	Returns the server slabs .
12078	Converts the given value to a human readable representation .
12079	Looks for a config .
12080	Initialize this directory with the given arguments .
12081	Apply configuration to the configuration file .
12082	Returns the path of the path .
12083	Reads the contents of the file .
12084	Writes data to the file .
12085	Build the file handler .
12086	Closes the file .
12087	Apply configuration to this node .
12088	Get the parent path
12089	Removes the directory .
12090	Prepare children .
12091	Cleanup the children .
12092	Returns the path to the given path .
12093	Returns a list of files in this directory .
12094	Write data to file .
12095	Read the contents of a file .
12096	Add a child file to this directory .
12097	Write the configuration to a file
12098	Load the configuration file .
12099	Remove the file .
12100	Recursively load plugins .
12101	helper method to update the target object
12102	Create a child node .
12103	Resolves the path .
12104	Get the value .
12105	Updates the configuration with the given data .
12106	Initializes this configuration .
12107	Convert an object to a string .
12108	Returns the URL to the callback URL .
12109	Read input from the socket .
12110	Write output to the socket .
12111	Sends an RPC request .
12112	Read input from a socket .
12113	Sends data to the socket .
12114	Wraps the given function .
12115	Get the settled modes .
12116	Set the connection to the link .
12117	Returns the address of the link .
12118	Returns the address of the link .
12119	Called when a session is closed .
12120	Request sender .
12121	Adds a sender link .
12122	Request a receiver .
12123	Creates a receiver link .
12124	Called when a connection is destroyed .
12125	Closes the session .
12126	Process endpoint event .
12127	Renders the Markdown markup .
12128	Called when the remote remote is closed .
12129	Called when the receiver has failed .
12130	Get the host and port of the server
12131	Create a socket for the given host and port .
12132	Binds a socket to a host .
12133	Start processing .
12134	Wraps a callback that is not reentrant .
12135	Process SASL .
12136	Read data from the network .
12137	Creates a new sender .
12138	Destroys the given link .
12139	Creates a receiver .
12140	Called when the connection failed .
12141	Check if connection is active .
12142	Check if the connection has closed .
12143	Sends an error message .
12144	This method is used to validate the Twilio request .
12145	Get color string
12146	Looks up the font mapping for the font .
12147	Sets the compression option .
12148	Adds an object to the buffer .
12149	Output stream .
12150	Write stream .
12151	Adds a page to the page .
12152	Sets the color scheme .
12153	Sets the default font .
12154	Adds a page to the page .
12155	Set the font size .
12156	Adds a text to the PDF .
12157	Adds a newline to the page .
12158	Create a pie chart
12159	Outputs the current page content .
12160	Get the page orientation changes .
12161	Outputs the fonts .
12162	Outputs the images .
12163	Outputs the object .
12164	Sets current matrix .
12165	Returns the current position of the current matrix
12166	Sets the style of the symbol .
12167	Compute the point for the given point
12168	Sets information about this object .
12169	Set zoom mode .
12170	Writes the output to the output file .
12171	Writes the header of the PDF file .
12172	Puts pages into the page .
12173	Writes the resource map to the output stream
12174	Puts the information about this object to the server .
12175	Puts the catalog .
12176	put a trailer
12177	Generates a sequence from a sequence of sequences .
12178	Iterates over sequence sequences starting from the first sequence .
12179	Iterates over a sequence of sequences using the given key .
12180	Iterates over the sequences and returns the next value .
12181	Check if the x is fit
12182	Check if the given length is fit
12183	Check if a coordinate is greater than the test coordinate .
12184	Check if the coordinate is greater than the test coordinate .
12185	Create a new cursor
12186	Add this coordinate to the x - axis .
12187	Add the y - coordinate .
12188	Draw the current row .
12189	Create a new tag .
12190	List the tags
12191	Get labels by name
12192	Updates a tag .
12193	Deletes a tag .
12194	Create a tag .
12195	Returns all actions for the tagit .
12196	Returns the tags for a given label .
12197	Create a new tag .
12198	Gets the hooks .
12199	Updates a hook
12200	Creates an alert .
12201	Returns alerts for the specified type .
12202	Update alert .
12203	Installs the script extension .
12204	Returns the path of the theme .
12205	Perform a POST request .
12206	Get list of logs .
12207	Get log set .
12208	Adds an attacker slider to the target list .
12209	Gets the error .
12210	Update the parameters .
12211	Compute the transition .
12212	Runs this bin .
12213	Free memory .
12214	Receive data from the socket .
12215	Reads a line from the buffer .
12216	Read a buffer from the buffer .
12217	Gets the next response .
12218	Generates the info message .
12219	Generate an info message .
12220	Sends a command .
12221	Get information from NNTP .
12222	Opens an NNTP command .
12223	Closes the connection and closes the connection .
12224	Get the date
12225	Sends a help command .
12226	Gets a new group group .
12227	Generates a new news list .
12228	Generate new news list .
12229	Lists active groups .
12230	Get active times .
12231	Get new groups
12232	Get overview format .
12233	List extensions .
12234	Generates the list of resources .
12235	Returns a list of objects .
12236	Sends a group command .
12237	Get the next article .
12238	Reads the article and returns the response .
12239	Performs a HEAD request .
12240	Executes the NTP reply .
12241	Get the title of this image .
12242	Sends a header message .
12243	Sends the ZZ header .
12244	Performs Xover command .
12245	Executes the XPAT command .
12246	Generate a pattern for a specific id pattern .
12247	Compresses the image .
12248	Sends a POST request .
12249	Calculates the offset of a value
12250	Converts the given value to a timestamp .
12251	Convert a value to a datetime object .
12252	Perform a POST request .
12253	Perform a DELETE request .
12254	Perform an HTTP GET request .
12255	Returns a list of scheduled queries .
12256	Returns the tags for this log entry .
12257	Search for tags with the given name .
12258	Adds alert .
12259	Delete a tag .
12260	Creates a scheduled query .
12261	Creates a tag for anomaly alert .
12262	Deletes the specified alert .
12263	Parse a range value .
12264	Parse newsgroup info into a new group
12265	Parses the header .
12266	Parse the headers .
12267	Sends a POST request to the URL .
12268	Runs test tests .
12269	Returns a docstring for the defaults .
12270	Create a decorator that appends default arguments to a function .
12271	Returns a docstring for this class .
12272	Sets the value of this object .
12273	Check that the type of the type is expected .
12274	Get the value of the model .
12275	Checks the type of the parameter .
12276	Returns the error value of the error .
12277	If errors are not null return the error .
12278	Set the value of this object .
12279	Update metrics .
12280	Extract metrics from metrics .
12281	Extract metrics from the filter expression .
12282	Call the RPC API .
12283	Implementation of terminal
12284	Compares the given text .
12285	Adds an op .
12286	Initialize properties .
12287	Get all parameters from the parameter list
12288	Get the values of a parameter .
12289	Returns the errors for all parameters
12290	Clear all derived values .
12291	Set the method value
12292	Get the environment .
12293	Get the URL parameters
12294	Perform a GET request .
12295	Perform a DELETE request .
12296	Perform a post .
12297	Perform a PUT request .
12298	Call the API .
12299	Check the scene info .
12300	Get the product of a satellite
12301	Get the size of a file
12302	Download the image
12303	Check if bands are valid
12304	Connect to Earthexplorer
12305	Creates a prefix for a given name .
12306	Returns the timezone name for the given time zone .
12307	Converts this time to another time .
12308	Joins the given iterable using the given delimiter .
12309	Returns the position of a newline .
12310	Converts source to source .
12311	Dump the result .
12312	Remove the result from the result set .
12313	Creates a new instance of a list of for tune files .
12314	Returns a new instance of the given files .
12315	Runs the command .
12316	This method is used to parse a text .
12317	Handles special handling .
12318	Gets the grammar .
12319	Returns the rules for this grammar .
12320	Gets the comments .
12321	Returns the directives for this comment .
12322	Compiles the output source .
12323	Compiles this parser .
12324	Get the import directives .
12325	Returns a string representation of the token type enum .
12326	Gets the class definition .
12327	Returns the entry point name .
12328	Returns the rule definition for the given rule .
12329	Get the source of a rule .
12330	Returns rule transform .
12331	Converts an infix expression to an ASN .
12332	Convert a node to an ASN . E . e . an ASN . 1 node .
12333	Hoist the operands of the given operands .
12334	Removes all grouping groups from an optree node .
12335	Convert an AST node to a code .
12336	Converts an AST node into a code .
12337	Converts a terminal to code .
12338	Convert an AST option group to a code line .
12339	Converts a repetition group to a code block .
12340	Converts the AST_ handling to an AST .
12341	Converts an operator to an alternate string .
12342	Converts an operator to an AST .
12343	Converts an expression to an exclude expression .
12344	Generates code for multiplication .
12345	Generate code for a single - or - or more operator .
12346	Find directives by name .
12347	Flattens child node .
12348	Extracts the directives from a comment .
12349	Handles response results .
12350	Generate a new id .
12351	Unregister a hot key
12352	Adds arguments to the command line .
12353	Configure logging .
12354	Validates the arguments .
12355	Returns a list of infix nodes .
12356	Converts an operator to an Optree node .
12357	Reduce an operator node .
12358	Adds the command line arguments .
12359	Read manifest file .
12360	Get a metric definition by name .
12361	Calculates the maximum length of the fields and description .
12362	Returns the maximum length of the metrics column .
12363	Replaces underscores with underscores .
12364	Prints the Markdown field .
12365	Print metric metrics .
12366	Generate the Markdown document .
12367	Parses the input text .
12368	Attempt to attempt a given text .
12369	Add command line arguments .
12370	Convert a string to a time date .
12371	Prints the result to CSV
12372	Converts the given text to JSON .
12373	Prints text to stdout .
12374	Convert a JSON result into an XML document .
12375	Checks if the node is default .
12376	Prints a terminal tree .
12377	Returns a partial repetition for the given extractor .
12378	Creates a terminal node .
12379	Parses a repetition .
12380	Returns the exclusion of the given text .
12381	Count leading whitespace .
12382	Call the extractor on the text
12383	Gets the position of this node .
12384	Returns true if this node is empty .
12385	Adds ignored items .
12386	Check if node type matches given value
12387	Returns a parse node with the given predicate .
12388	Returns a parse node trimmed with the given predicate .
12389	Merge this node into another .
12390	Creates a new parse node .
12391	Create a parse node .
12392	Returns a position for this position .
12393	Returns the position of the current thread .
12394	Advances the next character .
12395	Skip next line .
12396	Remove the previous line .
12397	Find the next line in the cursor .
12398	Returns the index of the cursor s cursor .
12399	Adds a context to the cursor .
12400	Removes the current context .
12401	Format the function .
12402	Sets the name of this message .
12403	Returns the number of variables in this node .
12404	Count the number of functions
12405	Update count .
12406	Add a scope .
12407	Returns a new scope with the given signature .
12408	Update this scope .
12409	Creates a new scope .
12410	Update this scope .
12411	Returns a new scope .
12412	Update this scope with another scope .
12413	Returns a new scope with the given signature .
12414	Add a signature .
12415	Remove a signature .
12416	Remove the given signature .
12417	Returns the list of signatures of this scope .
12418	Get the signature .
12419	Get the signature .
12420	Get a signature .
12421	Get a scope by name .
12422	Get a signature by its name .
12423	Returns true if all polymorphic returns false otherwise .
12424	Creates a translator injector for this node .
12425	Convert an AST to a Node
12426	Copies all variables from another node to another .
12427	Get all values from the trie .
12428	Check if hit is ok .
12429	Compute the signature .
12430	Collects the types of the signature .
12431	Get the names of a type
12432	Gets the resolved name .
12433	Delete local file
12434	Deletes a file .
12435	Deletes a file .
12436	Save the local file to a local file .
12437	Save a temp file to S3 .
12438	Save object to temp file .
12439	Find by s3 path .
12440	Build an enum type
12441	Checks the types of the given signature .
12442	Add a calendar to the chainmap .
12443	Wraps a method on a class .
12444	adds a method to the class
12445	Creates a new rule .
12446	Creates a new directive .
12447	Add a decorator to the class .
12448	Sets dst .
12449	Checks if EOF is reached .
12450	Initialize rule nodes .
12451	Look for rule nodes in the rule .
12452	Returns the string representation of the given node .
12453	Adds a new stream .
12454	Adds a tag .
12455	Marks the tag .
12456	Load rules .
12457	Load hooks .
12458	Sets directives .
12459	Load rule .
12460	Executes a hook on this rule .
12461	Checks if the stream contains text .
12462	Read a character .
12463	Checks if the current character is valid .
12464	Reads until EOF is reached .
12465	Checks to see if there is a blank space .
12466	Configures the hit type .
12467	Sets the cluster type .
12468	Check that the structure is compatible with the structure .
12469	Sets the name of a rule clause .
12470	Adds rules to BNF .
12471	Sets the rule to the rule .
12472	Updates the sequences of the given sequence .
12473	Add an alternative to alternatives .
12474	Adds a range to the sequence .
12475	Report an error .
12476	Creates a capture object .
12477	Binds the cpt value .
12478	Adds a hook to the sequence .
12479	Sets the parameter s number .
12480	Add a string value pair .
12481	Read character .
12482	Set the index of a parameter .
12483	Sets hook name .
12484	Adds a parameter to the hook .
12485	Evaluate rules .
12486	Checks if the lexer is valid .
12487	Adds a state .
12488	Returns a dot representation of this graph .
12489	Writes the model to a file .
12490	Generates a png file
12491	Returns the string representation of this state .
12492	Update state .
12493	Clean all living state .
12494	Infers a root block .
12495	Infer the type of a sub expression .
12496	Sets the identifier of this type .
12497	Adds a literal node .
12498	Dump nodes .
12499	Converts a serrule to a function definition .
12500	Returns the exit scope .
12501	Generates a statement for a NOT clause .
12502	Converts a call to an expression .
12503	Generates a Lambda expression for a call .
12504	Generates an expression for a hook .
12505	Generates an expression for a rule .
12506	Builds a capture statement .
12507	Generates a scope for a scope .
12508	This method is called when an alt is encountered .
12509	Translates a sequence node into an AST .
12510	This method is used to create an optional statement .
12511	Generates a statement for a Rep0N node .
12512	Generates a statement for a rep0 n .
12513	Returns the end of src with the given indent .
12514	set indent for list
12515	Convert a list of strings to a string .
12516	Helper method to print nodes
12517	Populate an edge from a sequence .
12518	Create an edge of a state register
12519	Builds the state tree .
12520	Compares two integers .
12521	Builds a grammar from a string .
12522	Load grammar from file .
12523	Parse source and entry .
12524	Parse file .
12525	Add a node to the rule .
12526	Sets node as int .
12527	Executes a subnode on a node .
12528	Serializes an object to a Java representation .
12529	Get the count of depositions from the query .
12530	Converts a deposition to a json object .
12531	Returns a list of recordids that are invenio12 .
12532	Returns a list of all recordids in the database .
12533	Imports the bibdoc file .
12534	Get a list of bibdoc files for a given record .
12535	Queries the database .
12536	List all BibDoc files .
12537	Convert an object to a JSON object .
12538	Returns the number of users .
12539	Get a user from a user
12540	Returns the number of features that are featured .
12541	Returns a set of all modified recordids in the database .
12542	Returns a set of modified recordids that have been modified .
12543	Returns a set of restrictions for the given collection .
12544	Returns a list of revisions for a given record .
12545	Returns all the collections of a record .
12546	Convert mARC to JSON .
12547	Returns the number of records that match the given query .
12548	Dump the revisions of a record .
12549	Convert ra to json
12550	Creates a new object with common data .
12551	Loads the objects from the migrator .
12552	Initializes the app context .
12553	Wraps the given function .
12554	Get the run SQL .
12555	Returns all roles connected to an action .
12556	Query for actions .
12557	Get a JSON object from the remote account
12558	Loads a token .
12559	Create a new record .
12560	Returns the import variable or the default if not found .
12561	Populate a JSON object .
12562	Returns a list of all users in the database .
12563	Use invenio 2 .
12564	Parse a user .
12565	Handles the deposit .
12566	Creates record and pid .
12567	Load record dump .
12568	Load records .
12569	Dump records from a source .
12570	Load data from the given sources .
12571	Load common community .
12572	Load users .
12573	Load common deposit
12574	Get profiler statistics .
12575	Starts the web application .
12576	Dumps the statistics of the profiling .
12577	Enables the HTTP response .
12578	Sets the status of the request .
12579	Sends status to the server .
12580	Returns a wrapper with timestamp .
12581	Creates a user object .
12582	Performs the translation .
12583	Merges the specified images into one .
12584	Adds one dimension to the array
12585	Creates a PID from the given dump .
12586	Creates a record from the dump .
12587	Creates a record from revisions .
12588	Registers all Pids in the record .
12589	Deletes a record .
12590	Adds files to the record .
12591	Adds the file version to the bucket .
12592	Deletes the bucket from the record .
12593	Returns a list of all Pids in the database .
12594	Prepare revisions .
12595	Prepare the files .
12596	Fetch the Pids of the pid .
12597	Is this revision deleted?
12598	Creates a new community .
12599	Create a FeaturedCommunity object .
12600	Performs a dump of items .
12601	Performs a check .
12602	Deletes this widget .
12603	Calculates the magnitude of a vector .
12604	Normalize the vector .
12605	Returns the texture coordinates for the specified texture coordinates .
12606	Adds the bones to the data .
12607	Set the bone length .
12608	Set the parent bone .
12609	Calculate the pivot point of this object .
12610	Add an animation to the animation .
12611	Moves the world position to the current position .
12612	Calculate the state of this object .
12613	Set the state of this bone
12614	Reset the state of the bone .
12615	Initialize the model data .
12616	This method is called to set all vertices in the model .
12617	Draws the specified object .
12618	Sets the model .
12619	Write a report to a file .
12620	Generate XML for test suite .
12621	Adds a menu .
12622	Updates the label .
12623	Updates the label .
12624	Draws the background .
12625	delete widget
12626	Updates the label .
12627	Register event handlers for the world .
12628	Register event handlers .
12629	Add the main label .
12630	Add a button to the button .
12631	Change the menu .
12632	Create a btn_confirm button .
12633	Add a button to the button .
12634	This method is used to display the progress bar .
12635	Render all actors .
12636	Render the static world .
12637	Opens a step within a step .
12638	Check if the resource exists
12639	Add a category .
12640	Get the missing texture .
12641	Get the model with the given name .
12642	Load a model .
12643	Get the model data for the given name .
12644	Get the data for a model .
12645	Add a widget to this container .
12646	Draws the submenu .
12647	redraw the background
12648	Updates the scrollbar s content .
12649	Check if the bounding box is valid
12650	Returns the value of the interval .
12651	Adds a new layer to the stack .
12652	Get a region from the input buffer
12653	Draws the given mode .
12654	Add an action to the action list .
12655	Executes the given action on the object .
12656	Adds a new ID to the registry .
12657	Adds a new layer .
12658	Draws this widget .
12659	Deletes the layer .
12660	Gets the border .
12661	Get a watching list
12662	Get the size of the widget .
12663	Load a mesh .
12664	Create a network connection
12665	Sets the fields .
12666	Add fields .
12667	Check the element types .
12668	Returns the space of this element .
12669	Returns the centroids and volumes of the element .
12670	Fills the element with a zfill .
12671	Appends the edges of this geometry .
12672	Get the centroid and edges
12673	Adds a set to the node set .
12674	Sets to a surface .
12675	Adds the set of surfaces to the element sets .
12676	Get the metadata for this field
12677	Returns a series of values for this step .
12678	Creates the directory if it does not exist .
12679	Post process .
12680	Runs the gmsh file .
12681	Read history report .
12682	Extracts a report for a field .
12683	Convert a list of lines to a string .
12684	Calculates the equation .
12685	Generate an unsorted set .
12686	Parses the response and throws an API error .
12687	Performs a GET request .
12688	Write the XY report .
12689	Write a field report .
12690	Prints the available component types .
12691	Returns an error message for the given condition .
12692	Returns true if the exception was thrown by this descriptor .
12693	Sets the data of this variable .
12694	Returns the mode of the axis .
12695	Set the options for the graph .
12696	Creates a new class object .
12697	Process all datafeeds .
12698	Convert value to float .
12699	Converts a string to a number .
12700	Parses a graph .
12701	Convert raw string to unicode .
12702	Clean the email address .
12703	Returns true if the given mime type matches the include_type .
12704	cleanses a domain
12705	Returns left cuts .
12706	hash token .
12707	Returns the count of words in a sentence .
12708	Index a stream item .
12709	Returns the hash of the given token .
12710	Gets the frequency of the given hashes .
12711	Returns stream id for a given hash .
12712	Get stream id from hash table .
12713	Make stream items .
12714	Create a stream item from a feed entry .
12715	Creates a content item from a node .
12716	Reads a varint from the stream .
12717	Read a single instance of an object .
12718	Returns the stream item key for the given stream item .
12719	Converts stream item to key data .
12720	Change directory .
12721	Returns the string with the given prefix .
12722	Returns a string that ends with a suffix .
12723	Checks if needle is a subsequence of haystack
12724	Returns a simple HTML page .
12725	Create a new server .
12726	Shutdown the server .
12727	Add a callback to the router .
12728	Add a callback to the callback .
12729	Downloads a file .
12730	Returns the error page handler .
12731	Add a callback for a specific method .
12732	Resolve a route .
12733	Resolves a non - literal route .
12734	Normalizes the route type .
12735	Get the response body .
12736	Add a header .
12737	Adds a cookie to the response .
12738	Get a line of the response .
12739	Gets the media type .
12740	Get all values for a key
12741	Removes all files from a path .
12742	Opens the list of files .
12743	print the file type stats
12744	Run the work unit .
12745	Fetches the contents of a work unit .
12746	Returns the lines of the given file .
12747	Returns a pair of random species .
12748	Returns a pair of adjspecies .
12749	Morphs sentence .
12750	Print similarity .
12751	Hiragana .
12752	Process sentence .
12753	Print summary of a review file
12754	Command to print the keywords .
12755	Command for chrono .
12756	Creates a scp configuration object .
12757	Initialize stages .
12758	Initialize all the stages .
12759	Iterates over the input stream items .
12760	Runs all writers .
12761	Run an incremental transform
12762	Loads the configuration from the stream corpus .
12763	Start the application .
12764	Finds the chains that have the names of the tokens in the sentence .
12765	Checks if targetment is present in chain .
12766	Check if targetment is in chain
12767	Returns the regular expression that matches the specified tokens .
12768	Returns the number of tokens matching the given stream item .
12769	Create a new tagger file
12770	Iterates over the input chunks and adds them to the stream .
12771	Closes the child process .
12772	Compute a p
12773	Replaces the email emails in the text .
12774	Returns sentences from the given text .
12775	Sets the label index for the given stream item .
12776	Generates sentences from a stream item .
12777	Convert entities to unicode .
12778	create cleansed file
12779	Creates the tmpner file .
12780	Trims a span .
12781	Extracts a chunk from the input stream
12782	Ensures that the paths in the config are absolute .
12783	Load plugins from yaml .
12784	Make a chunk of the file in the original directory .
12785	Make sure the HTML is visible .
12786	Removes all tags from the HTML .
12787	Clean - visible file .
12788	Trims a span .
12789	Reads the HTML from the command line .
12790	Load a stage .
12791	Loads the stages from the given path .
12792	Load stages from a module .
12793	Instantiates a stage with the given name .
12794	Extracts the next byte from the idx_bytes in the idx_bytes array .
12795	returns true if the href is a valid URL
12796	Parse the labels for the offset .
12797	Finds all files in the given directory .
12798	Get data for the task .
12799	Get a random number of available keys
12800	Iterates over a sentence .
12801	Get the sentences for a LingPipe
12802	Retries the given function with retries .
12803	Verifies that the MD5 data is received
12804	Gets the bucket name from the config .
12805	Decodes data from input data .
12806	Extracts a chunk from a GPG file .
12807	Converts a stream id to a key .
12808	Converts a key to a stream id .
12809	Generate a hash for a stream item
12810	Starts the application .
12811	Create an argument parser for this server .
12812	Converts text to stream item offsets .
12813	Converts sentences to char tokens .
12814	Converts tokens to char offsets .
12815	Collects the offsets from the given HTML .
12816	Adds a tag .
12817	Returns a piece of text .
12818	Returns the index of the current text node .
12819	Returns all children of the given element .
12820	find elements from source
12821	Returns the first element with the given name .
12822	Returns a list of elements that match the given pattern .
12823	Checks if the given attribute matches the given value .
12824	Returns the siblings of the given element .
12825	Make a pretty representation of an element .
12826	Calls inkscape command .
12827	Export input file to output file .
12828	Export a SVG file to a PDF file .
12829	Export a SVG file to a PNG file .
12830	Returns the environment for a file .
12831	Sets the template file .
12832	Renders a doc .
12833	Writes the content of the document to a file .
12834	Get the document type from a template file .
12835	Fills the SVG document .
12836	Exports to SVG file .
12837	Export the content to a PDF file .
12838	Parses the given source .
12839	Parses the given source into a tree .
12840	Parse the given source into a fragment .
12841	Insert text into XML .
12842	Inserts a node before another node .
12843	Create a new XML node .
12844	Run the command .
12845	Returns the value of the given node .
12846	Insert a child .
12847	Reads the config file .
12848	Gets the Google API credentials .
12849	Generate a format of event datetimes .
12850	Creates an event .
12851	Creates event .
12852	Returns the extension of the file .
12853	Checks if file extension exists .
12854	Creates a temporary temporary file .
12855	Remove files from the work directory .
12856	Converts a csv file to a json file
12857	Replaces the content of a file with old .
12858	Parses the HTML .
12859	Remove the next tag .
12860	Wrap an italic tag .
12861	Wrap a strong tag .
12862	Wrap an underline underline tag .
12863	Parse the attributes of a tag .
12864	Removes line breaks from a tag .
12865	Parse href .
12866	Parse an attribute value .
12867	Removes all key values from the translation map .
12868	json string .
12869	Returns a list of files matching the given regular expression .
12870	Generate a single string .
12871	Check if a string starts with a part
12872	Return true if part is a part
12873	Computes the length of a string .
12874	Returns the next element in the sequence
12875	Evaluates XPath expression .
12876	Compute the value for the given table .
12877	Converts SVG code to HTML entities .
12878	Check if the given SVG file is a valid SVG file .
12879	Moves the given SVG files to the given coordinates .
12880	Writes the specified PDF filepaths to the output file .
12881	Embed font files .
12882	Encode font files .
12883	Checks if the input is an iterable .
12884	Checks that the function is valid .
12885	Recursive recursive function .
12886	Create an input file .
12887	Recursive recursive method .
12888	Converts an object to a string .
12889	Convert an object to a number .
12890	Convert an object to a boolean .
12891	Serialize an XPath expression
12892	Replace file content with given encoding .
12893	Converts a vcard string into a QR code .
12894	Launch Gromacs command
12895	Call a command .
12896	Convert a tex file to a PDF file .
12897	Traverses the psy tree .
12898	Transform a geometry .
12899	Create a geometry from a GeoJSON object .
12900	Merge other .
12901	Creates an envelope from another .
12902	Check if another envelope is intersect .
12903	Create a new geometry for this geometry .
12904	Create a new ZNM object
12905	Write this model to a file
12906	Applies a condition to the table .
12907	Convert nuclei into Table
12908	Creates a table from the given table .
12909	Returns a Table object that is in the given table .
12910	Returns true if n is odd .
12911	Returns true if the z is odd .
12912	Returns true if Z is odd .
12913	This method is used to convert the database to a Table
12914	Calculates the mean of the error
12915	Returns the energy of the energy .
12916	S2N attribute .
12917	Gets the S1N parameter .
12918	Gets the s2 p .
12919	Gets the s1P parameter .
12920	Calculate a table with a given formula
12921	Executes the given function on the database .
12922	Generate a scrypt key .
12923	Load a new database .
12924	Returns all domains that match the given query .
12925	Retrieves a domain from the database .
12926	Adds a domain to the database .
12927	Parses the hbs file .
12928	Returns the sip prefix for the specified path .
12929	Get the id of an epsg id .
12930	Executes the target command .
12931	Initialize logging .
12932	Downloads a file to a file .
12933	Get driver drivers
12934	Find image driver for the given path .
12935	Convert a geometry to a raster
12936	Convert a layer to a raster .
12937	Open a raster from the specified path
12938	Create a raster from data .
12939	Create a raster from source and destination .
12940	Get the options for this DMD file .
12941	Create a raster .
12942	Set the GeoTransform
12943	Reads the data from the dataset .
12944	Get the envelope .
12945	Get the image driver .
12946	Copy this image to a raster
12947	Returns a masked array with the specified geometry .
12948	Get the data value .
12949	Get the raster .
12950	Resample this image .
12951	Copies the image to the specified path .
12952	Sets the spatial projection .
12953	 warp this image .
12954	Calculates the chunk length for the given alphlen length
12955	Returns the alphabet for the specified charset .
12956	Encodes a single chunk .
12957	Convert a chunk to a long .
12958	Get a chunk from the given index .
12959	Wraps the given function .
12960	Returns the regular expression for the given file .
12961	Convert a date to a date format .
12962	Detects the timezone .
12963	Returns a JSON representation of the Swagger schema .
12964	Add debug exception hook
12965	Converts the object to JSON .
12966	Handle a job
12967	Main entry point .
12968	Starts the worker pool .
12969	Sets the classification value .
12970	Send a message .
12971	Turn on on light .
12972	Turn on a device .
12973	Sends a light on the specified brightness .
12974	Turn off the device .
12975	Send a message to the queue .
12976	Sends a message to the network .
12977	Creates an adapter for the given data .
12978	Sets the nature of the tag .
12979	Sets the value of an option .
12980	Set default values .
12981	Sets the configuration files .
12982	Get the values of the option
12983	Get the option definition .
12984	Loads a config file .
12985	Update the configuration .
12986	Loads the configuration from the configuration file .
12987	Read the config files .
12988	Returns the name of the option .
12989	Returns the list of sections for the given command .
12990	Computes the solver for a given command .
12991	Add options to the parser .
12992	Builds the main parser .
12993	Parse the command line arguments .
12994	Prints a command .
12995	Complete the command .
12996	Returns the command name for the given command .
12997	Complete the command .
12998	Starts a master server .
12999	Called when a worker has been established .
13000	Called when a line is received .
13001	Handle a worker connection .
13002	Called when a job is loaded .
13003	Called when a worker is received .
13004	Return the job .
13005	Add job set .
13006	Closes the server .
13007	Change the result of this task .
13008	Adds a result to this queue .
13009	Wait for this task to complete .
13010	Load a job from the queue
13011	Completes the job .
13012	Records a result .
13013	Clears the queue .
13014	Wait for all active jobs .
13015	Distributes jobs .
13016	Creates a new job set .
13017	Process a job .
13018	Process a job .
13019	Update the job s result .
13020	Called when the job is done .
13021	Cancel the JS file .
13022	Unquify a list .
13023	Checks if the given regular expression matches the given regular expression .
13024	List entries in the cache .
13025	Get the region for AWS .
13026	Filters entries that match the given filters .
13027	Get host name
13028	Creates a new instance from an entry .
13029	Get the value of an attribute .
13030	Sorts entries by attribute .
13031	Returns the line as a string .
13032	Creates a new instance from the specified instance .
13033	Returns a regular expression matching the given filter .
13034	Get the public IP address .
13035	Renders the given entries into a table .
13036	Updates the timestamp of the event .
13037	Creates a new set of logging handlers .
13038	Creates a new structlog logger .
13039	Creates a Celery app .
13040	Inspect a worker .
13041	Revoke a worker
13042	Creates a configuration option .
13043	Get configuration section .
13044	Fills an option with the given options .
13045	Handle the command .
13046	Complete the ZSH files .
13047	Renders the given columns .
13048	Generates a row of a row .
13049	Renders a table .
13050	Returns the rows in the table .
13051	Color color .
13052	Generate a color hash .
13053	Generate a random color .
13054	Ask the prompt for the given prompt
13055	Get user credentials .
13056	Get user by token .
13057	Checks if the given token is valid .
13058	Check if the process is running .
13059	Import an object from a module .
13060	Get the IP address
13061	Execute a HTTP method .
13062	Build the post parameters .
13063	Run the application .
13064	Render template .
13065	Executes a command .
13066	Stream command data .
13067	Converts commands to JSON .
13068	Get workdays for a given date
13069	Get the path of the given command .
13070	Builds the ssh command .
13071	Builds a scp command .
13072	Copy files to a remote path .
13073	Copies the given paths to the remote path .
13074	Run the ssh command on all hosts .
13075	Connect to an entry .
13076	Loads a profile from the configuration file .
13077	Loads the LsiProfile from the args .
13078	Adds a relationship to this part .
13079	Get the parts of a relationship .
13080	Load the relationships from a Part .
13081	Add a part .
13082	Load a part .
13083	Get the overrides for the specified name .
13084	Construct a subclass from an element .
13085	Parses the given input string into ChatlVisitor .
13086	Serialize this access key to a JWK .
13087	Sets the force field of the ampal object .
13088	Find the maximum number of radnn parameters
13089	Convert the force field parameters to a dictionary .
13090	Returns the contents of the underlying stream .
13091	Gets the segments that match the given name .
13092	Deletes a directory in the destination directory .
13093	Get bucket .
13094	Uploads a source directory .
13095	Uploads a file .
13096	Uploads an object to a bucket .
13097	Get filenames in a directory .
13098	Get the directory names in the given directory .
13099	Creates a prefix for the given directory .
13100	Deletes a file .
13101	Authenticate a user .
13102	Get the language for the given language .
13103	Gets a directory .
13104	Returns the URL of the home namespace .
13105	Wraps the given function and returns an empty string .
13106	Returns the bb3 page b3 .
13107	Get the breadcrumb of the home page .
13108	Returns the energy of all interactions in the ampal objects .
13109	Compute the internal energy of an ampal object .
13110	Returns a sorted list of sample samples .
13111	Get the token from the server .
13112	Executes LTD upload .
13113	Determines if the Travis event should be skipped .
13114	Purge a surrogate key .
13115	Fetches a build .
13116	Upload a build
13117	Deep - update the contents of a d object
13118	Set up logging .
13119	Prints the command line to the part .
13120	Prints the command line command .
13121	Returns the path part of the path .
13122	Returns the file path and part paths .
13123	Get the XML editor .
13124	Processes the module .
13125	Generate HTML for chart
13126	Generates HTML code for chart_object .
13127	Create a chart with the given data object
13128	Update the JSON with the specified data .
13129	Encode json to HTML
13130	Convert a dict object to a DataFrame
13131	Write the html file
13132	Create a chart class
13133	Encodes the X - encoded fields .
13134	Builds a user role .
13135	Infers the URL of the app .
13136	Creates the app .
13137	Deletes the app .
13138	Create a new class for an iterable attribute .
13139	Generate a random number of characters
13140	Generate a random IP address .
13141	Generate a random date
13142	Gets the session .
13143	Sends a request to the heroku API .
13144	Build the app .
13145	Gets the status of the build .
13146	Generates a sequence for a given prefix .
13147	Returns a memoized value .
13148	Creates a wrapper for the given function .
13149	Adds sub - commands to the parser .
13150	Returns the root argument parser .
13151	Returns the description of this class
13152	Returns the help string .
13153	Executes the command .
13154	This method is used to encode data .
13155	Get the list ofathletes
13156	Get the last activities of the file .
13157	Get activity list .
13158	Retrieves the activity data for an activity .
13159	Returns the endpoint endpoint for the given athlete .
13160	Returns the endpoint for the activity .
13161	Perform a GET request .
13162	Create a build .
13163	Generate a URL with the given regular expression .
13164	Returns a random gender .
13165	Generate a random name .
13166	Returns a random name for the selected languages .
13167	Sets the tick ticks .
13168	Sets the dataset .
13169	Render the chart .
13170	Get the chart type .
13171	Build the url .
13172	Open the browser to the browser .
13173	Save the image to a file .
13174	Open a request to the server .
13175	Get image from URL .
13176	Writes the next file to a file .
13177	Computes the digest of this object .
13178	Generate a random number .
13179	Decorates a class with entity name .
13180	Helper method to get protected claims .
13181	Returns the keys as JSON .
13182	Builds a metadata statement .
13183	Sign a metadata statement .
13184	Evaluates a metadata statement .
13185	Checks to see if the metadata usage matches the given metadata .
13186	Add metadata to request
13187	Parse the command line arguments .
13188	Configures the command line arguments .
13189	Sets logging options .
13190	Log a verbose message .
13191	Map a word s letter .
13192	Returns the score of all questions in a word .
13193	Given a class name and an upper case .
13194	Get data from a given timeseries
13195	Get the last value of a timeseries
13196	Checks that the given page number is a valid page number .
13197	Gets a page of an iterator .
13198	Change the mode of a path .
13199	Internal signing service .
13200	Creates a signing service .
13201	Signs a request .
13202	Perform a POST request .
13203	Performs metadata statement .
13204	Get signature from given location .
13205	Gets the contents of a bundle .
13206	Create a bundle .
13207	Returns the urls for the given asset type .
13208	Returns the HTML tags for the given asset type .
13209	Returns the HTML tags for the asset type .
13210	Colise .
13211	Get links from url
13212	Start the AMP server .
13213	Get the module names .
13214	Imports the service modules .
13215	Parse a date parameter .
13216	Returns a new document with field_list
13217	Maps a date map to a document .
13218	Print the cursor .
13219	Print the results of the cursor .
13220	Returns the topological graph of the given task .
13221	Creates the default dependencies for a project .
13222	Create default assets for a project
13223	Create default sequences for a project .
13224	Create a random screenshot for a user .
13225	Post save handler .
13226	Create a new shot handler .
13227	Update all the tasks for an asset .
13228	Attempts to connect to a peer .
13229	Send a packet to a peer .
13230	Get a value from the configuration .
13231	Registers a function to process an event type .
13232	This method is used to register a cinder event .
13233	Registers a function to process neutron events .
13234	Registers a decorator for glance event type .
13235	Register a function for Swift events .
13236	This method is used to process keystone event type .
13237	Registers a function with event type .
13238	Start a factory .
13239	Removes a factory from the container .
13240	Creates a new connection .
13241	Called when a protocol is received .
13242	Remove a protocol from the protocol .
13243	Call a remote command .
13244	This method is called when a connection is established .
13245	Called when an amp is established .
13246	Called when the client has received data .
13247	Send data to remote .
13248	Called when a connection is lost .
13249	Returns the protocol for the given connection identifier .
13250	Called when a connection is received .
13251	Closes the connection .
13252	Appends the given string to the terminal .
13253	Prints the string on the right .
13254	Convert a major number to a string .
13255	Determine the unit framework for the target unit .
13256	Check if the value is convertible to the target unit .
13257	Pads the data to be padded with the specified style .
13258	Pads the padded data with the specified block size .
13259	Sign request .
13260	Get metadata statements for this context .
13261	Prints anagrams .
13262	Parse the command line arguments .
13263	Main method for debugging .
13264	Called when a packet is received .
13265	Closes the connection handler .
13266	Create a stub for a remote function .
13267	Ping a remote call .
13268	Returns a regex for the command .
13269	Convert a string representation of a string into a string .
13270	Convert an object to a string .
13271	Verifies that the metadata statement is valid .
13272	Parses the remote response .
13273	Dump a database to a database .
13274	Returns a list of database names .
13275	Get the local files for the given path .
13276	Download a folder from S3 .
13277	Checks if the given service is required .
13278	Handle the login form .
13279	Runs the command on the given path and package .
13280	Create a fridge instance .
13281	Loads and updates the JSON object .
13282	Sign a JWT .
13283	Signs a JWT using a signing key jar .
13284	Wraps the given function .
13285	Tries to load the package from the test directory .
13286	Executes a library .
13287	Returns the score for a given letter .
13288	Computes the score for a word
13289	Reads a list of wordlists .
13290	Checks if a word is scrabble .
13291	This method is used to print a query
13292	Main entry point .
13293	Called when a request is received .
13294	Returns the command and responder for the given command name .
13295	Parses the request values for the command .
13296	Run the responder .
13297	Write response .
13298	Stops the remote server .
13299	Creates a new JSONAMP AMP protocol receiver .
13300	Convert jwks to KeyJar
13301	Load the key jar into the bundle .
13302	Process an event .
13303	Process event .
13304	Process the neutron customer .
13305	Process an event .
13306	Process an event message .
13307	Process an event .
13308	Process the event .
13309	Starts the web server .
13310	Print a message to stdout .
13311	Print an error message .
13312	Creates a new command class .
13313	Register a command subclass
13314	Returns the string representation of the constraint .
13315	Converts a string to a string .
13316	Updates the completers with the given regex .
13317	Initialize Ternya connection .
13318	Initializes the consumer .
13319	load service modules
13320	Create a consumer for the Nocloud Nova notification .
13321	Connects to the cinder .
13322	Add neutron notification .
13323	Start listening for glance notifications
13324	Listen for heat notification
13325	Register a notification for a specific Openstack component .
13326	Get the list of songs for a given songid
13327	Download music .
13328	Execute aYIELD statement .
13329	Get the name of the named global .
13330	Call function .
13331	Execute mysqld dump .
13332	Generate ditaa .
13333	This method is used to clean up the application cleanup .
13334	Runs the application .
13335	Changes the current path to the current working directory .
13336	Copy a directory to a directory .
13337	Sets the trace of the debugger .
13338	Returns the mtime of a file .
13339	Check if the file has changed .
13340	Read all files in the directory .
13341	Delete the cache .
13342	Rrape a feed
13343	Loads the image from the URL .
13344	Check if the image has changed
13345	Compiles a tag function .
13346	Returns the caller name .
13347	Find the component for a PE .
13348	Main entry point .
13349	Looks up a symbol with the given name and kind .
13350	Checks if the pe_pe is contained in the root .
13351	Returns true if the pepe is global .
13352	Get data type name .
13353	get related attributes
13354	Get an enum enum
13355	Implementation of the bridge function .
13356	Creates an external entity .
13357	Implementation of the function .
13358	Returns the constant value of a given syc .
13359	Execute an operation
13360	Get a derived attribute .
13361	Defines the class for the given object .
13362	Make a simple association
13363	Creates an association .
13364	Create an association .
13365	Creates the target component .
13366	Handles a call .
13367	Accepts a reply .
13368	Sends a reject message .
13369	Handle the reply .
13370	Send a call .
13371	Wait for a result .
13372	Handles a reply .
13373	Returns the name of the given value .
13374	Convert a value to a value .
13375	LPAREN .
13376	A RPAREN
13377	Get the data from the document .
13378	Fetches multiple content ids from the document .
13379	Creates an index action .
13380	Deletes a document .
13381	Deletes all mappings .
13382	Deletes the index .
13383	Iterates over the hits and returns the result set .
13384	Get the ids of the hit .
13385	Scans for a given prefix .
13386	Get all ids of a given prefix .
13387	Performs a fulltext scan .
13388	Get the IDs of the fulltext scan .
13389	Performs a scan for a keyword .
13390	Returns the ids of all keywords that match the given query parameters .
13391	Returns the ids of the specified feature .
13392	Returns true if feature name is true otherwise .
13393	Returns a filter that filters the key ranges .
13394	Create an index .
13395	Creates an index mapping .
13396	Gets the index mapping .
13397	Gets the field types for this field
13398	Returns the disjunction of the given feature
13399	Returns the number of bytes in the file .
13400	Returns the number of bytes in the scan .
13401	Returns a string representation of the feature set .
13402	Executes the docopts .
13403	Format an error message .
13404	Converts an instance to a link .
13405	Generates a unique identifier .
13406	Checks for uniqueness constraint .
13407	Check integrity of link integrity .
13408	Checks the integrity of the given subtype .
13409	Transform a set of feature names to index .
13410	Transform a value into an integer .
13411	Put items into cache .
13412	Clear all indexes .
13413	Scans the table with the given key ranges .
13414	Returns the ids of the given key ranges .
13415	Scan the given value .
13416	Scan index prefix .
13417	scan prefix .
13418	Scan index prefix .
13419	Add an index .
13420	Put index data .
13421	Put content .
13422	Returns the index keys for the given index .
13423	Returns the index with the given name .
13424	Sends a package name to the registry .
13425	Add direction .
13426	Returns the type name of a type
13427	Gets the referenced attribute .
13428	Get core type
13429	Get enum type .
13430	Parse a complex type
13431	Parse user type .
13432	Builds the core type .
13433	Parse the type of an object .
13434	Build component .
13435	Build the XML schema .
13436	Prettyrettify an XML string .
13437	Fetches bikes from the user .
13438	Parse positional information .
13439	Returns a new production for this node .
13440	A doubleEQUAL function .
13441	NOTEQUAL .
13442	An arrow type .
13443	Tells the left hand side of an lexer .
13444	Gives the greater than or equal to the given token .
13445	EQUAL
13446	End DOT DOT .
13447	LQBR
13448	RQBR .
13449	QMARK .
13450	Llt ; T&lt ; T&gt ; T&gt ; T&gt ; T&gt ; T&gt ; T&gt ; T&gt ; T&gt ; T&gt ; T&gt ; T&gt ; T&gt ; T&gt ; T&gt ; T&gt ; T&gt ; T&gt ; T&gt ; T&gt ; T&gt ;
13451	Tells the greater than or equal to the given value .
13452	Simplified method .
13453	Create queue .
13454	Creates a queue message .
13455	Get queue properties .
13456	Get exchange properties .
13457	Purge a queue .
13458	Creates a message .
13459	Downloads the text cache .
13460	Returns true if the text is visible
13461	Prints options .
13462	Sets the value of the given type .
13463	Generates a ROPREF_ID for an association .
13464	Generate table definition .
13465	Search for files .
13466	Search for a given query
13467	Executes the given condition with the given condition .
13468	Main entry point .
13469	Returns extra context for translation .
13470	Finds the link with the given relid .
13471	Updates the source and target class .
13472	Looks up the key of an instance .
13473	Returns the index key for an instance .
13474	Returns the type of an attribute .
13475	Create an instance .
13476	Returns all the instances of this class .
13477	Adds a class to the model .
13478	Sends a SEAM message .
13479	Receive messages from a socket .
13480	Process dead code .
13481	Extract the list of emails from a list of values .
13482	Call this method .
13483	Returns a table with the rpc spec name and rpc spec .
13484	Handle middleware middleware .
13485	Read the current value .
13486	S system .
13487	C - C C C C
13488	Processes the PE .
13489	Downloads the brightness of the image
13490	Attempt to match the given arguments .
13491	Finds the match for the given position .
13492	Creates an extra selection for a character .
13493	Called when the cursor position is changed .
13494	Get the stack trace information for the exception .
13495	This method is called when the input hook is called .
13496	Create a mapper with the specified name .
13497	Add a function to the cache .
13498	Add a function to the URL
13499	Add a function to the store .
13500	Add a function .
13501	Search for the data store matching the specified method .
13502	Executes the command .
13503	Invoked when a prompt is pressed .
13504	Invoked when the cursor is pressed .
13505	Searches for the previous edit history .
13506	Find the next edit text in the history .
13507	Handle execute reply .
13508	Check if the history is locked .
13509	Gets the edited history at the specified index .
13510	Sets history .
13511	Store edits in the history .
13512	Closes the window .
13513	Generates a Record Collection
13514	Converts a collection of records to a DataFrame
13515	Build a collection of items from a batch
13516	Sets the attributes of this object .
13517	Subscribes to the socket .
13518	Logs a message .
13519	Sorts a list of lists .
13520	Executes an iterator on the view .
13521	Convert a notebook to a new notebook format .
13522	Returns the supported platform .
13523	Get an importer for a given path .
13524	This is a convenience method that takes care of writing the arguments to the output stream .
13525	Parses a version string .
13526	Checks to see if the requirement should be overridden .
13527	Inserts a distros entry into this location .
13528	Resolves all plugins .
13529	Returns the path of the archive with the specified name .
13530	Parses an entry from the given source .
13531	Get the parsed package info .
13532	Compiles a marker map .
13533	Extracts the file name from the file name .
13534	Collapses leading whitespaces .
13535	Hide the completion event .
13536	Show the completion event .
13537	Gets the current text cursor position .
13538	Updates the current item .
13539	Registers an admin site .
13540	Get a list of disk partitions .
13541	Computes the system cpu times .
13542	Get a list of cpu times .
13543	Read stdin from the input stream .
13544	Read from the stdin .
13545	Sets the visibility of the tab bar .
13546	Adds a tab with the current kernel .
13547	Adds a tab with the specified frontend .
13548	Add action to menu .
13549	Make dynamic magic .
13550	Show all magic menu .
13551	Dialog event .
13552	Verify a password .
13553	Checks if the hashed passphrase matches the passphrase .
13554	Builds an editable boolean cell for an item .
13555	Returns the short title for the given item .
13556	Collects the list of editable booleans for the given field
13557	Toggles the boolean value of an object
13558	Check if the user has permission to change the user .
13559	Checks if the user has permission to delete the given object .
13560	Add child nodes to the graph .
13561	Creates a node with the root nodes .
13562	Applies the given jobs to the graph .
13563	Iterates over the graph and verifies that it has been completed .
13564	Defines the color table .
13565	Returns a color scheme .
13566	Set a new color scheme .
13567	Set the color scheme .
13568	Returns the path of the library .
13569	Reads the iopub data from the sub - channel .
13570	Sends a request to the stdin channel .
13571	Wait for the kernel
13572	Sets the style
13573	Gets the format for a given token .
13574	Get text format from document
13575	Gets the format for the given token .
13576	Tries to find the given command .
13577	Returns absolute path .
13578	Checks that the specified namespace is declared in the distribution .
13579	Parses entry points .
13580	Return true if source is blank
13581	Checks to see if the source is two blanks
13582	Assigns a line to the interpreter .
13583	Assigns a line to the interpreter .
13584	Returns the default prompt for the given line .
13585	Extracts the given line from an IP prompt .
13586	Compiles the source code .
13587	Returns true if there is more than one input .
13588	Find the indentation of a line
13589	Stores a line in the source file .
13590	Reset the source .
13591	Handle cell magic .
13592	This method is called when a line is written to the cell .
13593	Reset a cell .
13594	Processes the input line .
13595	Initializes the observers .
13596	Invokes the registered observers for the given type and sender .
13597	Returns the set of observers for a given notification .
13598	Adds a callback to the observer .
13599	Start a background job .
13600	Update the status of the job .
13601	Print a group
13602	Flushes a group .
13603	Update the status of the job .
13604	Log the status of this job .
13605	Initializes the background thread .
13606	Inserts a value at the specified index .
13607	Create a copy of this instance .
13608	Declare a special variable .
13609	Define a list variable .
13610	Define a set variable .
13611	Resolves working path .
13612	Generate random route .
13613	Get the distance from a state
13614	Get default values .
13615	Checks if the table exists .
13616	Converts a line to a list of values .
13617	Render the expression
13618	Prints the message to stderr .
13619	Loads and validates the configuration .
13620	Converts a list of rows into a table .
13621	Creates an HTML tag for a URL .
13622	Generates javascript script for given url .
13623	Generates a stylesheet for the given url .
13624	Generate an image .
13625	Compares value with argument .
13626	Multiply value by argument .
13627	Returns the value with the given argument .
13628	Evaluates the given value with the given argument .
13629	Returns the verbose name of the model
13630	Returns the user input string .
13631	Add test run options .
13632	Sets the value of a builtin .
13633	Override this method to remove a builtin value .
13634	Remove all the globals .
13635	Find the name of the URL for a requirement .
13636	Get link links for this link .
13637	Converts a string to a shell list .
13638	Runs the coverage script .
13639	Add action to dash dash
13640	Add an action .
13641	Parse command - line options .
13642	Print the coverage package .
13643	Handle help .
13644	Checks if the options are valid .
13645	Executes the script .
13646	Print information about the coverage .
13647	Remove an object from the queue .
13648	Change the display hook .
13649	Logs the given exception and throws an exception .
13650	Checks if the given URL is a valid URL .
13651	Checks if the given URL is a valid URL .
13652	Validate container .
13653	Pull a map from the keys .
13654	Create a random port .
13655	Create a remote function
13656	Creates a parallel function .
13657	Map a sequence of sequences to a result .
13658	Returns the tail of the line .
13659	Auto indent for line .
13660	Prints the log start .
13661	Update the current system module state .
13662	Update the global module state .
13663	Post - execute function .
13664	Initializes the main module .
13665	Add a main module to the cache .
13666	Update the user s namespace .
13667	Returns a list of all the references to the user - global namespace .
13668	Reset all histories .
13669	Deletes a variable .
13670	Deletes all keys that match the given regular expression .
13671	Propagate variables to user namespace .
13672	Looks up an object .
13673	Get the named property of a class .
13674	Find object by name .
13675	Inspect a method .
13676	Add history manager .
13677	Override this to show the Ccepthook on the stack trace .
13678	Displays a traceback .
13679	Prints a traceback to stdout .
13680	Show a syntax error .
13681	Read the next line from the line .
13682	Called when the text is complete .
13683	Add a custom completer to the completer .
13684	Set the completer frame .
13685	Check the line magic for a line .
13686	Gets the magic for the given magic name .
13687	Add a macro .
13688	Executes the command .
13689	rewrites the input to stdout
13690	Get a map of variable names
13691	Evaluate expressions .
13692	Eval expression .
13693	Execute a file .
13694	Executes the cached cell magic
13695	Process a raw cell .
13696	Compiles a list of AST nodes .
13697	Activates the GUI .
13698	Expand the command .
13699	Create a temporary file with the given data .
13700	Returns a list of lines in the history .
13701	get user code from target file
13702	Closes the session manager .
13703	Publish a message .
13704	Sends a message to the client .
13705	Creates a new skip predicate .
13706	Decorates a known failure condition .
13707	Decorates an imp warning .
13708	Get the profiles in the given path
13709	Looks for the bundled profiles .
13710	Looks up a version conflict .
13711	Sends a command to the server .
13712	Returns the filename for the given filename .
13713	Read the next line from the file .
13714	Sends a message to the server .
13715	Read the terminal data .
13716	Prepare a regex pattern
13717	Compiles a pattern and returns the result .
13718	Main loop loop .
13719	Prepare a regex pattern .
13720	Find the best match in the buffer .
13721	Searches the buffer and returns the index of the best match .
13722	Create a listener for the progress monitor .
13723	Copy a directory to a directory
13724	Emits the message at the given level .
13725	get the last error
13726	Executes the command .
13727	Find the source for the given filename .
13728	Returns the set of arcs executed on the file
13729	Returns the missing paths .
13730	Returns the unpredicted arcs .
13731	Returns the lines of the parser .
13732	Returns the number of branches in the parser .
13733	Returns the set of arcs for the branch .
13734	Get the stats for this parser .
13735	Sets the precision .
13736	Returns the coverage coverage of the coverage .
13737	Returns a string representation of the pc .
13738	Returns the text of the haystack .
13739	Highlight the given string .
13740	Highlights the given string .
13741	Executes the given function on this thread .
13742	Returns the end of the string .
13743	Appends an instruction to the output .
13744	Pads the text with the specified width and mark .
13745	Replaces all paragraphs in a paragraph .
13746	Dedent text .
13747	Wraps the given text into paragraphs .
13748	Find optimal separator .
13749	Get the element at index i .
13750	Returns the item matrix for the given items .
13751	Returns a list of fields with given fields .
13752	Sets the kernel command line arguments .
13753	Connects to the ssh server .
13754	Pretty prints an object .
13755	Prints an object to stdout .
13756	Get the mro of an object .
13757	Print an object .
13758	Create a pretty print printer .
13759	Create a pretty print printer .
13760	Print a super class .
13761	Print a re - compile pattern .
13762	Print an object .
13763	Print a function .
13764	Print an exception .
13765	Register a type .
13766	Register a type and return it .
13767	Writes an object to the output .
13768	Adds a breakable to the output .
13769	Remove a group .
13770	Outputs the output .
13771	Print an object to the stack .
13772	Default color schemes .
13773	Write a row into an Ods object .
13774	Gets the text from the clipboard .
13775	Get clipboard from clipboard .
13776	Gets the text from the clipboard .
13777	Returns the path to build the path for the build .
13778	remove key from key
13779	Extract dates from an object
13780	Squash all dates in the given object .
13781	Returns the default representation of the given object .
13782	clean up a JSON object
13783	Checks if there is a site dir .
13784	Installs a script .
13785	Waits for the current engine .
13786	Create a parser for this command .
13787	Convert the source files to C .
13788	Connects to the server .
13789	Builds the PackageFinder .
13790	Change log level .
13791	Set default logging .
13792	Check that the flags are changed
13793	Prints the help for a class
13794	Prints help for the command line .
13795	Prints the sub - commands .
13796	Print help .
13797	Print examples .
13798	Merges the config with the current config .
13799	Load a sub - command .
13800	Build a map of flags for this class .
13801	Initializes the command line .
13802	Load a config file .
13803	Generate the configuration file .
13804	Samples a given array
13805	Formatter for the given information .
13806	Write log message .
13807	Called when a class has changed .
13808	Returns the help for a class .
13809	Generate help for a trait .
13810	Generate a configuration section .
13811	Clear the instance of the class .
13812	Create an instance of the class .
13813	Report a failure .
13814	Logs an exception .
13815	Flush the channel .
13816	Start the channels .
13817	Read the contents of a file .
13818	Tries to read an interrupt message from a p .
13819	Handle a command .
13820	Splits the given string into tokens .
13821	Extracts the hash of the dh .
13822	Register magics .
13823	Sets the function for the given magic kind .
13824	Marks a method .
13825	Registers a function with a magic kind .
13826	Get the documentation for the magics .
13827	Registers the given magic objects .
13828	Registers a function .
13829	Escapes the latex string .
13830	Load options from the command line .
13831	Sets an option .
13832	Installs the GUI reference .
13833	Creates a new task with the given callable .
13834	Get the function info for a given task .
13835	Get the callable from the task info .
13836	Get the next run .
13837	Sends a task .
13838	Sends a message to the channel .
13839	This method is used to submit a task .
13840	Adds a task to the list of iterations .
13841	Runs the callable .
13842	Find the url file .
13843	Open a kernel app .
13844	Process a test file .
13845	Create an event event .
13846	Wait for multiple objects .
13847	Find all objects that match the given name pattern .
13848	Returns a namespace matching the given filter .
13849	Check that the options are mutually exclusive .
13850	Make sure that the current active figure manager has been logged .
13851	Call this method to draw the figures .
13852	Print a figure .
13853	Load an extension .
13854	Unloads an extension .
13855	Generate a random port .
13856	Create a webapp .
13857	Called when a signal is received .
13858	Confirm that the process is confirmation .
13859	Shutdown the kernel .
13860	Generate the options
13861	Replaces all values in the dictionary with their corresponding values .
13862	Render the command .
13863	Launches a kernel .
13864	Create a zip file
13865	Read version .
13866	Checks if an object is mapped to an array
13867	Returns a single partition of the given sequence .
13868	Replace the pexpect resource .
13869	Runs a file .
13870	Displays the given source .
13871	Write coverage data .
13872	Generate the XML for the given analysis .
13873	Download a pi file .
13874	Returns the frequencies of the frequency list
13875	Returns the frequency of the specified number of digits .
13876	Reads digits from a file into digits .
13877	Returns the frequency of a digit .
13878	Returns the frequency of the digit .
13879	Returns the frequency of the digit .
13880	Plots two digit frequencies
13881	Plots single digit counts in pi .
13882	Evaluate the given expression .
13883	Returns the base URL .
13884	Check if is private .
13885	Creates a suite for doc files .
13886	Generate a script from source
13887	Dumps a script to a script .
13888	Test a module .
13889	Get all the files in the hash map .
13890	compress all files in the cache
13891	Finds all files under the given globpat .
13892	Returns true if record is allowed .
13893	Returns true if the record matches the given record .
13894	Process an error .
13895	Create an embedded shell .
13896	Main loop loop .
13897	Gets new csv writers .
13898	Creates the locale directories for the given locale .
13899	Write the entries for the language .
13900	Write the header to a PO file .
13901	Subscribe a user
13902	Configures the command line options .
13903	Load a module .
13904	Execute a python file .
13905	Compiles the source code .
13906	Get the code object from apyc file .
13907	Convert an item matrix to a table
13908	Set the current value .
13909	Completes the completion of the tab .
13910	select the index
13911	Move up the cursor down .
13912	Move down the cursor down .
13913	Move left to left .
13914	Select the right index .
13915	Updates the list .
13916	Counts the frequency of a word .
13917	Prints word freqs .
13918	Returns a string representation of this element .
13919	Write the document to a file .
13920	Validates a pin .
13921	Request a shared pin .
13922	Deletes a shared pin .
13923	Sends a user pin .
13924	Deletes a user pin .
13925	Send a subscription to a topic .
13926	Returns the subscriptions for the given user .
13927	Creates a wrapper for the given function .
13928	Sets the progress monitor .
13929	Start a task .
13930	Executes a subtask .
13931	Updates the progress monitor .
13932	Creates a new progress monitor .
13933	Updates the work .
13934	Writes a string to the active shell .
13935	Get the location of the package .
13936	Loads the config files from a file .
13937	Loads the configuration file .
13938	Read the config file as a string .
13939	Load a flag from a flag .
13940	Decode argv .
13941	Populates the configuration .
13942	Loads the configuration .
13943	Parse command - line arguments .
13944	Convert the parsed data to a config .
13945	Find a module .
13946	Add a callback to the stop callback
13947	Start the process .
13948	Stops the process .
13949	Tries to kill the process .
13950	Returns the command line arguments .
13951	Starts the MPI launcher .
13952	Sends a file to the remote location .
13953	Fetches a remote file from remote
13954	Count the number of engines
13955	Starts the engine launcher .
13956	Submit a job .
13957	Default context defaults .
13958	Gets the job id .
13959	Add batch script configuration to the batch script .
13960	Runs a batch script .
13961	Make a context menu menu .
13962	Appends a jpg .
13963	Append a png to the prompt .
13964	Append a SVG to the user .
13965	Adds an image to the document .
13966	Copy image from clipboard
13967	Get image by name
13968	Insert an image .
13969	Insert SVG data into cursor .
13970	Save an image .
13971	Called when the process is changed .
13972	Builds the environment .
13973	Auto rewrites the input .
13974	Sends an exit message .
13975	Sets the next input .
13976	Read configuration file .
13977	Gets a list of values from an option .
13978	Returns the line list of an option
13979	Read environment variable .
13980	Sets the values of the attribute of this object .
13981	Load a configuration file .
13982	Reads an attribute from a config option .
13983	Get user path .
13984	Sets the delimiter .
13985	Returns the first character of a line .
13986	Returns a list of words that match the given text .
13987	Returns a list of matched attributes .
13988	Called when the score is changed .
13989	Matches the given text .
13990	Returns the aliases that match the given text .
13991	Returns true if the given text matches the given text .
13992	Get the default arguments for the given object .
13993	Starts the completion .
13994	This method is called when the line is complete .
13995	Match one record .
13996	Returns all records matching the given filter .
13997	Extract a sub - dictionary from a list of keys .
13998	Check if the prompt is parsed .
13999	Write output prompt .
14000	Print data to stdout .
14001	Log the output of the shell .
14002	Check if this object is freezed .
14003	Convert a string to a timestamp .
14004	Called when an event loop is changed .
14005	Processes a control message .
14006	Sends a shell message .
14007	Dispatches the shell .
14008	Flushes a single iteration .
14009	Publish a python in message .
14010	Sends a request to the stream .
14011	Clears the session .
14012	Returns the topic for the topic .
14013	Called when the kernel is shut down .
14014	Add context to the context .
14015	Remove a context from the stack .
14016	Returns the path of the given path .
14017	Returns true if the given name is a file .
14018	Check if an object is a class .
14019	Checks if the given path is a package .
14020	Returns the package of the given filename .
14021	Format a label .
14022	Returns the last key for the given regex
14023	Decorates a function with a module .
14024	Creates a new class with the given package .
14025	Get the cpu times .
14026	Returns the command line arguments for the process .
14027	Opens a list of files .
14028	Get connections for a process .
14029	Checks if the user has a group .
14030	Get a class from a class path .
14031	Returns the percent of used usage
14032	Returns a cache of the given function .
14033	Make a warning that is deprecated .
14034	login with the user
14035	Gets the key of GOD docs .
14036	Ensure the temp path exists .
14037	Clear temp files .
14038	Upload a file to Gdoc .
14039	Downloads the files and meta files .
14040	Download GODCS csv files and meta files .
14041	Uploads POO files to GOD files .
14042	Uploads a csv file .
14043	Connects to the UI .
14044	Verifies that the given URL is accessible .
14045	Checks if the given URL has contents .
14046	Get the response code from the URL .
14047	Check if the URL matches the given content type .
14048	Check if the URL matches the given code .
14049	Validates the data .
14050	Print output to stdout .
14051	Returns the path of the given command .
14052	Factory method for creating code units .
14053	Returns the root name of this path .
14054	Opens a source file .
14055	Returns true if the file is a Python file .
14056	Returns the total seconds .
14057	Wait for the result .
14058	Waits for the result set .
14059	Get a list of jobs running on the engine .
14060	Aborts this message .
14061	Returns the total time of this message .
14062	Waits for the task to complete .
14063	Publishs a displaypub to the IPython .
14064	Wait for outputs to be ready .
14065	Wait for all outstanding results .
14066	Returns the absolute path of the given file .
14067	Given a list of patterns return a list of patterns that match the pattern .
14068	Returns the separator for the given string .
14069	Finds the files in the given directory .
14070	Returns the filename of the given filename .
14071	Returns the canonical filename for the given filename .
14072	Get the contents of a zip file .
14073	Checks if a file is a file or directory .
14074	Check if file path matches pattern
14075	Removes the alias from the path .
14076	Called when the kernel is running .
14077	Installs a WX kernel .
14078	Create a Tkinter object .
14079	Grows the kernel
14080	Run loop .
14081	Activates a GUI .
14082	Computes standard normal normal .
14083	Computes the eigenvalue difference .
14084	Returns the differences of the eigenvalue matrix .
14085	Create a new class .
14086	Load a step configuration file .
14087	Parses a step .
14088	Set the crash handler .
14089	Attempts to load a configuration file .
14090	Find the profile dir .
14091	Generates the default config file .
14092	Write the file .
14093	Reset the file .
14094	Returns a map containing the names of the lines in the file .
14095	Returns a sorted list of the names of all arcs .
14096	Write the object to a file .
14097	Read a file .
14098	Read data from a file .
14099	Read lines from a file .
14100	Read the parallel data .
14101	Updates the line data .
14102	Sets the arc data for the given arc_data .
14103	Updates the hash of the given file .
14104	Returns the total number of lines of this file .
14105	Sends a line to the line .
14106	Main loop loop .
14107	replace the line history with multiline text
14108	Returns a user input with the specified prompt .
14109	Called when a syntax error occurs .
14110	Returns whether the editor should be recompile or not .
14111	Ask for exit .
14112	Get the version of the VCS URL
14113	Start the kernel .
14114	Configures the colors in the backend .
14115	Get the identity of this object .
14116	Convert a R object to an array
14117	Returns the source code for an object .
14118	Set the colors .
14119	Toggles the active scheme .
14120	Convert an exception to a string .
14121	Format an exception stack trace .
14122	Format the list .
14123	Format an exception
14124	Writes an exception to the output stream .
14125	Populates the pdb .
14126	Set the mode .
14127	Returns a decorator that checks if the given group has not been authenticated .
14128	Imports a module from a module .
14129	Adds a line to the output .
14130	Create a section .
14131	Get a function by name .
14132	Generates code for the given expression .
14133	Render the function .
14134	Returns the value of the given value .
14135	Render a template .
14136	Get default formatter values .
14137	Add a type function .
14138	Looks up a type by name .
14139	Set float precision .
14140	Returns a list of configured config files .
14141	Parse command line arguments .
14142	Configure logging .
14143	Sets the working directory .
14144	Print a string to stdout
14145	Displays a string into the pager .
14146	Shows a file .
14147	Get pager command
14148	Returns the start string for the given pager .
14149	Print a string .
14150	Pretty prints an object .
14151	Converts a string to a PNG file .
14152	Display a latex object .
14153	Checks if the given object is latex .
14154	Converts an object to a latex string .
14155	Sets the options for this plugin .
14156	Check that a list is valid
14157	Check that the given key is present in the given dictionary .
14158	Starts the thread loop .
14159	Receives a message from the session .
14160	Sends a message .
14161	Sends a complete request .
14162	Send object info .
14163	Send a history request .
14164	Send a shutdown request .
14165	Flushes the output stream .
14166	Sends an input reply .
14167	Starts the channels .
14168	Stop all the channels .
14169	Check if the channel is running .
14170	Read the connection file from the connection file .
14171	Write connection file .
14172	Launch a kernel on a local interface .
14173	Shutdown the kernel .
14174	Starts the kernel .
14175	Kills the kernel .
14176	Sends an interrupt signal to the kernel .
14177	Sends a kernel signal to the kernel .
14178	Check if the kernel is alive
14179	Gets the shell channel .
14180	Get the sub - channel .
14181	Gets the hb channel .
14182	Binds the kernel .
14183	Print message at debug level
14184	Get the list of extension classes .
14185	Execute a pre - step .
14186	Process all extensions .
14187	Finalize the result .
14188	Iterates through the EEGG_info directory and returns the bdf found in the archive .
14189	Checks to see if an extension module exists .
14190	Start a new instance of this controller .
14191	Writes connection information to a file .
14192	Load configuration from JSON
14193	Loads the secondary configuration .
14194	Execute a cell .
14195	Enableautopx .
14196	Disableautopx .
14197	Run a cell .
14198	Handle heartbeat .
14199	Runs a task .
14200	Deletes the task .
14201	Makes a connection to the agent .
14202	Returns the value of the given method on the given object .
14203	Wait for a connection .
14204	Sends a connection to the connection .
14205	Creates a proxy agent .
14206	Called when the object is valid .
14207	Deletes the object .
14208	Saves the user s fields to the user .
14209	Process the code units .
14210	Check all modules .
14211	Open a file .
14212	Error editor .
14213	Get clipboard text .
14214	Add a function to the chain .
14215	Get metadata from a module .
14216	Initializes the configuration .
14217	Get an object from its name .
14218	Try to open ssh .
14219	Try to open passwordless .
14220	Tries to connect to a given server .
14221	Open a connection to the specified port .
14222	Connects to a remote server .
14223	Stop scheduling tasks .
14224	Unwrap an exception .
14225	Registers an engine .
14226	Unregister a engine .
14227	Handles an execute reply .
14228	Flush notifications .
14229	Flushes the result queue .
14230	Flush control messages
14231	Flush the ignored control socket
14232	Flushes the iopub messages .
14233	Spining method .
14234	Stops the spining thread .
14235	Flushes the stream .
14236	Wait for all outstanding results .
14237	Send an apply request .
14238	Sends a request to the server .
14239	Asynchronously waits for messages to be received .
14240	Gets the status of a queue .
14241	Purges the results of an AsyncResult .
14242	Fetches the history from the server .
14243	query
14244	Returns the opcode set with the given names .
14245	Gets the byte parser .
14246	Returns a set of matching matches .
14247	Parses the text .
14248	Returns the first line of the given line
14249	Returns a set of lines that match the given lines .
14250	Get the source of the source code .
14251	Returns all the arcs in the line .
14252	Counts the exit count for this class definition .
14253	Returns the parser for this parser .
14254	Get the number of lines in the code .
14255	Iterates over all the lines of the parser .
14256	Returns a representation of the block stack .
14257	Split into chunks .
14258	Checks if the given chunks are valid .
14259	Get arcs for this line .
14260	Returns all chunks of this parser .
14261	Returns all arcs of this parser .
14262	Adds coverage options .
14263	Load coverage statistics .
14264	Start the coverage report .
14265	Checks if the given file is a cover .
14266	Generate a distro name .
14267	Get URL with authentication information .
14268	Finds a distribution from the specified requirement .
14269	Gets the parent of an object .
14270	Returns the topic name for this engine .
14271	Renders a template
14272	Initializes the configuration .
14273	Capture an error .
14274	Get data by number
14275	Convert a nbformat to a nbformat .
14276	Convert a color to a color
14277	Get the color for the given style
14278	Get the font name of the font .
14279	Handles the execute reply .
14280	Handles a history reply .
14281	Handles a python output message .
14282	Handle display data .
14283	Called when the shell is started .
14284	Handles a file .
14285	Process an error message .
14286	Execute payload handler .
14287	Sets the default style sheet .
14288	Opens an editor .
14289	Make an in prompt string .
14290	Makes a continuation prompt for the user .
14291	Sets the style sheet .
14292	Called when a syntax style is changed .
14293	Handle response .
14294	Sign the request parameters .
14295	Transform the data into a JSON object
14296	Get virtual memory usage .
14297	Get the cpu times .
14298	Get the uid of this process .
14299	Get the gid of a process .
14300	Get the list of threads for this process .
14301	Get the list of open files .
14302	Get the commit hash of the package .
14303	Returns the version information for the given package .
14304	Get the package info
14305	Returns the number of CPUs supported by the system .
14306	Returns the number of cpu cpus .
14307	Fetches the result set .
14308	Fetch one row .
14309	Fetches many rows .
14310	Fetch all rows .
14311	Connects to the peer .
14312	Parses a JSON string and converts it to a nbformat .
14313	Parses the given string into a Python notebook .
14314	Converts the given string to a JSON representation .
14315	Writes the given nb to the format .
14316	Writes a number of bytes to a file .
14317	Convert all ipynb files to metadata .
14318	Sets the value from a dictionary .
14319	Check if the given name matches this rule .
14320	Determine if the given class is available .
14321	Check if a directory is available .
14322	Check if the file can be loaded .
14323	Check if the given function is available .
14324	Check if a method is available
14325	Check if a module is available
14326	Reads the contents of a file .
14327	Parse a command line from the command line .
14328	List lines in the current line .
14329	Processes a PDEF command line .
14330	Get the factor factor for two symbols
14331	Convert currency value to currency .
14332	Returns the return value of the currency .
14333	Returns the encoding of the stream .
14334	Returns the default encoding .
14335	Loads the connection file .
14336	Start heartbeat .
14337	Loads information about the connection .
14338	Initialize the session .
14339	Imports iopub socket .
14340	Load the kernel .
14341	Connects to the controller .
14342	Register the controller
14343	Converts HTML content to text
14344	Converts the content to a text .
14345	Converts a domain to a fully qualified name .
14346	Configures the NoseExclude options .
14347	Configures the NoseExclude .
14348	Checks to see if the directory is excluded .
14349	Checks if this extension is dynamic .
14350	Iterates over the given functions .
14351	Iterate over all the functions in reverse order .
14352	Add a function to the list of arguments .
14353	Inserts a function at the specified index .
14354	Display usage .
14355	Initialize the parallel application .
14356	Creates the PID file for the server .
14357	Removes the pid file .
14358	Reads the PID from the PID file .
14359	Creates a parser for the given function .
14360	Get the name of the argcmd
14361	Highlights a block .
14362	Rehighlights a block .
14363	Sets the format .
14364	Copy page control .
14365	Execute a source .
14366	Called when the prompt is finished .
14367	Invoked when a tab is pressed .
14368	Make a context menu from the given position .
14369	Filter the text key from the text cursor .
14370	Insert continuation prompt .
14371	Handle complete reply .
14372	Executes the given expression with the given expression .
14373	Handle the execution callback .
14374	Handles a execute reply .
14375	Handle input request .
14376	Handles a kernel .
14377	Handles an object info reply .
14378	Handle a python output .
14379	Handle a stream message .
14380	Handles the shutdown reply .
14381	Executes a file .
14382	Emits the kernel .
14383	Renders the command .
14384	Prompts the kernel .
14385	Request a call tip to the kernel .
14386	Sends a completion request to the kernel .
14387	Process an error .
14388	Process execute action .
14389	Called when document content is changed .
14390	Add a plugin to the plugin
14391	Executes a method on the plugin .
14392	Executes all plugins .
14393	Executes a method on all plugins .
14394	Configure plugins .
14395	Load plugins .
14396	Load plugins from the nose plugin .
14397	Convert string to png .
14398	Converts a string to HTML .
14399	Converts a string to an image .
14400	Checks if the requirement exists .
14401	Returns a list of process instances .
14402	Calculates the percentage of the current thread .
14403	Returns a list of all the attributes of this object .
14404	Returns the process name .
14405	Tries to guess the executable .
14406	Returns all children of this process .
14407	Elapsed time for the current thread .
14408	Gets the memory percent .
14409	Get memory maps .
14410	Check if the process is running .
14411	Suspend the kernel .
14412	Sends a process .
14413	Kills the process .
14414	Wait for the specified timeout .
14415	Wires the kernel .
14416	Obtains the GUI for the GUI .
14417	Is the identifier shadowed?
14418	Get the default transformers .
14419	Adds a transformer .
14420	Remove a transformer .
14421	Initialize the default checkers .
14422	Adds a checker .
14423	Remove a checker .
14424	Initialize the default handlers .
14425	Register a handler .
14426	Remove a handler .
14427	Filter line info
14428	Returns the handler for the given line info .
14429	Transforms a line into a single line .
14430	Performs a prefilter .
14431	Filter lines .
14432	If the line info is already set the IP address .
14433	Returns the handler for the given line .
14434	Returns the handler for the command line .
14435	Looks for an alias .
14436	Exit the line .
14437	Processes the given line info .
14438	Handle the command .
14439	Generate the magic command .
14440	Get a line from the shell .
14441	Process the command line
14442	Filter the event .
14443	Enter event .
14444	Paint the call tip .
14445	Get the tip for a call .
14446	Show the call tip .
14447	Called when the cursor position is changed .
14448	Creates a new property that is a proxied attribute .
14449	Returns the absolute path of the given path .
14450	Validates an object against the given schema .
14451	Get the mask
14452	Returns true if noglobal file exists .
14453	Get word frequency for a given file .
14454	Decorates a View
14455	Default aliases for this kernel .
14456	Define an alias .
14457	Add an alias .
14458	Check if an alias exists .
14459	Execute an alias
14460	Returns the command with the given alias .
14461	Returns the alias for the given line .
14462	Generate the help directive .
14463	Reset the Sr .
14464	Processes the given string .
14465	Get the color for the given color .
14466	Gets the text format .
14467	Encodes a JWT .
14468	Wraps the given function .
14469	Cleans up expired cookies .
14470	Check if the given token is used .
14471	Decodes a JWT .
14472	Creates a lock on the current thread .
14473	Returns the common prefix for the given items .
14474	Filter event .
14475	Returns the size of the font hint .
14476	Check if the text cursor is cut .
14477	Do paste .
14478	Clears the command .
14479	Copy the text cursor .
14480	Execute the given source .
14481	Gets the input buffer s input buffer .
14482	Sets the input buffer for the prompt .
14483	Sets the font of this tab .
14484	Updates the clipboard text .
14485	Print the dialog .
14486	Moves to the top of the prompt .
14487	Sets the font .
14488	Inserts a custom content to the text .
14489	Appends HTML to the user .
14490	Appends plain text to text
14491	Appends a plain text to the prompt .
14492	Clears the temporary buffer .
14493	Completes the completion of the given cursor .
14494	Fills a temporary buffer with text .
14495	Is control key down .
14496	Creates the underlying control .
14497	Creates the control for the page control .
14498	Filter the page command .
14499	Gets the text of the given block .
14500	Gets the end cursor .
14501	Returns the column number of characters in the input buffer .
14502	Gets the line of the input buffer cursor .
14503	Gets the prompt cursor .
14504	Gets the selection cursor .
14505	Insert continuation prompt .
14506	Inserts HTML into the cursor .
14507	Insert text into text
14508	Insert text .
14509	Moves cursor to the text cursor .
14510	Cancels the keyboard .
14511	Writes text to text .
14512	Called when the prompt is started .
14513	Read a line from the widget .
14514	Sets the continuation prompt .
14515	Sets the top cursor .
14516	Show prompt .
14517	Adjusts the scrollbars on the text editor .
14518	Executes the given options .
14519	Copies the configuration file to the given location
14520	Creates a profile directory with the specified name .
14521	Finds the profile directory with the specified name .
14522	Convert a key to a Key
14523	Read from a file .
14524	Performs a multi - line input .
14525	Create a temporary file .
14526	Flushes the file .
14527	Write data to the output stream .
14528	Add a new heartbeat handler .
14529	Handle a heartbeat failure handler .
14530	Sends a ping message .
14531	Generates a list of data from a sequence
14532	Convert a pathfile to a file name .
14533	Iterates through the given root directory and returns the result .
14534	Print all the elapsed times
14535	Get the elapsed unit
14536	Get the wininst config file .
14537	Cache a directory .
14538	Quote the argument
14539	Looks for conflicts on the module .
14540	Sets the fetch options for the fetcher .
14541	Creates the home path .
14542	Checks if the given file name is a tar file .
14543	Creates a proxy object from an object .
14544	Creates a readonly proxy .
14545	Creates a new heading cell .
14546	Create a notebook node .
14547	Create a new note author .
14548	Checks if a directory is writable .
14549	Returns the filename of the given name .
14550	Returns the file name of the given file .
14551	Find the file in the given path
14552	Returns the home directory .
14553	Returns the XG directory for the current environment .
14554	Returns the location of theipython directory .
14555	Returns the directory of the IPython package .
14556	Returns the path for the given module .
14557	Check if the dependency is outdated
14558	Returns the MD5 hash of the given file .
14559	Looks for old configuration files .
14560	Updates the suggestions dictionary for the given object .
14561	Returns suggestions that match given object size
14562	Returns suggestions for the given object .
14563	Returns the relative path to the current directory .
14564	Finds all files matching the given pattern .
14565	Returns a copy of the file with the specified encoding .
14566	Get the MD5 hash of the file .
14567	Creates a profile file .
14568	Print the profiling report .
14569	Closes the profiling file .
14570	Start the heartbeat channel .
14571	Configures the GUI .
14572	Clear the GUI .
14573	Called when the GUI is pressed .
14574	Gives the GUI .
14575	Add a tkinter to the GUI .
14576	Installs a pyglet .
14577	Save the saver .
14578	Create the database database .
14579	Execute SQL .
14580	Retrieves information about a session .
14581	Returns tail of current session
14582	Iterates over the specified range string .
14583	Gets the history file name .
14584	Marks a session .
14585	Reset the session .
14586	Returns a session for the given range .
14587	Returns the output of the given line .
14588	Writes the cache to the database .
14589	Stops the history .
14590	Get the number of cpu processors .
14591	Get system cpu stats .
14592	Returns a list of all the partitions in the system .
14593	Get the pid list of the process .
14594	Returns a string representation of the given pair .
14595	Returns a string representation of the statements .
14596	Get the stack trace .
14597	Wraps the given method on the cache .
14598	Returns the regular expression for the given regexes .
14599	Tries to remove a file .
14600	Updates the hash of the given value .
14601	List all profiles in the cluster
14602	Starts a cluster .
14603	Stops the cluster .
14604	Searches for the specified command .
14605	Prints the system body .
14606	Find the code units in the coverage .
14607	Analyzes the code unit .
14608	Returns a decorator that throws an exception .
14609	Set the trace .
14610	Decorates a time limit .
14611	Load IPython extensions .
14612	Run the code .
14613	Run the execution lines in the user namespace .
14614	Run the startup files .
14615	Runs the executable files in the IPython app .
14616	Runs the command line code in the shell .
14617	Run a module .
14618	Creates a new method for the given type .
14619	Returns the filename for a static file .
14620	Get data from file
14621	Converts string to HTML entities .
14622	Process the HTML report .
14623	Copies the static report files to the directory .
14624	Write HTML to file .
14625	Calculates the hash of a source .
14626	Render the index file .
14627	Loads the coverage file from the given directory .
14628	Write the coverage file to a directory .
14629	Compare two lists .
14630	Get a slice of the sequence
14631	Generate a sequence of size
14632	Load the configuration file .
14633	Loads the manifest .
14634	Convert a glob pattern to a regular expression .
14635	Returns true if the given filename matches the pattern .
14636	Returns a list of versioned files .
14637	Starts a kernel .
14638	Shutdown the kernel .
14639	Kill the kernel .
14640	Get the kernel .
14641	Returns the port of the kernel .
14642	Gets the notebook for the given kernel id .
14643	Start the kernel .
14644	Shutdown the kernel .
14645	Interrupt the kernel .
14646	Restart a kernel .
14647	Creates aniopub stream for a kernel .
14648	Creates a shell stream for the kernel .
14649	Creates a stream for the kernel .
14650	Removes all values from the instance .
14651	Converts an HTML file to an image .
14652	Converts HTML to SVG .
14653	Convert image tag to UTF8 .
14654	Replace empty paragraphs with line breaks .
14655	Save the file .
14656	Returns the unique or null if none exists .
14657	Returns a query that includes all of the given search fields .
14658	Returns a query from the given query string
14659	Returns a query that is greater than the given date field .
14660	Query for date less than or equal to date
14661	Returns a query for a null or blank or blank .
14662	Update fields with case insensitive fields
14663	Add arguments to the parser .
14664	Get the attribute value matching the given method .
14665	Validate method .
14666	Rotate the ring .
14667	Install sockets .
14668	Parse a schema from a schema URL .
14669	Returns the URL of the websocket .
14670	Serializes a reply .
14671	Adds cookie message to the request .
14672	Sends a callback to the hb stream .
14673	Start the hb stream
14674	Stop the heartbeat stream .
14675	Load the file .
14676	Get the index of the block .
14677	Sets the block index .
14678	Activates a new block .
14679	Prints a marquee block .
14680	Prints the marquee block .
14681	Runs a method on a collection using the specified method .
14682	Dump a collection of objects .
14683	Run a sequence
14684	Run a method on a collection .
14685	Returns a wrapper for the given object .
14686	Wrap an object with the given names .
14687	Returns the source code for the given stack trace .
14688	Looks up the lines in the specified position .
14689	Generates the progress bar .
14690	Shuts down the controller .
14691	Call this method .
14692	Call this method .
14693	This method is called by the client when the client has been sent .
14694	Returns the result of the outstanding results .
14695	Invokes the function after the given f
14696	Get all messages in the queue
14697	Gets a message from the queue .
14698	Wrap the given function on this object .
14699	Returns a property that has only only one field of the given fields .
14700	Get the configuration from the given URL .
14701	Returns the list of files in the specified path .
14702	Get the list of root modules .
14703	Override this method to set a completable command
14704	Returns the completion of a line .
14705	Called when the user has completed .
14706	This method is called to get the completable completions for the user .
14707	Quote an attribute .
14708	Configure the plugin .
14709	Write the report to the given stream .
14710	Report an error .
14711	Add a failure .
14712	Adds a failure to the test list .
14713	Generate a random random number
14714	Returns the index of the first load
14715	Registers an engine .
14716	Unregister an engine .
14717	Executes stranded tasks .
14718	Sends a message to monitor .
14719	Check if there is no timeout .
14720	Called when a message is unreachable .
14721	Check if the job can run .
14722	Tracks the given job .
14723	Send a task
14724	Processes a result .
14725	Sends a result to the client .
14726	Attempts to remove a dependency from the dependency tree .
14727	Update the graph .
14728	Start the log file .
14729	Prints the state of the log .
14730	Write log line .
14731	Write data to log
14732	Stop logging .
14733	Create a notebook node .
14734	Add an object to the chain .
14735	Register a new regex .
14736	Get the object for the given key
14737	Returns the value of the given key .
14738	Creates the directory of the notebook directory .
14739	Returns a list of all notebooks in the directory .
14740	Returns the id of the given notebook .
14741	Deletes the given notebook id .
14742	Check if the file exists .
14743	Returns the path of a notebook .
14744	Returns the file path with the given name .
14745	Retrieves information about a notebook .
14746	Get a notebook object .
14747	Saves a new notebook .
14748	Saves a notebook .
14749	Saves a notebook object .
14750	Deletes a notebook .
14751	Creates a new notebook .
14752	Copy a notebook .
14753	Parses the tokens .
14754	Returns a line of tokens .
14755	Loads the default config file .
14756	Returns the default classes .
14757	Parse command line .
14758	Initialize the terminal app .
14759	Creates an InteractiveShell instance .
14760	Display banner .
14761	Returns the type of the object .
14762	Gets the notifier name .
14763	Performs the default value of the trait .
14764	Handles a trait change .
14765	Returns the traits for the given class .
14766	Gets the metadata for a trait .
14767	Check if the value is an instance of the given class
14768	Get default value .
14769	Returns true if the task is completed .
14770	Returns true if the task is completed .
14771	Returns a map containing all dependencies of this object .
14772	Counts the number of nodes in the tree .
14773	Prints all nodes in the tree .
14774	Disambiguate a dns url .
14775	Perform a reduce operation .
14776	Checks if the specified targets are valid .
14777	Processes a monitor message .
14778	Send a query message .
14779	Handle a new heartbeat .
14780	Handle a heartbeat failure .
14781	Process a task message .
14782	Process a task result message .
14783	Process an iopub message .
14784	Sends a request to the client .
14785	Registers a new engine .
14786	Unregister a engine .
14787	Called when the engine is finished .
14788	Sends a request to the server .
14789	Drops results from a message .
14790	Extract data from a record .
14791	Sends a result message .
14792	Sends a message to the history .
14793	Execute query .
14794	Changes the current directory to the current directory .
14795	Parses the command and returns the result .
14796	Runs a command in RPATH .
14797	Executes the R script and returns the result .
14798	Dispatch a message .
14799	Determines if the message is from the session .
14800	Generate a report file .
14801	Writes the coverage file .
14802	Returns the installed version .
14803	Squashes all the elements in the object to a string .
14804	Returns the header of a message .
14805	Check the packers .
14806	Create a message .
14807	Generate a hash of the given message list .
14808	Send a message .
14809	Send a message to a stream .
14810	Sends a message to the stream .
14811	Receive a message from a socket .
14812	Get the identities of the given message .
14813	Sign a message .
14814	Save a SVG document .
14815	Copy string to clipboard .
14816	Convert a SVG string to an image .
14817	Returns a copy of the info field with the given parameters .
14818	Get the documentation for an object .
14819	Get source of an object .
14820	Get the arguments for the given object .
14821	Get the tip of an object .
14822	Get the file name of an object .
14823	Get source lines for an object .
14824	Get the definition of an object .
14825	Generate header .
14826	Prints an info message .
14827	Prints an object definition .
14828	Prints the documentation of an object .
14829	Display source .
14830	Prints the contents of an object .
14831	Format fields with title width and title width
14832	Display information about an object .
14833	Search for namespaces matching the given pattern .
14834	This method is used to start a thread .
14835	Creates and returns a deferred wrapper for the given timeout .
14836	Returns the best string for the given query .
14837	Returns a string representation of this element .
14838	Returns the XML representation of the document .
14839	Loads all modules in the specified packages .
14840	Invert the input data
14841	This method is used to perform a conflict .
14842	Converts an object to a primitive type .
14843	This method is used to write the raw data .
14844	Get the plots .
14845	Print a figure .
14846	This method is used to execute plot files .
14847	Sets the figure format .
14848	Selects the GUI and backend .
14849	Configures the plot with the specified backend .
14850	Load the inline backend for the shell .
14851	Activates the GUI .
14852	Trace event .
14853	Set trace .
14854	Stops the tracer .
14855	Start a new tracer
14856	Installs the trace function .
14857	Starts the collector .
14858	Stops the collectors .
14859	Stops all tracers .
14860	Start tracing .
14861	Get line data .
14862	Extracts the exceptions from the given method and returns it as a CompositeError .
14863	Returns a traceback for the given exception .
14864	Start coverage process .
14865	Returns the canonical directory of the code unit .
14866	Returns the source file for the given filename .
14867	Checks to see if the given filename should be traceable .
14868	Checks if tracing is enabled .
14869	Report a warning .
14870	Check if the source file has been imported .
14871	Initialize the configuration .
14872	Remove auto data .
14873	Add a regular expression to the cache .
14874	Returns a regular expression for the given configuration .
14875	Harvest the data .
14876	Performs the parallel processing .
14877	Harvest data .
14878	Performs the analysis .
14879	Analyzes the files in morf .
14880	Analyze a code unit .
14881	Harvest data .
14882	Harvest data .
14883	Generate HTML report .
14884	Scans the coverage .
14885	Display the objects and publish them to it .
14886	Publish the objects to the output .
14887	Render the objects as SVG .
14888	Displays the objects as a PNG file .
14889	Publish a jpeg .
14890	Displays the given objects as latex .
14891	Sends a list of objects to display .
14892	Publish the objects to the display .
14893	Read the data from the file .
14894	Finds the given command .
14895	Executes the command .
14896	Read events from the socket .
14897	Sends a message to the socket .
14898	Returns the launcher class for the launcher .
14899	Attempts to stop the cluster .
14900	Load launcher .
14901	Starts the IPython cluster .
14902	Starts the IPcluster .
14903	Get the application .
14904	Check if an event loop is running .
14905	Start event loop .
14906	Obtains the application instance .
14907	Determines if an event loop is running .
14908	Starts the event loop .
14909	Creates a canvas .
14910	Draws a cross .
14911	Draw a line .
14912	Sets an image at the specified position .
14913	Convert image to grayscale
14914	Generate a UUID .
14915	Generates a unique key from the cache .
14916	get domain from url
14917	Get the arguments
