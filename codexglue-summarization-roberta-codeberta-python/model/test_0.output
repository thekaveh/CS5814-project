0	Convert a sina XML string to a list of URLs .
1	Download a dailymotion URL .
2	Download a sina file .
3	Given a string and a list of colors return a string .
4	Print text to stderr .
5	Print an exit message .
6	Print a message .
7	Detect OS .
8	Download a Vimeo by channel .
9	Helper function to get information from a file
10	Get video URL .
11	Get the M3U URL .
12	Return a human - readable string .
13	Download cbs file .
14	Download the stream
15	Download and download a video .
16	Match all patterns .
17	Parse a query parameter .
18	Get the content of a URL .
19	Request post content .
20	Parse a host string .
21	Get the content of a show room by URL key .
22	Get topic title by topic part .
23	Download topics by course .
24	Download a Wanmen by course .
25	Returns True if the task has the given task instance .
26	Get the event buffer .
27	Get a connection to the snowflake .
28	Get AWS credentials .
29	Get the field with the given name .
30	Copy a expert table .
31	Bulk dump a table .
32	Execute the GoogleCloud storage hook .
33	Return the maximum partition of a table .
34	Get a MySQL connection .
35	Show the current state of a task .
36	Restart the gunicorn master process .
37	Get a connection .
38	Translate values .
39	Get an instance .
40	Create an instance .
41	Patch an instance .
42	Delete an instance .
43	Get the database for the given instance .
44	Create a new database .
45	Patch a database .
46	Delete a database .
47	Export an instance .
48	Start the SQL proxy process .
49	Stop the SQL proxy process .
50	Returns the version of the SQL proxy .
51	Create a new connection .
52	Retrieve a connection from the database .
53	Delete a connection .
54	Get the SQL proxy runner .
55	Get the database hook
56	Clean up the database hook .
57	Reserve a free TCP port .
58	Clean up the job_id string .
59	Get error code .
60	Delete all DagRun instances .
61	Delete all DAG instances .
62	Set the state of the DAG .
63	Print statistics about the DAG
64	This method is called when the task has completed .
65	Invoke the lambda function .
66	Create the evaluation operations .
67	Create a directory .
68	Convert a string to a float if possible .
69	Make a naive datetime .
70	Return a naive datetime .
71	Return a datetime object
72	Get a database connection to another keyspace
73	Return a requests . Session object .
74	Run the API .
75	Check the response .
76	Run and check the Tenacity operation .
77	Create a session .
78	Decorator for creating a session .
79	Drop all tables .
80	Get pretty exception message .
81	Get a list of records .
82	Get a pandas DataFrame .
83	Helper function .
84	Insert multiple rows .
85	Return an Azure Cosmos client .
86	Check if a collection exists .
87	Create a collection .
88	Check if a database exists .
89	Create a new database .
90	Deletes a database .
91	Delete a collection .
92	Insert a list of documents into the database .
93	Delete a document from the database .
94	Get a document .
95	Get a list of documents from the database .
96	Get function by name .
97	Create a new function .
98	Update a function .
99	Upload a function to a zip file .
100	Delete a function .
101	Returns a generator of the status of the dependency context .
102	Return True if the item is met .
103	Returns a generator of failure reasons that are passed .
104	Parse s3 config file .
105	Get the credentials for this region .
106	Return a connection object for the DAN .
107	Flush the buffer .
108	Check if a file location is compressed .
109	Return a list of all files in a given directory .
110	Constructs a TaskInstance
111	Starts the process .
112	Terminate the child process .
113	Exit the worker .
114	Start the DagFileProcessor manager .
115	Start the Dag parsing process .
116	Start in sync .
117	Refresh the DAG directory .
118	Print stats to log .
119	Clear non - imported files .
120	Log statistics about the processing of the given file .
121	Set the list of file paths to be processed .
122	Wait until all processors are finished .
123	Process the DAG parsing processes .
124	Stop all processes .
125	Create a new SSH connection .
126	Create a transfer job .
127	Retrieve a transfer job .
128	Returns a list of jobs for the given filter .
129	Update a transfer job .
130	Delete a transfer job .
131	Cancel a transfer operation .
132	Pause a transfer operation .
133	Resume a transfer operation .
134	Wait until the given job is completed .
135	Find all tasks for a given task instance .
136	Return the number of available slots .
137	Run a command and return the output .
138	Remove an option from a section .
139	Get a section from the config .
140	Allocates the specified keys for this project .
141	Begin a transaction .
142	Commits the project .
143	Lookup a list of projects with the given keys .
144	Rollback the current transaction .
145	Run a query .
146	Get an operation by name .
147	Delete an operation .
148	Wait until an operation is completed .
149	Export to storage bucket .
150	Import data from a storage bucket .
151	Publish to a target .
152	Get the hostname from the config .
153	Gets the connection object .
154	Analyze entities in a document .
155	Annotate a text document .
156	Classify text .
157	Get the template field for a module .
158	Render a template field .
159	Disposes the database pool .
160	Prepares the classpath for a DAG .
161	Check the task id for the target .
162	Return detection of a configuration variable .
163	Convert a SQLAlchemy object to a dictionary .
164	Yield chunks from a list of items .
165	Apply a function to each chunk in iterable .
166	Chain all tasks in the chain .
167	Pretty print a table of rows .
168	Render a log filename .
169	Build a connection to the API .
170	Wait for the given operation .
171	Coerce a string to a string .
172	Handle an operator execution
173	Run a pig command .
174	Fetch the state of a celery task .
175	Return the number of tasks per send process .
176	Return the number of tasks per fetch process .
177	Set the value of a variable .
178	Get a connection to the user .
179	Create a new job .
180	Get a single job
181	Wait for a job to be completed .
182	Create a new version .
183	Set the default version for a project
184	List versions of a given model .
185	Delete a version .
186	Create a new model .
187	Get a single model .
188	Write a batch of items .
189	Integrate plugins .
190	Returns the default executor .
191	Get an executor .
192	Handle a segment error .
193	Return a connection object for this database
194	Trigger a dag in the DAG .
195	Delete a DAG .
196	Get task information .
197	Get a list of pools .
198	Create pool .
199	Delete a pool .
200	Create or update a container group .
201	Get the exit code .
202	Get a list of messages for an instance group .
203	Get a list of logs for a given resource group .
204	Delete a container group .
205	Check if a container exists .
206	Decorator to apply defaults to a function .
207	Constructs a query dictionary
208	Puts the message from the given channel .
209	Find a DagRun .
210	Get all the task instances in the DAG .
211	Get a TaskInstance
212	Get the previous dag run .
213	Get the scheduled dag run .
214	Update the state of the task
215	Verify that all tasks have been removed .
216	Make a jenkins request with headers
217	Convert a context object to airflow variables .
218	Trigger conditionally trigger .
219	Send a metric to the API .
220	Query for a metric .
221	Get a DAG by its id .
222	Kill zombies
223	Load a DAG from a DAG .
224	Collect dags from a DAG file .
225	Return a report of the DAGs .
226	Add date to dataset
227	Format the dataset as datetime .
228	Poke this file .
229	Poke this file .
230	Clear the task instances for the given tis .
231	Return the number for the task .
232	Generate a command .
233	Get the current state of the task .
234	Update the state of the task .
235	Refresh this task from the database .
236	Clear XCom data .
237	Return the key for this task .
238	Return True if the task is done .
239	Return the next retry datetime object .
240	Check if the next retry is ready .
241	Check if the pool is full .
242	Get the DAG run from the database .
243	Push a key to the xcom .
244	Return the pull function for the given task ids .
245	Initialize the run context .
246	Close the file .
247	Build the connection
248	Start a new instance .
249	Set machine type .
250	Get instance templates .
251	Insert instance template .
252	Get instance group manager .
253	Patch an instance group manager .
254	Wait for an operation to complete .
255	Check if the given bucket exists .
256	Create a bucket .
257	Check if a prefix is in a bucket .
258	List the prefixes of a bucket .
259	List the keys in a bucket .
260	Check if the given key is valid .
261	Get an S3 key .
262	Read the contents of a key .
263	Select an object from S3 .
264	Check if a wildcard key is valid .
265	Get a wildcard key .
266	Upload a file to S3 .
267	Load a string .
268	Load bytes from S3 .
269	Load a file - like object .
270	Copy an object .
271	Query the CassandraContext
272	Convert a user type to a dictionary .
273	Send an email .
274	Get a connection object .
275	Attempt to recognize audio .
276	Execute the SQL hook .
277	Load plugin plugins .
278	Check if a plugin is valid .
279	Skip all tasks in the DAG .
280	Get a connection .
281	Check if a file exists .
282	Upload a file .
283	Return a list of paths .
284	Execute the query
285	Uncompress a file .
286	Query the MQL
287	Decorator for cli functions .
288	Build metrics for a function .
289	Create a cgroup .
290	Delete a cgroup .
291	Parse a host string .
292	Perform the API call .
293	Get a connection object
294	Make a query
295	Describe the given object
296	Returns a list of available fields for the given object
297	Make an object from an object
298	Convert a column to timestamps
299	Write an object to a CSV file .
300	Returns a MongoDB connection object .
301	Get a collection from the database
302	Replace multiple documents .
303	Returns True if the mail attachment exists .
304	Retrieve mail attachments by name .
305	Download mail attachments .
306	Get attachments by name
307	Get the filename of the file .
308	Put records in the delivery stream .
309	Get the status of a task .
310	Send email address list .
311	Send email to SMTP
312	Process a value .
313	Check if the given blob exists .
314	Check if the given prefix matches the given prefix .
315	Load a blob from a string .
316	Read a file from a container .
317	Delete a blob .
318	Get information about the specified facts
319	Get an FTP connection
320	List files in a directory .
321	Retrieve a file from FTP
322	Store a file .
323	Get the time of the mod
324	Executes the webhook .
325	Return a FileService object .
326	Check if a directory exists .
327	Check if a file exists .
328	Returns a list of directories and files for the specified share .
329	Create a directory .
330	Load a file from a file .
331	Load a file from a file .
332	Load a file from a stream .
333	Get a connection object .
334	Copy an object into a bucket .
335	Download a blob from a bucket .
336	Upload a file to a bucket .
337	Check if a bucket exists .
338	Check if object is updated after the given timestamp .
339	Delete a blob .
340	List blobs in a bucket .
341	Get the size of the given object .
342	Returns the CRC32c checksum of the given object .
343	Returns the MD5 hash of the given object .
344	Create a new bucket .
345	Compose source objects .
346	Check if secondary training status changed .
347	Return a message for secondary training status .
348	Upload a tar file to S3 .
349	Configure S3 resources .
350	Check a S3 bucket .
351	Get log connection
352	Create a new training job
353	Create a new hyperparameter job .
354	Create a new transform job .
355	Create an endpoint .
356	Describe a training job with a given log .
357	Check the status of a job .
358	Check the status of a training job .
359	Start the dataflow hook .
360	Run offline migrations
361	Run migrations .
362	Delete an instance .
363	Create an instance .
364	Create a table .
365	Delete a table .
366	Update a cluster .
367	Prepare the CLI command
368	Prepare a dictionary for the hive configuration .
369	Load a DataFrame from a table .
370	Load a file
371	Get the metastore client .
372	Check if a named partition exists .
373	Check if a table exists
374	Get a connection to the server .
375	Get a list of results .
376	Write a csv file .
377	Get a list of records .
378	get a pandas dataframe
379	Returns a connection to the ProductSearchClient .
380	Get endpoint .
381	Send Dingding message .
382	Bind parameters to an operation .
383	Escape a string .
384	Cast a string field to a BigQuery type .
385	Validate that value is a valid type .
386	Return a BigQueryConnection object .
387	Get the BigQuery service .
388	Check if a table exists .
389	Create an empty table .
390	Patch a table .
391	Cancels the query .
392	Delete a table .
393	Upsert a table .
394	Perform access to a dataset .
395	Get a dataset .
396	Get a list of datasets .
397	Insert multiple rows into a table .
398	Execute an operation .
399	Execute an operation using the given sequence of parameters .
400	Get the next query
401	Query the database .
402	Make intermediate directories .
403	Create a new queue .
404	Send a message to the queue .
405	Run a command .
406	Called when the config is completed .
407	Main entry point .
408	Build the html header .
409	Build the container .
410	Build js chart
411	Create a new x axis
412	Add y axis to the list .
413	Get a sqlite3 connection
414	Decorator for logging functions .
415	Decorator for gzip requests .
416	Get the last dag run
417	Creates a new dagrun .
418	Execute the job .
419	Convert an object into a JSON response .
420	Open a zip file if it exists .
421	Generate a cache key .
422	Gets the connection .
423	Annotate a video .
424	Get API key .
425	Return a requests session .
426	Execute an alert
427	Build the payload for the opsgenie .
428	Execute this alert .
429	Get the connection object .
430	Start a query execution
431	Check the state of the query execution
432	Poll query status .
433	Create a connection object
434	Handles Zendesk API rate limit .
435	Perform a Zendesk call
436	Get the partitions in a database .
437	Get a table from the database
438	Get the location of a table .
439	Get the status of a cluster .
440	Delete a cluster .
441	Describe cluster snapshots
442	Restore the cluster from a cluster snapshot .
443	Create a cluster snapshot .
444	Execute the Slack API
445	Create a job flow .
446	Filter result by size .
447	Filter result with ignored extensions .
448	Execute the S3 query
449	Get a pool by name .
450	Create a pool .
451	Delete a pool .
452	Convert a dict to a protobuf .
453	Wait for an operation .
454	Get an operation .
455	Append a label to a cluster proto .
456	Create a cluster .
457	Fetch a cluster .
458	Get webhook endpoint .
459	Build the payload .
460	Run the webhook .
461	Encrypt a plaintext .
462	Import a table .
463	Import a query from a target directory .
464	Export a table .
465	Get a connection .
466	Synthesize an audio .
467	Close the file .
468	Returns a list of git init containers
469	Return a dictionary of environment variables .
470	Return a list of secrets .
471	Get security context .
472	Get the url of the task .
473	Update the latest heartbeat of this job .
474	Launch a process .
475	Starts the DagFileProcessor .
476	Wait for the result queue .
477	Exit the socket .
478	Update the import errors .
479	Process the tasks in the DAG .
480	Change the state of the dag with the new state .
481	Get a map of states and task map .
482	Change the state of an executable task .
483	Enqueue task instances with queued state .
484	Execute task instances .
485	Change the state of tasks to execute .
486	Process execution events .
487	Process a DAG file .
488	Update the counters .
489	Manage an executor state .
490	Get the run number for the DAG .
491	Return a dict containing all the tasks that have the given dag run .
492	Execute a list of run dates .
493	Set the DAG runs to failed .
494	Execute the DAG task .
495	Callback for heartbeat messages .
496	Get a client .
497	Get an instance .
498	Apply a function to an instance .
499	Create an instance of an instance .
500	Update an instance .
501	Delete an instance .
502	Get a database .
503	Create a new database .
504	Update a database .
505	Delete a database .
506	Check if this attachment has an attachment
507	Prepare additional parameters .
508	Get a connection to the cluster .
509	Check if a table exists .
510	Check if a record exists in the database .
511	Build a connection status command .
512	Submit the Spark application .
513	Process the spark driver output .
514	Process the Spark status log .
515	Return the task runner .
516	Wait for the job execution .
517	Query the mysql database .
518	Create CSV file .
519	Write a local schema file .
520	Get the type of the column
521	Convert a mysql type into a string .
522	Execute the hook .
523	Apply the given function to all the inlets .
524	Return a JSON representation of this connection .
525	Return a list of dates between start_date and end_date .
526	Scale time units .
527	Return the number of days in n .
528	Initialize a role in the database .
529	Delete a role .
530	Return the roles for the given user .
531	Get all permissions
532	Check if the user has a role .
533	Check if the given permission has the given view menu name .
534	Clean faulty permissions .
535	Merge a permission
536	Update admin permission view
537	Revokes permissions on a DAG .
538	Create permission for all nodes in the DAG .
539	Get Fernet object .
540	Poke the table .
541	Get the hook object .
542	Send a message to the queue .
543	Return a connection object .
544	Return a connection object .
545	Check if hdfs_path is valid .
546	Upload a file to a destination .
547	Get the connection to the pinot broker
548	Returns the URI for this connection .
549	Convert a date to a dictionary .
550	Convert time to dict .
551	Get a redis connection
552	Get a pandas dataframe from the database .
553	Run SQL .
554	Set the autocommit flag .
555	Insert rows into the database .
556	Serialize a cell .
557	 health the job .
558	Get extra links
559	Get a cloudant session .
560	Execute Slack webhook .
561	Get credentials from Google API .
562	Get the authorization for the user .
563	Decorator to catch HTTP exceptions .
564	Decorator for default project id .
565	Return a list of tasks that are not finished .
566	Prepare the Spark SQL command .
567	Convert into a tensor .
568	Normalizes a tensor .
569	Resize an image .
570	Pad an image .
571	Crop an image .
572	Crop an image .
573	Flip an image .
574	Calculate the center of an image .
575	Flip an image .
576	Crop an image .
577	Adjust the brightness of an image .
578	Adjust the contrast of an image .
579	Adjust the brightness of an image .
580	Adjust the hue value of an image .
581	Adjust the temperature of an image .
582	Rotate an image .
583	Transform an image .
584	Convert an image to a PIL image .
585	Save a tensor to a file .
586	Find all classes in a directory .
587	Read image file .
588	Read info_file and return a tensor .
589	Read matches files .
590	Calculate the accuracy of a target .
591	This is a function that is used for debugging .
592	Download a URL .
593	Return a list of directories in root .
594	Return a list of files in root .
595	Download file from Google drive .
596	Get parameters for an image .
597	Get the parameters for a given image .
598	Get parameters for image .
599	Get parameters for a given brightness .
600	Generate parameters for a given image .
601	Download the contents of the file .
602	Download the dataset .
603	Download the dataset .
604	Get the current theme name .
605	Run auto completions .
606	Show the preferences .
607	Return a list of available themes .
608	Returns a list of searxbang .
609	Make a response from a response
610	Create a list of gradient strings .
611	Create a Normal matrix .
612	Calculate the log probability of a two - dimensional joint distribution .
613	Benchmark the Eight - CMC .
614	Decorate a function with a docstring .
615	Convert a distribution name into a simple name .
616	Build a list of RVs from a distribution .
617	Return a random variable as a random variable .
618	Create a random variable .
619	Calculate the predictive means for one step
620	Calculate the forecast for the observed time series .
621	Compute the maximum mask of x .
622	Assert x is finite .
623	Fail if x is at most rank .
624	Compute the size of an event .
625	Evaluate all one - hot functions .
626	Return the conversion function identifier for the given identifier .
627	Returns the number of components and component parameters .
628	Yields the next interceptor in the stack .
629	Decorate a function as an interceptor .
630	Returns an iterator over the data in a tape file .
631	Generate random logistic data .
632	Plot the decision .
633	Build the input pipeline .
634	Check that all map values are equal .
635	Trace the given state .
636	Call a function on a transition operator .
637	Call the given function and gradients .
638	Convert from_structure to_ structure .
639	Transform log probability function .
640	Create a LeapFrog step .
641	Perform metropolings step .
642	Constructs a HamiltonianM model for a given step .
643	Signs a new adaptation .
644	Initialize a model from a config .
645	Convert x to Tensor .
646	Create a scale operator .
647	Create a function that returns a random walk distribution .
648	Create a function that returns a random walk distribution .
649	Expand the tensor to the rank .
650	Computes the entropy lower bound of all components .
651	Return the category probabilities .
652	Validate the arguments .
653	Ensure tf is installed .
654	Compute logistic labels .
655	Get the coverage type and labels .
656	 cholesky covariance .
657	Compute standard deviation .
658	Computes the variance of x .
659	Make a positive axis .
660	Remove zeros from x .
661	Return the z of x .
662	Inverse of z .
663	Create a linear trend transition matrix .
664	Compute linear transition noise .
665	Sample a sample from an event dimension .
666	Returns a sequence of random permutations for the given dimensions .
667	Get the indices for the given number of results .
668	Return base expansion size .
669	Return a list of non - less than n .
670	Return a tf . D type of dtype .
671	Compute the hagesang for a given value .
672	Fix step size .
673	Perform a line search on a single bracket .
674	Loop after line search .
675	Perform a line search on a line .
676	Prepare the value and gradient for each step .
677	Pretty print the values .
678	Create a quadrature scheme with softmax normal distribution .
679	Compute cumulative quantiles for a quadrature scheme .
680	Check that a quadrature parameter is valid .
681	Determine the shape of the batch event layer .
682	Interpolate location at location .
683	Interpolate the given scale .
684	Scale a linear operator .
685	Concatenate vectors .
686	Log vector matrix .
687	Log matrix vector .
688	Compute the vector matrix .
689	Extract log probabilities from a distribution .
690	Returns the marginal hidden probabilities .
691	Compute the posterior marginal probabilities .
692	Compute posterior mode .
693	Choose a random direction .
694	Sample the next step .
695	Check if a function is a Tensor .
696	Pad x .
697	Create one step .
698	Build a TFd prior .
699	Build a training variational loss .
700	Minimize a build loss .
701	Compute the mean and variance of a time series tensor .
702	Compute the initial value of a time series .
703	Broadcast batch shape .
704	Given a list of distributions return a Multivariate linear operator .
705	Sum the sum of distributions .
706	Compute empirical statistics .
707	Expand trailing dimension .
708	Return the canonical representation of the observed_time_series with mask mask .
709	Mix over posterior plots .
710	Return the range of the given name .
711	Create a function that returns a summary statistics .
712	Unify call signature .
713	Resolves dist_fn_args .
714	Get the required arguments for the given function .
715	Compute the divergence between two components .
716	Build the distribution .
717	Resolves the given distribution_names .
718	Compute the entropy of all distributions .
719	Check that the arguments are in the support .
720	 summary of an image .
721	Visualize inputs .
722	Visualize the analysis of the model .
723	Summarize distribution parameters .
724	Summarize mean in nats and bits .
725	Call the given inputs .
726	Compute the zero state .
727	Call the graph .
728	Call the tensor .
729	Generate prior .
730	Reconstruct the posterior .
731	Sample static prior .
732	Sample the dynamic prior .
733	The batch shape of all parameters .
734	The tensor of the batch shape .
735	Create a state space model .
736	Returns the prior sample .
737	Compute the minimum shape of a bijector list .
738	Convert a vector size to square matrix size .
739	Return the indices of the given values .
740	Sort values by axis .
741	Convert x to numpy dtype .
742	Compute the 2D tensor .
743	Converts a value into a numpy tensor .
744	Log the likelihood of x .
745	Compute the logarithm of x .
746	Compute the tfinv of x .
747	log_cdf_laplace function .
748	Computes the log probability of the joint log probability .
749	Benchmark text messages .
750	Check if the marginal GP is a multivariate marginal GP .
751	Returns the marginal distribution .
752	Get the index points for this process .
753	Create an IAF stack .
754	Create a new one step .
755	Bootstrap the model .
756	Compute the outer squared between x and y .
757	Get the value and batch of x .
758	Ensures that x is a 2nd derivative .
759	Compute distributional transform .
760	Split the covariance into marginal values .
761	Convert the posterior space model into model .
762	Decodes the model using the given model .
763	Decodes the forecast at the given component distribution .
764	Convert a dense tensor to a sparse tensor .
765	Decorate an operator .
766	Return a string representation of a tensor .
767	The shape of the sample .
768	Returns the sample shape tensor .
769	The value of the sample .
770	Evaluate the model .
771	Return numpy array .
772	Computes the normal conjugates of the given prior .
773	Returns a function that creates a default template .
774	Return the unit norm of the given dimension .
775	r Log norm probability .
776	Log normalization .
777	Return the common dtype for a list of arguments .
778	Create a function for summary statistics .
779	Broadcast a tensor to a list of target tensors .
780	Calculate the PDF at the given peak .
781	Return the effective sample size in states .
782	Compute the effective sample size for a single state .
783	Scale a single state .
784	Return the size of x .
785	Broadcasts a list of states to a list of states .
786	Create a quadrature quadrature scheme .
787	Compute quantiles for a quadrature scheme .
788	Merge two objects .
789	Remove the given field .
790	Merge two values .
791	Return a deep tuple .
792	Create a new left increments tensor .
793	Find the best interval indices for x .
794	Slice the upper and upper bounds of a tensor .
795	Sample from the chain .
796	Slice a slice of one chain .
797	Create a set of variable values .
798	Creates a function that creates log - probabilities for the given model .
799	Get the inputs of a function .
800	Vgg conv block .
801	Build a tree for the given value and gradients .
802	Decorator that checks for None gradients .
803	Check if a state_one has no u - turn .
804	Given a value and a value and a value and a value return a list of the next target log probabilities .
805	Compute the log probability of the current target .
806	Create a randombernoulli tensor .
807	Create a default location scale function .
808	Creates a function that creates a random mean field normal .
809	Default normal function .
810	Deserialize a keras function .
811	Serialize a Lambda function .
812	Broadcasts a structure into a single structure .
813	Convert a nested struct to a Tensor .
814	Convert args to tensor .
815	Call the given function with the given arguments .
816	Returns a dictionary with the attributes of Tensor .
817	Make the prior prior .
818	Pack images .
819	Download a file .
820	Build the fake input functions .
821	Validate the block sizes .
822	Check that all tensors are broadcast .
823	Compute a multivariate normal normal normal .
824	Bernoulli layer_fn .
825	Normalizes x .
826	Calculate Poisson distribution .
827	Generate an euler method .
828	Get the drift parts for a step .
829	Compute the log - acceptance correction .
830	Helper function to call the volume volatility function .
831	This function is used to broadcast the volatility .
832	Make an ar transition matrix .
833	Sample the shape of x .
834	Apply a function to x .
835	Apply a function to the shape_list .
836	K - k - k - k - k - k - p - p - p - p - p .
837	Returns a flat sample of the given distribution .
838	Computes the probability of the latent dirichlet allocation .
839	Create a variational matrix .
840	Get the list of topics from the top words .
841	Download newsgroups dataset .
842	Builds the fake input functions .
843	Build an iterator over the training batches .
844	Minimize the graph .
845	Adds control dependencies to the codebook .
846	Save images to a file .
847	Visualize training images .
848	Load a Tamist dataset .
849	Convert a numpy dtype to a numpy dtype .
850	Return the base dtype for the given dtype .
851	Checks if the given dtype is a boolean .
852	Check if the given dtype is complex .
853	Return the maximum of the given dtype .
854	Return the name of the given dtype .
855	Return the size of the given dtype .
856	Assert that the items are of the same type .
857	Assert that tensors is a floating point type .
858	Minimize an objective function .
859	Nelder mead one step .
860	Return a function that can be used to accept the input
861	Given an objective function return the expansion function .
862	Return True if there is a contraction function .
863	Shrinks the given objective function at the given position .
864	Replace x with replacement at index .
865	Returns True if the objective is equal to the given position
866	Prepare arguments for the given objective function .
867	Prepare the arguments for the given objective function .
868	Prepare arguments with the given objective function .
869	Evaluate an objective function .
870	Plot the weight of a set of models .
871	Plots a plot of a set of probabilities .
872	Build fake data .
873	Get the model configuration .
874	Construct an instance from the given config .
875	Multiply two matrices .
876	Helper function for standard deviation .
877	Assign the log moving mean of a variable .
878	Make a columnar .
879	Generate a random rademacher .
880	Return a random rayleigh .
881	Select scalar condition .
882	Finish the log probability for each event .
883	Finish the probability for onefiber .
884	Rotate the dimensions of x .
885	Undo batch normalization .
886	Validate batch normalization layer .
887	Slice a single parameter .
888	Convert slice parameters to dictionary .
889	Apply a single step .
890	Apply a sequence of slices to a single step .
891	Create a batch slice .
892	Fit a model .
893	A function that returns a function that returns True if the convergence criteria change .
894	Prepare arguments for the model .
895	Return the number of columns of x .
896	Decorate a function with static arguments .
897	Copy a docstring .
898	Get static value for predicate .
899	Returns the rank of the given shape .
900	A case operation .
901	Yields the given name scope .
902	Computes the standard deviation of a mixture .
903	Create a tril scale .
904	Create a tensor for a diagonal part .
905	Get the shapes for a given location .
906	Return True if the scale is a diagonal scale .
907	Check that the distribution is valid .
908	Pad a tensor with padding dimensions .
909	Pick scalar condition .
910	Move a dimension to another dimension .
911	Embed an integer form .
912	Compute the same shape .
913	Return the static value of x .
914	Check if the given dt is known by the given dtype .
915	Check if dt is signed by the given dtype .
916	Return the largest integer of the given dtype .
917	Returns the smallest integer in the given dtype .
918	Check if dt is an integer like .
919	Embed categorical event shape .
920	Returns the list of log combinations of counts .
921	Rotate a tensor .
922	Pick a vector .
923	Ensures that shape1 and shape2 are not defined .
924	Generate a new seed
925	Creates a list of Tensors .
926	Returns the dimension size of x .
927	Process a quadrature grid and probabilities .
928	Return the first frame arguments for the parent frame .
929	Expand input to vector .
930	Create a Tensor with control dependencies .
931	Validate the right - transposed dimensions .
932	Validate permission .
933	Returns the shape of the given shape .
934	Concatenate x .
935	Returns the dimensions of x .
936	Merge x with other .
937	Returns a TensorShape with the given rank at least .
938	Check that the given shape is equal .
939	Return the shape of the sample .
940	Build a backward pass state .
941	Compute forward Kalman gain .
942	Builds a Kalman filter step .
943	Compute the linear update of a Gaussian model .
944	Compute kalman transition .
945	Creates a function that returns the mean step of the prior mean .
946	Create a step for the prior covariance .
947	Returns a function that generates a sample step .
948	Propagate the mean .
949	Propagate covariance to a distribution .
950	Perform forward - pass .
951	Sample n joint samples .
952	Compute posterior marginals .
953	Compute the joint mean of the model .
954	Compute the joint covariance matrix .
955	Convert latitudeents to observations .
956	Log normalization .
957	The mode of the concentration .
958	Rotate samples .
959	Sample n samples from 3d .
960	Return a copy of a function object .
961	Remove all keys with a value from a dictionary .
962	Recursively replace nested dictionaries .
963	Get samples from a distribution .
964	Return True if x is a namedtuple .
965	Choose the base case .
966	Choose the base case for a list of fields .
967	Reduce a tensor .
968	Apply a value and gradients to a function .
969	Helper function to call the function and gradients .
970	Perform smart_for_loop .
971	Run a trace scan .
972	Make a setter from a setter .
973	Make a getter for the kernel results .
974	Enable the kernel in results .
975	Replace event shape in a tensor .
976	Replace the event shape in an input tensor .
977	Check that the given shape is valid .
978	Check if any of the errors are reached .
979	Get initial state arguments .
980	Line search step .
981	Restrict a value and gradient function to a given direction .
982	Update the current position .
983	Check if the current objective is running .
984	Broadcast value to target .
985	Calculate the mean temperature of x .
986	Returns a function that returns the default exchange exchange for each replica .
987	Extract the field from the kernel results .
988	Get the ex changed states .
989	The variance scale term .
990	Returns a function that returns a function that returns a function that returns a function for the forward log of the given array .
991	Perform a forward transform function .
992	Inverse transform function .
993	Perform one step .
994	Return a Tensor with the given condition and fval .
995	Run secant2 .
996	Apply a value_and_ gradients function on the current branch .
997	Evaluate a value and return an update function .
998	Update value and gradients .
999	Perform a bracketing function .
1000	Search for a given value and gradients .
1001	Find the maximum minima in the function .
1002	Returns True if val_2 is finite .
1003	Return True if val_0 is satisfied .
1004	Calculate the secant between two values .
1005	Make a simple step size update policy .
1006	This function is used to set the Hamiltonian for the given target log .
1007	Compute the log acceptance correction .
1008	Perform one step of the current kernel .
1009	Return bootstrap results for this model .
1010	Bayesian resnet .
1011	Resnet block .
1012	Create a TensorFlow encoder .
1013	Create a decoder for the topics .
1014	Creates and returns the prior for each logit .
1015	Sample the given chain .
1016	Make a deep exponential family .
1017	Returns a tensor that is a softmax of shape .
1018	Create a random gamma variable .
1019	Load NIPS - 9 papers from a file .
1020	Initialize parameters .
1021	Given a type_a and type_b return a function that is registered for the given type .
1022	Read image from file .
1023	Download sprites files .
1024	Create a new character .
1025	Create a sequence of frames .
1026	Generate random sequence .
1027	Create a new sprites dataset .
1028	Validate distributions .
1029	Flatten a list of kernels into a single list .
1030	Flatten a list of kernels into a list .
1031	Generate fake data .
1032	Count integers in an array .
1033	Find the bins of the given edges .
1034	Creates a histogram of the given edges .
1035	Compute quantile values .
1036	Get the dimensions of a tensor .
1037	Insert dimensions in x .
1038	Make a list of non - negative dimensions .
1039	Move dimensions to flat_end .
1040	Sort tensor .
1041	Builds the component space space models .
1042	Computes the alpha for the given alpha .
1043	Returns a new K1 .
1044	Return the jensen - shannon distribution .
1045	Pearson function .
1046	Computes the squared output of the given logu .
1047	Compute a triangular tensor .
1048	Calculate the power of t .
1049	Compute the absolute log1 p .
1050	Compute the jeffreys .
1051	Return the modified gan .
1052	Compute the dual Ciszar function .
1053	Return the dual zar function .
1054	Monte_carlo_car_f_diar .
1055	Helper function for Ciszar - Par .
1056	Assert that x is statically .
1057	Perform a batch gather with broadcast dimensions .
1058	Broadcast an event with the given parameters .
1059	Compute the expectation models for a given sampler .
1060	Broadcast an event with the given dimensions .
1061	Minimize a value .
1062	Computes the control dependencies for the inverse Hessian .
1063	Update the inverse Hessian .
1064	Compute the inverse Hessian .
1065	Multiply a matrix .
1066	Compute the product of t1 and t2 .
1067	Transpose a tensor .
1068	Pad x to the right .
1069	Return the sum of the dimensions of x .
1070	Computes the squared gradient of x .
1071	Return the common dtype for a list of arguments .
1072	Minimize a value .
1073	Helper function to get initial state results .
1074	Compute search direction .
1075	Create an empty queue .
1076	Push the given queue into the given queue .
1077	Return True if x is a PSD of x .
1078	Compute the detector mask for x .
1079	Generate a uniform correlation - like matrix .
1080	Compute the correlation matrix for the given dimension .
1081	Compute the confidence interval for a set of samples .
1082	Compute the 1D volume of a given dimension .
1083	r Vise Mises series .
1084	Returns a function that calculates the von mises density of x .
1085	Perform one step on a population .
1086	Minimize an objective function .
1087	Get initial arguments for an objective function .
1088	Find the best value in a population .
1089	Check whether the population is convergence .
1090	Get the starting population .
1091	Perform binary cross over population .
1092	Get themutant part of a population .
1093	Get the indices of a given size .
1094	Ensure a tensor or list is a list .
1095	Helper function to convert a tolerance to a tensor .
1096	Calculate soft thresholding operator .
1097	Clip by value .
1098	Build the input pipeline .
1099	Plot the generated images .
1100	Convert to a string .
1101	Call the graph with the given inputs .
1102	Call the model .
1103	Return the mean of x .
1104	Returns the inverse of x .
1105	Compute the rank of a matrix .
1106	The pinv function .
1107	r Solve the inverse of the right - op .
1108	Compute the inverse of a matrix .
1109	Return a list of assertions that have at least two dimensions .
1110	Solve the eigenvalues of lower and right dimensions .
1111	Compute the block - diagonal matrix .
1112	Validate a matrix .
1113	Compute the log - likelihood of a model .
1114	Fit a sparse model .
1115	Generate a list of slices .
1116	Generate a mask .
1117	Create a new tensor shape .
1118	Create an input order
1119	Create the degree of the input .
1120	Create a list of masks that are hidden in degrees .
1121	Create an initializer for the given mask .
1122	Build the masks .
1123	Call x .
1124	Draw a single sample .
1125	Returns a multivariate normal matrix .
1126	Creates a function that returns the observation noise .
1127	Convert parameters to weights .
1128	Return the depth of a graph .
1129	Return best order for g .
1130	Return a function that takes a distribution chain of distributions .
1131	Build the model .
1132	Compute the variational loss .
1133	Compute optimal variational posterior .
1134	Returns True if the season is last day of season .
1135	Build a tensor of effects and residuals .
1136	Builds a seasonal transition matrix .
1137	Build a seasonal transition noise .
1138	Builds a single seasonal transition noise representation .
1139	Check if an observation is empty .
1140	Validate the observation data .
1141	Add a scheduler to the scheduler .
1142	Set the checkpoint .
1143	Set the gradient clip .
1144	Optimize the value .
1145	Set the training summary .
1146	Set the value summary .
1147	Create a local optimizer
1148	Set the training data for the given RDD .
1149	Set a summary trigger .
1150	Read data sets .
1151	Get a list of texts
1152	Get the w2v file .
1153	Compile the optimizer .
1154	Fit the dataset .
1155	Evaluate the given RDD .
1156	Return the prediction of x .
1157	Get the MNIST dataset .
1158	Preprocess mnist .
1159	Get end trigger .
1160	Validate the optimizer .
1161	The value of the file .
1162	Call the function with the given name
1163	Call a function with the given arguments .
1164	Convert an RDD into a Java object .
1165	Convert Python object to Java
1166	Get the activation by name .
1167	Construct an instance from a numpy array .
1168	Get the label of the image .
1169	Read parquet file
1170	Write parquet file
1171	Get an image .
1172	Get the image frame to image frame .
1173	Return the label of the image .
1174	Get the prediction for this image .
1175	Predict x .
1176	Fit the optimizer .
1177	Transform the image .
1178	Save keras definition to file .
1179	Build a keras model .
1180	Predict class distributed by the given RDD .
1181	Set the weights of the weights .
1182	Get the weights of the layer .
1183	Save a tf .
1184	Run the evaluation .
1185	Load a torch layer .
1186	Load a keras .
1187	Returns an criterion for the given criterion .
1188	Load weights from a JSON file .
1189	Load the training data .
1190	Build a keras model .
1191	Get the input shape .
1192	Returns the output shape .
1193	Read MNIST dataset
1194	Read the movielens data sets .
1195	Returns the classpath to be used in the C ++ directory .
1196	Return True if the spark version of 2 . 2 . 2 . 2 .
1197	Export a checkpoint .
1198	Save a list of tensors to target_path .
1199	Expand the tile to the given axis .
1200	Precompute future symbols
1201	Simple attention .
1202	 attention .
1203	Given a reference corpus and a translation corpus compute the matches .
1204	Get log file .
1205	Write a log file .
1206	Returns a summary of the gradients .
1207	Dump weights to a file .
1208	Read dataset data by config .
1209	Train a model from a config file .
1210	Connect to an agent .
1211	Convert a list of labels to one hot .
1212	Convert a probabilities to one - hot labels .
1213	Create a tf . Session .
1214	Load the model file .
1215	Get the momentum variable .
1216	Update the variables of the graph .
1217	Round the f1 score to the f1 score .
1218	Process a word .
1219	Create a layer of stacked convolutions .
1220	Create a GRU cell .
1221	Create a stacked LSTM layer .
1222	Create a stacked highway layer .
1223	Return an embedding layer .
1224	Create a GRU layer .
1225	Create a GNN .
1226	LSTM .
1227	Create a LSTM layer .
1228	Generates a bi - layer of units .
1229	LSTM .
1230	Concatenate the bi - layer .
1231	Apply dropout to units .
1232	Build the network .
1233	Build word layer .
1234	Build the basic network .
1235	Train the model on the given data .
1236	Predict on data .
1237	Make a vector of sent words .
1238	Create a vector of tags .
1239	This function returns a Bibu measure .
1240	Verify that the URL is valid for S3 .
1241	Extract certificates from a file .
1242	Verify the certificates chain .
1243	Verify the signature of the certificate
1244	Verifies the certificate chain
1245	Returns the JSON representation of this control .
1246	Return a list of all the control methods in the bot .
1247	Return a list of telegram .
1248	A list of the alexa .
1249	Main main function .
1250	Wrap a function in a graph .
1251	Wrap the given function in keras .
1252	Calculates the accuracy of the predicted data .
1253	Round accuracy .
1254	Create an initializer for pre trained layers .
1255	Read data from data path .
1256	Creates a default agent based on the required parameters .
1257	Convert x to one hot .
1258	Prettyify metrics .
1259	Populate the settings directory .
1260	Load the model .
1261	Save the model to disk .
1262	Get a training op .
1263	Search for a word .
1264	Create default operation cost
1265	Start the timer .
1266	Handle a request .
1267	Return agent response .
1268	Generate the response dictionary .
1269	Handle intent .
1270	Handle a launch request .
1271	Handle invalid message .
1272	Pretty print a dictionary .
1273	Convert a list of losses to Pmo loss .
1274	Build a Chainer model .
1275	Run the given model .
1276	Predict on a file .
1277	Read a file .
1278	Load a function from a string .
1279	Decorator to register a metric .
1280	Get a metric by its name .
1281	Convert a label to an integer .
1282	Calculate the best distance between values and losses .
1283	Encode tokens .
1284	Read requirements . txt file .
1285	Calculate the log loss of the image .
1286	Export to a hub .
1287	Return the details of an item .
1288	Creates an Ecommerce Agent .
1289	Run MMS bot server .
1290	Download files from dest_file_path .
1291	Untar a file .
1292	Decompress a file .
1293	Recursively updates the keys in a dict with the keys in the settings .
1294	Set the md5 of a URL .
1295	Set query parameter .
1296	Return the alexa .
1297	Return the control JSON .
1298	This method returns a dictionary containing the information about the card .
1299	Return the control JSON .
1300	Returns a dict containing the MMS bot framework .
1301	Calculate the F1 and F1 for the given answer .
1302	Compute recall at k .
1303	Check if GPU existence are available .
1304	Parse a config property .
1305	Parse configuration file .
1306	Expand path .
1307	Create a component from a dictionary .
1308	Run the input queue .
1309	Delete a conversation .
1310	Refresh all valid certificates .
1311	Verify that the request is valid
1312	Handle a request .
1313	Load a class from a string .
1314	Decorator to register a registry .
1315	Get a model by name .
1316	Retrieves the path for theGL M Registry model .
1317	MakeGLM model .
1318	Create a H2OCluster object from a dictionary of values .
1319	Shutdown the H2O instance .
1320	Check if the server is running .
1321	Shows the status of this cluster .
1322	List all the jobs in the database .
1323	Return a list of time zones .
1324	Fill from a H2ocluster object .
1325	Get the metalearner parameters .
1326	Waits for the given test function and returns the result .
1327	Returns the summary of a frame .
1328	Delete a frame .
1329	Returns a list of model builder instances .
1330	Validate the model parameters .
1331	Compute the metrics for a given model .
1332	Get the model metrics .
1333	Delete a model .
1334	Generate a tabulate table
1335	Run EC2 instances .
1336	Terminate instances .
1337	Stop the specified instances .
1338	Start instances .
1339	Reboot instances .
1340	Wait for a list of IP addresses to be running on the instance .
1341	Get the full name of a function .
1342	Find a function from an iterable .
1343	Get the arguments for a function .
1344	Wrap the given text .
1345	Join the model .
1346	Train the model .
1347	Fit the model .
1348	Get the parameters for this H2O estimator .
1349	Called when the given signal is called .
1350	Remove the output directory .
1351	Remove the sandbox directory .
1352	Scrape the port from the output file .
1353	Scrape cloud size from stdout
1354	Stop the Java process .
1355	Stop all nodes .
1356	Get the IP of the node .
1357	Get the port of the node .
1358	Get ROC .
1359	Determine the vector size .
1360	Calculate the mean absolute error .
1361	Calculates the mean squared error for each target .
1362	Calculate the median absolute error .
1363	Calculates the mean variance score of a model .
1364	Fail if var is a valid type .
1365	Check if a string matches the given value .
1366	Fail if condition is a valid string .
1367	Returns a list of strings that can be used by the function .
1368	Check if a variable type is valid type
1369	Get the type name for a given type
1370	Get the source code for a lambda function .
1371	Check if a variable is valid .
1372	Check if var is a string .
1373	Get the config file .
1374	Read the candidate log files .
1375	Yields all candidate log files .
1376	Execute the execution context .
1377	Store the model progress .
1378	Recalculate model parameters .
1379	Estimate the completion time based on the current time .
1380	Guess the next poll interval .
1381	Compute progress at time t .
1382	Calculate the progress at the given time .
1383	Draws the given text .
1384	Compute the size of the widget .
1385	Get the size of the terminal .
1386	Set the text encoding .
1387	Fit the target encoder .
1388	Get a single frame
1389	Refresh the cache .
1390	Returns the type of the given column .
1391	Create a list of columns .
1392	Create a summary file .
1393	Describe the frame .
1394	Return the head of the table .
1395	Return a list of rows .
1396	Return a list of levels
1397	Return the number of levels .
1398	Set the level of the expression .
1399	Set the levels .
1400	Rename the table .
1401	Set the names for this expression .
1402	Set the name of the frame .
1403	Check if item is in file .
1404	Helper function to create a number of k fold columns .
1405	Create a stratified k fold column .
1406	Print a structure .
1407	Return the data as a pandas DataFrame .
1408	Pop an expression .
1409	Create a quantile file .
1410	Concatenate frames .
1411	Create a new dataframe .
1412	Create a new dataframe .
1413	Split a single frame into multiple splits .
1414	Return a group by the given object .
1415	Fill the table with a new array .
1416	Impute values from a column .
1417	Return a list of columns .
1418	Return a string containing the relevel .
1419	Insert missing values .
1420	Create a variable .
1421	Create a list of rows .
1422	Create a list of distance elements .
1423	Create a factor node .
1424	Return a string split .
1425	Return an array of count matches .
1426	Return a string containing a substring .
1427	Return a string with the contents of this expression .
1428	Get the entropy of this expression .
1429	Return the number of valid substrings .
1430	Create a table .
1431	Create a histogram .
1432	Create an isax node .
1433	Add a new expression to the table .
1434	Returns a string representation of the expression .
1435	Return a list of nodes with the given pattern .
1436	Return a string containing the table data .
1437	Create a copy of the expression node .
1438	Return a file object .
1439	Returns a string representing the minute .
1440	Create a new runif file .
1441	Create a random stratified split .
1442	Create a cut frame .
1443	Return a string with the maximum value of this expression .
1444	Create a new expression
1445	Parse text .
1446	Parse a file .
1447	Move the current row to the given drow .
1448	Unparse tokens .
1449	Get the dataset size
1450	Get the centers of the cell
1451	Get the centers standard deviation .
1452	Connect to H2O .
1453	Perform H2O API .
1454	Check the version of H2O .
1455	Import a path .
1456	Upload a file .
1457	Import a file .
1458	Import a hive table .
1459	Import a table .
1460	Import SQL table .
1461	Parse a raw file .
1462	Create a deep copy of data .
1463	Get a model from a JSON file .
1464	Search for a given grid .
1465	Get a single frame .
1466	Helper function to download a model .
1467	Download csv file
1468	Download all logs .
1469	Export a file
1470	Return a list of data
1471	Run a demo function .
1472	Load dataset .
1473	Make a list of model metrics .
1474	Put a key to a file .
1475	Upload a custom metric .
1476	Check that the given frame id is valid .
1477	Returns a human readable string for the given size .
1478	Normalize a slice .
1479	Check if a slice is normalized .
1480	Predict a Pandas DataFrame .
1481	Predict CSV for the given files .
1482	Decorator for deprecated functions .
1483	Join the job .
1484	Return a copy of the model s deep features .
1485	Print a summary of the model
1486	Print all the model values
1487	Get the hyperparams of the model .
1488	Get the hyperparams for the given id .
1489	Get a single grid .
1490	Compute the F1 model .
1491	Return a pandas DataFrame of the model data .
1492	Get the features for a dataset .
1493	Visualize the model .
1494	Translate a name to a name .
1495	Remove indentation from a text .
1496	Extract run info into a temporary file .
1497	Run this script .
1498	Close the session .
1499	The session id .
1500	Start logging .
1501	Prepare data payload
1502	Prepare file payload .
1503	Log a transaction .
1504	End a transaction .
1505	Log a message .
1506	Process the response .
1507	Print a message .
1508	Return an array of leaderboards .
1509	Download a file .
1510	Download a model .
1511	Fit the parameters
1512	Transform X .
1513	Inverse transform .
1514	Extract true string .
1515	Find node name in each line .
1516	Find git hash branch .
1517	Find the build timeout .
1518	Find the build failure for all tasks in each line
1519	Find the build id for the given line .
1520	Extract the job build URL from a URL string .
1521	Grab all Java messages associated with the java test
1522	Save the build info to the console .
1523	Update the g_ summary file .
1524	Write the content of a file .
1525	Write a Java Message
1526	Load all java messages to ignore .
1527	Normalize enum constant .
1528	Returns a list of synonyms for a word
1529	Poll the job .
1530	Helper function to create a new Assembly model file .
1531	Create a new Assembly object .
1532	Return a percentile on a sorted list .
1533	Returns a dictionary of default parameters .
1534	Returns the actual parameters as a dictionary .
1535	Retrieve the deep features for a given test layer .
1536	Return the score history for this model .
1537	Show the H2O estimator .
1538	Return the variable importances of the model
1539	Returns the residual degrees of freedom .
1540	The coefficients of the model .
1541	Download a file .
1542	Download this model .
1543	Get information about a model .
1544	Check that the targets are valid .
1545	Get cross validation models .
1546	Use H2O to create a GLM .
1547	Given a list of H2O and H2O and H2O .
1548	Use H2O to create a GLM .
1549	Wait until a key is pressed .
1550	Return the cell as a pandas DataFrame .
1551	Print the table
1552	Start a jar .
1553	Find the jar .
1554	Yield paths from h2o jar files .
1555	Get the hit ratio table .
1556	Create a csv .Dict writer .
1557	Convert URI to path .
1558	Convert path to URI .
1559	Parse a list of lines .
1560	Generate the documentation for the module .
1561	Discover all modules in the root path .
1562	Write API docs to a directory .
1563	Write the index to a directory .
1564	Convert the cell to a list .
1565	Load dictionary from file .
1566	Add new messages .
1567	Update the message dictionary with the given action .
1568	Extract a dictionary from a file .
1569	Save a dictionary .
1570	Print a dictionary of keys and keys
1571	Parse command line arguments .
1572	Print usage of a script .
1573	Find all files in a directory .
1574	Find the magic in a file .
1575	Main function .
1576	Transform data into a pipeline .
1577	Summarize all failed tests in a directory .
1578	Extract intermittens from json file .
1579	Plot the model .
1580	Return a confusion matrix .
1581	Return True if the model is available .
1582	Trim data back to the data back
1583	Return a dictionary of endpoint groups .
1584	Update site .
1585	Serialize JSON data .
1586	 comment the given user .
1587	Get username and password .
1588	Return True if the given user is like a list of items .
1589	Return a list of all of the items in the given list .
1590	Check if a user is not in the whitelist
1591	Read a list from a file .
1592	Schedule a schedule
1593	Send a Deferred to the device .
1594	Download the initial data for a given resource group .
1595	Guess service information from a path .
1596	Update a command with the specified node .
1597	Delete a LRO poller .
1598	Create or update an application definition .
1599	Return the URI for the given request .
1600	Return a new RequestConnection .
1601	Perform a request .
1602	Execute script actions .
1603	Check the front door name availability .
1604	Purge an empty list .
1605	Get the authorization server .
1606	Validate the request URI .
1607	Get the CLI profile .
1608	Get credentials for Azure .
1609	Resolve an app .
1610	Check the name availability for a given name
1611	Opens a request .
1612	Sets the timeout for this request .
1613	Sets the request header .
1614	Gets all response headers .
1615	Sends the request body .
1616	Returns the status of this request .
1617	Gets the status text .
1618	Return the response body .
1619	Sets the client certificate .
1620	Send a request .
1621	Set a request header .
1622	Send a request .
1623	Get the HTTP response .
1624	Get a readable id from the id prefix .
1625	Get the serialization name for the given element .
1626	Verify a face to a person .
1627	Add a job .
1628	Gets the properties of an entry .
1629	Get all children from a path .
1630	Find namespaces from child child .
1631	Create a namespace from an XML string .
1632	Convert an XML string to a region object .
1633	Convert a namespace string to an availability response .
1634	Convert XML to metrics .
1635	Replace the content of a resource .
1636	Return a list of recommendations .
1637	Update a kb .
1638	Get user s member groups .
1639	Build a package from the SDK .
1640	Import data from a resource group .
1641	Publish a new LRO poll .
1642	Renew the lock .
1643	Perform a replace operation .
1644	Add a new secret value resource .
1645	Retrieves the storage account properties for a given service .
1646	Retrieves the keys for a given service .
1647	Generate storage account keys .
1648	Create a new storage account .
1649	Updates an existing storage account .
1650	Delete a storage account .
1651	Check the storage account name availability .
1652	Get the properties of a hosted service .
1653	Create a new hosted service .
1654	Delete a hosted service .
1655	Creates a deployment .
1656	Delete a deployment .
1657	Swap the deployment of a given service .
1658	Change the deployment configuration .
1659	Updates the deployment status .
1660	Upgrade a deployment .
1661	Walk up upgrade domain .
1662	Reboot a role instance .
1663	Delete role instances .
1664	Get the availability of a specific service .
1665	Get a list of service certificates for a given service .
1666	Get a service certificate .
1667	Add a new service certificate .
1668	Delete a service certificate .
1669	Get the management certificate for this subscription .
1670	Adds a subscription certificate to this subscription .
1671	Delete management certificate .
1672	Get the affinity group properties .
1673	Creates a new affinity group .
1674	Delete a affinity group .
1675	List subscription operations .
1676	Creates a reserved IP address .
1677	Delete a reserved IP address .
1678	Associate a reserved IP address .
1679	Associate a reserved IP address with a deployment .
1680	Get a reserved IP address .
1681	Get a single role .
1682	Create a virtual machine deployment .
1683	Add a role to a virtual machine .
1684	Update an existing role .
1685	Delete a role .
1686	Capture a role .
1687	Start a role operation .
1688	Start the roles for a given service .
1689	Restart a role instance .
1690	Shutdown a role .
1691	Shutdown the specified roles .
1692	Add a DNS server .
1693	Updates a DNS server .
1694	Delete a DNS server .
1695	Lists the versions of a resource extension .
1696	Create a replication path for a VM .
1697	Un replication of a VM .
1698	Share a VM image with the specified permission .
1699	Create a new VM image .
1700	Delete a VM image .
1701	List all VM images .
1702	Update an existing VM image .
1703	Add os image .
1704	Update os image .
1705	Update os_image from an image reference .
1706	Delete an OS image .
1707	Get a single data disk .
1708	Adds a data disk to a service .
1709	Update a data disk .
1710	Delete a data disk .
1711	Add a disk .
1712	Updates a disk .
1713	Delete a disk .
1714	Summarize the policy states for the specified management group .
1715	Builds a receiver .
1716	Fetch the next message .
1717	Renew the lock .
1718	Create or update a resource group .
1719	Convert a single placement group into a single placement group .
1720	Create a screen text .
1721	Create a new key .
1722	Import a key .
1723	Update a key .
1724	Set the secret with the given value .
1725	Set the certificate issuer .
1726	Create a service object from a connection string .
1727	Get a subscription client .
1728	List all subscriptions in a topic .
1729	Send all pending messages .
1730	Return a sender .
1731	Return a receiver .
1732	Get a dead letter receiver .
1733	Parse an async operation .
1734	Perform a GET request .
1735	Perform a PUT request .
1736	Wait for an operation status .
1737	Get the status of an operation .
1738	Update the header of the management request .
1739	Build the path to the package .
1740	Get a list of certificates .
1741	Gets the region information .
1742	Fetches a list of all namespaces .
1743	Retrieves a service bus namespace .
1744	Creates a service bus namespace .
1745	Deletes a namespace .
1746	Check the namespace availability .
1747	Gets a list of topics .
1748	Gets a list of notification hubs .
1749	Gets a list of relays .
1750	Gets a metric rollup queue .
1751	Gets the metrics rollup topic .
1752	Gets a metric rollup notification .
1753	Gets the metrics rollup relay .
1754	Create a new Environment .
1755	Create a virtualenv with the given packages .
1756	Creates a new server .
1757	Sets the admin password for the specified server .
1758	Gets a list of quotas .
1759	Gets the event logs for a server .
1760	Creates a new firewall rule .
1761	Updates a firewall rule .
1762	Deletes a firewall rule .
1763	Fetches a list of firewall rules .
1764	Gets a list of service level objectsives .
1765	Creates a database .
1766	Updates a database .
1767	Delete a database .
1768	Gets a list of databases .
1769	List the agreements for this subscription .
1770	Closes the message handler .
1771	Close the receiver .
1772	Get session state .
1773	Set session state .
1774	Receive a deferred message .
1775	Merges a new LROPoll .
1776	Validate the challenge .
1777	Purge an instance of a resource group .
1778	Handler for errors .
1779	Create a queue .
1780	Delete a queue .
1781	Get a single queue .
1782	Create a new topic .
1783	Gets the specified topic .
1784	Create a new rule .
1785	Get a single rule .
1786	List the rules for a given topic .
1787	Creates a new subscription .
1788	Gets the specified subscription .
1789	List all subscriptions for a given topic .
1790	Sends a message to a topic .
1791	Unlocks a subscription message .
1792	Sends a batch of messages to a queue .
1793	Unlocks a queue message .
1794	Receive a message from a queue .
1795	Receive a message from a subscription .
1796	Create an event hub .
1797	Update an event hub .
1798	Gets the event hub .
1799	Send an event .
1800	Update service bus header .
1801	Get the authorization token for the given request .
1802	Check if the token is expired .
1803	Get the token from the client .
1804	Update the request URI query .
1805	Resets the service principal profile .
1806	Delete the queue .
1807	Unlock the lock lock .
1808	Renew lock .
1809	Add headers to request .
1810	Convert to batch body .
1811	Get the cluster health information .
1812	Get cluster health using the specified policy .
1813	Unprovision an application type description .
1814	Returns a list of task IDs for the given task .
1815	Submit a property batch .
1816	Handle HTTP errors .
1817	Starts a network trace operation .
1818	Returns a list of slot differences between a resource group .
1819	Swap a slot on a resource group .
1820	Get an event by type
1821	Add face from a stream .
1822	Handle a redirect request .
1823	Create and start a new migration
1824	Publish events to a topic .
1825	Move resources to a source resource group .
1826	Set the profile .
1827	Returns a list of query results for the specified management group .
1828	Create a new queue .
1829	Delete a queue .
1830	Create a topic .
1831	Delete a topic .
1832	Create a subscription .
1833	Create a shared access key from a connection string .
1834	Get the properties for this namespace .
1835	Check if the lock is expired .
1836	Create a new resource .
1837	Create a new subscription .
1838	Export request rate by interval .
1839	Handle the output of a queue .
1840	Add tasks to a job .
1841	Handles task collection threads .
1842	Build the configuration .
1843	Resets the given password .
1844	Start a LROPoller .
1845	Create a message .
1846	Convert an XML element to a Rule object .
1847	Convert an XML element to a queue .
1848	Convert an XML element to a topic string
1849	Convert an XML element to a subscription list .
1850	Create a new client .
1851	Delete a resource group .
1852	Get a client from CLI profile .
1853	Get a client from a json dictionary .
1854	Load a client from an auth file .
1855	Parse an enum results list .
1856	Get entry properties from an element .
1857	Delete a resource group .
1858	Get a queue instance .
1859	List all queues .
1860	Get a topic object .
1861	Return a list of topics .
1862	Receive a deferred messages .
1863	Approve a deferred messages .
1864	Get the site details .
1865	Create a new site .
1866	Delete a site .
1867	Updates a site .
1868	Restart a site .
1869	Get historical metrics for a webspace .
1870	Gets the metric definitions for a webspace .
1871	Get publish profile XML .
1872	Get the publish profile for a webspace .
1873	Update the policies for a resource group .
1874	Creates a new cloud service .
1875	Check the job collection name .
1876	Get a job collection .
1877	Returns a complete restore .
1878	Cancel scheduled messages .
1879	Send pending messages .
1880	Reconnect the message .
1881	Get the certificate from the publish settings file .
1882	Load all cached cookies .
1883	Return the width of the terminal .
1884	Returns the cut prefix for the given value .
1885	Print a message to stderr .
1886	Format the size of a file .
1887	Format the elapsed time .
1888	Create a terminal line .
1889	Print progress bar .
1890	Generate segment numbers for this playlist .
1891	Iterate over segments .
1892	Wait for the event .
1893	Enqueue a segment .
1894	Queue a value in the queue .
1895	Get SWF parameters .
1896	Extract the nonce from the response .
1897	Return the v pid for the given url .
1898	Parse JSON data .
1899	Parse an XML string .
1900	Parse query string .
1901	Search a dictionary by key .
1902	Spawns a new process .
1903	Yield tags from HTML .
1904	Parse a manifest into a dictionary .
1905	Determine the UTF - 8 encoding of a sample .
1906	Parse a JSON response .
1907	Parse XML .
1908	Parse cookies .
1909	Parse headers .
1910	Parse query params .
1911	Return the message as a string .
1912	Create a new record .
1913	Login to live Edu account
1914	Load the support plugin .
1915	Update the query string
1916	Iterate over the chunks of the file descriptor .
1917	Iterate over plugin argument configuration .
1918	Check file output .
1919	Create a file output .
1920	Create HTTP server .
1921	Iterate over HTTP requests .
1922	Output stream stream .
1923	Output the output of a stream .
1924	Open the given stream .
1925	Write the given stream .
1926	Read a stream from a stream .
1927	Handle a stream .
1928	Fetch streams from plugin .
1929	Fetch streams with retry .
1930	Resolve a stream name .
1931	Format a list of streams .
1932	Handle a URL .
1933	Print all available plugins
1934	Authenticates a web browser .
1935	Load plugins from a directory .
1936	Set up arguments from a parser .
1937	Setup the console
1938	Setup HTTP session .
1939	Load all plugins .
1940	Set up options
1941	Log current versions .
1942	Get the stream_id of the image .
1943	Get the video .
1944	Set an option .
1945	Get an option .
1946	Set the option for the given plugin .
1947	Get the option for the given plugin .
1948	Resolve a URL .
1949	Load the available plugins .
1950	Convert a value to a number of seconds .
1951	Validate that the given string starts with the given string .
1952	Checks if the given string ends with the end of the given string .
1953	Validate that the string contains a string .
1954	Create a getter for the given value .
1955	Apply a filter to a function .
1956	Apply a function to a dictionary .
1957	Validate a URL attribute .
1958	Given an xpath find it .
1959	Find all elements in xpath
1960	Find the player url .
1961	Parse data .
1962	Check if a command is supported .
1963	Do login .
1964	Get the stream_id of the given HTML .
1965	Extract the stream info from the given HTML .
1966	Login .
1967	Add a function to the map .
1968	Perform an API call .
1969	Start a new session .
1970	Get information about a media .
1971	Create an API object .
1972	Compress string .
1973	Format a character formatter .
1974	Helper function to output a string .
1975	Read n bytes from the stream .
1976	Return the value of this code .
1977	Return an explanation of this code .
1978	Set the length of the decode table .
1979	Set the length for each length table .
1980	Shows the code of the programmers .
1981	Read a tuple from the stream .
1982	Return an explanation of the object .
1983	Get the value of a range .
1984	Return the span of the given index .
1985	Return the value at index .
1986	Return the mnemonic of a symbol .
1987	Return a string representing the mnemonic .
1988	Compile all actions in the action table .
1989	Execute an action
1990	Make hex data for the given position .
1991	Process the stream .
1992	Return True if the block is metab lock length False otherwise .
1993	Read compressed data .
1994	Read block types .
1995	IMTF function .
1996	Read prefix array .
1997	Clip a color at a given color .
1998	Clip a polygon with the given colors .
1999	Create an arrow table from a dataset .
2000	Patch a dataset .
2001	Add virtual columns to the system .
2002	Add virtual column .
2003	Return a graphviz graph .
2004	Return a list of all the values in the dataset .
2005	Map the given mapper to the given mapper .
2006	Create an app
2007	Open multiple files .
2008	Return a list of samples .
2009	Load a table from a FITS table .
2010	Create a dataframe from a list of arrays
2011	Convert a list of scalars to a numpy array .
2012	Helper function to create a dataframe .
2013	Read data from a CSV file .
2014	Create a server
2015	Return a Zeldovich object .
2016	Concatenate two lists .
2017	Return the range of the given range .
2018	Open a dataset
2019	Evaluate an expression .
2020	Decorator for delayed functions .
2021	Returns the set of columns for the given dataset .
2022	Create a task .
2023	Sorts the list of pairs
2024	Read Gadget file .
2025	Clear the canvas .
2026	Wait for plot to finish .
2027	Open OS document .
2028	Write file to file .
2029	Splits a list of arrays and returns the mask and mask .
2030	Reduce the result of an expression .
2031	Get the first value of an expression .
2032	Calculate the mean of an expression .
2033	Get the sum of an expression .
2034	Calculate the standard deviation of an expression .
2035	Get the covariance of a sequence .
2036	Get a value .
2037	Compute the minimum value of an expression .
2038	Return the percentile of an expression .
2039	Create a plot object .
2040	Calculate healpy count for a given expression .
2041	Plot the heal pixels
2042	Create a 3d object .
2043	Get the dtype of an expression .
2044	Get the private directory .
2045	Get state data
2046	Set the state
2047	Remove virtual metadata
2048	Create virtual meta file .
2049	Write meta data .
2050	Generate a list of subspaces for each column .
2051	Set a variable .
2052	Evaluate a variable .
2053	Evaluate a selection mask .
2054	Convert to dict .
2055	Return a copy of the table
2056	Convert to pandas DataFrame .
2057	Convert to arrow table
2058	Create an astropy table .
2059	Add a column to the DataFrame .
2060	Rename a column .
2061	Add virtual columns to cartesian
2062	Add virtual columns to spherical coordinates .
2063	Add virtual columns to polar .
2064	Add virtual columns polar to cartesian .
2065	Add virtual columns rotation
2066	Add virtual columns to cartesian
2067	Add virtual columns to spherical coordinates .
2068	Add a virtual column .
2069	Delete a virtual column .
2070	Add a new variable
2071	Delete a variable .
2072	Return the last n elements in the tree .
2073	Displays the head and tail table .
2074	Describe the table .
2075	Displays the data in i2 .
2076	Set the current row
2077	Return a list of column names that match the given name .
2078	Return a copy of this DataFrame .
2079	Return a copy of this DataFrame with the given indices .
2080	Extract all the values that are filtered .
2081	Sample from the model .
2082	Split the list with a random number .
2083	Split the list into two lists .
2084	Sort the values by a given value .
2085	Add a virtual column to the table .
2086	Undo the current selection history .
2087	Emits the selected selection history .
2088	Returns True if the selected selection can be used .
2089	Select the selected selection .
2090	Select selected selection .
2091	Return a copy of self with missing values .
2092	Select a rectangle .
2093	Select a box using the given limits .
2094	Select a circle .
2095	Select an ellipse on the current image .
2096	Select a selection for an expression .
2097	Select a selection .
2098	Set the selected selection .
2099	Create a selection file .
2100	Find a valid name
2101	Return a list of root nodes .
2102	Return a graphviz representation of the dataframe .
2103	Coerce a column to a set of labels .
2104	Return a DataFrame with the unique values for the given column .
2105	Return a Datas object
2106	Return the number of elements in the sequence .
2107	Concatenate two columns .
2108	Concatenate this DataFrame .
2109	Export a file
2110	Add a column .
2111	Patch a DataFrame .
2112	Decorator to register a function .
2113	Fill a numpy array with the given value .
2114	Return the dayofweek values of x .
2115	Return the dayof year .
2116	Return True if x is a leap year .
2117	Return the year of a year .
2118	Return the month of x .
2119	Return the month name of x .
2120	Return the day of x .
2121	Return the day name of x .
2122	Return the day of the weekof year .
2123	Return the time hour of x .
2124	Return a series of datetime . minute .
2125	Return the second value of x .
2126	Return the name of a string .
2127	Concatenate two strings .
2128	Return True if x contains a string .
2129	Count the number of strings in x .
2130	Find a sequence of strings in x .
2131	Get a column string .
2132	Find the index of a string at x .
2133	Convert a string to a string .
2134	Return a new column string with the given value .
2135	Pad a string in a column .
2136	Return a column string with repeat times .
2137	Remove sub from a string .
2138	Find the index of a string .
2139	Create a column string .
2140	Convert a string into a column string .
2141	Slice a string into a slice .
2142	Strip string from x .
2143	Return the title of x .
2144	Convert a string to the lower case .
2145	Get the autotype of an array .
2146	Convert this array into a numpy array .
2147	Store properties in a file .
2148	Write a comment .
2149	Write a property .
2150	Iterate over properties in a file .
2151	A generator that yields lines from a file - like object .
2152	Show the installed versions .
2153	Rename a keyword argument .
2154	Set the FFT library
2155	Run the beat track .
2156	Adjust the pitch correction of an audio file .
2157	Convert frames to samples .
2158	Convert samples to frames .
2159	Convert time to frames
2160	Convert midi to note
2161	Convert a hz to a mz .
2162	Convert a set of mel data to the given position .
2163	Return the frequencies of the FFT
2164	r Calculate the cqt frequencies
2165	Get the frequencies of the mel band .
2166	Computes the weights for a given frequency .
2167	Compute the times - likelihood of the data .
2168	Returns the samples of the given array .
2169	r Calculate the CQT function for the given data .
2170	Compute the pseudo - cqt basis .
2171	Compute the CQT .
2172	Apply a CQt filter to the specified window .
2173	Trim the current stack at the given number of bins
2174	Compute the response energy for the given data .
2175	Calculate the number of downsample count2 .
2176	Resample the given signal to the given length .
2177	Calculate the cost for a given time series .
2178	This function is called when the start point is done .
2179	Compute the Viterbi of a state distribution .
2180	Discriminative transition matrix .
2181	Return a uniform transition matrix .
2182	Create a transition loop .
2183	Given a set of states return a state cycle .
2184	 transition from a window to a given window .
2185	Detect the onset strength for the given position .
2186	Compute the onset strength for a given time series .
2187	Given a set of events return a list of events that match the given events .
2188	r Calculate the onset strength for multiple samples .
2189	Write times to CSV file .
2190	Write a wav file .
2191	Create a colormap .
2192	Plot a waveplot .
2193	Set current image
2194	Given a list of coordinates return a dictionary of coordinates .
2195	Check that the given axes is valid .
2196	Scale axes .
2197	Calculate the magnitude of the FFT bins for the input bins .
2198	Calculate the basis for the given position n .
2199	Return the cqt frequencies for the given CQT .
2200	Return the radius of the mass of the given number .
2201	Convert n frames to time .
2202	Estimate the pitch of the given frequency .
2203	Calculate the piptrack of an audio time series .
2204	Decompose the STFTs into an harmonic matrix .
2205	Calculates the harmonic of the given data .
2206	Given a set of stfts and a set of parameters return the number of stFTs .
2207	Create a time stretch .
2208	Calculate the pitch shift for a given time .
2209	Remix an audio buffer .
2210	Convert a signal to a frame .
2211	Trim the frame and end positions .
2212	Split the data into a single interval .
2213	Apply phase forward logic .
2214	Calculate the amplitude of a given phase .
2215	Compute a magnitude spectrogram .
2216	Performs the beat track on a file .
2217	Combines the components of S .
2218	Filter the indices of the model s .
2219	Helper function to filter the recurrence matrix .
2220	Compute the ral frequencies of the given FFT .
2221	Calculate the chroma of an image .
2222	A function that returns a float window .
2223	Compute the constant q .
2224	r Compute the lengths of a constant q .
2225	Convert a CQ array to a given window .
2226	Calculate the bandwidth of a window
2227	Helper function to get a window .
2228	A multirate filter .
2229	Return sample frequencies
2230	Fills the window at x .
2231	Compute the sum squared of a window .
2232	Compute diagonal filter .
2233	r Calculates the spectral centroid of a bin .
2234	Compute the spectral rolloff .
2235	Compute the spectral flatness of a window .
2236	r Calculate the polynomial features .
2237	Compute the zero crossing rate for the given frame .
2238	Calculate the density of the stFT .
2239	r Calculates the chroma of the CQT .
2240	Returns a Melpectrogram .
2241	Return the intersection between two segments .
2242	Match a set of candidates .
2243	Match intervals from a list of intervals .
2244	Match a list of intervals .
2245	Match a list of events .
2246	Evaluates a frequency frequency frequency matrix .
2247	Interpolate harmonics .
2248	Compute the harmonics of a 2D array .
2249	Compute the harmonics using a 2D matrix .
2250	Load a sound file .
2251	Load audio file .
2252	Convert to mono .
2253	Resample an audio buffer .
2254	Integrate a time domain .
2255	Return the LPC for the given order .
2256	r Calculates the clicks of the audio buffer .
2257	Calculate the tone of a frequency .
2258	r Calculates the chirp signal .
2259	Get all files in a directory .
2260	Scale audio to input file .
2261	Process arguments .
2262	Load the audio file .
2263	Create a beat track .
2264	Create a beat tracker for the given onset .
2265	Compute the beat local score .
2266	Given a local score and a period and a period return the cumulative distance for that score .
2267	Returns the last beat of the given cumulative score .
2268	Convert a recurrence matrix to a lag matrix .
2269	Convert a lag to the recurrence
2270	Apply a filter to time - lag space .
2271	Subsegment a list of frames .
2272	Perform a clustering on the data .
2273	Apply a path to an image .
2274	Detect onsets onsets .
2275	Compute the number of frames in a numpy array .
2276	Validate that the input data is valid .
2277	Check if x is a valid integer .
2278	Pad data with padding
2279	Sort a 2D array .
2280	Normalizes a matrix .
2281	Calculate the maximum of x .
2282	Calculate the peak pick .
2283	Convert rows to sparse matrix .
2284	Roll a sparse matrix .
2285	Convert a numpy array to a float .
2286	Convert an index to a slice .
2287	Sync data by index .
2288	Compute the soft mask of X .
2289	Return a tiny array of x .
2290	convert frames to video
2291	Read the current image .
2292	Get a single frame .
2293	convert frame to frames
2294	Create a progress bar .
2295	Track a parallel progress bar .
2296	Flip an image .
2297	Rotate an image .
2298	Clip bounding box with image shape .
2299	Calculate bounding box scaling .
2300	Crop the image .
2301	Pad an image with the given shape .
2302	Convert image to multiple dimensions .
2303	Return the scale size
2304	Resize an image .
2305	Resize an image .
2306	Scale an image to a given scale .
2307	Register a handler .
2308	Return the priority value for the given priority .
2309	De quantize an array .
2310	Show an image .
2311	Show a list of bounding boxes .
2312	Read flow from a file .
2313	Write a flow to a file .
2314	De quantize a single flow .
2315	Load the state_dict from a module .
2316	Load checkpoint from file .
2317	Convert state dict to CPU
2318	Save model to disk .
2319	Initialize the optimizer
2320	Initialize the logger .
2321	A list of the current optimizer parameters .
2322	Register a new hook .
2323	Run the workflow .
2324	Register all training hooks .
2325	Convert video to output file .
2326	Resize a video .
2327	Cut a video .
2328	Concatenate a list of video files .
2329	Read a list from a file .
2330	Read a dictionary from a file .
2331	r Conv2d convolution .
2332	Create an object from a dict .
2333	Read image from image or file .
2334	Decode an image from bytes .
2335	Write an image
2336	Convert image to grayscale .
2337	Convert a grayscale image to RGB .
2338	Return an iterator over the input type .
2339	Check if a sequence is a sequence of expected types .
2340	Split a list into a list of indices .
2341	Decorator to check prerequisites that are required .
2342	Compute the average of the history .
2343	Plot the given input .
2344	Return the value of a given color .
2345	Check the time of a timer .
2346	Start the stream .
2347	Return the time of the timer .
2348	Return the last time of the timer .
2349	Show a flow .
2350	Convert flow to RGB
2351	Make color wheel .
2352	Calculate the accuracy of the target .
2353	Apply scattering of input inputs .
2354	Make a scatter of inputs and kwargs .
2355	Fetch data from the server .
2356	Get the JSON from AWS .
2357	Return string representation of AWS .
2358	Handle callback .
2359	Perform multiple requests .
2360	Make a request .
2361	Start the master
2362	Normalize task v2 .
2363	Parse a YAML file into a dictionary .
2364	Return wheel distribution name .
2365	Get archive basename .
2366	Add requirements for setup .
2367	Convert an egg - info file to a distribution .
2368	Returns an Activity with the given text .
2369	Converts a list of actions into an Activity .
2370	Returns an attachment for an attachment .
2371	Returns a list of attachments .
2372	Returns an attachment .
2373	Create a trace object .
2374	Set the telemetry client .
2375	Read data from the database .
2376	Write changes to the database .
2377	Delete a document .
2378	Create a storeItem from the result .
2379	Helper function to create a dictionary from an object .
2380	Sanitize a key .
2381	Create database and container .
2382	Get or create a database .
2383	Get or create a container .
2384	Fills a Qna event .
2385	Create a conversation reference for an activity .
2386	Get the name of the step .
2387	Returns True if the user can be displayed on a channel .
2388	Returns True if the button is within a card .
2389	Get the channel id for a turn context .
2390	Return True if the token is a valid emulator token .
2391	Creates a HeroCard attachment .
2392	Get the parameters of this instruction .
2393	Mirror this definition .
2394	Inverse of this gate .
2395	Set a classical register .
2396	Return a copy of this object .
2397	Return string if string is not None
2398	Return the string representation of the expression .
2399	Run a circuit .
2400	Perform an pass on a DAG .
2401	Return a list of all the passes in the working list .
2402	Return a dictionary containing all of the decorated arguments .
2403	Constructs the controller factory .
2404	Compute U base .
2405	Get parameters for a single gate .
2406	Return a single gate matrix .
2407	Computes the multiplication of the gate indices .
2408	Multiply the gate indices .
2409	Helper function for M - qubit multiplication .
2410	Convert a circuit to a DAG circuit .
2411	Compute the exp - fit function .
2412	Function to fit a function .
2413	Plot coherence .
2414	Computes the mean mean and mean mean of the shape of a file .
2415	Plot the RDS data .
2416	Split a list of runs on parameters .
2417	Compose u3 .
2418	Convert yzy coordinates to zzyz angles .
2419	Validate the input .
2420	Trim the image .
2421	Get the span of a gate .
2422	Convert a circuit to an instruction .
2423	Run the objective function .
2424	Return the best subset of the node .
2425	Return a barrier instance with the given arguments .
2426	Calculate the average of the data in a dictionary .
2427	Return the id of the given node .
2428	Process a custom unitary node .
2429	Process a gate .
2430	Check if node is not .
2431	Process a measure .
2432	Process if node is node
2433	Create an op for the DAG .
2434	Return the number of timeslots in a list of channels .
2435	The number of timeslots in a list of channels .
2436	The number of timeslots in a list of channels .
2437	Yield instructions from the current node .
2438	Check if value is a valid type .
2439	Dump additional data .
2440	Load additional data .
2441	Create a validation schema .
2442	Validate the schema
2443	Decorator for validating a model method .
2444	Convert the model to a dictionary .
2445	Initialize a model from a dictionary .
2446	Calculate the grams of n times
2447	Return a partial trace vector .
2448	Vectorize a density matrix .
2449	De vectorize a vector .
2450	Convert a list of qubits into a rauli matrix .
2451	Turn an array into an array .
2452	Compute the inner product of two vectors .
2453	Concurrence state .
2454	Calculates the shannon entropy of pvec .
2455	Calculate the entropy of a state
2456	Computes the mutual information of a state .
2457	Calculates the entanglement of a state .
2458	Calculate the EOF qubit .
2459	Flatten a schedule .
2460	Shift a schedule by name .
2461	Create a schedule with the given name .
2462	Append a schedule to the given name .
2463	Create a new U3 gate .
2464	Return the status of the backend .
2465	Start the simulation .
2466	Return a string representing the time of the completed iterator .
2467	Disassemble the given qobj .
2468	Calculates the hamming distance between two strings .
2469	Create a quaternion from an axis .
2470	Create a quaternion object from an Euler order .
2471	Normalize the quaternion .
2472	Convert this matrix to a matrix .
2473	Return an euler representation of the matrix .
2474	Process data .
2475	Generate a histogram .
2476	Check the type of the instruction .
2477	Check that a range is in range .
2478	Check if a matrix is a square matrix .
2479	Checks if a matrix is a diagonal matrix .
2480	Returns True if op is symmetric matrix .
2481	Checks if a matrix is ahermitian matrix .
2482	Check if a matrix is a positive matrix .
2483	Checks if a matrix is an identity matrix .
2484	Checks if a matrix is a unitary matrix .
2485	Helper function to create KrausChannel objects
2486	Create a superop from data
2487	Convert data into a Kraus object .
2488	Convert a Chi representation to a Chi representation .
2489	Convert a TM representation to a TM representation .
2490	Helper function to create a kraus object .
2491	Convert an operator into a Kraus operator
2492	Initialize an operator from an operator .
2493	Return an operator representation .
2494	Shuffle the data .
2495	Shuffle data .
2496	Convert a Kraus matrix to a Kraus matrix .
2497	Convert data to Kraus representation .
2498	Create a kraus object from a data dictionary .
2499	Return stines from input data .
2500	Helper function to convert the kraus data to a tuple .
2501	Converts the kraus data to a superraus operator .
2502	Convert a chi_dim to the given output dimension .
2503	converts the input_dim to the chi gate
2504	Resample two matrices .
2505	Transform data into the basis matrix .
2506	Check that the input_dim is a n - qubit channel .
2507	Hide the tick lines and labels .
2508	Set the label of the ket
2509	Clears all points
2510	Add a list of vectors .
2511	Add an annotation .
2512	Render the image .
2513	Plot the front .
2514	Show the figure .
2515	Compute the two qubit kak matrix .
2516	Center of the top layer .
2517	Return the mid content .
2518	Center the bot .
2519	The length of the bot .
2520	Return the parameters for the instruction .
2521	Return a label for the given instruction .
2522	Return a LaTeX representation of this parameter .
2523	Compiles the given circuit with the given configuration .
2524	Filter deprecation warnings .
2525	Get local hardware information .
2526	Check if the given hostname has a connection .
2527	Check the status of a job .
2528	Return the constant of the given times .
2529	Return the square of the given times .
2530	Return a triangle in a triangle .
2531	Calculate the angle between two times .
2532	Fix a gaussian width to the center .
2533	Create a gaussian from a set of times .
2534	Calculate the derivative of a gaussian .
2535	Create a gaussian square .
2536	Default pass manager .
2537	Create a PassManager instance with default pass manager .
2538	Returns True if the given register has been set .
2539	Mirror this node
2540	Inverse of self .
2541	Append an instruction to the graph .
2542	Register an instruction .
2543	Adds a set of registers .
2544	Check that qubits are duplicate .
2545	Check if qargs are valid .
2546	Check that the arguments are valid .
2547	Check if the input rhs is compatible .
2548	Returns a string representation of the instruction .
2549	Draws this circuit .
2550	Return the size of the device .
2551	Returns the width of the terminal .
2552	Return a dictionary of the number of ops .
2553	Return the number of connected components .
2554	Bind parameters to a circuit .
2555	Bind a parameter to the table .
2556	Draws a pulse drawer using matplotlib .
2557	Helper function to search the forward n swaps .
2558	Map qubits to a free map .
2559	Calculate the distance between all gates .
2560	Return the number of gates in the step .
2561	Return the metadata for a DAG .
2562	Transform gate for given layout .
2563	Swap operations from an edge .
2564	Run the coupling graph .
2565	Adds a physical qubit to the graph .
2566	Add an edge to the graph .
2567	Returns a subgraph of the given nodes .
2568	List of the physical qubits in this graph .
2569	Return True if the graph is connected .
2570	Compute the distance matrix .
2571	Returns the distance between the specified physical qubit .
2572	Transpile a circuit .
2573	Add a Cu1 gate .
2574	Inverse of the instruction .
2575	Perform the q_if operation .
2576	Return a C_if instruction .
2577	Subscribe to an event .
2578	Dispatch an event .
2579	Unsubscribe from an event .
2580	Publish an event .
2581	Initialize the circuit .
2582	Define the circuit .
2583	Uncompute all gates in the LSB .
2584	Calculate the angle of a pair of complex vectors .
2585	Construct a circuit for multiplexing .
2586	Check if value is virtual .
2587	Return a copy of the layout .
2588	Combine this layout into another layout .
2589	Create a new Toffoli gate .
2590	Insert a schedule into this component .
2591	Check if the object has a fenced property .
2592	Convert gates to indices .
2593	Run the node in the DAG .
2594	Update the layer with one layer .
2595	Group an Pauli operator by number_of_ qubits .
2596	Create a Muli instance from a label .
2597	Initialize self from a boolean vector .
2598	Compute the product of a Pauli phase .
2599	Convert this operator to an operator .
2600	Convert this circuit to an instruction .
2601	Update the z with the given indices .
2602	Update the variable with the given indices .
2603	Insert a Pauli expression into the model .
2604	Append a paulis object to the list .
2605	Deletes the specified qubits .
2606	Return a random vector .
2607	Create a Pauli .
2608	Returns the outcome of a qubit .
2609	Add a sample measure .
2610	Add instruction measure .
2611	Set the state of a qubit .
2612	Validate the initial state vector .
2613	Initialize the state vector .
2614	Get the state vector .
2615	Check if the current measure sampling is valid .
2616	Run this job .
2617	Run a job .
2618	Validate the given qobj .
2619	Validate the initial unitary .
2620	Initialize the unitary matrix .
2621	Return the unitary of the qubit .
2622	Run a job .
2623	Validate the given qobj .
2624	Check if an object is a bit .
2625	Run the graph on the DAG .
2626	Check if this interval has overlap .
2627	Shifts the given time .
2628	Shift the given time .
2629	Return the number of channels in a list of channels .
2630	Return the number of channels in a list of channels .
2631	Checks if the given time slot is mergeable with the given timeslots .
2632	Return a new TimeslotCollection with the given timeslots .
2633	Return a new Time slot from the given time .
2634	Report an issue .
2635	Convert data to a dictionary .
2636	Function to plot the state of an IPlot state
2637	Create a Rzz gate .
2638	Swap the given gate .
2639	Initialize the backend property .
2640	Create a program graph .
2641	Select next edge .
2642	Given a list of gate cost returns the closest qubit cost .
2643	Select the best left - qubit .
2644	Run the program .
2645	Return a list of instruction objects .
2646	Return the inverse flag .
2647	Return the q_if for each gate .
2648	Return the c_if instruction .
2649	Checks if the data is a unitary matrix .
2650	The conjugate operator .
2651	Transpose the operator .
2652	Return the power of the operator .
2653	Shape of the output dimensions .
2654	Convert an instruction to an operator .
2655	Update the state of the map with the given layer .
2656	Convert a bitstring to a string that can be used in creg_ sizes .
2657	Convert the given memory to the formatted format .
2658	Convert a list of memory values to a string .
2659	Return a list of strings with counts of the given level .
2660	Format counts as a dictionary .
2661	Format a state vector .
2662	Format a complex matrix .
2663	Ensures that the job is submitted .
2664	Submit the job .
2665	Return the status of this job .
2666	Checks if the given frequency contains a given lo_freq .
2667	Generate an IPlot - multlot .
2668	Given a user_lo config return a list of qubits .
2669	Get the default measurements for this user .
2670	Run the DAG .
2671	Return the state of a q sphere .
2672	Return the number of k values for the given k .
2673	Return the token index of a list .
2674	Plot the state of a state .
2675	Returns a list of available backends .
2676	Return the op node .
2677	Draw a constant at the given duration .
2678	Takes a duration and returns a sample with zero .
2679	Draw a square .
2680	Create a sampleulse with the given duration .
2681	Draw a triangle over a triangle .
2682	Return a sample of a waveform .
2683	Draw a waveform in a phase .
2684	Draw a sample of a Gaussian .
2685	Return the derivative of a sample pulse .
2686	Draw a sample of a gaussian square .
2687	Return the distance between two axes .
2688	Write the tree to a string .
2689	Get backend instance .
2690	Rename a register .
2691	Remove all operations that are named .
2692	Add the given register .
2693	Add a new register .
2694	Add a wire to the graph .
2695	Verify that the given c reg exists .
2696	Return all bits in a condition .
2697	Add an operation node to the graph .
2698	Apply an operation back to the graph .
2699	Check if edge_map is valid .
2700	Check the validity of a wire map .
2701	Map a condition to the wire map .
2702	Add the edge map to the graph .
2703	Compose the given circuit .
2704	Check whether the given node is a list of wires .
2705	Given a node and a node return a mapping of edges .
2706	Compute the full result map for the given input circuit .
2707	Return the topological nodes .
2708	Iterate over all edges in the multi - graph .
2709	Return a list of all nodes of the multi - graph .
2710	Return the nodes of the gate .
2711	Return a list of nodes with the given names .
2712	Return a list of twoQ gates .
2713	Return the predecessors of a node .
2714	Return the predecessors of the given node .
2715	Get the ancestors of a DAG .
2716	Return the successors of the given node .
2717	Remove an op node .
2718	Remove ancestors of a node .
2719	Remove descendants of a node .
2720	Remove non ancestors of a node .
2721	Remove all descendants of a node .
2722	Return a copy of the DAG .
2723	Return a DAG of the nodes in the graph .
2724	Return a list of multiedges layers in the input map .
2725	Collect all the runs in the graph .
2726	Yield nodes on the given wire .
2727	Count the number of operations in the graph .
2728	Return a dictionary of properties .
2729	Convert a basis set into a Tomography basis .
2730	This function is called when the Pauli basis is used .
2731	Create a set of measurements .
2732	Return a tomography set from the given qubits .
2733	Create a quantum circuit with the given circuit .
2734	Returns the data for the given results .
2735	Get the marginal counts for each qubits .
2736	Fit tomo data .
2737	Fit the data tomo_data .
2738	Compute the projector of a basis list .
2739	Compute the linear inversion of a matrix .
2740	r Calculates the equation of a coefficient .
2741	Compute the wigner data .
2742	Run the gate on the given circuit .
2743	Check the status of a job .
2744	Run a job .
2745	r Compute the euler angles between two qubits .
2746	Simplify U3 gate .
2747	Run this node .
2748	Generate a table of qubits .
2749	Build job history .
2750	Plot jobs history .
2751	Draws the waveform with the given duration .
2752	Create a new gate .
2753	Build Bell circuit .
2754	Constructs the transpile job .
2755	Run a circuit .
2756	Execute the given experiments .
2757	The drive channel .
2758	The control channel .
2759	The measure of the measurement .
2760	Acquire a new channel .
2761	r Calculates the input state of the network .
2762	Assemble an experiment .
2763	Remove all handlers that are removed from the q loader .
2764	Function to plot the state of an IPlot state
2765	Process a CPTP matrix .
2766	Process input .
2767	Pop the stack .
2768	Push a lexer to the stack .
2769	Run the DAG .
2770	Return the bound method for an instruction .
2771	Convert a acquire option .
2772	Convert a frame change .
2773	Convert a persistent value .
2774	Convert a drive instruction .
2775	Convert snapshot to Qobj model .
2776	Update the annotations for a function .
2777	Decorate a sampler function .
2778	Filter backends .
2779	Resolve a backend name .
2780	Convert a DAG to a circuit .
2781	Make a dictionary observable .
2782	Update the name of an object
2783	Verify that a bit is declared in the gate .
2784	Verify that the expression is a tad expression
2785	Verify that a gate is a gate
2786	Verify a register
2787	Verify that the given object is a bitlist .
2788	Find the column in the input .
2789	Parse debug value .
2790	Parse the given data .
2791	Parse the given data .
2792	Parse the QASM file .
2793	Add a crz gate .
2794	Return the state of a basis set .
2795	Compute the projector density matrix .
2796	Return the purity of a state
2797	Run the com mutation on the DAG .
2798	Create a widget for the backend .
2799	Update backend information .
2800	Generate jobs pending widget
2801	Run the CWL on the graph .
2802	Get the backend .
2803	The shape of the tensor .
2804	Get all register names .
2805	Truncate float .
2806	Build a latex file .
2807	Get the depth of the image .
2808	Get the beamer page
2809	Load a schema from a JSON file .
2810	Get a validator by name .
2811	Load schemas and validators .
2812	Validate JSON against a schema .
2813	Format an error message for debugging .
2814	This is the same as the most efficient way
2815	This function is used to be used to remove the old certificate .
2816	Generate a LaTeX source for a circuit .
2817	Draws a matplotlibDrawer .
2818	Random unitary operator .
2819	Return a random density matrix .
2820	Return a random matrix of the given size .
2821	Return random density matrix .
2822	Return random density .
2823	Returns a list of all the calls .
2824	Return the power of the input .
2825	Compose the subsystem dimension order .
2826	Convert an instruction to a SuperOp object .
2827	Run the DAG .
2828	Convert a QObject into a Qobj .
2829	Apply a DAG to the graph .
2830	Run the DAG on a DAG .
2831	Define the circuit .
2832	Check that the value is a valid type .
2833	Check if value is a valid type
2834	Sets the instance value .
2835	Sets the model s instances .
2836	Reshape the input_dims .
2837	The number of input dimensions .
2838	The list of output dimensions .
2839	Return a copy of the data .
2840	Returns the power of the given class n .
2841	Return the dimensions of the given dimensions .
2842	Multiply a tensor .
2843	Deserializes the value .
2844	Make sure the data is serialized .
2845	Check if value is a valid type
2846	r Compute the statefiity of two states .
2847	Compute the SVD of a function .
2848	Return the inverse of this snapshot .
2849	Set the label .
2850	Returns True if this operator is a unitary .
2851	Convert this operator to an operator .
2852	Convert this circuit to an instruction .
2853	Initialize the transformer for the input .
2854	Sort an enum by symbol name .
2855	Convert a datetime object to a patch object .
2856	Get the locale map for the given languages .
2857	Get all available locales .
2858	Check if all tokens are valid .
2859	Split string into tokens .
2860	Parse a date data string .
2861	Parse time string .
2862	Return True if the given date string matches the given date string .
2863	Translate a date string .
2864	Parse a date string into a dictionary .
2865	Returns a generator that will be used for the ammo .
2866	Return the version of the Java exception .
2867	Convert an exception to HTTP .
2868	Read the config file .
2869	Compose the config file
2870	Get information about the stream .
2871	Compose configuration .
2872	Log stdout and stderr .
2873	Expand time in string .
2874	Read the stepper wrapper .
2875	Prepare stepper .
2876	Generate the stPD filename
2877	Read the cached stepper info and return it .
2878	Write cached options to disk
2879	Make the stpd file .
2880	Create a new step
2881	Calculate the rps at the given time .
2882	Execute a command .
2883	Decode monitoring data .
2884	Make points for label
2885	Publish a status .
2886	Count the number of matched codes in a regex .
2887	Stop the queue .
2888	Feed the GTPD file
2889	Initialize the logging .
2890	Add user options
2891	Configure the core configuration
2892	Shutdown the process
2893	Collect data .
2894	Notify listeners of data .
2895	Get a marker by type .
2896	Parse a duration .
2897	Start the session .
2898	Start the agent .
2899	Discover the j meter port .
2900	Add the Jynamo components to the cluster
2901	Terminate the process .
2902	Read data from a list of lines .
2903	Creates the criterion for the given criterion .
2904	Parse the configuration file .
2905	Create the startup configuration file .
2906	Check for disk usage .
2907	Check the free memory .
2908	Get terminal size
2909	Get right line
2910	Truncate the text into a single string .
2911	Render the left panel .
2912	Render the screen .
2913	Add a widget to the list of info widgets .
2914	Fill the text of the screen .
2915	Return the length of the given line .
2916	Create a plan builder .
2917	Return the level string .
2918	Add a widget to the screen
2919	Make a writer request .
2920	Load all available plugins .
2921	Find the given plugin type .
2922	Search for a given plugin type .
2923	Collect a file .
2924	Add an artifact file to the registry .
2925	Create a temporary file .
2926	Load the given configuration files .
2927	Flush the file .
2928	Get all options from a section
2929	Find all sections with the given prefix .
2930	Decode stat data .
2931	Return info about the file .
2932	Prepare monitoring .
2933	Return the number of agents received .
2934	Send data to all registered listeners
2935	Detect the configuration .
2936	Process the data
2937	Decode agents data .
2938	Subscribe to a list of channels .
2939	Run the event loop .
2940	Close the polygon .
2941	Perform one request .
2942	Submit an order .
2943	Get an order by ID .
2944	Get the position of a symbol .
2945	Returns a list of assets for the given status .
2946	Get an Asset by symbol
2947	Create an ExecutionPlan .
2948	Check if an object is a dict .
2949	Validate a dict parameter .
2950	Constructs an event logger .
2951	Constructs a JSON event logger .
2952	Create a Config object from a file .
2953	Get the configuration of a repository .
2954	Format a GraphQL config file .
2955	Get a pipeline by name .
2956	Get all pipelines
2957	Get the next event from the given queue .
2958	Execute a pipeline through a pipeline .
2959	Wait for the pool to finish .
2960	Create a Field object that can be used to create a Dagster field .
2961	Build a ExecutionPlan .
2962	Build a pipeline input .
2963	Build a sub pipeline definition .
2964	Return the solid named name .
2965	Constructs publish commands .
2966	Release a version
2967	Create a pipeline context definition .
2968	Decorator to create input selector schema .
2969	Wrap a function to output a selector schema .
2970	Block the given text .
2971	Download file contents from S3 .
2972	Upload file to S3 .
2973	A context manager that checks if an error is raised .
2974	Create a new directory .
2975	A context manager for a user code manager .
2976	Create a new Dagster log object .
2977	Returns True if this step is successful .
2978	Returns True if this step is skipped .
2979	Return a dictionary with the transformed values .
2980	Return the value of the transformation .
2981	Return the failure data .
2982	Returns a dictionary that can be used to create a configuration dictionary .
2983	Check if the given config value is a valid dataset .
2984	Check if a config value is a valid table .
2985	Executes the core transform command .
2986	Decorate an existing type .
2987	Create a resource definition .
2988	Create an EventV2 event .
2989	Coerce an execution plan into a sorted dictionary .
2990	Return a dictionary of connection parameters .
2991	Create a new connection to the database .
2992	Create a Cursor instance .
2993	Close the connection .
2994	Create a model from a model dictionary .
2995	Convert value to python list
2996	Add a formfield to the model .
2997	Convert the model to a python object
2998	Apply related filters to the queryset .
2999	Compute the NFps of a set of sizes .
3000	Compute the NFPs of the given sizes .
3001	Compute best partitions .
3002	Compute optimal partitions .
3003	Calculate the c1 and C2 .
3004	Initialize slots .
3005	Return the number of bytes for this hash value .
3006	Serialize this buffer into a binary buffer .
3007	Deserialize a LeanMinHash object from a buffer .
3008	Update the hashfunc with the given b .
3009	Merge two minHash functions .
3010	Create a union of min hash functions .
3011	Index entries .
3012	Query the indexes at the given size .
3013	Compute the minimum hash of the input vector .
3014	Remove a key from the cache .
3015	Update the register b .
3016	Count the number of negative values .
3017	Merge this hyperLogLog with another .
3018	Clear the reg .
3019	Compute the score of the given model .
3020	Compute the mean of the covariance matrix .
3021	Return the sorted list of keys sorted by key .
3022	Return a set of keys with the given k .
3023	Close all stored keys .
3024	Return an ordered storage object .
3025	Return an ordered storage object .
3026	Return the user details .
3027	Add social login state
3028	Select text from the given text .
3029	Parse the scoped selector .
3030	Parse a statement .
3031	Parse the value .
3032	Advance a single line .
3033	Parse a configurable reference .
3034	Decorate an exception message and return it .
3035	Convert a string to markdown format .
3036	Create a new session .
3037	Ensures that the decorated function is a function .
3038	Decorate a function or class .
3039	Format a value .
3040	Clear the configuration .
3041	Bind a parameter to a configuration .
3042	Query the parameter for a given binding key .
3043	Check if a function has a parameter .
3044	Get the argument spec for the given function .
3045	Get the number of positional parameter names for a function .
3046	Get all positional parameter names .
3047	Returns a dictionary with the default values for the given function .
3048	Generate a new scope .
3049	Creates a configurable value .
3050	Return a string representation of a config string .
3051	Parse a config file into a dictionary .
3052	Register file reader .
3053	Parse a config file .
3054	Parse a list of config files and bindings .
3055	Parse a value .
3056	Finalize the build .
3057	Iterate over nested values .
3058	Iterate all references in config .
3059	Set a constant selector .
3060	Create a constant class from an enum .
3061	Return a list of selectors that match the given selector .
3062	Returns all matches that match the given selector .
3063	Returns a fully - qualified selector .
3064	Convert a search query to a string .
3065	Parse the retry - after response .
3066	Validate that the value is valid .
3067	Return the property description as a dictionary .
3068	Set the value .
3069	Get the thing at the given index .
3070	Initializes this instance .
3071	Set default headers .
3072	Prepares the request headers .
3073	Get a thing .
3074	Called when a message is received .
3075	Post a thing .
3076	Delete a thing .
3077	Start the server .
3078	Return the action description .
3079	Start the task .
3080	Finish the task .
3081	Return the event description as a dictionary .
3082	Get IP address .
3083	Return a list of all available addresses .
3084	set external update
3085	Notify the update of external update .
3086	Return the description of this thing as a dict .
3087	Sets the href prefix for this object .
3088	Returns a dictionary of properties
3089	Returns a list of action descriptions
3090	Returns a list of event descriptions
3091	Add a property .
3092	Remove a property .
3093	Returns the value of the given property
3094	Returns a dictionary of properties
3095	Set the value of a property
3096	Get the given action .
3097	Add an event .
3098	Add an available event .
3099	Perform an action .
3100	Remove an action .
3101	Add an action to the list of available actions .
3102	Remove a subscriber .
3103	Add a subscriber to the websocket .
3104	Remove an event subscriber .
3105	Notify the given property .
3106	Notify the given action .
3107	Notify the given event .
3108	Annotate the given annotations .
3109	Update the model with the given fields .
3110	Bulk insert rows .
3111	Insert one or more fields .
3112	Insert the given fields into the database .
3113	Build the insert compiler .
3114	Check if a field is magnitudeical field .
3115	Get the insert fields for the given kwargs .
3116	Called when a model is saved .
3117	Called when a model is deleted .
3118	Return True if the given fields are not None .
3119	Resolves the value of a HStoreValue .
3120	Return the SQL as SQL
3121	Return a copy of this model with the given relabels .
3122	Add a join condition to the join table .
3123	Check if the given field is a HStoreField .
3124	Insert a list of objects into this object .
3125	Creates the required table for the given field .
3126	Rename hstore required fields .
3127	Drops required fields for a table .
3128	Return a unique name for a constraint .
3129	Create SQL statement .
3130	Create a custom command .
3131	Return the backend class .
3132	Prepare the database .
3133	Prepare the value for the field .
3134	Return a representation of the statement .
3135	Return the query as SQL .
3136	Rewrite insert statement .
3137	Rewrite the insert update changes
3138	Rewrite a new insert statement
3139	Build a conflict target .
3140	Returns the field for the given field name .
3141	Format the field name .
3142	Format the value of the given field .
3143	Create a unique table for a given field
3144	Rename hstore unique values .
3145	Drops unique values for a field .
3146	Return a unique constraint name .
3147	Iterate over unique keys of a field .
3148	Add a condition to the list .
3149	Return the SQL for the query .
3150	Return the level of the tdist95 configuration .
3151	Calculates the variance of a pooled sample .
3152	Compute the t score of two samples .
3153	Check if two samples are significant .
3154	Sort a list of nodes .
3155	r Returns a generator that yields the number of dien permutations .
3156	Play a board .
3157	Select a new board .
3158	Move random playout to the board .
3159	Filter benchmarks .
3160	Expand benchmark name .
3161	Generate string table .
3162	Initialize benchmarks .
3163	Retrieves the domain .
3164	Fetch messages from the channel .
3165	Parse the raw post data .
3166	Get information about a user .
3167	Fetch a category .
3168	Get the number of entries for a given category .
3169	Setup command parser .
3170	Fetch items from_date
3171	Returns a response with all the bugs in the given date .
3172	Retrieve comments for a given bug id .
3173	Get the history of a given bug .
3174	Returns the attachments associated with the given bug ids .
3175	Get notes for an issue .
3176	Fetch merge requests from the client .
3177	Returns a list of merge notes .
3178	Get the merge versions
3179	Merge this repository .
3180	Merge this repository .
3181	Fetch all versions of a project .
3182	Merge a new version .
3183	Fetch notes for an item .
3184	Retrieve all emojis for a given item .
3185	Fetch items for a note .
3186	Calculate the time_to_ reset timestamp .
3187	Fetch paginated items from GitHub .
3188	Update rate limit .
3189	Setup command parser .
3190	Fetch the latest data from the given category .
3191	Get metadata id .
3192	Return the members of a conversation .
3193	Get the current channel information .
3194	Retrieve information about a user .
3195	Setup command parser .
3196	Return the timestamp of the metadata .
3197	Parse buglist .
3198	Return a generator of bug details .
3199	Parse a bug activity .
3200	Logs out the user .
3201	Gets the metadata for this type .
3202	Get buglist .
3203	Returns the list of bugs for the given bug ids .
3204	Returns the activity of the given bug .
3205	Fetch a category from to_date
3206	Fetch events from a group .
3207	Get all events in a group .
3208	Fetch comments for an event .
3209	Get all the VSVPS for a group .
3210	Fetch a question from the server .
3211	Fetch comments from question
3212	Build the question
3213	Fetch questions from the API .
3214	Fetch HTML question .
3215	Fetch comments .
3216	Parse the question container .
3217	Parse the answer information container .
3218	Parse the number of html pages .
3219	Parse the update info .
3220	Fetch items from a given category .
3221	Parse the reviews data
3222	Fetch Gerrit 1 .
3223	Get Gerrit version .
3224	Get the reviews for a given item .
3225	Get the next retrieve group item .
3226	Executes the given command .
3227	Execute a command from an archive .
3228	Execute a command using Gerrit .
3229	Setup command parser .
3230	Fetch data for an issue .
3231	Fetch attachments from an issue .
3232	Fetch messages from an issue .
3233	Fetch activities for an issue .
3234	Fetch user data .
3235	Get user information .
3236	Send an issue to the server .
3237	Fetch a collection from an issue .
3238	Returns the URL for the project .
3239	Fetch items from the server .
3240	Get all subscriptions for this group .
3241	Find the group id for the given group name .
3242	Perform a GET request
3243	Setup command parser .
3244	Generate a unique UUID .
3245	Fetch an archive .
3246	Fetch an archive from an archive .
3247	Find backends for a given top package .
3248	Fetch metadata for a given category .
3249	Fetch all items from an archive .
3250	Filter the data for the given item .
3251	Parse arguments .
3252	Add authentication arguments
3253	Set the command line arguments for the archive .
3254	Add command line arguments to the parser .
3255	Run the analysis .
3256	Initialize the archive manager .
3257	Return the timestamp of the metadata .
3258	Parse a MBox file .
3259	Fetch messages from a list of mailing_list .
3260	Copy a file from a mbox
3261	Validate the message .
3262	Convert dict to dict .
3263	Get a message by key .
3264	Fetch a category
3265	Fetch items from a repository .
3266	Parse git log file .
3267	Pre - init command .
3268	Setup command parser .
3269	Yield the last commit of the stream .
3270	Clone a git repository
3271	Return the number of objects in the git repository .
3272	Return True if the repository is the remote .
3273	Update git repository .
3274	Sync the git repository .
3275	Get git revision list .
3276	Log this repository .
3277	Show git show information .
3278	Fetch the version of the client .
3279	Returns a list of commits from the given packet .
3280	Update new references .
3281	Return a list of refs for this repository .
3282	Update git ref .
3283	Run a git command .
3284	Read the stderr of the subprocess .
3285	Run a git command .
3286	Fetch tweets .
3287	Fetch tweets from a specific category .
3288	Get a list of tweets for a query .
3289	Setup command parser .
3290	Fetch items from category
3291	Fetch data for given category .
3292	Parse the hits
3293	Fetch hits .
3294	Get the updated metadata for the given item .
3295	Get the metadata category .
3296	Fetch pull requests .
3297	Fetch repo info from the client .
3298	Get a list of reactions .
3299	Get all reactions for a given comment .
3300	Get a list of assignees
3301	Get the pull requested reviewers .
3302	Get the hashes for all pull commits
3303	Get all reactions for a given comment .
3304	Get user from client
3305	Get all the reactions for a given issue number .
3306	Get all issues for a given date .
3307	Fetch pulls for all issues in this repository .
3308	Get the repository for this repository .
3309	Fetch the requested reviewers
3310	Fetch all commits for a given pr number
3311	Get all reactions for a comment
3312	Get user by login
3313	Get user organizations .
3314	Get the rate limit for the given token .
3315	Get the rate limits for each token .
3316	Choose the best API token
3317	Check if the current token is used .
3318	Update the current rate limit .
3319	Initialize metadata for a given origin .
3320	Store data in the archive .
3321	Retrieve an entry .
3322	Create a new archive
3323	Generate a hashcode for a dict .
3324	Verify that the archive exists .
3325	Load metadata .
3326	Return the number of rows in a table .
3327	Create an archive .
3328	Remove an archive .
3329	Search for all archives in origin .
3330	Search all archive files in the given origin .
3331	Search for all files in the directory .
3332	Check if the file is a compressed file type .
3333	Generate a range of months from a given date .
3334	Convert a Message object to a dictionary .
3335	Remove invalid XML characters .
3336	Convert XML to dictionary .
3337	Yield issues from a JSON object .
3338	Get a list of issues .
3339	Adds an issue to this repository .
3340	Retrieve information about a user .
3341	Call a resource
3342	Fetch data .
3343	Fetch data from the repository .
3344	Get a repository for a repository .
3345	Map custom fields to custom fields .
3346	Filter a list of custom fields .
3347	Yield issues from a raw page .
3348	Fetch items from the API .
3349	Get all issues for a given date .
3350	Get comments for an issue
3351	Get the fields for this resource .
3352	Fetch the build
3353	Get a list of jobs .
3354	Get build information for a given job .
3355	Parse questions from raw page .
3356	Fetch questions from a given date .
3357	Setup the command parser .
3358	Fetch items from MediaWiki .
3359	Get the maximum date of the reviews .
3360	Get number of pages
3361	Get all pages .
3362	Get recent pages .
3363	Fetch a category
3364	Parse a JSON response into a generator .
3365	Return True if the message is in chats .
3366	Returns a list of updates .
3367	Fetch the articles for a given category .
3368	Add metadata for item .
3369	Parse a raw article .
3370	Fetch data from remote .
3371	Fetch an article .
3372	Fetch data from remote .
3373	Fetch data from an archive .
3374	Create an HTTP session .
3375	Setup the rate limit handler .
3376	Sleep for rate limit .
3377	Updates the rate limit
3378	Parse a supybot log file .
3379	Retrieve the archives for a given date .
3380	Returns a list of all supybot archives .
3381	Parse the stream .
3382	Parse a supybot timestamp .
3383	Parse a supybot message .
3384	Fetch items for given category .
3385	Parse the topics page .
3386	Get a single topic .
3387	Post a post .
3388	Fetch tasks from the given category .
3389	Return a generator of tasks from a JSON file .
3390	Return a generator of users from a JSON file .
3391	Iterate over all tasks in the database .
3392	Retrieve a list of transactions associated with this account .
3393	Returns a list of users with the given phids
3394	Returns a list of phids
3395	Perform a Conduit client .
3396	Generate metadata id
3397	Parse a JSON file into a summary .
3398	Get the contents of a resource .
3399	Get historical content .
3400	Parse the result .
3401	Get capabilities URL .
3402	Read capabilities .
3403	Reads an XML string .
3404	Parse the measurement result .
3405	Build the base URL .
3406	Get all the elements of a complex type .
3407	Construct a schema from a list of elements .
3408	Get the describe feature type URL .
3409	Run complex input with reference .
3410	Retrieve a movie list .
3411	Fetches a list of all the current TVs .
3412	Get a list of movies .
3413	Returns information about the specified id .
3414	Retrieves the alternative titles .
3415	Returns a list of credits .
3416	Get an external ids .
3417	Gets the keywords .
3418	Returns a list of recommendations .
3419	Gets the release dates for the given id .
3420	Get a list of releases .
3421	Retrieve translations .
3422	Get a list of similar movies .
3423	Get reviews .
3424	Returns a list of changes that have changed .
3425	Get all upcoming events .
3426	Fetches the currently playing audio .
3427	Get the popular data from the server .
3428	Fetches the top rated resource .
3429	Gets the account states for the account .
3430	Sets the rating for the user .
3431	Get a list of movie creds .
3432	Fetches a list of all credes for a user .
3433	Retrieves information about a credit .
3434	Get the API details .
3435	Get information about the server .
3436	List movies .
3437	Get information about this session .
3438	Get a list of watchlist objects .
3439	Create a new token .
3440	Validate token with login .
3441	Create a new session .
3442	Create a new guest session .
3443	Get a list of rated movies .
3444	Get the status of an item .
3445	Create a new list .
3446	Remove an item from the session .
3447	Clear a list .
3448	Returns a list of all the content rating for this project .
3449	Get a list of similar objects .
3450	Retrieves information about the current air .
3451	Retrieve information about a series .
3452	Get credits for a series
3453	Get a list of external ids .
3454	Retrieve information about a series .
3455	Get credits for a series
3456	Get a list of external IDs .
3457	Set attributes to a dictionary .
3458	Retrieve a movie .
3459	Get a collection .
3460	Returns a list of information about the current user .
3461	Get a specific person .
3462	Get information about the company .
3463	Get a specific keyword .
3464	Returns a list of values for multiple requests .
3465	Normalizes S .
3466	Count the number of references in a list of refs .
3467	Return a set of counts for the given ref .
3468	Calculate the FCC of x .
3469	Align source blocks to target_blocks .
3470	Get descriptors in a module .
3471	Register the given object as JSON .
3472	Register a new version .
3473	Print string s to stdout .
3474	Return True if the given description is a descriptor .
3475	Return the JSON representation of this object .
3476	The coordinate of the frame .
3477	Return the atomic A sphere i .
3478	The area of the surface .
3479	Initialize a molecule from a molecule .
3480	Convert a JSON object into a ConstDescriptor object .
3481	Fill missing values with missing values .
3482	Drop missing values .
3483	Return all the values in the dictionary .
3484	Return a dictionary representation of the object .
3485	Get the name of this descriptor .
3486	Log a list of calls .
3487	Lock a function .
3488	Print a progress message .
3489	Print a message .
3490	Raise an error .
3491	Get a temporary file .
3492	Set a temporary file .
3493	Clean temporary files .
3494	Return the fixed path .
3495	Returns a list of params for the given method .
3496	Merge the parameters of the option .
3497	Add options to the parser .
3498	Terminate the queue .
3499	Add a task to the queue .
3500	Join all the workers .
3501	Called when the task is completed .
3502	Get S3 keys from environment .
3503	Read s3 keys from command line .
3504	Read s3 keys from s3 config file .
3505	Initialize s3 keys .
3506	Connect to S3 .
3507	List the S3 buckets
3508	Run s3 walk on a given directory .
3509	Return a list of files in the local directory .
3510	Expand a source into a list .
3511	Upload a single file .
3512	Put files in source .
3513	Create a bucket .
3514	Update the privilege for the object .
3515	Print a list of files .
3516	Download a single file .
3517	Get files from source .
3518	Copy a single file .
3519	Copy files from source to target .
3520	Delete files in source .
3521	Return the relative path of the given directory .
3522	Sync files in source to target .
3523	Calculate the MD5 hash of a file .
3524	Get the md5 of the file .
3525	Create directory .
3526	Check if the given file exists .
3527	Return True if path matches the filter path .
3528	Recursively walk a list of objects .
3529	Check if the result is conditional .
3530	Get file privilege .
3531	Lookup a bucket .
3532	Read chunk from source .
3533	Upload a file to S3 .
3534	Verifies that the contents of the given object is valid .
3535	Write a single chunk to a file .
3536	Returns a copy of the given source .
3537	Runs this command .
3538	Validate that the given format is valid .
3539	Pretty print a list of objects .
3540	List all buckets
3541	Register a bucket .
3542	Add files to S3 .
3543	Get a file handler .
3544	Print files to S3 .
3545	Run dSync command .
3546	Handle files from source .
3547	Handler for source files .
3548	Delete a file handler .
3549	Handler for messages .
3550	Handles the total size .
3551	Match a date .
3552	Match a string to a regular expression .
3553	Match delta .
3554	Check if option value is valid .
3555	Discover gateways .
3556	Listen .
3557	Get data from hub
3558	Push data to the callbacks
3559	Return the key for this token .
3560	Report the exception handler .
3561	This function is used to include the request
3562	Ensure the log handler exists .
3563	Get a request object from the request stack .
3564	Initialize the agent .
3565	Decorator for lambda functions .
3566	Report a message .
3567	Get list of search items .
3568	Create a logger for the agent log file .
3569	Build person data .
3570	Add lambda context data .
3571	Add request data .
3572	Check if the frame is in the current root .
3573	Build the request data .
3574	Build server data .
3575	Build the payload .
3576	Main function .
3577	Compose Hangul character
3578	Decodes a letter and returns it .
3579	Check if the target string has a jong sung .
3580	Attach a word to the word .
3581	Return True if node is inside exception
3582	Check if the node is inside the Lambda node .
3583	Get all elements of node .
3584	Return True if the node is a builtin object .
3585	Return True if node is a super node .
3586	Check if the node is an error .
3587	Check if the node is a default argument .
3588	Return True if the node is a function decorator .
3589	Return True if the given frame is an ancestor name .
3590	Assigns the parent of the node .
3591	Decorator for checking messages .
3592	Collect fields from a format string .
3593	Get the argument from a call node .
3594	Return True if the given node has an exception .
3595	Raises an exception if the given type is a tuple .
3596	Check if a function is decorated with a property .
3597	Return True if func is decorated with qnames .
3598	Find if the given node has an exception .
3599	Check if a node is from a fallback block .
3600	Get all exception handlers for the given node .
3601	Return True if the given node has an exception .
3602	Check if a class is abstract .
3603	Try to infer the value of the given node .
3604	Get the type of a node .
3605	Return True if node is registered in single dispatch .
3606	Check if the node is postponed evaluation .
3607	Return a fully qualified name .
3608	Get the name of an import node .
3609	Return a string representation of the tree definitions .
3610	Create a graph from a file .
3611	Handle import nodes .
3612	Handle import from node .
3613	Check if the given node is an import position .
3614	Record an import node .
3615	Check if a module is a list of imports .
3616	Check if a relative import node is a relative import
3617	Add an imported module .
3618	Check for deprecated module .
3619	Check if the preferred module exists .
3620	Report external dependencies .
3621	Returns a dictionary with all the dependencies that are not in internal
3622	Get default options .
3623	Insert default options .
3624	Returns whether the given node is visible or not .
3625	Get callbacks for a node .
3626	Visit a node .
3627	Check that all checker parts are valid .
3628	Check if the function is called .
3629	Check whether the node is a boolean .
3630	Check if the given node is open .
3631	Add a message .
3632	Display the messages in a given layout .
3633	Get the title of the node .
3634	Set default options .
3635	Check if the given node is a node .
3636	Add a class diagram
3637	Get all ancestors of node .
3638	Get the node of the given class .
3639	Extract classes from the given class node .
3640	Leave a project .
3641	Add import from node .
3642	Create a class diagram .
3643	Return classDia definitions .
3644	Check if owner is ignored .
3645	Return a list of possible names for each node .
3646	Return True if the node has no member .
3647	Check if the given node has a parent of the given type .
3648	Return True if the given name is used in variadics .
3649	Return True if the given node is a variable type .
3650	Visit an attribute node .
3651	Visit an assignment node .
3652	Check if the function has a callable call .
3653	Handle a unary op .
3654	Iterate over the interfaces of a node .
3655	Build a project from a list of files .
3656	visit a package node
3657	Visitor for function definition .
3658	Visit the name of a variable .
3659	Handle assignment attribute types .
3660	Visit a import node .
3661	Process importfrom node .
3662	Compute the module for a context .
3663	Called when a module is imported .
3664	Get the ANSI escape code for a given style .
3665	Colorize a message with ANSI escape codes .
3666	Register the linter .
3667	Handle a message .
3668	Display the given layout .
3669	Handle message .
3670	Open the graph .
3671	Write a node .
3672	Write an edge .
3673	Check the format of the given node .
3674	Process a non - raw string token .
3675	Write a section .
3676	Add an evaluation section .
3677	Write table content .
3678	Default table content .
3679	Add a new message to the message definition .
3680	Register messages from checker .
3681	Register a message .
3682	Check if a message is valid .
3683	Raise an InvalidMessageError if there are two symbols .
3684	Raise an invalid message id .
3685	Return a list of message definitions .
3686	Get a string representation of a message .
3687	Print help message .
3688	List all the messages .
3689	Load documentation files .
3690	Return the number of CPU .
3691	Report the message stats .
3692	Replace sys . path with Python path .
3693	Load plugin modules .
3694	Load plugin configuration .
3695	Set an option .
3696	Register a checker .
3697	Disable the report .
3698	Enable Python 3 checker .
3699	Returns a list of all checkers .
3700	Returns a list of all checker names .
3701	Return a list of available checkers .
3702	Expand the given modules .
3703	Set the current module
3704	Check if the given AST node is valid .
3705	Report the evaluation .
3706	Show help message .
3707	Print full documentation .
3708	List messages .
3709	List all checker groups .
3710	Normalizes text .
3711	Get module and frame id from node .
3712	Safely decode a line .
3713	Return True if file pattern is in blacklist .
3714	Register plugins in a directory .
3715	Return a comment .
3716	Format option value .
3717	Format a section .
3718	Format options into an ini file .
3719	Insert a child .
3720	Append a child to the VNode .
3721	Return a list of the parents of this node .
3722	Format the given layout .
3723	Get the content of a table .
3724	Compute the content of the given layout .
3725	Collect block lines .
3726	Handle an ignored message .
3727	Register a report .
3728	Make a section from the report .
3729	Add stats to the database .
3730	Get the name of a decorator property .
3731	Returns the property for the given node
3732	Return True if return_node is an astroid .
3733	Return all possible exception types .
3734	Process a module .
3735	Process the given module .
3736	Process comments .
3737	Check if the statement is from a future import .
3738	Return True if the parent is in the parent branch .
3739	Returns the method for the given name .
3740	Given a infered node return a string .
3741	Detect the global scope .
3742	Return True if the name node is assigned to the given name node .
3743	Mark a node as consumed .
3744	Visit a global node .
3745	Check if we are in a class scope .
3746	Return True if the given scope has the same function name .
3747	Check that the unpacking of the given node is consistent .
3748	Check the metaclasses for the given node .
3749	Get all packages in a directory .
3750	Install package .
3751	Install this library .
3752	Report similarities in section .
3753	Parse the specified arguments .
3754	Append a stream to the stream .
3755	Returns a list of all the sims that have no duplicates .
3756	Display a list of sims .
3757	Find common two lines .
3758	Iterate over all the sims .
3759	Return an iterator over the stripped lines .
3760	Create a dictionary of lines that are not stripped .
3761	Check if a definition is equivalent to a call .
3762	Check if arg_b is a equality .
3763	Returns True if the original s default value has no parameters .
3764	Return the different parameters for the original method .
3765	Infer the result of the given node .
3766	Set the node s metadata .
3767	Visit a class definition .
3768	Check that the given node is consistent .
3769	Check if the given node is included .
3770	Return an astroid for a function definition .
3771	Check if the function is a super call .
3772	Leave function definition .
3773	Check if the node is in the scope .
3774	Check if the name is in the first attribute .
3775	Check if the given node is accessed .
3776	Check if the class is abstract .
3777	Check the signature of a method .
3778	Return True if node is an optional name parameter .
3779	Check if the body is raising .
3780	Check that the given node is bad .
3781	Visit a function or method .
3782	Display report id .
3783	Return True if node is a namedtuple .
3784	Return True if node is an enum class .
3785	Check if a node is a data class .
3786	Opens the file .
3787	Add one or more instance attributes .
3788	Leave the class definition .
3789	Handle if node .
3790	Check whether node is a boolean expression .
3791	Check for docstring .
3792	Format the given template .
3793	Return True if the token is trailing comma .
3794	Return True if node is the actual if node .
3795	Checks if the given node is assigned to the same value .
3796	Check if the node is inside the stop iteration
3797	Check if the exception is included in stop iteration .
3798	Check if a node has a next call .
3799	Check if the given node is a nested block .
3800	Return a mapping of types that have the types of types .
3801	Check if the node has the same type .
3802	Check the comparison node .
3803	Return True if node is and or not .
3804	Check if the given node is consistent .
3805	Check if the given node is completed .
3806	Return an astroid .
3807	Check if the graphviz output format is available .
3808	Run a project .
3809	Write all packages in a diagram .
3810	Write classes to a diagram .
3811	Set the printer for the file .
3812	Set the printer .
3813	Return True if this is a emitted version .
3814	Format the message description .
3815	Return environment dictionary .
3816	Lint a file .
3817	Run the python command .
3818	Get cycles from graph_dict .
3819	Return source string .
3820	Generate the graph .
3821	Format a section .
3822	Register a message with the given message .
3823	Disable a message .
3824	Enable a message .
3825	Return the symbol of a message .
3826	Check if a message is enabled .
3827	Add a single message .
3828	Print full documentation .
3829	Print checker documentation .
3830	Get the length of the indentation of a line .
3831	Given a list of lines return a string that can be used for indentation .
3832	Indent the line with the given index .
3833	Handle line start .
3834	Return a copy of the indentation level .
3835	Log indentation after a bracket .
3836	Return a statement that is inside a command line .
3837	Push a token at the given position .
3838	Add a new line .
3839	Check if a keyword is a bracket .
3840	Check if a type annotation is valid .
3841	Check if two tokens are equal .
3842	Check if the tokens are surrounded .
3843	Visitor for default node .
3844	Check for multiple statements .
3845	Check a list of lines .
3846	Check the indentation level of a string .
3847	Check if the given node is in an iterator .
3848	Return True if node is a conditional import .
3849	Visit a name .
3850	Visit a sub - instance node .
3851	Handle an attribute node .
3852	Process an exception block .
3853	Handle raise node .
3854	Find the path to the pylintrc file .
3855	Validate a value against the option dictionary .
3856	Expand default option value .
3857	Match a long option .
3858	Register an option provider .
3859	Set provider option .
3860	Set an option to the specified value .
3861	Generate a configuration file .
3862	Load the config file .
3863	Load command line configuration .
3864	Add a help section .
3865	Display the help for this command .
3866	Load all options from the config .
3867	Get option value .
3868	Get option definition .
3869	Yield all options by section .
3870	Check if a function is a method call .
3871	Return True if node is a complex format string .
3872	Visit the logging module .
3873	visit an import from node
3874	Add logging modules .
3875	Return True if the function is called .
3876	Check if the given format string is valid .
3877	Return True if node is in loop .
3878	Get the break loop node .
3879	Return True if the loop should be evaluated .
3880	Return a set of property classes .
3881	Determine the name of a function .
3882	Report stats by type .
3883	Check if a function is defined by a decorator .
3884	Return True if the call is one of the arguments .
3885	Visit a star - needs node .
3886	Check that the given node is not local .
3887	Check if the function is an astroid .
3888	Check if the node is a case - on - loop
3889	Check if node is in loop .
3890	Open the linter .
3891	Handle a pointless - statement node .
3892	Visit the lambda node .
3893	Add a assert node .
3894	visit a dictionary
3895	Check if a node is unreachable .
3896	Check if the given node is not in a Future .
3897	Check if the given node is a reversed sequence .
3898	Assert that the variable is a new variable .
3899	Check if the given name matches the given name .
3900	Check if the node has a docstring .
3901	Check if a literal value is a boolean .
3902	Add a subgraph to the graph .
3903	Parse a subgraph .
3904	Visit a module .
3905	Add a checker .
3906	Recursively walk an astroid .
3907	Add a relationship between two objects .
3908	Get a relationship from the given object .
3909	Get the attributes of a function .
3910	Return a list of the methods in the node .
3911	Add an object to the tree .
3912	Return a list of class names .
3913	A list of all the classes of this node .
3914	Return the class with the given name .
3915	Return a list of module names .
3916	Return the module with the given name .
3917	Get module by name .
3918	Add from a module .
3919	Delete the grant .
3920	Get the query of the database .
3921	Get a user .
3922	Get a query .
3923	Add a token to the database .
3924	Set the grant .
3925	Get a specific client .
3926	Prepare request .
3927	Initialize the extension .
3928	Return a remote app
3929	Make a request
3930	Generate an OAuth2 token .
3931	Handle an OAuth1 response .
3932	Handle OAuth2 response .
3933	Handle an authorized response .
3934	Decorator for authorized_response decorator .
3935	Hash a token .
3936	Make a client with the given token .
3937	Make a client .
3938	Context manager to set the insecure transport .
3939	Confirm authorization request .
3940	Decorator to create a request token handler .
3941	Get a client secret .
3942	Get the secret of a request .
3943	Get access token secret .
3944	Get realms for a client .
3945	Get realms of a request .
3946	Get the redirect URI for the given token .
3947	Get the RSA key for a request .
3948	Validate a client key .
3949	Validate a request token .
3950	Validate an access token .
3951	Validate a timestamp and nonce .
3952	Validate the redirect URI .
3953	Validate realms .
3954	Returns True if the given token is valid .
3955	Verify the request token .
3956	Verify the realms .
3957	Save an access token .
3958	Save a request token .
3959	Save the verifier to the request .
3960	Get error URI .
3961	Confirm authorization request .
3962	Verify a request .
3963	Get the client credentials from the request .
3964	Check if the client authentication is required .
3965	Authenticate a client .
3966	Authenticate a client .
3967	Get the original scopes for a refresh token .
3968	Confirm the given scopes .
3969	Returns the default redirect URI .
3970	Get default scopes .
3971	Invalidate the grant token for a client .
3972	Save an authorization code for a client .
3973	Save a bearer token .
3974	Validate an OAuth token .
3975	Validate a client .
3976	Validate the given code .
3977	Validate the grant type .
3978	Validate a refresh token .
3979	Validate the response type .
3980	Validate scopes .
3981	Validate a user .
3982	Revoke a token .
3983	Update the data for a QQ API request .
3984	Convert a dictionary of keys to string .
3985	Change weibo header .
3986	Register to an OAuth app .
3987	Create a new OAuth app .
3988	Extract parameters from the request .
3989	Convert text to bytes .
3990	Decode a base64 encoded string .
3991	Create a response object .
3992	Get cached clients .
3993	Add a remote app .
3994	Add a remote application .
3995	Check if the exception is valid .
3996	Check the success .
3997	Check the load privatekey callback .
3998	Try to load private key callback
3999	Check the load private key callback .
4000	Check to see if all iterations are revoked .
4001	Check that the X509_REVOKED_REVOKED_REVOKED is set .
4002	Create a certificate request .
4003	Create a new certificate .
4004	Make a decorator that can be called when a flag is set .
4005	Load verify locations .
4006	Set password callback .
4007	Use a certificate chain file .
4008	Use a certificate file .
4009	Use the given certificate .
4010	Add extra chain certificate .
4011	Use a private key file .
4012	Use a private key .
4013	Load a client ca file .
4014	Set the verify depth .
4015	Load a temporary certificate .
4016	Set the cipher list .
4017	Set client CA list .
4018	Add a client CA .
4019	Set the server name callback .
4020	Set the ROC use for the given profiles .
4021	Set a callback for NpnSelectHelper .
4022	Create a C string from the given types .
4023	Set a callback to be called by the AALPN select function .
4024	Set OCSP callback .
4025	Set OCSP server callback
4026	Set OCSP client callback
4027	Set the SSL context .
4028	Get the server name .
4029	Set an SSL host name .
4030	Read data from SSL .
4031	Receive data from the socket .
4032	Read data from bio file .
4033	Called when the SSL connection is received .
4034	Shutdown the connection .
4035	Get a list of the cipher names .
4036	Return a list of client ca names .
4037	Set the SSL shutdown state .
4038	Return a random value of the server .
4039	Generate a random client .
4040	Get the master key .
4041	Export a material .
4042	Return a Session object .
4043	Get the cipher name .
4044	Get the bits of the current cipher .
4045	Get the current cipher version .
4046	Return the protocol version name .
4047	Return the next protocol supported by SSL .
4048	Add a C string to the socket .
4049	Return a string representing the OpenPN proto for this SSL connection .
4050	Create new memory buffer .
4051	Convert bio to string .
4052	Set ASN1_TIME value .
4053	Get the ASN1 timestamp .
4054	Get the elliptic curve by name .
4055	Dump a public key in PEM format .
4056	Load a public key from a buffer .
4057	Sign data .
4058	Verify the signature of a certificate .
4059	Dump a CRL to a file .
4060	Return a cryptography key .
4061	Generate a new RSA key .
4062	Check the public key .
4063	Load elliptic curves .
4064	Get elliptic curves .
4065	Return an EC_KEY object .
4066	Returns the signed character of this object .
4067	Get the components of this object .
4068	Get the short name of the extension .
4069	Get the data from the extension .
4070	Return a cryptography certificate object .
4071	Set the public key of a certificate .
4072	Get the public key of this PKey .
4073	Get an X509Name object .
4074	Add an X509 extension .
4075	Returns a list of X509 extensions .
4076	Verify a PKey .
4077	Return a cryptography certificate object .
4078	Set the X509 version .
4079	Get the public key for this PKey .
4080	Set the key of a PKey .
4081	Sign a PKey .
4082	Get the signature algorithm for this object .
4083	Returns the digest of the given digest .
4084	Set the serial number .
4085	Get the serial number of the object .
4086	Returns the gmtime of the given amount .
4087	Returns the gmtime of the given amount .
4088	Check if the user has expired .
4089	Get the certificate name .
4090	Set the issuer of this certificate .
4091	Get the subject name .
4092	Sets the given subject .
4093	Add an X509 extension to this object .
4094	Get X509 extension .
4095	Add a certificate to the store .
4096	Add a certificate to the store .
4097	Set the value of the vfy parameter .
4098	Initialize the certificate .
4099	Return an exception object from the context .
4100	Verify the certificate .
4101	Set the serial number .
4102	Get the serial number of the connection .
4103	Set the reason for this certificate .
4104	Returns a string containing the reason of this certificate .
4105	Set the revocation date of the revocation request .
4106	Returns a cryptography object representing this certificate .
4107	Returns a tuple of revoked certificates .
4108	Get the X509 certificate .
4109	Signs a certificate .
4110	Export a certificate
4111	Get the type name of the object .
4112	Set the certificate certificates
4113	Export this certificate .
4114	Sign the given digest .
4115	Verify the key is valid .
4116	Generate the b64 encoded file .
4117	Get the public key .
4118	Set the key of the private key .
4119	Get a list of errors from the queue .
4120	Convert text to bytes .
4121	Return a function that prints a message .
4122	Get service metadata .
4123	Return a generator of issues for this board .
4124	Build the annotations for a card
4125	Get a list of boards .
4126	Get the list of lists of the specified board .
4127	Get a list of cards for a list .
4128	Get comments for a card .
4129	Return the API URL for the given path .
4130	Get the value of a link .
4131	convert field to dict
4132	Get issues from the client .
4133	Return a list of requirements for the given tag .
4134	Aggregate remote issues .
4135	Get a configuration value or default .
4136	Return a dictionary of all the templates .
4137	Check if the given configuration is valid .
4138	Return True if the given issue is included .
4139	Make a table from a grid
4140	Evaluate a password using an oracle .
4141	Get an integer value .
4142	Pull issues from the taskrc repository .
4143	Perform a GET request .
4144	Get a collection from the API .
4145	Find the UUID for the given issue .
4146	Merge a single field into a local task .
4147	Set the UDAS configuration for the given targets .
4148	Returns a dictionary with a list of string values from the sprint .
4149	Get the credentials for the user .
4150	Given a sequence of sequences and a list of sequences and a list of sequences and a list of sequences return a list of non - non - non - non - non - non - non - non - non - non - non - non - non - non - non - non - non - non - non - non - non - non - non - non - non - non - non - non - non - non - non - non - non - non - non - non - non - non - non - non - non - non - non - non - non - non - non - non - non - non - non - non -
4151	Calculate p values for a query .
4152	Perform GOA analysis .
4153	The z - score of the data .
4154	Plot a heatmap .
4155	Adjust spines in the axes .
4156	Prepares an argument parser .
4157	Adds a parser to the prerank tool .
4158	Adds a parser to the command line parser .
4159	Adds a parser to subparsers to help for GO analysis .
4160	Compute enrichment score for a given gene list .
4161	Rank a metric tensor .
4162	Compute the ranking of each column .
4163	Compute the p - value for a given expression .
4164	r Compute the p - values of the enrichment scores .
4165	Get all marts
4166	Get a list of datasets .
4167	Get the attributes of a dataset .
4168	Get the filters for this dataset .
4169	Perform Biomart query .
4170	Create a GSEA .
4171	Create a single sample GSEA .
4172	Cerank a gene set .
4173	Replot indir .
4174	Set the cores for the user input .
4175	Load gene sets from a dictionary .
4176	Returns a list of library statistics
4177	Download and download the gene sets
4178	Create the heatmat .
4179	Save the gseale results .
4180	Load gene expression data .
4181	Run GSEA
4182	Run GSEA
4183	Run a sample for each sample .
4184	Run samples on a DataFrame .
4185	Save results to a csv file
4186	Run GSEA .
4187	Create a Enrichr file .
4188	Parse gene sets .
4189	Parse gene lists or bed files .
4190	Send a job to gene list .
4191	Check whether a gene is valid .
4192	Get a set of background genes .
4193	Run Enrichr server
4194	Create a cube
4195	Create an icosphere script .
4196	Create a torus script .
4197	Generate a grid of edges for a plane .
4198	Create a cube Helres .
4199	Get color values from the script
4200	Check if var is a list of terms .
4201	Make a list of variables
4202	Write a filter script .
4203	Create an XML for a 33 loop .
4204	Merges an openvert script .
4205	Return a description of the holes .
4206	Given a nonmanifold face return the filter .
4207	Write a filter to a snapshot that can be ignored .
4208	Translate a script to a given value .
4209	Rotate a script .
4210	Scale a script .
4211	This function is used to calculate the co - co .
4212	Wraps a rectangular script to a cylinder .
4213	This function is used to create a bend script .
4214	Convert a function into a curve .
4215	Convert a CNV to a texture .
4216	Convert a mesh to a CFC file .
4217	Create a uniform resample script .
4218	Generate a screened script .
4219	Draw a Voronoi script .
4220	Get all images
4221	Write the vertex quality .
4222	Write a face function .
4223	Write a mesh function to the given script .
4224	Invert a cylindrical script to a radius
4225	This function is used to calculate the symmetry of a script .
4226	Join a script .
4227	Rename a mesh .
4228	Change the current layer .
4229	Duplicate a layer .
4230	Delete the lower layer .
4231	Handle an error .
4232	Start the filter script .
4233	Add a layer to the stack .
4234	Delete a layer .
4235	Save a script to a file .
4236	Run a script .
4237	This is the main function .
4238	This function is used to generate the Vusdorff distance .
4239	Create a Poisson disk .
4240	Write a mesh element .
4241	Create a cluster sampling script .
4242	Create a flat plane .
4243	This function is called when a triangle contains a triangle .
4244	Run a Voronoi script .
4245	Compute the filter topology .
4246	Parse a topology file .
4247	Parse the hausdorff distance .
4248	Convert a function into an XML string .
4249	Write a Voronoi mesh to the script .
4250	This function is used to generate a linear phase .
4251	converts a angle to an angle
4252	Compute the cross product of the v .
4253	Multiply two vectors .
4254	Create a face attribute .
4255	Flip the given script .
4256	Generate a list of point sets .
4257	Write the Tain script .
4258	Process a depth script .
4259	return a list of polyline segments
4260	Measure topology .
4261	Measure all the results of a file .
4262	Measure dimension of a file .
4263	Convert filename to lowercase .
4264	Patch request class .
4265	Create a config object for a set .
4266	Configure uploads .
4267	The configuration of this upload .
4268	Return the url of an uploaded file .
4269	Get the path to a file .
4270	Return True if extension is allowed .
4271	Resolves a conflict on target_folder .
4272	Get the version information for the given file .
4273	Remove duplicates from a list of objects .
4274	Returns the difference between two objects .
4275	Format the number of objects in a list of objects .
4276	Trace memory usage .
4277	Return a list of the code events in a list .
4278	Return the number of objects over head .
4279	Compute memory over the process .
4280	Get the package package .
4281	Get the profile module .
4282	Return the profile function for this run .
4283	Run the profile .
4284	Get the list of module names for a package .
4285	Run a function in a separate process .
4286	Return the type of a run object .
4287	Initialize the module .
4288	Initialize the package .
4289	Initialize the function .
4290	Replace sys args in sys . args .
4291	Sample a frame .
4292	Insert a stack into the stack .
4293	Fill the sample count of the node .
4294	Format the tree .
4295	Return the call tree .
4296	Get profile information .
4297	Get profile module .
4298	Access the profile function
4299	Transform stats into a list of dictionaries .
4300	Create a profile package .
4301	Create a profile module .
4302	The profile function .
4303	Initialize the database .
4304	Show a guestbook .
4305	Add an entry .
4306	Handler for profiling .
4307	Start HTTP server .
4308	Handle the root page .
4309	Handle other content .
4310	Handle GET request .
4311	Perform a POST request .
4312	Send an HTTP response .
4313	Check if module path is a standard directory .
4314	Record a line .
4315	Return a generator that yields lines with standard libraries .
4316	Fill the heatmap .
4317	Skip lines from source code .
4318	Returns a dictionary of profile information .
4319	Format a heatmap .
4320	Return profile module .
4321	Get the profile function .
4322	Run a run_object and return the results .
4323	Run a function
4324	Predict probabilities for each RDD .
4325	Predict log probabilities for X .
4326	Fit the model to an RDD
4327	Count the number of documents in a vocabulary .
4328	Sorts a vocabulary by terms .
4329	Limit features .
4330	Fit the model to the dataset .
4331	Transform a vocabulary into a single vocabulary .
4332	Convert the dataset to a scikit - dataset .
4333	Fit the spark model .
4334	Perform Spark prediction on X .
4335	Fit a Spark linear regression .
4336	Fit the model
4337	Fit the model to the specified parameters .
4338	Return the score of the simulation .
4339	Fit the estimator with the given parameters .
4340	Return the score of the estimator .
4341	Fit the clustering .
4342	Return the prediction of X .
4343	Return the prediction of the Spark cluster .
4344	Check if an RDD is valid .
4345	Fit a new vocabulary to a file .
4346	Compute statistics for each numpy or scipy blocks .
4347	Fit a transform to the given Z .
4348	Apply the transform to the given Z .
4349	Iterate over a collection of dtype .
4350	Iterate over a list of tuples .
4351	Create a block RDD from an RDD .
4352	Apply a function to each RDD .
4353	The shape of this RDD .
4354	Convert this RDD into a numpy array .
4355	Apply a function to the given values .
4356	Return the bit permission of s .
4357	Return True if path is only root write
4358	Check the configuration file .
4359	Read configuration from file .
4360	Run a command as a command .
4361	Execute a command .
4362	Execute a command on ssh .
4363	Validate the configuration .
4364	Get headers .
4365	Return the response body .
4366	Returns the URL for this homeAssistant .
4367	Returns the URL for this webhook .
4368	Return the text for a packet .
4369	Print information about a packet .
4370	Discover devices .
4371	Execute the device .
4372	Send confirmation on device .
4373	Called when a device is received .
4374	Execute a device .
4375	Run on_Push method .
4376	Convert transaction .
4377	Find ledger file .
4378	Run compatibility .
4379	Get long description .
4380	Create a precalculated text .
4381	Returns the default value for this resource .
4382	Render a badge .
4383	Generate a list of supported characters from deja_vu_path .
4384	Generate a list of characters from a list of characters .
4385	Given a list of characters and a list of characters return a mapping for each character .
4386	Write JSON to a JSON file .
4387	Convert 2D image to 2D .
4388	Get Gaussian kernel
4389	Convert an image to grayscale .
4390	Main function .
4391	Returns the value of the SSIM image .
4392	Compute the SSIM .
4393	Destroy the event .
4394	Sets the current version of this operation .
4395	Get the status of this node
4396	Print the current status .
4397	Return the node of a connection .
4398	Called when the connection is ready .
4399	Register a new incoming connection .
4400	Called when incoming message is received .
4401	This function is called when a command is successful
4402	Return True if node should be connected .
4403	Try to connect to a given node .
4404	Called when a connection is received .
4405	Called when a message is received .
4406	Called when a connection is closed .
4407	Add a node to the node .
4408	Drop a node .
4409	Send a message .
4410	Destroy all connections .
4411	Put an item into the cache .
4412	Put an item into the heap
4413	Get the item from the heap .
4414	Acquire a lock .
4415	Returns whether this lock is acquired .
4416	Release this lock .
4417	Decorator to check a function .
4418	Check if the view function is required .
4419	Set the connection parameters .
4420	Create indexes .
4421	Migrate a list of indexes to published policy .
4422	Strip metadata from the report .
4423	Save aggregate reports to Kafka .
4424	Extract XML from a file .
4425	Parse a aggregate report file .
4426	Convert a list of reports into a csv file .
4427	Parse the aggregate report file
4428	Return a list of capabilities .
4429	Save aggregate reports to a directory .
4430	Write results to a zip file .
4431	Email results to a given mail .
4432	Save aggregate reports to Splunk
4433	Save a list of forensic reports to an Splunk object
4434	Decode base64 to base64 .
4435	Get the base domain .
4436	Query DNS for a given IP address .
4437	Convert human timestamp to datetime .
4438	Download geoip2 country .
4439	Get information about an IP address
4440	Convert message bytes to outlook message
4441	Convert a string to a list of strings .
4442	Parse a report file
4443	Drain the connection .
4444	Publish a payload .
4445	Publish a request .
4446	Publish a message .
4447	Subscribe to a subject .
4448	Unsubscribe the given ssid .
4449	Flush the connection .
4450	Select the next server .
4451	Process an error message .
4452	Process an operation error .
4453	Create a connection command .
4454	Process the ping message .
4455	Process a message .
4456	Process connection information .
4457	Process connection completed .
4458	Flushes the pending data .
4459	Read the connection loop .
4460	 co activation analysis .
4461	Convert images to pandas DataFrame .
4462	Load features from a numpy array .
4463	Load features from images .
4464	Compute correlation between images .
4465	 dot product of images
4466	Select features from features .
4467	Get studies for a given mask file .
4468	Get the order of features .
4469	Classify regions .
4470	Classifier function .
4471	Fit model .
4472	Set the class weight .
4473	Perform cross validation .
4474	Fit a dataset .
4475	Compute the average of a dataset within a set of regions .
4476	Get the number of images in the dataset .
4477	Get the top words of the topic .
4478	Pearson function .
4479	Compute the FDR of p .
4480	Load activations from input file .
4481	Create image table
4482	Get a list of ids for a feature .
4483	Add features to the table .
4484	Get feature names .
4485	Get feature counts .
4486	Load a pickle file .
4487	Save the feature table to a file .
4488	Get image data .
4489	Get feature data .
4490	Returns a list of unique names for the given features .
4491	Return a list of ids for the given features .
4492	Return a list of features that match a search search .
4493	Get ids of the given expression .
4494	Convert sdf to CSR .
4495	Decorator for deprecated functions .
4496	Transform a matrix .
4497	Convert cartesian coordinates to matrix .
4498	Apply a transformation .
4499	Mask the image
4500	Get image mask .
4501	Load images from filenames .
4502	Save an image .
4503	Set the current logging level .
4504	Expand an address to a unicode string .
4505	Normalize a string .
4506	Parse an address .
4507	Return a list of hashes matching the given labels .
4508	Convert a dictionary to a dictionary .
4509	Get ticker price .
4510	Get data from the API .
4511	Get a list of bulk News objects .
4512	Make a request to the API .
4513	Get the bearer info for this client .
4514	Make a request to the API .
4515	Returns a list of tracks for a album .
4516	Returns a list of artists .
4517	 album .
4518	Get the top tracks for a given artist .
4519	Returns a list of artists related to a spotify .
4520	Get a list of artists .
4521	Get a specific category .
4522	Get a list of playlist .
4523	Get a list of categories .
4524	Returns a list of featured playlist .
4525	Get new releases .
4526	Retrieve recommendations for a seed .
4527	Returns a list of artist objects with the given ids .
4528	Get a list of albums .
4529	Get all albums .
4530	Returns the total albums for this artist .
4531	Returns the artist related to this artist .
4532	Get the currently playing track .
4533	Get the current player .
4534	Get all available devices .
4535	Get recent played track .
4536	Replace tracks in a playlist .
4537	Reorder tracks in a playlist .
4538	Create a playlist .
4539	Get a list of playlists .
4540	Get a track .
4541	Get all tracks .
4542	Return an OAuth2 URL .
4543	Get a album .
4544	Get an artist .
4545	Get a track .
4546	Get a user .
4547	Get albums .
4548	Get a list of artists .
4549	Search for songs .
4550	Convert a string to an ID .
4551	Ensures that the given attribute is a list of methods .
4552	Create an HTTP client from a client .
4553	Generate an OAuth2 URL .
4554	Return the attributes for this client .
4555	Return the parameters as a string .
4556	Build the playlist .
4557	Get all tracks in this playlist .
4558	Resume a playback .
4559	Transfer a device .
4560	Retrieve a spotify object .
4561	Helper function to create a file .
4562	Convert the given month into a short string .
4563	Create a list of code URLs .
4564	Check if the current version is greater than one .
4565	Return True if the version of the current branch is installed .
4566	Check if the current version is deprecated .
4567	Helper function to create a backup file .
4568	Ensure that the backup content is empty .
4569	Return True if the line is not ignored .
4570	Process options .
4571	Extract the base from the given list .
4572	Format a list of lines to format .
4573	Helper function to create a URL .
4574	Return a list of HTTP status code .
4575	Check if a domain is valid .
4576	Check if a domain is a subdomain .
4577	Check if an IP address is valid .
4578	Check if an IP is a range .
4579	Check if a URL is valid .
4580	Load the configuration file .
4581	Check if it is safe .
4582	Return a file name .
4583	Sets the entry management URL .
4584	Helper function to print a header .
4585	Helper function to create a file .
4586	Helper function to create a file .
4587	Helper function to create a file .
4588	Helper function to create an ASCII logo file .
4589	Format a domain .
4590	Helper function to extract a domain file .
4591	Helper function to create a list .
4592	Check if the list is a file .
4593	Helper function to switch a variable .
4594	Helper function to create a list if it doesn t exist .
4595	Returns the status file .
4596	Helper function to create a structure file .
4597	Create a directory .
4598	Helper function to delete a directory .
4599	Helper function to create a config file .
4600	Load the configuration file .
4601	Install the production configuration file .
4602	Create an iana configuration file .
4603	Check if a configuration file exists .
4604	Create a directory structure file .
4605	Merge the values into this object .
4606	Helper function to load a configuration file .
4607	Split a version into a tuple .
4608	Check if the upstream version is valid .
4609	Helper function to create a clone if it exists .
4610	Helper function to create a list of HTTP code .
4611	Check if file is a list .
4612	Helper function to create a unified file .
4613	Create a status file .
4614	Helper function to create a file if it doesn t exist .
4615	Extract extensions from a line .
4616	Ensure that the database is loaded .
4617	Return the standard string .
4618	Create a list of url base files .
4619	Check if the database is empty .
4620	This function is called when the user is found .
4621	Return a generator for all the extensions .
4622	Helper function to create an iana file .
4623	Helper function to create a list .
4624	Check if a file exists .
4625	Create a file if it doesn t exist .
4626	Helper function to create a file .
4627	Helper function to remove element .
4628	Helper function to create a list .
4629	Process the configuration .
4630	Get the content of a JSON file .
4631	Write content to json file .
4632	Helper function to create a log file .
4633	Helper function to create the expiration date .
4634	Check if file is not found .
4635	Check if file is a file .
4636	Construct a header data object .
4637	Create a header string .
4638	Create a new data object .
4639	Return the size of the given header .
4640	Check if data is a list .
4641	Create a json file .
4642	Return a list of data .
4643	Helper function to create a file .
4644	Helper function to calculate an OrderedDict .
4645	Return a formatted execution time .
4646	Helper function to create a list of files .
4647	Helper function to create a list of databases .
4648	Delete all files .
4649	Generate a hash for the given algorithm .
4650	Hash the data .
4651	Get the result variable .
4652	Execute the command and return the result .
4653	Remove a key from the list .
4654	Rename a key .
4655	Merge two dictionaries .
4656	Write to a JSON file .
4657	Write this object to a YAML file .
4658	Fix the splited path .
4659	Write data to file .
4660	Read the file content .
4661	Return a list of the main list .
4662	Merge the list into the main dictionary .
4663	Return a list of strings that match the regex .
4664	Return a list of data that matches gonna
4665	Return a list of strings with replace_with .
4666	Helper function to create a number .
4667	Helper function to calculate the percentage .
4668	Check if the output file exists .
4669	Check if the given URL is valid .
4670	Check if domain is valid .
4671	Check if this is a subdomain .
4672	Helper function to create a list of test status .
4673	Reformat a file .
4674	Check if the database file exists .
4675	Ensure that the database state exists .
4676	Helper function to create a database file .
4677	Helper function to create a database file .
4678	Check if the database is present .
4679	Ensure that the database file exists .
4680	Backup the database .
4681	Check if a file exists .
4682	Helper function to check if the expiration date exists .
4683	Return the expiration date string .
4684	Helper function to create a file .
4685	Create a list of build files .
4686	Helper function to create a file .
4687	Create a new namespace lookup string .
4688	Create a list of whois servers .
4689	Helper function to create a string .
4690	Helper function to get a test result .
4691	Get the current object .
4692	Return a list of standard paths .
4693	Iterate over standard paths .
4694	Yields all unused import line numbers .
4695	Return a list of module name .
4696	Iterate over import line numbers .
4697	Return an import usage .
4698	Iterate over all variable line numbers .
4699	Find duplicate key - line numbers .
4700	Convert a list of messages into a dictionary .
4701	Check if the source is valid .
4702	Extract the package name from a line .
4703	Import a multiline statement .
4704	Parse a multiline statement .
4705	Filter an imported module .
4706	Return a line of import lines .
4707	Filter code from source .
4708	Get a dictionary of messages by line .
4709	Filter in star import .
4710	Remove duplicate key .
4711	Check if a dict entry has a key .
4712	Check if a value is a literal or name .
4713	Yield start and end line numbers .
4714	Return a list of lines that are notless pass .
4715	Get the indentation of a line .
4716	Get the end of a line .
4717	Fix code in pyflakes .
4718	Split a comma separated string .
4719	Check if a file is a python file .
4720	Check if filename is a exclude file .
4721	Find all files in a directory .
4722	Parse command line arguments .
4723	Read an object .
4724	Write an output stream .
4725	Write an output stream .
4726	Read an input stream .
4727	Create a Name .
4728	Read an object .
4729	Write an object .
4730	Create a Digest object .
4731	Read an object .
4732	Write an object .
4733	Create an instance of the application .
4734	Read an object .
4735	Create an object .
4736	Read an object .
4737	Create an object .
4738	Read an object .
4739	Create an object object .
4740	Read data .
4741	Write an object .
4742	Read an object .
4743	Process a request .
4744	Build an error response .
4745	Processes a template attribute .
4746	Get all attributes from a managed object .
4747	Get attribute from a managed object .
4748	Set attributes on a managed object .
4749	Set an attribute on a managed object .
4750	Check if a policy is allowed .
4751	Create an object .
4752	Create an object .
4753	Set a setting .
4754	Load the server configuration file .
4755	Return the bitmask for the given value .
4756	Given a value return a list of masks .
4757	Read data from an object .
4758	Write an object .
4759	Validate that the value is a valid integer .
4760	Read a value .
4761	Add a value to the output file .
4762	Validate the current value .
4763	Validate that the value is valid .
4764	Read a value from the buffer .
4765	Write a value to a buffer .
4766	Write an object .
4767	Validate that the value is a boolean .
4768	Read an interval value .
4769	Validate the interval .
4770	Returns a dictionary containing the key wrapping data .
4771	Set the key wrapping data .
4772	Validate the key format .
4773	Validate the secret data
4774	Validate the value .
4775	Convert an attribute name to tag table .
4776	Convert an attribute tag to a name .
4777	Returns the bit mask corresponding to the given enumerations .
4778	Returns a list of enumerations matching the given mask .
4779	Check if an enumeration is a bit mask .
4780	Read an object .
4781	Helper function to create an object .
4782	Read the input buffer .
4783	Create a new keypair response .
4784	Read an object .
4785	Write an object .
4786	Read an attribute list .
4787	Helper function to write an object .
4788	Get a list of json files .
4789	Scan for policy files .
4790	Run the operation policy monitor .
4791	Get a certificate from the given connection .
4792	Get extended key usage from a certificate .
4793	Get common names for a certificate .
4794	Get client identity from a certificate .
4795	Read an object .
4796	Create a new object object .
4797	Read an object .
4798	Create an object object .
4799	Convert the given object into a Python object .
4800	Read an object .
4801	Read an object .
4802	Create a new object .
4803	Returns True if the given attribute is supported .
4804	Check if an attribute is deprecated .
4805	Returns True if the given attribute is applied to an object type .
4806	Checks if an attribute is a multivalue rule set .
4807	Get a valid value
4808	Read an object .
4809	Create an object .
4810	Read an object .
4811	Create an attribute object .
4812	Read an object .
4813	Helper function to write an object .
4814	Read an object .
4815	Create a stream object .
4816	Read an object .
4817	Helper function to write an object .
4818	Read an object .
4819	Write an object .
4820	Read a credential object .
4821	Create a credential object .
4822	Read an object .
4823	Create a file object .
4824	Read an object .
4825	Create an object .
4826	Read an object .
4827	Create an object .
4828	Read an object .
4829	Write an object .
4830	Create an extension information object .
4831	Read an object .
4832	Write an object .
4833	Validate the revocation message .
4834	Read an object defaults object .
4835	Create an object defaults object .
4836	Read an object .
4837	Helper function to write an object .
4838	Read a file object .
4839	Helper function to write an object .
4840	Read a ProfileInfo object .
4841	Create a ProfileInfo object .
4842	Helper function to write an object .
4843	Read an object .
4844	Create an object .
4845	Stop the connection .
4846	Start the connection service .
4847	Read an object .
4848	Create an object .
4849	Read an object .
4850	Write an object .
4851	Generate a symmetric key .
4852	Create a cryptographic key pair .
4853	Generate an authentication code .
4854	Encrypt a plain text .
4855	Encrypt the given encryption algorithm .
4856	Encrypt asymmetric encryption .
4857	Decrypt the given encryption key .
4858	Generate an RSA key pair .
4859	Derive a encryption key .
4860	Create a RSA private key .
4861	Verifies that the signature is valid .
4862	Read the signature data .
4863	Helper function to write an object .
4864	Read an object .
4865	Helper function to return a stream object .
4866	Read an object .
4867	Write an output stream .
4868	Read an object .
4869	Write the output stream .
4870	Read an object .
4871	Read an object .
4872	Write an object .
4873	Authenticate with the given certificate .
4874	Read an archive response stream .
4875	Write the output stream .
4876	Start the connection .
4877	Read an object .
4878	Return True if the profile is supported .
4879	Derive a key from an object .
4880	Get all attributes .
4881	Returns the list of attribute names for the given user .
4882	Send a query .
4883	Signs data .
4884	Open the client connection .
4885	Close the client .
4886	Create a cryptographic algorithm .
4887	Create the key pair for the given algorithm .
4888	Register this object .
4889	Create a new attribute .
4890	Derives a key from an object .
4891	Locate an object .
4892	Check that the user is valid .
4893	Get an object .
4894	Get the list of attributes for a given object .
4895	Activate an object .
4896	Revoke a revocation message .
4897	Returns the MAC address of the given data .
4898	Build the cryptographic parameters .
4899	Build the encryption key information .
4900	Build MAC signature key information .
4901	Builds a key wrapping specification .
4902	Build common attributes .
4903	Build a name attribute .
4904	Read the input buffer .
4905	Write a query buffer .
4906	Create an object .
4907	Read a file object .
4908	Create an object .
4909	Get a single entry point .
4910	Get a named group .
4911	Get all files in a group .
4912	Load the object .
4913	Create an object from an entry point string .
4914	Start the live server
4915	Generate project .
4916	Generate a controller .
4917	Generate action .
4918	Generate form .
4919	Generate a model .
4920	Generate a macro .
4921	Create a new path .
4922	Copy file to destination file .
4923	Convert a datetime . date to a string .
4924	Check if url is valid .
4925	Encode a string .
4926	Decodes a string or None .
4927	Wrap a function as JSON .
4928	Return the absolute URL for the given endpoint .
4929	Load configuration .
4930	Sign in a user .
4931	Get the current user .
4932	Create an application .
4933	Register jinja .
4934	Register blueprints .
4935	Register error handler .
4936	Register hooks .
4937	Convert dataframe to CSV .
4938	Read a pandas DataFrame from a CSV file .
4939	Serialize a dataframe .
4940	Deserialize a DataFrame from a data type .
4941	Update the data from a dataframe .
4942	Update the data from the raw data type .
4943	Return the contents of the file .
4944	Add data from a dataframe .
4945	Add data from raw data .
4946	Open the intermediate dataset contents .
4947	Read the intermediate dataset as binary .
4948	Read the intermediate dataset contents as text .
4949	Return a pandas DataFrame from the object .
4950	Get the intermediate dataset for a node .
4951	Get all experiments for a workspace .
4952	Get datasets in a workspace
4953	Get a dataset .
4954	Publish a function to a workspace .
4955	Decorator to publish a function .
4956	Decorate a function as types .
4957	Decorate a function to return type .
4958	Decorator to attach a function to a function .
4959	Find the global name of a code .
4960	Return a copy of self .
4961	Looks up a color by its name .
4962	Draw a bounding box .
4963	r Compute the linear extensionrema between two points .
4964	r Calculates the linear interpolation of a linear point .
4965	Build tree choices .
4966	Return a function that returns a list of command options .
4967	Decorator to register items .
4968	Compose dynamic tree
4969	Initialize the site
4970	Clear the site
4971	Get an entry by name .
4972	Update the value of an entry in the cache .
4973	Add an entry to the cache .
4974	Initialize this object .
4975	Resolve tree alias .
4976	Check if current app is admin .
4977	Calculate the depth of a given item
4978	Returns the current item for the given tree alias .
4979	Resolve the URL of the item .
4980	Initialize the tree .
4981	Get the attribute of the current page .
4982	Returns the ancestor level of the given item .
4983	Add a menu to the tree .
4984	Check if an item has access permission
4985	Breadcrumbs the site tree .
4986	Create a tree
4987	Render child items .
4988	Get the children of the given item .
4989	Update the has_ children
4990	Filter items based on navigation type .
4991	Returns an ancestor item for the given tree alias .
4992	Add a tree to the tree .
4993	Resolve variable .
4994	Return a file name .
4995	Get the children of a menu .
4996	Parse a template .
4997	Create a menu node from the my tree .
4998	Render a template .
4999	Create a template tag .
5000	Get the URL for a model .
5001	reregisters a tree admin .
5002	Handle redirects handler .
5003	Redirect to the current page .
5004	Add an item .
5005	Handle the response change .
5006	Add a form to the form .
5007	Get a tree .
5008	Move an item .
5009	Save an item to the tree .
5010	Return list of urls
5011	Dump a model view .
5012	Create a tree object .
5013	Create a tree item
5014	Import app module .
5015	Returns the model class for the given settings entry .
5016	Create a Config object from a mapping .
5017	Load configuration from a Python file .
5018	Load configuration from a YAML file .
5019	Create a Config object from an object .
5020	Create a zipkin attributes object for a span .
5021	Create HTTP headers for new span .
5022	Get the current context for the current trace .
5023	Start the transport .
5024	Stop the tracer .
5025	Update the binary annotations .
5026	Add aSA annotation .
5027	Override the span name .
5028	Create an endpoint .
5029	Return a copy of an endpoint with new service name .
5030	Build a V1 span .
5031	Encode a list of spans .
5032	Create a protobuf span .
5033	Convert a hex ID to a byte string .
5034	Get the protobuf kind .
5035	Convert a zipkin_pb2 endpoint .
5036	Convert a list of protobuf annotations to a list .
5037	Create an annotation .
5038	Create a binary annotation .
5039	Create an endpoint .
5040	Copy an endpoint with a new service name .
5041	Build an annotation list .
5042	Build an annotation list .
5043	Create a span dictionary .
5044	Convert a TMemory span to bytes .
5045	Encodes binary object list into bytes .
5046	Detect span version and encoding .
5047	Convert spans to output .
5048	Push a zipkin attribute to the stack .
5049	Encode a V2 span .
5050	Create json endpoint
5051	Encode a span .
5052	Decode a list of spans .
5053	Convert the thrift endpoint to an Endpoint object .
5054	Decode the thrift annotations .
5055	Convert the thrift binary annotations into a dictionary .
5056	Decode the thrift span .
5057	Convert trace ID to string .
5058	Convert an unsigned long value to lower hex
5059	Write a hex long .
5060	This function is called when a date has been processed .
5061	Set the transaction code .
5062	Set the IPh ID for the given tag .
5063	Set the TBank s tag .
5064	Parse the data .
5065	Parse data into transactions .
5066	Join a string into a list of lines .
5067	Get the JSON from the response .
5068	Check if a limit is exceeded .
5069	Make a request to the API .
5070	Get bot info .
5071	Get a list of bots .
5072	Read a term from the stream .
5073	Write a message to the stream .
5074	Close the file .
5075	Decode a protocol version string .
5076	Encode a term .
5077	Add a source address .
5078	Send pending messages .
5079	Sets the remote serviceHello callback .
5080	Stop all remote services .
5081	Clear all local services .
5082	Search for all remote services .
5083	Create a SOAP message .
5084	Discover the given logger .
5085	Returns an instance of the item manager .
5086	Get all child relations for a model .
5087	Returns a list of all child relations for the given model .
5088	Save the relation to the model .
5089	Create a model from a dict .
5090	Validate the unique checks .
5091	Check if the form has changed
5092	Returns an Address with the valid checksum .
5093	Generate the checksum for this address .
5094	Parse command line arguments .
5095	Create an argument parser .
5096	Prompt the seed .
5097	Validate the signature fragments .
5098	Get the key for a given index .
5099	Get key for given address .
5100	Create a new key iterator .
5101	Create a sponge .
5102	Return the absoluteorb of the current state .
5103	Return a copy of the state .
5104	Transform the current state .
5105	Returns a dictionary of digests
5106	Returns a dictionary of private keys .
5107	Prepare the multisig transfer command .
5108	Add a sequence of target values to the list .
5109	Returns a list of trits from an integer .
5110	Returns the number of trits
5111	Returns a tuple of all trits for the given left and right .
5112	Output the given seed .
5113	Get a list of transactions .
5114	Get inputs command .
5115	Get new addresses command .
5116	Returns a dictionary containing all transfer states
5117	Promote a transaction command .
5118	Perform a replay bundle command .
5119	Send transfer command .
5120	Send trytes command .
5121	Resolve a URI into a base adapter
5122	Send a request .
5123	Log a message .
5124	Send HTTP request .
5125	Interpret the response .
5126	Randomly seed a response .
5127	Add a digest to the store .
5128	Get the Misig address .
5129	Create an iterator over the seed .
5130	Convert a digest into an Address object .
5131	Generate an address from a key iterator .
5132	Find transactions in the given adapter .
5133	Iterate over the addresses used by the adapter .
5134	Return a list of bundles from transaction hashes .
5135	Check if encoding is a new codec .
5136	Return codec info .
5137	Encode a byte string .
5138	Decodes the given input .
5139	Find all transactions in the given seed .
5140	Add a route .
5141	Create a Transaction object from a tryte string .
5142	Return the JSON representation of this signature .
5143	Returns the signature validation string .
5144	Check if this transaction is confirmed .
5145	Return a list of messages .
5146	Return a list of strings for this transaction .
5147	Return a list of groups that are group .
5148	Discover commands for a given package .
5149	Execute the request .
5150	Apply a filter .
5151	Get the URL of a job .
5152	Return a list of errors .
5153	Check if the bundle is valid .
5154	Create a validator for the bundle .
5155	Get the errors for the bundle signature fragments .
5156	Returns the error message for the group signature .
5157	Traverse the bundle .
5158	Start a new interactive shell .
5159	Return a random seed .
5160	Get the digest of the hash .
5161	Signs an input transaction .
5162	Pretty print the class .
5163	Return a copy of the absoluteorb object .
5164	Concatenate two hashes .
5165	Register a new exception with the given context .
5166	The security level .
5167	Increment the legacy tag .
5168	Tag this transaction .
5169	Add a transaction to the bundle .
5170	Finalize the bundle .
5171	Sign the input generator .
5172	Signs the input transactions at the given start index .
5173	Create the input transactions .
5174	Convert value to standard unit .
5175	Decompress G1 compressed file .
5176	Return the prime field of a .
5177	Create an instance from a JSON file .
5178	Find words that match text .
5179	Find the synonym of a word .
5180	Expand the abbreviations in text .
5181	Split text .
5182	List of categories .
5183	Generate a random component .
5184	Plot the plot .
5185	Create a class from a string .
5186	Create a time scale by name
5187	Generate a random components .
5188	Create an array from an image .
5189	Create a graph from a CSV file .
5190	Convert the table to a CSV file .
5191	The maximum number of rows in the list .
5192	Get the decorations for a given component .
5193	Get the value of the attribute .
5194	Get the component of the list .
5195	Plot the list .
5196	Create a component from text .
5197	Build a summary .
5198	Create a Rock Ridge Component .
5199	Process a text row .
5200	Parse the given text into a dictionary that can be used by the user .
5201	Return True if all elements in self are valid .
5202	Returns the unique values in this table .
5203	Create a list of intervals from a list of nodes .
5204	Clean up longitinal data .
5205	Create a set of intervals from the given file .
5206	Build a list of intervals from a dictionary .
5207	Create a new object from a CSV file .
5208	Create a new image from an image .
5209	Create an instance from a log file .
5210	Create a new MAR3 object from a string .
5211	Create a new class from a canstrat object .
5212	Return a copy of self .
5213	Write the list to a CSV file .
5214	Return a csv file with lithology
5215	Plot the axis .
5216	Get the data for a given field .
5217	Extract log values from the given log .
5218	Find the matching term in the list .
5219	Find in congruities with the given index .
5220	Return a list of gaps at the given index .
5221	Returns a copy of the list .
5222	Return a copy of the alignment with gaps .
5223	Fill this component with the given components .
5224	Returns a copy of this string with the union of other
5225	Returns the intersection of two intervals .
5226	Merge the overlap between this segment .
5227	Plots a histogram of the data .
5228	Invert all the values in this list .
5229	Crop the given extent
5230	Perform the quality of tests .
5231	Return the name of a hex string .
5232	Read a log - like object from a image .
5233	Return the field for the given field name .
5234	Get all the jobs for the given prefix .
5235	Parse the job hCL .
5236	Update a new token
5237	Returns a list of allocated resources .
5238	Fail an deployment .
5239	Pause a deployment .
5240	Gets the health of an deployment .
5241	Drain a node .
5242	Request a drain node with the specified spec .
5243	Helper function to create a node from a dictionary .
5244	List files .
5245	Streams data from the server .
5246	Get stat information .
5247	Join a list of addresses .
5248	Updates the specified servers .
5249	Force leave a node .
5250	Get all nodes .
5251	Gets a list of all elimations .
5252	Get all namespaces
5253	Register a new job .
5254	Update a plan
5255	Dispatch a job .
5256	Revert a job .
5257	Retrieve a stable job .
5258	Deregister a job .
5259	Get the configuration for this node .
5260	Delete a peer .
5261	Get all deployments for this project .
5262	Return random number of the given object type .
5263	Get a random attribute of an object .
5264	Get a string representation of a polyglot attack .
5265	Generate a random action .
5266	Convert buffer to unicode .
5267	Start the server .
5268	Stop the server .
5269	Custom html method .
5270	A generator that returns a generator that will be used for testing
5271	Apply an object to an object .
5272	Spawn a command .
5273	Get output .
5274	Finish the process .
5275	Close the process .
5276	Start the process
5277	Execute an object
5278	Decorator for JSON encoding .
5279	Build a random string .
5280	Build a string representing the current scope .
5281	Return the string representation of the Q .
5282	Build a random value
5283	Build an option .
5284	Build a reference .
5285	Build a pre - build .
5286	Shutdown the PJF process .
5287	Run and monitor the process .
5288	Start the monitor .
5289	Generate a random float .
5290	Add a definition to the rule group .
5291	Add a category to the collection .
5292	Generate n - grams .
5293	Iterate over the elements of the given element .
5294	Fetch the fuzzer .
5295	Return an iterator over all the elements in the object .
5296	Apply a function to the given object .
5297	Handle a signal .
5298	Shut down the command .
5299	Pause the command .
5300	Resume the command .
5301	Stop the command .
5302	Restart the command .
5303	Returns a list of all events .
5304	Set the mood for this user .
5305	Set the avatar of the given image .
5306	Return the metadata for the given URL .
5307	Create a contact
5308	Retrieve a user by id .
5309	Return a list of bots .
5310	Retrieve a bot with the given id .
5311	Search for a given query
5312	Returns a list of all requests for this user .
5313	Create an instance from raw raw data .
5314	Merge two attributes .
5315	Merge an object .
5316	Call the given method .
5317	Read the token file .
5318	Writes the current token to file .
5319	Verify the token .
5320	Refresh the current token .
5321	Get the user s username .
5322	Updates the registry token .
5323	Synchronize all endpoints .
5324	Check if user is valid .
5325	Get an auth token
5326	Authenticate the skype token .
5327	Set the client configuration .
5328	Ping this message .
5329	Returns a list of conversations that are recent .
5330	Create a chat for this chat .
5331	Create threads .
5332	Returns the id of the user .
5333	Returns the number of conversations for the given URL .
5334	Iterate over a given function .
5335	Convert text to unicode .
5336	Detect the format of text .
5337	Parse text .
5338	Return a dictionary representation of the metadata .
5339	Load yaml file
5340	Export the given metadata .
5341	Export the metadata .
5342	Return the match string .
5343	The list of items .
5344	Return a list of sublists that match the given pattern .
5345	Convert the pattern to the end .
5346	Returns the argument list for this span .
5347	Return a list of WikiList objects for the given pattern .
5348	Turns a list of strings into a dictionary .
5349	Convert a dictionary to a string .
5350	Checks the index for the given key .
5351	Insert a string at the given index .
5352	Return the partition of an atomic character .
5353	Return the list of sub spans of the given type .
5354	Shrinks the list of spans to a given remove .
5355	Insert new spans at the given index .
5356	The depth level of this parser .
5357	Return the shadow string .
5358	Return the link shadow for the template .
5359	Return the list of spans for the given type .
5360	Pretty print the output .
5361	The parameter list .
5362	A list of parser functions .
5363	Return the list of templates .
5364	Returns a list of the Wikilinks for this page .
5365	The list of comments .
5366	Returns the external links .
5367	Return a list of sections .
5368	Return a list of tables .
5369	Return a list of WikiList objects for the given pattern .
5370	Return a list of tags for this tag .
5371	Return the sub spans of the given type .
5372	Returns the ancestors of the given type .
5373	Returns the parent of the given type .
5374	Return the mode of a list .
5375	Get an argument by name .
5376	Return a normal name .
5377	Remove the first argument from the list .
5378	Remove duplicate arguments .
5379	Set an argument .
5380	Get an argument by name .
5381	Check if the given name has an argument .
5382	Remove an argument from the list .
5383	Returns a string from a spatial reference code
5384	Find the specified ellipsname .
5385	Get CRS from URL .
5386	Load geometry from file .
5387	Get CRS from epsg code
5388	Given an Ari code return the CRS
5389	Get CRS from RSR code .
5390	Return the type of the unknown text .
5391	Write the record data to out .
5392	Reads a raw VLL from a stream .
5393	Parse a GeoTiffKey list from VLLs .
5394	Parse geotiff key .
5395	Returns the field signedness for the extra dimension .
5396	Returns the id of the extra dimension of the given type .
5397	Create a new record from a new point record .
5398	Copy fields from other record to other record .
5399	Append zeros to the array if necessary .
5400	The names of all dimensions in the array .
5401	Create an array of zeros
5402	Create a Point object from a stream .
5403	Deserialize a compressed buffer .
5404	The scale dimension .
5405	The scale dimension .
5406	The scale dimension .
5407	Add an extra dimension for the given type .
5408	Write the data to the Las zipvlr file .
5409	Write to a file .
5410	Write to destination .
5411	Build dtypes for point formats .
5412	Build dtypes for point formats .
5413	Convert numpy dtype to point format .
5414	Returns the minimum version of a point format .
5415	Check if a point format is compatible with the given version .
5416	Return a list of vlr_type .
5417	Extract the VRS from the given type .
5418	Read a VLL from a data stream .
5419	Check if a list of files have the same point format id .
5420	Check if all files have the same dtype
5421	Check if a file signature is invalid .
5422	Read the header from the stream .
5423	Read from the stream .
5424	Read points from the stream .
5425	Read compressed points from the compressed buffer .
5426	Read the waveform data packet .
5427	Read the evlrs from the stream .
5428	Raise a warning if the expected position is not in the stream .
5429	Open a Las reader .
5430	Read from a source file .
5431	Create a LasData object from a header .
5432	Create a las data object .
5433	Convert a set of points from a point format record .
5434	Merge a las file into a dictionary .
5435	Return a bytes - like object .
5436	The date of this year .
5437	Set the creation day of a date
5438	The min and y values in the array .
5439	Set the minimum value .
5440	Array of the maximum values
5441	Set the maximum value .
5442	A numpy array of the scales of the image .
5443	The number of offsets for this region .
5444	Return the version of the file .
5445	Convert old_version to new header .
5446	Unpack a binary array into an array .
5447	Pack a sub field .
5448	Return a list of dimensions that are lost .
5449	Return a dictionary of sub - fields .
5450	Return the number of bytes in this array .
5451	Return True if all dimensions have a waveform packet .
5452	Main function .
5453	Calculate the checksum of a command .
5454	Print hex message .
5455	Verify the response and return the checksum
5456	Return a list of bits that have expected_length .
5457	Generate query string .
5458	This is a utility function to run a demo .
5459	Connect to the server .
5460	Start monitoring .
5461	Disarm command .
5462	Clears an alarm .
5463	Set the output .
5464	Mark the alarm as alive .
5465	Start the status loop .
5466	Close the writer .
5467	Purge all user in database .
5468	Guess type of notebook .
5469	Get the file id for the given path .
5470	Retrieve a notebook from the database .
5471	Create a notebook model from a record .
5472	Get a directory from the database .
5473	Convert file records to a generator .
5474	Convert file record to base directory model .
5475	Create a file model from a record .
5476	Save a notebook .
5477	Save a file .
5478	Rename a file .
5479	Delete a file .
5480	Ensure the user exists in the database .
5481	Purge a user .
5482	Create a directory .
5483	Check if user_id is in a directory .
5484	Delete directory .
5485	Check if a directory exists .
5486	Return a list of files in a directory .
5487	Return the list of directories in a user .
5488	Return True if the file with the given api_path exists .
5489	Select a file by user id .
5490	Return the default fields for the file .
5491	Get file from database .
5492	Get a file .
5493	Get a file id .
5494	Check if a file exists .
5495	Rename a directory .
5496	Save an incoming file .
5497	Generate notebooks .
5498	Purge remote files from database .
5499	Generate a list of commits for a given engine .
5500	Generate notebooks .
5501	Encrypt row content .
5502	Re - encrypt the contents of a user .
5503	Derive a singlefernet key .
5504	Given a list of passwords and a list of passwords and a list of password keys and a list of keys that can be returned .
5505	Return a factory for a single password .
5506	Memoizes a single argument .
5507	Get the name of a column .
5508	Convert a list of fields to a dictionary .
5509	Convert row to dict .
5510	Create a checkpoint for a notebook .
5511	Create a file checkpoint .
5512	Delete a checkpoint .
5513	Get the content of a checkpoint .
5514	Return a list of a list of files in the given path .
5515	Rename all checkpoints in old_path .
5516	Delete all remote checkpoints at path .
5517	Purge remote databases .
5518	Resolve an API path .
5519	Apply prefix to the given model .
5520	Decorator to dispatch a path .
5521	Decorator to dispatch keyword arguments .
5522	Dispatch old path to new path .
5523	Called when the manager is changed .
5524	Perform a GET request .
5525	Normalizes an API path .
5526	Split the path into the path name and name .
5527	Return base64 encoded string .
5528	Return a base64 - encoded file - like object
5529	Decode base64 from base64 .
5530	Extract content from base64 .
5531	Return a list of all the directories for the given path .
5532	Wraps a path within root .
5533	Create a new database user .
5534	Given a list of models return a list of directories and files .
5535	Recursively walk directories .
5536	Recursively walk all the files .
5537	Iterate over all files with content .
5538	Re - encrypt all users .
5539	Re encrypt a single user .
5540	Re - encrypt all users .
5541	Un encrypt a single user .
5542	Generate ALEMBIC ini file .
5543	Upgrade a revision .
5544	Sanitize a block
5545	Add an instance to the queue .
5546	Load instances for a given embed type .
5547	Insert an instance .
5548	Load the data for the given embed type .
5549	Validate theme data .
5550	View the manager .
5551	Returns the JSON representation of the model .
5552	Hide authenticated fields .
5553	Remove all fields from the request .
5554	Method to get an article .
5555	Returns a queryset of publishable objects .
5556	Returns a queryset of publishable objects .
5557	Returns the attribute of the object
5558	Validate widget .
5559	Validate a zone .
5560	Validate a UUID .
5561	Return the user s permissions .
5562	Modify the user s permissions .
5563	Validate a list of author types .
5564	Save this zone .
5565	Get the data for this field .
5566	Prepare the data for this field .
5567	Render the template .
5568	Get the settings for the integration .
5569	This function is called when a user is authenticated .
5570	Get the settings for a given integration .
5571	Update integration settings .
5572	Authenticates the user .
5573	Return a string representation of the contents .
5574	Show a zone .
5575	Save the featured image
5576	Save a subsection .
5577	Return image extension .
5578	Return the medium URL .
5579	Save image .
5580	Save a thumbnail to a file .
5581	Get the MySQL connection .
5582	Get a bandwidth limit stream .
5583	Read amount .
5584	Called when a request is reached .
5585	Schedule consumption for a given token .
5586	Process scheduled consumption .
5587	Returns the projected average rate for the given amount of time .
5588	Calculate the exponential Moving Average
5589	Download a file from a bucket .
5590	Poll for the result of a transfer .
5591	Get callbacks for a given transfer future .
5592	Takes a dictionary and returns a dictionary with the keys that are whitelisted .
5593	Increment the counter .
5594	Finalize the callback .
5595	Check if a file is a special file .
5596	Acquire a tag .
5597	Release a release .
5598	Adjusts the number of lines in the file .
5599	Queue a file - like task .
5600	Get an IOWriteTask for the given data .
5601	Get the download output manager class .
5602	Retrieve data from a bucket .
5603	Write data to file .
5604	Return a list of writes for the given offset .
5605	Return True if the given fileobj is seekable .
5606	Upload a file to a bucket .
5607	Download a file .
5608	Copy a source to a bucket .
5609	Delete a task .
5610	Shutdown the server .
5611	Cancel the given message .
5612	Wait for the transfer .
5613	Read from a file - like object .
5614	Wraps the given data .
5615	Get the upload path manager class .
5616	Set the exception of the transfer .
5617	Set the result .
5618	Set an exception .
5619	Return the final result .
5620	Cancel this task .
5621	Submit a task .
5622	Add a callback to be called when a function is done .
5623	Add a function cleanup .
5624	Called when the server is done .
5625	Submit a task .
5626	Adds a callback to be called when the future is done .
5627	Upload a file to S3 .
5628	Download a file .
5629	Iterate over function decorators .
5630	Check if the given decorator is valid .
5631	Move paramters in old_text .
5632	Iterate over step function decorators .
5633	Check if the function is a list of arguments .
5634	Return the diff of a step .
5635	Select python parser .
5636	Get a list of team membership objects .
5637	Create a team membership object .
5638	Updates a team membership .
5639	Delete a member .
5640	Get a single fact
5641	Create a webhook .
5642	List memberships .
5643	Deletes a member .
5644	Validate the base URL .
5645	Return True if string is a web URL .
5646	Open a local file .
5647	Check if o is a valid type .
5648	Create a dict from a list of dictionaries .
5649	Check response code .
5650	Convert a JSON string into a dictionary .
5651	Convert a date string to a string
5652	List rooms .
5653	Create a new room .
5654	Update a room .
5655	Deletes a room .
5656	Get license information .
5657	Get the created team .
5658	Get an access token .
5659	Create a webhook .
5660	Update a webhook .
5661	Delete a webhook .
5662	Fix the next URL .
5663	Wait on rate limit .
5664	Updates the request headers .
5665	Return the absolute URL of the given URL .
5666	Make a request to the API .
5667	Perform a GET request .
5668	Get pages .
5669	Get items from url
5670	Make a PUT request .
5671	Perform a DELETE request .
5672	Create a new authentication token .
5673	Get a list of message objects .
5674	Create a new person .
5675	Delete an API endpoint .
5676	Create a new person .
5677	Get a single person .
5678	Updates an existing person .
5679	Delete a person .
5680	Get a person object .
5681	List role objects .
5682	List team objects .
5683	Create a team .
5684	Updates a team .
5685	Delete a team .
5686	Get an event list .
5687	Serializes the given data .
5688	Get an access token .
5689	Get the last activity of this team .
5690	Post events service .
5691	Get the public HTTP URL for the ngrok client .
5692	Delete webhook by name .
5693	Create a webhook .
5694	This method is used to delete the webhook
5695	Create a console .
5696	Return a generator of telegram data .
5697	Read data from a queue .
5698	Create DSMR protocol and serial settings .
5699	Create a serial reader .
5700	Create a new DSM reader .
5701	Handle incoming data .
5702	Called when the connection is closed .
5703	Handle telegram .
5704	Parse the telegram data .
5705	Get version from file .
5706	Ensure that the given specs is a Python version .
5707	Find packages in top .
5708	Create a command class .
5709	Decorate a function to be run in the distribution .
5710	Run a subprocess .
5711	Ensures that the target files exist .
5712	Wrap a list of commands .
5713	Create a FileHandler class .
5714	Extract data files from existing data specs .
5715	Get package data .
5716	Compile a pattern .
5717	Split a path into a generator .
5718	Translate a glob .
5719	Join the translated parts .
5720	Translate a glob part .
5721	Truncate table .
5722	Write table to database .
5723	Write indexes to table .
5724	Write triggers to table .
5725	Write the constraints for the given table .
5726	Write the contents of a table into a file .
5727	Process a row .
5728	Write the indexes to the file .
5729	Write constraints to the file .
5730	Write triggers to the file .
5731	Return the number of items in the query .
5732	Enqueue data to the database .
5733	Start the task .
5734	Build the extra predicate for the given extra predicate .
5735	Convert an object to a JSON datetime .
5736	Reconnect to MySQL .
5737	Execute a query and return the result .
5738	Get a connection
5739	Run benchmarks .
5740	Connect to the pool .
5741	Looks up the globals of the given path .
5742	Returns the total number of connections in the database .
5743	Handle a connection failure .
5744	Build a simple expression .
5745	Update a set of fields .
5746	Connect to a database .
5747	Sets up the tables
5748	Destroy the database .
5749	Start a new step .
5750	Stop the given step .
5751	Parse the step data .
5752	Disconnect from the API .
5753	Reconnect the connection .
5754	Connect to the socket .
5755	Called when a message is received .
5756	Stop timers .
5757	Send ping to API .
5758	Called when the ping is received .
5759	Send a payload to the websocket .
5760	Unpause the paused flag .
5761	Handle a system message .
5762	Log info handler .
5763	Handle error messages .
5764	Handle a data handler .
5765	Resub subscriptions .
5766	Handle authentication .
5767	Handle configuration data .
5768	Update timestamps of a channel .
5769	Reset the connection to the server .
5770	Get the candles of a pair .
5771	Configures the connection .
5772	Subscribe to the ticker .
5773	Unsubscribe from ticker .
5774	Subscribe to a book .
5775	Unsubscribe from a book .
5776	Subscribe to a book .
5777	Unsubscribe from raw order book .
5778	Subscribe to a pair .
5779	Unsubscribe from trades .
5780	Subscribe to a pair .
5781	Unsubscribe from candles pair .
5782	Authenticate the API .
5783	Cancel an order .
5784	Handle a device command .
5785	Handle a device command .
5786	Called when a notification is received .
5787	Create a new device type
5788	Publish an event .
5789	Updates the device .
5790	return a list of objects
5791	List the bundle
5792	Create a bundle
5793	Updates a schema .
5794	Disconnect connection to IBM
5795	Called when a client is connected .
5796	Subscribe to a given event type .
5797	Subscribe to device status .
5798	Subscribe to device commands .
5799	Publish a command .
5800	Called when a message is invalid .
5801	Handle a device event .
5802	Handle a status message .
5803	Called when an application is received .
5804	Get event by event id .
5805	Get all the events for a device .
5806	Get a single status
5807	Initiate the API .
5808	Returns the status of a given device .
5809	Close the stream .
5810	Return the number of points that match the given coordinates .
5811	Get the nearest neighbors .
5812	Get the bounds of the index .
5813	Delete an index .
5814	Create an index from a stream .
5815	Gets the value of a single page .
5816	Delete an object
5817	Check the return value of a function .
5818	Load application .
5819	Initialize the application .
5820	Start the Flask server .
5821	Convert the value to a native URL .
5822	Crop the image to a centerpoint .
5823	Crop the given image .
5824	Process an image .
5825	Process an image .
5826	Write an image file .
5827	Process placeholder image data .
5828	Pre - save an image .
5829	Updates the ppoi field of the given instance .
5830	Save the data to the form field
5831	Set the default form field for the model .
5832	Convert value to string .
5833	Ensures that the app s modules are registered .
5834	Unregister an image attribute .
5835	Unregister a filter .
5836	Return the URL for this field .
5837	Build filters and sizers .
5838	Return the root folder .
5839	Return the root folder .
5840	Returns the path to the root folder .
5841	Delete matching files from the storage .
5842	Preprocess the image .
5843	Preprocess image .
5844	Preprocess an JPEG image .
5845	Retrieve an image from the storage .
5846	Save an image to a file .
5847	Returns a human - readable string representation of the model .
5848	Create an image for the given path .
5849	Render the template .
5850	Add context to the context .
5851	Build a copy of the base attributes .
5852	Get the path to resized files .
5853	Get the path to the filtered file .
5854	Validate that size keys are valid .
5855	Get image url from image key .
5856	Return a list of rendition keys .
5857	Format the instruction .
5858	Format a function .
5859	Decode bytecode .
5860	Decode a module .
5861	Decorator for deprecated functions .
5862	Connect to the client .
5863	Close the connection .
5864	Read the result from the stream .
5865	Process the request .
5866	Parse GI result
5867	Check status code
5868	Reset the generator .
5869	Return a list of instances .
5870	Get the metadata for the given path .
5871	Get the primary keys for a model .
5872	Deserializes the given value .
5873	Get an existing instance from the query .
5874	Get declared fields .
5875	Load the data .
5876	Split model kwargs and association attributes .
5877	Delete orphan snapshots .
5878	Create a snapshot of the database .
5879	List snapshots .
5880	Restore a snapshot
5881	Remove a snapshot
5882	Rename a snapshot .
5883	Replace a snapshot .
5884	Set up the indexes .
5885	Prepares a text path to a string .
5886	Apply a function to the given data .
5887	Decorator to process text .
5888	Process text .
5889	Apply process text .
5890	Generate the document length statistics .
5891	Return the number of tokens in the index
5892	Map a parameter type to a string .
5893	Parse the given interfaces into a dictionary .
5894	Return the inverse of this reference .
5895	Update the item with the rollback .
5896	Return a copy of this instance .
5897	Return a copy of this node .
5898	Returns True if other is equal to other .
5899	Takes an argument and returns a list of values .
5900	Clear the stream .
5901	Move node to end .
5902	Write text to a temporary file .
5903	Return a list of contacts .
5904	Merge arguments into a config .
5905	Load address books .
5906	Prepare a list of source search queries .
5907	Create a new contact
5908	Create a list of birth days .
5909	Create a list of phone numbers .
5910	List contacts in a list .
5911	Modify a group of contacts .
5912	Delete a subcommand .
5913	Run source subcommand .
5914	Merge two contacts .
5915	Copy or move a list of addresses .
5916	Get action by alias .
5917	Convert a boolean value to a boolean .
5918	Create a new contact
5919	Create an Addressbook object from a file .
5920	Create a contact object from a user input .
5921	Create a new contact from an existing contact .
5922	Get the names of a part .
5923	Adds a category .
5924	Parse type value .
5925	Convert a list to a string .
5926	Convert a string to a datetime .
5927	Compare two UID IDs .
5928	Search all contacts in all contacts
5929	Search the contact names .
5930	Find the UID for the given query .
5931	Search by query .
5932	Returns a dictionary with a short number of contacts
5933	Returns the short UID for the given uid
5934	Return an iterator over all of the v2 files in the project .
5935	Load a Vdir .
5936	Return the abook with the given name .
5937	Return a dictionary of all available archs .
5938	Return a dictionary of available archs .
5939	Return an ArgSpec for the given function .
5940	Dispatch the given parser .
5941	Prompt user for input .
5942	Encodes a value to the output file .
5943	 guess type from kwargs
5944	Add commands to a parser .
5945	Decorate a function with a name .
5946	Decorate a function as an argument .
5947	Prompt the user for the given action .
5948	Return a new Query with the given kwargs .
5949	Create a pattern like .
5950	Return the cached result .
5951	Returns the first item in this collection .
5952	Delete entities .
5953	Handle a delete operation .
5954	Return a new redis prefix .
5955	Estimate a single work .
5956	Search the database .
5957	Count the number of partitions in the database .
5958	Connect to an object .
5959	Return the full text of the given value .
5960	Refresh all entities in the model .
5961	Clean the index of the model .
5962	Add an object to the database .
5963	Get the given pk .
5964	Write a Redis writer .
5965	Save the object to the database .
5966	Delete this object .
5967	Get an instance from Redis .
5968	Register a new class with the given type .
5969	Open a semaphore file .
5970	Return the number of available CPU cores .
5971	Send the result item to the result queue .
5972	Process a worker .
5973	Add a call item to the queue .
5974	Ensure the executor is running .
5975	Wrap an object into a Cloudpicklable object .
5976	Starts the process .
5977	Get a new process from a file descriptor .
5978	Returns an executor .
5979	Wait for jobs completion .
5980	This function is called when a process is created .
5981	Prepare process .
5982	Close all open file descriptors .
5983	Recursively kill a process .
5984	Kill a process .
5985	Get the exitcode of the given processes .
5986	Format the exitcodes .
5987	Main entry point for semaphores .
5988	Ensure this process is running .
5989	Return an event processor .
5990	Run the program .
5991	Run an interactive console .
5992	Split a string into a list of arguments .
5993	Return a list of stack information .
5994	Run the given hooks .
5995	Remove the current stack .
5996	Get an integer value .
5997	Get an integer .
5998	Process commands .
5999	Add source file to queue .
6000	Get next token from string .
6001	Prints a message with the given prefix .
6002	Read a command from the input .
6003	Close the connection .
6004	Disassemble a message .
6005	Disassemble bytes .
6006	Count the number of frames in a frame .
6007	Get call function name .
6008	Print stack trace .
6009	Return the sub commands that match the given prefix .
6010	Returns short help message for this entry .
6011	Add commands to the command list .
6012	Run a command .
6013	Start debugging .
6014	Show a category .
6015	Check if a file is available .
6016	Find debugged frame .
6017	Map thread names to thread names
6018	Get an integer .
6019	Check if the given argument is off .
6020	Set a boolean value .
6021	Set an integer .
6022	Show a boolean .
6023	Show an integer .
6024	Show the value of an object
6025	Check if line is a definition statement .
6026	Check if the given line is a build class definition .
6027	Shut down a thread .
6028	Set default background
6029	Check if color is dark RGB .
6030	Return the signature of a frame .
6031	Return all the expressions in the list
6032	Display a frame .
6033	Format the number .
6034	Read a message from the stream .
6035	Log the debug message
6036	Raise an error if the given command is not defined .
6037	Run the method .
6038	Pretty print an array
6039	Lookup a signal name by number .
6040	Looks up a signal by name .
6041	Return the signature of the given name .
6042	Set a signal to a signal .
6043	Check and adjust all the signatures .
6044	Show info signal .
6045	Handle an action .
6046	Handle print message .
6047	Handle a signal .
6048	Get the module name from a file .
6049	Search for file
6050	Return the absolute path of a Python script .
6051	Return a list of py files for the callername .
6052	Write a message to the output .
6053	Run the main program .
6054	 columnize commands .
6055	This function is called when a debugger is started .
6056	Close the connection .
6057	Send a message to the server .
6058	Complete an identifier .
6059	Add a string to the database
6060	Add a ignore filter .
6061	Return the path to the given filename .
6062	Returns the filename of the debugger .
6063	Return True if the tracer is started .
6064	Check if the given frame is a stop .
6065	Set the next frame .
6066	Trace the trace of the given function .
6067	Run default file .
6068	Check if a function is in the right frame .
6069	Delete a breakpoint
6070	Delete a breakpoint by number .
6071	Disable all breakpoints
6072	Disable a breakpoint by number .
6073	Delete all breakpoints in filename .
6074	Open the input .
6075	Read a line from the input .
6076	Prompt user for confirmation .
6077	r
6078	Set a number .
6079	Convert a query into a future .
6080	Restores the login request .
6081	Load a module .
6082	Iterate over documents in the project .
6083	Parse command line arguments .
6084	Convert json file to stream .
6085	Open a JSON file or CSV file .
6086	Normalize the data in a stream .
6087	Convert a date string into a float .
6088	Detect the encoding of a file .
6089	Stream json lines from a JSON file .
6090	convert filename to UTF - 8
6091	Open a CSV file and return the contents of it .
6092	Read a CSV file into a list of dictionaries .
6093	Main function .
6094	Create a new object from a file .
6095	Save token to json file .
6096	Perform a request .
6097	Perform a DELETE request .
6098	Wait for a project to build .
6099	Given a URL return the root URL .
6100	Save token to file .
6101	Make a JSON request .
6102	Make a POST request .
6103	Change path .
6104	Get the default account .
6105	Return documentation for this resource .
6106	Wait for a job .
6107	Make a GET request .
6108	Print results as CSV .
6109	Read parameters from a JSON file .
6110	Simplify a document .
6111	Create a project with a given language .
6112	Upload documents to a project .
6113	Parse command line arguments .
6114	Upload a stream to Luminoso .
6115	Upload a file to a file .
6116	Main entry point .
6117	Retrieve token from user credentials .
6118	Login to the user .
6119	Post login form .
6120	Create a data file
6121	Fetch the data per period .
6122	Prepare the view .
6123	Initialize the view
6124	Handle GET request .
6125	Handle a message
6126	Update the menu
6127	Returns a list of registered handlers .
6128	Called when a change is received .
6129	Called when a change is modified .
6130	Create the widget for this element .
6131	Initialize the widget .
6132	Destroy the widget .
6133	Called when the child is added .
6134	Remove the child widget from the widget .
6135	Iterate over all child widgets in the tree .
6136	Set the attribute of the widget .
6137	Update a change
6138	Notify about modified changes
6139	Find nodes matching the given query .
6140	Prepare the instance .
6141	Initialize the widget .
6142	Set the source widget .
6143	This method is called when a change is changed .
6144	Called when a new block has changed .
6145	Add new children to the block .
6146	Read the contents of a file .
6147	Print error message .
6148	Error parsing command line .
6149	Get a product by name .
6150	Expire a session .
6151	Reset the store .
6152	Search for a store search .
6153	Initialize a delivery system .
6154	Get the menu for the given store
6155	Add an item to the basket
6156	Add pizza to the basket .
6157	Add a side product to a basket
6158	Remove item from the basket
6159	Sets the payment method .
6160	Confirm the payment .
6161	Perform a GET request .
6162	Perform a POST request .
6163	Perform an API call .
6164	Append an item to the menu
6165	Add an exit item .
6166	Draws the screen
6167	Process user input .
6168	Select the selected item
6169	Parse a old menu
6170	Compute the top of a dataframe .
6171	Compute the top group of a DataFrame .
6172	Convert a string to a datetime .
6173	Convert datetime to string .
6174	Change the date format of a dataframe .
6175	Cast a column to the given type .
6176	Rank values in a dataframe .
6177	Calculate waterfall of a dataframe .
6178	 operator .
6179	Round values in a column .
6180	Return the absolute value of a dataframe .
6181	Create a pivot table .
6182	Create a pivot by group .
6183	Group a DataFrame by aggregation .
6184	Compute the cumulative sum of a dataframe
6185	Add missing rows to dataframe .
6186	Decorator to catch exceptions .
6187	Log a message .
6188	Log the time of a function .
6189	Decorator for log shapes .
6190	Renames values in a dataframe .
6191	Compute the sum of the values in a DataFrame .
6192	Combine columns aggregation .
6193	Get the parameter value from a function call .
6194	Remove all cache entries from the cache .
6195	Roll up a dataframe .
6196	Return the maximum value of a column .
6197	Return the minimum value of a column .
6198	Fillna with given column .
6199	Add an offset to a date object .
6200	Add a number of months to the given date object .
6201	Add a date object to the notebook .
6202	Parse a date string .
6203	Filter a dataframe by a date column .
6204	Calculate the percentage of columns in a dataframe .
6205	Corresponds to ada family_core .
6206	Gets the optimizer updates .
6207	Get training parameters .
6208	Perform optimization updates .
6209	Calculate the first glimpse sensor .
6210	Prepare the model .
6211	Compute the tensor .
6212	Apply a function to the test set .
6213	Vectorize target .
6214	Report the report .
6215	Run the training
6216	Sample the input .
6217	Compute the alignment weights for the current state .
6218	Compute the context vector .
6219	Concatenate a list of variables .
6220	Pad the dataset .
6221	Calculate the RMS of the gradients .
6222	Report the current time .
6223	Compute cost function .
6224	Run the scheduler .
6225	Build the loop variables .
6226	Initializes the network step .
6227	Compute the momentum core .
6228	Return if training flag .
6229	Skip the given n_ batches .
6230	Load parameters .
6231	Run the training .
6232	Run training .
6233	Run the valid step .
6234	Report the score map .
6235	Get the current data .
6236	Apply a function to the tensor .
6237	Report information about the parameters .
6238	Return the variable of the given type .
6239	Create a list of variables from a dataset .
6240	Return the shared value .
6241	Stack layers .
6242	Add layers to the stack .
6243	Encodes the input tensor .
6244	Decode x .
6245	Create a 2D Gaussian kernel .
6246	Register a layer .
6247	Monitor layer outputs .
6248	Return a list of all parameters .
6249	Setup variables for the input tensor .
6250	Compute the value of x .
6251	Save parameters to disk .
6252	Load parameters from file .
6253	Report network inputs .
6254	Register multiple parameters .
6255	Register a list of updates .
6256	Register training updates .
6257	Register monitors .
6258	Compute the norm of multiple l2 tensors .
6259	Dump one element to a file - like object .
6260	Load the contents of a file .
6261	Load parameters from file .
6262	Create request elements .
6263	Decodes the current state of the request .
6264	Parse credentials .
6265	Filter request elements .
6266	Login to the given provider .
6267	Normalizes a dictionary .
6268	Convert a list of items to a dictionary .
6269	Parse a JSON query string .
6270	Resolve a class by name .
6271	Create cookie .
6272	Save the data .
6273	Get data from the cookie .
6274	Get the serialized data .
6275	Generate the signature for the given parts .
6276	Serialize a value into a string .
6277	Check if the expiration time is valid .
6278	Check if the current expiration time is in seconds .
6279	Serialize the provider type .
6280	Return True if content is a binary string .
6281	Get the response content .
6282	Create request elements .
6283	Access user info .
6284	Decorator for login functions .
6285	Creates an OpenID authentication procedure .
6286	Return the session key .
6287	Set a session key .
6288	Generate a token generator .
6289	Log a message .
6290	Check if HTTP status is in category .
6291	Split a URL into parameters and params .
6292	Decorator for cross - origin methods .
6293	Set CORS headers .
6294	Return a dict of app keyword arguments .
6295	Convert an object into a string .
6296	Ensure an iterable is an iterable .
6297	Check whether two values are close .
6298	Decorator for deprecated functions .
6299	Deserialize a string into a AudioSegment object .
6300	Create a audio segment from a file .
6301	Create an audio segment from a numpy array .
6302	Execute a shell command .
6303	Returns a copy of this audio segment with the given threshold .
6304	Compute the FFT
6305	Generate frames .
6306	Normalize the operator by average
6307	Return a new AudioSegment with the given others .
6308	Resample this image .
6309	Serialize the current state to a pickle file .
6310	Calculate the spectrogram of this TimeSeries .
6311	Given a list of candidate offsets and offset fronts and a list of candidates returns the number of matching offset fronts for each candidate offset .
6312	Get the offset front - ID of the offset front s at the given index .
6313	Get the offset front ID after the beginning of this article
6314	Return a set of offset front IDs that match onsets .
6315	Returns a list of consecutive part of each onset .
6316	Update the portions of a segmentation mask .
6317	Get the position of the front by index
6318	Returns a list of all front ids in a time .
6319	Get a list of offsets for the given onset .
6320	Remove overlapping segmentation
6321	Remove all fronts from the given size .
6322	Given a list of samples and a set of samples return a dictionary of matched fronts .
6323	Merge adjacent segments .
6324	Split a mask into a list of masks .
6325	Downsample a mask .
6326	Compute the STFT task .
6327	A bandpass filter .
6328	A lowpass filter .
6329	Convert a list of data to tf input .
6330	Expand and standardize a dataset .
6331	Return True if two elements are equal .
6332	Return the audit scores for each feature in a group .
6333	Load the confusion matrices from a audit file .
6334	Convert a list of data to tf input .
6335	Update the index URL from configs .
6336	Looks for requirements . txt files .
6337	Resolve streams .
6338	Return a list of stream info .
6339	Resolve predicate by predicate .
6340	Handle an error .
6341	Push a sample to the stream .
6342	Push a single chunk to the stream .
6343	Get information about the stream .
6344	Open the stream .
6345	Calculate the time correction .
6346	Create a new child element .
6347	Create a new sibling element .
6348	Create a new sibling element .
6349	Set the name of the node .
6350	Set value .
6351	Append a child to the list .
6352	Create a new child element with the given name .
6353	Append a copy of element .
6354	Add a copy of element .
6355	Remove child element .
6356	Get the results of this resolver .
6357	Pair a word .
6358	This function is called when the script is completed .
6359	Compute the n - grams of the given token .
6360	Iterate over a given pipe .
6361	Apply a function to each item in an iterable .
6362	Given a word return a human - readable string .
6363	Perform a fuzzy query
6364	print the index of a word
6365	Add all relations to the results .
6366	Print help .
6367	Print information about the database .
6368	Get a DB key .
6369	do a geohash
6370	List all house numbers .
6371	Index a document .
6372	Print the score of a word .
6373	Compare two segments
6374	Send a response .
6375	Return a list of requests .
6376	Get a list of bits from a array .
6377	Try to reinterptet harray
6378	Convert a slice value to Slices .
6379	Find all files in a directory .
6380	Return the value of a parameter in iterable .
6381	Parse a list of items into a switch .
6382	Return a new signal with the same length .
6383	Return the max value of x .
6384	Check if the number is an integer .
6385	Create a case .
6386	Set the default stements for the parent .
6387	Register interfaces for the given object .
6388	Register before the simulation .
6389	Log changes to the current signal .
6390	Generate a PWProcess .
6391	Returns a list of all agents in the unit .
6392	Get the associated clk .
6393	Return a set of distinct elements in an iterable .
6394	Group a collection by a given function .
6395	Flatten a list of iterables .
6396	Merges nested if container .
6397	Remove signals from a netlist .
6398	Check if an assignment is too simple .
6399	Try to merge a PWProcess .
6400	Reduce a list of processes with the same name .
6401	Called when a request is received .
6402	Convert a unit object to RTL .
6403	Given a list of statements returns the name of the process and the outputs .
6404	This function is called when a signal is cut off .
6405	Returns the value of a signal with the given name .
6406	Synthesize an entity .
6407	Get the maximum id for a stm .
6408	Returns the maximum stmId for each statement .
6409	Write data .
6410	Change the direction of the interface
6411	Loads the contents of the file .
6412	Return a list of signals for this interface .
6413	Returns the name of the physical file .
6414	Return the length of the data .
6415	Returns the sensitivity for the given op .
6416	Evaluate the given operator .
6417	Converts the given value into an operator .
6418	Reconstruct bits to a h struct .
6419	Return the number of characters in start and end .
6420	Return a generator that yields a list of strings .
6421	Pretty print an interface .
6422	Create a list of frames from a string .
6423	Iterate over words .
6424	Packs the given data into the model .
6425	Clean signal meta .
6426	Given a list of statements and a list of statements and a list of statements and a list of statements return a set of values that can be returned .
6427	Given a signal and a list of signals and a list of signal names find the sensitivity .
6428	Get the context of this statement .
6429	Called when this operation is completed .
6430	Called when other is merged .
6431	Return True if two statements aremergable .
6432	Merge a list of statements .
6433	Merge two statement lists .
6434	Try to reduce a list of statements .
6435	On parent event dependent
6436	Set parent statement .
6437	Add stements to target
6438	Destroy this state .
6439	Create a registry for the given name .
6440	Return a signature for the given name .
6441	Clean as sub unit .
6442	Recursively walks all the fields in a signal .
6443	Unpack data from a struct .
6444	Sign the value .
6445	Asserts that the given process is the sensitivity .
6446	Evaluate the condition for the given conds .
6447	Connect a simUnit to another one .
6448	Create a clone of the current value .
6449	Create a new array with the given indexes .
6450	Return a vector of bits
6451	Perform HWProcess .
6452	Evaluate a param .
6453	Sets the value in the file .
6454	Convert an interface map into a H struct .
6455	Finalize the resources .
6456	Search for the index .
6457	Create an object from a Python object .
6458	Returns the autocast for the given signature or type .
6459	Converts a signature or value into a list of types .
6460	Walks the interface s parameters
6461	Returns a list of connected connections to the given dst interface .
6462	Packs the interfaces from the interface
6463	Convert a list of rom operators into a list of process objects .
6464	Set the state of this platform to RTL .
6465	Register an interface .
6466	Try to reduce and return a value
6467	Try to reduce a value if it exists .
6468	Returns the name scope for this class .
6469	Returns True if an object has been serialized to an entity .
6470	Create a type for the given type .
6471	Get the if container .
6472	Returns a list of the contents of a resource .
6473	Constructs a SimBitsT from the given width and signed size .
6474	Return a constant name .
6475	This function is called when the driver is cut off .
6476	Load the attributes of this dtype .
6477	Load a HDL struct .
6478	Load a HDLType from a given dtype .
6479	Returns the width of the item .
6480	Recursively walks the data into a tuple .
6481	Sign a value .
6482	Merge two statement lists .
6483	Get the indent number .
6484	Raise an exception if the given property is not empty .
6485	Register a parameter .
6486	Update parameters from this object .
6487	Register a unit .
6488	Register an interface .
6489	Register a new array .
6490	Get a single driver .
6491	Evaluate the expression .
6492	Create an operator with the given operands .
6493	Return a copy of this context .
6494	Try to connect to a unit .
6495	Propagate units .
6496	Try to connect the clk .
6497	Connect clk .
6498	Propagate the RST n to the given object .
6499	Propagate the rst code to the given object .
6500	Iterate over bits in a signal .
6501	Serialize an object to be serialized .
6502	Serialize an object and return its serialized representation .
6503	Serializes a set of parameters .
6504	Returns the name of the file .
6505	Make a list of association objects .
6506	Initializes the simulation for the given unit
6507	Return a SimModel object for the given unit .
6508	Connect unit signal to model .
6509	Create a simulation unit .
6510	Call onTWrite callback .
6511	Connect a signal to this port .
6512	Register the given signal .
6513	Connect this direction to this direction .
6514	Returns the part of the given direction .
6515	Check if the given process is running on the given process .
6516	Add a new process to the queue .
6517	Adds the given process to the given trigger .
6518	Schedules the comb update event .
6519	Schedules the apply values .
6520	RenameResolve strategy .
6521	Run comb processes .
6522	Run seq processes running on the system .
6523	Apply the values to this process .
6524	Return a copy of the given signature .
6525	Add signal to the signal .
6526	Add a new process .
6527	Run the given synthesised unit .
6528	Create a function that can be applied on the input uperands .
6529	Given a list of statements return a ternary ops .
6530	Create a temporary signal process .
6531	Calculate the distance between two strings .
6532	Compute the average hash of an image .
6533	Calculate the distance between two images .
6534	Set up the Vizio platform .
6535	Update the power state .
6536	Manages volume .
6537	 volume level .
6538	Down volume down .
6539	Set the volume level .
6540	Reset the object .
6541	Returns the piece at the given square .
6542	Remove piece at given square .
6543	Set the piece at the given square .
6544	Check if a move is a suicide or not .
6545	Return True if the user has a attack .
6546	Determines if the game is over .
6547	Returns True if this is a check .
6548	Returns True if the user should be played at least two times .
6549	Pop a move .
6550	Return a string representation of the piece .
6551	Push the given usi move to the current position .
6552	Return the zobrist hash of the given array .
6553	The symbol of the piece .
6554	Create an instance from a symbol .
6555	Returns a string representing the usi .
6556	Return a Piece instance from the given usi string .
6557	Parse commits .
6558	Parse the commit .
6559	Load config from CLI .
6560	Execute a command line from a command line .
6561	Add an argument to an argparse parser .
6562	Load configuration from file .
6563	Generate a YAML string .
6564	Generate a markdown string .
6565	Cast value to value .
6566	Return a list of dates between first_date and last_date
6567	Parse a date string .
6568	Load the given currency file .
6569	Set missing rates
6570	Compute missing rates for the given currency
6571	Get the rate for the given currency
6572	Convert currency to currency
6573	Concatenate n elements from an iterable .
6574	Called when a list of frames is clicked .
6575	Read n data from file .
6576	Write data to file .
6577	Map words between start and end .
6578	Return a list of comments .
6579	Add an array to the file .
6580	Close the DAF file .
6581	Generate the position for the given tdb .
6582	Close the file .
6583	Load the initial epoch .
6584	Compute the data from tdb2 .
6585	Handle a logging statement .
6586	Handle a bin operation .
6587	Check if the given dictionary is not valid .
6588	Check if the node is within logging statement .
6589	Called when a keyword node is found .
6590	Add an exception handler .
6591	Return the logging level of the given node .
6592	Get an exception handler name .
6593	Get the id attribute of a value .
6594	Return True if node is a bare exception
6595	Check if exception_info is valid .
6596	Delete a file if it exists .
6597	Create a widget for the database file .
6598	Render the PDF .
6599	Render PDF template to response .
6600	Return an HTTP quote string .
6601	Configure module .
6602	Convert a string to snake_case .
6603	Make the index for the given mcs .
6604	Parse price file
6605	Load lines from a file .
6606	Parse a price line .
6607	Translate a symbol into a string .
6608	Load all symbol maps from the repository .
6609	Get the session .
6610	Add a price .
6611	Import prices from CSV file
6612	Show the last prices for a symbol
6613	List the prices for a given date .
6614	Download prices .
6615	Prune price entries
6616	Get the default session .
6617	Add a new map .
6618	List all maps .
6619	Get a symbol by its identifier .
6620	Read lines from a CSV file .
6621	Map entity to price model
6622	Map model to price model
6623	Read configuration file .
6624	Get the template path .
6625	Create user config file
6626	Get the path to the config file .
6627	Get the contents of the config file .
6628	Set an option .
6629	Get an option .
6630	Save the configuration to a file .
6631	Parse symbol .
6632	Add a price .
6633	Add a price .
6634	Download a price .
6635	Get session .
6636	Returns a list of prices for the given date .
6637	Get prices on on date
6638	Remove all securitys
6639	Remove price from security symbol
6640	Download price data .
6641	Get all securities .
6642	Return a partial of the current state .
6643	Update child calls .
6644	Iterate over all children of this node .
6645	Decorator for multi - dec calls .
6646	Check if a student has equal part length .
6647	Ensures that the module has equal AST .
6648	Check if the user has a student code .
6649	Check for import of a state .
6650	Check if the user has output .
6651	Check if printout is done .
6652	Check if the code has an error .
6653	Check if the selected option has the correct feedback messages .
6654	Check a function .
6655	Return the result representation of a process .
6656	Override the given solution .
6657	Check if an instance is an instance in the solution process .
6658	Return all defined items .
6659	Create a child message
6660	Get an attribute from the tree .
6661	Check if the context loop has a context loop .
6662	Check if a state has a context
6663	Check if a student part exists .
6664	Check if the part of a student has an index .
6665	Check the arguments for the given name .
6666	Check the function definition .
6667	Get the supersample .
6668	Initialize the LDAP application .
6669	Initialize the configuration .
6670	Add an LDAP server .
6671	Remove a connection from the stack .
6672	Destroy an LDAP connection .
6673	Authenticate the user .
6674	Authenticate to the LDAP server .
6675	Perform an LDAP search .
6676	Get user groups .
6677	Get user information .
6678	Get user info .
6679	Get object .
6680	Return an LDAP connection .
6681	Make a connection to this user .
6682	Make an LDAP connection .
6683	Destroy a connection
6684	Search for collections .
6685	Search for labels .
6686	Search for a collection .
6687	Search for all jobs in a collection .
6688	Speak the client
6689	Sends a message to the server .
6690	Update s registry secrets
6691	Update the headers
6692	Verify that the client has secrets
6693	Download a file .
6694	Streams a file - like object
6695	Update authorization token
6696	Get or create a folder .
6697	Read the response .
6698	Get the current bucket .
6699	Update the client secrets
6700	Initialize the client .
6701	Load secrets from cache
6702	List all recent logs .
6703	List the logs for this extension .
6704	Create a folder in an endpoint .
6705	Initialize transfer client .
6706	Search all containers .
6707	Show the status of the client .
6708	Add a value to the client
6709	Remove client secrets
6710	Activate client secrets
6711	Delete a backend
6712	Update the base
6713	Generate basic authentication header .
6714	Generate a signature .
6715	Generate the signature for a request .
6716	Perform a DELETE request .
6717	Perform a HEAD request .
6718	Paginate a GET request
6719	Verify that all certificates are enabled .
6720	Remove an image
6721	Get the name of the s registry
6722	Returns a list of requirements for the given lookup .
6723	Get the singularity version .
6724	Check if software is installed .
6725	Return the absolute path of the install directory .
6726	Returns the thumbnail for the application .
6727	Run a shell command .
6728	Get metadata .
6729	Update the secrets client .
6730	Print the output of an output file .
6731	Kill commands .
6732	List CLI logs .
6733	Returns a list of collection names
6734	Update the secrets
6735	Update Google Storage client
6736	Get client for an image .
6737	Create an IPython notebook .
6738	Get the manifests in the given repo
6739	Get a manifest
6740	Get download cache .
6741	Extract the docker container environment .
6742	Update the base
6743	Update the secrets
6744	Get metadata dictionary .
6745	Read client settings .
6746	Get and update a setting .
6747	Update a setting .
6748	Generates a signature for the given names
6749	List the builder instances .
6750	Load a particular template by name .
6751	Get the IP address for the given name
6752	Run the build
6753	List all containers .
6754	Search all containers .
6755	List commands .
6756	Share images .
6757	Initialize the database .
6758	Get the build template .
6759	Search for shared endpoints .
6760	List all endpoints that match the given query .
6761	List all purple files .
6762	Create a new shared link .
6763	Read client secrets
6764	Build services .
6765	Delete an object .
6766	Delete a bucket .
6767	Destroy an instance .
6768	Get the subparser for the given parser .
6769	Generate a string for the descriptor .
6770	Get a temporary directory .
6771	Extract a tar archive .
6772	Extract blob2oci script .
6773	Get the hash of a file .
6774	Read lines from a file .
6775	Read a JSON file .
6776	Clean up files
6777	Push an image to the bucket .
6778	Get a collection or create it
6779	Get a collection by name
6780	Get a container by name .
6781	Get a list of images .
6782	Inspect a container
6783	Rename a file
6784	Move an image .
6785	Remove an image .
6786	Add image to registry .
6787	Push a new image .
6788	Parse the header of a recipe .
6789	Find a single recipe with the given pattern .
6790	Create a build package .
6791	Run a build .
6792	Update the metadata for a blob
6793	Format a container name .
6794	This function is used to use the terminal color .
6795	Return True if the given level is raised .
6796	Write message to stream .
6797	Display a table .
6798	Push an image to the container .
6799	Get a template by name .
6800	Get a manifest
6801	Get a build template .
6802	Update client secrets
6803	Return a string representation of a class .
6804	Raise an exception if the given path is a3 .
6805	Create a proxy from a file .
6806	Returns the URL for a Gravatar .
6807	Get the url for a Gravatar
6808	Check if an email exists
6809	Get the url of a Grade profile
6810	Generator over the chimera blocks
6811	Return the chimera blocks of a graph .
6812	Return a Resonance structure .
6813	Return a list of molecule objects .
6814	Normalize a molecule .
6815	Apply the transform rule to the molecule .
6816	Return the score for a molecule .
6817	Validate smiles .
6818	Remove bonds from a molecule .
6819	Return the Moliles as a string .
6820	Return a dictionary containing the colers of smiles .
6821	Return the Moliles as a string .
6822	Normalizes a molecule .
6823	Return the id of the molecule .
6824	Return the parent fragment of the molecule
6825	Return a copy of the molecule
6826	Return the isotopes of a molecule .
6827	Return the charge of the molecule .
6828	The super parent of the molecule
6829	Main entry point .
6830	Remove fragment patterns from the molecule
6831	Displays the number of fragments in a molecule
6832	Integrate anivp matrix .
6833	Get stats for a user .
6834	Returns the number of ids in the list of members .
6835	Get the number of teams in an org .
6836	Get all the repos for a given repo type .
6837	Returns the number of contributors in a repository .
6838	Get the pull requirements for a repository .
6839	Get all issues for a repository
6840	Get README .
6841	Get the license for a repository .
6842	Get all commits for a repository .
6843	Write an organization to a JSON file .
6844	Write the total information in a file .
6845	Write languages to file .
6846	Ensure the directory exists .
6847	Remove date from CSV file .
6848	Get the organizations for the gov .
6849	Connect to GitHub Enterprise .
6850	Check API limits .
6851	Connect to GitHub .
6852	Query for repositories .
6853	Get the organization .
6854	Write to a file .
6855	Create a project from gitlab .
6856	Create a project from a doecode record .
6857	Build a license object .
6858	Get traffic .
6859	Get a list of releases .
6860	Get referrers from url
6861	Get data for traffic .
6862	Write json to file .
6863	Write data to file .
6864	Check if data_to_check exists in CSV format
6865	Write data to a file .
6866	Write referrers to file .
6867	Return a generator that yields records from a DOE code file .
6868	Return a list of records from a DOE code URL .
6869	Process a JSON file .
6870	Login to GitHub .
6871	Get the addresses of all members of an org
6872	Write user information to a file .
6873	Connect to URL .
6874	Connect to Gitlab .
6875	Query for repositories .
6876	Convert a git repository to sloc .
6877	Compute the person hours in a given month .
6878	Remove empty strings from a dictionary .
6879	Read the query file .
6880	Query GitHub from a file .
6881	Submit a git query
6882	Wait for the current timestamp .
6883	Wait up to timeout .
6884	Load data from a JSON file .
6885	Save the data to a file .
6886	Create a VSS connection .
6887	Create a project analysis client .
6888	Create a TFS core client .
6889	Create a TFS git client .
6890	Create a TFS Git client .
6891	Get git repos for a project .
6892	Get the branches for a project .
6893	Get all commits of a year .
6894	Calculate the total number of commits .
6895	Write the commits to a file .
6896	Configure backends .
6897	Return a metrics interface .
6898	Write timing information to the given stat .
6899	Context manager for timer .
6900	Decorator for timer functions .
6901	Generate a tag .
6902	Log timing information .
6903	Log a histogram .
6904	Monitor the gauge stats .
6905	Order an enum field .
6906	Get enum value from database value .
6907	Convert the value to a Python value .
6908	Get the value of the enum .
6909	Resolve the given path .
6910	Given a dictionary of terms return a dictionary of tables that are in the given dictionary .
6911	Returns the mean of the sum .
6912	Mark the counter .
6913	Returns the mean rate of the timer .
6914	Mark value .
6915	Send a metric .
6916	Serialize a metric .
6917	Format a metric string .
6918	Add metrics to the buffer .
6919	Method to get an option from the config
6920	Convert JSON data to unicode .
6921	Get the value of the given section if it exists .
6922	Returns a dictionary with the hash of the ledger codes
6923	Returns the choices for the current division .
6924	Map exact invoice numbers to foreign map .
6925	Solve the SAT problem .
6926	Create a view .
6927	Create a form view .
6928	Create a method view .
6929	Create an API view .
6930	Create a generic API view .
6931	Create a model view set .
6932	Create a stream from a file descriptor .
6933	Read data from the kernel .
6934	Close the connection .
6935	Called when the connection is lost .
6936	Register a watch request .
6937	Unwatch an alias .
6938	Set up a watch .
6939	Set up the watch loop .
6940	Get an event from the stream .
6941	This method will be called when a file is created .
6942	Set the success interval .
6943	Update the failure interval .
6944	Close all connections
6945	Check if the connection is starved .
6946	Connect to NTP .
6947	Request the lookupd query .
6948	Set the maximum in - flight state .
6949	Add up a message .
6950	Add a callback to the listener .
6951	Removes a callback from the listener .
6952	Trigger an event .
6953	Publish a message to a topic .
6954	Set the feature transform mode
6955	Return prediction for training data .
6956	Calculate the theta of a vector s .
6957	Parse a log file .
6958	Clean up fastq files .
6959	Merge default adapter files
6960	Create a list of samples from a sample .
6961	Parse a depth file .
6962	Main entry point for coverage results .
6963	Set template file .
6964	Set main channel names
6965	Get user channel
6966	Render the given template .
6967	Render the template .
6968	Set the context for this process .
6969	Update the main fork with the given sink .
6970	Sets the secondary channel for the source .
6971	Update the attributes of this component .
6972	Set the compiler channels .
6973	Set the raw inputs forks
6974	Sets the secondary inputs of the channel
6975	Set extra inputs for the channel
6976	Parse coverage file .
6977	Parse the assembly file .
6978	Get the content of a sequence .
6979	Filter contigs using a set of filters .
6980	Returns the length of the assembly .
6981	Write the assembly to a file .
6982	Write the assembly report to a file .
6983	Removes the children of the given text .
6984	Returns a list of checks for each fork in the pipeline .
6985	Parse the checks in a pipeline .
6986	Parse a pipeline .
6987	Find the source of a fork process against a fork signature
6988	Get a list of LANes from a raw string .
6989	Establish a linear connection with a list of processes .
6990	Establish a fork connection to the given sink .
6991	Add unique identifiers to a pipeline .
6992	Remove unique identifiers .
6993	Check that the provided trace file exists .
6994	Return a dictionary mapping header values .
6995	Convert microseconds to seconds .
6996	Return the number of bytes in memory .
6997	Get the processes from the log file
6998	Clear the process information .
6999	Called when the log file is finished .
7000	Retrieve the log file .
7001	Given a list of resources and a list of values return a dictionary of memory warnings .
7002	Update process stats .
7003	Parse the log file .
7004	Update the exception
7005	Displays the screen overview .
7006	up down the screen
7007	The right left button .
7008	Read the last line of the log file .
7009	Return a dictionary of static files for the given pipeline .
7010	Convert a DAG file into a dictionary .
7011	Get the hash of the run file .
7012	Get the path of the nextflow command file .
7013	Split a sample_id into sequences .
7014	Run the pipeline status routine .
7015	This function is called when the input pipeline is run .
7016	Brew the given recipe name .
7017	List all recipes in a recipe .
7018	Validate pipeline string .
7019	Build an upstream pipeline .
7020	Given a pipeline and a pipeline fragment build a pipeline fragment .
7021	Define a pipeline string .
7022	Run auto pipeline .
7023	Returns a string representation of a component .
7024	Write a report to a JSON file .
7025	Parse log files .
7026	Replace contig names in asseembly_path .
7027	Remove temporary files .
7028	Parse files .
7029	Parse log file .
7030	Iterate over the given filters .
7031	Get contig id from contig string
7032	Get the plot data for each sample
7033	Write the report data .
7034	Run assembly report .
7035	Parse the assembly file .
7036	Get summary statistics
7037	Get a list of window labels for a window .
7038	Calculate the sum of the number of values in s .
7039	Get the sliding window of the sequence
7040	Run skesa .
7041	Write JSON report to JSON report .
7042	Returns the index of theTrim position in a list .
7043	Trim a range from a file .
7044	Calculate the optimal trim for a sample .
7045	Retrieve summary information from a file .
7046	Check the health of a summary file .
7047	Parse the log .
7048	Parse a process name string .
7049	Add a dependency to the pipeline .
7050	Search for the tree at the given template .
7051	Build header .
7052	Build the footer
7053	Set the main channels for the process .
7054	Set the initial inputs .
7055	Set secondary channels .
7056	Set the status channels for each process .
7057	Return a string representation of the resources .
7058	Return a string representation of a container .
7059	Generate the parameters string for the process .
7060	Returns a string representation of the parameters .
7061	Returns the manifest string
7062	Set the configuration for this process .
7063	Write a DAG to a JSON file .
7064	Render the pipeline .
7065	Write the configuration to the project .
7066	Export the parameters to a JSON file .
7067	Export directives in the process .
7068	Fetch docker tags from the pipeline .
7069	Build the program .
7070	Set the Kmer range
7071	Run the SPAdes .
7072	Get the id of the report
7073	Update the trace watch file .
7074	Update the log file .
7075	Send a live report .
7076	Start the live report
7077	Close the connection to the server .
7078	Convert the given adapter fasta file to a FASTA file .
7079	Run fastqc .
7080	Send a Mash output to a file .
7081	Run Mash output .
7082	Create a list of installed versions .
7083	Pre - process the mash output
7084	Print message with color_label .
7085	Return a list of arguments for each process in the dict
7086	Collects the arguments for each process .
7087	Guess file compression .
7088	Get the range of a qual .
7089	Return a list of encodings that are in the given range .
7090	Parse coverage table .
7091	Filter assembly to output file .
7092	Filter BAM file based on coverage info
7093	Evaluate the minimum number of assembly coverage .
7094	Get assembly size and contig size
7095	Run the coverage mapping for the assembly .
7096	Convert camel case to camel case .
7097	Return a map of process classes .
7098	Process a newick file .
7099	Perform a quick hull of a sample .
7100	Map W to the next best data .
7101	 median filter .
7102	Compute a Gaussian function for a Gaussian .
7103	Compute the SSM
7104	Compute the n - grams of a matrix X .
7105	Create a gaussian filter .
7106	Compute the nc between two records .
7107	Calculate the circular shift of X .
7108	Compute the embedded space .
7109	Plot formatting .
7110	Plot boundaries .
7111	Plot a list of labels for each gene .
7112	Plot one track .
7113	Plot a tree .
7114	Get the segments of the features in the given feature dimensions .
7115	Given a list of features return the maximum segment size .
7116	Compute the similarity between two features .
7117	Fit the scatter matrix .
7118	Fit the model to X Y .
7119	Read references from audio file .
7120	Find the estimation of a host .
7121	Helper function for writing a file .
7122	Returns a list of all algorithms that are boundary type .
7123	Get configuration for a feature .
7124	Returns a list of files in the input file structure .
7125	Build hierarchy references .
7126	Get the duration of a feature file .
7127	Write a mirex file .
7128	Returns the path to the dataset file with the given extension .
7129	Align a song to a song
7130	Estimate the beat number and frames for this object .
7131	Read the times and frames from the JAMS file .
7132	Compute the beat sync features .
7133	Read features from a JSON file .
7134	Create a file and write it .
7135	Return a list of all parameter names .
7136	Compute frame sync times .
7137	Returns the number of frames of this feature
7138	Set the features for this audio file .
7139	Select features .
7140	Prepares the feature .
7141	Preprocess a set of labels and labels .
7142	Run the algorithm .
7143	Print results to stdout .
7144	Compute the results for a segment .
7145	Compute the information gain .
7146	Process a track .
7147	Get the file name for the results .
7148	Process results from a file .
7149	Add a config variable .
7150	Compute the features for each audio file .
7151	Process a file .
7152	Calculate the cost of a Gaussian .
7153	Normalizes the given F .
7154	Normalize the maximum value .
7155	Normalizes X .
7156	Get the number of frames in a period
7157	Remove segments that are not empty .
7158	Wraps a list of clicks on an audio file .
7159	Return a numpy array of label indices with new bound indices .
7160	Processes a segmentation level .
7161	Align hierarchies .
7162	Compute distance between two nodes .
7163	Estimate k - means k - means
7164	Get clustered data .
7165	Run k - means .
7166	Compute the BIC .
7167	Return the magnitude of a matrix .
7168	Convert a list of segments into a numpy array .
7169	Convert a JSON object into a numpy array .
7170	Convert a list of segments to labels
7171	Convert a JSON file into a numpy array .
7172	Compute the FFT shift of X .
7173	Compute a list of labels .
7174	Filter an activation matrix .
7175	Get the module for the boundaries .
7176	Get labels module .
7177	This function is used to create a copy of the audio file .
7178	Run a flat file .
7179	Run the algorithms in a file .
7180	Processes a track .
7181	Process a file .
7182	Update the W
7183	Main function .
7184	Decorate a coroutine function .
7185	Returns an iterator that returns the next iteration .
7186	Translit to the given language .
7187	S pool .
7188	Run source on input stream .
7189	Create a connection to the server .
7190	Translate a phrase .
7191	Get the translation table for a given language .
7192	Print a translation table .
7193	Remove nodes from a network .
7194	Convert network to pandas DataFrame .
7195	Create a network from an HDF5 file .
7196	Set the variable in the network
7197	Get all the aggregate accessibility variables .
7198	Get the node ids of the given points .
7199	Plot the data .
7200	Set a category
7201	Find the nearest pois for a given category
7202	Compute the low connectivity nodes within the given impedance range .
7203	Add tags to node
7204	Make osm query .
7205	Build node query string .
7206	Perform OSM query .
7207	Check if value is a regex expression .
7208	Compare two values .
7209	Decorator for fluent methods .
7210	Compare a value against a value .
7211	Set the methods of an instance .
7212	Match the given request .
7213	Get a matcher by name .
7214	Initialize a matcher .
7215	Set the body .
7216	Set the response body .
7217	Set the value of a given key .
7218	Append functions to target .
7219	Trigger a request .
7220	Set the URL for the request .
7221	Set headers .
7222	Ensures that all headers are present .
7223	Ensure headers are present .
7224	Set the Content - Type header .
7225	Add params to the request .
7226	Set the body of the request .
7227	Add JSON matcher .
7228	Add a matcher .
7229	Read the contents of the file .
7230	Persist the current state
7231	Set the error .
7232	Reply to the mock .
7233	Matches a mock request .
7234	Activate a function .
7235	Set the mock engine
7236	Enable network .
7237	Return a mock instance .
7238	Remove a mock
7239	Activate the mock .
7240	Disable the mock engine .
7241	Return True if the given request should be used .
7242	Match the request against the mock .
7243	Return a copy of this request .
7244	Activate a function .
7245	Use the context manager .
7246	Add interceptor to the engine .
7247	Remove an interceptor with the given name .
7248	Get the setting for the given key .
7249	Decrypt the given SQL and return the result .
7250	Pre - save method .
7251	Get a placeholder value .
7252	Get a column by alias .
7253	Encrypt a placeholder
7254	Returns a list of YAML keys for the given data .
7255	Return base regression .
7256	Returns the cov .
7257	Recursively walk the tree .
7258	Calculate the scores for all clades in the tree .
7259	r Calculates the energy of the mean for a given variable
7260	Returns the squared variance of the tree .
7261	Compute the regression .
7262	Find the best root
7263	Set the TINY value and timepoints .
7264	Calculate the delta branch count at each point .
7265	Returns the cost of the given branch .
7266	Attach to the tree .
7267	Optimize coalescent time scale .
7268	Generate a random sequence from a profile .
7269	Normalize the profile .
7270	Set the categories .
7271	Set the counts of models in the model
7272	Set the sequence length .
7273	Attach sequences to tree
7274	Prepare the tree .
7275	Prepare nodes .
7276	Calculate the distance2 root of the tree .
7277	Reconstructs the results from the tree .
7278	Get the mutation matrix for a branch
7279	Return an expanded sequence .
7280	Fitch profiles to each terminal .
7281	Compute the fitch state of a node .
7282	Compare two arrays .
7283	Returns the number of sequences in the tree .
7284	Returns the likelihood of the ancestral likelihood .
7285	Returns the number of branch length for the given node
7286	Optimize branch length optimization .
7287	Optimize branch length global .
7288	Calculate optimal branch length .
7289	Optimize the sequence and branch length .
7290	Reconstructs the alignment .
7291	Compute the diagonal matrix .
7292	Create a custom rates .
7293	Return standard models .
7294	Fix the Q .
7295	Return the probability of a sequence .
7296	Compress a sequence .
7297	Return the optimal t - compressed representation of a sequence .
7298	r Compute the probability of the given profile pair .
7299	Resolves the model at t .
7300	Returns the log coefficient of a sequence .
7301	Set branch length mode .
7302	Filter the clock filter
7303	Plot the root to the tip .
7304	Resolve polytomies .
7305	Pretty print the file .
7306	Add coalescent model .
7307	Find the best root of the tree .
7308	Assure the given tree .
7309	Given a set of model parameters create the counts for that model .
7310	Read a VCF - format file .
7311	Reconstructs the ancestral results .
7312	Calculate the FWHM .
7313	Calculate delta function .
7314	Multiply a distribution .
7315	Assign dates to the tree .
7316	Setup the tree regression .
7317	Make a time tree optimization .
7318	Calculate the likelihood of the tree .
7319	Convert dates from the tree .
7320	Returns the date for the given node in the given interval .
7321	Get the maximum posterior region for the given node .
7322	Return the minimum of the interpolation .
7323	Compute the median values of the data .
7324	Return a numeric date
7325	Create a clock model from a regression model .
7326	Return a connection to the guacd server .
7327	Close the connection .
7328	Receive an instruction .
7329	Send data .
7330	Send an instruction .
7331	Create a handshake object .
7332	Convert unicode to unicode
7333	Load an instruction .
7334	Encodes an arg as a string
7335	Encode the argument as a string .
7336	Return the URL for the resource .
7337	Get the URL of the instance .
7338	Returns the URL for the class
7339	Download the object .
7340	Retrieve the parent job object .
7341	Prompts the user for a set of credentials .
7342	Perform an interactive login
7343	Displays the logged - in user .
7344	Print user s information .
7345	Return a new instance with the given filters .
7346	Return the range for the given chromosome .
7347	Return a new chromosome with the given position .
7348	Returns a list of facets .
7349	Process filters .
7350	Return the next page .
7351	Execute the query .
7352	Migrate a dataset migration .
7353	Main function .
7354	Download a vault folder from a local path
7355	Construct an instance from a dictionary .
7356	Logout from the current session .
7357	Make a request to the API .
7358	Get a child object .
7359	Cancel this object .
7360	Parse the ANN info into a dictionary .
7361	Convert a row to a dictionary .
7362	Get credentials from Netrc file .
7363	Save the macros to a file .
7364	Format a value .
7365	Normalize tabular data .
7366	Build a single row .
7367	Build a single line .
7368	Convert a row to a list of cell attributes .
7369	Format a table .
7370	Migrate a dataset .
7371	Validate a full path .
7372	Upload a file .
7373	Validate a full path .
7374	Validate the API host .
7375	Add a list of files .
7376	Annotate a list of records .
7377	Evaluate the expression .
7378	Set the format name .
7379	Register a new format formatter .
7380	Format the output of the given data .
7381	Generate tabulate data .
7382	Get user config directory .
7383	Get the system config directories .
7384	Read the default config file .
7385	Read config files .
7386	Get user config file .
7387	List of system config files .
7388	Returns a list of all files in the file .
7389	Write default config file .
7390	Read config files .
7391	Truncate a string .
7392	Replace two strings .
7393	Call all commands in a sequence .
7394	Apply options to a command .
7395	Apply an option to a command .
7396	Initialize options .
7397	Run the command .
7398	Run the clean documentation command .
7399	Truncate a string .
7400	Format a list of numbers .
7401	Format a row of headers
7402	Create a horizontal table of data .
7403	Generate a table of data .
7404	Render a template file .
7405	Check if type is number
7406	Check if the given type is a boolean .
7407	Checks if the given type is a bin type .
7408	Generate a key for a template .
7409	Generate a new keypair .
7410	Find objects in the given template .
7411	Insert an image .
7412	Export gene panel
7413	Find the first weekday of the given weekday
7414	Return the count of the given day .
7415	Reverse the end of the day .
7416	This function is called when the last week is found .
7417	Handle a single chunk event .
7418	Generate a list of variants for a given document .
7419	Export variants to a list of variants .
7420	Export a list of variants
7421	Add a user to the adapter .
7422	Return a dictionary of variants for a institute .
7423	Download a variant .
7424	Return a variant string .
7425	Verify a institute .
7426	Create a clinvar submission .
7427	Return a list of variants that cancer a institute .
7428	Create a variant .
7429	Get the evaluation for the given evaluation .
7430	List acmg criteria .
7431	Upload a gene panel .
7432	Download verification files .
7433	Get a list of genes that have an alias .
7434	Add incomplete penetrance info .
7435	Link genes to HGNC lines .
7436	Send request to MME server .
7437	Return a list of nodes that match factory
7438	Get the coordinates of the cytoband
7439	Get sub category .
7440	Calculate the length of a reference .
7441	Get end of a single variant .
7442	Parse coordinates from a variant .
7443	Check cyto band
7444	Create a new panel .
7445	Update panel .
7446	Export panel .
7447	Edit a gene .
7448	Save delivery report .
7449	Get a list of UTP terms .
7450	Displays the whitelist
7451	Build a phenotype
7452	Get gene information .
7453	Convert genes to JSON
7454	Displays all institutes in the dashboard .
7455	Display the transcripts in the PDB format .
7456	Display events on a given day .
7457	Return a dictionary of variants for a variant .
7458	Return a list of variants .
7459	Return a variant for a variant .
7460	Extract a variant from a variant .
7461	Parse a variant
7462	Generate header for variants .
7463	Get variant information for a list of genes .
7464	Get the prediction data for a list of genes .
7465	Create a variant for a variant .
7466	Find the bai file for a BAM file .
7467	Get observations from a loqus database
7468	Parse a gene object
7469	Return a string representation of a transcript .
7470	End the position of a variant .
7471	Returns the frequency of the variant .
7472	Generate a human version of a variant
7473	Link a variant to a given variant object .
7474	Get the cosmic link of a variant .
7475	URL for beacon link
7476	Link a variant to a variant .
7477	Return human readable string .
7478	Returns a list of the expected inheritance of a variant .
7479	Return a list of all calling calls for a variant .
7480	Return a dictionary of variants for a institute .
7481	Export an institute .
7482	Get clinvar submission .
7483	Create a variant for a variant .
7484	Submit a variant .
7485	Create a new evaluation object .
7486	Helper function to upload HGNC symbols .
7487	Create a file containing the verified variant document .
7488	Export all genes .
7489	Return a list of clnsig identifiers .
7490	Given a case_id return a list of compound compounds .
7491	Return a list of genes .
7492	Build an individual .
7493	Load variant variants .
7494	Get a institute .
7495	Show the collection objects .
7496	Given an internal id and an internal id load it .
7497	Update a institute .
7498	Get file handle .
7499	Get the net .
7500	Get the next and previous value of net .
7501	Check the year and error .
7502	Check the weekday .
7503	Parse case data .
7504	Add information about anpeddy file .
7505	Parse an individual .
7506	Parse individual samples .
7507	Parse a case file .
7508	Parse a Pedigree file .
7509	Build an evaluation object for a variant .
7510	Export mitochrial variants for a case .
7511	Check if a pathogenic is a pathogenic .
7512	Check if a pathogenic is a pathogenic .
7513	Returns True if a list of bs_terms is the same
7514	Given a list of acmg terms return a list of terms .
7515	Add gene information to a variant object .
7516	Fetch variants for a case .
7517	Returns a list of variants that are in the given institute .
7518	Add a variant to the database .
7519	Return a list of variants matching the query .
7520	Returns a list of valid variant objects that are valid .
7521	Get a list of causatives for a institute .
7522	Returns a list of causative variants that are not marked in this case .
7523	Returns an iterator over all causatives in a case .
7524	Delete variants for a case .
7525	Return a list of overlapping variants
7526	Return a dictionary of all variants in the case
7527	Get a VCF file for a variant .
7528	Returns a list of variants for the given sample .
7529	Get a connection object .
7530	Get a list of objects from a variant .
7531	Return header for clinvar objects .
7532	Return a list of CSV lines for the given submission object .
7533	Load all transcripts in transcripts
7534	This is a convenience method that is used to create an experiment .
7535	Build a transcript from the given exon info
7536	Delete panel .
7537	Delete all indexes .
7538	Delete a user from the database .
7539	Drop genes .
7540	Delete exons .
7541	Delete a case .
7542	Show all individuals in a institute .
7543	Parse match results .
7544	Show the cases of a institute .
7545	Load a login user instance .
7546	Login to public .
7547	Build an institute .
7548	Delete an event .
7549	Create a new event .
7550	Fetch all comments for a institute
7551	Get all the events for a user .
7552	Add a phenotype to a variant .
7553	Remove phenotype term from case .
7554	Create a new comment on a case .
7555	Parse the genotypes for a variant .
7556	Check if the given position is in the given coordinates .
7557	Search terms .
7558	Export transcripts to the database
7559	Load exons from the database .
7560	Load a region from a HGNC region .
7561	Return a list of all the events that match a given month .
7562	Return live objects for the given time .
7563	Parse requirements . txt .
7564	Get the existing gene for the given panel
7565	Update gene panel
7566	Build a new gene panel .
7567	Export panel object
7568	Get information about an archive .
7569	Migrate a database case .
7570	Migrate a case .
7571	Research a case .
7572	Return a list of HG gene objects .
7573	Locate a revocation term .
7574	Create a Flask app .
7575	Configure extensions .
7576	Register blueprint .
7577	Configure coverage .
7578	Return the aliases for the given symbol
7579	Build a panel object
7580	Verified variants file .
7581	Export variants of a variant
7582	Get a VCF entry .
7583	Serve the server
7584	Generate a MD5 key .
7585	Initialize the database
7586	Setup the database
7587	Index the adapter .
7588	Setup the experiment .
7589	Setup the experiment .
7590	Setup database .
7591	Return a list of institute objects .
7592	Parse the genetic models .
7593	Show the panels of an institute .
7594	Add a institute to the database .
7595	Update institute .
7596	Fetch a institute .
7597	Returns True if the date matches the given date .
7598	Parse a date and return a datetime object .
7599	Generate HPO gene IDs .
7600	Parse the rank score entry .
7601	Add an institute .
7602	Check if the connection is in the database .
7603	Initializes an application connection
7604	Load delivery report from database .
7605	Add a user to the database .
7606	Pileup genome .
7607	Load genes from gene lines .
7608	Update a case .
7609	Add links to a gene .
7610	Show a HGNC symbol
7611	Parse a HGNC line .
7612	Parse HG gene lines .
7613	Get an open clinvar submission for this user .
7614	Update a clinvar id .
7615	Get clinvar id for a submission .
7616	Add new variants and case data to clinvar submission collection .
7617	Update clinvar submission status .
7618	Get all clinvar submissions for a given user .
7619	Delete a clinvar object from a clinvar collection
7620	Given a case return a dictionary of clinvars
7621	Parse HPO term .
7622	Return a list of genes .
7623	Get the gene for the given HG symbol
7624	List genes .
7625	Check if the given panels exist in the database .
7626	Load clinical SNV variants .
7627	Load panels from the database
7628	Decorator to render a template .
7629	This function is used to find a institute .
7630	Given a login_user and login_user return a list of institutes .
7631	Get the HGNC ID for a gene .
7632	Update a panel
7633	Load all disease terms
7634	Load the disease terms .
7635	Parse the frequencies for a variant .
7636	Parse the frequency of a variant .
7637	Given a variant return a dictionary of frequency values .
7638	Show all users
7639	Build a HGNC gene
7640	Load the gene panel .
7641	Load the gene panel
7642	Compares two genes in a panel .
7643	Update version for new genes .
7644	Add a gene panel to the database .
7645	Get panel object
7646	Delete a panel
7647	Fetch a gene panel .
7648	Get gene panels .
7649	Build gene to panels
7650	Update panel object .
7651	Add pending actions to the given panel
7652	Apply pending results to panel
7653	Return a set of clinical symbols .
7654	List the cases in a case .
7655	Send an email .
7656	Load indexes from database .
7657	Update all the indexes in place .
7658	Drop all indexes .
7659	Build a MongoDB query
7660	Build a MongoDB query .
7661	Perform clinsig query
7662	Add regions to the MongoDB query
7663	Add gene filter to the database
7664	Remove the database
7665	Parse a panel file .
7666	Build clnsig object
7667	Load multiple gene IDs into the database .
7668	Load multiple transcript objects into the database .
7669	Load multiple transcript objects into the database .
7670	Get the gene for a HGNC identifier .
7671	Get the HGNC ID for a HGNC symbol .
7672	Fetch genes for a HGNC symbol
7673	Fetch all genes .
7674	Get the number of genes for the given build .
7675	Drop the gene collection .
7676	Drop the transcripts collection
7677	Drop the exons collection .
7678	Fetch all transcripts
7679	Build a HGNC symbol to a gene .
7680	Find a gene by alias .
7681	Get all genes by alias .
7682	Get a dictionary of genes for the HGNC collection .
7683	Return the HGNC gene for the given alias .
7684	Add a HGNC ID to the gene .
7685	Build an interval tree .
7686	Update the omim gene panel .
7687	Get a list of cases for a institute .
7688	Get a institute .
7689	Get matches from the match factory server .
7690	Match matching connection .
7691	This function is called when a match factory is deleted .
7692	Generate a case report .
7693	Print coverage report .
7694	Check if a institute is in the current user .
7695	Add a phenotype to a case .
7696	Return a list of phenotype actions .
7697	Delete an event .
7698	Get the status of a institute .
7699	Assign a institute .
7700	List the HPO terms .
7701	Mark validation .
7702	Mark a variant as causative .
7703	Send delivery report .
7704	Share a institute .
7705	Renders a institute .
7706	Research a institute .
7707	Upload a VCF to a VCF .
7708	Send a multiqc .
7709	Retrieve cases in a case .
7710	Create a case report .
7711	Generate coverage report .
7712	List clinvar submissions for a given user .
7713	Create an Excel file from the database .
7714	Update the synopsis .
7715	Return a list of diseases .
7716	Given a Variant object and a Variant object convert it to a cylinder .
7717	Create a new institute .
7718	Get a list of variants with sanger validation .
7719	Create contact dictionary .
7720	Send mme s delete request
7721	Returns a list of matches that match the match .
7722	Perform a match .
7723	Update the gene information
7724	Given a variant and a category return a dict of all the calling callers .
7725	Build transcript from transcript info
7726	Add a institute to the database .
7727	Given a variant return the cadd entry .
7728	Set case data from a vcf file .
7729	Update a variant .
7730	Update all variants in a case .
7731	Update a compound
7732	Update compound objects
7733	Update compound variants
7734	Update compounds for a case
7735	Load a variant from the database .
7736	Upsert a variant in the database .
7737	Load a variant bulk .
7738	Assign a institute to a case .
7739	Share a institute .
7740	Return a document for the variant .
7741	Mark a case as checked .
7742	Event for order validation .
7743	List all sanger ordered by user .
7744	Validate a institute .
7745	Mark a variant as causative .
7746	This method is called when an institute is clicked .
7747	Update ACMG .
7748	Parse a list of document ids
7749	Parse a simple id from a chromosome .
7750	Generate MD5 key for a document .
7751	Convert genes from the database .
7752	Get a variant ID from a variant object .
7753	Get the number of cases that match the institute .
7754	Update dynamic gene list
7755	Fetch a case .
7756	Delete a case .
7757	Add a case to the database .
7758	Replace a case .
7759	Update a case by its ID
7760	Submit an evaluation for a variant .
7761	Get a list of elimations for a variant
7762	Parse the transcripts
7763	Parse the gene request .
7764	Parse transcript request .
7765	Parse a txt line into a dictionary .
7766	Parse ensembl genes from a file .
7767	Parse contigs and end of contigs .
7768	Parse a exon request .
7769	Initialize a logger .
7770	Parse a Gim line .
7771	Parse a list of lines .
7772	Return a set of phenotypes that have the phenotypes found
7773	Show Mimotypes
7774	Convert string to integer .
7775	Format the month for each month .
7776	Format a day .
7777	Format the month name .
7778	Helper function to get the list of links .
7779	Get panel information .
7780	Parse a gene info dictionary
7781	Parse a list of genes .
7782	Parse a gene panel .
7783	Show diseases .
7784	Drop HPO terms .
7785	Return a dict of all the users that are in the store .
7786	Return a dictionary of conservation objects for a variant .
7787	Returns a list of conservation objects .
7788	Get the general case information for a institute .
7789	Return a group of cases in the database .
7790	Convert context to JSON .
7791	Get the year and month for a query
7792	Check if the given date is cancelled .
7793	Fetch a revocation term .
7794	Search HPO terms .
7795	Get a disease term .
7796	Fetch all disease terms .
7797	Load a disease term into the database .
7798	Generate gene list .
7799	Read an HDF5 file .
7800	Setup frequency axis
7801	Setup time axis .
7802	Read a filterbank file .
7803	Compute Parkes from the header
7804	Return a blank DC bin .
7805	Print information about this file .
7806	Calculate the extent of the table .
7807	Plot waterfall plot .
7808	Plot the time series .
7809	Write out a filterbank file .
7810	Calrate the bandpass number .
7811	Convert a coarse channel to a coarse channel .
7812	Apply Mueller .
7813	Calculate the Mueller temperature for a given cross .
7814	r Convert a string to a list of species .
7815	Write polfils to a file .
7816	Find the closest value to the given value .
7817	Rebin the given object .
7818	Unpack an 8 - bit array .
7819	Get the difference between the dio cross and a given feedtype
7820	Plot a diode diode .
7821	Plot calibration diode data .
7822	Plot the phase offsets .
7823	Open an HDF5 file .
7824	Setup selection range .
7825	Calculate the size of the selection
7826	Calculate the shape of the selection .
7827	Set the channels in the file .
7828	Sets up the frequencies
7829	Populate the timestamps in the file .
7830	Populate frequencies .
7831	Calculate the coarse channel .
7832	Calculate the number of blobs in the selection .
7833	Returns True if the selection is heavy .
7834	Read data from the file .
7835	Read all data into a numpy array .
7836	Read a single row from the file
7837	Read data from the container .
7838	Update the frequency bin from selection
7839	Print information about the file .
7840	Write out a file .
7841	Write to HDF5 file .
7842	Write to HDF5 file .
7843	Get blob dimensions .
7844	Get the high frequency resolution data file .
7845	Grab data from the frequencies
7846	Command line tool for creating spectra .
7847	Reads the first header of the file .
7848	Find the number of blocks in the file .
7849	Print the next data block .
7850	Plot the histogram .
7851	Generate filter bank header .
7852	Find the size of the header of a file .
7853	Command line tool .
7854	Create an HDF5 script .
7855	Fold the time samples in the diode switch
7856	Integrate the data .
7857	Get the flux for the given cal flux .
7858	Get center frequencies from frequencies
7859	r Calculate the temperature ratio for each observation
7860	Calculate the diode spec for a given band .
7861	Get Tsys .
7862	Calculate the spectra for the target source .
7863	Return the number of header lines in a file .
7864	Check if a file is a filter bank .
7865	Fix header offsets in file .
7866	Generates the header string for the given file .
7867	Convert angle value to signal angle .
7868	Calculate the number of integers in a file .
7869	Convert the traceback to a dictionary .
7870	Create a parser for the given record type .
7871	Create a parser for the zonefile line parser .
7872	Remove comments from a text .
7873	Add a default name .
7874	Parse a line of records .
7875	Parse a text into a zone zone .
7876	Parse a zone file .
7877	Quote a field
7878	Parse a schema string .
7879	Create a python package .
7880	Generate the source for a class .
7881	Decorator to disable auto store .
7882	Convert a record to JSON .
7883	Load a record from a dict .
7884	Load a record from a JSON record .
7885	Add a record to the database .
7886	Get the schema for the given name .
7887	Return a representation of the variable .
7888	Add a mixin to the given class .
7889	Create a Record from a class .
7890	Return the schema dictionary for a record .
7891	Get the root schema dict for a record .
7892	Iterates over input_stream .
7893	Write the output stream .
7894	Push a dictionary into an ordered dictionary .
7895	Get a list of results from the API .
7896	Get a list of filters .
7897	Return a list of entities with the specified attributes .
7898	Get an Entity from a URL .
7899	Try to find a different quote .
7900	Escape a list of strings .
7901	Returns an elementary rotation matrix .
7902	Construct a covariance matrix .
7903	Calculates the average of the average of an error
7904	Calculate the parallaxError
7905	Calculate the energy of a G .
7906	Calculate the energy of an error .
7907	Make a plot
7908	Returns the number of transits .
7909	Returns the distance between two points .
7910	Transform the coordinates of the coordinates to the given rotation matrix .
7911	Compute the coordinates of the spherical coordinates .
7912	Transform the covariance matrix to the covariance matrix .
7913	Returns the error factor for an observable .
7914	Make a plot from a pdf .
7915	Make the plot
7916	Apply a function to all the given functions .
7917	Decorator for debugging purposes .
7918	Convert a string to a unicode string .
7919	Takes a list of functions and returns a collection of elements .
7920	Exclude all elements from the collection .
7921	Apply a filter to the collection .
7922	Return an iterator over the items in this collection .
7923	Return a collection with the given func .
7924	Concatenate the elements of this collection .
7925	Perform a find operation .
7926	Return a list of paths to the system .
7927	Iterate over a group .
7928	Return a generator of the options for the given regdescr .
7929	Return a string representation of an event .
7930	Given a list of events build a list of runs .
7931	Report the results .
7932	Report the results .
7933	Report the results
7934	Clean the code
7935	Round x to the next value .
7936	Sort blocks by indices .
7937	Update cache access
7938	Calculate cycles for the kernel
7939	Analyze the results .
7940	Run the IACA analysis .
7941	Strip comments and whitespace from instruction lines .
7942	Strip unreferenced labels .
7943	Select the best block from the assembly .
7944	Select an selected block
7945	Select blocks from assembly file .
7946	Insert markers at start_line .
7947	Run iaca instrumentation .
7948	Main entry point .
7949	Simulate the model .
7950	Generator for space space .
7951	Get the last modified datetime .
7952	Check if arguments are valid .
7953	Main entry point .
7954	Main entry point .
7955	Return a symbol position for an integer .
7956	Transform a multidim declaration to an array declaration .
7957	Transform a multidim to an arrayRef .
7958	Find the type of the given AST .
7959	Decorator to force an iterable .
7960	Check that the variables in the kernel are equal .
7961	Set a constant .
7962	Substitute constants in the expression .
7963	Returns a dictionary of array sizes .
7964	Calculate the offset of an access variable .
7965	Remove duplicate accesses .
7966	The total length of each iteration .
7967	Iterate over the loop stack .
7968	Index the symbols in this expression .
7969	Given a set of variables return a dictionary of sympy calls .
7970	Return a dictionary of all relative distances to each variable .
7971	Convert global iterator to indices .
7972	Return the global iterator .
7973	Return the global iterator for the given indices .
7974	The maximum global iteration of the loop stack .
7975	Print kernel information .
7976	Print variables info .
7977	Print constants information .
7978	Print the kernel code .
7979	Convert a math AST into a symbol .
7980	Get the offset of the AST .
7981	Get the basename of the class .
7982	Get the type of the loop .
7983	Build a list of declaration declarations .
7984	Return a list of array declarations .
7985	Returns a list of the kernel loop nested .
7986	Build array declarations
7987	Find the inner most loop of a loop .
7988	Returns a copy of the array_ dimensions
7989	Build dummy calls .
7990	Build the kernel function declaration .
7991	Return a list of scalar declarations .
7992	Get the kernel code .
7993	Build a kernel call .
7994	Get the main code .
7995	Perform an iaca analysis .
7996	Build an executable .
7997	Convert a string to a sympy expression .
7998	Get the identifier for this file .
7999	Return the last modified datetime .
8000	Get cache data from the cache hierarchy .
8001	Calculate the bandwidth of the benchmarks .
8002	Get the compiler for this machine .
8003	Parse the event name .
8004	Ensures that there is no overlap in the range .
8005	Get the path of the header file .
8006	Align an iteration with cl boundary .
8007	Return the load count for the memory hierarchy .
8008	Returns a list of HITs .
8009	Return a list of cached cache levels .
8010	Returns the set of store indexes .
8011	Returns a list of all cache counts .
8012	Get information about the memory hierarchy .
8013	Change environment variable .
8014	Configure the argument group .
8015	Report results .
8016	Parse markdown description .
8017	Schedules a retry .
8018	Build the item description .
8019	Returns True if the user was logged in .
8020	Get course content .
8021	Get the content for a course run .
8022	Helper function to update a list of users
8023	Send a course refund notification .
8024	Send an offer assignment notification .
8025	Get logging configuration .
8026	Retry an order .
8027	Request an order .
8028	Get Sailthru client .
8029	Get a key from the cache .
8030	Set a cache object .
8031	Get the configuration for a variable .
8032	Get the filename of the setting .
8033	Get value by version .
8034	Return the most recent eplus version .
8035	Get file references .
8036	Populate object from JSON data .
8037	Returns a list of external files
8038	Set the default values for all tables .
8039	Prepares all the fields in the file .
8040	Get the extended name of the field .
8041	Return a dict of short references to the external files .
8042	Get the value of a given column .
8043	Update the value in the field
8044	Update an existing record .
8045	Set default values for this field .
8046	Add fields to this record .
8047	Pop the value at index .
8048	Insert value at index .
8049	Delete the record .
8050	Register a record hook .
8051	Register a link .
8052	Create a regex for the given intent .
8053	Return the remaining duration in seconds .
8054	Serialize this event .
8055	Perform HTTP request
8056	Get a list of services .
8057	Try to create a directory .
8058	Configure an organization service .
8059	Register a new CA
8060	Set recording state .
8061	Update event status .
8062	Update agent state .
8063	Return the file path to the specified file .
8064	Update a configuration file .
8065	Check if the server is enabled .
8066	Initialize logging .
8067	Home preview images .
8068	Serve a preview image .
8069	Run all modules .
8070	Parse a vcal .
8071	Get a service scheduler .
8072	The main loop .
8073	Start the agent loop .
8074	Make an error response
8075	Make a JSON response .
8076	Get internal state
8077	Return a dictionary of events .
8078	Create an event .
8079	Delete an event .
8080	Modify event with given uid .
8081	Return a list of configuration parameters
8082	Ingest an event
8083	Start capture events .
8084	Render the fragment .
8085	Returns a list of all the resources in this graph .
8086	Return a dictionary representation of the resource .
8087	Initialize the pods from a dictionary .
8088	Add content to the list .
8089	Add a resource .
8090	Add a resource URL .
8091	Initialize the js function .
8092	Convert resources to HTML .
8093	Convert resource to HTML .
8094	Handle GET request .
8095	Renders a standalone html response .
8096	Render the document as a standalone HTML .
8097	Calculate the PFDR
8098	Convert a list of values to one dimension .
8099	Return the values for the given error table .
8100	This function computes the posterior covariance matrix for the posterior .
8101	Return a dataframe with the final error table .
8102	Return the summary error table for the given dataframe
8103	Compute error statistics .
8104	Find the cutoff for the results .
8105	Compute the score of a classifier .
8106	Given an IPF file and an IPF file return an entry .
8107	Create a peptide from a peptide file .
8108	Create a protein file .
8109	Subsample a file .
8110	Reduce the input file .
8111	Apply scores to a file .
8112	Filter q mass files .
8113	Get a group by id .
8114	Create a new group .
8115	Delete a group .
8116	Get group members .
8117	Update the members of a group .
8118	Get the effective member count for a group .
8119	Checks if the given group is the effective member of the given netid .
8120	Modify Sphinx configuration .
8121	Create a new dataset .
8122	Decrypt a key .
8123	Get stdin .
8124	Get stdout and stdout
8125	Get stdout and stderr from stdout .
8126	Get the debug command .
8127	Context manager for running stdin .
8128	Context manager that yields stdout and stderr .
8129	A context manager that yields stdout and stderr .
8130	Return a context manager for debugging .
8131	List all cli empty account .
8132	Get an empty container .
8133	Decorator for stdout .
8134	Decorator for stderr .
8135	Log an error .
8136	%prog print help file
8137	Print the print usage .
8138	%prog print_version
8139	Perform a request .
8140	Post an account .
8141	Delete an account .
8142	Updates a container .
8143	Returns the head of an object .
8144	Get an object .
8145	Updates an object .
8146	Post an object .
8147	Resolve the given option .
8148	Return a copy of this CLIContext
8149	Write headers .
8150	Show user authentication .
8151	Generate a temporary URL .
8152	Quote a string .
8153	Returns a list of containers for a container .
8154	Get a client .
8155	Encrypt the given key .
8156	Decrypt an AES key
8157	Upload a directory structure .
8158	Put an account .
8159	Put a container .
8160	Return the body of the manifest .
8161	Create a container .
8162	Generate a temporary URL .
8163	Write the trans - id to stdout .
8164	Print help for a command .
8165	Check if the buffer is empty .
8166	Encrypt a key .
8167	Get the status of a repository .
8168	Get pull request
8169	Get pull requests
8170	Mark all items in the database .
8171	Get the items published by the given position .
8172	Render the hero slider .
8173	Acquire the reader .
8174	Release the reader .
8175	Acquire the lock .
8176	Add a task to the registry .
8177	Remove a task from the registry .
8178	Get a task .
8179	Return a list of all tasks .
8180	Return a dictionary representation of the object .
8181	Create a Task object from a dictionary .
8182	Execute a perceval job .
8183	Initialize the archive manager .
8184	Run the job .
8185	Execute the method on the archive .
8186	Create an index .
8187	Create a mapping
8188	Generate JSON encoder .
8189	Write items to the writer .
8190	Add a task to the scheduler .
8191	Remove a task from the scheduler .
8192	Iterate over the items in the database .
8193	Validate the args for a task .
8194	Parse archive arguments .
8195	Perform a job .
8196	Schedules a job .
8197	Cancel a job .
8198	Listen .
8199	Listen for jobs .
8200	Starts the scheduler .
8201	Schedules a task .
8202	Cancel a task .
8203	Handle a successful job .
8204	Handle failed job .
8205	Build job arguments .
8206	Get the contents of a secret
8207	Register the admin meta .
8208	Register a view .
8209	Reverse the URL .
8210	Get the view name .
8211	Given a version number return the version number .
8212	Resolve a key from a cursor .
8213	Get the selected engine .
8214	Parse a database path .
8215	Parse a database configuration from a URL .
8216	Parse a database URL .
8217	Create a new authentication request .
8218	List users .
8219	Create a new password .
8220	Build view field
8221	Parse a boolean value .
8222	Parse an integer .
8223	Return the parser for the given type .
8224	Return a dictionary of settings .
8225	Create a ModelDict from a model .
8226	Encode a base64 string .
8227	Create a new field .
8228	Create a validator for the given data struct .
8229	Compute the cartesian product of a parameter dictionary .
8230	Return a list of unique points .
8231	Change logging kwargs .
8232	Decorator to use simple logging configuration .
8233	Try to create directories for a log config file .
8234	Get a list of strings .
8235	Rename log file .
8236	Set the logger .
8237	Extract replacements from a trajectory .
8238	Show the progress bar .
8239	Try to replace parser arguments .
8240	Convert a parser to a string .
8241	Find the options for the given parser .
8242	Find multiple multiprocess keys in a dictionary .
8243	Check the log config .
8244	Parse the config file .
8245	Handle the log configuration .
8246	Create logging handlers and tools .
8247	Finalize the tool .
8248	Start stdout .
8249	Write buffer to stdout .
8250	Compare two dictionaries .
8251	Compare two inputs .
8252	Decorate a function to run a trajectory .
8253	Decorator for deprecated functions .
8254	Decorate a function with multiple keyword arguments .
8255	Decorator to change keyword arguments .
8256	Decorator to retry a function .
8257	Ensure that the prefix names are defined .
8258	Add parameters to the network .
8259	Run a Network on a neuron
8260	Compute the Euler scheme .
8261	Add the parameters of the Lorenz model to the trajectory .
8262	Compute the diff between two values .
8263	Create a storage service .
8264	Create a storage storage object .
8265	Add parameters to a trajectory .
8266	Compute the difference between two values .
8267	Generate an HDF5 file .
8268	Check if all parameters in a group in a group .
8269	Builds a dictionary of model eqs .
8270	Pre - build a trajectory
8271	Build the model .
8272	Build the model for each model
8273	Pre - build a trajectory
8274	Build and build a trajectory
8275	Add the parameters of the simulation .
8276	Compute the fano factor for a given neuron .
8277	Compute the Fano factor factor .
8278	Perform analysis on the given trajectory .
8279	Add a network to a network .
8280	Add monitors to the network .
8281	Make the folder of the trajectory
8282	Plot the result .
8283	Print the graphs
8284	Run the spiketimes of a trajectory .
8285	Get the batch number for all options
8286	Given a trajectory and a batch return a list of dictionaries .
8287	Get the variables of the node .
8288	The NNTreeNode function .
8289	Rename this object .
8290	Set the run branch .
8291	Convert node to message message .
8292	Remove a subtree .
8293	Delete a node .
8294	Remove a node or leaf .
8295	Removes a node from the given branch .
8296	Translate a shortcut name into a boolean .
8297	Add prefix to the start node .
8298	Determine the type of a node .
8299	Add a generic item to the start node .
8300	Add a node to the tree .
8301	Create a link on an instance .
8302	Check if split_names is valid .
8303	Creates a new parameter group in the cluster .
8304	Create any parameter or result .
8305	Set the details tree node .
8306	Iterate over nodes of a given node .
8307	Make a child iterator .
8308	Iterate over the nodes of a node .
8309	Perform a fast search .
8310	Perform a search on a node .
8311	Search for all found items .
8312	Get the kids of the node .
8313	Add group from storage .
8314	Add a leaf from the storage .
8315	Return a list of all directories
8316	Return the debug tree .
8317	Get the parent node
8318	Add a group .
8319	Add a link .
8320	Remove a link with the given name .
8321	Add a leaf
8322	Remove this node from the tree .
8323	Remove a child from this group .
8324	Check if the item is in the tree
8325	Get default value .
8326	Get the children of the object .
8327	get groups
8328	Get the leaves of the tree .
8329	Return a copy of the link
8330	Store a new trajectory with the given name .
8331	Store the trajectory .
8332	Load a child .
8333	Load a trajectory .
8334	Add a parameter group .
8335	Add a parameter
8336	Add a result group .
8337	Add a result to the model .
8338	Add parameter group .
8339	Adds a derived parameter .
8340	Add a config group .
8341	Add a config
8342	Evaluate a single individual .
8343	Add the commit variables to a trajectory .
8344	Make a commit message .
8345	Flatten a nested dictionary .
8346	Flatten a flat dictionary .
8347	Create a progress bar .
8348	Get the arguments for the given function .
8349	Get the keyword arguments for the given function .
8350	Format a timestamp as a datetime .
8351	Convert a port to a TCP socket .
8352	Make sure the path is a directory .
8353	Reset self .
8354	Returns the remaining string for the given index
8355	Convert f to a dictionary .
8356	Remove the given key from the dictionary .
8357	Convert f_ann to string
8358	Make the result of a given time .
8359	Make a shared result for a given trajectory
8360	Create shared data .
8361	Store request data .
8362	Get the data node for the store .
8363	Returns True if item is supported .
8364	Create a shared data object .
8365	Re - store multiple processes in a trajectory .
8366	Lock a lock .
8367	Send shutdown signal .
8368	Finalize the socket .
8369	Start the client .
8370	Send a REQ request
8371	Acquire a lock .
8372	Listen .
8373	Put data into server .
8374	Detect a fork .
8375	Handle data .
8376	Main loop .
8377	Receive data from the queue .
8378	Receive data from the socket .
8379	Store the given arguments .
8380	Store a message .
8381	Store references to the storage service .
8382	Decorator to parse a config file into a dictionary .
8383	Collect a section from the parser .
8384	Collect configuration variables .
8385	Return a dictionary of keyword arguments .
8386	Add parameters to the trajectory .
8387	Convert a rule number to a binary matrix .
8388	Make an initial state .
8389	Plot a pattern .
8390	Return a cellular automaton for a given rule .
8391	Run the automaton .
8392	Update the state of the event .
8393	Get the overview group
8394	Load data from the tree .
8395	Store a message .
8396	Load items from an iterable
8397	Checks the given trajectory file .
8398	Store several items in an iterable .
8399	Closes the server s closed routine .
8400	Extract file information .
8401	Backup a trajectory into an HDF5 file .
8402	Read out a row of columns .
8403	Prepare the merge table .
8404	Load the meta data from a trajectory
8405	Load a sub branch .
8406	Check the current pypet version .
8407	Fills the run table with updated run information .
8408	Load exploration variables .
8409	Store explorations .
8410	Create an overview table from a list of tables
8411	Store a trajectory .
8412	Store a sub branch in the tree .
8413	Create a leaf instance .
8414	Return a list of load nodes .
8415	Store nodes in the tree .
8416	Create a list of all store parameters .
8417	Get or create a table .
8418	Get a node by name .
8419	Create all set attributes .
8420	Returns a list of all native types in a file .
8421	Add a row to a file .
8422	Insert a row into a table .
8423	Extract the insert dictionary .
8424	Remove all characters that are not in max_length .
8425	Creates a new group if it doesn t exist .
8426	Returns a new group with the specified key .
8427	Store the annotations in a file .
8428	Load annotation file .
8429	Create a new trajectory group .
8430	Update the trajectory group .
8431	This method is used to load a trajectory node .
8432	Extract missing flags from data dictionary .
8433	Add a summary of the meta table
8434	Add the metadata table .
8435	Helper function to store data from a dictionary .
8436	Store a parameter or result .
8437	Write a shared array into an HDF5 file .
8438	Write a shared table to HDF5 file .
8439	Write a dictionary into an object table .
8440	Write data to HDF5 store .
8441	Write a file into an other array .
8442	Write data into an HDF5 file .
8443	Delete a link .
8444	Returns True if the instance is deleted or not .
8445	Write a table into an HDF5 file .
8446	Create a description for a PTItem table .
8447	Get a column from the table
8448	Returns the longest length of a string
8449	Creates a dictionary containing the contents of an HDF5 file .
8450	Read a dictionary of objects from a given leaf .
8451	Read a shared data file .
8452	Reads a table .
8453	Read an array .
8454	Load a trajectory .
8455	Make a set name for a set index .
8456	Set properties of the model .
8457	Add a list of dynamic imports to the list .
8458	Set the crun parameter for the given name or index .
8459	Iterate over each trajectory .
8460	Shrink the trajectory to disk .
8461	Add a new parameter .
8462	Create a preset parameter .
8463	Prepare the experiment .
8464	Get the result from the run group .
8465	Check if the run information is completed .
8466	Remove all parameters that are stored in this model .
8467	Copy a skeleton from a node .
8468	Gives all the parameters in the given build_dict .
8469	Update the run information .
8470	Add run information
8471	Lock the parameters .
8472	Lock the derived parameters .
8473	Finalize the model .
8474	This function is called by the f_load method
8475	Perform a load operation .
8476	Backup the trajectory .
8477	Make a list of wildcards for this wildcard .
8478	Merge two trajectories into another one .
8479	Merge all used run names and annotations .
8480	Rename a full name .
8481	Merge the derived parameters from another trajectory .
8482	Merge the potential links .
8483	Merge the config .
8484	Merge two trajectories .
8485	Merge results from another trajectory .
8486	Migrate this trajectory .
8487	Store this trajectory .
8488	Restore the default value of all parameters
8489	Set all parameters to index
8490	Make a single run
8491	Get the list of run names
8492	Get the run information .
8493	Find the index of a list of names matching the given criteria .
8494	Start a single run .
8495	Finalize the run .
8496	Set run information .
8497	Set the run information
8498	Construct an instance of the given constructor .
8499	Helper function to get a dictionary of items
8500	Finalize the run .
8501	Get a dictionary of values
8502	Return a dictionary of the results
8503	Store items in an iterator .
8504	Load items from an iterator .
8505	Remove items from an iterator .
8506	Delete all the links of the group .
8507	Remove all children of this node .
8508	Delete items from an iterator .
8509	Return a single run .
8510	This function is used to set a single run .
8511	Configures the pool
8512	Configure frozen pool .
8513	Process single run .
8514	Ensures that a new SCOOP data is set .
8515	Run a single run on a single run .
8516	Configure logging .
8517	Configure niceness .
8518	Start a single run .
8519	Run a single trajectory
8520	Wraps logging .
8521	Load a class from a string .
8522	Create a new class and return it .
8523	Returns the length of the range .
8524	Return the value as a string .
8525	Compare two values .
8526	Get the range of this parameter .
8527	Wraps the given iterable .
8528	Expand the given iterable .
8529	Check if the data is valid .
8530	Store the object
8531	Load data from disk .
8532	Load the array parameter
8533	Compare two values .
8534	Check if data is supported .
8535	Serialize a matrix .
8536	Build names .
8537	Reconstruct a CSC matrix .
8538	Load data from a dictionary .
8539	Store the state of this object as a dictionary .
8540	Load data from a pickle file .
8541	Translate a key to a string .
8542	Convert a f_val to a string .
8543	Convert a f to a dictionary .
8544	Set keyword values .
8545	Get the value of the result .
8546	Set the result of a single item .
8547	Check if item is supported .
8548	Store the values in the model .
8549	Load data from a dictionary .
8550	Set an entry on disk .
8551	Store the data in the database .
8552	Load the given json dictionary .
8553	Merge all files in folder
8554	Upload a file .
8555	Download a file from a file .
8556	Create a new session .
8557	This function is called when the job is run .
8558	Start a file with the given data .
8559	Multiply a trajectory .
8560	Run an Euler integration .
8561	Perform a postprocess on a neuron .
8562	Add parameters to a trajectory .
8563	Add exploration of I and tau_ref .
8564	Pre - run a network .
8565	Execute a network on a network .
8566	Extract subruns from a trajectory .
8567	Execute a network run in a network .
8568	Add parameters of Components
8569	Pre - run the network .
8570	Run a network .
8571	Run a network with experimental parameters .
8572	Make a filename from a trajectory
8573	Return the next iterator .
8574	Merge all trajectories in a folder
8575	Handle a signal .
8576	Read configuration from a file .
8577	Request an Ecobee pin .
8578	Request the access token .
8579	Refreshes a token .
8580	Get a list of thermostats
8581	Write tokens to file .
8582	Set HVAC mode .
8583	Set fan minimum on time .
8584	Set the hold temp .
8585	Set a climate hold .
8586	Delete a vacation
8587	Resume a program .
8588	Send a message .
8589	Set the humidity level for the given index .
8590	Generate a random delay .
8591	Generate a random timeout .
8592	Generate timeout renewing time .
8593	Generate time for lease time .
8594	Return a dict of the attributes of this object .
8595	Reset connection attributes .
8596	Get the timeout for the given function .
8597	Set the timeout for the given function .
8598	Send the discovery process .
8599	Select offer .
8600	Send the FSM request .
8601	Set the timers .
8602	Process an received packet .
8603	Check if an received packet is received .
8604	Reset the state of the state .
8605	This method is used to change the current state .
8606	Set the state of the state .
8607	Called when the state is received .
8608	Pops the state
8609	Handle an error message .
8610	Wait until the response is reached .
8611	 timeout .
8612	 timeout .
8613	Wait until the request is reached .
8614	Handle offer .
8615	Called when a packet is received .
8616	Handle incoming packet .
8617	Handle an ACK message .
8618	Handle a Nak packet .
8619	Handle an ACK message .
8620	Handle an incoming packet .
8621	Called when the lease has expired .
8622	Set the value of the query .
8623	Add a new value with the given name .
8624	Remove a value by name .
8625	Get the status of the server
8626	Create and return the output
8627	Main entry point for get_status .
8628	Validate the message .
8629	Read a tdms file .
8630	Add the definitionormation data
8631	Convert a tdms file to fcs file .
8632	Check if the diff is equal .
8633	Create a new patch
8634	Delete next patch
8635	Delete a patch .
8636	Check if a file is in a patch .
8637	Backup a file .
8638	Add a file .
8639	Run the command .
8640	Create the directory .
8641	Copy this directory to another directory .
8642	If the file is a File create it .
8643	Copy this file to another directory .
8644	Get the current directory .
8645	Backup a file
8646	Refresh the diff .
8647	Unapply a given patch .
8648	Unapply the top patch .
8649	Unapply all patches in the database .
8650	Apply a patch to the series .
8651	Apply next patch to the series .
8652	Apply all patches .
8653	Read the series file
8654	Save the series to a file .
8655	Add a patch line .
8656	Insert a list of patches .
8657	Add patches .
8658	Remove a patch from the line .
8659	Returns the patches after the given patch .
8660	Returns the patches before the given patch .
8661	Return the patches until the given patch .
8662	Replace a patch .
8663	Create version .
8664	Check if the version is valid .
8665	Add arguments to the parser .
8666	Add an argument to the parser .
8667	Add a parser to the parser .
8668	Set the subcommands .
8669	Add a subparser to this parser .
8670	Check if file is in patch .
8671	Add a file to the next patches .
8672	Revert the given file .
8673	Import a patch .
8674	Import a list of patches .
8675	Add a way to the graph .
8676	Return a generator of all node ids that are not present
8677	Add a node to the graph .
8678	Build the route for the given relation .
8679	Create a route short short name .
8680	Get the agency id for a relation .
8681	Process public transport relations .
8682	Create a relation .
8683	Create dummy data .
8684	Given a list of agencies return a list of Agencies .
8685	Creates a dummy trip for the given stops
8686	Write the contents of the file .
8687	Copy all files to destination .
8688	Build agency from relation .
8689	Return a list of Stop objects from the relation .
8690	Build a shape for the relation .
8691	Returns the supported versions of the response .
8692	Send a value to the device .
8693	Authenticate a list of U2F devices .
8694	Register a new U2F .
8695	Authenticate a U2F device .
8696	Register a list of U2F devices .
8697	Convert a dictionary to a string .
8698	Wrap a flawless function .
8699	Wrap the given class with the given error threshold .
8700	Returns True if the filepath matches the given filepath .
8701	Parse an email address and return it .
8702	Get entry from entry tree .
8703	Convert markdown to reST .
8704	Serve a configuration file .
8705	Record an error .
8706	Convert a URL to an image string .
8707	Convert a string to an Image object
8708	Decorator to validate an image
8709	Check if the given image size is a big big .
8710	Check if the given width is a bigenough image .
8711	Check if the given height is a bigenough image .
8712	Parse a category .
8713	Parse the value of a field .
8714	Return an iterator over the items in the XML .
8715	Save error to log file .
8716	Parse the fields from the database
8717	Parse an item into a dictionary .
8718	Get an instance of the database .
8719	Save item .
8720	Download a file .
8721	Load the source
8722	Get all the headers of the source
8723	Set the network access settings .
8724	Run a docker command
8725	Add files to the docker .
8726	Add a file and rename it .
8727	Gets the enrollments for a course .
8728	Returns a list of course enrollments for the given ID .
8729	Get enrollments for a section .
8730	Get enrollments for a section .
8731	Gets the enrollments for a regid .
8732	 enrollments for a user .
8733	Get all the roles in a given account .
8734	Get roles in an account .
8735	Returns the list of course roles in the given account .
8736	Get a single role .
8737	Get a role by account ID .
8738	Get a course
8739	Get the course by its ID .
8740	Get all courses in a given account .
8741	Get courses in an account
8742	Get the published courses in an account
8743	Get the published courses in an account .
8744	Returns a list of courses for the given regid .
8745	Create a new course .
8746	Updates a course
8747	Get the activity for a given term .
8748	Get the grades for a given term .
8749	Get the statistics for a given term .
8750	Get activity by its ID .
8751	Returns a list of course assignments for the given ID .
8752	Get student summaries by its ID .
8753	Get the student activity for the given database .
8754	Get a single student message .
8755	Get all external tools in an account .
8756	Get all external tools in a course .
8757	Creates an external tool .
8758	Updates an external tool .
8759	Delete an external tool .
8760	Check that the given object is required .
8761	Get the user s profile .
8762	Get a list of users for a course .
8763	Returns a list of User objects for the given INI .
8764	Create a new user .
8765	Get logins for a user .
8766	Update user login .
8767	Returns the next page of the response .
8768	Get the resource URL .
8769	Get pagination resource .
8770	Get a resource .
8771	Put a resource .
8772	Post a resource .
8773	Delete a resource .
8774	Get a list of admin admins .
8775	Create a canvas admin .
8776	Creates a new admin by its ID .
8777	Delete an admin .
8778	Delete an admin by ID .
8779	Creates a new grading standard for a course .
8780	Get a canvas section .
8781	Get a section by its ID .
8782	Get all sections in a course .
8783	Get all sections in a course .
8784	Get all sections in a course .
8785	Get a list of sections with the given ID .
8786	Create a new section
8787	Update a section
8788	Get a list of quizzes .
8789	Get an account
8790	Get a list of sub accounts .
8791	Update an account
8792	Update a canvas account .
8793	Get the authentication settings for an account .
8794	Updates the auth settings for the given account .
8795	Get a term by its ID
8796	Import a SIS import model .
8797	Import a directory .
8798	Get the status of a SIS import .
8799	Builds a zip file from a directory .
8800	Get assignments for a course .
8801	Updates an assignment .
8802	Gets the available report types for the given account .
8803	Get a list of reports for an account .
8804	Create a new report .
8805	Create a new course provisioning report .
8806	Create a SIS export report .
8807	Create an unused courses report .
8808	Get report data .
8809	Gets the status of a report .
8810	Delete a report .
8811	Move detections to the given label .
8812	Flip detections in label .
8813	Return a copy of the given object .
8814	Returns a configuration dictionary .
8815	The empty value of the editor .
8816	Parse args and kwargs .
8817	Create metrics for the given list of metrics .
8818	Setup logging .
8819	Configure the registry .
8820	Create a dictionary of metrics .
8821	Get a metric by name .
8822	Handle the home page .
8823	Handle the metrics request .
8824	Give the alpha API .
8825	Make sure the HTTP message has the same type .
8826	Perform a query against the API .
8827	Return the information about the pod
8828	Return the results of this pod
8829	Encode a request .
8830	Call the API .
8831	Perform a GET request .
8832	Perform a DELETE request .
8833	Make a PUT request .
8834	Perform a POST request .
8835	Submit a query .
8836	Group sentences by group .
8837	Disambiguate a PDF .
8838	Submit a disambiguation query .
8839	Segment a text .
8840	Get language recognition .
8841	Get concept by conceptId .
8842	Fit the model with the given features .
8843	Return the score of the given features .
8844	Fit the model to each MDR cell .
8845	Fit the model .
8846	Return the score of the given features .
8847	Fit the model .
8848	Transform the features .
8849	Return the score of the given features .
8850	Return a MDR for the given data .
8851	Generate the n - way models for a given model .
8852	Plot the MDr grid of a MDR instance .
8853	Get the configuration for the given app .
8854	Return the value for the given key .
8855	Return a vector with the given members .
8856	Return a vector with the specified members .
8857	Evaluate the given file .
8858	Evaluate the given stream .
8859	Evaluate a string .
8860	Create a repl module .
8861	Run the CLI .
8862	Return a MultiFunction with the given dispatch function .
8863	Add a method to the lmap .
8864	Add a method to the collection .
8865	Get a method by key .
8866	Remove method from lmap .
8867	Remove a method from the collection .
8868	Check if v is a macro .
8869	Locate the line of the form .
8870	Decorator for parsing a parse function .
8871	Assert that the given node is not in tail position .
8872	Assert that the node is a tail of the statement .
8873	Resolve a bare symbol .
8874	Resolve a variable name .
8875	Parse an AST .
8876	Return whether or not this variable is a warning .
8877	Put a new symbol .
8878	Map a list of entries to a string .
8879	Return a string representation of an iterable .
8880	Return a string representation of an object .
8881	Return a human - readable representation .
8882	Fix missing locations .
8883	Compile and execute the given form .
8884	Compile python module .
8885	Compile a list of modules .
8886	Compiles code into a Python AST .
8887	Return a sequence from a sequence .
8888	Munge a string .
8889	Convert a string to a replacement string .
8890	Return a fraction .
8891	Get a logging handler .
8892	Create a Map .
8893	Split a collection into n elements .
8894	Decorate a context with a location .
8895	Read a namespace from a namespace .
8896	Read a collection .
8897	Read list .
8898	Read vector .
8899	Read a set from the stream .
8900	Read a map string .
8901	Read a string .
8902	Read symbol .
8903	Read keyword .
8904	Read metadata from the reader .
8905	Read function .
8906	Read a quoted string .
8907	Expand a syntax quote form .
8908	Process a syntax quote form .
8909	Read syntax quoted form .
8910	Read a quote from a context .
8911	Return the first Lisp form of a reader .
8912	Read a character .
8913	Read a regular expression .
8914	Read a reader macro .
8915	Read next comment .
8916	Read next token .
8917	Read a stream from a stream .
8918	Read a string from a string .
8919	Read a file .
8920	Update the location of a line .
8921	Increment the pushback depth .
8922	Get the next token from the stream .
8923	Convert code into bytes .
8924	Get a list of bytecode from a source file .
8925	Return the path to a cache file .
8926	Replace all the imports in sys . meta_path .
8927	Return a module spec for the given path .
8928	Execute cached code .
8929	Compile a Basilisp module .
8930	Execute the given module .
8931	Create a symbol .
8932	Complete text .
8933	Get or create a PMap .
8934	Generate a keyword .
8935	Create a chain of dependencies from a list of dependencies .
8936	Load an attribute .
8937	Decorator to generate a simple AST .
8938	Return an iterator over the AST of the given form .
8939	Returns a Python AST with the given line .
8940	Decorate a function to create a pyast with the location of the node .
8941	Decorate a function to define the location of the AST .
8942	Check if v is dynamic .
8943	Check if v is redefable .
8944	Return an AST .
8945	 expression definition .
8946	Determines if a function should be called on a re definition .
8947	Convert a pyast node into a Python AST .
8948	Generate a name for a string .
8949	Convert function arguments to Python AST .
8950	Converts a function into a Python AST .
8951	Convert multiple functions to py AST .
8952	Convert a function into a py AST .
8953	Generate pyast AST .
8954	Return a pyast AST .
8955	Invoke the given node .
8956	Convert a quote node to Python AST .
8957	Loop through nodes and add dependencies .
8958	Convert a node into a Python AST .
8959	Convert the given node into a Python AST .
8960	Generate an exception AST .
8961	Try to pyast .
8962	Convert a local symbol to a Python AST .
8963	Generates an AST for the given var name .
8964	Convert a variable into a Python AST .
8965	Convert a node into a pyast AST .
8966	Returns a pyast AST for the given node .
8967	Convert a module to a host form .
8968	Convert constant value to Python AST .
8969	Convert a literal value to a Python AST .
8970	Generate a pyast AST .
8971	Return an iterable of imported imports .
8972	Return an import from a module .
8973	Return an AST .
8974	Create a set of members .
8975	Create a set of members .
8976	visit a ExceptHandler node .
8977	Visit an expression .
8978	Return an astroid . FunctionDef .
8979	Return an astroid . While node .
8980	Return an astroid . Try node .
8981	Create a new module .
8982	Return the first element of a sequence .
8983	Return the rest of a sequence .
8984	Return the nth element of a collection .
8985	Return the nth occurrence of the given collection .
8986	Return the cons of a sequence .
8987	Convert o to a sequence .
8988	Concatenate sequences .
8989	Create a copy of a list of pairs .
8990	Returns a collection with the given arguments .
8991	Apply a function to a function .
8992	Return the value of an object .
8993	Compare two types .
8994	Divides a number into an integer .
8995	Sort a collection by key .
8996	Returns True if the given collection contains the given keys .
8997	Get a single value from a file .
8998	Convert an object into a dict .
8999	Returns a Python object .
9000	Return a string representation of an object .
9001	Collect a list of arguments from a list .
9002	Decorate a function into a trampoline .
9003	Decorate a function with attributes .
9004	Decorate a function with meta data .
9005	Convert a f into a function that will return a function that can be used as the function .
9006	Resolve an alias .
9007	Resolve a variable .
9008	Add an generated Python value to the given variable name .
9009	Bootstrap a dynamic variable .
9010	Add a variable to the namespace .
9011	Add a variable to the namespace .
9012	Find a namespace by its name .
9013	Find a variable in a namespace .
9014	Find a variable in the context .
9015	Add a default import .
9016	Add an alias .
9017	Add a variable to the graph .
9018	Convert a lmap .
9019	Find the variable with the given symbol .
9020	Add an import .
9021	Get the import entry .
9022	Add a relationship to a variable .
9023	Returns the corresponding variable .
9024	Return the final referenceers for the given references .
9025	Add all references to this namespace .
9026	Get or create a new namespace .
9027	Get or create a namespace
9028	Get an object by name
9029	Remove a namespace .
9030	Return True if text is a completion matcher .
9031	Returns a generator for completion aliases .
9032	Complete imports and aliases .
9033	Returns a list of symbols that match the given value .
9034	Returns a list of strings that match the given value .
9035	Complete a string .
9036	Return a tuple of the arguments of the sequence .
9037	Return a list of members .
9038	Return a list of members .
9039	Create a representer with the given style .
9040	Decrypt a token .
9041	Encrypt a JSON .
9042	Delete a cache .
9043	Convert to Python object .
9044	Close the stream .
9045	Parse a FiQL string into an expression .
9046	Dump a NDB model to a file .
9047	Handles the object hook .
9048	Decode a datetime object .
9049	Decode a date value .
9050	Convert an object to JSON .
9051	Validate version string
9052	Generate a changelog
9053	Return a list of strongly connected components .
9054	Make a topological sort .
9055	Set the parent of the expression .
9056	Get parent .
9057	Add an operator .
9058	Add an element to the tree .
9059	Add an operator and return an operator .
9060	Adds an operator to an expression .
9061	Decorator to log a function .
9062	Parse the received messages .
9063	Convert a list of tuples into an OrderedDict .
9064	Check if a command is valid .
9065	Prepare send message .
9066	Flush the socket messages .
9067	Enable a slide .
9068	Save template .
9069	Load template from file .
9070	Get information about a specific about .
9071	Extract lines from a file .
9072	Locate the package . json file .
9073	Parse a package json file .
9074	Handle an API error
9075	Check if the response is valid for yourls API .
9076	This function is used to plot the waves .
9077	Interpolate a wave .
9078	Get the label of each variable in the input .
9079	Verify that waveforms are compatible .
9080	Load the systemJS manifest .
9081	Return a namedtuple with the trace parameters .
9082	Run trace .
9083	Return shorturl of given URL .
9084	Expand a short .
9085	Returns the URL stats for the given short .
9086	Return stats for the given filter .
9087	Get database stats .
9088	Echo the ste command .
9089	Echo a command .
9090	Log a message .
9091	Decorator that returns a cached value .
9092	Yield chunks of iterable .
9093	Wraps a function in chunks of chunks .
9094	Flatten an iterable .
9095	This is a decorator for debugging .
9096	Print a table to stdout .
9097	Create a dummy class .
9098	Create a human readable string from a string .
9099	Connect to the YOURL API .
9100	Run a trace module .
9101	Add links to the requirements . json file .
9102	Make a common entry .
9103	Make a multi entry .
9104	Convert a list of operators to words .
9105	Generator for chunk noise
9106	Return the chunk parameters for the given frequency vector
9107	Write a touchstone file .
9108	Compute the bound waveform for a wave .
9109	Build units .
9110	Return a copy of the wave .
9111	Calculate the area of the running area .
9112	Validate the minimum value of the input wave .
9113	Return the cosine of the wave .
9114	Return a cosh .
9115	Computes the distance between a wave .
9116	Computes the angle of a wave .
9117	Compute the average of a wave .
9118	Convert wave to database .
9119	Compute the derivative of a wave .
9120	Calculate the Fourier data .
9121	Calculate the FFT of a wave .
9122	Integrate wave .
9123	Compute the Fourier Transform .
9124	Create a db of data .
9125	This isfti .
9126	Calculate the number of points in a wave .
9127	Calculate the number of points .
9128	Tells wave .
9129	Calculate the integral of a wave .
9130	Calculate group delay .
9131	Log wave .
9132	Compute the n average of a wave .
9133	Return the number of numbers of a wave .
9134	Returns the number of nodes of a wave .
9135	Return the minimum of the wave .
9136	Calculate the phase of a wave .
9137	Convert complex to integer .
9138	Return the square of the wave .
9139	Sub wave .
9140	W complex wave .
9141	Convert complex to float .
9142	Convert complex to integer .
9143	Return the value of a wave .
9144	Find files in a directory .
9145	Get short description .
9146	Build an expression .
9147	Remove the next line from the list .
9148	Get a list of functions from an expression .
9149	Returns a list of comments that match the given expression .
9150	Parse an expression .
9151	Remove whitespace from a list of quotes .
9152	Split a text into a tuple .
9153	Convert a number into a tuple .
9154	Convert a number to a scientific value .
9155	Returns a string representation of a number
9156	Converts a string to a float .
9157	Return the fractional number of a string .
9158	Convert a string into a float .
9159	Returns the power of a string .
9160	Convert a suffix string to a string .
9161	Remove extra quotes from an expression
9162	Convert a number to a scientific string .
9163	Convert a number to a scientific tuple .
9164	Find the source map comment for a file .
9165	Check if the app has the extension
9166	Run a bundle
9167	Trace the given app .
9168	Check if a dep_tree matches the tree .
9169	Format a hexdump argument .
9170	Parse a docstring .
9171	Return a list of valid identifiers .
9172	Return a deferred that will add the given action .
9173	Split a line into a list of quotes .
9174	Check the initial context for initialization commands .
9175	Return help text for a function .
9176	Find a function by name .
9177	Return a list of functions .
9178	Check if arg is a flag .
9179	Process the arguments passed in .
9180	Extract the value of a keyword argument .
9181	Invoke a single function .
9182	Invoke the given line .
9183	Invoke a string .
9184	Parse a parameter .
9185	Parse a return line .
9186	Classify a section .
9187	Classify a line .
9188	Join paragraphs .
9189	Wraps the main document and returns a string with the given parameters .
9190	Convert a value to a type .
9191	Convert data from binary to binary .
9192	Returns the size of the given type .
9193	Format a value .
9194	Validate a type .
9195	Check if the given type is a known type .
9196	Split the given type into sub - types
9197	Instantiates a type from the given subtypes .
9198	Return the type of the given type .
9199	Check if the given type is a known format .
9200	Injects a complex type into this object .
9201	Load type module .
9202	Returns True if the arguments are missing .
9203	Add a parameter to the annotation .
9204	Set the return info for the given type .
9205	Set the return info .
9206	Match a short - name to a short name .
9207	Returns the type of a parameter .
9208	Return a signature string .
9209	Format the return value .
9210	Convert a positional argument to a value .
9211	Check that the arguments are valid .
9212	Convert an argument to the given value .
9213	Format the message .
9214	Serializes this message to a dictionary .
9215	Check that all arguments are valid .
9216	Parse a list of valid validators .
9217	Find all objects in a container .
9218	Find a context from a module .
9219	Get the help text for a function .
9220	Decorate a parameter .
9221	Decorate a function as a custom return type .
9222	Decorate a function as a type .
9223	Create a context decorator for a class .
9224	Annotate a function .
9225	Create an annotation .
9226	Return the short description of a function .
9227	Load all django commands
9228	Install a crontab
9229	Print all tasks in crontab
9230	Remove all comments from crontab
9231	Create a schema .
9232	Load the project configuration .
9233	Save project config to file .
9234	Define a singleton class .
9235	Get all projects that are dependent on this project .
9236	Decorator for post - process functions .
9237	Initialize the project .
9238	Set the value of a set item .
9239	Set a new attribute to the given value .
9240	Create a new instance from an iterable .
9241	Set a new value .
9242	Set many values .
9243	Modify a function .
9244	Collects the arguments from a list of arguments .
9245	Decorator to use a function to use .
9246	Apply a function to a given state .
9247	Return the view with the given state
9248	Convert a fold to a list of elements .
9249	Apply a function to a state .
9250	Set the value of the attribute .
9251	Iterate over an iterable .
9252	The kind of this element .
9253	Main function .
9254	Step towards towards .
9255	Handle input .
9256	Move robots .
9257	End the game .
9258	Move a player .
9259	Play a game .
9260	Make a move
9261	Returns the winner of the user .
9262	Returns a generator of all potential games .
9263	Process item .
9264	Open a S3 pipe file
9265	Upload a chunk to S3 .
9266	Create a file - like object .
9267	Get the state of an account .
9268	Gets the asset state for the given asset .
9269	Get a single block .
9270	Get the hash of a block .
9271	Gets the amount of block sys fee .
9272	Get the state of a contract .
9273	Gets a raw transaction .
9274	Get a storage value .
9275	Get the output of a transaction .
9276	Invoke a script .
9277	Invoke a JSONRPC function .
9278	Invoke a script .
9279	Sends a raw transaction .
9280	Validate an address .
9281	Perform a JSON - RPC request .
9282	Check if a string is hash256 .
9283	Check if a string is a hash160 string .
9284	Encodes a list of arguments into a single object .
9285	Decodes the result into a result .
9286	Decorate a function with the first keyword argument .
9287	Create a timezone from an instruction
9288	Apply a datetime to the given datetime .
9289	Save the file .
9290	Render the barcode .
9291	Calculate the checksum of the EAN .
9292	Render code .
9293	Connect to the server .
9294	Main entry point .
9295	Download file from S3
9296	Upload file to S3 .
9297	 down sync files .
9298	Return the diff between two files .
9299	Parse an environment variable .
9300	Set basic password
9301	Set the API key .
9302	Get JSON content from a folder .
9303	Return a dict of schemas .
9304	Get the schema from the database .
9305	Get the resolver for this schema .
9306	Validate the object .
9307	Get list of valid examples .
9308	Get the JSON content for invalid examples .
9309	Get the URL for the user .
9310	Get auth code from url
9311	Get an auth token .
9312	Get user id .
9313	List files in a folder .
9314	Create a directory .
9315	Add a comment .
9316	Decode an object .
9317	Set the drop target for the given object .
9318	Start drag operations .
9319	Set the default LW .
9320	Inspect the object .
9321	Show a shell .
9322	Migrate a font
9323	Load page .
9324	Get param from tag .
9325	Send a message to the UI
9326	Show the tip of the tool tip .
9327	Set mouse down .
9328	Move the selected objects
9329	Resize the widget
9330	Press key press event
9331	Delete the selected objects .
9332	Duplicate the selected objects .
9333	Refreshes the image .
9334	Calculate the best position of the widget .
9335	Get py data .
9336	Set the py data
9337	Find py data
9338	Delete an item .
9339	Delete all items .
9340	Clear all columns .
9341	Set selection .
9342	Get string selection
9343	Set client data .
9344	Append a string .
9345	Return the representation of the given object .
9346	Get the object reference
9347	Create a duplicate of this object .
9348	Add child to sizer .
9349	Set the parent of the component
9350	Draw the background of the window .
9351	Erase the background .
9352	Called when a canvas is changed .
9353	Find modules in rootpath .
9354	Return a sorted list of columns .
9355	Reset the view .
9356	Update all the values in the grid .
9357	Update column attributes
9358	Sorts the given column .
9359	Clear all items in the grid
9360	Create a ComboBox .
9361	Insert a column in the grid .
9362	End edit .
9363	Returns True if the key is accepted
9364	Set the cursor key .
9365	Decorator to register type handler .
9366	Enable item .
9367	Checks if the item is enabled .
9368	Enable the menu .
9369	Check if the menu is enabled .
9370	Removes the specified menu .
9371	Submit the data
9372	Set an object tag .
9373	Render HTML table with html
9374	Return a DataDocumenter for the given object .
9375	Parse the signature of a signature .
9376	Import object by name .
9377	Import a role object .
9378	Display an alert message .
9379	Prompt user for user .
9380	Select a font dialog
9381	Select a color dialog .
9382	Choose a directory dialog .
9383	Find a dialog .
9384	Sets the item has children
9385	Set the icon
9386	Show the window .
9387	Parse a resource file .
9388	Save rsource to file
9389	Build windows .
9390	Build a component from the GUI
9391	Connect a component
9392	Convert property name to string .
9393	Set text data
9394	Return a list of lines in a docstring .
9395	Load the given object .
9396	Inspects the given object
9397	Activate a child
9398	Update the name of an object .
9399	Show a context menu
9400	Return the representation of the image .
9401	Add an expression filter .
9402	Register a function as a node filter .
9403	Fail if path is not a document .
9404	Fail if path is no current path .
9405	Check if path has current path
9406	Check if path has no current path
9407	Select option .
9408	Apply a filter to the expression
9409	Get a browser .
9410	Returns the xpath of this expression .
9411	Check if the given node matches the filters .
9412	Switch to frame .
9413	Accept an alert .
9414	Accept a confirmation .
9415	Show a confirmation of the dialog .
9416	Accept a prompt .
9417	Show the prompt .
9418	Save the page as HTML .
9419	Save screenshot .
9420	Raise an error if the server error is set .
9421	Check if the node matches the given value .
9422	Check if a field has a checked field .
9423	Check if a field has no selector .
9424	Check if a field has a selector .
9425	Check if a field has no selector .
9426	Assert that the query matches the query .
9427	Assert that the query is no text .
9428	Fail if the given title is not met .
9429	Assert that the given title matches the given title .
9430	Check if the given title exists .
9431	Check if there is no title
9432	Find all elements that match criteria .
9433	Find the first element in the list
9434	Return the inner content of a node .
9435	Return the inner text of a node .
9436	Normalize a URL .
9437	Decorator for setter methods .
9438	Synchronize the given function .
9439	Determines if the error should be raised .
9440	Compare the results of the query .
9441	Return True if the result cache at least size .
9442	Check if options is None .
9443	Format a failure message .
9444	Returns True if the count matches the given count .
9445	Normalizes text .
9446	Normalize whitespace .
9447	Convert text to regex .
9448	Returns True if this request matches the expected path .
9449	Resize the window to the specified height .
9450	Start the server .
9451	Set the advanced property .
9452	Set the instance method .
9453	Set the class method .
9454	Return the traceback string .
9455	Return the string representation of an object .
9456	Get the logger for the given instance .
9457	Set the logger .
9458	Send a request to the API .
9459	List of available channels .
9460	List of users .
9461	Make a message .
9462	Translate message to Slack .
9463	Send a Slack message
9464	Send a Slack channel
9465	Start the Slack API .
9466	Run the client .
9467	Return the difference between two dictionaries .
9468	Colorize message with color .
9469	Called when a task is started .
9470	Run a V2 runner on a task .
9471	Print information on v2 report .
9472	This function is called when the task is skipped .
9473	Convert a prefix to an IP network address mask .
9474	Check if value is empty .
9475	Add a new model to this instance .
9476	Returns a dictionary of all the elements that match the given filter .
9477	Load a dictionary
9478	Convert the dictionary to a dictionary .
9479	Parse the configuration .
9480	Parse state .
9481	Translate the configuration to a string .
9482	Load all filters
9483	Find the parsing file path .
9484	Convert a model to a dict .
9485	Return the diff of a list .
9486	Perform HTTP POST .
9487	Returns the authorization URI for this client .
9488	Get a new token .
9489	Parse URL query parameters .
9490	Dequery a URL .
9491	Build a URL .
9492	Handle an exception .
9493	Create a Response object .
9494	Make a redirect error response .
9495	Make a JSON response .
9496	Get authorization code .
9497	Refresh an access token .
9498	Get an authorization token .
9499	Get the authorization code from a URI .
9500	Get a token from POST data .
9501	Get the authorization header .
9502	Open the device .
9503	Read a byte from the bus .
9504	Read number from a bus .
9505	Reads a single byte .
9506	Write bytes to the device .
9507	Send a byte to the device .
9508	Write data to i2c .
9509	The URL of the CDN .
9510	Create a copy of this file .
9511	Create a local copy .
9512	Create a remote copy .
9513	Construct an instance from a file .
9514	Upload a file .
9515	Upload a file from a URL .
9516	Upload a file from a URL .
9517	Return a list of file CDN URLs .
9518	Construct a new group from a dictionary .
9519	Create a group .
9520	Return the base opration for the request .
9521	Return a generator of UUIDs .
9522	Print a list of items .
9523	Print a progress bar .
9524	Request upload request .
9525	Get the status of the home mode .
9526	List cameras .
9527	Get camera information .
9528	Get a snapshot of a camera .
9529	Disable a camera .
9530	Get camera event motion .
9531	Save a camera event .
9532	Update the camera list .
9533	Return True if the given li is the last li .
9534	Return a generator that yields a single list of nodes .
9535	Get the variable value for the specified namespace .
9536	Get the v merge element for this node .
9537	Get the grid span .
9538	Get the current span at the given index .
9539	Check if a style is true .
9540	Return True if r is a bold style .
9541	Return True if the given r isitalics .
9542	Return True if the given r is under line .
9543	Return True if p is a title
9544	Get text data from a text run .
9545	Get the relationship info from a tree .
9546	Get the content of a document .
9547	Gets the type of a list .
9548	Build a nested list .
9549	Builds a tr element .
9550	Builds a table element .
9551	Return the content of t .
9552	Remove a tag from the tree .
9553	Find a dataset .
9554	Load MNist from pickle file .
9555	Load a CIFar10 file .
9556	Plot images in a plot .
9557	Plot the layers .
9558	Plot the filters .
9559	Generate a random batch of arrays .
9560	Encodes a text into a list .
9561	Generate classifier batches .
9562	Predict sequence .
9563	Add a conv weights to the model .
9564	Encodes the input to the given layer .
9565	Decodes the graph with the given layer .
9566	Find the output of a layer .
9567	Return the score of x .
9568	Predict for x .
9569	Predict probabilities for x .
9570	Return the prediction of x .
9571	Return the score of x and y .
9572	Perform a batch of features .
9573	Generate a batch of batches .
9574	Load network from path .
9575	Generate a random matrix .
9576	Generate a random vector .
9577	Find all outputs matching patterns .
9578	Find parameters matching the given patterns .
9579	Create a new graph from kwargs .
9580	Returns a list of the variables of the target .
9581	Calculate the accuracy of the model .
9582	Run a scan .
9583	Build an activation layer .
9584	 reservoir .
9585	Set the loss .
9586	Create a dataset that can be used to compute the data .
9587	Train all monitors .
9588	Return a hash of the training data .
9589	Build the graph .
9590	Return the input list of the layers .
9591	Returns a set of variables that are in the output .
9592	Find a layer by name .
9593	Feed forward function .
9594	Predict for x .
9595	Compute the score of the model .
9596	Save model to file .
9597	Load a model from a file or file .
9598	Returns the loss of the graph .
9599	Returns a list of updates for this graph .
9600	The size of the output layer .
9601	Connect the inputs to the graph .
9602	Bind graph to graph .
9603	Resolve input shapes .
9604	Resolve the outputs of this layer .
9605	Log the inputs .
9606	Log the parameters .
9607	Format a string .
9608	Resolve a layer name .
9609	Find the parameter with the given key .
9610	Add a bias .
9611	Return the spec as a dictionary .
9612	Return the energy of the band .
9613	Invert the image .
9614	Add a tier .
9615	Remove a tier .
9616	Returns the tier for the given name .
9617	Convert to EAF format .
9618	Add a point to the interval .
9619	Add a new interval .
9620	Remove an interval from this tier .
9621	Remove a point from this tier .
9622	Returns an iterator over the intervals in the list .
9623	Return a list of all intervals in this tier .
9624	Indent an element .
9625	Add an annotation .
9626	Add a CVE entry .
9627	Add a feature description .
9628	Add an external reference .
9629	Add a language .
9630	Add a lexicon reference
9631	Add a linguistic type .
9632	Add a linked file .
9633	Add a locale .
9634	Add a secondary linked file .
9635	Add a tier .
9636	Clean time slots .
9637	Extract annotation data from EAF
9638	Generate an annotation id .
9639	Generate a timestamp for a given time .
9640	Get childtiers for the given id tier .
9641	Get the full time interval .
9642	Get reference annotation data between the given id tier and time .
9643	Get reference annotation data between the given id tier and time .
9644	Return the tier ids for the given linguistic type .
9645	Merge tiers with the given tiernew .
9646	Remove all annotations from a given tier .
9647	Remove a feature description from the model .
9648	Remove a license .
9649	Remove files from the media descriptors .
9650	Remove a property .
9651	Remove a reference annotation .
9652	Removes all linked files from the given file path .
9653	Remove a tier .
9654	Remove tiers .
9655	Rename tier .
9656	Shift annotations by time .
9657	Entry point for the options .
9658	Output debug data .
9659	Get the base level from a string .
9660	Get the embedding levels for the given text .
9661	Initializes the embedding and overrides .
9662	Calculate the number of runs in the storage .
9663	Return a list of weak types for the run .
9664	Given a list of Sorals return a list of sor types .
9665	Reverse a sequence of characters .
9666	Given a list of L1 and L2 .
9667	Process a file
9668	Convert a list of lines into a list .
9669	Add a new value to the object .
9670	Parse command line arguments .
9671	Makes sure that the binding is consistent .
9672	Shows the current window .
9673	Try to find all registered guis .
9674	Unregisters host
9675	Add commands to a file menu .
9676	Context manager .
9677	Context manager .
9678	Show no GUI .
9679	Set up the types for this bot .
9680	Get the cumulative data .
9681	Get the values for a single axis .
9682	Draw a constant line .
9683	Load the transform parameters .
9684	Reverse mapping .
9685	A generator that yields a range of floats .
9686	Add data to the data descriptor .
9687	Add definitions to XML .
9688	Add a new configuration .
9689	Render the graph .
9690	Calculate left margin
9691	Calculate right margin
9692	Calculate top margin
9693	Add a popup .
9694	Calculate bottom margin
9695	Draw the graph .
9696	Make the text of a datapoint .
9697	Draw x labels .
9698	Drawy labels for each step .
9699	Draw x guidelines .
9700	Draw y_guidelines .
9701	Draw titles for the graph .
9702	Render inline styles
9703	Start SVG .
9704	Returns a list of stylesheets .
9705	Run a bot .
9706	Send data to the socket .
9707	Connect to the server .
9708	Respond to a given message .
9709	Dispatch patterns .
9710	Add new nick .
9711	Handle a ping message .
9712	Handle registered messages .
9713	Enter an event loop .
9714	Register with the application .
9715	Run the task runner
9716	Decorate a callback to require a boss message .
9717	Return a list of command patterns .
9718	Register a success message .
9719	Execute a command .
9720	Add a nick .
9721	Send a validation notification .
9722	Send a password reset notification .
9723	Validate that the value is a valid password strength .
9724	Verify token .
9725	Delete the user .
9726	Allow the request for the request .
9727	Returns an executor .
9728	Get the docker API client .
9729	Get the TLS client .
9730	Get service name .
9731	Wrapper for docker requests .
9732	Make a docker container .
9733	Poll the docker service .
9734	Stop the Docker service .
9735	Filter queryset .
9736	Update an existing password .
9737	Update an existing password
9738	Validate an email address .
9739	Create a new token
9740	Delete a token .
9741	Check if the user is authenticated .
9742	Send email confirmation .
9743	Update the expiration value .
9744	Reset email context .
9745	Handle an email .
9746	Handle password reset email .
9747	Handle validation email .
9748	Authenticate the request .
9749	Authenticate with the given key .
9750	Display a notebook
9751	Takes a list of plots and returns a list of plot objects .
9752	Get a customJS callback .
9753	Return a widget for a specific parameter .
9754	Render a function as a Bokeh plot .
9755	Create a TextInput object with the given arguments .
9756	Return a list of named objects .
9757	Get the owner of a method .
9758	Assign authentication values to the client .
9759	Ping the server .
9760	Get information about the given URL .
9761	Gets the health of the cluster .
9762	Convert bytes to readable format .
9763	The total load of the CPU
9764	Return the memory size in bytes .
9765	Return the number of network data .
9766	Returns a list of all volumes
9767	Get the volume by id
9768	Return the total size of a volume .
9769	Returns the percentage of the volume .
9770	Calculate the total memory for a volume .
9771	Returns the maximum value of a volume .
9772	Get disk by id .
9773	Login .
9774	Get a URL .
9775	Execute GET request
9776	Update this entry .
9777	Gets the number of time in seconds .
9778	Get the storage .
9779	Return a context for a specific request .
9780	Get the tenant token .
9781	Build the attributes for the widget .
9782	Set app settings .
9783	Return a list of INSTALLED_APPS with the given settings .
9784	Get global settings .
9785	Do a GET request .
9786	Get the value of a key .
9787	Change the value of the config file .
9788	Migrate a config file .
9789	Start the web server .
9790	Wait for the server to finish .
9791	Get new access information .
9792	Check if the token is present .
9793	Set the access credentials .
9794	Refresh the OAuth2 token .
9795	Create a manifest table
9796	Split a full path into a bucket .
9797	Check if a bucket is Gacier .
9798	Extract run id from key .
9799	Clean a dictionary .
9800	Add a run to a manifest .
9801	Check if an item is in a manifest .
9802	Extract schema from URI
9803	Replace schema name with name and version .
9804	Parse a list of contexts .
9805	Parse the unstructured event field
9806	Transform a line into a string .
9807	Return a JSON representation of an event .
9808	Get the template name for the response .
9809	Print context .
9810	Print all variables in context .
9811	Format HTML in HTML .
9812	Format Django context .
9813	Format a summary of a dictionary .
9814	Returns the style text .
9815	Format the object .
9816	Format the object .
9817	Get a single token .
9818	Get the nodes of a string .
9819	Convert LaTeX content to text .
9820	Sets the input directory .
9821	Read the input file .
9822	Convert latex tree to text .
9823	Convert string to unicode .
9824	Un ASCII string .
9825	Fetch organisation information .
9826	Get a list of boards .
9827	Get a list of members .
9828	Update the organisation .
9829	Remove an existing member .
9830	Add a member by its ID .
9831	Add a new member to a domain .
9832	Fetch the list information for a given query .
9833	Add a new card .
9834	Fetch label information .
9835	Fetch all check items .
9836	Update a label .
9837	Update the label dictionary .
9838	Get the authorisation URL .
9839	Fetch card information .
9840	Get a new board .
9841	Gets a single list from the API .
9842	Get a list of checklists .
9843	Add a comment .
9844	Add an attachment to a file .
9845	Create a new checklist .
9846	Add a label from a dictionary .
9847	Add a label to the class .
9848	Add a new member to the ID .
9849	Fetch the member information for this resource .
9850	Get a list of cards .
9851	Returns a list of organisation objects .
9852	Create a new board .
9853	Create a single dispatch method .
9854	Fetch the board information .
9855	Get a list of lists .
9856	Get a list of labels for this query .
9857	Get a card by id .
9858	Returns a list of checklists .
9859	Gets the organisation for the given query .
9860	Updates the board .
9861	Add a new list .
9862	Add a new label .
9863	Fetch information about a checklist .
9864	Get the card information .
9865	Returns a list of checklist items for this card .
9866	Update a checklist .
9867	Add an item to this check .
9868	Remove a check item .
9869	Update a checklist item .
9870	Update the checklist item .
9871	Add authorisation .
9872	Check if the response is invalid .
9873	Build the URI for the given path .
9874	Returns the JSON representation of the given URI .
9875	Create a organisation .
9876	Create a board .
9877	Create a new label .
9878	Create a list
9879	Create a new card .
9880	Create a checklist .
9881	Create a new member
9882	Get a organisation .
9883	Get a board .
9884	Get a list .
9885	Get a card
9886	Get a checklist .
9887	Get a member .
9888	Extract domain from url .
9889	Convert text to raw text .
9890	Convert text to raw text .
9891	Generate text pairings from a text .
9892	Set a password for a service .
9893	Split a text with a list of locations .
9894	Mark a regex as split locations .
9895	Mark the end of a regex .
9896	Main entry point .
9897	Create a AES cipher .
9898	Get the encryption mode .
9899	Return the priority of the account .
9900	Check the encryption scheme .
9901	Publish a message .
9902	Make a new id
9903	Connect to the server .
9904	Called when a packet is received .
9905	Encode a string .
9906	Decode a string .
9907	Encode an integer as an integer .
9908	Encodes a length string .
9909	Decode length .
9910	Encode the header .
9911	Encode the variable header .
9912	Decode an encoded packet .
9913	Encode the variable .
9914	Decodes the packet using the encoded code .
9915	Decodes a packet from the client .
9916	Encode the message .
9917	Encode the message .
9918	Decodes the message from the packet .
9919	Encode the message .
9920	Encode the payload .
9921	Decode packet .
9922	Decode a packet from the packet .
9923	Return the URL for a key .
9924	Make a request to the API .
9925	Refresh the block .
9926	Format the data .
9927	Fit data to dataset
9928	Fit the K - means clustering .
9929	Fit a meanshift model .
9930	Fit the classifier .
9931	Predict the data .
9932	Map the number of clusters to the given size .
9933	Sort a set of clusters .
9934	Parse a datetime .
9935	Get the total number of points in a dictionary .
9936	Get the total time span of each time .
9937	Return a string representation of the unit picker .
9938	Pretty - print a string .
9939	Return the name mass in a name mass .
9940	Return the massname in a string .
9941	Copy data from in_dir to out_dir .
9942	Return a list of all the values of a boolean array .
9943	Convert a list of tuples to a boolean .
9944	Perform a fast smooth of an array .
9945	Compute the fast gradient of an array .
9946	Find the end of a range
9947	Cluster meanshift data .
9948	Cluster k - means clustering .
9949	Cluster a set of data .
9950	Returns a list of the srm values defined in the srm_file .
9951	Read a configuration file .
9952	Read and return a config file
9953	Print all data in a file
9954	Copy a SRM file to a file .
9955	Create a configuration file .
9956	Change the default configuration .
9957	Exclude a downhole .
9958	Return a copy of the given filter .
9959	Despikeed data .
9960	Create autorange plot .
9961	Create a time - series of traces .
9962	Return the ratio of the output file .
9963	Return a list of data .
9964	Return a list of stats .
9965	Returns a dictionary of all ablation times in a dictionary .
9966	Apply a filter to the focus
9967	Filter the gradients by threshold
9968	Calculate correlation information .
9969	Apply correlation filter .
9970	Create a new filter .
9971	Returns the parameters for this filter .
9972	Plot histogram data .
9973	Create summary statistics for a given index .
9974	Load reference data .
9975	Looks up the type of data
9976	List elements .
9977	Calculate the M of a molecule .
9978	Generate a namedtuple of keywords .
9979	Concatenate predicate and stack .
9980	Combine a stack .
9981	Calculate the weighted average of a gaussian .
9982	Compute a gaussian .
9983	Compute the standard deviation of an array .
9984	Get samples for a subset .
9985	De spike data .
9986	Helper function to create a Gaussian mean file .
9987	Helper function to calculate the background values .
9988	Create a new background calculation .
9989	Calculate ratio .
9990	Make a subset of the analyses .
9991	Return the threshold for a set of samples .
9992	Fit a classifier .
9993	Apply a classifier .
9994	Filter the data using a correlation filter .
9995	Filter the data with a given filter .
9996	Filter the data using a filter .
9997	Return the status of the subset .
9998	Filter a defragment .
9999	Filter all samples that have been removed .
10000	Return the output of the gradient file .
10001	Function to create the cross plot .
10002	Return a list of histograms .
10003	Create a list of plots .
10004	Create a list of plots .
10005	Return a list of reports .
10006	Return a list of stats .
10007	Get statistics .
10008	Create a list of export traces .
10009	Return a list of traces .
10010	Save a log file .
10011	Create an export file
10012	Find lines by regex .
10013	Fold a map .
10014	Make a plot of the PCA components in a given dt .
10015	Calculate the bayes scale of a string .
10016	Compute the median value
10017	Compute the noise of a signal .
10018	Calculate exponential decay .
10019	Add a new element
10020	Remove a file .
10021	Clears the list .
10022	Clean the file .
10023	Check if a filter matches two filter names .
10024	Make an array from key
10025	Given a filter return an index .
10026	Return a string representation of the component
10027	Decorator for logging functions .
10028	Write a log file .
10029	Read a log file .
10030	Decorator for auto login .
10031	Get information about the SMS .
10032	Send a message .
10033	Parse SQL file or string .
10034	Return a link to the notebook viewer .
10035	Return the thumbnail .
10036	Return code .
10037	The code of the notebook .
10038	The URL for the notebook .
10039	Get the output file from the output file .
10040	Process notebook .
10041	Create a notebook and return it .
10042	Download files .
10043	Create the thumbnail for the given thumbnail .
10044	Returns the description as a tuple .
10045	Scale the image .
10046	Save the thumbnail .
10047	Copy the thumbnail figure .
10048	Returns the url of the notebook
10049	Returns a generator of all languages in the database table
10050	Returns a default value function .
10051	Process a thumbnail file .
10052	Save the model .
10053	Refresh the thumbnail cache .
10054	Return all thumbnails .
10055	Create image .
10056	Delete the image .
10057	Create a thumbnail .
10058	Get a thumbnail .
10059	Delete a thumbnail .
10060	Handle incoming message .
10061	Subscribe to a number .
10062	Return a set of state states .
10063	Register a provider .
10064	Send a message using the routing function .
10065	Create a receiver blueprint for the given provider .
10066	Return a dictionary of receiver blueprints .
10067	Receive a message .
10068	Receive the status of the event .
10069	Decorator for jsonex API .
10070	Forward an object .
10071	Sign a web3 transaction .
10072	Estimate the gas at the given address .
10073	Estimate the gas of a transaction .
10074	Write to file .
10075	Read a line from the serial stream .
10076	Send a message .
10077	Return the message as a string .
10078	Check if this message has bad headers .
10079	Add an attachment to this attachment .
10080	Register a new Service .
10081	Create a Config object from a module .
10082	Register a list of resources .
10083	Return the value of the given key .
10084	Raise an exception .
10085	Set up the DB .
10086	Calculate the n - wavelength
10087	Calculate the cauchy equation .
10088	Initialize the backend .
10089	Login to backend .
10090	Get a list of domains .
10091	Get all requests
10092	Patch an object .
10093	Perform a DELETE request .
10094	Check if two files are on the same volume
10095	Create a new target file .
10096	Initialize logging .
10097	Log an error .
10098	Claim the file readers .
10099	Get the new column header .
10100	Given a VCF file and a list of file readers return a list of unclaimed sets .
10101	Initialize population stats .
10102	Claim the file readers .
10103	Split data into line .
10104	Return the prefix line newline .
10105	The suffix of the line .
10106	Seek to next line .
10107	Seek to previous line .
10108	Return the tail of the file .
10109	Return the head of the file .
10110	Return a generator that yields lines of the file .
10111	 claim for VCF readers .
10112	Parse a VCF record .
10113	Return a dictionary of sample tag values .
10114	Returns a set of tags .
10115	Join the info dictionary .
10116	Return format field .
10117	Return sample field .
10118	Return a string representation of the sample .
10119	Add a sample tag value .
10120	Add or replace the filter .
10121	List available categories for a user .
10122	Returns a form of the product products .
10123	Factory for staff products .
10124	Add a product error
10125	Memoise a function .
10126	Create a model field form .
10127	List pending items pending .
10128	Send an email .
10129	Return an iterator over the state files in the given state directory .
10130	Returns a list of nodes
10131	Iterate over the GSS notes .
10132	Returns True if the user passes the given user .
10133	Check if user is met
10134	Returns the number of items in the given user .
10135	Filter all carts .
10136	Filter the items for the given user .
10137	Pre - filter a queryset .
10138	Apply pre filter to a user .
10139	Pre - filter conditions .
10140	Decorator for modifies cart .
10141	Create a cart for a user .
10142	Set up the reservation for this cart .
10143	Apply voucher to the given voucher code
10144	Validate the given cart .
10145	Fix all vouchers in the cart
10146	Recalculate the discounts for each item .
10147	Add a discount to this product .
10148	Create a report view .
10149	Yield all the rows of the given content type .
10150	Get the form of the request .
10151	Render the data .
10152	List all reports .
10153	List of items sold
10154	Returns a summary of the sales payment .
10155	Get all payments
10156	Get the refunds for a credit note .
10157	Return the status of a product .
10158	Returns the status of the discount
10159	Create and store product items
10160	Orders the invoices by date .
10161	Helper function to create a credit note file .
10162	Fetches a list of invoices .
10163	Create a list of attendees .
10164	Return a list of all registered registration objects .
10165	Create new invoice data .
10166	Return set of missing categories .
10167	Returns the available credit
10168	Check if the user is in sold out
10169	Make sure the user is completed .
10170	Edit profile .
10171	Process a profile .
10172	View for product category .
10173	Handle all of the products .
10174	Handle the voucher form .
10175	Checkout an invoice .
10176	View the invoice with the given access code .
10177	Show an invoice .
10178	View for manual payment .
10179	Refund this invoice .
10180	Modify a credit note .
10181	Registration for a user .
10182	Extend a cart .
10183	Send invoice email out .
10184	Show badges .
10185	Render a badge .
10186	Returns a list of available discounts for the provided categories .
10187	Annotate a queryset with past use
10188	Return all available products .
10189	Apply payment to credit note .
10190	Returns the cancellation fee .
10191	Generate a random access code .
10192	Decorate a function and return it .
10193	Get object from name .
10194	Create an invoice for a cart .
10195	Create a manual invoice
10196	Generate the line items from a cart .
10197	Apply credit notes to an invoice .
10198	Return True if user can view this invoice
10199	Refresh the invoice from the database .
10200	Validate that the cart is allowed to be payment .
10201	Update the status of the invoice
10202	Mark an invoice
10203	Returns True if the cart matches the current revision
10204	Update the validity of the invoice
10205	Called when the invoice has been completed .
10206	Refund this invoice .
10207	Send an email to an invoice
10208	Update the annotation .
10209	Flatten a nested field .
10210	Print all downloads .
10211	Download the given field .
10212	Return project data
10213	Get a list of processor objects .
10214	Print the inputs of a processor .
10215	Run json data
10216	Upload a processor .
10217	Upload a file .
10218	Download data objects .
10219	Return a list of all subclasses of c .
10220	Get repo and project .
10221	Get a list of variants that match the given variants .
10222	Returns an iterator over the variants of a variant .
10223	Search all variants by coordinate query .
10224	Search variants by coordinates .
10225	Update this element .
10226	Remove duplicates from a sequence .
10227	Authenticate asana
10228	Select input from list .
10229	Get the saved issue data .
10230	Move an issue to another one .
10231	Get task data .
10232	Get an asana task .
10233	Save the metadata to a file .
10234	Apply a value to the input .
10235	Decorator for transport tasks .
10236	Flush all items from the queue .
10237	Create a task .
10238	Format a list of task numbers with links .
10239	Create a new task with missing task .
10240	Returns the list of data types for this project
10241	Log a log string .
10242	Initialize the serial port .
10243	Set polling values .
10244	Combines the V4 meter into a file .
10245	Returns a string representation of the Meter_Reads since timestamp .
10246	Set the context string
10247	Calculate the PPF .
10248	Check if a period is set .
10249	Set meter password
10250	Unpack the given data into a dictionary .
10251	Convert the data into the data buffer .
10252	Return the JSON representation of the message .
10253	Calculates the CRC of a Meter read .
10254	Split EkmDate into namedtuple .
10255	Returns a copy of the list of months for the given direction .
10256	Set the security ratio
10257	Assign a schedule .
10258	Assign a season schedule
10259	Set season schedule
10260	Assign a holiday to the holiday .
10261	Reads the specified schedule from the server .
10262	Extract schedule .
10263	Read a list of months from the serial port .
10264	Extract month .
10265	Read holiday dates .
10266	Extract holiday date .
10267	Read settings .
10268	Write command message
10269	Authenticate to the serial port .
10270	Update all observers
10271	Initialize the Lcd lookup .
10272	Send the request
10273	Retrieve the request A .
10274	Request B .
10275	Make the request .
10276	Calculate the fields .
10277	Set the list of display items
10278	Set relay
10279	End the serial port .
10280	Set PulseInput ratio
10281	Set the zero reset table .
10282	Set LCD
10283	Iterate over the fields in the given schema .
10284	Iterate over a schema .
10285	Return a list of paragraphs .
10286	Generate a random text .
10287	Return a summary of the result .
10288	Return the color of the given text .
10289	Print text .
10290	Return a summary of the results .
10291	Parse command line arguments .
10292	Setup the result .
10293	Run a project
10294	Run pypy .
10295	Transform an AST node .
10296	Transform an example into an example .
10297	Transform an example .
10298	Transform an example body .
10299	Returns a list of arguments for this expression .
10300	Register the module .
10301	Convert source bytes to code .
10302	Apply arguments parser .
10303	Load a file by its name .
10304	Load source from a directory .
10305	Discover files within a directory .
10306	Check for files in a directory .
10307	Check messages in a given location .
10308	Add a new environment .
10309	Remove a file from a file .
10310	Restart a new set of places .
10311	Call results .
10312	Get a process monitor .
10313	Make a service object
10314	Refresh the current session .
10315	Remove expired nodes .
10316	Remove a node from the client .
10317	Get the last updated node
10318	Return a dictionary of all nodes in this node .
10319	Refresh the session .
10320	Increment the times modified key
10321	Return True if this node has expired .
10322	Delimit a list of values .
10323	Check if path is bad .
10324	Merge the current message .
10325	Check if a token exists .
10326	Return a Query with the given value .
10327	Decorator for constant functions .
10328	Decorate a function as an iterable .
10329	Unsplatted a function .
10330	Run a process .
10331	Create a new service .
10332	Re - parse a reader .
10333	Parse a literal .
10334	Parse a parser .
10335	Simplify a parser .
10336	Simplify a parser .
10337	Given a parser and a separator parse it .
10338	Given a parser and a separator parse it .
10339	Check state of states .
10340	Close the connection .
10341	Check the current state .
10342	Add a heartbeat to a master
10343	Wraps a multi service on a single service .
10344	Freeze graph from checkpoint .
10345	Freeze model .
10346	Save the graph only .
10347	Save graph only from checkpoint .
10348	Save weights from checkpoint .
10349	Restore a checkpoint from a checkpoint .
10350	Parse a tag and validate it
10351	Render the tag .
10352	Validate tag arguments .
10353	Get the data for this context .
10354	Parse a tag and validate it .
10355	Return the data for a context .
10356	Convert a caffe definition into a Python session .
10357	Freeze a caffe definition .
10358	Save a graph only in a caffemodel file .
10359	Make a list of rows from a sequence .
10360	Return an iterable with the n characters of the given iterable .
10361	Iterate over all items in an iterable .
10362	Remove duplicates from an iterable .
10363	Return the next element of an iterable .
10364	Yield the next iterable from the given iterable .
10365	Partition items into bin_size .
10366	Return an iterable if item is iterable .
10367	Return a generator that prints exceptions .
10368	Return a list of duplicates matching the given keys .
10369	Fail if iterable is ordered
10370	Swap the partition result on the given partition result .
10371	Partition a dictionary by key .
10372	Get the first n queues .
10373	Reset the iterator .
10374	Parse a token as a variable .
10375	Create a class class with the given name .
10376	Get a descendant of the chain .
10377	Fetch sqlite master record .
10378	Iterate over the given object .
10379	Select the given selector .
10380	Parse a selector .
10381	Validate a selector .
10382	Returns a list of all the parents of the rhs .
10383	Returns a list of all the ancestors of the given rhs .
10384	Returns a list of all the siblings of the given rhs .
10385	Return the nth child .
10386	Return a list of nodes that match the given validators .
10387	Start a ping .
10388	Make a body request
10389	Expire the cache .
10390	Store a value in the store
10391	Get a single value from the store .
10392	Returns True if the given key exists in the store .
10393	Check if the chain is valid .
10394	Create a new node from a JSON string .
10395	Convert the input_xml into a string .
10396	Return the rendered content .
10397	Get the given function .
10398	Get a list of rows .
10399	Validate token .
10400	Return Fernet engine .
10401	Validate a token .
10402	Create a secret link .
10403	Calculate a Counter32 value .
10404	Calculate Counter64 .
10405	Calculate the average duration .
10406	Setup the outputs for the given config .
10407	Sets up the sources
10408	Send an event .
10409	Restart source watchdog
10410	Parse format .
10411	Parse the given line .
10412	Validate the expiration date of the field .
10413	Validate the message .
10414	Verify token is valid
10415	The name of the device .
10416	Warn if the given message is not local .
10417	Connect receivers .
10418	Create a secret link .
10419	Send Accept notification .
10420	Send confirmation notifications for the given record .
10421	Send email validation request .
10422	Send rejected notification .
10423	Send a notification .
10424	Create a new secret .
10425	Validate a secret token .
10426	Revoke this link .
10427	Create an object .
10428	Get user by receiver .
10429	Confirm the email .
10430	Accept request .
10431	Reject this request .
10432	Create a secret link .
10433	Generate a SHA512 hash .
10434	Verify that a given timestamp is valid .
10435	Returns True if the record is aembargoed record .
10436	Perform access request .
10437	 confirmation for records .
10438	Return a connection to the SSH command .
10439	Reverse the given column .
10440	Return the selected text .
10441	Query for items .
10442	Get the version of the file .
10443	Set the version of the file .
10444	Initialize the SSH configuration .
10445	Start the timer .
10446	Get the next event .
10447	Index the link .
10448	Start a new Riemann client .
10449	Stop the connection .
10450	Empty the queue .
10451	Process events .
10452	Return a new client version of the client .
10453	Start the client .
10454	Encode an event .
10455	Encodes the given events into a protobuf .
10456	Decode a protobuf message .
10457	Send events .
10458	Generate file previews .
10459	Retrieve file previews .
10460	Send a message to r_q .
10461	Message loop .
10462	Return True if log_interval is greater than the hot loop .
10463	Respond to the challenge .
10464	Abort the authentication .
10465	This method is called when the authentication is done .
10466	Parse the admin footer node .
10467	Build payment parameters .
10468	Build payment parameters .
10469	 pay with alias registration
10470	Get the version string .
10471	Construct the object .
10472	Create the filesystem .
10473	Configure the shortcuts for the user .
10474	Called when an item is clicked .
10475	Called when an item is selected .
10476	Called when an item is clicked .
10477	Finalize the resource source .
10478	Run PySide .
10479	Run the clean command .
10480	Fetch all children .
10481	Remove children from the tree .
10482	Returns the icon of the given index .
10483	Call a subprocess .
10484	Get maximum file descriptor .
10485	Close file descriptor .
10486	Close open descriptors .
10487	Redirect the given stream to the given stream .
10488	Set widgets on a form .
10489	Import app module .
10490	Import all modules in a project .
10491	Include a template .
10492	Get the URL for a Gravatar object
10493	Returns an image for a Gravatar object
10494	Check if a path is a valid file location .
10495	Check if the URL is a valid s3 location .
10496	Get the absolute path of a template .
10497	List all objects in the bucket .
10498	Build the JSON from the workflow .
10499	This method is used to execute the disk .
10500	Archive a folder .
10501	Create a directory .
10502	List all available files in a directory .
10503	Restore a project from the same name
10504	Create a new product .
10505	List files in the storage .
10506	Download file from storage .
10507	Check if a storage exists .
10508	Gets the parent of the given path .
10509	Create a folder .
10510	Upload a file .
10511	Delete a folder .
10512	Validate the storage path .
10513	Create a new product .
10514	Create a new Entity
10515	Get the details of an entity .
10516	Sets the metadata for the given entity .
10517	Get the metadata for an entity .
10518	Update the metadata for an entity .
10519	Delete the metadata .
10520	List projects .
10521	Get project details .
10522	Create a new project .
10523	Delete a project .
10524	Create a folder .
10525	Get folder details .
10526	Delete a folder .
10527	Upload a file or content .
10528	Copy a file content .
10529	Download a file content .
10530	Get the signed URL for a file .
10531	Emit a record .
10532	Convert a service to a service .
10533	Returns a copy of this request with the given headers .
10534	Returns a copy of this object with the given params .
10535	Raise an exception with the given class .
10536	Returns a list display
10537	Add a job to the map
10538	Generate a GATK variant .
10539	Run oncotator database .
10540	Sort the list .
10541	Return a list of datetime objects .
10542	Load export data from folder .
10543	Shifts a value by t .
10544	Return the sum of all values .
10545	Get the serial device .
10546	Create a new User .
10547	Parse the network results .
10548	Parse release results .
10549	Parse product staff results .
10550	Parse character results .
10551	Parse tag results .
10552	Parse user results .
10553	Create a tarball of files .
10554	Check for all files in the output directory .
10555	Copy a file to a file .
10556	Create a list of Spark parameters .
10557	Returns a list of docker parameters .
10558	Refresh the metadata .
10559	Run MuTect .
10560	Create the metadata .
10561	Return a list of all streams in the database .
10562	Export the device .
10563	Search VNDB
10564	Parse search results .
10565	Add a stream to a stream .
10566	Resets the server s API key .
10567	Return a list of users
10568	Create BWA index files
10569	Connect to server
10570	Add a stream to the database .
10571	Add a stream to the database .
10572	Insert a datapoint into the database .
10573	Sync all the streams in the database .
10574	Start the logger .
10575	Stop the sync thread .
10576	Download a URL
10577	Upload a job to S3am .
10578	Print labels for the given ontology .
10579	Print the tree of the given ontology
10580	Get the mean size of a bam .
10581	Return the current container ID .
10582	Run a star in a tarball .
10583	Create the metadata .
10584	Export the data to a file .
10585	Get device object .
10586	Get labels for a given ontology
10587	Get the hierarchy of an ontology
10588	Run a wrapper .
10589	Populate the parser with the given options .
10590	Get empty config file .
10591	Get the mount path of the docker container .
10592	Add an option .
10593	Create an argument parser .
10594	Create a pipeline command .
10595	Set the authentication for the websocket .
10596	Handleresult authentication .
10597	Ping the server .
10598	Create a new resource .
10599	Update the resource .
10600	Delete a resource .
10601	Subscribe to a given stream .
10602	Create a new user .
10603	Return a list of devices .
10604	Run cutadapt .
10605	Run a reference index for a reference
10606	Index a BAM file .
10607	Run sambamba .
10608	Run samblaster
10609	Mark duplicates .
10610	Sort a bam .
10611	Run base re calibration .
10612	Run kallisto .
10613	Run the RSEM tarball for the given bam .
10614	Get user affinity information for a test .
10615	Send command .
10616	Subscribe to a stream .
10617	Connect to the websocket .
10618	Connect to the server .
10619	Resub subscriptions .
10620	Called when the web socket is opened .
10621	Called when the connection is closed .
10622	Handle a connection error .
10623	Called when a message is received .
10624	Ensures that the web socket is alive .
10625	Select variants from GATK
10626	Run GATK VariantFiltration on the given VCF .
10627	GATK variant recalibrator .
10628	Apply a GATK re calibration for a variant .
10629	Combine variants using GATK .
10630	Quick check a bam file
10631	Load handlers from a handler mapping .
10632	Write a configuration file .
10633	Get a configuration file .
10634	Get an ontology term
10635	Search for an ontology .
10636	Search for an ontology
10637	Iterate over the descendants of an ontology
10638	Iterate over all descendants of an ontology
10639	Iterate the labels for the given ontology .
10640	Iterate over the terms of the given ontology .
10641	Run fastqc .
10642	Add a stream to the database .
10643	Create a Flask application .
10644	Start the Spark master container .
10645	Start HDFS worker .
10646	Start a new DFS directory .
10647	Stop HDFS worker .
10648	Check the container status .
10649	Return the base tokenizer .
10650	Lookup a zone by name .
10651	Fetch configuration for a zone .
10652	Merge a list of config files .
10653	Validate the changeset .
10654	Minimize all members .
10655	Return the fitness score for all members .
10656	Returns the cost function value of the cost function .
10657	Return the cost function value of the number of processes .
10658	Get the parameters for this group .
10659	Return the members of the process .
10660	Add a new parameter .
10661	Generate the next generation .
10662	Normalize keys .
10663	Get all environment variables .
10664	Return True if the given exception is raised .
10665	Transform hits to packages .
10666	Transform result to string .
10667	Convert HTML to HTML
10668	Convert xhtml to HTML .
10669	Convert an XML document to a string .
10670	Open a browser in a browser .
10671	Drop the tree .
10672	Drop the tag .
10673	Get an element by id .
10674	Return a CSS selector for the given expression .
10675	Yields all the members of a log handler .
10676	Return a dictionary of the names of all tests
10677	Check if a single class is a single class .
10678	Check if a single module is a single class .
10679	Check that the parameters are valid
10680	Validate a request id .
10681	Decode a file - like object .
10682	Escape keyword arguments .
10683	Returns the name of the codec .
10684	Detect the UTF - 8 encoding of the file .
10685	Returns the remote address that can be sent to .
10686	Convert an object to a float .
10687	Convert a string into a BeautifulSoup object .
10688	Parse an XML file .
10689	Convert a DOM tree to an HTML tree .
10690	Get the current traceback .
10691	Return the exception as string .
10692	Render a summary of the traceback .
10693	Yields the traceback as a string .
10694	Return a list of annotated lines .
10695	Render the source table .
10696	Returns the string that matches the given egg info .
10697	Get locations for a project .
10698	Find all versions of a project .
10699	Find a requirement .
10700	Sort a list of links .
10701	Get the Content - Type header .
10702	Return a generator of links in this context .
10703	Return True if this page is a trusted source .
10704	Find data files for a package .
10705	Exclude data files from a package .
10706	Parse a requirements file .
10707	Join a list of lines .
10708	Remove comments from an iterator .
10709	Compile a marker
10710	Visit a node .
10711	Visit an attribute node .
10712	Coerce a value into a JSON object .
10713	Create a copy of the current request context .
10714	Pushes the application .
10715	Pop the app context .
10716	Return a copy of this instance .
10717	Matches the request .
10718	Push request context .
10719	Make a relative path relative to the given path .
10720	Check if a distribution is editable .
10721	Add url value pre processors .
10722	Add url default functions .
10723	Register an error handler .
10724	Stream a generator with a context block .
10725	Make a response .
10726	Generate a URL for the given endpoint .
10727	Join a filename .
10728	Get the root path of an import .
10729	Return the jinja loader .
10730	Run the shell .
10731	Return the cookie domain for the given app .
10732	Generate cache for a link .
10733	Return True if the root directory contains the root library .
10734	Uninstall all files in dist .
10735	Check that the version is compatible with the given version .
10736	Build a wheel .
10737	Iterate all symbols in the given code .
10738	Ensures that the current time is expired .
10739	Add egg - info files .
10740	Write a marker file .
10741	Check if the virtualenv is running on the virtualenv .
10742	Get the user s username
10743	Create a distribution scheme .
10744	Parse the cache control header .
10745	Return True if the request is cached .
10746	Cache the response .
10747	Update the cache entries for zipimport .
10748	Load template from a file .
10749	Install site . py
10750	Save this file .
10751	Convert the value to a Python object .
10752	Add filters to the config .
10753	Configure a handler .
10754	Add a list of handlers to the logger .
10755	Add a common logger configuration .
10756	Execute a code file .
10757	Context manager to override a temporary file .
10758	Return the URL and revision for the remote .
10759	Get an item from an object .
10760	Generate a source file .
10761	Compile templates .
10762	Return the default cache path .
10763	Find eggs in a zip file .
10764	Find distributions on a path .
10765	Declare a namespace package .
10766	Returns the class of the given class .
10767	Find the adapter of the given object
10768	Ensure that the directory exists .
10769	Iterate over the entry points in a group .
10770	Return True if the distribution can be added to the distribution .
10771	Find the best match for a given request .
10772	Evaluate a marker .
10773	Evaluate markerlib .
10774	Format a log record .
10775	Formats the given number according to the given locale .
10776	Parse a numberPattern .
10777	Get decimal quantum
10778	Calculate the precision of a decimal number .
10779	Return the value of the scientific notation elements .
10780	Return the total seconds in seconds .
10781	Parse a list of requirements .
10782	Raise an AssertionError if the module is not a distribution .
10783	Check that the requirements are valid .
10784	Fetch a build egg .
10785	Print a list of rolls .
10786	Convert a price object to a string .
10787	Create a price
10788	Validate the request .
10789	Get the given method .
10790	Apply the given method .
10791	The blueprint for this blueprint .
10792	Returns the blueprint for this endpoint .
10793	Attach an error multidict to the request .
10794	Make an abstract distribution .
10795	Add a requirement .
10796	Recursively walks a list of requirements .
10797	Check if a requirement exists .
10798	Return a list of dependencies to install .
10799	Get all namespace packages .
10800	Encode a JSON object .
10801	Tokenize a document .
10802	Annotate merge annotations .
10803	Copy annotations from src to dest .
10804	Compress tokens .
10805	Serialize a list of tokens .
10806	Expand all tokens in a list .
10807	Locate unbalanced tag
10808	Given a list of chunks and a list of chunks and a list of tags and tag tags and tags it .
10809	Flatten an element .
10810	Split text into split words .
10811	Create a start tag .
10812	End tag .
10813	Serialize an HTML fragment .
10814	Remove tags inside block level .
10815	Extract constant from code .
10816	Returns the URL for the query .
10817	Run autolink .
10818	Kill conditional comments .
10819	Parse an HTML document .
10820	Decorate a function to return response
10821	Get a tree walker .
10822	Export the given location .
10823	Get the revision for the given location .
10824	Decorator for setup methods .
10825	Return the name of the import
10826	Returns a boolean indicating whether or not this exception was raised .
10827	Find the instance path for this package .
10828	Update the template context .
10829	Handle HTTP exceptions .
10830	Integrate an HTTP exception .
10831	Handle an exception .
10832	Raise the routing exception .
10833	Dispatch the request .
10834	Make the default options response for this adapter .
10835	Create the URL adapter .
10836	Injects the given values into the URL default functions .
10837	Return the unique values in an iterable .
10838	Add requirements to the metadata .
10839	Return the version of a requirement .
10840	Convert a package info file to metadata .
10841	Iterate over the modules in the directory .
10842	Return an iterator over all the classes in this module .
10843	Get the names of the methods .
10844	Find the basename of the given file name .
10845	Check if path is a module path .
10846	Recursively walk all the directories in the given directory .
10847	Return a list of paths for the module .
10848	Set default values for dump argument .
10849	Load default values from kwargs .
10850	Set multiple items from a mapping .
10851	Get the value of a given key .
10852	Dump an object to a string .
10853	Build an editable option dictionary .
10854	Populate the link from the given finder .
10855	Ensure that the source directory exists .
10856	Remove a temporary source .
10857	Get the distribution of the package .
10858	Get the data from the form .
10859	Get the WSGI headers .
10860	Convert an IRI to a native URI .
10861	Get the user cache directory
10862	Get user data directory .
10863	Return path to log directory .
10864	Return user config directory .
10865	Get the path of the site config directories .
10866	Iterate over all module files .
10867	Restart the interpreter with the given name .
10868	Convert a string to text .
10869	Find the certificate bundle for the given directory .
10870	Parse an HTML document .
10871	Parse the document in a given stream .
10872	Parse a fragment from a stream .
10873	Translate a word .
10874	Convert args to tokens and tokens .
10875	Bind to the server .
10876	Print the report .
10877	Load the bytecode from a file .
10878	Return a dictionary of stylesheet parameters .
10879	Run a command on this repository .
10880	Get the Python version .
10881	Return a list of distributions for a given location .
10882	Find external links for the given page .
10883	Open local file .
10884	Process a URL .
10885	Returns a list of paths that are removed from the build directory .
10886	Create a set of file paths .
10887	Add a package .
10888	Create a package .
10889	Check if enable usersite is enabled
10890	Add all available paths to all known paths .
10891	Wraps the shell .
10892	Helper function to set thembcs aliases .
10893	Set locale encoding .
10894	Force global packages after local site packages .
10895	Replace python paths with Python paths .
10896	Run a subprocess .
10897	Return True if we have the python extension
10898	Convert pyx files to language .
10899	Context manager for debugging .
10900	Get a resource .
10901	Return user agent information .
10902	Return True if name is a URL .
10903	Unpack a link into a local directory .
10904	Download a URL from a link .
10905	Check if a file exists .
10906	Format a currency .
10907	Register exchange .
10908	Decodes the given data .
10909	Default template context processor .
10910	Render the template .
10911	Render a template .
10912	Render a template string .
10913	Return the parse version .
10914	Check if the given name is declared .
10915	Add a name node .
10916	Visitor for include node .
10917	Visit a import node .
10918	Create a wheelfile .
10919	Atomize a function .
10920	Create a service factory .
10921	URL for unicode .
10922	Return a list of requirements that match a requirement .
10923	Populate a requirement set .
10924	Export the given location .
10925	Lookup an Amazon Product .
10926	Iterate over pages .
10927	The ancestor of the tree .
10928	Return a list of children .
10929	Get element from path .
10930	Get the text of the element at path .
10931	Get the date of the element .
10932	Get offer and currency .
10933	List price .
10934	Make a request to the cache .
10935	Build a response file .
10936	Return an attribute getter for the given attribute .
10937	Return the title of a string
10938	Sort an item .
10939	Group a value by an attribute .
10940	Apply a filter .
10941	Create a new logger .
10942	Compare two constant time times .
10943	Verify the signature of the given key .
10944	Derive the secret key .
10945	Get the signature of the given value .
10946	Sign a value .
10947	Verify the signature of the given value .
10948	Unsign a signed value .
10949	Sign a value .
10950	Validate a signed value .
10951	Serialize an object into a string
10952	Gets the server error .
10953	Find all packages in the given path .
10954	Require a list of packages .
10955	Yield all directories in base_path .
10956	Prepares the response .
10957	Unsign a wheel .
10958	Unpack a wheel file .
10959	Install package scripts .
10960	Remove all elements from the graph
10961	Draw the canvas .
10962	Return the node with the given ID .
10963	Called when the graph has changed .
10964	Called when an edge is added .
10965	Called when a component has changed .
10966	This method is called when the left d click is clicked .
10967	Called when the diagram has changed .
10968	Clear the canvas .
10969	Called when a model is changed .
10970	Map the model to the pydot graph .
10971	Unmap a model .
10972	Map an element to the canvas .
10973	Create a style node .
10974	Parse xdot data .
10975	Process font .
10976	Process an ellipse .
10977	Process a polygon .
10978	Process a polygonline .
10979	Process text .
10980	Process an image .
10981	Render a grid file .
10982	Save dot file .
10983	Load dot file .
10984	Return True if point_y is in point_y .
10985	Draw the bounds .
10986	Create a new graph .
10987	Start the SQLAlchemy database .
10988	Parse dot code .
10989	Create a new graph .
10990	Open file .
10991	Save model info to file .
10992	Save to file .
10993	Configure the graph .
10994	Configure nodes .
10995	Configure edges
10996	Edit the attributes of the node .
10997	Add a node to the graph .
10998	Add an edge .
10999	Add a subgraph .
11000	Add a cluster .
11001	Request the given graph .
11002	Edit options .
11003	Configure dot code .
11004	Exit the user .
11005	Move components to origin .
11006	Save the model to a file - like object .
11007	Load from a file - like object .
11008	Save this object to a file .
11009	Load an object from a file .
11010	Create an alias property .
11011	Parse a file .
11012	Return a list of start words .
11013	Add a new chain .
11014	Remove a chain with the given name .
11015	Build a chain from a chain .
11016	Generate a random sentence .
11017	Create a graph .
11018	Add a node .
11019	Delete a node .
11020	Get node by ID
11021	Delete an edge from the graph .
11022	Add an edge to the graph .
11023	Add a subgraph to the graph .
11024	Called when the program is changed .
11025	Set the list of nodes in the graph .
11026	Parse a dot file .
11027	Parse a dot file .
11028	Build the top graph .
11029	Build a graph from a list of tokens .
11030	Get the number of time units in seconds .
11031	Format duration in seconds .
11032	Set the path of the editor .
11033	Create the UI for the graph .
11034	Split a sequence into n points .
11035	Yield windows from an iterable .
11036	Run the Godot application .
11037	Get the children of the object .
11038	Append a child to the object
11039	Insert a child into the graph .
11040	Remove a child from the graph .
11041	Called when a listener is removed .
11042	Called when child items are changed .
11043	Get label from object
11044	Set the label of the object .
11045	Called when a label is changed .
11046	Initialize the panel .
11047	Update the editor .
11048	Add listeners .
11049	Replace node with new name
11050	Called when a node has changed .
11051	Add nodes to the graph .
11052	Removes a new edge from the object .
11053	Called when an event is changed .
11054	Add edges to the graph .
11055	Parse xdot directive .
11056	Handle drawing .
11057	Create a new row factory .
11058	Create an edge factory .
11059	Prepare the database .
11060	Parse the drawing directive .
11061	Parse Xdot attribute directive .
11062	Handle drawing .
11063	Called when the component is changed .
11064	Called when the component is changed .
11065	Re - down the component .
11066	Display information about the given style .
11067	Draw the main layer .
11068	Check if a point is in the surface .
11069	Draw the main layer .
11070	Handle an event .
11071	Run the pipeline .
11072	Get full page URL .
11073	Render previous links .
11074	Render base links .
11075	Check if the given pattern matches the content type .
11076	Select the content type based on the available parameters .
11077	Rewrite a URL .
11078	Remove authentication from url .
11079	Create URL identifier .
11080	Normalize host .
11081	Discover modules in a directory .
11082	Find modules in a directory .
11083	Return a list of modules matching the given name .
11084	Return a list of classes for a given module .
11085	List all the classes in the given module .
11086	Ensure a directory exists .
11087	Update the contents of a blob .
11088	Check if card_number is valid .
11089	Return the git revision .
11090	Load a module .
11091	Add a path to the list .
11092	Find a module by name .
11093	Split a single line into a single line .
11094	Remove namespaces from root .
11095	Check if the version is valid .
11096	Create a new instance from a yaml file .
11097	Merge all actions in a dictionary .
11098	Execute all available actions .
11099	Create an instance from a YAML dictionary .
11100	Add Flask request details .
11101	Send a record to the last minute
11102	Add a context to the context .
11103	Log an attempt .
11104	Add url to queue .
11105	Start the workers .
11106	Set the value of a key .
11107	Get a single key .
11108	Recursively walk a key .
11109	Get an index for a given key .
11110	Delete key .
11111	Plot a heatmap .
11112	Returns a datetime . datetime . datetime . datetime . datetime . datetime . datetime . datetime . datetime
11113	Add a number of months to the given date .
11114	Return True if the day is a christ mas period .
11115	Set the current music service .
11116	Set the current storage service .
11117	Read data from a CSV file .
11118	Return a list of all the contents of the file .
11119	Write the data to a JSON file .
11120	Return a list of objects that match the reference label .
11121	Compute the average value of a given label .
11122	Calculate the variance of each feature .
11123	Restore data from the session .
11124	Merge two dictionaries .
11125	A decorator that returns a function that takes a dispatch value .
11126	Decorate a method .
11127	Find all registered blocks .
11128	Verify that a block has been registered .
11129	Register a block .
11130	Unregisters the given block type .
11131	Convert a file to a MP3 file .
11132	Return the desired version .
11133	Handle SSL redirecting .
11134	Initialize the celery task .
11135	Queue an email .
11136	Parse the Accept header value .
11137	Parse the cache control header value .
11138	Parse a content type .
11139	Parse a signed header .
11140	Parse a list .
11141	Parse a list of parameter values .
11142	Resize an image to a fit width .
11143	Add a value .
11144	Download the file at url
11145	Connect to the server .
11146	Upload a file .
11147	Connect to the music folder .
11148	Write parameters to a file .
11149	Update the filenames of the sky files .
11150	Read a HPI from a file .
11151	Scale the given scale parameter .
11152	Read the absorption from a file .
11153	Read water scattering from file .
11154	Read IOP from file .
11155	Write iop to file .
11156	Build b with scattering fraction .
11157	Build the total absorption .
11158	Build the total attenuation C
11159	Build all IOPs .
11160	Set batch parameters .
11161	Read a parameter file into a dictionary .
11162	Convert a string to float .
11163	Read a pr report from a file .
11164	Create signal handler
11165	Called when a signal is closed .
11166	Default signal handler .
11167	Pause a signal .
11168	Handle the abort request .
11169	Process the status of the function .
11170	Remove an event from the signal list .
11171	Fetch a single metric .
11172	Return a sorted metric for the given arguments .
11173	Collect n elements from an iterable .
11174	Print an item to stdout .
11175	Print all items in an iterable .
11176	Set the signature of the given function .
11177	Set the arguments from a partial instance .
11178	Add new arguments to the command line .
11179	Return True if files are metainf files .
11180	Get a key from a file name .
11181	Convert VLQ to integer .
11182	Read table from data .
11183	Parse the header .
11184	Convert seconds to a string .
11185	Print details about the player
11186	Get data .
11187	Search for file result .
11188	Write the batch to a file .
11189	Run the data processing .
11190	Displays the currentgraphic connection .
11191	Print the label information .
11192	Displays the error message .
11193	Hide the error message .
11194	Run planarrad .
11195	Cancel the planad .
11196	Quit the window
11197	Save the figure .
11198	Open the log file
11199	Open the documentation
11200	Set the prerequisite actions
11201	Click the widget .
11202	Move the widget to the specified position .
11203	Display the graphic target .
11204	Return a lockset for the given private key .
11205	Sign the message .
11206	Return the hash of this object .
11207	Check if this object is valid .
11208	Update a new issue .
11209	Return the last lock .
11210	Return the proposal for the last voted block .
11211	Return the last valid lockset .
11212	Get the timeout for this chain .
11213	Called when the proposal is changed .
11214	Generate a list of private keys .
11215	Calculate the delay of a packet .
11216	Deliver a packet .
11217	Create a C proxy for a given chain .
11218	Convert an address to a native contract class .
11219	Register a native contract .
11220	Update the filter
11221	Called when a transaction is received .
11222	Convert a Vgg image to RGB .
11223	Convert image to vgg .
11224	Get f layer .
11225	Get the output of a layer .
11226	Get the features for a layer .
11227	Generate a new key file .
11228	Finish the job .
11229	Load a file from a file .
11230	Put a list of items .
11231	Release the table .
11232	Returns a list of all the tables in the target table .
11233	Fix C compiler .
11234	Try to find the version of the terData client .
11235	Get value for key .
11236	Set key to value .
11237	Print table output
11238	Execute a command .
11239	Get value for key .
11240	Write default configuration to file .
11241	Set filtered columns .
11242	Write this GIRAFFE to a writer .
11243	Return a list of dictionaries containing all the values in the template .
11244	Convert a string to a float .
11245	Convert a string to a dictionary of gains .
11246	Return a dictionary of device settings .
11247	Wrap the given text .
11248	Detect devices .
11249	Set the center frequency of the PSD .
11250	Return the result of the PSD .
11251	Wait for the result of the PSD .
11252	Update the PSD .
11253	Read header data from file .
11254	Write the header file .
11255	Run a function on the work queue .
11256	Return the number of time in the device that is reached .
11257	Calculate the frequency plan for each bin .
11258	Create a new buffer .
11259	Setup the PSD
11260	Stop the stream .
11261	Set the center frequency of the device
11262	Perform the frequency plan
11263	Set the socket address .
11264	Build a CMake from CMake
11265	Filter a list of datetimes based on the given number .
11266	Mask the given datetime object .
11267	Return a mask for the given day .
11268	Filter a set of datetimes .
11269	Convert datetimes to delete
11270	Remove dates from a list of dates .
11271	Remove dates from a list of dates .
11272	Get the SPI control command pattern .
11273	Read a bit from the stream .
11274	Write a bit to the stream .
11275	Get the bit number from the given bit pattern .
11276	Watches the specified port events .
11277	Handle events .
11278	Activates the gpio interrupt into users .
11279	Write an edge to the gpio .
11280	Wait until file exists .
11281	Register a new pin .
11282	Deregister a pin map .
11283	Enable the gpio .
11284	Wraps the given bytes_to_send method .
11285	Render a form into a string .
11286	Check if the form has errors .
11287	Render a link .
11288	Extract the version for a package .
11289	Returns the keyword arguments for the form .
11290	Check the status of a response .
11291	Perform a GET request .
11292	Get download link .
11293	Upload a link to a folder .
11294	Upload a file .
11295	Upload a remote URL .
11296	Get the status of a remote upload .
11297	List the folder .
11298	Returns a list of running conversions for the given folder_id .
11299	Calculate the humidity for a file .
11300	Calculate the dewpoint of the dewpoint
11301	Publish to the server .
11302	Get the CRC for the given data .
11303	Verifies that the data is signed .
11304	Unpack a storm date into a string .
11305	Return True if the revision of the given records is a revision .
11306	Send weather data to the device .
11307	Send command .
11308	Run DMPAFT command .
11309	Get the new archive fields
11310	Parse the archive .
11311	Update weather data
11312	Initialize logging .
11313	Return a list of pub services .
11314	Get the value of a given station
11315	Set the state of this instance .
11316	Set the arguments
11317	Publish the configuration to a file .
11318	Decorator to check if a user has a request .
11319	Initialize app .
11320	Returns True if the requirements are satisfied .
11321	Push this context .
11322	Remove the context .
11323	Override this context .
11324	Push this context into the current context .
11325	Pop the current context .
11326	Push additional information to the tree .
11327	Given a list of field names return a list of field names .
11328	Convert the results into a string .
11329	Extract user s params from a query .
11330	Run a query and return the result .
11331	Return a pandas DataFrame .
11332	Get a networkx graph .
11333	Returns a heatmap of the plot .
11334	Plot the data .
11335	Plot bar chart .
11336	Generate a CSV file .
11337	Returns True if the given permission is required .
11338	Update the context data .
11339	Return a list of widgets sorted by position .
11340	Returns a list of widgets that should update
11341	Register a dashboard widget .
11342	Unregister the given widget .
11343	Returns the last update of the dashboard widget .
11344	Get a setting by name .
11345	Save a setting to the dashboard widget .
11346	Check if the current update should be updated .
11347	Construct an array from an array .
11348	Return a copy of the given shape as numpy arrays .
11349	Concatenate two arrays .
11350	Check if a list of arguments can be used .
11351	Helper function to format axes .
11352	Wraps a function on an RDD .
11353	Align the given axes .
11354	Convert to Spark .
11355	Return the tordd array for the given axis .
11356	Return a new RDD with the given size .
11357	Apply a function to the RDD .
11358	Return a chunk of this RDD .
11359	Apply a function to the RDD .
11360	Apply a function to each RDD .
11361	Get the plan for this chunk .
11362	Remove padding from value .
11363	Get the number for a given shape .
11364	Returns a list of slices for the given shape .
11365	Return a mask with n indices .
11366	Re - partition the data into this RDD .
11367	Return the stack of this RDD .
11368	Align the given axis .
11369	Return the first RDD
11370	Compute the stat for each axis .
11371	Compute the mean of each axis .
11372	Compute variance .
11373	Compute standard deviation .
11374	Return the sum of each axis .
11375	Compute the maximum reduction operation .
11376	Compute the minimum reduction operation .
11377	Return chunks of this RDD .
11378	Swap data on a single key
11379	Transpose the matrix .
11380	Swap axis1 and axis2 .
11381	Reshape the given shape .
11382	Reshape the shape .
11383	Return a copy of the array .
11384	Convert this RDD into a new RDD .
11385	Clip this RDD .
11386	Convert this RDD into a numpy array .
11387	Convert argument to tuple .
11388	Convert an iterable into a tuple .
11389	Check if the given shape is in the given axes .
11390	Return True if two arrays are all closed .
11391	Convert a list of lists to a single dimension .
11392	Slicify a slice .
11393	Check that a new object has the same axes .
11394	Check if two keys have the same size .
11395	Concatenate a list of values .
11396	Iterates over the dimensions of an array .
11397	Zip an RDD with an index .
11398	Decorate a function as a function .
11399	Looks up the constructor for the given arguments .
11400	Reshape this RDD .
11401	Transpose this RDD .
11402	Reshape the array with the given shape .
11403	Transpose the array with the given axes .
11404	Return a copy of the given shape .
11405	Return an array of zeros
11406	Concatenate numpy arrays .
11407	Compute discrete likelihood of data .
11408	Returns the alpha vector of the most likely likelihood .
11409	Calculate the discrete alpha of a set of points .
11410	Calculate the best alpha between two files .
11411	Calculate the best best alpha for the input .
11412	Plot a 2D model .
11413	Log normal distribution .
11414	Sanitize the HTML .
11415	Configure a Yandex object
11416	Return a list of tag - git tags .
11417	Return the MD5 hash of the key .
11418	Return the SHA256 hash of this key .
11419	Return the SHA512 hash of this key .
11420	Parse a long value .
11421	Decode a public key .
11422	Parse options field .
11423	Process SSH key data .
11424	Process SSH DSA keys .
11425	Process the ECDSA SHA .
11426	Process aned25519 key .
11427	Parse SSH2 key data .
11428	Step the given token .
11429	Step a single token .
11430	Return a list of all possible mes .
11431	Store the credential .
11432	Main function .
11433	Initialize Python version .
11434	Context manager for creating a file .
11435	Returns HTML for the h5 breakpoint .
11436	Return the normalized CSS .
11437	Displays the font preview .
11438	Return HTML for modernizr .
11439	Displays the CSS to use .
11440	Displays the JavaScript UI .
11441	Returns a script that will be used to generate the javascript
11442	Displays the CSS to be displayed on the plugin .
11443	Returns the stylesheet for the CSS
11444	Return HTML for the CSS formset .
11445	Scroll to scrollto .
11446	Returns the HTML for the JavaScript .
11447	Displays the CSS for the dj frontend .
11448	Create a template for the given account .
11449	Render the widget .
11450	Iterate over authentication hashes for a user .
11451	Calculate the expiration time .
11452	Get the token for a given user .
11453	Serialize the object as JSON .
11454	Deserialize a profile into a dictionary .
11455	Update the user in the given selector .
11456	Request failed authentication .
11457	Verify that a user is valid .
11458	Check if the request is secure .
11459	Get user s username
11460	Creates a new user .
11461	Login to a user .
11462	Logs out a user .
11463	Authenticate with the given params .
11464	Authenticate with the given password .
11465	Authenticate with the given user .
11466	Change the user s password .
11467	Send a password to the user .
11468	Reset the user s password .
11469	Merge a dictionary
11470	Read the contents of a file .
11471	Get AleaId field for an object or model .
11472	Given an object_ids return an AleaIdMapping .
11473	Get an AleaId mapping from a model .
11474	Get object IDs for a given model .
11475	Get an object for a given model .
11476	Set default forwards .
11477	This method is used to set an operation in the database .
11478	Truncate models .
11479	Truncate database forward .
11480	Truncate the database .
11481	Initialize options .
11482	Finalize the build options .
11483	Run meteor app .
11484	Convert a path to a directory .
11485	Generate a random seed .
11486	The state of the state .
11487	Generate a random string .
11488	Create an API endpoint .
11489	Generate the endpoints for the given object .
11490	Clear the API path map cache .
11491	Pretty print a value
11492	Check that the keyword arguments are valid .
11493	Open the websocket .
11494	Close the connection .
11495	Called when a message is received .
11496	Yield data from a DDP message .
11497	Process message .
11498	Dispatch a message .
11499	Receive a connection .
11500	Receive a ping .
11501	Receive a sub .
11502	Receive an unsub message .
11503	Receive a method .
11504	Return a JSON representation of the socketJS .
11505	Serve web servers .
11506	Main command line interface .
11507	Print message .
11508	Stop all threads .
11509	Start the database .
11510	Run PostgreSQL connection .
11511	Process the connection .
11512	Monkey patch the psycopg2 module .
11513	Return a random id for a given name .
11514	 autodiscover API
11515	Return a dict representation of this instance .
11516	Get an object .
11517	Emit a record .
11518	A decorator that returns a middleware for the given handler .
11519	Add a route .
11520	Add a resource object .
11521	Run the application .
11522	Send a message .
11523	Send multiple registration messages .
11524	Fetch inactive ids
11525	Send a message .
11526	Send bulk message .
11527	Send JSON data .
11528	Send data to the API .
11529	Get a model from a module .
11530	Perform a fast forward selection algorithm .
11531	Search a term .
11532	Translate a term .
11533	Return the trending of the user .
11534	Create a gif object .
11535	Return an instance of the screenensaver .
11536	Upload tags to a file .
11537	Normalize data .
11538	Fetch data from the API .
11539	Translate a term or phrase
11540	Get trending for a given rating
11541	Get a Giphy image
11542	Upload a file to the server .
11543	Read access control file .
11544	Authenticate the user
11545	Upload an existing media .
11546	Check the upload status .
11547	Update a video .
11548	Delete a video
11549	Check video availability .
11550	Show a video .
11551	List videos .
11552	Upload a file to youtube .
11553	Create an upload form .
11554	Upload a video .
11555	Remove a video .
11556	Authenticate the video .
11557	Save a video instance .
11558	Delete video .
11559	Updates the metadata .
11560	Update a metadata field .
11561	Update this item .
11562	Parse a string s .
11563	Return a string representation of a tree .
11564	Load data from a file - like object .
11565	Read data from a file .
11566	Parse a node .
11567	Create a new node .
11568	Return the label of the node .
11569	Return a string containing the ASCII art for the user .
11570	Get node by label .
11571	Prune the node .
11572	Resolve polytomies .
11573	Remove internal names .
11574	Remove leaf names .
11575	Decorator to check if a user is authenticated .
11576	Convert a string to a normal string
11577	Raise an exception if the given setting is not present .
11578	Get an argument by name .
11579	Get the arguments of the request .
11580	Decorator for async callbacks .
11581	Get a cookie .
11582	Clear a cookie .
11583	Redirect to the authenticated user .
11584	Get the authenticated user .
11585	Request parameters .
11586	Redirect to the authorization endpoint .
11587	Send a request to facebook .
11588	Get authenticated user .
11589	Concatenate url .
11590	Parse a header line .
11591	Add a value to the header .
11592	Get a list of headers .
11593	Parse a single line .
11594	Parse headers .
11595	Normalizes HTTP headers .
11596	Convert a string to UTF - 8 .
11597	Convert a string to unicode .
11598	Convert a string to a string .
11599	Recursively recursive unicode objects .
11600	Check if the app is not unique .
11601	Iterate over all subclasses of class .
11602	Select the specified policy .
11603	Return the occupancy of a list of points .
11604	Write the atoms box to a file .
11605	Write a PDB box to a PDB file .
11606	Determine the number of molecule numbers .
11607	Resize a protobuf box for a given number of lipids .
11608	Write a rudimentary topology file .
11609	Iterate over resources in a file .
11610	Add a message to a user .
11611	Log multiple users .
11612	Get all the messages for a user .
11613	Process a request .
11614	Verify config file .
11615	Verify that the profile is valid .
11616	Retrieve data from a message .
11617	Retrieve the password from a message .
11618	Update config data from a message .
11619	Update config password .
11620	Create a config profile .
11621	Display the required items for a given message type .
11622	Get the data from a message type .
11623	Get authentication from a message type .
11624	Configure a profile .
11625	Write a message .
11626	Write authentication information .
11627	Add attachments to the message
11628	Send this message .
11629	Send a message .
11630	Create a message type .
11631	Return a credential property .
11632	Validate a property .
11633	Validate an input message
11634	Check that the Twilio attribute is valid .
11635	Validate SlackPost attribute .
11636	Check that the given attribute is valid .
11637	Send a coroutine .
11638	Add a message .
11639	Read body from file .
11640	Return a dictionary of keyword arguments .
11641	Send a message .
11642	Get the id of a chat .
11643	Send a message .
11644	Send the message .
11645	Get the SMTP server .
11646	Generate the email message .
11647	Add the message header .
11648	Add the body to the message .
11649	Add attachments to the message .
11650	Get session .
11651	Get the SMTP SSL connection .
11652	Get the TLS session .
11653	Sends the message .
11654	Save the tag to a file .
11655	Unload the image .
11656	Get image region .
11657	Check if the key is valid .
11658	Remove all elements from the internal list .
11659	Write the data to the file .
11660	Read data from the file .
11661	Delete the file .
11662	Resize this chunk .
11663	Insert an IFF chunk .
11664	Save the ID3 file .
11665	Delete a file .
11666	Parse a file .
11667	Process a normal line .
11668	Add a new source block .
11669	Draw a string .
11670	Parse an ISO 8601 time string .
11671	Make HTML words .
11672	Make an HTML word
11673	Make HTML header
11674	Make HTML code from a list of lines .
11675	Make HTML items .
11676	Save the structure to a file .
11677	Update the parents of a file .
11678	Run the game .
11679	Register a mapping .
11680	Get the product .
11681	Register a free form key .
11682	Computes the HMAC for a string .
11683	Returns the headers for the request .
11684	Send a request .
11685	Send a GET request .
11686	Send a POST request .
11687	Send a DELETE request .
11688	Return APEValue for the given kind .
11689	Send a request .
11690	This method returns a generator that yields hostaginating zone instances .
11691	List hosted zones .
11692	Create a new hosted zone parser .
11693	List resource record sets by zone ID .
11694	Change resource record sets .
11695	Draw an image .
11696	Draw the image region .
11697	Return the size of the packet .
11698	Replace old pages with new data .
11699	Find the last page of a file .
11700	Set the section name .
11701	Add markup .
11702	Process markup content .
11703	Get the markup for the given tag name .
11704	Create a new hosted zone writer .
11705	Return True if file is locked .
11706	Insert bytes at the given offset .
11707	Delete bytes from a file - like object .
11708	Convert bytes to UTF - 8 .
11709	Add a change set .
11710	Parse the change info .
11711	Calculate the content width of a string .
11712	Returns True if this object has been modified .
11713	Delete this record .
11714	Save this record sets .
11715	Parse ID3v1 tag .
11716	Make an ID3 v3 v1 .
11717	Read size bytes .
11718	Delete all keys with key .
11719	Called when a frame is loaded .
11720	Update the common pics .
11721	Update this binary frame to v24 .
11722	Unload the sound .
11723	Play this voice .
11724	Set the loop points .
11725	Returns a list of glyph values .
11726	Filter glyph names .
11727	Write encoding list to file .
11728	Write an array to a file .
11729	Main entry point .
11730	Check if a file exists .
11731	Make a list of file files .
11732	Parse a hosted zone instance .
11733	Parse an e_delegation set .
11734	Write a list of blocks .
11735	Add padding to blocks .
11736	Delete this VCFLAC file .
11737	Save the metadata to a file .
11738	Parse an alias .
11739	Parse the e_resource_record values .
11740	Parse an e_rrset .
11741	Delete this record set .
11742	Add a record set to this resource .
11743	Create a record .
11744	Create a record with the given values .
11745	Create a CNAME resource record .
11746	Create an MXResource Record .
11747	Create a new namespace record .
11748	Create a new PTR resource record .
11749	Create a new DNS record .
11750	Create a new service record .
11751	Create a new txt resource record .
11752	Registers a TXXX key .
11753	Get the initial values for a given change .
11754	Write a change .
11755	Write a change record set .
11756	Initialize logging .
11757	Return the item for an alias .
11758	Freeze a dictionary
11759	Join HTML attributes .
11760	Initialize application .
11761	Initialize the bars .
11762	Bind a bar .
11763	Returns a dictionary of the arguments for this object .
11764	The URL for this endpoint .
11765	Return True if this view is the current endpoint .
11766	Validate metric class .
11767	Get statistics by name .
11768	Calculate statistics .
11769	Ensures that the app is gadgets .
11770	Dump metric statistics .
11771	Handle maintenance statistics .
11772	Get a list of variables from GET variables .
11773	Get the value of a GET request .
11774	Get the next colour of the current colour .
11775	Returns a dictionary with the params for the given user .
11776	Get the number widget for the geckoboard .
11777	Returns a tuple of metrics for the geckoboard widget
11778	Get the stats for a geckoboard line chart .
11779	Return the geckometer for a user .
11780	Returns a dictionary of metrics for the geckoboard .
11781	Get all active stats .
11782	Register a GAD .
11783	Get the context data .
11784	Log an error .
11785	Decorator for validation functions
11786	Prompt for long input .
11787	Prompt user for list input .
11788	Write input file to file .
11789	Schedule games for a given year .
11790	Return the winner of the game .
11791	The season of the date .
11792	List of starters .
11793	The surface of the game .
11794	Return the coin toss .
11795	Retrieve weather information .
11796	Return information about the reference
11797	Schedule games .
11798	Return a list of all standings .
11799	Get team stats table .
11800	Return a DataFrame containing the Oy voting .
11801	Return a DataFrame with lines core information .
11802	The season of the date .
11803	Get player stats .
11804	Decorator to switch a directory to a directory .
11805	Decorator for cache functions .
11806	Get a key for a class instance .
11807	Memoization function .
11808	Return the age of the year .
11809	Get stats table .
11810	Return statistics about per game .
11811	Returns a summary of the total total counts for the given kind .
11812	Return a summary of the per minute
11813	Return a summary of the per 100 results .
11814	Return a summary of the basic data for a specific kind .
11815	Return a summary of the dut .
11816	Get stats for a specific kind .
11817	Get game log .
11818	Write session data .
11819	Expand details from a dataframe
11820	Add the team and team columns .
11821	Add team features to dataframe
11822	Calculate the initial Windows value .
11823	Return a DataFrame with the given kind .
11824	Return a list of yearaward table .
11825	Return the team name .
11826	Get box scores for a given year .
11827	Given a year and keyword return it .
11828	Returns the number of coaches by year .
11829	Schedules a year .
11830	Get off the coordinator .
11831	Return the coordinator .
11832	Get stadium for a given year .
11833	Get offensive scheme .
11834	Return the alignment for a given year .
11835	Return a DataFrame containing the splits for the given year .
11836	Get HTML for given URL .
11837	Flatten a list of links .
11838	Convert url to ID .
11839	Convert kwargs to a query dictionary .
11840	Create a stream from an HDF5 file .
11841	Pass through to read_idx .
11842	Get the first read_idx if it is present .
11843	Close the stream .
11844	Get a batch of data .
11845	Get the total number of bytes for a given path .
11846	Get a task queue .
11847	Get a generator from the queue .
11848	Parse a protobuf file .
11849	Dump a protobuf object to a file .
11850	Read a varint from the file .
11851	Read all the objects from the file group .
11852	Close the file .
11853	Write bytes to the stream .
11854	Flush the buffer .
11855	Get the directory of the game .
11856	Execute input text with keyboard emulation .
11857	Generate a fake movie .
11858	Returns a list of all traits .
11859	Wait until the given condition matches the given condition .
11860	Wait until all traits are present .
11861	Set all ignored exceptions .
11862	Get the main volume .
11863	Returns the source of the main command .
11864	Send a message .
11865	Get the status of the volume .
11866	Power off the device .
11867	Power on the server .
11868	Set the volume .
11869	Select source .
11870	Deobfuscate a request .
11871	Calculate the CRC of the given plaintext .
11872	Encrypts a value .
11873	Check if a song is missing .
11874	Returns a list of all links of the given html .
11875	Check if song name is a song .
11876	Parse a song .
11877	Get URL for a song .
11878	Parse Google API html .
11879	Parses a song .
11880	Download an HTML page .
11881	Download file using requests .
11882	Download file using Wget
11883	Find station codes for a given city .
11884	Get a location observation .
11885	Parse an observation response .
11886	Get an observation by station code .
11887	Search paths .
11888	List of installed compiler extensions .
11889	The mimetype of the extension .
11890	Return the mimetype of the compiler .
11891	Return the compiler extension .
11892	Register a processor .
11893	Unregister a processor .
11894	Return a list of paths for this finder .
11895	Register default defaults .
11896	Try to import PyQt
11897	Create a Netnode object for the meta node .
11898	Add a netnode plugin name .
11899	Delete the given plugin name .
11900	Import the settings from the given path .
11901	Export the settings to a QSettings object
11902	The directory for this plugin .
11903	Iterate over the keys of the user .
11904	A simple error handler .
11905	Get a table .
11906	List all DynamoDB tables .
11907	Fetch the items from the given category .
11908	Get metadata id .
11909	Returns the timestamp for the given metadata .
11910	Fetch owner team .
11911	Fetch owner user
11912	Fetch crate versions
11913	Fetch information about a crate .
11914	Fetch crate data
11915	Get the summary of this object .
11916	Get a list of CRates .
11917	Fetch a crate .
11918	Get information about the specified crate attribute .
11919	Fetch items by path .
11920	Fetch a category .
11921	Fetch items for given category .
11922	Get all questions .
11923	Fetch the given category
11924	Return the updated metadata field for the given item .
11925	Returns the category of the given item .
11926	Return an iterator over the next items .
11927	Return the buffer list .
11928	The IO priority .
11929	Close the context .
11930	Submit a list of blocks .
11931	Cancel an event .
11932	Cancel all available blocks .
11933	Returns a list of events .
11934	Fetch a category
11935	Get all cells .
11936	Parse the feed data .
11937	Get a list of formats .
11938	Return permission factory .
11939	Create blueprint .
11940	Create URL rule .
11941	View a record .
11942	Default view method .
11943	Export a record .
11944	Return a Chronometer time .
11945	Close the socket .
11946	Remove a client .
11947	Increment a metric .
11948	Send a timing for a metric .
11949	Log a timing since the given time .
11950	Add a gauge .
11951	Update a gauge delta .
11952	Set a metric value .
11953	Request data .
11954	Create a batch client .
11955	Get the unit client .
11956	Flush all data from the socket .
11957	Return the permission factory for the given record .
11958	Create a TCP batch client .
11959	Flush all data from the socket .
11960	Return the TCP client .
11961	Return a new user with the given password and password .
11962	Turns an object into an open string .
11963	Convert a term to a converter .
11964	Convert an object to a Python object .
11965	Convert an object to Openmath .
11966	Register a converter for a class .
11967	Register a function to be used as deprecated .
11968	Initialize the app
11969	Iterate over valid choices .
11970	Split the kwargs into a dictionary of fields and fields .
11971	Decorator to register a function .
11972	Create a value for an object .
11973	Return default form files .
11974	Decorator for field required attributes .
11975	Decorator for field choices .
11976	Return a string representing the decimal field .
11977	Format email field data .
11978	Check if a date field is valid .
11979	Check for datetime field data .
11980	Convert a float field to a string .
11981	Check if a field is an integer field .
11982	Generate a random time field .
11983	Return the data for the given field .
11984	Return a string for multiple choices .
11985	Return data for a given field .
11986	Encode an object into a string .
11987	Publish package .
11988	Tag version .
11989	Returns a decorator that checks if any field is blank .
11990	Load a Python module .
11991	Build an instance .
11992	A helper function to return a OMApplication object .
11993	Return a tuple with a tuple .
11994	Decode a byte string .
11995	Encode the raw data .
11996	Convert a value to a fixed precision .
11997	Format a number .
11998	Convert a number to a currency object .
11999	Convert a numpy array to a numpy array .
12000	Pack an array from a blosc array .
12001	Add a workspace .
12002	Remove a workspace .
12003	Get a dictionary of all the workspaces
12004	Get an object by name .
12005	Check if a repository exists .
12006	Sync a workspace .
12007	Clone a repository .
12008	Check if the current version is newer .
12009	Convert an array to a numpy array .
12010	Create a numpy array from an array of images .
12011	Execute a workspace .
12012	Print an existing repository .
12013	Set the console handler .
12014	Executes a given command .
12015	Load an image .
12016	Save numpy data to file .
12017	Save collection .
12018	Print the status of a workspace .
12019	Print the status of a repository .
12020	Get the block size .
12021	POST no chunking data
12022	Load a Tiff file .
12023	Save a Tiff file .
12024	Load images from Tiff file .
12025	Write the configuration to a file .
12026	Clone this branch .
12027	Get the version of the package .
12028	Mix and match name .
12029	Decorate an option decorator .
12030	Reserve a list of ids
12031	Merge a list of ids
12032	Propagate a channel .
12033	List all projects in a dataset .
12034	Get dataset by name
12035	List available datasets .
12036	Parse the workspace .
12037	Execute a workspace .
12038	Show a workspace .
12039	Show all workspace names
12040	Return the URL for the given endpoint .
12041	Guess the format of the given extension .
12042	Open an image .
12043	Convert input file to out_file .
12044	Builds a graph from the object
12045	Compute in variants of the graph file .
12046	Convert a graph into a graph .
12047	Convert ramons to a dictionary .
12048	Return memory on the given type .
12049	Delete a channel .
12050	Add a new dataset .
12051	Serialize the dataset as JSON .
12052	Return a dictionary of the dataset .
12053	Create a channel dictionary .
12054	Build the project dictionary .
12055	Identify the size of an image .
12056	Put data in oo .
12057	Find the path to a workspace .
12058	Get public tokens .
12059	Get project info
12060	Upload metadata .
12061	Get a URL .
12062	Perform a POST request .
12063	Delete a URL .
12064	Load data from a file .
12065	Save an HDF5 file .
12066	Infer gaps in a tree .
12067	Execute the Nvim recover operation .
12068	Install GNU translation translations .
12069	Return an exclusive namespace .
12070	Calculate the percent of the given part .
12071	Get cache stats
12072	Return a dictionary with the cache name .
12073	Return the data for the given request .
12074	Display the server status .
12075	Show cache .
12076	Get cache stats .
12077	Cache cache .
12078	Return a human readable number of bytes .
12079	Find and return a config file .
12080	Add a new directory .
12081	Apply configuration .
12082	Absolute path of the file .
12083	Read the contents of the file .
12084	Write data to file .
12085	Configure logging .
12086	Create the file .
12087	Apply the given applicator .
12088	Absolute path of the file .
12089	Remove this file .
12090	Prepare the tree .
12091	Remove all children .
12092	Convert path to path
12093	List all files in this directory .
12094	Write data to a file .
12095	Read a file .
12096	Add one or more files .
12097	Save the configuration to a file .
12098	Load yaml file
12099	Remove the file .
12100	Load plugins from a directory .
12101	Recursively update a dictionary .
12102	Return a child node .
12103	Resolve the key path
12104	Get the value of the container .
12105	Update this node with the given data .
12106	Load the default configuration .
12107	Apply the given object to a string .
12108	Build a callback URL .
12109	Process input .
12110	Send socket output .
12111	Send an RPC request .
12112	Read input from socket .
12113	Send socket output .
12114	Wraps a function in a callback .
12115	Returns a dict with the settled mode for the remote link .
12116	Configure this node .
12117	The address of the source .
12118	The address of the target .
12119	Called when the link is closed .
12120	Create a new sender .
12121	Request a sender .
12122	Create a new receiver .
12123	Request a receiver .
12124	Destroy a link .
12125	Check if the session is closed .
12126	Process an endpoint event .
12127	Add inline patterns .
12128	Called when receiver is closed .
12129	Called when receiver is failed .
12130	Get the host and port for a given server address .
12131	Connect to a socket .
12132	Connect to a server .
12133	Return a list of readers that needs to be processed .
12134	Return a decorator that can be called when the connection is not reentrant .
12135	Process the connection .
12136	Get the output data of the transport .
12137	Create a new sender .
12138	Reject a sender .
12139	Create a new receiver .
12140	Check if connection failed .
12141	Called when the connection is active .
12142	Check if connection is closed .
12143	Handle an error .
12144	Decorator to view an Twilio Twilio Domain
12145	Get the color string .
12146	Returns a dictionary of font names
12147	Set the compression value .
12148	Add a PDF object to the buffer .
12149	Output stream .
12150	Put a stream into the stream .
12151	Add text to document .
12152	Set the color scheme .
12153	Sets the default font .
12154	Add a PDF page .
12155	Set the font size .
12156	Add text to the page .
12157	Add newline to page .
12158	Add a PDF chart to the document .
12159	Output the output pages .
12160	Get all orientation changes
12161	Output font files .
12162	Output all the images .
12163	Output the image
12164	Transform a matrix
12165	Compute the absolute position of the current matrix .
12166	Set the style of this symbol .
12167	Rotate a point
12168	Set information about this object .
12169	Set display mode
12170	Close the document .
12171	Put a PDF header .
12172	Add pages to document .
12173	put resource dict
12174	Add information to the file .
12175	Put the catalog .
12176	Updates the header .
12177	Iterates over a sequence of sequences .
12178	Return a list of values that are naive .
12179	Gosper generator .
12180	Brents a sequence of sequences .
12181	Return True if the x is in the given test length .
12182	Return True if the data is in the given test length .
12183	Return True if x is less than the given test .
12184	Check if y is greater than the given test .
12185	Return a copy of the cursor .
12186	Add x to the x - axis .
12187	Add the y - axis to the y - axis .
12188	Draw the text .
12189	Create a new Metric
12190	List all tags .
12191	Get a label by name .
12192	Update a label
12193	Delete a tag .
12194	Create a label .
12195	List actions .
12196	Get tags .
12197	Create a new group .
12198	Retrieve the list of hooks .
12199	Update a hook .
12200	Create an alert .
12201	Get a list of alerts for an alert type
12202	Update an alert .
12203	Setup Sphinx extension
12204	Return the path of the themes
12205	Perform log entries .
12206	List logs .
12207	Get information about a given log set .
12208	Find the attacker slider .
12209	Calculate the duration of the simulation .
12210	Update the scene .
12211	Compute the data .
12212	Calculate the bin .
12213	Free the arrays
12214	Receive data from the socket .
12215	Generator for line generator
12216	Iterate over buffer bytes .
12217	Return code and message from NNTP protocol
12218	Generate info for the given code .
12219	Return the info for the given code .
12220	Run a NNTP command .
12221	Return a list of capabilities .
12222	Handle mode reader .
12223	Disconnect from NNTP server .
12224	Get the date of the server .
12225	Send help message .
12226	Generate new groups
12227	Generate info for a new NNTP message .
12228	Generate a list of new News objects
12229	Generator for list active users
12230	Generate name and timestamp for list active .
12231	Generator for all newsgroups
12232	Generate information about list overview format .
12233	List extensions .
12234	Generate list of lists .
12235	Return a list of all elements in the list .
12236	Groups a group .
12237	Returns the next article and its identifier .
12238	Handle an article .
12239	Return the head of a message .
12240	Return the body of the message .
12241	Display information about xg title .
12242	Get information about a given header .
12243	Send header message .
12244	Generate a generator of xover info .
12245	Generate a list of headers for a given message .
12246	Return a list of strings matching the given pattern .
12247	Return True if the x feature is gzipped .
12248	Sends a message to NNTP
12249	Convert integer to offset .
12250	Get a timestamp
12251	Create a datetime object
12252	Perform a POST request .
12253	Perform a DELETE request .
12254	Perform a GET request .
12255	List scheduled queries .
12256	List tags .
12257	Get tags by name or id .
12258	Create an alert report .
12259	Delete a tag .
12260	Create a scheduled query .
12261	Create a scheduled query
12262	Delete a tag .
12263	Unparse an integer range .
12264	Parse a newsgroup line .
12265	Parse a header line .
12266	Return a string representation of the header .
12267	Send a POST request .
12268	Run the tests .
12269	Generate a docstring for a set of defaults .
12270	Decorator that adds default keyword arguments to a function .
12271	Return the default docstring for this class .
12272	Set the value .
12273	Check that the value is a valid type .
12274	Return the value of the model
12275	Check if value is a scalar .
12276	Return the error of the array .
12277	Set errors .
12278	Set the bounds .
12279	Import the v2 metrics
12280	Extract a dictionary of metrics
12281	Filter the metrics
12282	Call the RPC
12283	Return an expression
12284	Get an operator
12285	Add a text
12286	Initialize properties .
12287	Returns a list of parameter names .
12288	Get the parameter values for each parameter .
12289	Return an array of errors for each parameter .
12290	Clear all derived parameters .
12291	Set the method value .
12292	Get environment variables .
12293	Get URL parameters .
12294	Perform a GET request .
12295	Perform a DELETE request .
12296	Perform a POST request .
12297	Perform a PUT request .
12298	Call the API .
12299	Validate the sceneInfo .
12300	Verifies that the type product is valid .
12301	Get the size of the remote file
12302	Download Earth
12303	Validate a list of bands .
12304	Establish connection to Earth explorer
12305	Add prefix to prefix .
12306	Convert a zone to a timezone .
12307	Normalize a datetime .
12308	Join an iterable .
12309	Get the positions of a newline .
12310	Convert a point to a source .
12311	Dump the results to stdout .
12312	Filter the metrics if needed .
12313	Create a new instance from a list of files .
12314	Set the chance of a file .
12315	Run a single job
12316	Create a rule .
12317	Run special handling .
12318	Return the grammar for the input source .
12319	Returns a list of rules for this grammar .
12320	The list of comments for this grammar .
12321	Returns a list of directives for this document .
12322	Return the output source .
12323	Compile the parser .
12324	Get the import directives .
12325	Return the token type enum .
12326	Return the class definition .
12327	Get the entry point name .
12328	Get the rule definition .
12329	Get the source of the input source .
12330	Get the transform of a rule .
12331	Convert an expression to integer .
12332	Convert a node to an integer .
12333	Given a list of operands return a list of operands .
12334	Removes groups from an option tree .
12335	Convert an AST node to code .
12336	Converts a node into an AST code .
12337	Convert the terminal value to code .
12338	Convert an option group to code .
12339	Convert a repetition group to code .
12340	Convert special handling to code .
12341	Return the alternate code for an expression .
12342	Concatenate operands into code .
12343	Exclude AST code .
12344	Return a string representation of an operator .
12345	Return a list of AST code .
12346	Find directives that match the predicate .
12347	Return True if child is a type of parent .
12348	Yield directives from a comment .
12349	Handle the API results .
12350	Get a new ID .
12351	Unregisters a hotkey .
12352	Add arguments to the parser .
12353	Configure logging .
12354	Validate the arguments for this account
12355	Given a list of nodes return a list of operator nodes .
12356	Given a list of nodes return an OptionTree .
12357	Reduce the nodes .
12358	Adds the arguments for the metric
12359	Load plugin manifest .
12360	Get a metric definition by name .
12361	Returns the number of column lengths for all fields in this table .
12362	Returns the number of metrics column lengths .
12363	Escape the metrics in the list .
12364	Print the fields of the table .
12365	Print the output metrics header .
12366	Generate the markdown file for this widget .
12367	Parse the given text .
12368	Process the given text .
12369	Add the arguments to the parser .
12370	Parse a time date .
12371	Print a CSV file .
12372	Output a JSON string .
12373	Output the JSON .
12374	Return the output of the measurement
12375	Return True if the node is not empty .
12376	Pretty print the tree .
12377	Returns a function that returns a substring of the given extractor .
12378	Get a terminal node .
12379	Returns a parseNode with the given text .
12380	Get exclusion text .
12381	Count leading whitespace in text .
12382	Call extractor .
12383	The position of this node .
12384	Check if this node is empty .
12385	Add ignored values .
12386	Check if value is a type of node_type .
12387	Return a flattened AST node .
12388	Return a new ParseNode with the given predicate .
12389	Return the merged node of this node .
12390	Return a new node with the given new type .
12391	Return a parseNode representing this node .
12392	The position of the current line .
12393	Return the max line position .
12394	Step next character .
12395	Step the next line .
12396	Step the previous line .
12397	Returns the last line of the cursor .
12398	Get the position of the cursor .
12399	Save context .
12400	Restore current context .
12401	Return the string representation of the object .
12402	Set the name of the instance .
12403	Count the number of variables in this file .
12404	Return the number of functions that have a function .
12405	Update the number of types .
12406	Updates the scope with the given signature .
12407	Return the union of this scope .
12408	Update this scope with the given oset .
12409	Return the intersection of this scope .
12410	Update this scope with the given oset .
12411	Return a new scope with the difference between this scope .
12412	Update this scope with symmetric difference .
12413	Return the symmetric difference of the scope .
12414	Add it to the scope .
12415	Remove a signature from the set .
12416	Remove a signature .
12417	The values of the state .
12418	Return the first signature of the signature .
12419	Return the last signature .
12420	Get a signature by key .
12421	Get a scope by name .
12422	Get a signature by name .
12423	Return True if this state is a new scope .
12424	Return an AST injector .
12425	Normalize an AST .
12426	Set this node s attributes .
12427	Iterate over all values in the stream .
12428	Check to see if a hit has a charge
12429	Returns the signature of the signature .
12430	Resolve the type of the type .
12431	Return a list of names for the given type .
12432	Set the name of a reference .
12433	Delete a local file .
12434	Delete a S3 file .
12435	Delete a file .
12436	Save a local file .
12437	Save a temporary file .
12438	Save object to file .
12439	Find a bucket by path .
12440	Create enum .
12441	Check the arguments of a function .
12442	Set a single thing in the chainmap .
12443	Decorator to add a method to a class .
12444	Decorator to add a hook to a class .
12445	Decorator to register a class or hook .
12446	Decorator to register directives .
12447	Decorator to set a decorator .
12448	Bind a node to another node .
12449	Read the end of the stream .
12450	Push rule nodes to this node .
12451	Pop the rule nodes .
12452	Return the value of the tag .
12453	Add a stream to the stream .
12454	Begin a tag .
12455	End a tag .
12456	Set the rules for this class .
12457	Set the hooks for this class .
12458	Set directives .
12459	Evaluate the given rule .
12460	Evaluate a hook .
12461	Read text from the stream .
12462	Read one character .
12463	Read a character from the stream .
12464	Read until the stream is closed .
12465	Return True if the stream is ignored .
12466	Set the hit dtype for the given record .
12467	Set the cluster dtype .
12468	Check that all of the hits are compatibility .
12469	Add a rule clause to the namespace .
12470	Add rules to the parser tree .
12471	Add a new rule .
12472	Add sequences to the parser tree .
12473	Add alt to the parser tree .
12474	Add a range to the sequence .
12475	Add a new node to the sequence .
12476	Add a capture to the sequence .
12477	Add a bind to the sequence .
12478	Add a hook to the parser .
12479	Set the number of the parameter .
12480	Convert a param to a string
12481	Set a parameter character
12482	Get the value of a parameter at i .
12483	Set the name of a hook .
12484	Add a parameter to the hook .
12485	Return the parsing rules .
12486	Return True if the stream is ignored .
12487	Add a state .
12488	Return the graph as a dot string .
12489	Write the graph to a dot file .
12490	Write this image to a PNG file .
12491	Returns a string representation of the state .
12492	Add a new state to this state .
12493	Resets the state of LivingState
12494	Infer a block .
12495	Infer a sub expression .
12496	Infer the ID of a symbol .
12497	Infer a literal .
12498	Dump nodes to stdout .
12499	Return an AST that can be used to build a function .
12500	Return the exit scope .
12501	Return the clause of the given point .
12502	Return an astroid . Call node .
12503	Return an astroid . Call node .
12504	visit a hook node
12505	Return an astroid . rule node .
12506	visit a capture node .
12507	Return an astroid . scope node .
12508	Visit the alt statement .
12509	Visit a Seq node and return an AST .
12510	Return an astroid .
12511	Return an astroid .
12512	Return an astroid .
12513	Return a string with indentation .
12514	Set the indentation of a list .
12515	Convert a list to a string
12516	Print a list of nodes .
12517	Populate a state register from a sequence .
12518	Populates an edge from a state register .
12519	Create a state register from a tree .
12520	Return True if value is equal to value
12521	Build a grammar from a string .
12522	Create a grammar from a file .
12523	Parse an entry rule .
12524	Parse an entry rule file .
12525	Set a node
12526	Set the node as an integer .
12527	Get a sibling of the node .
12528	Default serializer .
12529	Get a list of depositions .
12530	Serialize deposition to JSON .
12531	Return a list of record ids .
12532	Return a list of record ids .
12533	Import Bibdoc files .
12534	Dump a bibdoc file .
12535	Get the check number of IDs from bibdoc .
12536	Check Bib document .
12537	Dump an object .
12538	Get all accounts .
12539	Return a JSON representation of a user .
12540	Get the number of communities .
12541	Get modified recordids .
12542	Get the modified record ids .
12543	Given a collection and a collection return a set of users .
12544	Get revisions for a record .
12545	Get a dictionary of record collections for a record .
12546	Dump a JSON record as JSON .
12547	Get a list of records from a given date .
12548	Dump records to a dictionary .
12549	Return JSON representation of the user .
12550	Load common model
12551	Load a list of things
12552	Initialize app context .
12553	Memoize a function .
12554	Return the run SQL .
12555	Get the connected roles
12556	Get actions from a query .
12557	Return a dict representation of a remote account .
12558	Load token from data .
12559	Helper function to import a record file
12560	Return the module or default .
12561	Dump an object as JSON .
12562	Get a list of User objects .
12563	Get all users .
12564	Dump user information .
12565	Load a deposit .
12566	Create a record and pid .
12567	Load a record .
12568	Load records from a list of sources .
12569	Get a list of records .
12570	Load common dump files .
12571	Load communities from sources .
12572	Load users from sources .
12573	Return True if load deposit is available .
12574	Get a list of profiling statistics .
12575	Start the application .
12576	Dump profiling stats .
12577	Delete the profile .
12578	Delete the server .
12579	Get the running state .
12580	Disable timestamp for a method .
12581	Load a User from the database .
12582	Calculate translations for images .
12583	Stitch a list of images .
12584	Add a dimension to an array .
12585	Create a persistent identifier .
12586	Create a new record .
12587	Update a record .
12588	Create a list of pids for a record .
12589	Delete a record .
12590	Create files from a record .
12591	Create an object version .
12592	Delete all buckets in a record .
12593	Returns a list of all PID objects that are missing .
12594	Prepare revisions .
12595	Prepare files .
12596	Create a list of PID objects .
12597	Check if a record is deleted .
12598	Load community .
12599	Load featured community .
12600	Dump a thing to the database .
12601	Check the given thing .
12602	Delete the handler .
12603	Return the magnitude of a vector .
12604	Normalize a magnitude .
12605	Transform the tex coordinates to the given dimensions .
12606	Ensure the data is bones .
12607	Sets the length of the data .
12608	Set the parent of this node .
12609	Returns the pivot point for the given data .
12610	Start animation .
12611	Set the state of the actor .
12612	Remove the current state of the object .
12613	Set the texture state .
12614	Remove the state of this material .
12615	Ensures that the given object is cached .
12616	Re - redraw the model .
12617	Draw the model .
12618	Set the model .
12619	Write reports to XML file .
12620	Convert a test report to XML .
12621	Add a new menu .
12622	Draw the label .
12623	Draw the label .
12624	Draw the background window .
12625	delete a widget
12626	Draw the label .
12627	Register callback handlers .
12628	Register handler handlers .
12629	Add a label
12630	Add a button
12631	Exit dialog
12632	Add a confirmation button
12633	Add a button to the button .
12634	Update the progress bar .
12635	Render the given view .
12636	Render a 3d file .
12637	Return a context manager for the given step name .
12638	Check if a resource exists
12639	Add a category .
12640	Get the missing texture
12641	Get a model by name .
12642	Load a model .
12643	Returns the data for the given model name .
12644	Load a model from a JSON file .
12645	Add a widget .
12646	Draw the menu
12647	Update the background image .
12648	Called when the canvas is displayed .
12649	Check if the mouse is within the specified size .
12650	Return the p .
12651	Add a new layer to the stack .
12652	Get a region from the buffer .
12653	Draw all the attributes .
12654	Add a new action to the list of actions .
12655	Run the given action .
12656	Register a register .
12657	Add a new layer .
12658	Draws the current widget .
12659	Delete all layers .
12660	The border of the widget .
12661	Return the offset of the widget .
12662	Returns the size of the widget
12663	Read a mesh from HDFstore .
12664	Make a connection array
12665	Set the fields for this instance .
12666	Add fields to the list .
12667	Check the elements of the element .
12668	The space of the element .
12669	Returns the centroid of the centroids of each element in the group .
12670	Returns a list of angles .
12671	Return a list of edges .
12672	Return the statistics of the graph .
12673	Convert an element set to a node set .
12674	Convert node set to surface
12675	Convert a surface to element sets .
12676	Return metadata for all the fields in the graph .
12677	Return the metadata for this part .
12678	Make directories for this project .
12679	Run postprocess .
12680	Run msh .
12681	Read the history report .
12682	Read a field report
12683	convert list to string
12684	Return a string containing the EQUATION coefficients .
12685	Un sorted set label .
12686	Parse the response as JSON .
12687	Perform a GET request .
12688	Writes an XX report to a file .
12689	Write a field report .
12690	List all available components .
12691	Adds an attribute to the given field .
12692	Returns a boolean indicating whether the exception has the given descriptor .
12693	Set data .
12694	Get the mode of the axis .
12695	Set the options
12696	Create a class .
12697	Process data feed
12698	Try to convert value to float .
12699	Convert string to float .
12700	Plot graph .
12701	Convert raw string to unicode .
12702	Takes a raw string and converts it to HTML .
12703	Returns True if the given mime type matches the given mime type .
12704	Remove domain name from raw string .
12705	Given a domain name return a list of sub - names .
12706	Make a hash keyword .
12707	Return a Counter of words that are not valid .
12708	Index a stream item .
12709	Return a list of tokens with the given hash .
12710	Get document frequencies .
12711	Return an iterator over the keys for the given h .
12712	Looks up a tf table at h .
12713	Create stream items from a stream .
12714	Make a stream item from an entry .
12715	Create a ContentItem from a node .
12716	Read an integer from the stream .
12717	Read a block of data .
12718	Serialize a streamItem key .
12719	Convert a stream item to a key .
12720	Change the working directory .
12721	Strip prefix from string .
12722	Strip suffix from a string .
12723	Check if needle is a subsequence
12724	Create a cube .
12725	Start the server .
12726	Exit the server .
12727	Decorator for route methods .
12728	Register an error handler .
12729	Returns the static file .
12730	Return a callback for the response .
12731	Add a pattern to the route .
12732	Resolves the given path .
12733	Return a callback that matches the given path .
12734	Normalize a regular pattern .
12735	Return response .
12736	Add a header .
12737	Set a cookie .
12738	Return a string representing the status line of the response .
12739	Get media type .
12740	Get all data for given key .
12741	Delete all files in path .
12742	Return a list of open files .
12743	return file type stats
12744	Run a work unit .
12745	Fetch the contents of a given work unit .
12746	Get a list of lines from a file .
12747	Return a random BEL species pair .
12748	Return a random undirected species pair .
12749	Takes a sentence and returns a list of words .
12750	Return the similarity of an app .
12751	Goolabs API .
12752	Retrieve entity information .
12753	%prog shortsum review
12754	Retrieve keyword information .
12755	Goolabs API .
12756	Create a new stage .
12757	Initialize the stage configuration .
12758	Initialize stages .
12759	Run the stream items .
12760	Run the writer .
12761	Run a set of transforms on this stream .
12762	Return a new pipeline with the given configuration .
12763	Create a WSGI application .
12764	Given a list of sentences and a list of tokens return a dictionary containing the names of the tokens .
12765	Return True if all of the target mentions in the given set of targets .
12766	Return True if any of the target mentions in the given chain .
12767	Return a list of strings that match the rating .
12768	Find tokens matching the given stream item .
12769	Create a text file with the given template .
12770	Align a single chunk with an XML file .
12771	Terminate the child .
12772	Return the n - dimensional matrix of the given p .
12773	Replace all emails in text .
12774	Yield a list of sentences from the corpus .
12775	Make the label index for the given stream item .
12776	Return a list of sentences for the given stream item .
12777	Convert HTML entities to unicode .
12778	Make a clean file
12779	Create a postprocess file
12780	Remove trailing whitespace from span .
12781	Align a chunk with a file .
12782	Make absolute paths from the config .
12783	Load configuration from YAML .
12784	Given a file path and a path generate a chunk of data .
12785	Re - re - based HTML .
12786	Clean visible tags .
12787	Convert a list of i_ chunk to a file .
12788	Remove trailing whitespace from span .
12789	Main entry point .
12790	Try to load a stage .
12791	Load external stages from a file .
12792	Load the stages of a module .
12793	Initialize a stage .
12794	Read a list of values from the given index .
12795	Return True if the given href is a list of domains .
12796	Make a list of labels
12797	Yield paths from input_dir .
12798	Iterate over all tasks in the collection .
12799	Get a random number of workers .
12800	Yield tokens from a sentence .
12801	Get a list of sentences .
12802	Decorator to retry a function .
12803	Verify the md5 of the given data .
12804	Get a bucket .
12805	Decode a stream corpus .
12806	Get a chunk from a bucket .
12807	Convert a stream ID to a key .
12808	Convert key to stream ID .
12809	Generate a key for a stream item .
12810	Main function .
12811	Build an argparse parser .
12812	Add a stream item to a stream item .
12813	Convert a list of sentences to character tokens .
12814	Convert character tokens to character offsets .
12815	Convert character offsets to x paths .
12816	Add an element to the list .
12817	Returns xpath piece
12818	Return the index of the text node .
12819	Iterate over all descendants of an element .
12820	Select elements from source .
12821	Select elements by name .
12822	Select elements that match a pattern .
12823	Select elements by name
12824	Return the first siblings of the given element .
12825	Return a pretty representation of an element .
12826	Returns the command for the inkscape binary .
12827	Export the input_file to the input_file .
12828	Convert SVG to PDF
12829	Convert SVG to PNG .
12830	Returns an Environment for the given file path .
12831	Sets up the template file .
12832	Render document contents .
12833	Save the template content .
12834	Create a document from a template file .
12835	Fill the SVG document contents .
12836	Render an SVG file .
12837	Render a PDF file .
12838	Parse an XML file .
12839	Parse a source into an HTML tree .
12840	Parse an HTML fragment .
12841	Insert text in the tree .
12842	Insert node .
12843	Clone this node .
12844	Execute an option .
12845	Return string representation of node .
12846	Insert a child .
12847	Parse config file .
12848	Get Google API credentials .
12849	Create datetime objects from config .
12850	Create a calendar event .
12851	Create an event .
12852	Get the extension of a file .
12853	Add a file extension if needed .
12854	Return a temporary file .
12855	Remove all files with the given extension .
12856	Convert csv to JSON
12857	Replace file content with new .
12858	Parse the soup .
12859	Check if the next sibling is found .
12860	Given a tag and a font - style tag return it .
12861	Create a strong tag
12862	Create a breakpoint at the given tag .
12863	Parse the attributes of a tag .
12864	Clean line breaks .
12865	Parse a href .
12866	Parse an attribute .
12867	Translate keys from a list of translations .
12868	Return the object as a JSON string .
12869	Return a list of files matching the given regex .
12870	Concatenate strings .
12871	Return a generator that starts with part .
12872	Return True if part is in full .
12873	Return the length of a string .
12874	Iterate over a boolean .
12875	Apply an expression to a sequence .
12876	Lookup a value in a table .
12877	Replace characters for SVG code .
12878	Check an SVG file .
12879	Merge two SVG files .
12880	Merge PDFs into out_ filepath .
12881	Embed a font into an SVG tree .
12882	Embed a font into an SVG file .
12883	Check inputs .
12884	Check if the given function is callable .
12885	Recursively walk the input .
12886	Create the input file for the given template .
12887	Recursively walk the input .
12888	Convert an object into a string .
12889	Convert an object to a number .
12890	Convert an object to a boolean .
12891	Serialize the given AST .
12892	Change xml encoding .
12893	Save an QR code into a file .
12894	Launch the input .
12895	Call a command with arguments
12896	Convert tex to PDF .
12897	Return a list of options for the given command .
12898	Transform a geometry into another .
12899	Create a geometry object .
12900	Expand two lists .
12901	Returns the intersection between two tuples .
12902	Returns True if other is within other .
12903	Returns a polygon
12904	Create a DataFrame from a ZCNM .
12905	Write the DataFrame to a CSV file .
12906	Return a new Table with the given condition .
12907	Return a Table with the given nuclei .
12908	Return the intersection of a table .
12909	Return True if the table is not in the given table .
12910	Return True if all elements in the table are equal .
12911	Return True if all elements in self are not equal .
12912	Return True if this element is less .
12913	Calculate error .
12914	Return the error
12915	The binding energy table
12916	The s2n value .
12917	The s1n value .
12918	Returns the S2p of the P
12919	Returns the s1p of the data
12920	Return a Table containing the derived values .
12921	Decorator to create a new db session
12922	Derive a key from the master password .
12923	Bootstrap the database .
12924	Search for a given query .
12925	Modify a domain
12926	Create a new domain
12927	Extract hbs files .
12928	Fix vipre fix .
12929	Returns the GID of the geometry .
12930	Main entry point .
12931	Initialize the logging configuration .
12932	Update a package file .
12933	Return a dictionary with all available drivers
12934	Find driver for given path .
12935	Convert geometry to array .
12936	 rasterize layer
12937	Opens a raster file .
12938	Create an image from bytes .
12939	Return a copy of this raster
12940	Get the options for the DMD .
12941	Create a raster
12942	Sets the GeoTransform object .
12943	Read data from dataset
12944	Return the envelope of the image
12945	The driver for this image
12946	Create a new raster
12947	Return the masked array for the given geometry .
12948	Returns the raster
12949	Reads a raster .
12950	Resample this raster .
12951	Save this driver to the specified driver .
12952	Sets the projection of this Dataset .
12953	Move the raster to the specified location .
12954	Calculate the length of the chunk length .
12955	Return the alphabet for the given charset .
12956	Encode a single chunk .
12957	Convert a chunk to long .
12958	Get a single chunk from data .
12959	Memoize a function .
12960	Return a regex for the given file .
12961	Normalizes a date string .
12962	Detect the timezone .
12963	Convert the swagger types to a dictionary .
12964	Activate the PDB hook .
12965	Pretty print a dict .
12966	Handle jobs .
12967	Run a worker .
12968	Run all the workers .
12969	Sets the classification for this company .
12970	Send a message .
12971	Turn on light .
12972	Turn on a switch .
12973	Turn on a light on a device .
12974	Turn off a device .
12975	Send the queue .
12976	Send a message to the LW Link .
12977	Create a GCM adapter .
12978	Sets the case of this document .
12979	Update configuration values from a dictionary .
12980	Resets the default values .
12981	Set config files .
12982	Iterate over the options .
12983	Get the default options .
12984	Create configuration file .
12985	Update configuration from a dictionary .
12986	Read a configuration file .
12987	Read configuration files .
12988	Return a list of names for the given section .
12989	Return a list of sections .
12990	Check if command_name is set .
12991	Add options to the parser .
12992	Build an argparse parser .
12993	Parse command line arguments .
12994	Execute zsh command .
12995	Run a command on the zsh .
12996	Returns a command that can be used as a command .
12997	Run bash complete command
12998	Start a master .
12999	Called when a connection is established .
13000	Called when a line is received .
13001	Called when the connection is lost .
13002	Called when a job is loaded .
13003	Handle a response .
13004	Close the job .
13005	Run the job set .
13006	Close the server .
13007	Change the waiting state .
13008	Add a new result .
13009	Wait for the queue to finish .
13010	Load the current job .
13011	Called when the job is done .
13012	Add a result to the job .
13013	Cancel this job .
13014	Wait for the active jobs .
13015	Distribute all running jobs .
13016	Add a new job set .
13017	Get a job .
13018	Return the given job .
13019	Add a result to the script .
13020	Called when a job set is done .
13021	Closes the active javascript queue .
13022	Unquify a list .
13023	Match a regex .
13024	Return a list of entries matching the given filters .
13025	Get EC2 region .
13026	Return a list of entries that match filters .
13027	Get a host by name
13028	Create an instance from a dictionary .
13029	Get an attribute .
13030	Sort entries by attribute .
13031	Return a string representation of the table as a string .
13032	Create a boto instance from a boto instance .
13033	Returns True if the filter matches the given filter .
13034	Return a string representation of the object .
13035	Render a list of entries .
13036	Add a timestamp to the logger .
13037	Set up the logging handler .
13038	Create a logger .
13039	Create a Celery application .
13040	Get a specific job .
13041	Delete a worker .
13042	Return a configuration option .
13043	Get configuration section .
13044	Set options in a string .
13045	Process config command .
13046	Create all files in the CLIman .
13047	Render a list of columns .
13048	Render a row .
13049	Render a table .
13050	Prepare the rows of a table .
13051	Return a color for the given number .
13052	Get a color hash .
13053	Generate a random color .
13054	Prompt user for input .
13055	Check username and password .
13056	Check the user s token .
13057	Decorator that checks if token is valid .
13058	Check if a process is running .
13059	Import a module .
13060	Return the IP address
13061	Make a POST request
13062	Prepare post parameters .
13063	Serve the server .
13064	Render the template .
13065	Runs a command and returns the result .
13066	Streams commands from a list of commands .
13067	Streams commands from a list of commands .
13068	Return network days for a given date .
13069	Get path from command .
13070	Build the ssh command .
13071	Build a command for the remote host .
13072	Copy entries to remote_path .
13073	Create a new folder from a remote path .
13074	Run a command on a list of hosts .
13075	Connect to an SSH entry .
13076	Load a LSI profile .
13077	Create a profile from args .
13078	Add a relationship to this part .
13079	Return a list of the related links for this resource .
13080	Load relationships from source
13081	Add a part .
13082	Load a part .
13083	Find a map by name .
13084	Create a subclass from an element .
13085	Parse a string .
13086	Build a JWK
13087	Assigns the force field to the given f .
13088	Find the maximum radiation of the dictionary .
13089	Create a dictionary with the f - field parameters from the request .
13090	Return the stream as a stream .
13091	Returns a list of segments matching the given name .
13092	Copy a directory .
13093	Open a bucket .
13094	Upload a directory to S3 .
13095	Upload a file to a bucket .
13096	Upload an object to a bucket .
13097	Return a list of filenames in the given directory .
13098	Return a list of directories in the given directory .
13099	Create the prefix for the given directory .
13100	Delete a file .
13101	Ensures that the user is logged in .
13102	Return a loud .
13103	Delete a directory .
13104	Get home namespace
13105	Decorate a function if it is not a namespace .
13106	Renders the home menu .
13107	Renders the breadcrumb with the given label .
13108	Get the energy of an interaction .
13109	Get the internal energy of an object .
13110	Return a list of all the lines in the tree .
13111	Get the token for the given host .
13112	Upload a repository .
13113	Return True if the given travis event is skipped .
13114	Purge a token from fastly .
13115	Register a build .
13116	Confirm a build .
13117	Recursively update a dictionary from a dictionary .
13118	Main entry point .
13119	Part edit command .
13120	Pack a directory .
13121	Split all drive into a list .
13122	Find all file paths and part paths .
13123	Get an XML editor .
13124	Process the given module .
13125	Generate an HTML chart .
13126	Generate HTML for a chart .
13127	Serialize data to a chart object .
13128	Patch the json data .
13129	Convert json to html
13130	Convert a dictionary to a pandas DataFrame .
13131	Write html to folderpath
13132	Return a chart class .
13133	Encode fields
13134	Link to GitHub .
13135	Determine the tarball url .
13136	Create a tarball .
13137	Delete app .
13138	Iterate the attribute of an iterable .
13139	Return binary string .
13140	Return an IP address .
13141	Generate a random date .
13142	Returns a Session object
13143	Make an API request .
13144	Create a build .
13145	Check the build status .
13146	Iterate over a given prefix .
13147	Memoize a function .
13148	Decorate a function with a unique value .
13149	Register sub - commands .
13150	Return the root argument parser .
13151	Returns the description of the document .
13152	Return the help string
13153	Run the command .
13154	Encode the data .
13155	Returns a pandas DataFrame with the current data
13156	Get the last activity in the file .
13157	Request activity list .
13158	Request activity data .
13159	Return the endpoint for the athlete .
13160	Return the activity endpoint .
13161	Get a request from the API .
13162	Create a tarball .
13163	Return url with given regex
13164	Returns the title of the given languages .
13165	Returns the name of a person
13166	Generate a random last name .
13167	Render the data .
13168	Set the dataset .
13169	Render the chart
13170	Check if the chart type is valid .
13171	The URL for this request .
13172	Open browser .
13173	Save this image to a file .
13174	Download the request .
13175	Return image object .
13176	Write file to file .
13177	Return the checksum of the file .
13178	Return a decimal amount .
13179	Decorator for class name decorator .
13180	Return a dict containing all the claims that are not protected .
13181	Return a dictionary containing the signing keys as a dictionary .
13182	Unpack the metadata statement .
13183	Pack the metadata statement .
13184	Evaluate the metadata statement
13185	Return the correct usage for the given metadata
13186	Add SMS message to request request .
13187	Parse command line arguments .
13188	Adds command line arguments to the argument parser .
13189	Apply logging options to log files .
13190	Log a verbose message .
13191	Map a word into a dictionary .
13192	Generate anagrams in a word .
13193	Returns the name of the class .
13194	Transform a timeseries into a list of points .
13195	Get the last value of a timeseries .
13196	Validate a page number .
13197	Returns the page of the given iterator .
13198	Change file permissions .
13199	Create an internal signing service .
13200	Create an internal signing service .
13201	Signs a request .
13202	Create a new request .
13203	Updates the metadata statement for a given location .
13204	Update the signature of a given location .
13205	Yield the bundle contents .
13206	Create a new bundle
13207	Return a list of urls for the given asset type .
13208	Render HTML tags for the given asset type .
13209	Return HTML tags for the given asset type .
13210	Convert url to protocolise .
13211	Find links for a given URL .
13212	Connect to the AMP server .
13213	Get the module names .
13214	Import the service modules .
13215	Convert a parameter to dates
13216	Select fields from a document .
13217	Add date map to document .
13218	Print a cursor to the database .
13219	Print the results of the cursor .
13220	Get all the tasks that have the given dep .
13221	Add default dependencies for project .
13222	Create a default assettypes for the given project .
13223	Create default sequences for project .
13224	Add a new shot to the database .
13225	Register the model for the given project .
13226	Called when a sequence is saved .
13227	Create all tasks in an asset
13228	Connect to the given peer .
13229	Send data to the given peer .
13230	Get a config value from a section .
13231	Register a function as a customer .
13232	Add a Cinder event .
13233	Decorator to add a function to a network .
13234	Add a glance event .
13235	Decorator to add a function to a transport .
13236	Decorator to add a function to the user .
13237	Decorate a function to add a heat customer .
13238	Add a factory .
13239	Remove a factory by identifier .
13240	Connect to a given factory .
13241	Receive data received from the server .
13242	Disconnects a connection .
13243	Call a remote command .
13244	Create a new connection to the client .
13245	Called when a connection is made .
13246	Called when data is received .
13247	Send data to the server .
13248	Called when the connection is lost .
13249	Retrieve the local protocol for a given connection identifier .
13250	Called when the remote data is received .
13251	Disconnects a connection
13252	Draw a line centered on a line .
13253	Print clock on right .
13254	Return a version number .
13255	Identify the unit framework for a target unit .
13256	Assert that the value is in the given units .
13257	Pad data with padding
13258	Remove padding from the input data .
13259	Sign the message .
13260	Gather metadata statements
13261	Pretty print a word .
13262	Create an argument parser .
13263	Main entry point for each word .
13264	Handle incoming data .
13265	Called when a registered type is registered .
13266	Create an RPC function stub .
13267	Ping a peer
13268	Return the regex for the command .
13269	Create an AmpList from a string .
13270	Return the string representation of this object .
13271	Verify the metadata statement
13272	Try to parse the HTTP response .
13273	Dump a file .
13274	Return a list of database names .
13275	Get a dictionary of local files .
13276	Sync a folder at the given path .
13277	Decorator that checks if a request is not valid .
13278	Login .
13279	Build the package .
13280	Create a fBridge instance .
13281	Load data from a JSON file .
13282	Sign a key jar .
13283	Request a JWT signed by signing_keys .
13284	Wraps a library .
13285	Load a source directory .
13286	Entry point for the library .
13287	Return the score of a letter .
13288	Calculate the score of a word .
13289	Yield word lists .
13290	Check if a word is a valid scrabble word .
13291	Main entry point .
13292	Run the CLI .
13293	Called when a string is received .
13294	Returns command and message contents .
13295	Parse request values .
13296	Return a Deferred that returns the response with the given identifier .
13297	Write a response to the transport .
13298	Called when the connection is lost .
13299	Build protocol .
13300	Create a key jar from a key jar .
13301	Load a key jar from a JSON string .
13302	Process a message
13303	Send cinder process .
13304	Process an ELB process .
13305	Handle glance customer process .
13306	Process incoming message
13307	Called when the customer process is received .
13308	Process a message from a message .
13309	Serve the server .
13310	Pretty print a message .
13311	Print message to stderr .
13312	Register a new command .
13313	Register a class .
13314	Returns the number of constraints .
13315	Convert a string to a base argument .
13316	Update the completion dictionary .
13317	Start the connection .
13318	Initialize the broker .
13319	Initialize the service modules .
13320	Initialize the openstack consumer .
13321	This method is called when the client is started .
13322	Initialize the openstack consumer .
13323	Initialize the glance consumer .
13324	Initializes the heat consumer .
13325	Enable component notification .
13326	Get song info .
13327	Download a song .
13328	Execute the instructions .
13329	Load a module name .
13330	Call a function .
13331	Dump a mysql dump file .
13332	Render a DitAA code .
13333	Exit the application .
13334	Run the application .
13335	Change the current working directory .
13336	Copy a directory tree .
13337	Run the debugger .
13338	Get the mtime of a file .
13339	Check if item has changed .
13340	Synchronize the database .
13341	Remove all files
13342	Scrape a feed .
13343	Download the image .
13344	Check if the image has been modified .
13345	A simple tag compiler .
13346	Find the caller to use .
13347	Return the component of the given PEPE .
13348	Main entry point .
13349	Find a symbol in the stack .
13350	Check if the given root is contained in root
13351	Check if the given PE file is global .
13352	Get the data type name for a given object .
13353	Get related attributes .
13354	Create an enum from s_edt .
13355	Create a new metamodel from a new model .
13356	Create an external entity .
13357	Create a function that returns a function that creates a new model .
13358	Create a constant from a CNV file .
13359	Create an operation from an object .
13360	Create a derived attribute .
13361	Create a class from an object .
13362	Create a simple association .
13363	Create a copy of an association .
13364	Create a new association file .
13365	Create a component from a model .
13366	Perform a call .
13367	Accept a reply .
13368	Reject a reply .
13369	Raise a reply .
13370	Send a call to the collector .
13371	Connect a call .
13372	Dispatch a reply .
13373	Guess the type name for the given value
13374	Deserializes a value .
13375	Set the number of tokens .
13376	Set the token position .
13377	Get a feature .
13378	Get multiple documents .
13379	Add a list of items to the index .
13380	Delete a document .
13381	Delete all mapping
13382	Delete the index .
13383	Iterates over the given key_ ranges .
13384	Iterate over the ids in the given key ranges .
13385	Scan prefix for the given prefix .
13386	Scan the prefix for the given prefix .
13387	Run a fulltext scan on a query .
13388	Generate a list of documents that match a query .
13389	Iterate over a keyword scan .
13390	Return an iterator over the keywords in a query .
13391	Iterates over scan ids in a file .
13392	Return the source of features .
13393	Return a list of filters for the given key ranges .
13394	Create an index .
13395	Create mapping for index .
13396	Get index mappings .
13397	Get the type of the field
13398	Given a query return a list of features .
13399	Returns the number of bytes for a layer .
13400	Count the number of bytes in the scan .
13401	Return a pretty string of the given feature .
13402	Entry point for the searcher .
13403	Default formatter .
13404	Convert a class to a Link string .
13405	Pretty print a unique identifier .
13406	Check that the given class is a unique constraint .
13407	Check whether a link is valid .
13408	Check whether the given type is valid .
13409	Generate a function that returns a feature index .
13410	Convert a value to a basic transform
13411	Put items into the database .
13412	Delete all tables .
13413	Scan for key_ ranges .
13414	Scan the given key ranges for the given key ranges .
13415	Scan the index at the given index .
13416	Return the prefix for the given index .
13417	Return the key of the scan prefix for the given index .
13418	Construct a scan prefix for the given index .
13419	Define an index .
13420	Store the keys for the given index .
13421	Put a value into the index table .
13422	Yield keys from the index .
13423	Return the index for the given name .
13424	Check PyPI package name .
13425	Add direction .
13426	Get the type name of an object
13427	Get an attribute
13428	Build the core type
13429	Build an enum type .
13430	Build the struct type
13431	Build user type .
13432	Build a type from an object .
13433	Build a class .
13434	Build an XML element for a component .
13435	Build an XML schema .
13436	Prettyify an XML string .
13437	Return a list of bikes for the given request .
13438	Set positional info .
13439	Mark a function as production .
13440	r
13441	Return the length of the noteQUAL
13442	t is the end of t
13443	Set the length of the next token .
13444	Set the number of tokens in the sequence .
13445	r
13446	r
13447	r Returns the number of tokens in the LFO
13448	Set the number of tokens
13449	Set the number of tokens in the sequence .
13450	Set the length of the end of the stream .
13451	r
13452	Set the length of the stream .
13453	Create a queue .
13454	Delete a queue .
13455	List queues .
13456	List ex changes .
13457	Purge a queue .
13458	Create a message .
13459	Read the image
13460	Check if the text is visible .
13461	Main entry point .
13462	Serialize a value into a dictionary .
13463	Serialize the association .
13464	Serialize class to string .
13465	Main entry point .
13466	Search the results .
13467	Partition a collection with the given condition .
13468	Run the application .
13469	Context manager for bidi .
13470	Find the source link .
13471	Serializes the target attribute to the target link .
13472	Compute the key for a given instance .
13473	Compute the index key for the given object .
13474	Returns the type of the attribute with the given name .
13475	Create a new instance of this model .
13476	Iterate over all class instances .
13477	Define a class .
13478	Send message to socket .
13479	Receive messages from a socket .
13480	Show a dead code .
13481	Parse a list of emails .
13482	Return an RPC function .
13483	Get RPC spec .
13484	Normalize postcode middleware .
13485	Get the next value
13486	Accept S .
13487	Accept C C .
13488	Accept a PEP version .
13489	Get the brightness of the image .
13490	Match arguments .
13491	Find the position in the text edit .
13492	Returns a QTextEdit for the given character .
13493	Called when the cursor position is changed .
13494	Return exception info .
13495	Create the input hook for Qt4 .
13496	Get a mapper by name .
13497	Decorator to add a URL pattern .
13498	Decorator to add a URL .
13499	Add a pattern to the data store .
13500	Add a function to the service .
13501	Call the given url and return the result .
13502	Execute the history console .
13503	Called when the prompt is pressed .
13504	Called when the cursor is pressed .
13505	Get the previous history of the history
13506	Return the next history
13507	Handle a execute reply .
13508	Check if the history is locked .
13509	Returns the history for the given index
13510	Set the history
13511	Store the current history
13512	Event handler .
13513	Generate a Record Collection
13514	Convert a collection to a pandas DataFrame .
13515	Perform spin frame on a DataFrame .
13516	Set attributes of this object .
13517	Subscribe to all topics .
13518	Log a message .
13519	Recursively merges a list of lists .
13520	A generator that yields a remote iterator .
13521	Convert a notebook from v2 to v2 .
13522	Return the supported platform .
13523	Get the importer for the given path item .
13524	Return a unicode string .
13525	Parse version string .
13526	Return True if the project is setuptools .
13527	Add a dist .
13528	Find all plugins in plugin_env .
13529	Get the cache path for a given archive .
13530	Parse a requirement .
13531	Parse the package information .
13532	Compute the dependencies of the markerlib .
13533	Parse a filename .
13534	Collapse leading whitespace from header .
13535	Hide the current event .
13536	Called when the button is clicked .
13537	Return the current text cursor .
13538	Update current value .
13539	Register admin site
13540	Return a list of disk partitions .
13541	Get the CPU times for each processor .
13542	Get the system per CPU times
13543	Returns a list of data from stdin .
13544	Read data from stdin .
13545	Update the tab bar visibility .
13546	Create a tab with the current kernel
13547	Add a tab with a frontend
13548	Add an action to the menu
13549	Make dynamic magic .
13550	Populate all magic menu
13551	Closes the given event .
13552	Generate a password for the given algorithm .
13553	Check if a hashed passphrase is valid .
13554	Display a boolean cell
13555	Return an indented short title .
13556	Return a dictionary of all editable values for this model admin .
13557	Toggle a boolean
13558	Check if user has changed permissions .
13559	Check if the user has delete permissions .
13560	Add children to G .
13561	Create a Bintree tree .
13562	Submit jobs to the graph .
13563	Validate a tree .
13564	Add color templates to a class .
13565	Return a copy of this color scheme .
13566	Add a new scheme .
13567	Set the active color .
13568	Return path to home directory .
13569	Handle Iopub messages .
13570	Handle stdin request .
13571	Wait for a kernel to finish .
13572	Set the style of this object .
13573	Get the format for the given token .
13574	Get the format from the document .
13575	Get the format for a given style .
13576	Find the command on the PATH .
13577	Normalize path .
13578	Check if a namespace package is declared .
13579	Check that the value is a valid entry point .
13580	Return True if src is a blank line .
13581	Return True if the last two lines in the source .
13582	Transform a line to assign system .
13583	Transform a magic line .
13584	Transform a line to the input .
13585	Transform input to input line .
13586	Push lines into the compiler .
13587	Return True if the input is complete .
13588	Find the indentation of a line .
13589	Store the source of this file .
13590	Reset the output of the source .
13591	Handle cell magic .
13592	Append lines to cell magic parts .
13593	Transform a cell .
13594	Push a list of lines into the notebook .
13595	Initialize the observers .
13596	Post a notification .
13597	Return a set of observers for this notification .
13598	Add a callback to be called when a message is received .
13599	Create a new job .
13600	Update the status of all running jobs .
13601	Print a report for a group .
13602	Flush a group .
13603	Return a new status .
13604	Report the status of this group .
13605	Initialize the thread .
13606	Insert a value at the given index .
13607	Return a copy of this object .
13608	Declare a special variable .
13609	Declare a list .
13610	Declare a set variable .
13611	Set the working directory .
13612	Move the route .
13613	Calculates the energy of the graph .
13614	Return a dict with default values .
13615	Check if the table exists .
13616	Convert a list of dictionaries to a dictionary .
13617	Render an expression .
13618	Log a warning .
13619	Parse a config file .
13620	Generate a table .
13621	Create a link .
13622	Generate a javascript file
13623	Return CSS file for given URL .
13624	Display an image .
13625	Return the value as a string .
13626	Concatenate a value .
13627	Convert value to numeric value .
13628	Convert value to numeric .
13629	Return the name of the model .
13630	Split a line of user input .
13631	Add options to the parser .
13632	Add a builtin function .
13633	Remove a builtin value from the object .
13634	Deactivate all builtin functions .
13635	Find the URL of a given index URL .
13636	Return a generator that yields all the links that are not found in this object .
13637	Return a list of shell strings .
13638	Run coverage script .
13639	Add an action to the option
13640	Add an action to the parser .
13641	Parse the command - line options .
13642	Show help for a given topic
13643	Help function .
13644	Check if the arguments are valid .
13645	Execute the script .
13646	Print debug information
13647	Unloads a pickle object .
13648	Set the system hook .
13649	Log errors in the given function .
13650	Check if url is a URL .
13651	Validate URL .
13652	Validate a container .
13653	Pull user keys from a list of keys .
13654	Select random ports .
13655	Create a remote function .
13656	Decorator for parallel functions .
13657	Return True if any of the given sequences are added .
13658	Get the tail of a line .
13659	Set the auto - indent feature .
13660	Initialize logstart .
13661	Save sys module state .
13662	Restore sys module state .
13663	Register a post execute function .
13664	Create a new main module .
13665	Cache the main namespace
13666	Initialize the user s namespace .
13667	Return a list of all namespace references .
13668	Reset the history manager .
13669	Delete a variable .
13670	Remove all namespaces that match a regex .
13671	Push variables to user namespace .
13672	Return the object as a dict .
13673	Create a property .
13674	Find an object in the object .
13675	Inspect the object .
13676	Initialize history manager .
13677	Show the traceback of the given type .
13678	Show the traceback of the input line .
13679	Print traceback .
13680	Show a syntax error .
13681	Insert text into the line .
13682	Complete a text .
13683	Set a custom completer .
13684	Set the completion frame .
13685	Run line magic .
13686	Find the magic of the given magic name .
13687	Define a macro .
13688	Run a shell command .
13689	Rewrites the input to the prompt .
13690	Return a dictionary of variable names for the user .
13691	Return a dictionary of user - defined user expressions .
13692	Evaluate the expression .
13693	Make sure the file is safe .
13694	Return the current cell magic .
13695	Run a cell .
13696	Run nodes in the cell .
13697	Ensures that the renderer is displayed .
13698	Expand a variable to a string .
13699	Create a temporary file .
13700	Extract input lines from a range .
13701	Find user code from target .
13702	Start at exit operations .
13703	Broadcasts a message to a client .
13704	Send a message to a client .
13705	Decorator to skip a function .
13706	A decorator that returns a decorator that can be used to register a valid failure .
13707	Decorator for deprecated functions .
13708	List all profiles in a directory .
13709	List all available profiles .
13710	Find a requirement .
13711	Run a command .
13712	Return the path to filename .
13713	Get the next line .
13714	Send a string .
13715	Send a newline .
13716	Prepare regex pattern .
13717	Expect a pattern .
13718	Expect one or more data .
13719	Prepare regex pattern .
13720	Search for strings in buffer .
13721	Search for entries in buffer .
13722	Log listener .
13723	Unpacks the given filename to extract_dir .
13724	Emit a message .
13725	Return the last error of the log .
13726	Execute a command
13727	Find the source of a file .
13728	Return a list of lines that are executed .
13729	Return a list of set of points missing .
13730	Returns a list of the un predicted arcs in the line .
13731	Return a list of the branch lines in the parser .
13732	Return the total number of branches .
13733	Returns a dictionary containing all the branches that are missing .
13734	Return a dictionary of branch stats .
13735	Set the precision .
13736	Returns the number of covered statements .
13737	Returns a string representing the number of candidates covered by the unit .
13738	Highlights the given text in a string .
13739	Highlight the given keywords .
13740	Highlight words in a string .
13741	Run a function on the system .
13742	Remove elements from a string .
13743	Indent a string .
13744	Return a human - readable string .
13745	Format a screen string .
13746	Cleans the given text .
13747	Wrap paragraphs in text .
13748	Find the optimal value for a list of rlist .
13749	Get the value of an item in a list .
13750	Compute the matrix of the given items .
13751	Return a list of fields .
13752	Build kernel arguments .
13753	Initialize the SSH connection
13754	Pretty print an object .
13755	Pretty print an object .
13756	Return a copy of obj_class .
13757	Pretty print the object .
13758	Create a sequence of elements from a sequence .
13759	Return a factory for a dictionary of keys
13760	Pretty print the object .
13761	Pretty print the pattern .
13762	Pretty print the object .
13763	Pretty print the function .
13764	Pretty print an exception .
13765	Apply a function to the given type .
13766	Get a callback for a given type .
13767	Write an object to the output .
13768	Print the breakable output .
13769	End the group .
13770	Flush the output .
13771	Pretty print an object .
13772	Generate an exception colors table .
13773	Write a row into an object .
13774	Get the text from the win32 clipboard .
13775	Get text from osx clipboard .
13776	Get the text from the clipboard .
13777	Get build prefix .
13778	Remove keys from a dictionary .
13779	Extract dates from an object .
13780	Convert an object to a dict .
13781	Return datetime object .
13782	Convert a JSON object to a string .
13783	Check the site directory .
13784	Write a script to the install directory .
13785	Wait for an engine to sleep .
13786	Create an argparse parser .
13787	Convert pyx sources to C .
13788	Run a connection request .
13789	Build a package finder .
13790	Called when a log level changes .
13791	Default logger .
13792	Called when the flags changed .
13793	Print help for alias .
13794	Print flag help .
13795	Print subcommands .
13796	Print help .
13797	Print examples .
13798	Update the current configuration .
13799	Initialize subcommand .
13800	Flatten all the flags for this class .
13801	Parse command line .
13802	Load a config file .
13803	Generate a configuration file .
13804	Downsample an array by k .
13805	 formatter for info .
13806	Write a message to the output .
13807	Called when a config has changed .
13808	Return help string for class .
13809	Returns the help text for the given trait .
13810	A section of the class .
13811	Clear all instances of the given class .
13812	Return an instance of the given class .
13813	Format a test .
13814	Print exception handler .
13815	Flush the file .
13816	Called when the event is started .
13817	Read data from file .
13818	Try to read an exception from a file .
13819	Process a command .
13820	Split a string into arguments .
13821	Compress d histogram of d histogram .
13822	Set the magics class .
13823	Record a single magic .
13824	Decorator for magic_kind .
13825	Decorator to register a magic marker .
13826	Return a dictionary of the documentation from the magics .
13827	Register the given magic objects .
13828	Register a new user magics function .
13829	Format a latex string .
13830	Parse options .
13831	Set the default option
13832	Add a page to the notebook .
13833	Create a task with a callable
13834	Get task info .
13835	Get a function from a task .
13836	Calculate the next run .
13837	Submit the task .
13838	Run the task .
13839	Run the next run
13840	Runs the given callable .
13841	Runs an iterator over the given callable .
13842	Find the URL file .
13843	Bind ports to an IPython kernel
13844	Read the test steps
13845	Creates an interrupt event .
13846	Run the subprocess .
13847	Return a dict with all namespaces that match the given name pattern .
13848	List all objects in a namespace .
13849	Make sure that the options in dict are mutually exclusive .
13850	Draws the current active figure if available .
13851	Flush all figures that are closed .
13852	Send figure .
13853	Load an IPython extension .
13854	Unload an IPython extension .
13855	Generate random ports .
13856	Initialize the web application .
13857	Handle signal handler .
13858	 confirmation for exit
13859	Clean up the kernels
13860	Generate price options .
13861	Replace multiple values in a dictionary .
13862	Render the string with the given name .
13863	Build the kernel .
13864	Create a zip file .
13865	Fix the version in the metadata . txt file .
13866	Check if an object is a list of strings .
13867	Get the partition of a sequence .
13868	A decorator to patch the monkey patch .
13869	Run a source file .
13870	Run the source .
13871	Generate coverage report .
13872	Create an XML file .
13873	Download a file .
13874	Reduce frequencies in a frequency list .
13875	Compute n - digit frequencies for a file .
13876	Return the number of digits in a txt file .
13877	Calculate one digit frequencies .
13878	Return a matrix of two digit frequencies .
13879	Calculate the number of digit frequencies
13880	Plot two digit frequencies .
13881	Plot one digit frequencies in equation 1 .
13882	Print a debug message .
13883	Reverse a view .
13884	Check if base is private .
13885	Create a test suite for documentation .
13886	Run a debug script .
13887	Run a debug script .
13888	Log a debug script .
13889	Return a dict with all hfiles in hashroot .
13890	Compress all files in hashroot .
13891	Return a list of keys that match a glob .
13892	Check if the given record is allowed .
13893	Return True if any matches the given record .
13894	Format a capture error .
13895	Set up an interactive shell .
13896	Main loop .
13897	Get new csv writer .
13898	Create a list of languages .
13899	Write entries to po files .
13900	Write a header
13901	Subscribe to a user .
13902	Initialize the parser .
13903	Run a Python module .
13904	Run a python file .
13905	Create a code object from a Python file .
13906	Create a code object from a file .
13907	Generate HTML table from an item matrix .
13908	Set the current value .
13909	Cancel completion .
13910	Select the index of a row .
13911	Select the index up .
13912	Select down .
13913	Select the left .
13914	Select the right .
13915	Update the list
13916	Calculate word frequency from a text .
13917	Print a number of words .
13918	Return an XML string .
13919	Write this file to a file .
13920	Validate a pin .
13921	Send a shared pin .
13922	Delete a shared pin .
13923	Send a pin .
13924	Delete a pin .
13925	Subscribe to a topic .
13926	List the topics for a user .
13927	Decorator for monitor functions .
13928	Start the progress monitor .
13929	Context manager .
13930	Context manager for subtask .
13931	Update the progress monitor .
13932	Create a progress monitor .
13933	Called when the task is done .
13934	Publish a string to a shell .
13935	Move the build location .
13936	Load Python config files .
13937	Load the configuration file .
13938	Read the config file as a dictionary .
13939	Load flag from config .
13940	Decode command line arguments .
13941	Load the configuration .
13942	Load configuration .
13943	Parse the given arguments .
13944	Convert the namespace to a config object .
13945	Find a module by name .
13946	Register a function to stop .
13947	Called when a process is started .
13948	Called when the process is stopped .
13949	Send a SIGKILL .
13950	Returns a list of arguments that can be used to run the program .
13951	Start the MPI .
13952	Send file to remote
13953	Fetch file from remote
13954	Return the number of available engines .
13955	Start the engine .
13956	Start the job .
13957	Default context dictionary .
13958	Parse the job id
13959	Write the batch script to the queue .
13960	Start the job .
13961	Make the context menu .
13962	Append the image to the image .
13963	Append a PNG file .
13964	Append an SVG .
13965	Add an image
13966	Copy an image to the clipboard .
13967	Get an image by name
13968	Insert image into cursor .
13969	Insert an SVG into the cursor .
13970	Save an image .
13971	Called when a loop is changed .
13972	Initialize the environment .
13973	Apply a command to the shell .
13974	Prompts the program to exit .
13975	Set the next input
13976	Read a file .
13977	Get a list of values from a section .
13978	Get a list of strings from a section .
13979	Parse the environment variable .
13980	Set attributes from a list of arguments .
13981	Load configuration from a file .
13982	Set attribute from config option .
13983	Expand user path to tilde .
13984	Add a list of delims to the context .
13985	Split a line by cursor position .
13986	Return a list of global matches .
13987	Return list of attribute matches
13988	Called when the splitter is changed .
13989	Return a list of file matches in text .
13990	Return a list of alias matches .
13991	Return a list of python matches for the given text .
13992	Return the default arguments for the given object .
13993	Print the completions .
13994	handle line completion
13995	Check if one record matches one of the tests .
13996	Match a check .
13997	Extract a dictionary from a record .
13998	Return True if prompt_count is enabled
13999	Write output prompt .
14000	Write the given format_dict .
14001	Log output .
14002	Raise an exception if the object is freezed .
14003	Convert MySQL timestamp to Timestamp .
14004	Called when an event loop is changed .
14005	Dispatch a control message .
14006	Dispatch a shell message .
14007	Start the dispatcher .
14008	Handle one iteration .
14009	Publish pyin .
14010	Abort a request .
14011	Clear a request .
14012	Convert a topic to a string .
14013	Send the iopub socket .
14014	Add the modules to the module stack .
14015	Remove sys modules .
14016	Return absolute path .
14017	Return True if the given file name exists .
14018	Check if an object is a class .
14019	Check if path is a package .
14020	Get package from a file .
14021	Return the newline of the label .
14022	Return the last key that matches a regex .
14023	Apply a function to a module .
14024	Return a new class with the given module .
14025	Get CPU times for the system .
14026	Get the process cmdline .
14027	Get list of open files .
14028	Get a list of connections .
14029	Check if a user has a group .
14030	Resolve a class from the given path .
14031	Calculate the usage percentage .
14032	Memoize a function .
14033	Decorator for deprecated functions .
14034	Login .
14035	Get the key for the search query .
14036	Ensure the temporary path exists .
14037	Clear temp file .
14038	Upload file to Gdoc .
14039	Synchronize the database .
14040	Download metadata from g docs .
14041	Upload file to Gdoc .
14042	Remove empty . csv files .
14043	Create a new Qt console .
14044	Check URL accessibility .
14045	Check if a URL has contents .
14046	Get the response code for the given URL .
14047	Compare the content type of a URL .
14048	Return True if the response code matches the given code .
14049	Validate the data .
14050	Clear the output .
14051	Find command and return path .
14052	Return code units for a given file locator .
14053	Return the root name of this path .
14054	Return the source file .
14055	Returns True if the file should be Python .
14056	Return the total seconds in seconds .
14057	Get the result .
14058	Wait for the results .
14059	Return a dictionary of all engine ids .
14060	Abort the message .
14061	Return the total elapsed time in seconds .
14062	Wait for the task to finish .
14063	Republish a displaypub
14064	Wait for outputs .
14065	Wait for all pending messages .
14066	Return absolute path .
14067	Prepare patterns .
14068	Return the separator of a string .
14069	Find python files in a directory .
14070	Return the relative filename of a file .
14071	Return the canonical filename for filename .
14072	Get zip data from filename .
14073	Check if a file matches the given path .
14074	Return True if path matches path .
14075	Map a path into a canonical filename .
14076	Start Qt4 kernel .
14077	Loop over the ZMQ event loop .
14078	Loop over Tk .
14079	Loop over the QEmbed kernel .
14080	Loop over the CFRunLoop in the kernel .
14081	Enable GUI .
14082	Compute GOE .
14083	Calculate the difference between two eigenvalues .
14084	Compute the differences between the ensemble and N .
14085	Initialize the node
14086	Parse a YAML file .
14087	Parse the step configuration .
14088	Initialize the crash handler .
14089	Load the configuration file .
14090	Initialize profile directory .
14091	Generate default config file .
14092	Write the file .
14093	Erases the tree .
14094	Return a dictionary of line data .
14095	Return the arc data .
14096	Write the arc data to a file .
14097	Read a file .
14098	Read raw data from file .
14099	Read the arc pairs from a file .
14100	Combine parallel files .
14101	Add line data to the file .
14102	Add arc data .
14103	Add a file to the hash .
14104	Get the summary of the file .
14105	Return a generator that yields the next line in the line .
14106	Main loop .
14107	Replace multiline history in the line .
14108	Prompt for raw input .
14109	Edit the syntax error .
14110	Check if e should be recompile .
14111	Exit the user .
14112	Return url and revision
14113	Create a new frontend master
14114	Initialize the colors .
14115	Return information about the identity .
14116	Convert Robj to numpy array
14117	Find the source code for an object .
14118	Set the colors .
14119	Set the color scheme .
14120	Convert a traceback to text .
14121	Return the traceback information .
14122	Format a list of files .
14123	Format exception only .
14124	Show the exception only for the given type .
14125	Set up the debugger
14126	Set the mode
14127	Decorator that checks if a group is required .
14128	Ensure all items in fromlist are a list .
14129	Add a new line
14130	Add a section to the code builder .
14131	Get function name .
14132	Return code for expr .
14133	Render the current context .
14134	Replace all dots in the value .
14135	Render a template .
14136	Return the default formatter classes .
14137	Apply a function to the given type .
14138	Get a function for a given type .
14139	Set the precision of a float .
14140	Return all user config files
14141	Configure command line options .
14142	Configure logging .
14143	Set the working directory for each directory .
14144	Renders a page with the given start and screen lines .
14145	Return a page of the given string .
14146	Get a page from a file .
14147	Get the pager command .
14148	Get the start of a pager .
14149	Pretty print a string .
14150	Pretty print o .
14151	Return a PNG representation of an object .
14152	Return a PNG representation of an object .
14153	Check if an object can be printed .
14154	Return a latex representation of an object .
14155	Add options to the plugin .
14156	Validate a list of strings .
14157	Validate that a dictionary is a string .
14158	Start the IOLoop .
14159	Handle a received message .
14160	Execute code .
14161	Complete a message .
14162	Get information about an object .
14163	Get a list of messages .
14164	Shutdown the kernel .
14165	Flushes the queue .
14166	Send input .
14167	Start the channel .
14168	Stop the channel .
14169	Check if the channel is running .
14170	Load a connection file
14171	Write a connection file .
14172	Start a kernel
14173	Shut down the kernel .
14174	Restart the kernel .
14175	Kill the kernel .
14176	 interrupt kernel .
14177	Send a signal to the kernel .
14178	Check if the kernel is alive .
14179	Return the shell channel .
14180	The sub - channel associated with this object .
14181	Returns the channel of the client
14182	Bind kernel to IPEngineApp instance .
14183	Print a debug message .
14184	Get the extension classes .
14185	Check if the step is pre - step
14186	Post a step .
14187	Finalize the result .
14188	Recursively walks an egg .
14189	Scan for module references .
14190	Launch new instance .
14191	Save connection dictionary to file .
14192	Load configuration from JSON
14193	Load secondary configuration from JSON .
14194	Execute a single cell
14195	Enable the autopx cell
14196	Disable the autopx cell
14197	Run a cell
14198	Run heartbeat message .
14199	Run a task .
14200	Remove a task
14201	Patch the protocol for the given protocol .
14202	Make sure obj is missing .
14203	Accept a connection .
14204	Reject a connection .
14205	Get a proxy agent .
14206	Check if the form is valid .
14207	Perform a DELETE request .
14208	Update the user s user s fields .
14209	Report the code units in the given matrix .
14210	Check if all modules are enabled .
14211	Run the editor .
14212	Fix error editor .
14213	Get the clipboard .
14214	Add a function to the chain .
14215	Get the metadata for a given path or module .
14216	Configure the options .
14217	Import an item .
14218	Try to read a passwordless ssh file .
14219	Try to open SSH .
14220	Try to connect to a ssh server .
14221	Open a tunnel .
14222	Open a tunnel .
14223	Stop scheduling tasks .
14224	Return an exception .
14225	Register engine message .
14226	Unregisters an engine .
14227	Handle a execute reply message .
14228	Flush notifications .
14229	Flush the results of the given socket .
14230	Flush a control message .
14231	Flushes an ignored control socket .
14232	Flush an Iopub file .
14233	Wait for spin over a given interval .
14234	Stop spin thread .
14235	Flush the iopub messages .
14236	Wait for the given jobs .
14237	Apply a request to a socket .
14238	Send a request to the server .
14239	Get the result of this task .
14240	Get the status of a queue .
14241	Purge results .
14242	Get the history of the hub .
14243	Send a query to the server .
14244	Create a set of opcode names .
14245	Get a byte parser .
14246	Return set of lines matching regex .
14247	Parse the text .
14248	Return the first line of line .
14249	Given a list of lines return a set of lines .
14250	Parse the source .
14251	Return a sorted list of edges .
14252	Returns the number of exit lines in the tree .
14253	Return a list of child parsers .
14254	Iterate over the lines of the code .
14255	Find all the line information for this parser .
14256	Return a string representation of the block stack .
14257	Split the code into chunks .
14258	Check if the given chunks is valid .
14259	Iterate through the lines of the trace .
14260	Return a list of all the blocks in the parser .
14261	Returns a set of all edges in the parser .
14262	Set options for coverage .
14263	Start the coverage statistics .
14264	Generate coverage report
14265	Returns True if the given file is a given package .
14266	Generate alternative interpretations of a source distro name .
14267	Open a request with authentication .
14268	Download a distribution .
14269	Get the parent of an object .
14270	The root topic .
14271	Render a template .
14272	Set the configuration .
14273	Format an error .
14274	Split data by num .
14275	Convert a notebook from v3 to v3 .
14276	Convert a hex color to RGB .
14277	Return a dictionary containing the colors for the given styles .
14278	Get the font for a given family .
14279	Handle the execute reply message .
14280	Handle a history reply .
14281	Handle pyout .
14282	Handle the display data .
14283	Show the started channels .
14284	Execute a file .
14285	Process the error message .
14286	Process a payload .
14287	Set default style .
14288	Edit a file .
14289	Make an in - prompt .
14290	Return the prompt for the given prompt .
14291	Sets the style sheet changed .
14292	Called when the syntax style is changed .
14293	Handle response .
14294	Sign the URL parameters .
14295	Transform a dictionary into a dictionary .
14296	Get virtual memory information .
14297	Get CPU times for the system .
14298	Get a list of process ids
14299	Get a list of process gids .
14300	Get process threads .
14301	Get list of open files .
14302	Return the hash of a package .
14303	Return a dictionary of package information .
14304	Print sys info .
14305	Return the number of CPU on OS .
14306	Return the number of cores in the system .
14307	Get next set .
14308	Fetch one row .
14309	Fetch multiple rows .
14310	Fetch all rows .
14311	Connect to peers .
14312	Convert a JSON string into a Python object .
14313	Convert a Python string into a Python object .
14314	Return reads from a string .
14315	Return the output of a notebook .
14316	Write nb to file .
14317	Convert notebook to metadata file
14318	Load data from a dictionary .
14319	Return True if the match matches the given name .
14320	Return the type of the given class .
14321	Return True if this directory matches the given directory .
14322	Return True if the given file matches the given file .
14323	Return True if the given function should be called .
14324	Return True if the given method matches the given method .
14325	Determine if a module is available .
14326	Read lines from a file .
14327	List commands in pydb
14328	Print a list of lines .
14329	Run p definition .
14330	Returns the conversion factor for the given symbol
14331	Convert the given value from_symbol to the given date
14332	Compute the return for the given start date
14333	Get the encoding of a given stream .
14334	Get default encoding for stdin .
14335	Write the connection file .
14336	Initialize the heartbeat .
14337	Log connection information .
14338	Initialize the session .
14339	Initialize the io object .
14340	Initialize the kernel
14341	Initialize the connector
14342	Register a controller .
14343	Convert HTML content to text .
14344	Convert markdown content to text .
14345	Convert domain to domain name .
14346	Add option to the parser .
14347	Configure options .
14348	Determine if the directory should be included .
14349	Return True if the links to the given extension
14350	Call each of the given functions .
14351	Call each function in a list of functions .
14352	Append a function to the list .
14353	Insert a function at index .
14354	Format a usage message .
14355	Initializes the process .
14356	Write the pid file .
14357	Remove the pid file .
14358	Read pid file .
14359	Construct the parser for a magic function .
14360	Return the real name of a magic function .
14361	Highlight the current prompt .
14362	Rehighlight block .
14363	Set the format for the given start offset .
14364	Copy the clipboard to the clipboard .
14365	Executes the given source .
14366	Called when the prompt is finished .
14367	Perform tab completion .
14368	Add context menu .
14369	Filter the console key .
14370	This method is called when the cursor is executed .
14371	Handle complete reply .
14372	Call a callback on the shell .
14373	Handle a callback message .
14374	Handle a execute reply .
14375	Handle input request .
14376	Handle the kernel died kernel .
14377	Handle an object info reply .
14378	Handle pyout .
14379	Handle stream message .
14380	Handle a shutdown message .
14381	Execute a file .
14382	Stop the kernel process .
14383	Reset the terminal .
14384	Restart the kernel .
14385	Send the call tip .
14386	Runs the completion request .
14387	Process the error message .
14388	Called when the command is successful .
14389	Change the contents of a document .
14390	Add a plugin .
14391	Return a list of static arguments for each plugin .
14392	Yields all registered plugins .
14393	Return the result of a simple plugin .
14394	Configure the plugin .
14395	Load the plugins .
14396	Add plugins to the module .
14397	Convert latex string to PNG format .
14398	Convert a latex string to HTML .
14399	Convert a math string to an image .
14400	Check if the requirement exists .
14401	Return an iterator over the process .
14402	Return the percentage of CPU usage .
14403	Return the attributes as a dict .
14404	The process name .
14405	Try to guess the executable .
14406	Get all children of this process .
14407	Returns the CPU percent for the given interval .
14408	Returns the percentage of memory .
14409	Get memory maps .
14410	Check if the process is running .
14411	Suspends this process .
14412	Resume the process .
14413	Kill the process .
14414	Wait for the platform .
14415	 wire kernel .
14416	Wraps a gtk . main function .
14417	Check if an ip is shadowed .
14418	Initialize the transformers .
14419	Register the given transformer .
14420	Unregister the given transformer .
14421	Initialize the prefilter manager .
14422	Register a new checker .
14423	Unregister a checker .
14424	Initialize the handlers .
14425	Register a handler .
14426	Unregister a handler .
14427	Process line info .
14428	Find handler by line_info .
14429	Transform a line into a single line .
14430	Pre - filter the given line .
14431	Prefilter a list of lines .
14432	Check if line_info is set .
14433	Check if the line_info is valid .
14434	Check if the line exists .
14435	Check if line_info exists .
14436	Handle input loop .
14437	Process the line info .
14438	Handle a magic line .
14439	Process the line info .
14440	Process line info .
14441	Handle a line .
14442	Handles event filter
14443	Called when the button is clicked .
14444	Set the paint event .
14445	Show the call info .
14446	Show the tip .
14447	Hide cursor position .
14448	Returns a property for the specified local attribute .
14449	Convert path to absolute path .
14450	Validate the given schema .
14451	Return the masked data .
14452	Check if there is no global site packages .
14453	Calculate the pword frequency of the targets .
14454	Decorate a view decorator .
14455	Return a list of aliases for the kernel .
14456	Define an alias .
14457	Define an alias .
14458	Validate the alias command .
14459	Call an alias .
14460	Transform an alias .
14461	Expand aliases .
14462	Generate the help directive for a test program .
14463	Reset the ER .
14464	Split a string into a list of actions .
14465	Returns an SVG color .
14466	Returns a QText character format .
14467	Generate a JWT .
14468	Decorator to lock a function .
14469	Remove all JWT from the cache .
14470	Returns True if the given token is already used .
14471	Validate a JWT .
14472	Return a new lock object with the given count .
14473	Return common prefix of items .
14474	Filter an event .
14475	Returns the size of the file .
14476	Returns True if the cursor is cut .
14477	Returns True if the clipboard can be copied .
14478	Clear the prompt .
14479	Remove selected text .
14480	Execute the input buffer .
14481	Get the input buffer .
14482	Set the input buffer .
14483	Sets the font .
14484	Paste the clipboard .
14485	Print a printer .
14486	Prompt to top .
14487	Reset the font .
14488	Append input to the editor .
14489	Append HTML to HTML .
14490	Appends HTML to the collection .
14491	Append text to the message .
14492	Clear the temporary buffer .
14493	Complete with items .
14494	Fill a temporary buffer .
14495	Returns True if the control key is down .
14496	Create the underlying control .
14497	Creates the page control .
14498	Filter page key .
14499	Get text for a block .
14500	Get the end cursor .
14501	Get the cursor column .
14502	Get text cursor line .
14503	Get the prompt cursor .
14504	Get selection cursor
14505	Insert the cursor into the cursor .
14506	Insert HTML into cursor .
14507	Insert a plain text into the cursor .
14508	Insert text into the cursor .
14509	Keep cursor in buffer .
14510	Shut down the keyboard .
14511	Render text .
14512	Called when the prompt is started .
14513	Read a line .
14514	Set the prompt for the command .
14515	Sets the top cursor .
14516	Show the prompt .
14517	Adjust scrollbars .
14518	Parse options .
14519	Copy a config file .
14520	Create a profile directory by name .
14521	Find a profile directory by its name .
14522	Convert an object to a key .
14523	Read a file
14524	Return a list of input lines .
14525	Create a temporary file in a temporary file .
14526	Close the file .
14527	Write data to the stream .
14528	Add a new heartbeat handler .
14529	Add a heart failure handler .
14530	Handle a ping message .
14531	Generate batch list from sequence .
14532	Convert pathfile to filename and filename
14533	Walk a directory tree .
14534	Displays the elapsed time in the display .
14535	Calculate unit elapsed time .
14536	Extract the wininst configuration file .
14537	Unache zipdir .
14538	Escape an argument as a string .
14539	Check if all files are conflicts .
14540	Set the options from the setup . cfg file .
14541	Create home path .
14542	Return True if name is a archive file .
14543	Return a proxy for the given object .
14544	Create a readonly proxy for the given object .
14545	Create a new heading cell .
14546	Create a new notebook node .
14547	Create a new author .
14548	Check if a directory is writable .
14549	Remove a filename .
14550	Get py filename .
14551	Return the absolute path of a file .
14552	Get the home directory .
14553	Return the working directory for the OS .
14554	Get the working directory .
14555	Return the directory of IPython package .
14556	Return the path to an IPython module .
14557	Return the number of dependencies that match the target .
14558	Return the hash of a file .
14559	Check if old config file exists .
14560	Update the suggestions dictionary for the given object .
14561	Returns a list of suggestions with the given size .
14562	Returns a list of suggestions for the given object .
14563	Return the relative path to this file .
14564	Return a list of paths matching pattern .
14565	Read lines from the file .
14566	Read the md5 file .
14567	Start the hot shot .
14568	Print a profiling report .
14569	Finalize the result .
14570	Handle keyboard signals
14571	Enable wx .
14572	Disable GUI .
14573	Disable Qt4 .
14574	Enable a gtk
14575	Enable Tkinter application .
14576	Enable pyglet .
14577	The global wave saver .
14578	Initialize the database .
14579	Run a SQL query
14580	Get session information .
14581	Get the tail of the current session .
14582	Get a range by string .
14583	Get the name of the history . database file .
14584	Update the session with the given name .
14585	Reset the history .
14586	Generator for the range session
14587	Store output .
14588	Write out the output cache .
14589	Stop the simulation .
14590	Return the number of CPU cores in the process .
14591	Get system per CPU stats
14592	Get disk partitions
14593	Get a list of processes .
14594	Return a human - readable string representation of a pair .
14595	Format a list of lines into a string .
14596	Return a short stack .
14597	Return a decorator that checks the given function .
14598	Join a regular expression .
14599	If a file is a gone return the path .
14600	Update the contents of the object .
14601	Update the cluster profiles
14602	Start a cluster
14603	Stop a cluster
14604	Find the path to a command .
14605	Return the contents of the system .
14606	Find code units
14607	Report coverage files .
14608	Decorator to raise an exception .
14609	Set the trace function .
14610	Decorate a function as a decorator .
14611	Load the extension manager .
14612	Initialize code .
14613	Run the shell
14614	Run startup files .
14615	Run the executable files in IPython application .
14616	Run a command line .
14617	Run the given module .
14618	Decorator for generic methods .
14619	Returns the filename for the given file .
14620	Read a data file .
14621	Escape an HTML string .
14622	Report the report .
14623	Copy files from local static files .
14624	Write HTML to file .
14625	Hash a file
14626	Write the index . html file .
14627	Read status file .
14628	Write coverage status to directory .
14629	Sort a list of lists
14630	Get a slice from a sequence .
14631	Split a sequence into a list of bytes .
14632	Read setup . config file .
14633	Read manifest file
14634	Convert glob pattern to regexp .
14635	Check if the filename matches the pattern .
14636	Return a list of files in the git repository .
14637	Start a kernel .
14638	Shutdown a kernel
14639	Kill a kernel
14640	Get the kernel with the given id .
14641	Get the ports for a given kernel
14642	Returns the notebook for the given kernel ID .
14643	Start a kernel .
14644	Shutdown a kernel
14645	Called when a kernel is stopped .
14646	Restart a kernel .
14647	Create an iopub stream
14648	Create a shell stream for the given kernel .
14649	Create a stream for the given kernel
14650	Remove all attributes from the instance .
14651	Export an HTML image .
14652	Export an HTML image .
14653	Ensures an image tag is utf8 .
14654	Fix HTML tags .
14655	Export this file .
14656	Get a unique object or None .
14657	Given a list of terms return a query that should be included in the search_fields .
14658	Get text query string .
14659	Returns a query for the given date field .
14660	Returns a query for the dateless query
14661	Get null query if field is None .
14662	Set case insensitive fields
14663	Add options to the parser .
14664	Validate the attribute of this element .
14665	Return True if the given method should be used .
14666	Rotate the ring .
14667	Patch a zmq module .
14668	Create a parser from a schema URL .
14669	URL for websocket .
14670	Deserializes a reply message .
14671	Inject a cookie message into the request object .
14672	Start a callback to be called when a connection is received .
14673	Called when the client is started
14674	Stop the connection
14675	load the file
14676	Get the index for the given index .
14677	Seek to the given index .
14678	Edit the source block .
14679	Show current block .
14680	Show all source blocks .
14681	Run series on a collection .
14682	Perform a batch operation .
14683	Run a function on the given sequence .
14684	Run parallel processes .
14685	Decorate an object with it s arguments .
14686	Decorate a function with the given names .
14687	Find the source of a traceback .
14688	Find a list of lines that match pos .
14689	Display a progress bar .
14690	Clean up the controller .
14691	Pre call
14692	Perform a post call
14693	Save the message ids to a file .
14694	Sync the results of the request .
14695	Return the spin of the given function .
14696	Get a list of messages .
14697	Get a message from the queue .
14698	Decorate a function as a property .
14699	Returns a tuple of all only fields in the given list .
14700	Parse url .
14701	Return a list of modules in the given path .
14702	Get the root modules .
14703	A quick completion function .
14704	Return the completion of a module .
14705	Run the magic run completion .
14706	Return list of bookmark completions .
14707	Quote an attribute .
14708	Configure the plugin .
14709	Write test report .
14710	Add an error message
14711	Add a test .
14712	Add a test .
14713	Return the number of twobin loads
14714	Return the weighted number of loads .
14715	Register an engine .
14716	Unregisters an engine .
14717	Process all pending tasks .
14718	Dispatch a submission .
14719	Check if the status of this job has finished .
14720	Fail a given message .
14721	Assign a job to a job .
14722	Add a message id to the graph .
14723	Submit a task to the server .
14724	Dispatch the result to the client .
14725	Handle a result .
14726	Handle un met dependency .
14727	Update the graph .
14728	Start the log .
14729	Print log state .
14730	Write a single log line .
14731	Write data to log file .
14732	Stop logging .
14733	Create a new worksheet .
14734	Add an object s .
14735	Add a regex to the chain .
14736	Return a generator for dispatching a given key .
14737	Returns a list of all the values that match the given key .
14738	Called when a notebook directory is changed .
14739	Return a list of notebooks .
14740	Create a new notebook id .
14741	Delete a notebook id .
14742	Check if a notebook exists .
14743	Find the path of a notebook .
14744	Get the path to a notebook .
14745	Get a notebook .
14746	Get notebook object .
14747	Save a new notebook .
14748	Save a notebook .
14749	Save a notebook object .
14750	Delete a notebook .
14751	Create a new notebook .
14752	Copy a notebook .
14753	Return a list of tokens .
14754	Generate tokens for source code .
14755	Load the default config file .
14756	A list of class classes .
14757	Parse command line .
14758	Initialize the terminal .
14759	Initialize the shell .
14760	Initializes the banner .
14761	Return a string representation of an object .
14762	Parse a notification name .
14763	Set the default value for the object .
14764	Handle a handler .
14765	Returns a dictionary mapping class names to all classes .
14766	Get the metadata for the given trait name .
14767	Validate the given value .
14768	Return the default value .
14769	Check if the results are in the given set .
14770	Return True if this operation is reachable .
14771	Return the dependencies as a dict .
14772	Return the depth of the given tree .
14773	Print a bintree tree .
14774	Return a disambiguate URL .
14775	Apply a function to the given value .
14776	Validate the targets .
14777	Dispatch monitor traffic .
14778	Dispatch a query message .
14779	Handle new incoming requests .
14780	Handle a heart failure .
14781	Save a task request .
14782	Save a task result message
14783	Save an IOPub message
14784	Request a connection .
14785	Register an engine .
14786	Unregister an engine .
14787	Finish registration .
14788	Send a shutdown request .
14789	Remove all records from the database .
14790	Extract data from a record .
14791	Get results for a given message .
14792	Get message history .
14793	Query the server
14794	Change the working directory .
14795	Decode completed command output .
14796	Run a command under r root .
14797	Execute the Rscript .
14798	Handle a message .
14799	Check if the message is from the current session .
14800	Report all the files in a file .
14801	Annotate analysis .
14802	Returns the installed version of the installed policy
14803	Convert unicode objects to unicode .
14804	Extract the header from a message .
14805	Check that the packers are valid .
14806	Build a message .
14807	Sign a list of messages .
14808	Serialize the message .
14809	Send a message .
14810	Send a message to a stream .
14811	Receive a message from a socket .
14812	Feed identities .
14813	Unloads a message from a list of messages .
14814	Save an SVG document .
14815	Convert SVG to clipboard .
14816	Convert an SVG string to an image .
14817	Return a dictionary of information for an object .
14818	Get documentation for an object .
14819	Return the source of the given object .
14820	Get the arguments of an object .
14821	Return the call line .
14822	Find the file of the given object .
14823	Find the source line of an object .
14824	Convert obj to string .
14825	Return the head header .
14826	Print no info .
14827	Get the definition of an object .
14828	Print documentation for an object .
14829	Get the source of an object .
14830	Print contents of a file .
14831	Format a list of fields .
14832	Display information about an object .
14833	Search for namespaces .
14834	Start the reactor
14835	Decorate a function as a deferred .
14836	Find best string matching query .
14837	Convert the XML to a string .
14838	Convert document to XML .
14839	Load all modules in the given package .
14840	Returns a dict with all values in the dictionary that are in the dictionary .
14841	Merge the location data .
14842	Convert an object to a primitive .
14843	Format the text .
14844	Return a list of matplotlib figures .
14845	Print a figure .
14846	Wrapper around matplotlib runner .
14847	Select the figure format .
14848	Find the plugin and backend
14849	Activate matplotlib .
14850	Configure inline support .
14851	Activate matplotlib .
14852	Trace the given frame .
14853	Start the current thread .
14854	Stop the tracer .
14855	Start the tracer .
14856	Install the trace function .
14857	Start this thread .
14858	Stop the collector .
14859	Pause all tracers .
14860	Resume all tracers .
14861	Get line data .
14862	Collect exceptions from a dictionary .
14863	Render the traceback .
14864	Process startup .
14865	Return the canonical directory of the code .
14866	Find the source for a given file .
14867	Determines if a file should be trace with a reason .
14868	Determines if the file should be trace .
14869	Add a warning message .
14870	Check if a package is imported .
14871	Start the matchers .
14872	Stop the process .
14873	Exclude a regex .
14874	Return the exclude regex for the given name .
14875	Save the data to disk .
14876	Combine the files .
14877	Extract data from the data .
14878	Returns the analysis of the given MSM .
14879	Return a sorted list of analysis files .
14880	Analyze the given data .
14881	Report the workflow .
14882	Annotate the data .
14883	Generate HTML report .
14884	Generate xml report .
14885	Display a list of objects .
14886	Display a list of objects .
14887	Display an SVG .
14888	Display objects in PNG format .
14889	Displayjpeg objects .
14890	Display a list of objects .
14891	Display a list of objects .
14892	Displays the javascript for an object .
14893	Reload the data from the server .
14894	Return the path to the given command .
14895	Run pexpect .
14896	Forward read events .
14897	Run the file .
14898	Find the class name for a class .
14899	Start the cluster .
14900	Build a launcher class .
14901	Start the daemon .
14902	Start the IP cluster .
14903	Get a wx application
14904	Check if the application is running .
14905	Start event loop .
14906	Get a QApplication instance .
14907	Check if an event loop is running .
14908	Start an event loop .
14909	Create a blank canvas
14910	Draw a cross .
14911	Draw a line on the image .
14912	Set text at given position .
14913	Create a canvas from an image .
14914	Get a UUID .
14915	Get a unique key from a dictionary .
14916	Get the domain of a URL .
14917	Get the arguments for a URL .
