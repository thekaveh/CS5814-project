0	Convert sina XML data to list of URLs .
1	Download the given url to a directory .
2	Download sina .
3	Sprint text .
4	Print text to stderr .
5	Print a message and exit .
6	Print a message to stdout .
7	Detect OS .
8	Download vimeo by channel id .
9	get info from ckplayer xml
10	get video url
11	get m3u real url
12	Legitimize text .
13	Download the content of a video .
14	Download a stream .
15	Download a video by vid
16	Match all patterns .
17	Parse a query parameter from a URL .
18	Get the content of a URL .
19	Perform a POST request .
20	Parse host and port .
21	Get room id from showroom .
22	get the title of a topic
23	Download wanmen content by course
24	Download Wanmen articles by course topic part .
25	Returns True if the task instance has a task instance .
26	Clear the event buffer .
27	Return a connection
28	Get AWS credentials from Snowflake .
29	Returns the value of a gRPC field .
30	Copy an expert to a file .
31	Copy a table to stdout .
32	Upload this file to Google Storage .
33	Returns the maximum partition for a given table .
34	Return a MySQL connection
35	Get task state .
36	Restart gunicorn workers .
37	Get connection object .
38	Translate values .
39	Get instance details
40	Create an instance .
41	Patch an instance .
42	Delete an instance .
43	Get a database
44	Create a database .
45	Update a database .
46	Delete a database .
47	Export an instance .
48	Start the SQL proxy process .
49	Stop the sql proxy process .
50	Returns the version of the SQL proxy .
51	Create a connection to the database .
52	Retrieve a connection from the database .
53	Delete the connection
54	Returns a CloudSqlProxyRunner object for this project .
55	Returns the database hook
56	Clean up database hook .
57	Reserve a reserved TCP port .
58	Normalizes a job id .
59	Get error code .
60	Delete all dag runs .
61	Delete all the tasks in the DAG .
62	Sets the state of the DAGs in paused mode .
63	Print statistics about the task instance
64	Check if all tasks are running .
65	Invoke a lambda function .
66	Create evaluate ops .
67	Create a directory recursively .
68	Convert string to float if possible .
69	Convert a datetime to a naive aware timezone .
70	Convert datetime to naive .
71	Create a datetime object .
72	Connect to druid broker
73	Return a requests . Session object .
74	Send a request to the API .
75	Check response .
76	Run the request and check the response .
77	Context manager to create a session .
78	Decorate a function with a session .
79	Drop tables .
80	Get a pretty message for an exception .
81	Get records from a HQL query .
82	Get a Pandas DataFrame from a HQL query .
83	Run a SQL query .
84	Insert rows into table .
85	Returns a CosmosDB client .
86	Check if a collection exists .
87	Creates a new collection .
88	Check if a database exists .
89	Create a database .
90	Deletes a database .
91	Delete a collection .
92	Inserts documents into a collection .
93	Delete a document .
94	Get a single document .
95	Query a collection of documents .
96	Get a function by name
97	Create a new function .
98	Update a function .
99	Upload a function .
100	Delete a function
101	Get a list of statuses for this task .
102	Check if the task is met .
103	Return a list of failure reasons .
104	Parse S3 config file .
105	Get current credentials .
106	Get connection object
107	Flush the buffer .
108	Check if file location is a zip archive .
109	Return a list of all python files in a directory .
110	Construct a task instance .
111	Launch the process manager .
112	Send a termination message to the manager .
113	Exit the DAG process .
114	Start the DAG process .
115	Start the DAG .
116	Start the DAG .
117	Refresh the DAG directory .
118	Check if file processing is too long .
119	Clear import errors .
120	Log file processing stats .
121	Set new file paths to new files .
122	Wait for all processors to finish .
123	Heartbeat for all the files in the process .
124	Terminate all running processes .
125	Create SSH client
126	Create a transfer job .
127	Get information about a transfer job .
128	List all transfer jobs
129	Update a transfer job .
130	Delete a transfer job .
131	Cancel a transfer operation .
132	Pause a transfer operation .
133	Resumes a transfer operation .
134	Wait for a GCP transfer job to complete .
135	Get all tasks for a given task instance .
136	Get the number of open slots in the pool
137	Run a command and return output .
138	Remove an option .
139	Get the specified section .
140	Allocate a list of keys for this project .
141	Begin a transaction .
142	Commit changes to project .
143	Lookup the given keys .
144	Rollback a transaction .
145	Run a query .
146	Get an operation by name
147	Delete an operation
148	Poll an operation until it is done .
149	Export project to storage bucket .
150	Import project from storage bucket .
151	Publish a message to a target .
152	Get the hostname of the host .
153	Gets the language client .
154	Analyze the specified document .
155	Annotate a text document .
156	Classify a document .
157	Get the list of template fields for a class .
158	Link to a template field .
159	Discovers the ORM pool
160	Add the path to the classpath if necessary .
161	Check if task_id is valid
162	Returns True if the cache variable is valid .
163	Convert an SQLAlchemy object to a dictionary .
164	Split a list into chunks .
165	Reduce an iterable into chunks .
166	Chain two tasks .
167	Pretty print a list of rows .
168	Render a log filename .
169	Return a connection to the API .
170	Wait for an operation to complete .
171	Coerce the content to a string .
172	Handle the execution of an operator .
173	Run a pig command .
174	Get the state of a celery task .
175	Calculate the number of tasks per send process .
176	Return the number of tasks per fetch .
177	Get the value of a variable by key .
178	Get connection object
179	Create an MLEngine job .
180	Get an MLEngine job .
181	Wait for a job to complete .
182	Create a new version .
183	Set the default version of a model
184	List versions of a model .
185	Delete a version .
186	Create a new model in a project .
187	Get a model by its name
188	Write batch data to DynamoDB .
189	Integrate all external plugins .
190	Get the default executor .
191	Get an executor by name .
192	Called when an error occurs .
193	Return a connection to the database .
194	Trigger a dag .
195	Delete a dag .
196	Get information about a task .
197	List available pools .
198	Create a new pool .
199	Delete a pool .
200	Create or update a container group .
201	Get state and detail status
202	Get all messages for a given instance group .
203	Get logs for a container .
204	Delete a container group .
205	Check if a container exists .
206	Decorator to apply default arguments .
207	Construct an ingest query from the given list of columns .
208	Receive a message from the channel
209	Find all the jobs in the database .
210	Get all the tasks in this dag .
211	Get a single task instance .
212	Get the previous dag run .
213	Get the previous dag run .
214	Update the state of this task
215	Verify integrity of the task instance .
216	Perform a Jenkins request and return the response .
217	Generate Airflow variables from a context .
218	Trigger the conditionally trigger .
219	Send a metric
220	Query a metric
221	Get a DAG by its ID .
222	Mark a list of zombies .
223	Bag a DAG into the DAG .
224	Collect DAGs from DAG folder
225	Return a report of dag loading stats .
226	Add days to ds
227	Format the given dataset .
228	Check if the file is a directory .
229	Return True if the file is a valid directory
230	Clear all tasks in the given list .
231	Return the number of the task .
232	Generate command to run a task .
233	Get the current state of this task .
234	Record the task as FAILED .
235	Refresh this instance from the database .
236	Clears all XCom from the database .
237	Returns the key for this task .
238	Check if this task is done .
239	The datetime of the next retry .
240	Return True if the job is ready to retry .
241	Check if pool is full .
242	Get the DAG run for this dag .
243	Pushes a key to the XCom .
244	Retrieve a single task from the datastore .
245	Initialize the run context .
246	Close the log file .
247	Return a connection to compute
248	Start an instance .
249	Set machine type .
250	Get an instance template
251	Insert an instance template .
252	Get an instance group manager .
253	Patch an instance group manager .
254	Wait for an operation to complete .
255	Check if a bucket exists .
256	Create a bucket .
257	Check if a prefix is in a bucket .
258	List all common prefixes in a bucket .
259	List keys in a bucket .
260	Check if a key exists .
261	Get an object from S3 .
262	Read the contents of a key .
263	Select an S3 object .
264	Check if a wildcard key matches a wildcard key .
265	Get a key for a wildcard key .
266	Upload a file to S3 .
267	Load a string from a string .
268	Uploads a string to S3 .
269	Upload a file to S3 .
270	Copy an object to a destination bucket .
271	Query the Cassandra database .
272	Convert user type to data dict .
273	Sends an email .
274	Get an instance of SpeechClient .
275	Recognize speech .
276	Execute the SQL query .
277	Load airflow plugins .
278	Check if plugin_obj is valid .
279	Skip a given dag run .
280	Returns a connection to the service .
281	Check if a file exists .
282	Upload a file .
283	List a file or directory .
284	Executes the query in the database .
285	Uncompress a file .
286	Query mssql .
287	Decorator to log action logging .
288	Build metrics .
289	Create a cgroup from a path .
290	Delete a cgroup .
291	Parse host from host
292	Perform an API call .
293	Get connection object
294	Execute a query
295	Describe an object
296	Get a list of available fields for an object
297	Get an object from Salesforce
298	Convert a column to a pandas Series
299	Write object to file .
300	Returns a MongoDB connection
301	Get a mongo collection
302	Replace one or more documents .
303	Check if a mail attachment exists .
304	Retrieve mail attachments by name .
305	Download mail attachments .
306	Get attachments by name .
307	Get file and payload
308	Add records to firehose
309	Get the status of a task instance .
310	Send email .
311	Send an email .
312	Convert result to UTC .
313	Check if a blob exists .
314	Check if a container has a prefix .
315	Load a string from a string .
316	Read a file from a blob .
317	Delete a file from a container .
318	Execute MLSD command
319	Get FTP connection
320	List all files in a directory
321	Retrieve a file from FTP
322	Store a local file .
323	Get the time of a file
324	Execute the webhook hook .
325	Return connection object
326	Check if a directory exists .
327	Check if a file exists .
328	Returns a list of all the directories and files in the specified share .
329	Creates a directory in the specified share .
330	Creates a file from a file .
331	Create a file from a string .
332	Load a file from a stream .
333	Returns a storage client .
334	Copy an object to another bucket .
335	Download a file from a bucket .
336	Upload a file to a bucket .
337	Check if a bucket exists .
338	Check if an object is updated after a given timestamp .
339	Delete an object .
340	List blobs in a bucket .
341	Get the size of a file .
342	Get the CRC32c of an object .
343	Get the MD5 hash of an object .
344	Create a bucket .
345	Compose one or more source objects in a bucket .
346	Check if the secondary training status is changed .
347	Get secondary training status message .
348	Tar and upload files to S3 .
349	Configure S3 resources
350	Check if an S3 URL exists .
351	Get a log connection
352	Create a training job .
353	Create a hyperparameter tuning job .
354	Create a transform job
355	Create an endpoint
356	Describe a training job .
357	Check the status of a job .
358	Check the status of a training job .
359	Execute the data flow .
360	Run migrations offline .
361	Run the migrations in the database .
362	Delete an instance .
363	Create an instance .
364	Create a new table .
365	Delete a table .
366	Update a cluster .
367	Prepares the hive command
368	Prepare hive configuration .
369	Load a DataFrame into a pandas DataFrame .
370	Load a table from a text file .
371	Get the metastore client
372	Check if a named partition exists .
373	Check if a table exists .
374	Return a connection to the hive .
375	Get results from HQL .
376	Write results to CSV file .
377	Get records from a HQL query .
378	Get a Pandas DataFrame from a HQL query .
379	Returns a connection to ProductSearch API .
380	Get endpoint .
381	Send message to Dingding webhook .
382	Bind parameters to MySQL .
383	Escape special characters .
384	Cast a string field to BigQuery .
385	Validate that the value is of the expected type .
386	Returns a connection to the database .
387	Create a bigquery service .
388	Check if a table exists .
389	Creates an empty table .
390	Update the properties of a table .
391	Cancel the BigQuery query .
392	Deletes a table .
393	Runs a table upsert .
394	Grant access to a source dataset .
395	Get a dataset resource .
396	Get datasets list .
397	Insert all rows into a table .
398	Executes an operation .
399	Execute one or more parameters .
400	Fetches the next page of a job .
401	Query Postgres .
402	Make intermediate directories .
403	Create a queue
404	Send a message to a queue .
405	Run a command .
406	Remove the configuration .
407	Parse command line arguments .
408	Build HTML header .
409	Build the container
410	Build js chart
411	Create x - axis
412	Create a y axis
413	Return a connection to the database .
414	Decorator to add action logging .
415	Wraps the response function to gzip the response .
416	Get the last dag run .
417	Create a new dag run .
418	Send message to SQS queue
419	Return a JSON response
420	Open a file with a zip archive .
421	Make a cache key .
422	Gets the connection to the video intelligence service .
423	Annotate a video .
424	Get the API key .
425	Get a requests session .
426	Execute an alert .
427	Build the OPsgenie payload .
428	Execute the alert hook
429	Get an athena connection
430	Starts a query execution .
431	check the status of a query execution
432	Poll the query status .
433	Get connection to remote host
434	Handle a rate limit exception .
435	Call Zendesk API .
436	Get all partitions of a table .
437	Get table information
438	Returns the location of a table .
439	Get the status of a cluster .
440	Deletes a cluster
441	Describe snapshots of a cluster
442	Restore a cluster from a cluster snapshot .
443	Create a cluster snapshot
444	Execute the api call
445	Create a job flow
446	Filter results by size .
447	Filter results for ignored extensions
448	Execute the mongo query
449	Get a pool by name .
450	Create a new pool .
451	Delete a pool .
452	Convert a Python dict to a protobuf .
453	Wait for an operation to complete .
454	Get information about an operation .
455	Append a label to the cluster_proto .
456	Create a cluster .
457	Get a cluster by name .
458	Get the webhook endpoint .
459	Build discord payload .
460	Execute the webhook .
461	Encrypt plaintext .
462	Import a table into the database .
463	Import a query to a target directory .
464	Exports a table .
465	Get a TextToSpeechClient .
466	Synthesize audio .
467	Closes the logging .
468	Return a list of init containers .
469	Get environment variables for the kube environment .
470	Get the kubernetes secrets
471	Get the security context
472	Get extra links for an operator .
473	Heartbeat for this job .
474	Launch the process .
475	Starts the process .
476	Returns True if the job is done False otherwise .
477	Exit the process gracefully .
478	Update import errors .
479	Process the task instances in the given queue .
480	Changes the state of the task instance to the new state .
481	Get the number of concurrency maps for the given states .
482	Change the state of an executable task .
483	Enqueue task instances with queued state
484	Returns the execution task instances for the given states .
485	Change state of tasks to scheduled .
486	Process the events from the executor
487	Processes the given file .
488	Update counters based on the state of the tasks .
489	Manage the executor state
490	Returns the DAG run for the given date .
491	Get the list of tasks to run .
492	Process run dates for the given run dates .
493	Set the state of the dag run to failed .
494	Execute this job .
495	Called when the job is running .
496	Get a client for a project .
497	Get an instance .
498	Apply a function to an instance .
499	Create an instance .
500	Update an instance .
501	Delete an instance .
502	Get a database .
503	Create a database .
504	Update a database .
505	Delete a database from an instance .
506	Check if the attachment exists .
507	Prepare parameters for image context
508	Get a connection to the cluster .
509	Check if a table exists .
510	Check if a record exists .
511	Build the command to track driver status .
512	Submit a spark - submit command .
513	Process a spark submit log .
514	Process the driver status log .
515	Get the task runner for the given task job .
516	Wait for the task to finish .
517	Query MySQL connection
518	Configure CSV file .
519	Writes the schema to a local schema file .
520	Get column type dict from schema
521	Convert mysql type to string
522	Execute the sqoop hook .
523	Decorate a function to apply a lineage
524	Parse extra data from extra json
525	Return a list of dates between start and end date
526	Convert time_seconds to time_seconds
527	Return n days ago
528	Initialize a role in the database .
529	Delete a role .
530	Return user s roles .
531	Returns a set of all permissions for the user .
532	Check if the user has a role .
533	Check if the user has a permission .
534	Delete faulty permissions
535	Merge permission and view menu .
536	Update admin permission view
537	Syncs the view permissions for the given DAG view .
538	Create permission VM
539	Get the Fernet object .
540	Check if the partition exists .
541	Get AWS Glation hook .
542	Receive messages from sqs queue
543	Get connection to HDFS .
544	Get a connection to the namenode .
545	Check if an HDFS path exists .
546	Upload a file to HDFS
547	Connect to pinot broker
548	Returns the URI for the connection
549	Convert date to dictionary .
550	Convert time to dictionary .
551	Get redis object
552	Get a Pandas DataFrame from the database .
553	Run a SQL statement .
554	Set the autocommit flag .
555	Insert rows into a table .
556	Serialize cell to string .
557	Return the health of the scheduler
558	Get extra links for a task .
559	Get a cloudant session
560	Execute the webhook hook .
561	Get credentials from a JSON file .
562	Returns an authorized httplib2 . httplib2 . Http object .
563	Catch exceptions raised by Google API .
564	Decorator to fallback to project_id in GCP
565	List of unfinished jobs .
566	Prepare connection command to be executed .
567	Convert a PIL Image to a Tensor .
568	Normalize a tensor .
569	Resize an image .
570	Pad an image with padding .
571	Crop an image .
572	Crop an image .
573	Flip the image .
574	Compute the perspective of an image .
575	Flips an image .
576	Crop the given image to the specified size .
577	Adjust brightness of an image .
578	Adjust image contrast .
579	Adjust the saturation of an image .
580	Adjust the hue value of an image .
581	Adjust the gamma of an image .
582	Rotate an image .
583	Apply an affine transformation to an image .
584	Convert an image to grayscale .
585	Save a tensor to a PIL image file .
586	Find all classes in a directory .
587	Read an image file with the given extension
588	Read info file .
589	Read matches files .
590	Calculate the accuracy of the output .
591	Sets the print function to be used when printing is True .
592	Download a file .
593	List all directories
594	List all files in a directory .
595	Download a file from Google Drive .
596	Get parameters from image .
597	Generate a random set of points for the distortion .
598	Get parameters for the image .
599	Get parameters from a set of parameters .
600	Generate random parameters .
601	Download files from Flickr .
602	Download files .
603	Download and save the dataset .
604	Get current theme name .
605	Run autocompleter .
606	Save preferences .
607	Get a list of themes
608	Parse search query
609	Parse the response from the API .
610	Define a custom gradient .
611	Multivariate normal diagnostic .
612	Compute the joint log probability for two school effects .
613	Benchmark Eight - Schools hmc hmc .
614	Decorate function s docstring .
615	Return a simple name for a distribution .
616	Build a random variable from a distribution .
617	Create a random variable .
618	Create a random variable from a distribution .
619	One step - step predictive mean and variance .
620	Forecast the observed time series .
621	Compute the maximum of an array along an axis .
622	Assert that x is finite .
623	Assert that x is less equal to rank .
624	The size of the event .
625	Evaluate all one - hot tensors .
626	Get the convert - to_tensor function .
627	Computes the size of the params_size .
628	Get the next interceptor .
629	Decorate a function to intercept it .
630	Create a tape from a function .
631	Generate random logistic data .
632	Visualize decisions .
633	Builds input pipeline .
634	Checks if map_values is valid .
635	Trace a transition operator .
636	Call fn with args .
637	Call fn with args and gradients .
638	Broadcasts from_structure to to_structure .
639	Transform log probability function .
640	A leapfrog step .
641	The metropolis step .
642	Hamiltonian Monte Carlo .
643	Sign adaptation by adaptation rate .
644	Create a TFPLayer from a dictionary .
645	Convert x to a tensor .
646	Creates a scale operator .
647	Generate a random walk function .
648	Generate a random walk function .
649	Expand x to event rank .
650	Computes the lower bound of this distribution .
651	Compute categorical probabilities .
652	Helper function to validate arguments .
653	Ensure TensorFlow is installed .
654	Logistic regression .
655	Covert the covariance type into a matrix .
656	Computes the cholesky covariance of x .
657	Compute the standard deviation of x .
658	Compute the variance of x .
659	Make positive axis .
660	Squeeze an axis .
661	Z operator .
662	Inverse of z .
663	A semilocal linear transition matrix .
664	Semilocal linear trend .
665	Samples from a halton sequence .
666	Generate permutations for each dimension .
667	Given num_results and sequence_indices return indices .
668	Compute the base expansion size .
669	List all primes below n .
670	Compute machine eps .
671	Hager - Hager Zang model .
672	Fix the step size .
673	Perform HagerZhang line search .
674	Perform a line search after bracketing .
675	Inner bisection function .
676	Prepares the arguments for evaluation .
677	Print a pass_through_tensor .
678	 quadrature scheme .
679	 quadrature scheme .
680	Checks whether a quadrature parameter is valid .
681	Determine the shape of the batch event .
682	Interpolate bimixtures .
683	Interpolate given scale .
684	Scale a linear operator .
685	Concatenate vectors .
686	Logarithm of a vector .
687	Computes the log - exponent of a vector .
688	Computes the sum of a vector .
689	Extract log probabilities from a distribution .
690	The marginal hidden probabilities .
691	Computes posterior marginals .
692	Set up the posterior mode .
693	Choose a random direction .
694	Sample the next step .
695	If fn_arg_arg is None return the result .
696	Pad x to right_rank .
697	Perform one step .
698	Builds a tf . posterior .
699	Builds a factored variational loss .
700	Minimize a build_loss_fn in the graph .
701	Computes the mean and variance of a time series .
702	Computes the initial value of a masked time series .
703	Returns the batch shape of the given distributions .
704	Factored joint operator .
705	Computes the sum of multiple distributions .
706	Compute empirical statistics .
707	Expand trailing dimension to trailing dimension .
708	Canonicalize observed time series with mask .
709	Mix over posterior draws .
710	Return the range of this range .
711	Return a function that computes a summary statistic .
712	Unify call signature .
713	Resolve distribution names .
714	Get required args .
715	Computes the KL divergence between two distributions .
716	Build the model .
717	Resolve graph of distribution names .
718	The entropy of the distribution .
719	Check that x is in the support of the distribution .
720	Summary of sequences .
721	Visualize a reconstruct .
722	Visualized analysis .
723	Summarize distribution parameters .
724	Sum the mean in nats and bits .
725	Call tfd .
726	Create a zero state .
727	Call lstm .
728	Apply convolution to inputs .
729	Generate the likelihood .
730	Reconstruct the posterior .
731	Sample the static prior .
732	Sample the dynamic prior .
733	Returns batch shape .
734	The batch shape tensor of the model .
735	Create a state space model .
736	Sample from the prior model .
737	Given a list of bijectors compute the minimum number of events in the bijectors .
738	Converts a vector size to a square matrix .
739	Return a numpy . argsort .
740	Sort values by axis .
741	Convert x into a tensor .
742	NDTR operator .
743	Create a tensor representation of a tensor .
744	Log the value of x .
745	Compute the logarithm of an NTR .
746	Rfinv function .
747	Log - density function .
748	Computes the log probability between two text messages .
749	Benchmark text messages hmc .
750	Determine if the model is a multivariate marginal GP .
751	Returns the marginal distribution .
752	Get index_points for this process .
753	Create an IAF stack .
754	Perform one step .
755	Bootstrap the gradients of the model .
756	Inner squared difference between two tensors .
757	Return the value and batch jacobian of x .
758	Prevent the second derivative of x .
759	Applies a distributional transform to x .
760	Split a covariance into marginals
761	Decompose a model into marginals .
762	Decomposes the observed time series .
763	Decompose a forecast - by - component distribution into a single model .
764	Convert a dense tensor to a sparse tensor .
765	Decorator for operator functions .
766	Return a text representation of a tensor .
767	The sample shape .
768	The sample shape tensor .
769	Return the value of the distribution .
770	Evaluate the expression .
771	Return the value as a numpy array .
772	Normal conjugates .
773	Creates a default template .
774	Uniform unit norm .
775	Log unnorm probabilities .
776	Log normalization .
777	Given a list of args return the common dtype .
778	Create a summary statistic .
779	Broadcasts tensors to target_tensors .
780	Returns the PDF at the given peak .
781	Calculate the effective sample size .
782	Calculate the effective sample size for a single state .
783	Calculate potential scale reduction .
784	Return the size of a tensor .
785	Convert a list of states into an argument .
786	Hermite quadrature scheme .
787	 quadrature quantiles .
788	Merge one or more parameters .
789	Return a copy of this mapping .
790	Merge two values .
791	Recursively convert a dictionary into a nested tuple .
792	The left - doubling increments .
793	Find the best index of x .
794	Slice bounds by doubling .
795	Sample with shrinkage .
796	Create a slice sampler for each chain .
797	Returns a function that sets random variable values to aligned value .
798	Creates a log - probability function for a given model .
799	Get the inputs of a function .
800	VGG conv block .
801	Build the tree .
802	Decorator to embed a value_and_gradients .
803	Check if there is no u turn .
804	Calculate the next state and next log probability .
805	Computes the log probability of the current target and momentum .
806	Draw a random Bernoulli distribution .
807	Create a default location scale function .
808	Returns a default function for the mean field normal distribution .
809	Default multivariate normal function .
810	Deserialize a Keras function .
811	Serialize a function and return its name
812	Convert from_structure to to_structure .
813	Convert a nested structure to a tensor .
814	Convert args to tensors .
815	Call fn with args .
816	Return a dictionary of attributes for Tensor .
817	Create a prior for a mixture .
818	Pack images into one dimension .
819	Download filename to directory .
820	Builds fake input functions .
821	Validate block_sizes .
822	Check that the inputs are not broadcast .
823	Multivariate normal tril .
824	Bernoulli layer .
825	Create a tf . Normal .
826	Poisson distribution .
827	The Mala - Euler method .
828	Get the drift .
829	Computes the log acceptance correction .
830	Call volatility function and gradients .
831	Broadcast volatility components to the state .
832	Make an AR transition matrix .
833	Returns the sample shape of x .
834	Helper function for reshape_input .
835	Call fn and reshape output .
836	r Calculate backprop t - t - t - wise gradient .
837	Return a flat list of distributions .
838	Allocates latent directory of words .
839	Creates a variational variational layer .
840	Returns a list of strings for each topic .
841	Creates a new dataset for a new dataset .
842	Builds fake training and eval functions .
843	Builds the input functions for training .
844	Minimize gradient and hessian loss function .
845	Adds control dependencies to the codebook .
846	Save images to file .
847	Visualize training data .
848	Load Bernoulli MNIST dataset .
849	Convert a tf . dtype to a numpy dtype .
850	Return the base dtype of the given dtype .
851	Check if dtype is a bool .
852	Check if dtype is complex .
853	Return the maximum value of dtype .
854	Returns the name of the given dtype .
855	Return the size of the given dtype .
856	Assert that all items have the same type .
857	Assert that tensors are the same dtype .
858	Minimize a simplex .
859	NelderMEAD .
860	Returns a function that replaces a simplex with an objective .
861	Returns the expansion function .
862	Returns a contraction function .
863	Shrinks the simplex to the best vertex .
864	Replace x at index .
865	Check if a simplex is converged .
866	Prepare arguments for the objective function .
867	Prepare arguments with objective function .
868	Prepare arguments for simplex .
869	Evaluate the objective function at each batch .
870	Plot weight posteriors .
871	Create a figure of the hiddenout prediction .
872	Build fake data .
873	Get Keras configuration .
874	Create an instance from a config dictionary .
875	Matrix multiplication .
876	Calculate standard variance .
877	Assigns the log - moving mean exp to the given log value .
878	Make a columnar .
879	Random rademacher .
880	Draw random rayleigh noise .
881	Pick a scalar condition .
882	Finish log probability .
883	Finish probability for one fiber .
884	Rotates dimensions .
885	Undo batch normalization .
886	Validate the batchnorm layer .
887	Slice a single parameter .
888	Return a dictionary of slice parameters for a distribution .
889	Apply a single step to a distribution .
890	Apply a slice sequence to a distribution .
891	Apply a batch of slices to a distribution .
892	Fit a model .
893	Returns a function that returns the convergence criteria .
894	Prepare arguments for TensorFlow model .
895	Returns the number of columns in x .
896	Prefers static arguments to a function .
897	Copy docstring from original_fn to new_fn .
898	Get the static predicate .
899	Returns the rank of a tensor .
900	Case - insensitive case .
901	Create a name scope .
902	Computes the mean and standard deviation of mixture distribution .
903	Create a scaling scaling tensor .
904	Make a diagonal scaling factor .
905	Get shapes from loc and scale .
906	Checks if scale is a diagonal scale .
907	Check that a distribution is valid .
908	Pads mixture dimensions with mixture dimensions .
909	Pick a scalar condition .
910	Move dimension to dest_idx .
911	Check that x is a non - negative integer form .
912	Determine if two tensors have same shape .
913	Get the static value of x .
914	Check if tf is known unsigned by dtype .
915	Checks if tf is signed by dtype .
916	Returns the largest integer in the given dtype .
917	Return the smallest integer in the given dtype .
918	Checks if the given dtype is an integer like .
919	Embed a categorical event shape .
920	Compute the log - combinations of counts .
921	Transpose a tensor .
922	Pick a vector from a boolean vector .
923	Prefers static broadcast shape .
924	Generate a new seed
925	r Compute the tridiagiagal tensor .
926	Get the dimension size of x .
927	Process quadrature grid and probabilities .
928	Get the arguments of the caller .
929	Expand input to vector .
930	Adds control dependencies to output_tensor .
931	Ensures that the rightmost_transposed_ndims is valid .
932	Validate perm .
933	Return the shape of the event .
934	Concatenate two tensors .
935	Returns the dimensions of x .
936	Merge two tensors .
937	Returns x with rank at least rank .
938	Checks whether the given target shape is equal .
939	Augment the sample shape with the full batch shape .
940	Build a single step of the backward smoothing .
941	Backward smoothing update .
942	Returns a function that returns a single step of the Kalman filter .
943	Linear Galman update .
944	Apply the Kalman transition to the filtered mean .
945	Build a kalman mean step .
946	Build a covariance step from prior covariance matrix .
947	Build a kalman sample step .
948	Propagate mean .
949	Propagate covariance matrix
950	Perform backward smoothing .
951	Samples from the joint state space .
952	Compute the posterior marginals .
953	The joint mean .
954	Computes the joint covariance matrices .
955	Convert latents to observations .
956	Log normalization .
957	The mode of the model .
958	Rotate samples by mean direction .
959	Sample a 3D distribution .
960	Make a copy of a function .
961	Returns a copy of the dict with the given value .
962	Recursively replace dict with pretty values .
963	Get samples from a distribution .
964	Return True if x is a namedtuple .
965	Choose a base case .
966	Choose a type based on accepted values .
967	Perform a safe sum on a tensor .
968	Apply the value and gradients to a function .
969	Call fn with gradients .
970	A smart loop .
971	Run a trace_fn .
972	Make a setter for the innermost results .
973	Make a getter from the kernel results .
974	Turn the kernel into a new kernel .
975	Replace event shape in event_shape tensor .
976	Replace event shape in event_shape in event_shape .
977	Checks if shape is valid .
978	Return True if all tensors converged .
979	Get initial state arguments .
980	Hager search step .
981	Restrict the value_and_gradients along the given direction .
982	Update the current position .
983	Check if the next objective is converged .
984	Broadcasts value to target .
985	Harmonic number .
986	Default exchange function .
987	Get the field from kernel results .
988	Get the states of a proposed exchange .
989	Compute the variance scaling term .
990	Returns a function that computes the forward log -det Jacobian of a bijector .
991	Returns a transformation function for a given bijector .
992	Returns a transformation function that transforms the given bijector to the given bijector .
993	Perform one step .
994	Apply cond to cond and fvals .
995	Secant2 .
996	Inner function .
997	Inner update function .
998	Update the value and gradient of a trial .
999	Perform a bracketing loop .
1000	The bisect function .
1001	Bisect function .
1002	Returns True if val_1 and val_2 are finite .
1003	Returns True if the value of a wolfe is satisfied .
1004	secant function
1005	Creates a policy that updates the step size .
1006	Integrator to integrate one step .
1007	Compute the log acceptance correction .
1008	Perform one step .
1009	Returns the kernel results .
1010	Bayesian ResNet model .
1011	Basic ResNet block .
1012	Creates an encoder .
1013	Create a decoder for topics .
1014	Make prior for topics .
1015	Samples from a Markov chain .
1016	Deep exponential family .
1017	A trainable positive deterministic .
1018	A trainable gamma function .
1019	Load nips 2011 pers .
1020	Initialize parameters .
1021	Returns the KL function for the given type_a and type_b .
1022	Read image from file .
1023	Download all sprites .
1024	Create a single character .
1025	Create a sequence of frames .
1026	Create random sequence .
1027	Creates a dataset for sprites .
1028	Validate distributions .
1029	Flatten a list of kernels into a flattened list .
1030	Flatten a list of product kernels into a list .
1031	Build fake data .
1032	Count integers in an array .
1033	Find the bins of x .
1034	Create a histogram .
1035	Quantiles .
1036	Get the dimensions of a tensor .
1037	Insert back_dims along axis .
1038	Make a non - negative axis .
1039	Move dimensions to flat end .
1040	Sort a tensor .
1041	Create state space models for each component .
1042	Calculate amari alpha .
1043	Computes the inverse KL for a given logu .
1044	Jensen Shannon function .
1045	Ppearson function .
1046	Squared squared hinger .
1047	Triangular triangular matrix .
1048	T - power function .
1049	Computes the absolute log1 .
1050	Jeffreys function .
1051	Modified GAN .
1052	Computes the dual ciszar function .
1053	Symmetrized Ciszar function .
1054	Compute the divergence of a distribution .
1055	Helper function for csiszar .
1056	Raises a ValueError if x does not exist .
1057	Batch gather with broadcasting .
1058	Broadcasts event and params .
1059	An expectation_importance_sampler .
1060	Broadcasts event and samples along event axis .
1061	Minimize the value and gradient .
1062	Checks that the inverse Hessian is symmetric .
1063	Update the inverse Hessian .
1064	The inverse hessian update .
1065	Matrix multiplication .
1066	Tensor product .
1067	Transpose a matrix .
1068	Pads the shape of x to the right .
1069	Computes the sum of the rightmost dimensions .
1070	Computes the square gradient of x with finite gradients .
1071	Get the common dtype from the input list .
1072	Minimize the value and gradient .
1073	Returns the initial state of the optimizer .
1074	Get search direction .
1075	Make an empty queue .
1076	Push new vectors onto the queue .
1077	Compute the PSD of a tensor .
1078	Return True if x is larger than det_bounds .
1079	Uniform correlation - like matrix .
1080	Uniform correlation matrix volume .
1081	Compute Clopper - Pearson confidence interval .
1082	Computes the volume bounds based on a correlation matrix .
1083	Generate a Von Mises distribution .
1084	Returns a value_and_gradient for the Von Mises distribution .
1085	Perform one step on a population .
1086	Minimize an objective function .
1087	Get the arguments for the objective function .
1088	Find the best value in a population .
1089	Check the convergence of a population .
1090	Returns the starting population .
1091	Perform binary crossover on a population .
1092	Get mutants of a population .
1093	Generate random mixing indices .
1094	Ensure tensor_or_list is a list .
1095	Helper to convert a tolerance to a tensor .
1096	Soft thresholding .
1097	Clip clip_by_value to clip_value .
1098	Builds input pipeline .
1099	Plot generated images .
1100	Convert the grammar to a string .
1101	Call the LSTM .
1102	Call latent code posterior .
1103	Return the integral of x .
1104	Return the integral of x .
1105	Computes the rank of a matrix .
1106	Pin a matrix .
1107	Solve the linear solve .
1108	r Solve matrix inverse .
1109	Reconstruct assertions .
1110	Helper function to solve assertions .
1111	Create a block - diagonal matrix .
1112	Validate a matrix .
1113	Computes the gradient of the negative log likelihood .
1114	Fit a sparse graph .
1115	Generate slices .
1116	Generate mask .
1117	Create a masked dense layer .
1118	Create input order .
1119	Create a list of degrees .
1120	Create mask for input degrees .
1121	Make an initializer for mask .
1122	Build the graph .
1123	Call this layer .
1124	Draw a single sample .
1125	Create a multivariate normal diag .
1126	Creates a function that returns the observation noise function .
1127	Convert parameters to weights .
1128	Adjust the depth of a graph .
1129	Return the best order of the graph .
1130	Flatten a probability chain rule .
1131	Build the probability chain rule .
1132	Computes the variational loss .
1133	Computes the optimal variational posterior .
1134	Returns a function that returns whether the step is the last day of the season .
1135	Builds the matrix of effects to residuals .
1136	Builds a transition matrix for the seasonal state .
1137	Build the noise noise for a seasonal variation .
1138	Builds a constrained seasonal transition model .
1139	Check if observation data is empty .
1140	Validate observation data .
1141	Adds a new scheduler to the scheduler .
1142	Sets the checkpoint .
1143	Set gradient clip to constant value .
1144	Returns the optimization layer .
1145	Set training summary .
1146	Sets the value summary .
1147	Create an optimizer for training_set .
1148	Set training data .
1149	Sets a summary trigger .
1150	Download data sets .
1151	Download news20 text samples .
1152	Download glove file
1153	Compiles the tensor .
1154	Fit the model .
1155	Evaluate the evaluation .
1156	Predict the features of x .
1157	Get MNIST dataset .
1158	Preprocess mnist data .
1159	Returns the end trigger .
1160	Validate optimizer .
1161	Get the value of the field .
1162	Call a bigdl function .
1163	Call a Java function and return the result .
1164	Convert an RDD to Java object .
1165	Convert Python object to Java .
1166	Get an activation by name .
1167	Create an instance from a numpy . ndarray .
1168	Gets the label of the image .
1169	Read a Parquet file .
1170	Write parquet to file .
1171	Get image from image frame
1172	Get the image of this frame .
1173	Returns the label of this image .
1174	Gets the predicts for this image .
1175	Predict the model .
1176	Fit the model .
1177	Returns the image transform .
1178	Save keras definition to file .
1179	Build a keras model .
1180	Predict class of data .
1181	Set weights .
1182	Returns the weights of the layer .
1183	Save Tensor to file .
1184	Call the training function .
1185	Load a torch . layer .
1186	Load weights from json or hdf5 .
1187	Create a new Criterion from a given criterion .
1188	Loads weights from json
1189	Load a keras dataset .
1190	Build a keras model .
1191	Returns the input shape .
1192	Returns the output shape .
1193	Read MNIST dataset .
1194	Extract movielens data from data_dir .
1195	Returns the bigdl jar path .
1196	Returns True if spark version is below 2 .
1197	Export a checkpoint .
1198	Save a dictionary of tensors to disk .
1199	Return an expanded tile for a given axis .
1200	Precompute future symbols .
1201	Simple attention layer .
1202	Attention layer .
1203	Compute BLEU score between two sentences .
1204	Get log file .
1205	Log a utterance .
1206	Summarize gradients .
1207	Dump weights to outfile .
1208	Read data by config .
1209	Train model from config .
1210	Actually interact with an agent .
1211	Convert labels to one - hot matrix .
1212	Convert probabilities to one - hot labels .
1213	Returns a tf . Session .
1214	Loads the model from disk
1215	Returns the momentum variable of the optimizer .
1216	Update graph variables .
1217	Round f1 macro to predicted values .
1218	Process a word .
1219	Create a stacked CNN layer .
1220	Bi - RNN .
1221	Builds a stacked BNN layer .
1222	Constructs a stacked highway CNN layer .
1223	Create embedding layer .
1224	Cudnn_gruNN .
1225	CuDNN compatible GRU .
1226	Create a CuDNN LSTM .
1227	Create CuDNN compatible LSTM .
1228	Build the CNN graph .
1229	CuDNN LSTM .
1230	Multi - level BigruNN .
1231	Apply a variational dropout to units .
1232	Builds the LSTM model .
1233	Build word embeddings .
1234	Builds the basic network .
1235	Train the model on a batch .
1236	Predict on batch .
1237	Convert a list of words into a vector .
1238	Convert tags to vector .
1239	Calculate BLEU measure .
1240	Verify a S3 URL .
1241	Extract certificates from a string .
1242	Verify certificate chain .
1243	Verifies the signature of a request .
1244	Verify a certificate
1245	Return a JSON representation of the controls .
1246	Return the ms_bot_framework for this control .
1247	Returns a list of telegram controls .
1248	Return a list of all alexa controls .
1249	Populate settings directory .
1250	Wrap a function as a graph .
1251	Wrap a function in Keras .
1252	Calculate accuracy .
1253	Round accuracy .
1254	Initialize a pre - trained initializer .
1255	Read data from file .
1256	Create a hello bot agent .
1257	Convert x to one - hot encoding .
1258	Prettified metrics .
1259	Populate the default settings directory .
1260	Load the model .
1261	Save the model to disk .
1262	Returns a tf . train_op .
1263	Search for a word in the trie .
1264	Make the operation cost dictionary .
1265	Start the timer .
1266	Handle a request .
1267	Actually act a utterance .
1268	Generate response .
1269	Handle an intent
1270	Handle a launch request .
1271	Handles unsupported messages
1272	Pretty printer .
1273	Convert loss to PL .
1274	Build a Chainer .
1275	Connect to the model .
1276	Predict on a file .
1277	Read in a file .
1278	Import a function from a string .
1279	Decorator to register a function as a metric .
1280	Get a metric by name .
1281	Convert label to DecayType .
1282	Get the best value .
1283	Encode a list of tokens .
1284	Read requirements . txt
1285	Calculate the log loss .
1286	Export weight to hub directory .
1287	Show details about an item
1288	Build Ecommerce agent .
1289	Main entry point for the MMS bot .
1290	Download files from source_url to dest_url .
1291	Unar a file
1292	Download the given URL to download_path .
1293	Update editable_dict recursively .
1294	Returns the MD5 of the given URL .
1295	Set a query parameter in a URL .
1296	Return alexa response
1297	Return the JSON representation of the control .
1298	This method is called when a card is triggered .
1299	Return the JSON representation of the control .
1300	Generate the message activity .
1301	Squad v2 f1 .
1302	Compute the recall at k .
1303	Check if GPU exists .
1304	Parse a config property .
1305	Parse config file .
1306	Expand user path .
1307	Create a component from a dictionary .
1308	Main loop .
1309	Delete a conversation .
1310	Refresh valid certificates .
1311	Verifies the signature of a request .
1312	Validate a request against the API
1313	Load a class from a string .
1314	Decorator to register a model class .
1315	Get model by name .
1316	Get the regularization path for a given model
1317	Make a GLM model from a model .
1318	Construct a H2OCluster object from a dictionary of keyvals .
1319	Shutdown the H2O instance
1320	Check if the server is running
1321	Display the cloud status
1322	List the jobs
1323	Returns a list of all time zones
1324	Fill from another instance .
1325	Returns metalearner params as a dictionary
1326	Runs the given test_func on the sandbox .
1327	Get the summary of a given column
1328	Delete a frame .
1329	Get the model builder .
1330	Validate model parameters .
1331	Compute metrics for a given model .
1332	Get model metrics .
1333	Delete a model .
1334	Pretty - print the data
1335	Run EC2 instances .
1336	Terminate instances .
1337	Stop instances .
1338	Start instances .
1339	Reboot instances .
1340	Wait for SSH on an SSH instance .
1341	Get the full name of a function .
1342	Find a function from a given code object .
1343	Get the signature of a function .
1344	Wrap the given text into a single line .
1345	Wait for the job to join .
1346	Train the model .
1347	Train the model .
1348	Get parameters as a dictionary .
1349	Signal handler .
1350	Wipe the output directory .
1351	Remove a sandbox directory
1352	Scrape port from stdout .
1353	Scrape cloud size from stdout .
1354	Stop the JVM .
1355	Stop all nodes and clients .
1356	Get the IP of the node
1357	Get the port of the node .
1358	Get ROC metrics .
1359	Determine vector size
1360	Mean absolute error .
1361	Mean squared error .
1362	Mean absolute error .
1363	Compute the mean variance score .
1364	Raises an exception if var is not a type .
1365	Assert that v matches regex .
1366	Assert that v satisfies a condition .
1367	Retrieve the expressions from the stacktrace .
1368	Check vtype .
1369	Get the name of a type .
1370	Get the source code for a lambda function .
1371	Check if a variable is a valid type .
1372	Check if a variable is a string .
1373	Get the configuration .
1374	Read configuration files .
1375	Return a list of possible log files .
1376	Executes the given progress function .
1377	Store model progress .
1378	Recalculate the model parameters .
1379	Estimate the completion time .
1380	Guess next poll interval .
1381	Compute the progress at a given time .
1382	Get the time at the given target .
1383	Write text to stdout .
1384	Computes the sizes of all widgets in the progress bar .
1385	Get the size of the terminal .
1386	Set the bar encoding .
1387	Fit the encoder .
1388	Get a new H2OFrame from the cache .
1389	Refresh the frame .
1390	Return the type of a column .
1391	Return a list of columns by type .
1392	Print a summary of this H2OFrame .
1393	Describe the frame
1394	Return the head of the DataFrame .
1395	Multiply the current frame .
1396	Return a list of all levels in the table .
1397	Number of levels .
1398	Set the level of this frame .
1399	Set the levels of this frame .
1400	Rename columns .
1401	Set the names of the expression .
1402	Set the name of a column .
1403	Return True if item is in item .
1404	Return the number of k - folds of this column .
1405	Return a string representation of the k - fold column .
1406	Print the structure of the H2OFrame
1407	Returns a pandas dataframe
1408	Pop a column at the given index .
1409	Return the quantile of the DataFrame .
1410	Concatenate frames .
1411	Bind a data frame to this H2OFrame .
1412	Bind a dataframe to a dataframe
1413	Splits a single frame into chunks .
1414	Define a group by .
1415	Return a new H2OFrame filled with NaN values .
1416	Impute values in a column .
1417	Merge two columns .
1418	Re - level expression
1419	Insert missing values
1420	Create a variable expression
1421	Compute the correlation matrix .
1422	Compute the distance between the points in y .
1423	Return an asfactor expression
1424	Return a new H2Frame with the given pattern .
1425	Return an expression that matches the given pattern .
1426	Return a new expression that contains a substring .
1427	Return a new row - like expression with the specified set .
1428	Return the entropy of the DataFrame .
1429	Return the number of valid substrings in path_to_words .
1430	Create a table expression
1431	Create a histogram of the data .
1432	Return the number of words that are greater than num_words .
1433	Replace all occurrences of pattern with replacement .
1434	Convert to a lower - case expression .
1435	Return a new expression that matches the given pattern .
1436	Return a new H2OFrame with the omitted rows .
1437	Return the difference between two frames .
1438	Return an expression that is not NA .
1439	Return an expression representing the minute of the expression .
1440	Return a new H2OFrame with the given seed .
1441	Return a random stratified split .
1442	Return a new frame with the given breaks .
1443	Return the maximum value of an axis .
1444	Apply a function to this frame .
1445	Parse text .
1446	Parse a file .
1447	Move the cursor .
1448	Unparse tokens .
1449	Get the size of the model .
1450	List of centers .
1451	Returns a list of the centers of the model .
1452	Connect to H2O .
1453	Send an HTTP request to H2O .
1454	Check H2O version .
1455	Imports the given path recursively .
1456	Upload a file to a destination frame .
1457	Import a CSV file .
1458	Import a HiveTable from a database .
1459	Import a SQL table into a table .
1460	Imports a SQL SELECT query and returns the result
1461	Parse raw setup dictionary .
1462	Return a deep copy of the data .
1463	Get a single model .
1464	get a grid by id
1465	Wrapper around H2OFrame . get_frame
1466	Download the model .
1467	Download data from H2OFrame
1468	Download all logs from H2O .
1469	Export a frame to a file .
1470	Convert data to list .
1471	Run a demo function .
1472	Load a dataset
1473	Returns the metrics for the predicted frame .
1474	Upload a key to a file
1475	Uploads a custom metric to the given file .
1476	Check that frame_id is valid .
1477	Convert a number of bytes to a human readable string .
1478	Return a slice from a slice .
1479	Returns True if slice is normalized .
1480	Run mojo_predict on a dataframe .
1481	Run mojo prediction .
1482	Marks a function as deprecated .
1483	Wait for the job to finish .
1484	Returns the deep features of each model .
1485	Print grid summary
1486	Print summary of the model
1487	Get all the hyperparameters of a model .
1488	Get model parameters as a dictionary .
1489	Returns a H2OGridSearch object
1490	Returns the F1 value of the model .
1491	Returns the importances of the model
1492	Project archetypes in a test frame
1493	Plot the variance of the model .
1494	Translates a name to a lower case .
1495	Dedent text .
1496	Extracts run information from a Java log file .
1497	main entry point for extraction
1498	Close the session .
1499	Get session id .
1500	Start logging to a file .
1501	Prepare data payload for backend .
1502	Prepare file payload .
1503	Log start transaction .
1504	Log the end transaction .
1505	Log a message .
1506	Process a HTTP response .
1507	Print a message to stdout .
1508	Get the AutoML for a project .
1509	Download a pojo file .
1510	Download the model from the leader .
1511	Fit the model
1512	Scale the data .
1513	Inverse transform .
1514	Extract a true string from a string .
1515	find node name
1516	Find git hash branch .
1517	find build timeout
1518	Find a build failure
1519	Find the build_id in the project
1520	Extracts job build url
1521	Grab all Java messages from a unit test file
1522	This function is used to save the tests to the console .
1523	Update the summary file
1524	Write the content of a file .
1525	Write Java Message
1526	Loads all Java messages to ignore
1527	Normalize enum constants .
1528	Find synonyms for a given word
1529	Poll the job .
1530	Get a POJO from the Assembly .
1531	Fit a frame to the Assembly
1532	Calculate the percentile of a sorted list .
1533	Return a dictionary with the default values .
1534	Returns the actual parameter values as a dictionary .
1535	Execute the deep features of the model
1536	Get the score history of the model
1537	Print information about the model .
1538	Returns variable importances as a pandas DataFrame .
1539	Compute the residual degrees of freedom .
1540	The coefficient of the model .
1541	Download a pojo file .
1542	Download H2O model to path .
1543	Get the details of the current model
1544	Check that the targets are correct .
1545	List of cross validation models
1546	Example demonstration of H2O s Gradient Boosting estimator .
1547	Example demo for H2O DeepLearning .
1548	Example demonstration of H2O .
1549	Wait for a key to be pressed .
1550	Return the cell as a pandas dataframe .
1551	shows the table
1552	Convenience method to start a jvm .
1553	Find H2o . jar .
1554	Yields the paths to use for h2o . jar
1555	Get the hit ratio table .
1556	Create CSV writer
1557	Convert URI to path .
1558	Convert directory path to URI .
1559	Extract functions and classes from a file .
1560	Generate documentation for a module .
1561	Return a list of modules .
1562	Write API documentation to disk .
1563	Write the generated RST file .
1564	Convert the table to a list of integers .
1565	Load Java messages from file .
1566	Add new message to global dictionary .
1567	update all the messages in the dictionary
1568	Extract a message to a dictionary
1569	Save dictionary to file
1570	Print a dictionary of keys to stdout
1571	Parse command line arguments .
1572	Print help menu .
1573	Find all python files in root_dir .
1574	Find magic in a file .
1575	Main entry point .
1576	Transform data to H2OFrame .
1577	Summarize the failed tests .
1578	Extract intermittens from collected tests .
1579	Plot ROC curve .
1580	Compute the confusion matrix for the model .
1581	Check if a deep water model is available
1582	Clean up data back to a given month .
1583	Returns a dictionary mapping endpoint names to endpoints groups .
1584	Update the site for the site .
1585	Return json data .
1586	Comment a user s comments .
1587	Get credentials .
1588	Like the user .
1589	Like the given hashtag .
1590	Check if user is not bot .
1591	Read a list from a file .
1592	Set the schedule time
1593	Defer this message to the server .
1594	Download data from a resource group .
1595	Guess service info from a path .
1596	Execute an update command on a resource group .
1597	Delete an application by id .
1598	Create or update an application definition by ID .
1599	Generate the URI for the request .
1600	Create a connection to the proxy .
1601	Perform an HTTP request .
1602	Execute script actions .
1603	Checks the availability of a front - door name .
1604	Purge deleted data .
1605	Get authorization server value .
1606	Validate the request_uri .
1607	Get CLI profile
1608	Get Azure CLI credentials .
1609	Resolve an application .
1610	Checks whether a named name is available on the server .
1611	Opens the request .
1612	Set the timeout for the request .
1613	Sets a request header .
1614	Returns all response headers .
1615	Send request body .
1616	Get the status of the request .
1617	Returns the status of the request .
1618	The response body .
1619	Sets the client certificate .
1620	Issues a PUT request .
1621	Set request header .
1622	Send request body .
1623	Return the response .
1624	Get a human readable id from an id_name .
1625	Get the serialization name for an element .
1626	Verify a single face to a person .
1627	Add a job .
1628	Get entry properties from XML node .
1629	Get the children of a node .
1630	Find namespaces from child .
1631	Convert an XML string to a ServiceBusNamespace .
1632	Returns a ServiceBusRegion object from an XML string .
1633	Converts an XML string to a namespace availability response .
1634	Convert an XML string to a Metric object .
1635	Replace the content of a runbook .
1636	Lists the recommendations .
1637	Updates an existing kb .
1638	Gets a list of member groups for the specified object .
1639	Build a package from a PR .
1640	Import data from a resource group .
1641	Publish a runbook .
1642	Renew the lock .
1643	Replaces the given word alterations .
1644	Add a new value to a secret resource .
1645	Gets the properties of a Storage Account .
1646	Retrieves the storage account keys for a given service .
1647	Regenerate the storage account keys .
1648	Creates a new storage account .
1649	Updates an existing storage account .
1650	Deletes the specified storage account .
1651	Checks if the storage account name is available .
1652	Gets the properties of a hosted service .
1653	Creates a hosted service .
1654	Deletes a hosted service .
1655	Creates a new deployment .
1656	Deletes a deployment .
1657	Swap the deployment for a service .
1658	Change a deployment configuration .
1659	Updates a deployment status .
1660	Upgrades a deployment .
1661	Walks an upgrade domain for a given service .
1662	Reboots a role instance .
1663	Deletes the specified role instances .
1664	Checks the availability of a hosted service .
1665	Lists the certificates for a given service .
1666	Gets the certificate for a service .
1667	Adds a certificate to a hosted service .
1668	Deletes a service certificate .
1669	Gets the management certificate for this subscription .
1670	Adds a management certificate to this subscription .
1671	Deletes a management certificate .
1672	Gets the properties of the affinity group .
1673	Creates a new affinity group .
1674	Deletes an affinity group .
1675	List subscription operations .
1676	Creates a reserved IP address .
1677	Deletes a reserved IP address .
1678	Associates a reserved IP address for a service .
1679	Disassociate a reserved IP address for a service .
1680	Retrieves information about a reserved IP address .
1681	Retrieves a persistent VM role .
1682	Creates a virtual machine deployment .
1683	Adds a role to a deployment .
1684	Updates a persistent VM role .
1685	Deletes a role .
1686	Capture a role .
1687	Starts a role in a deployment .
1688	Starts all roles in a deployment .
1689	Restart a role .
1690	Shutdown a role .
1691	Shutdown the specified roles .
1692	Adds a DNS server to a deployment .
1693	Updates an existing DNS server .
1694	Deletes a DNS server .
1695	List the versions of a resource extension .
1696	Replicate a VM image .
1697	Unreplicate a VM image .
1698	Share a VM image with the given name .
1699	Creates a new vm image .
1700	Deletes the specified VM image .
1701	List VM images .
1702	Updates a vm image .
1703	Adds an OS image to the server .
1704	Updates an OS image .
1705	Updates an OS image from an image reference .
1706	Deletes an OS image .
1707	Retrieves the data disk for the specified role and lun .
1708	Adds a data disk to a deployment .
1709	Updates an existing data disk .
1710	Deletes the data disk for this service .
1711	Adds a disk .
1712	Updates a disk .
1713	Deletes the specified disk .
1714	Retrieves the summary of a policy group .
1715	Build the receiver message handler .
1716	Fetch the next batch of messages .
1717	Renew the lock .
1718	Create or update a VM scale set .
1719	Converts a VMScaleSet to a single placement group .
1720	Perform a screen text operation .
1721	Creates a new key .
1722	Imports a key .
1723	Updates an existing key .
1724	Set a secret .
1725	Sets the certificate issuer for this vault .
1726	Create an instance from a connection string .
1727	Get a subscription .
1728	List all subscriptions for a topic .
1729	Send multiple messages .
1730	Get a sender .
1731	Get a receiver .
1732	Get a receiver for a dead letter .
1733	Parses an asynchronous operation response into an AsynchronousOperationResult .
1734	Perform a GET request .
1735	Perform a PUT request .
1736	Wait for an operation to complete .
1737	Gets the status of an operation .
1738	Update the management header .
1739	Build a package from Travis .
1740	Gets all certificates .
1741	Get all available regions .
1742	Lists all namespaces .
1743	Get a namespace by name .
1744	Creates a service bus namespace .
1745	Deletes the specified namespace .
1746	Checks if a namespace is available .
1747	Returns a list of topics .
1748	Get a list of NotificationHubs .
1749	Get a list of Relays .
1750	Get metrics rollups from a queue .
1751	Get metrics rollups for a given topic .
1752	Get metrics rollups for a given hub .
1753	Get metrics rollups .
1754	Create a new environment .
1755	Create a virtualenv with the given packages .
1756	Creates a new Server .
1757	Resets the server admin password .
1758	Returns a list of server quotas .
1759	Gets server event logs .
1760	Creates a new firewall rule .
1761	Updates a firewall rule .
1762	Deletes a firewall rule .
1763	Lists all firewall rules for a server .
1764	Lists all service - level objectives for a given server .
1765	Creates a new database .
1766	Updates a database .
1767	Delete a database .
1768	List databases .
1769	List agreements .
1770	Close the message handler .
1771	Close the receiver .
1772	Get the current session state .
1773	Set the session state .
1774	Receive deferred messages from the server .
1775	Merge a reservation order .
1776	Validate the Bearer challenge .
1777	Purge data from a resource group .
1778	Return the appropriate error handler .
1779	Creates a new queue .
1780	Deletes the specified queue .
1781	Retrieves a specific queue .
1782	Creates a new topic .
1783	Gets a specific topic .
1784	Creates a new rule in a subscription .
1785	Gets a specific rule .
1786	Lists all rules for a topic and subscription .
1787	Creates a subscription for a topic .
1788	Gets a subscription for the specified topic and subscription .
1789	Lists all subscriptions for a given topic .
1790	Sends a message to a topic .
1791	Unlocks a subscription message .
1792	Sends a batch of messages to a queue .
1793	Unlocks a queue message .
1794	Receive a message from the queue .
1795	Receive a subscription message from a topic .
1796	Creates an event hub .
1797	Updates an event hub .
1798	Retrieves an event hub .
1799	Sends a message to a hub .
1800	Updates service bus headers .
1801	Get authorization token .
1802	Check if the token is expired .
1803	Get token from accessconstrol server .
1804	Update request URI URI .
1805	Reset a service principal profile .
1806	Deletes the PeekLock .
1807	Unlocks the PeekLock .
1808	Renew the lock .
1809	Adds headers to the request .
1810	Serialize the request body into a batch body .
1811	Retrieves the cluster health information .
1812	Gets the cluster health using the specified policy .
1813	Unprovisions an application type .
1814	Gets a list of repair tasks .
1815	Submit a property batch .
1816	General error handler .
1817	Starts a web site trace operation .
1818	Lists the differences between the specified slot and slot .
1819	Swap a slot on a resource group .
1820	Gets events for the specified app .
1821	Adds a new face from a large face list .
1822	Handle redirect .
1823	Create and start a migration .
1824	Publish events to a topic .
1825	Move resources to another resource group .
1826	Set the default profile .
1827	Lists the query results for a given management group .
1828	Create a new queue .
1829	Deletes a queue .
1830	Creates a topic .
1831	Deletes a topic .
1832	Creates a subscription for the specified topic .
1833	Create an instance from a connection string .
1834	Get properties from the queue .
1835	Is the lock expired?
1836	Create a session resource .
1837	Create a new subscription .
1838	Export request rate by interval .
1839	Process results from a queue .
1840	Bulk add tasks .
1841	Task collection thread .
1842	Build the config from the config .
1843	Reset password .
1844	Start an environment .
1845	Create message from response body .
1846	Convert XML Element to Rule object .
1847	Convert XML Element to Queue .
1848	Convert a topic element to a Topic object .
1849	Convert a SubscriptionElement to a Subscription object .
1850	Creates a new certificate .
1851	Deletes a certificate .
1852	Get client from CLI profile .
1853	Create a GraphRbacClient object from a json dictionary .
1854	Load a client from an auth file .
1855	Parses an EnumerationResults response .
1856	Get entry properties from an XML element .
1857	Deletes a certificate .
1858	Get a service queue .
1859	List all queues .
1860	Get a topic by name .
1861	List all available topics .
1862	Receive deferred messages .
1863	Set the deferred messages for this session .
1864	Get a single site .
1865	Create a new website .
1866	Delete a website .
1867	Updates a website .
1868	Restart a website .
1869	Retrieve historical usage metrics for a webspace .
1870	Get the metric definitions for a webspace .
1871	Get publish profile XML .
1872	Get publish profile .
1873	Updates the policies of a registry .
1874	Creates a cloud service .
1875	Checks the availability of a job collection .
1876	Gets a single job collection .
1877	Complete a restore operation .
1878	Cancel scheduled messages .
1879	Send all pending messages .
1880	Re - reconnect .
1881	Gets the certificate from a publish settings file .
1882	Load cookies from the session
1883	Return terminal width .
1884	Get the prefix of a string .
1885	Print msg to stderr .
1886	Format size in human readable format .
1887	Format elapsed time .
1888	Create status line .
1889	Print progress bar .
1890	Generate a list of segment numbers for this playlist .
1891	Returns an iterator over the segments of this presentation .
1892	Wait for a given number of time to wait .
1893	Add a segment to the queue .
1894	Enqueue a value to a queue .
1895	Make a GET request to the PWF server .
1896	Extract the nonce from the request .
1897	Find vpid on url .
1898	Parse JSON data .
1899	Parse XML data .
1900	Parse query string .
1901	Search a dictionary by key .
1902	Spawns a subprocess .
1903	Yield all tags matching the given tag .
1904	Parse a manifest .
1905	Determine the encoding of a sample
1906	Parse response as JSON
1907	Parse XML response .
1908	Parse cookies .
1909	Parse headers .
1910	Parse query parameters .
1911	Return the message .
1912	Create a LogRecord .
1913	Login to LiveEdu account .
1914	Load a support plugin .
1915	Update qsd
1916	Iterate over all tags in a file .
1917	Returns a generator of all required arguments for this plugin .
1918	Check if file output exists .
1919	Create output plugin .
1920	Create an HTTP server .
1921	Iterate over HTTP requests .
1922	Start an HTTP stream .
1923	Pass a stream to the plugin .
1924	Opens a stream .
1925	Write a stream to the output stream .
1926	Read data from stream .
1927	Handle a stream .
1928	Fetch streams
1929	Fetch streams with retry .
1930	Given a stream name return the stream name .
1931	Format valid streams
1932	Handle a URL .
1933	Print the available plugins .
1934	Authenticate with Twitch .
1935	Load streamlink plugins .
1936	Sets up global arguments .
1937	Setup the console
1938	Set HTTP session options .
1939	Setup plugins .
1940	Setup HLS options .
1941	Log current versions .
1942	Get stream_id from text .
1943	Get iframe from text .
1944	Set an option .
1945	Get a specific option .
1946	Set a plugin option .
1947	Returns the value of a plugin option
1948	Resolve a URL .
1949	Load plugins from a path .
1950	Convert value to integer .
1951	Validate that a string starts with a given string .
1952	Validate that a string ends with a string .
1953	Validate that a string contains a string .
1954	Get an attribute from a value .
1955	Apply a function to a list of values .
1956	Convert a function to a map .
1957	Validate a URL attribute .
1958	Returns a function that returns the element with the given xpath .
1959	Find all elements in a value .
1960	Find the URL of the player in the CCEskatelevize server .
1961	Load data from data .
1962	Return the supported player name .
1963	Do login .
1964	Extract stream_id from HTML .
1965	Extract stream info from HTML .
1966	Login to the login website .
1967	Apply a function to the map .
1968	Make an API call to the API .
1969	Start a new session .
1970	Get information about a media
1971	Create a CrunchyrollAPI
1972	Compress string .
1973	Format a character .
1974	Format a string as output .
1975	Read n bytes from the buffer .
1976	Return the value of this code .
1977	Return an explanation .
1978	Set the decoding table .
1979	Set the length table .
1980	shows a table of all symbols
1981	Reads a tuple .
1982	Return an explanation of a bit .
1983	Return the value at index .
1984	Returns the upper and upper of the row at index
1985	Return the value at index
1986	Return the mnemonic for the symbol .
1987	return the mnemonic
1988	Parse the actions table
1989	Evaluate action .
1990	Return hexadecimal data .
1991	Process the stream
1992	Check for metablock length
1993	Check if the stream is uncompressed .
1994	Parse a block type .
1995	IMTF
1996	Read a list of prefixes .
1997	Monochrome .
1998	Return a polychrome version of the given colors .
1999	Convert a pandas DataFrame to a pyarrow . Table
2000	Decorator to mark a function as hidden .
2001	Add cartesian velocities to the model .
2002	Add virtual columns to the virtual grid .
2003	Return a DOT representation of the node .
2004	Count the number of values in the column
2005	Apply a mapping to the DataFrame .
2006	Returns a vaex application
2007	Opens multiple files .
2008	Create a table from a SAMP message .
2009	Create a DatasetAstropyTable from an astropy table .
2010	Create a DataFrameArrays from multiple arrays .
2011	Create a numpy array from a list of scalar values .
2012	Create a dataframe from a pandas dataframe
2013	Load data from a CSV file .
2014	Create a vex . ServerRest object from a URL .
2015	Zeldovich dataset .
2016	Concatenate multiple dfs together .
2017	Create a column range from start to stop .
2018	Open a dataset .
2019	Evaluate the given expression .
2020	Decorate a function to be called asynchronously
2021	Return a set of columns that are dependent on this dataset .
2022	Run a task .
2023	Sorts the list of pairs
2024	Detect Gadgets .
2025	Clear the figure .
2026	Wait for the last plot to finish .
2027	Open a document .
2028	Context manager for writing to a file .
2029	Split a list of arrays into masks .
2030	Apply an expression to the RDD .
2031	Compute the first occurrence of an expression .
2032	Calculate the mean of an expression .
2033	Compute the sum of an expression .
2034	Compute the standard deviation of an expression .
2035	Calculate the covariance of the data .
2036	Calculate the minimum value of an expression .
2037	Compute the minimum value of an expression .
2038	Calculate the median approximation of an expression .
2039	Create a Jupyter plot
2040	Compute the number of healPix pixels within the source .
2041	Plot the healpix .
2042	Plot a 3D volume .
2043	Get the dtype of the expression .
2044	Get the private directory
2045	Get state .
2046	Set the state of the DataFrame .
2047	Remove the virtual meta . yaml file
2048	Write virtual meta information to a file .
2049	Write meta information to a file .
2050	Return a list of subspaces that match the given expressions .
2051	Set a variable .
2052	Evaluate a variable .
2053	Evaluate a selection mask .
2054	Convert table to a dictionary .
2055	Return a copy of this DataFrame .
2056	Convert to pandas DataFrame .
2057	Convert to arrow table
2058	Convert to astropy . Table
2059	Add a column to the DataFrame .
2060	Rename a column .
2061	Add virtual columns to polar
2062	Add cartesian velocity to the grid .
2063	Add cartesian velocity to polar vectors .
2064	Add virtual columns to cartesian .
2065	Add a rotation matrix to the table .
2066	Add virtual columns to cartesian .
2067	Add virtual columns to spherical coordinates .
2068	Add a virtual column
2069	Delete a virtual column
2070	Add a variable .
2071	Delete a variable .
2072	Returns the tail of the sequence .
2073	Print the head and tail table .
2074	Describe the features in the table .
2075	Concatenate two lists .
2076	Set the current row .
2077	Returns a list of column names
2078	Trim the columns from the DataFrame .
2079	Return a new DataFrame with the given indices .
2080	Return a copy of this Range .
2081	Return a randomly sampled from the distribution .
2082	Split the sequence by frac .
2083	Split self into chunks .
2084	Sort the Series by by by a value .
2085	Materialize a virtual column .
2086	Undo the current selection .
2087	Redo a selection .
2088	Returns True if the selection can be performed
2089	Select a boolean expression .
2090	Selects non - missing columns .
2091	Drop missing values .
2092	Select a rectangle .
2093	Select boxes between spaces and limits .
2094	Selects a circle within a circle .
2095	Selects the ellipse with the given coordinates .
2096	Selects a SelectionLasso .
2097	Change the inverse of the table .
2098	Sets the selected selection .
2099	Create a new selection .
2100	Find a valid name
2101	Get the root nodes of the expression .
2102	Render the DataFrame as Graphviz .
2103	Add a column to the table .
2104	Encode values in a column in a DataFrame .
2105	Returns a Data object with all the columns
2106	The length of the array .
2107	Stack this DataFrames with another DataFrames .
2108	Concatenates two DataFrame .
2109	Export to HDF5 .
2110	Add a new column to the DataFrame .
2111	A decorator that patches a DataFrame .
2112	Decorator to register a function as a function .
2113	Fill missing values in an array .
2114	Return the dayofweek of x .
2115	Return the day of year .
2116	Return True if x is a leap year .
2117	Return the year of x .
2118	Return the month of x .
2119	Return the month name of x .
2120	Return the day of x .
2121	Return the day name of x .
2122	Return the week of year .
2123	Return the time series of x .
2124	Return the minute value of x .
2125	Returns the second value of x .
2126	Capitalize a string .
2127	Concatenate two strings .
2128	Test if a string contains a pattern .
2129	Return the number of occurrences of a string .
2130	Find the first occurrence of sub in x .
2131	Return a ColumnString arrow .
2132	Find the index of a string in x .
2133	Create a ColumnString arrow from x .
2134	Left strip a string .
2135	Pad a string to a given width .
2136	Repeat x with repeats .
2137	Find the closest occurrence of sub in x .
2138	Find the index of sub in x .
2139	Pads a string to a specified width .
2140	r Strip a string .
2141	Slice a sequence .
2142	Return a ColumnString arrow .
2143	Create a ColumnString arrow from a string .
2144	Create a ColumnString arrow from x .
2145	Get the autotype of an array .
2146	Convert to recarray .
2147	Write properties to file .
2148	Write a comment .
2149	Write a property .
2150	Iterate over properties of a file .
2151	Generator for universal newlines .
2152	Show installed versions .
2153	Deprecated .
2154	Set the FFT library .
2155	Track the beat events .
2156	Adjust the pitch - correction of the input file
2157	Convert frames to samples .
2158	Convert samples to frames .
2159	Convert time to frames .
2160	Convert a midi to a note .
2161	Convert frequency to mels .
2162	Convert mels to Hz
2163	Return the frequency frequencies of the FFT .
2164	Calculate CQT frequencies .
2165	Compute the frequency frequencies of mel bands .
2166	A weighting function .
2167	Convert X to time series .
2168	Return samples of X .
2169	Hybrid CQT function .
2170	Compute the pseudo - QT basis using the Fourier Transform .
2171	Compute the Fourier transform using CQT .
2172	Compute the Fourier transform of a waveform .
2173	Trim the last n_bins from the CQT response .
2174	Compute the QT response energy .
2175	Return the number of downsampling .
2176	Lower downsampling .
2177	Helper function to calculate the cost of DW .
2178	Backtracking path .
2179	Viterbi iteration .
2180	Discriminative method .
2181	Return the transition matrix .
2182	Return the transition loop .
2183	Return the transition cycle .
2184	r Return a transition matrix .
2185	Onset detection .
2186	r Compute onset strength .
2187	Find onset backtrack .
2188	r Computes the onset strength of a signal .
2189	Write times to a CSV file .
2190	Write audio data to file .
2191	Return colormap .
2192	Plot waveplot .
2193	Set current image
2194	Create coordinates for a mesh plot
2195	Check that axes is an instance of matplotlib axes .
2196	Scale axes .
2197	Compute the FFT frequencies for a given frequency range .
2198	Return the mel frequencies for n mel frequencies
2199	Compute CQT frequencies .
2200	Compute chroma coordinates .
2201	Convert an array of frames into time
2202	Estimate the pitch tuning
2203	Integrate a time series or STFT .
2204	Compute Harmonic Harmonic and percussives .
2205	Harmonic function .
2206	Compute the percussive percentage .
2207	Stretch the time series by the given rate rate
2208	Apply pitch shift to y
2209	Remix events in an audio buffer .
2210	r Compute the MSE of a signal .
2211	Trim non - silent signal .
2212	Split a signal into samples .
2213	Phase vocoder .
2214	r Calculate the amplitude of a signal .
2215	Compute the magnitude spectrogram .
2216	Perform Harmonic Harmonic separation calculation
2217	Decompose S into components and activations .
2218	r Filter a set of records .
2219	Compute the nearest neighbor filter .
2220	The Mel band weight function .
2221	Compute chroma components .
2222	Wraps a window to a float window
2223	Compute a constant q filter .
2224	Compute the length of the constant q lengths .
2225	Convert C1 to chroma .
2226	Calculate the bandwidth of a window .
2227	Get a window from a signal .
2228	Multi - filter bank .
2229	Calculate center frequency and sample rates .
2230	Fill x with a window spectrogram .
2231	Compute the squared window .
2232	Diagonalize a window .
2233	r Compute the spectral centroid .
2234	Compute the spectral rolloff .
2235	r Calculate the spectral flatness .
2236	Compute the polynomial features .
2237	Calculate the zero crossing rate .
2238	Compute the chroma transform .
2239	Compute the chroma decomposition .
2240	Compute the spectrogram .
2241	Compute the Jacobian between two sets of integers .
2242	Find the best matching interval in intervals_to that overlap the query .
2243	Match intervals between two intervals .
2244	Match two intervals .
2245	Match events between two events .
2246	Compute the salience of a signal .
2247	Interpolate harmonics .
2248	Interpolate harmonics at a given frequency range .
2249	Compute the harmonics of a 2D array .
2250	Load sound file .
2251	Load data from an audio file .
2252	Convert to mono .
2253	Resample an audio frame to another .
2254	Compute the autocorrelate of a signal .
2255	Calculate the likelihood of an audio .
2256	Create a click signal .
2257	Return the tone signal .
2258	Calculate the chirp signal .
2259	Get all files in a directory .
2260	Stretch the audio using the effects module .
2261	Parse command line arguments .
2262	Run Harmonic Harmonic algorithm .
2263	Create a track for a track .
2264	Return a list of beat paths to beats .
2265	Compute the beat - local score .
2266	For a given period and period calculate the beat track .
2267	Return the last beat .
2268	Convert a recurrence matrix to a lag matrix .
2269	Convert a lag matrix to recurrence .
2270	Apply a time - lag filter
2271	Subsegment a list of frames .
2272	Performs an agglomerative clustering .
2273	Enhance a path .
2274	Run onsets detection on a wav file .
2275	Create a new frame from an array .
2276	Validate that audio is finite .
2277	Validate x .
2278	Adjust the length of an axis to the given size .
2279	Sort a 2D array .
2280	r Normalize a matrix .
2281	Return True if x is local max .
2282	Determine the peak of an array .
2283	Sparsify rows in a sparse matrix .
2284	Roll an array along a given axis .
2285	Convert data to float
2286	Convert an index to a list of slices .
2287	Perform an aggregation on the data .
2288	Make a softmask of X
2289	Return a tiny numpy array .
2290	convert frames to video
2291	Read an image .
2292	Get a single frame .
2293	Convert image to images .
2294	Print a progress bar .
2295	Create a progress bar for a given function .
2296	Flip the image .
2297	Rotates the image .
2298	Clips the bounding boxes of the image .
2299	Scale bounding boxes .
2300	Perform imcrop on an image .
2301	Impadate an image to a given shape .
2302	Impad to multiple images .
2303	Scale size .
2304	Resize an image .
2305	Resizes an image .
2306	Rescale the image .
2307	Register file handler .
2308	Get the priority from a string .
2309	Dequantize an array .
2310	show an image
2311	Show bounding boxes in image .
2312	Read flow data from a file .
2313	Write a flow to a file .
2314	Dequantize flow .
2315	Load a state dictionary from a module .
2316	Load checkpoint from file .
2317	Convert weights to CPU
2318	Save model to file .
2319	Initialize an optimizer .
2320	Initialize logger .
2321	Get current learning rate .
2322	Register a hook .
2323	Run the workflow .
2324	Register training hooks .
2325	Convert a video to a file .
2326	Resizes a video .
2327	Cut a video .
2328	Concatenate video list .
2329	Return a list of items from a file .
2330	Create a dictionary from a file .
2331	3x3 convolution
2332	Create an object from a dictionary .
2333	Read image .
2334	Read image from bytes .
2335	write image to file_path
2336	Convert BGR to grayscale
2337	Convert a grayscale image to BGR .
2338	Cast inputs to dst_type .
2339	Check if the given sequence is of expected_type .
2340	Slice a list of integers .
2341	Decorator to check prerequisites .
2342	Calculate the average of the history .
2343	Scatter a list of devices .
2344	Return the value of a color .
2345	Check the time of a timer .
2346	Start the timer .
2347	Return the duration of the timer .
2348	Return the duration of the timer .
2349	Show a flow .
2350	Convert a flow to RGB .
2351	Make a color wheel .
2352	Calculate the accuracy of the output .
2353	Scatter a list of tensors .
2354	Scatter inputs and kwargs .
2355	Perform an HTTP request .
2356	Convert to JSON .
2357	Return the response as text .
2358	Handle the callback .
2359	Perform multiple requests .
2360	Make a request .
2361	Start the master .
2362	Normalize task v2 .
2363	Parse the line numbers of a YAML file .
2364	Get wheel name .
2365	Returns the basename of the archive .
2366	Add requirements from setup . cfg
2367	Convert an egg - info file into a distribution .
2368	Create an activity with a message .
2369	Creates an Activity with the suggested actions .
2370	Creates an attachment .
2371	Creates a new attachment .
2372	Create an attachment .
2373	Create a trace of an activity .
2374	Sets the telemetry client .
2375	Read documents from the database .
2376	Write the changes to the database .
2377	Deletes the specified keys .
2378	Create a StoreItem from the result .
2379	Create a dictionary from an item
2380	Sanitizes a key
2381	Create database and container .
2382	Get or create a database .
2383	Get or create a container .
2384	Fill in a QnaEvent with telemetry properties .
2385	Returns a ConversationReference for the given activity .
2386	Get the name of the step .
2387	Check if a channel supports suggested actions .
2388	Check if a channel supports card actions .
2389	Get the channel id from the activity .
2390	Check if the auth header is an emulator token .
2391	Create attachment for a hero card .
2392	Get the list of parameters of the instruction .
2393	Return a copy of this instance .
2394	Return the inverse gate .
2395	Set the control value .
2396	Return a copy of this CPy object .
2397	Return the value of the if statement .
2398	Return QASM for this instruction .
2399	Run a circuit .
2400	Do the pass
2401	Return a list of passes in the working list .
2402	Returns a dictionary representation of the flow controller .
2403	Create a flow controller .
2404	Compute the U base of the basis .
2405	Return parameters for a single gate .
2406	Return the matrix for a single gate .
2407	Matrix multiplication function .
2408	Eigensum index .
2409	Helper function to calculate the left and right and right indices for the matrix .
2410	Convert a circuit into a DAGCircuit .
2411	Approximate fit function
2412	Calculate the fit function .
2413	Plot coherence .
2414	Compute the mean and standard deviation of the band .
2415	Plot the data for each sequence
2416	Split runs into groups of parameters .
2417	Compose U3 parameters .
2418	Convert YYZ to ZYZ .
2419	Validate input .
2420	Trim the background image .
2421	Get the span of the gate .
2422	Convert a circuit to an instruction
2423	Run the circuit .
2424	Returns the best subset of the coupling map .
2425	Add a Barrier .
2426	Calculate the average data
2427	Process a bit id .
2428	Process a custom unitary node .
2429	Process a gate .
2430	Process a CNOT node .
2431	Process a measure node .
2432	Process if node .
2433	Create the op class for the given name .
2434	Return the duration of the channel .
2435	Return the start time of the channel .
2436	Get the stop time of the channel .
2437	Yield instructions for this schedule .
2438	Check that value is an expected type .
2439	Dumps additional data to valid_data
2440	Add additional data to valid_data
2441	Create validation schema .
2442	Validate instance against schema .
2443	Decorator to perform validation after initialization .
2444	Convert the model to a dictionary .
2445	Load a model from a dictionary .
2446	 Fourier Transform .
2447	Partial trace vector
2448	Vectorize a density matrix .
2449	Devectorize a matrix .
2450	Convert choi to rauli
2451	Chops an array from an array .
2452	Return the outer product of two vectors .
2453	Concurrence function
2454	Calculate the Shannon entropy of a vector .
2455	Calculate the Shannon entropy of a state .
2456	Calculate the mutual information of a state .
2457	Calculate the entanglement of a state .
2458	Return the entropy of an EOF qubit .
2459	Flatten a schedule into a single schedule .
2460	Shift a schedule .
2461	Insert a child component into the parent .
2462	Append child component to parent .
2463	Return a U3 gate .
2464	Get the status of the backend .
2465	Start the simulation .
2466	Returns the time remaining in seconds .
2467	Disassemble a QObject .
2468	Computes the Hamming distance between two strings .
2469	Return quaternion from axis rotation .
2470	Convert angles to quaternion .
2471	Normalizes the quaternion .
2472	Convert to matrix
2473	Convert to Z axis
2474	Process data according to number_to_keep .
2475	Function to plot a histogram .
2476	Check the type of the instruction .
2477	Check that the index is within the range .
2478	Check if a matrix is a square matrix .
2479	Check if a matrix is a diagonal matrix .
2480	Check if op is symmetric .
2481	Check if a matrix is a Hermitian matrix .
2482	Check if a matrix is a positive semi - definite matrix .
2483	Check if a matrix is an identity matrix .
2484	Determine if a matrix is a unitary matrix .
2485	Convert data to chi .
2486	Convert data to superop .
2487	Convert data to Kraus
2488	Convert data to Chi representation .
2489	Convert data to PTM .
2490	Convert data to Stinespring .
2491	Convert data to an operator .
2492	Convert data from operator to PMS
2493	Convert a stinespring channel to an Operator representation .
2494	Reshape data to chi .
2495	Convert input to superop .
2496	Convert the Kraus data to an integer matrix .
2497	Convert Choi - matrix to Kraus matrix .
2498	Convert stines to kraus .
2499	Convert stines to chi .
2500	Convert a set of kraus data into a pair of stine vectors .
2501	Convert a Kraus matrix to a superop .
2502	Convert chi to chi .
2503	Convert chi to Pauli operator .
2504	Reravels two matrices .
2505	Transform data from pauli .
2506	Check that input_dim is an n - qubit channel .
2507	Hide ticklines and labels .
2508	Set the label convention .
2509	Clear the mesh .
2510	Add a list of vectors
2511	Add an annotation .
2512	Render the figure .
2513	Plot the front frame .
2514	Render the figure .
2515	Synthesis of two - qubits .
2516	Return the top of the cell
2517	Center of the message
2518	Format the bot .
2519	The length of the tree .
2520	Returns the parameters for a label instruction .
2521	Generate label for a box .
2522	Return the LaTeX representation of this parameter .
2523	Compile a qircuits .
2524	Add deprecation warnings to warnings .
2525	Return local hardware information .
2526	Check if a connection is established .
2527	Check the status of a job .
2528	Create a constant array with the given amplitude .
2529	Calculate the square of an array .
2530	Return a 3D triangle of the waveform .
2531	Compute cosine .
2532	Adjusts a gaussian width based on a center and a center .
2533	Compute a gaussian from the given times .
2534	Gaussian derivative .
2535	r Gaussian square .
2536	Create a default pass manager .
2537	Generate a pass manager .
2538	Check if a register has been registered .
2539	Return a copy of this circuit .
2540	Inverse of the circuit .
2541	Append an instruction onto the stack .
2542	Add an instruction .
2543	Add registers to the circuit .
2544	Check that qubits are duplicate qubits .
2545	Check that qargs are valid
2546	Check that all cargs are valid .
2547	Check that the circuit is compatible .
2548	Return a QASM string .
2549	Draw the circuit .
2550	Number of gate operations in the barrier .
2551	Return the total width of all registers .
2552	Count the number of operations in this table .
2553	Return the number of connected components .
2554	Creates a new circuit with the given values .
2555	Bind a parameter to a parameter .
2556	Draw a pulse drawer .
2557	Search forward n - gates .
2558	Map gates to free gates .
2559	Calculate the distance between two gates .
2560	The score of a step .
2561	Returns a copy of the DAGCircuit with the given coupling map .
2562	Map a gate to a layout .
2563	Return the swap operations for a given edge .
2564	Run the graph on the given DAG .
2565	Adds a physical qubit to the coupling graph .
2566	Add an edge to the graph .
2567	Return a subgraph of the given nodelist .
2568	List of physical qubits .
2569	Check if the graph is connected .
2570	Compute distance matrix .
2571	Compute the distance between two qubits .
2572	Compile a qiskit circuit .
2573	Cu1 gate .
2574	Inverse of the instruction .
2575	Apply q_if to each gate .
2576	Perform a C_if instruction .
2577	Subscribe to an event .
2578	Dispatch an event .
2579	Unsubscribe from an event .
2580	Publish an event .
2581	Initialize the circuit .
2582	Initialize the circuit .
2583	Return the discompentangle of this gate .
2584	Calculate the bloch angles .
2585	Perform multiplexing on a set of angles .
2586	Checks if the given value is a virtual register .
2587	Return a copy of this layout
2588	Combine this layout into an edge map .
2589	Create a Toffoli gate .
2590	Insert a schedule into the schedule .
2591	Raises an exception if a fenced property is not protected .
2592	Convert gates to indices .
2593	Run the coupling map .
2594	Update the circuit .
2595	Return a group of qubits .
2596	Create Pauli from label string .
2597	Initialize from boolean vectors .
2598	Return the product of p1 and p2 .
2599	Convert this circuit to an Operator .
2600	Convert a Pauli circuit into an instruction .
2601	Update the qubits .
2602	Update x .
2603	Insert pauli labels into self .
2604	Append paulis to self .
2605	Delete qubits from the tensor .
2606	Generate random boolean vectors .
2607	Create a Pauli operator from a single Pauli label .
2608	Get the outcome of a measure .
2609	Add a sample measure .
2610	Add a qasm measure .
2611	Add a QASM reset to the quantum state .
2612	Validate the initial statevector .
2613	Initializes the state vector
2614	Return the state vector .
2615	Validate the circuit for measure sampling .
2616	Run an AerJob .
2617	Run a job .
2618	Validate the circuit .
2619	Validate the initial unitary .
2620	Initialize the unitary matrix .
2621	Get the unitary .
2622	Run a job .
2623	Validate the circuit .
2624	Check if the given object is a bit .
2625	Run the circuit .
2626	Check if this interval has overlap .
2627	Return an Interval shifted by time .
2628	Shift the interval by the given time .
2629	Get the start time of the channel .
2630	Get the stop time of the channel .
2631	Check if timeslots are mergeable .
2632	Return a copy of the timeslotCollection with all slots merged .
2633	Shift the timeslot to the specified time .
2634	Report on branch and commit .
2635	Process a matrix of data .
2636	Plot a paulivec state
2637	Create a rotation matrix .
2638	Create a fredkin gate .
2639	Initialize the graph .
2640	Create the program graph .
2641	Select the next edge of the program .
2642	Select the best remaining circuit .
2643	Select the best remaining qubit in prog_qubits .
2644	Run the program graph .
2645	Returns a list of instructions .
2646	Reverse the gate .
2647	Apply qregs to each gate .
2648	C_if operator .
2649	Check if the matrix is a unitary matrix .
2650	Conjugate operator .
2651	Transpose operator .
2652	Return the power of the operator .
2653	Shape of the graph .
2654	Convert an instruction to an operator .
2655	This function is used to output a swap map layer .
2656	Split a bitstring into a string .
2657	Format level 0 memory .
2658	Format level 1 memory .
2659	Format memory to memory list .
2660	Format counts dictionary .
2661	Format a state vector into a complex matrix .
2662	Format a unitary matrix .
2663	Decorator to require a job .
2664	Submit a job to the executor .
2665	The status of the job .
2666	Check if lo_freq is in lo_freq .
2667	The bloch plot
2668	Get qubit default frequencies .
2669	Get the measurements from the config .
2670	Run the circuit .
2671	Plot the state of the qsphere
2672	Chooses k from n to k
2673	Compute the lexicographical index of a list .
2674	Plot a pauli matrix
2675	Get unique hardware backends .
2676	The op of this node
2677	Create a new constant pulse .
2678	Create a new zero pulse .
2679	Create a new square pulse .
2680	Return a sample pulse .
2681	Create a sample pulse .
2682	Generate a cos pulse .
2683	Create a sin pulse .
2684	Generate a gaussian pulse .
2685	Calculate the derivative of a Gaussian pulse .
2686	Return a sample of a gaussian square .
2687	Distance between two points .
2688	Convert the QREG to a string .
2689	Returns a backend instance .
2690	Rename a register .
2691	Remove all ops that match an opname .
2692	Add a Quantum register to the circuit .
2693	Add a classical register to the DAG .
2694	Add a wire to the graph .
2695	Verify that the creg in condition is valid .
2696	Return the bits in the given condition .
2697	Add an operation node to the graph .
2698	Apply an operation back to the output node .
2699	Check that the registers are valid .
2700	Check that the wire map is valid .
2701	Map a condition to a new one .
2702	Extends the graph with the given edge map .
2703	Composes the input circuit into the graph .
2704	Check that the given wires match the given node .
2705	Make a mapping from pred and succ to succ .
2706	Computes the full pred and successor maps for the input circuit .
2707	Returns a list of topological nodes .
2708	Iterate over the edges of the graph .
2709	Returns a list of nodes with the given op .
2710	Returns a list of all gate nodes .
2711	Return a list of named nodes .
2712	Returns a list of two - q gate nodes .
2713	Return all predecessors of a node .
2714	Return the predecessors of a node .
2715	Return the ancestors of a node .
2716	Return the successors of a node .
2717	Remove an operation node from the graph .
2718	Remove all ancestors of a node .
2719	Remove all descendants of a node .
2720	Remove non - ancestors of a node .
2721	Remove all descendants of a node .
2722	Return a copy of this circuit .
2723	Create a list of serial layers for this circuit .
2724	Generate multigraph layers .
2725	Return a set of all runs in the graph .
2726	Yield the nodes connected to the given wire .
2727	Count the number of operations in the topology .
2728	A summary of the tensor .
2729	Create a tomographic basis .
2730	Generate gates for a Pauli measurement .
2731	Set the tomography of meas_qubits .
2732	Process a tomography set .
2733	Create tomography circuits .
2734	Return the data for a tomography .
2735	Calculate marginal counts for each qubits .
2736	Fit tomography data .
2737	Fit a tomo .
2738	projector op_list
2739	Compute the linear inversion of a tensor .
2740	Generate a wizard for the given rho
2741	Calculate wigner data .
2742	Measure the gate in the circuit .
2743	Check job status .
2744	Monitor job status .
2745	Generate Euler angles from 1q matrix .
2746	Simplify a U3 gate .
2747	Add all q registers to the DAG .
2748	Returns a tab with the information about the qubits .
2749	Build the history tab
2750	Plot the job history .
2751	Draw a pulse drawer .
2752	Create a Cu3 gate .
2753	Build a bell circuit .
2754	Create a transpile job .
2755	Transpile a circuit .
2756	Run multiple experiments .
2757	The drive channel in the queue .
2758	The control channel of the pulse .
2759	The measure of the current state .
2760	The acquire channel .
2761	Input state .
2762	Assemble a list of experiments .
2763	Remove qiskit logger .
2764	Plot the hint on state
2765	Process fidelity inputs .
2766	Lexer input .
2767	Pop the stack from the stack .
2768	Push the lexer to the stack .
2769	Run the circuit .
2770	Returns the bound method for the given instruction .
2771	Convert an acquire instruction .
2772	Convert frame change .
2773	Convert a persistent value to a persistent value .
2774	Convert a drive .
2775	Convert a snapshot instruction .
2776	Update the annotations of a discretized pulse .
2777	Decorate a function to generate a sampler function .
2778	Filter backends .
2779	Resolve a backend name .
2780	Convert a DAG into a QuantumCircuit .
2781	Make a dictionary of observables .
2782	Update the current symtab .
2783	Verifies that the gate is declared as a bit .
2784	Verifies that the expression is a list of expressions .
2785	Verify a gate definition .
2786	Verify that a register is valid .
2787	Verify the contents of a bitlist .
2788	Find the column in the input string .
2789	Parse debug value .
2790	Parse data .
2791	Parse data .
2792	Parse the QASM file .
2793	Create a Cz gate .
2794	Return the basis state of a bitstring .
2795	r Returns the projected density matrix .
2796	Return the purity of a state .
2797	Run the graph on the given dag .
2798	Create a widget for a backend .
2799	Update backend status
2800	Generate a widget for the jobs pending .
2801	Run the DAG on the given dag .
2802	Get a backend by name .
2803	Shape of the bipartite .
2804	Given a set of bit labels and a number of bit labels yield the highest number of unique register names .
2805	Truncate float .
2806	Generate a latex document .
2807	Calculate the depth of the image .
2808	Get the Beamer page for this circuit .
2809	Load a schema from a JSON file .
2810	Get a validator by name .
2811	Load schemas and validators .
2812	Validate JSON against schema .
2813	Format the cause of a given error .
2814	Calculate the majority of a c
2815	Unmajority problem
2816	Generate a LaTeX source .
2817	Plot a circuit as a Matplotlib drawer .
2818	Generate a random unitary operator .
2819	Generate random density matrix .
2820	Generate a Gginibre matrix .
2821	Returns random density of N rows .
2822	Generate random density bres .
2823	Returns the names of a custom unitary .
2824	Power on the input dimensions .
2825	Compose this subsystem with the given qargs .
2826	Convert an instruction to a SuperOp .
2827	Run the barrier circuit .
2828	Convert a list of circuits into a QObject .
2829	Unroll all Gates in the DAG .
2830	Perform the decomposition of the gate .
2831	Define the gate definition .
2832	Check that the value is not expected .
2833	Check that the value is valid .
2834	Set the atol method .
2835	Set the relative rtol tolerance .
2836	Reshaped input dimensions .
2837	Tuple of input dimensions .
2838	Get output dimensions .
2839	Return a copy of the Dataset .
2840	Power on the input dimensions .
2841	Automatically guess dimensions .
2842	Eigensum operator .
2843	Deserialize schema .
2844	Serialize the object .
2845	Check that value is an expected type .
2846	Return the fidelity of two states .
2847	Fvd function .
2848	Return the inverse of this snapshot .
2849	Label .
2850	Check if the operator is unitary .
2851	Convert to an operator .
2852	Convert this QuantumChannel to an instruction .
2853	Initialize transformer .
2854	Returns the enum for the given model .
2855	Monkey patch_strptime .
2856	Returns the locale map for the given languages .
2857	Get a list of locales .
2858	Check if a list of tokens are valid .
2859	Split a string into tokens .
2860	Parse a date string .
2861	Parse a time string .
2862	Check if the given date string is applicable .
2863	Translate a date string .
2864	Parse date_string using given formats .
2865	Returns a missile reader
2866	Convert a Java exception to a net code .
2867	Convert a Java exception into an integer .
2868	Read the answ configuration .
2869	Generate configuration for Phantom .
2870	Get information about all streams .
2871	Compose configuration file
2872	Log stdout and stderr .
2873	Expand time to seconds .
2874	Read configuration from options
2875	Publish stepper information .
2876	Generate a filename for stpd
2877	Read stepper info from file .
2878	Write cached options to file
2879	make a stpd file
2880	Create a step from an RPS schedule .
2881	Returns the RPS at time t .
2882	Execute a command in a shell .
2883	Decodes monitoring data
2884	Make points for a label .
2885	Publish a status message
2886	Count the number of matched codes .
2887	Stop the pool .
2888	Feed data from stpd to queue .
2889	Initialize logging .
2890	Add user options
2891	Configure the core .
2892	Gracefully shutdown gracefully
2893	Collect data from the queue .
2894	Notify listeners of the aggregated data .
2895	Get a marker .
2896	Parse duration .
2897	Start an agent on localhost .
2898	Start an SSH session .
2899	Discovers the JMeter UDP port
2900	Add components to the JMX file
2901	Terminate the process .
2902	Read data from a list of lines .
2903	Create an autostop criterion .
2904	Load the monitoring config from a file .
2905	Create an agent startup config file .
2906	Check disk space
2907	Check the free memory
2908	Get terminal size
2909	Get right line
2910	Truncates a list of lines to a maximum width .
2911	Render the left panel
2912	Render the screen
2913	Add a new info widget
2914	Fill the rectangle with the given size .
2915	Return the length of a given line .
2916	Create a load plan .
2917	Get level string .
2918	Add a widget to the screen
2919	Make a request to the writer .
2920	Load all plugins
2921	Get the first plugin of a given type .
2922	Search for plugins of a given type .
2923	Copy a file to the artifact_dir .
2924	Add artifact file to collect .
2925	Create a temporary file .
2926	Load configuration files .
2927	Write configuration to file .
2928	Get options from config file .
2929	Find all sections that start with prefix
2930	Decode a chunk of stats .
2931	Get information about the phantom .
2932	Start monitoring agent .
2933	Poll for agents .
2934	Sends collected data to all listeners
2935	Detect configuration .
2936	handle data items
2937	Internal method to decode agents data .
2938	Subscribe to channels .
2939	Run this client .
2940	Close the socket .
2941	Perform one request .
2942	Submit an order .
2943	Get an order by id .
2944	Get a position by symbol
2945	List all assets .
2946	Returns an Asset object for the given symbol
2947	Create a joining step .
2948	Ensure a dict parameter is a dict parameter .
2949	Converts a dict parameter into a dictionary parameter .
2950	Construct an event logger .
2951	Construct a JSON - event logger .
2952	Read configuration from config file .
2953	Get the configuration for a repository .
2954	Format config for GraphQL .
2955	Get a pipeline by name .
2956	Returns a list of all pipelines
2957	Get the next event from the queue .
2958	Execute a pipeline through a pipeline .
2959	Wait for all processes to finish .
2960	Create a Field instance for a given dagster type .
2961	Build an ExecutionPlan .
2962	Build a plan for a pipeline .
2963	Build a dependency definition for a pipeline .
2964	Return a solid named name .
2965	Build publish comands .
2966	Release a new version .
2967	Creates a pipeline context definition .
2968	Decorate a function with a selector schema .
2969	Decorate a function with a selector schema .
2970	Block the given text .
2971	Download file from S3 .
2972	Uploads a file to S3
2973	Context manager for a user - code error boundary .
2974	Create a new directory .
2975	Context manager for a user - code context manager .
2976	Create a context free log .
2977	Return True if any of the steps were successful .
2978	True if step is skipped .
2979	Return the transformed values .
2980	Returns the transformed value of this step .
2981	Return step failure data .
2982	Create a PermissiveDict with typed fields .
2983	Check if config value is a valid dataset .
2984	Check if config value is a valid table .
2985	Execute a core transform .
2986	Converts an existing type into a DAG .
2987	Define a resource definition .
2988	Create an event v2 .
2989	Coalesce the topological order of a execution plan .
2990	Get connection parameters .
2991	Return a new connection .
2992	Create a Cursor instance .
2993	Close connection .
2994	Make model from model_dict .
2995	Convert a list of models into a list .
2996	Add fields to formfield
2997	Convert value to model_container .
2998	Apply relationship filters to queryset .
2999	Compute the NFPs for a uniform distribution .
3000	Compute the real NFPs .
3001	Compute the best partition .
3002	Return optimal partitions for the given sizes .
3003	Calculate C1 and C2 .
3004	Initialize the slots .
3005	Return the size of the hash .
3006	Serialize the min hash into a buffer .
3007	Deserialize a LeanMinHash object .
3008	Update hashvalues using hashfunc
3009	Merge two MinHash objects .
3010	Return a union of MinHashes .
3011	Index given entries .
3012	A generator that returns all the keys that match the given minhash .
3013	Computes the minhash of the input vector .
3014	Remove a key
3015	Update the register .
3016	Count the number of samples
3017	Merge this HyperLogLogLog with another HyperLogLogLog .
3018	Clear the register
3019	Calculate the k - k score .
3020	Computes the mean of the actual and predicted values .
3021	Sorts the hashtables .
3022	Query the set of keys for the given minhash .
3023	Close all hashtables .
3024	Return an ordered storage .
3025	Return an unordered storage .
3026	Get user data
3027	Add social login to state .
3028	Select the preferred text .
3029	Parse a scoped selector
3030	Parse a statement .
3031	Parse a value .
3032	Advance to one line .
3033	Parse a configurable reference .
3034	Augment an exception with an augmented message .
3035	Convert the operative config string to markdown .
3036	Run the opative configuration .
3037	Ensures that the decorated function is a wrapped function .
3038	Decorate a function or class .
3039	Format a value .
3040	Clear the configuration .
3041	Bind a parameter to a Gin config .
3042	Return the value bound for a given binding key .
3043	Check if a function has a parameter .
3044	Get an argument spec from a function .
3045	Return a list of positional names for a function .
3046	Get all positional parameter names from a function .
3047	Get the default values for the given function fn .
3048	Return a context manager for a scope .
3049	Decorator for configurable methods .
3050	Return operative config string .
3051	Parse config file .
3052	Register a file reader .
3053	Parse a config file .
3054	Parse config files and bindings .
3055	Parse a config value .
3056	Finalize the configuration .
3057	Iterate over nested values .
3058	Iterate over ConfigurableReference objects .
3059	Set a constant .
3060	Convert enum values to constants .
3061	Return a list of selectors matching the given partial selector .
3062	Get all matches matching the given partial selector .
3063	Return the minimal selector .
3064	Convert search query to string .
3065	Parse the Retry - After value from the response header .
3066	Validate value .
3067	Return a property description as a dict .
3068	Validate and set the value .
3069	Return the thing at the given index .
3070	Initialize the object .
3071	Sets the default headers for the request .
3072	Check if the request is allowed .
3073	Get thing description
3074	Called when a message is received .
3075	Perform a POST request .
3076	Delete an action
3077	Start the TCP server
3078	Return the action description as a dictionary .
3079	Start the task .
3080	Marks the task as completed .
3081	Return the event description as a dictionary .
3082	Get IP address
3083	Get a list of IP addresses .
3084	Set the value .
3085	Notify an external update .
3086	Return a JSON - serializable representation of the thing .
3087	Set the href prefix
3088	Return a dictionary of property descriptions .
3089	Returns a list of all action descriptions .
3090	Returns a list of all event descriptions .
3091	Add a property .
3092	Remove a property
3093	Returns the value of the given property
3094	Returns a dictionary of all properties
3095	Sets the value of the given property
3096	Get an action by name and id .
3097	Add an event to the list .
3098	Add an available event .
3099	Perform action .
3100	Remove an action from the queue .
3101	Add an available action .
3102	Remove a subscriber .
3103	Add an event subscriber .
3104	Remove an event subscriber .
3105	Notify the status of a property
3106	Send an action to all subscribers .
3107	Notify about an event .
3108	Add annotations to the model .
3109	Execute an update query .
3110	Bulk insert .
3111	Insert a new record .
3112	Insert the given fields into the database .
3113	Build a postgres insert query
3114	Check if the field is a magical field .
3115	Get fields for upsert .
3116	On model save signal .
3117	On model delete signal
3118	Create an expression that is not None .
3119	Return a new HStoreValue .
3120	Return the SQL statement as SQL .
3121	Return a clone of this label .
3122	Add a join condition to the table .
3123	Check if a field is a HStoreField .
3124	Insert values into the database .
3125	Create a new HStore required constraint .
3126	Renames a constraint in a hstore table .
3127	Drop the required constraint for a given field .
3128	Returns the name of the required constraint for a given field .
3129	Returns the SQL create index .
3130	Create a command with the given commands .
3131	Returns the database base class .
3132	Prepare the database .
3133	Prepare value .
3134	Form the RETURNING statement
3135	Returns the SQL representation of the query .
3136	Rewrite insert .
3137	Rewrite the insert statement into the database .
3138	Rewrite insert nothing to insert
3139	Build conflict target string .
3140	Get the model field by name .
3141	Format field name .
3142	Format the value of a field .
3143	Create a unique constraint for a field .
3144	Rename a unique constraint
3145	Drop a unique constraint .
3146	Generate unique constraint name .
3147	Iterate over unique keys .
3148	Add a new condition .
3149	Returns the SQL representation of the table .
3150	Tdist95 conf level .
3151	Returns the variance of the samples of the pooled sample .
3152	Compute the TS - score between two samples .
3153	Check if two samples are significant .
3154	Sort a list of nodes by their parents .
3155	Generator of nqueens
3156	Play a board .
3157	Select the best child .
3158	Random playout .
3159	Filter benchmarks that are not compatible .
3160	Expand a benchmark name to a list of benchgroups .
3161	Generate string table .
3162	Initialize benchmarks .
3163	Returns the domain of the knot
3164	Fetch messages from channel .
3165	Parse posts .
3166	Fetch user information
3167	Fetch the items for the given category .
3168	Fetch the items from the RSS feed
3169	Setup command parser .
3170	Fetch bug items .
3171	Get bugs for a given date .
3172	Get comments for a bug .
3173	Retrieve bug history .
3174	Return a list of attachments .
3175	Get the notes for the given issue .
3176	Fetches merge requests from GitLab .
3177	Get the notes for a merge .
3178	Get the versions of a merge .
3179	Get all merges .
3180	Merge a merge .
3181	Get all versions of a merge .
3182	Merge a version .
3183	Get notes for an item .
3184	Get all emojis for the given item type .
3185	Get the emjis for a note .
3186	Calculate time to reset rate limit .
3187	Fetch items from GitLab .
3188	Update rate limit .
3189	Setup the backend command parser .
3190	Fetch messages for the given category .
3191	Generate a metadata id for a given item .
3192	Returns the number of members of a conversation
3193	Get information about a channel
3194	Get user information
3195	Setup the command parser
3196	Return the timestamp of the updated metadata .
3197	Parse buglist .
3198	Parse bug details .
3199	Parse bug activity .
3200	Logout the user .
3201	Returns the XML response of the bug .
3202	Get a list of bugs .
3203	Get bug information .
3204	Get the activity of a bug .
3205	Fetch events from the database .
3206	Fetches events for a given category .
3207	Get events for a given group .
3208	Get comments for a group event .
3209	Get rsvps for a group event .
3210	Fetch question items
3211	Fetch comments for question .
3212	Build a question object
3213	Get API questions
3214	Get HTML question .
3215	Get comments for a post .
3216	Parse the question container .
3217	Parses the answers of a given HTML question .
3218	Parse the number of HTML pages .
3219	Parse user info .
3220	Fetch items for a given category .
3221	Parse reviews .
3222	Fetch Gerrit messages .
3223	Get the version of the server .
3224	Get reviews for a given last item .
3225	Get the next item of a group .
3226	Executes a command .
3227	Execute command from archive .
3228	Execute a gerrit command .
3229	Setup the command parser
3230	Fetch information about an issue .
3231	Fetches an issue s attachments .
3232	Fetches messages for an issue .
3233	Fetch issues for an issue .
3234	Fetch user data
3235	Get user information .
3236	Issues an issue .
3237	Fetches an issue collection .
3238	Get the project path
3239	Fetch items from the API
3240	Get groupsio subscriptions
3241	Find the group id for the group
3242	Perform a GET request .
3243	Setup the command parser .
3244	Generate a UUID from a string .
3245	Fetch data from backend .
3246	Fetches files from archive .
3247	Find all backends in a given package .
3248	Fetches metadata for a given category .
3249	Fetch data from archive .
3250	Filter out classified data .
3251	Parse arguments .
3252	Set authentication arguments .
3253	Sets the arguments for the archive
3254	Set the arguments for the output
3255	Run the backend .
3256	Initialize the archive .
3257	Returns the timestamp of the updated metadata .
3258	Parse MBox from filepath .
3259	Fetch and parse all messages from the mailing list
3260	Copy the mbox to a temporary file .
3261	Validate the message .
3262	Convert a casedict message to a dict .
3263	Get a message from the file .
3264	Fetch items from the repository .
3265	Fetch items from repo
3266	Parse git log file .
3267	Set the path to the git repository .
3268	Setup the command parser
3269	Yields commit objects from the stream .
3270	Clone a repository .
3271	Returns the number of objects in the repository .
3272	Return True if this ref is detached .
3273	Update this repository .
3274	Fetch changes from the repository .
3275	Get the revision list for this repository .
3276	Log this repository .
3277	Show the contents of the repository .
3278	Fetches the contents of this repository .
3279	Read commits from a pack file .
3280	Update references .
3281	Discover refs for this repository .
3282	Update a ref .
3283	Executes a git command .
3284	Reads the stderr of the process .
3285	Executes git command .
3286	Fetch a list of tweets .
3287	Fetch items from the API .
3288	Get tweets from the API .
3289	Setup the command parser
3290	Fetch items from the catalog .
3291	Fetch data for a given category .
3292	Parse the hits returned by GoogleSearch .
3293	Fetch a list of keywords .
3294	Return the updated_at of an item .
3295	Determine the category for the metadata item .
3296	Fetch pull requests .
3297	Fetch repo info
3298	Get the reactions for an issue .
3299	Get the reactions for a given comment .
3300	Get issue assignees
3301	Get list of reviewers for a pull request .
3302	Get the list of pull commits for a given PR .
3303	Get reactions for a pull review comment .
3304	Get user information
3305	Get all reactions for an issue .
3306	List of issues .
3307	Get pulls for this repository .
3308	Return repository for this repository .
3309	Fetches the requested reviewers for the given PR .
3310	Get all the commits for a given PR .
3311	Fetch reactions for a given comment .
3312	Fetch user information .
3313	Get orgs for a user .
3314	Get rate limit .
3315	Get the rate limit of tokens .
3316	Choose the best API token to use .
3317	Check if rate limit is available .
3318	Update current rate limit .
3319	Initialize the metadata table .
3320	Store data in the archive .
3321	Retrieve an entry from the archive .
3322	Create an archive .
3323	Return a hashcode for the given uri and headers .
3324	Verify that the archive is valid .
3325	Load metadata from archive
3326	Returns the number of rows in the given table .
3327	Create an archive .
3328	Remove an archive .
3329	Search for archives .
3330	Search for archives .
3331	Search for files in directory .
3332	Check file type .
3333	Generate months between two dates .
3334	Convert an email message into a dictionary .
3335	Remove invalid XML characters .
3336	Convert XML to dict .
3337	Parse issues .
3338	Get a list of issues with the given date .
3339	Get information about an issue .
3340	Get a single user
3341	Make a request to Redmine .
3342	Fetch docker data
3343	Fetch data from repository .
3344	Retrieve a repository .
3345	Map custom fields to custom fields
3346	Return a dictionary mapping custom fields to their id .
3347	Parse issues .
3348	Get all issues from a URL .
3349	Get a list of issues from the API .
3350	Get all comments for an issue .
3351	Get the list of fields .
3352	Fetch items .
3353	Get Jenkins jobs
3354	Get all builds for a given job .
3355	Parse raw questions from raw response .
3356	Get questions from the server
3357	Setup the command parser
3358	Fetch page reviews
3359	Get the maximum date of reviews .
3360	Fetch pages from reviews API
3361	Get all pages of a namespace
3362	Get recent pages .
3363	Fetch messages for the given category .
3364	Parse messages .
3365	Filter a message by chats .
3366	Get all updates .
3367	Fetch all articles of a given category .
3368	Add offset to item .
3369	Parse the raw article .
3370	Fetch data from remote
3371	Fetch article data
3372	Fetch data from remote server .
3373	Fetch data from archive .
3374	Create HTTP session
3375	Sets up the rate limit handler .
3376	Sleep for rate limiting .
3377	Update rate limit from response .
3378	Parse a supybot log file .
3379	Retrieve supybot archives .
3380	List all supybot archives .
3381	Yield items from the stream .
3382	Parse supybot timestamp .
3383	Parse supybot message .
3384	Fetch topic items .
3385	Parse topics page .
3386	Get information about a topic .
3387	Post a post .
3388	Fetch items from the queue .
3389	Parse a JSON string representing tasks .
3390	Parse user output .
3391	Return a generator of all tasks in the repository .
3392	Get a list of transactions .
3393	Retrieve a list of user IDs
3394	Retrieve a list of phids .
3395	Make request to Conduit API .
3396	Generate a unique identifier for a metadata item .
3397	Parse the contents summary .
3398	Get contents of confluence query .
3399	Get a historical content .
3400	Parse the result of the measurement .
3401	Returns the URL for the capability of a service .
3402	Read capabilities from a URL .
3403	Read a string from a string .
3404	Parses the result of a measurement time series
3405	Build url .
3406	Get the elements of a complex type .
3407	Construct a GML schema from a list of elements .
3408	Get the URL to describe a feature type .
3409	Executor for complex_input
3410	Gets the movie list .
3411	Gets a list of tvs .
3412	Gets a list of movies .
3413	Retrieves information about a user .
3414	Gets a listing of alternative titles .
3415	Gets credits for the authenticated user .
3416	Gets a list of external ids for this user .
3417	Gets a list of keywords for the user .
3418	Gets recommendations for a user .
3419	Gets a list of release dates for this project .
3420	Returns a list of releases for this project .
3421	Gets translations for the current user .
3422	Gets a list of similar movies .
3423	Gets reviews for a user .
3424	Returns a list of changes for the current user .
3425	Gets upcoming data for a user .
3426	Gets the current playing state .
3427	Gets popular items .
3428	Returns a list of the top rated items .
3429	Returns a list of account states .
3430	Updates the rating for this user .
3431	Gets movie credits .
3432	Gets TV credits .
3433	Get information about a credit .
3434	Get TV data .
3435	Retrieves information about the server .
3436	Gets the movie list .
3437	Get information about this session .
3438	Get watchlist movies .
3439	Creates a new token .
3440	This endpoint is used to validate tokens with a login .
3441	Create a new session .
3442	Creates a new guest session .
3443	Gets the rated movies for the guest session .
3444	Gets the current status of a project .
3445	Create a list of users .
3446	Remove an item .
3447	Clear a list of users .
3448	Gets the content rating for this user .
3449	Gets similar items .
3450	Gets the on - air on the air .
3451	Get information about a particular season .
3452	Get credits for a series .
3453	Gets a list of external ids for a given season .
3454	Get information about a series .
3455	Get credits for a series .
3456	Get a list of external ids for this series .
3457	Set attributes to values .
3458	Get movie data .
3459	Get information about a collection .
3460	Gets tv data .
3461	Gets a single person .
3462	Gets company information .
3463	Get a single keyword .
3464	Gets a single item from the API .
3465	Normalize a string .
3466	Return the number of ngrams in a list of refs .
3467	Return the number of ngrams in a reference .
3468	Rfcc function .
3469	Align source and target blocks together .
3470	Get all descriptors in a module .
3471	Register JSON descriptors .
3472	Register a new version .
3473	Print string s to stdout .
3474	Check if the given descriptor is a descriptor .
3475	Return a dictionary representation of this object .
3476	Return the coordinate of this descriptor .
3477	Return the atomic SA of i .
3478	The surface area of the surface .
3479	Create a molecule from a molecule .
3480	Create descriptor from json .
3481	Return a new molecule with missing values .
3482	Return a new molecule with missing values .
3483	Iterate over the keys and values .
3484	Return the dict as a dict .
3485	Returns the value of this field .
3486	Decorator for debugging
3487	Synchronization decorator .
3488	Display a progress message .
3489	Prints a message to stdout .
3490	Fail an error .
3491	Get a temporary file .
3492	Set a temporary file .
3493	Delete all temporary files .
3494	Return fixed path .
3495	Return a list of valid parameters for a given method .
3496	Merge the parameters of a method .
3497	Add options to the parser .
3498	Terminate the queue .
3499	Add a task to the queue .
3500	Wait for all workers to terminate .
3501	Report progress .
3502	Read S3 keys from environment variables .
3503	read keys from command line
3504	Read S3 keys from the config file .
3505	Initialize S3 keys
3506	Connect to S3
3507	List all buckets in S3
3508	Perform an S3 walk on a directory .
3509	Return a list of all files in basedir
3510	Expands source files .
3511	Upload a single file to S3 .
3512	Put files into the target directory .
3513	Create bucket .
3514	Update the privilege of an object .
3515	Print all the files in S3
3516	Download single file from S3 .
3517	Get files from source to target .
3518	Copy a single file to the target directory .
3519	Copy files from source to target .
3520	Delete all files in source
3521	Walks a directory and returns a list of relative paths
3522	Sync files from source to target directory .
3523	Calculate the MD5 hash of a file .
3524	Returns the md5 of the file .
3525	Ensure that the target directory exists .
3526	Check the MD5 of a remote key
3527	Return True if path matches filter_path .
3528	Walks an S3 directory tree .
3529	Filter list of objects .
3530	Get the privilege of a file
3531	Lookup an object in S3
3532	Read a chunk from a file .
3533	Upload a file to S3 .
3534	Verifies the size of the downloaded file .
3535	Write chunk to file .
3536	Copy source to target .
3537	Run the command .
3538	Validate arguments .
3539	Pretty print objects .
3540	List buckets .
3541	Create bucket .
3542	Upload S3 files to S3 .
3543	Get target directory .
3544	Handler for listing files .
3545	Dsync_files handler
3546	Copy files from source to target
3547	Move files from source to target .
3548	Delete S3 files .
3549	File size handler
3550	Print total size .
3551	Match date .
3552	Match time .
3553	Match delta .
3554	Check that value is a dict .
3555	Discover gateways .
3556	Listen to messages .
3557	Read from hub .
3558	Push data to all registered callbacks .
3559	Get the encryption key .
3560	Report an exception .
3561	Include pyramid .
3562	Ensure log handler exists .
3563	Get a request object from the stack .
3564	Initialize the rollbar .
3565	Decorator to run a lambda function .
3566	Report a message to Rollbar .
3567	Search for items .
3568	Create a log logger .
3569	Build person data .
3570	Add Lambda context data to data dictionary .
3571	Build request data .
3572	Check if the frame is included in the project s root .
3573	Build request data .
3574	Build server data .
3575	Build payload from data .
3576	Main entry point .
3577	Compose a Hangul character .
3578	Decompose a letter into a string .
3579	Checks if a string contains a Jongsung letter .
3580	Attaches a word with josa .
3581	Check if node is inside an Except handler .
3582	Check if the node is inside a Lambda function .
3583	Get all elements of a node .
3584	Check if an assignment is in an exception .
3585	Checks if the given node is a super .
3586	Check if the given node is an error .
3587	Checks if the given node is a default argument .
3588	Checks if the given node is a function decorator .
3589	Check if the given node is an ancestor name .
3590	Assign the parent to the given node .
3591	Decorator for checking messages .
3592	Collect fields from a format string .
3593	Get the argument of a call .
3594	Check if the given node inherits the exception module .
3595	Check if an error is of a given type .
3596	Check if a function is decorated with a property .
3597	Check if a function is decorated with the given qnames .
3598	Tries to find a TryExcept node .
3599	Check if node is from fallback block .
3600	Get the exception handlers for the given exception .
3601	Checks if the given node has an exception .
3602	Check if the given class is abstract .
3603	Safely infer an inferred node .
3604	Return the type of the node .
3605	Check if a function is registered in Singledispatch .
3606	Checks if the node is postponed evaluation enabled .
3607	Returns a list of fully qualified names .
3608	Get the absolute name of an import .
3609	Return a string representation of tree definitions .
3610	Write the graph of the graph to file .
3611	Visitor for imports .
3612	Visitor for importfrom node .
3613	Check the position of a import .
3614	Record a import from a module .
3615	Check import order .
3616	Check if module import is relative .
3617	Record imported module .
3618	Check for deprecated modules
3619	Check if a preferred module is present .
3620	Report external dependencies .
3621	Filter dependencies graph .
3622	Get the default options .
3623	Insert the default options in sys . argv
3624	Return whether or not the node is visible .
3625	Get the callbacks for a node .
3626	Visit a node .
3627	Check the consistency of the messages .
3628	Check if the function is valid .
3629	Check if a datetime is a datetime . time .
3630	Check if the mode argument is valid .
3631	Handle a message .
3632	Display the messages as JSON
3633	Return the title of a node .
3634	Set default options .
3635	Check if a node should be displayed .
3636	Add a class
3637	Get all ancestors of node .
3638	Get all instances of the given klass node .
3639	Extract classes from the graph .
3640	Leave the project .
3641	Visit import from node .
3642	Generate class diagram .
3643	Return a list of DiaDefs in the project .
3644	Check if an owner is ignored .
3645	Return a list of names that are similar to owner .
3646	Return True if the given node has no member .
3647	Check if a statement has a parent of the given type .
3648	Returns True if name is used as variadics .
3649	Check if a variable is in a variadic argument .
3650	Visit an attribute .
3651	Check if a function call is assigned .
3652	Check for uninferable calls .
3653	Handle invalid unary operand types .
3654	Iterate over the interfaces of the given node .
3655	Build a project representation from a list of files .
3656	Set unique identifier .
3657	Set the type of the function .
3658	Visitor for AssignName node .
3659	Handle assigning attribute types .
3660	Visitor for import node .
3661	Process importfrom node .
3662	Check if module is a standard module .
3663	Handle imported module .
3664	Get ANSI code .
3665	Colorize a message .
3666	Register reporterers .
3667	Handle a message
3668	Display a layout
3669	Handle a message .
3670	Write an open graph .
3671	Write a node .
3672	Write an edge between two nodes .
3673	Check if a format method is valid .
3674	Process a non - raw string token .
3675	visit a section
3676	Visit the evaluation section .
3677	visit a table
3678	Create a default table
3679	Add a renamed message .
3680	Register messages from a checker .
3681	Register a new message
3682	Check if the message ID matches the given symbol .
3683	Raise an invalid message .
3684	Raise an InvalidMessageError if the message is not in the same time .
3685	Returns a list of message definitions .
3686	Get message display string .
3687	Print help message .
3688	List all available messages .
3689	Run pylint extensions
3690	Return the number of CPUs on the system .
3691	Report messages in a report .
3692	A context manager to fix import paths .
3693	Load plugin modules .
3694	Load plugin configuration .
3695	Set an option .
3696	Register a checker .
3697	Disable reporters .
3698	Turn on Python 3 .
3699	Return a list of all checkers in this container .
3700	Get checker names .
3701	Prepare checkers .
3702	Expand modules .
3703	Set current module .
3704	Check an astroid module .
3705	Evaluate the evaluation .
3706	Print help message .
3707	Print full documentation .
3708	List messages .
3709	List checker groups .
3710	Wrap textwrap to line_len
3711	Get the module and frame id of a node .
3712	Safely decode a line .
3713	Check if base name is in blacklist .
3714	Register plugins in a directory .
3715	Return a comment from a string .
3716	Format option value .
3717	Format a section
3718	Format an ini file .
3719	Insert a child at the given index .
3720	Append a child to this node .
3721	Returns the list of parents of this node .
3722	Apply layout to stream .
3723	Get table content .
3724	Yield the content of the given layout .
3725	Collects the lines of a module .
3726	Handle an ignored message .
3727	Register a report .
3728	Create a section of report .
3729	Add stats to self . stats .
3730	Get the name of a setter property .
3731	Returns the property of the given node .
3732	Return True if the return statement is a constant .
3733	Return a list of possible exception types .
3734	Check for message emission
3735	Process a module .
3736	Process comments .
3737	Returns True if stmt is a future import .
3738	Returns True if statement is in a For branch .
3739	Return an overridden method .
3740	Get extra info for unpacking .
3741	Detects a global scope .
3742	Return True if name is assigned to the given name .
3743	Mark a node as consumed .
3744	Visit global variables .
3745	Check if a node is in a local class scope .
3746	Check if there is a homonym in the upper function scope .
3747	Check for unpacking .
3748	Check all metaclasses .
3749	Get all packages in a directory .
3750	Install pylint .
3751	Run this module .
3752	Report similarities .
3753	Run similarity .
3754	Append a stream to the list of linesets .
3755	Compute the Sims .
3756	Display a list of similar lines .
3757	Find common common lines .
3758	Iterate over the common simulations .
3759	Iterate over the stripped lines .
3760	Make the index of the stripped lines .
3761	Check if a definition is equivalent to a definition .
3762	Check if two attributes are equal .
3763	Check if original arguments have a default value .
3764	Check if two methods have different parameters .
3765	Safely infer a call result from the caller .
3766	Mark a node as accessed .
3767	Check if node is a class .
3768	Check that the mro is consistent .
3769	Check that the base classes are valid .
3770	Check function definition .
3771	Check if the function is a super call .
3772	Handle a method call .
3773	Check that node is in slots .
3774	Visit the name node .
3775	Check that all members have been accessed .
3776	Check that the class is abstract .
3777	Check method signature .
3778	Check if a method parameter is mandatory .
3779	Check if the node is raising .
3780	Check if the exception context is valid .
3781	Check function call .
3782	Display the report .
3783	Check if node is typing namedtuple .
3784	Check if node is an enum class .
3785	Check if a class is a dataclass .
3786	Initialize the parser .
3787	Check that a class is too many of its ancestors .
3788	Check if a class is in the current class .
3789	Update if node .
3790	Check that a condition is too many boolean expressions .
3791	Check docstring .
3792	Format the namedtuples in a template .
3793	Return True if the token is a trailing comma .
3794	Check if the given node is an actual if
3795	Check if the node is simplified .
3796	Check if stop iteration is inside generator .
3797	Check if exception is inherit from StopIteration .
3798	Check if the next function is in generator next call .
3799	Check that the given node is inside of a nested block .
3800	Identify types that are duplicated .
3801	Check for duplicate types .
3802	Check if a comparison node is in a chain .
3803	Checks if the given node is an or - or or - or - or - or - or - or - or or - or - or or - or - or - or - or or - or - or - or - or - or - or - or - or - or - or - or - or - or - or - or - or - or - or - or - or - or - or - or - or - or - or - or - or - or - or - or or - or - or - or - or - or - or - or - or - or - or - or - or - or -
3804	Check that the return statements are consistent .
3805	Check if a function returns a return statement .
3806	Check for loops .
3807	Check if the output format is available .
3808	Run Diadefs .
3809	Write packages in diagram .
3810	Write classes in diagram .
3811	Set the printer .
3812	Set the VCG printer .
3813	Return True if the current version can be emitted .
3814	Format the help message .
3815	Returns a dict with the PYTHONPATH
3816	Lint a file .
3817	Run the pylint .
3818	Recursively collect cycles in the graph .
3819	Get the source code for this block .
3820	Generate a dot file
3821	Format a section .
3822	Register a message with a managed message .
3823	Disable a message .
3824	Enable a managed message .
3825	Return the symbol for a message
3826	Check if a message is enabled .
3827	add a message
3828	Print Pylint documentation .
3829	Print the documentation of a checker .
3830	Get the indentation length of a line .
3831	Generate indentation hint line .
3832	Return the indentation of the token .
3833	Handle line start .
3834	Return a tuple of indentation strings for the indentation level .
3835	Hanging indentation after a bracket .
3836	Return a continuation .
3837	Push a token onto the stack .
3838	Process a new line .
3839	Check for keyword parentheses .
3840	Check if a type annotation is valid .
3841	Check the spacing of the tokens .
3842	Check if the token is surrounded by spaces .
3843	Check if node is a statement .
3844	Check for multiple statements .
3845	Check line .
3846	Check indentation level .
3847	Determine if a node is in an iterator .
3848	Check if node is a conditional import .
3849	Check if node is a builtin .
3850	Handle indexing - exceptions .
3851	Visit an attribute .
3852	Visitor for ExceptHandler .
3853	Check if an exception occurs .
3854	Find the pylintrc file .
3855	Validate value .
3856	Expand the default value of an option .
3857	Match a long option .
3858	Register an option provider .
3859	Set provider option .
3860	Set an option to the given value .
3861	Generate a configuration file .
3862	Load config file
3863	Load configuration from command line .
3864	Add a section to the command line .
3865	Print help message .
3866	Load default values from options .
3867	Returns the name of an option .
3868	Get the definition of an option .
3869	Iterate over options sorted by section .
3870	Check if the given function is a method call .
3871	Return True if node is a complex format string .
3872	Visit logging modules .
3873	Add logging .
3874	Visit import node .
3875	Check if the function is a logging method .
3876	Check if the format string is valid .
3877	Check if a node is in a loop .
3878	Find a break loop node .
3879	Return True if loop exits early .
3880	Get property classes and names from BUILTIN .
3881	Determine the name type of a function .
3882	Report stats by type stats .
3883	Check if the given node is defined by the decorators .
3884	Check if a call is a single argument call .
3885	Check for starred assignments .
3886	Check for nonlocal and global variables .
3887	Check if the function is abstract .
3888	Check if the statement is on a loop .
3889	Check if a node is in a loop .
3890	Open the linter .
3891	Handle pointless string statements .
3892	Check if a lambda node is valid .
3893	Add message for assert on tuple .
3894	Handle duplicate keys .
3895	Check that node is unreachable .
3896	Check if the node is in the case .
3897	Check if an argument is a reversed sequence .
3898	Check if an assignment is valid .
3899	Check if a name is valid .
3900	Check the docstring of a node .
3901	Check if a literal is a valid literal .
3902	Parse a sub - graph .
3903	Parse a sub - graph .
3904	Visit the given module .
3905	Add a checker .
3906	Walk an astroid .
3907	Add a relationship between two objects .
3908	Get a relationship for a given object .
3909	Get the list of attributes of a node .
3910	Return a sorted list of methods in a node .
3911	Add an object to the graph .
3912	Return a list of class names .
3913	Return a list of class definitions .
3914	Return class by name .
3915	Return a list of module objects .
3916	Return the module with the given name .
3917	Get module by name
3918	Add a node to the node s dependencies .
3919	Delete the grant .
3920	Query for the query
3921	Get user by username and password .
3922	Get access token .
3923	Store token in session .
3924	Set a new grant .
3925	Get a specific client .
3926	Prepare a request .
3927	Initialize the extension .
3928	Create a remote app .
3929	Make a request to a URL .
3930	Authorize to OAuth2 .
3931	Handle OAuth 1 response .
3932	Handle OAuth2 response .
3933	Handle an authorized response .
3934	Decorator for authorized_response
3935	Hash a token .
3936	Create a client with the given token .
3937	Make an OAuth client .
3938	Temporarily restore OAUTHLIB_INSECURE_TRANSPORT .
3939	Perform an authorization request .
3940	Decorate a request token handler .
3941	Get client secret .
3942	Get request token secret .
3943	Get access token from request .
3944	Get the default realms for a client .
3945	Get realms from request token .
3946	Get the redirect uri for a request token .
3947	Get the RSA key for a request .
3948	Validate client key .
3949	Validate request token .
3950	Validate an access token .
3951	Validate the timestamp and nonce .
3952	Validate request redirect_uri .
3953	Validate realms .
3954	Validate a verifier .
3955	Verify a request token .
3956	Verify the realms of a token .
3957	Save access token .
3958	Save the request token .
3959	Save a verifier .
3960	Default error uri for provider .
3961	Perform an authorization request .
3962	Verify a request .
3963	Get client credentials from request .
3964	Check if a client is authenticated .
3965	Authenticate a client .
3966	Authenticate a client .
3967	Get the original scopes of the refreshed token .
3968	Confirm that the refresh token is valid .
3969	Get the default redirect uri for a client .
3970	Get the default scopes for a client .
3971	Invalidate a grant .
3972	Save an authorization code .
3973	Save a Bearer token .
3974	Validate a Bearer token .
3975	Validate client id .
3976	Validate a grant .
3977	Validate grant type
3978	Validate a refresh token .
3979	Validate response type
3980	Validate scopes .
3981	Validate the username and password .
3982	Revoke an access token .
3983	Update QQ API request data .
3984	Convert keys to strings
3985	Change weibo header .
3986	Register a remote app with the given name .
3987	Create a remote application .
3988	Extract params from request .
3989	Convert text to bytes .
3990	Decode a base64 - encoded string .
3991	Create a response object .
3992	Return cached clients .
3993	Add a remote app to the registry .
3994	Add a new remote application .
3995	Check if an exception was found .
3996	Verify that the certificate is successful .
3997	Callback to load a private key .
3998	Check if a private key is invalid .
3999	Try to load a private key .
4000	Check if revoked
4001	Check that all revoked certificates are revoked .
4002	Create a certificate request .
4003	Create a certificate .
4004	Create a decorator that will be called when a flag is passed .
4005	Load verify locations .
4006	Set the password callback .
4007	Open a certificate chain file .
4008	Open a certificate file .
4009	Set an X509 certificate .
4010	Add an extra chain certificate to the context .
4011	Use a private key file .
4012	Use a private key .
4013	Load client certificates .
4014	Set verify depth .
4015	Load a temporary DH file .
4016	Set the cipher list .
4017	Set client certificates .
4018	Add a client CA to the context .
4019	Set the callback for the servername callback .
4020	Enables or disables the specified profiles .
4021	Set the callback for the next NPN selector .
4022	Set the list of protocol protocols .
4023	Set the callback for the ALPN select callback .
4024	Set the OCSP callback .
4025	Set the callback for the OCSP server .
4026	Set a callback for the OCSP client .
4027	Set SSL context .
4028	Get the server name .
4029	Set the host name of the TLS server .
4030	Receive data from the socket .
4031	Receive data from the socket .
4032	Read data from the BIO .
4033	Renegotiate the SSL connection .
4034	Shutdown the server .
4035	Get the cipher list .
4036	Get client CA list .
4037	Set shutdown state .
4038	Return a random random string of the server .
4039	Get a random random client .
4040	Return the master key for this session .
4041	Export a keying material .
4042	Get a new SSL session .
4043	Get the cipher name .
4044	Get the current cipher bits .
4045	Get the current cipher version .
4046	Get the protocol version name .
4047	Get the next protocol negotiation message .
4048	Set the list of protocol protocols .
4049	Get the ALPN protocol message .
4050	Create a new BIO .
4051	Convert bio to string .
4052	Set the ASN1 time for the given boundary .
4053	Convert a timestamp to an ASN1_TIME string .
4054	Get an elliptic curve by its name .
4055	Dump publickey to PEM format .
4056	Load public key from buffer .
4057	Sign data .
4058	Verify a certificate signature .
4059	Dump an X509 CRL into a string .
4060	Convert the private key to a cryptography key .
4061	Generate a new RSA key .
4062	Check if the key is valid .
4063	Load elliptic curves from lib
4064	Load elliptic curves
4065	Convert this curve to a private key .
4066	Return the DER representation of this certificate .
4067	Get the components of the certificate .
4068	Get the short name of this extension .
4069	Get extension data .
4070	Convert this request to a cryptography certificate object .
4071	Set the public key for this request .
4072	Get the public key .
4073	Get the Subject name of this request .
4074	Add extensions to the request .
4075	Get all the extensions in this request .
4076	Verify that the certificate is valid .
4077	Convert this certificate to a cryptography object .
4078	Set the X509 version .
4079	Get the public key for this certificate .
4080	Set the private key .
4081	Sign the given key with the given digest .
4082	Get the signature algorithm .
4083	Returns the digest for the given digest name .
4084	Set the serial number of the certificate .
4085	Get the serial number of this certificate .
4086	Set the time that the timestamp is after the given amount .
4087	Set the time that the timestamp is before the given amount .
4088	Check if the session has expired .
4089	Get the issuer name .
4090	Sets the issuer name .
4091	Get the name of the certificate .
4092	Sets the certificate s subject .
4093	Add multiple X509 extensions to this certificate .
4094	Get the extension at the given index .
4095	Add a certificate to the store .
4096	Add a CRL to the store .
4097	Set the time of the certificate .
4098	Initialize the store context .
4099	Return an X509StoreContextError from the context .
4100	Verify the certificate .
4101	Set the serial number of this certificate .
4102	Get the serial number of this certificate .
4103	Set the CRL reason .
4104	Return the reason of the CRL .
4105	Set the revocation date .
4106	Convert this certificate to a cryptography list .
4107	Get the revoked CRLs .
4108	Get the issuer for this CRL .
4109	Sign a CRL .
4110	Export a CRL .
4111	Return the type of the object .
4112	Set the CA certificates .
4113	Export this certificate .
4114	Sign a key .
4115	Verify a key .
4116	Encode the SPK as a base64 string .
4117	Get the private key .
4118	Set the private key .
4119	Get an exception from an error queue .
4120	Convert text to bytes .
4121	Create a function to print a token .
4122	Get metadata for service .
4123	Return an iterator over all issues in the board .
4124	Get the annotations for a card .
4125	Get a list of boards
4126	Get list of lists for a board .
4127	Get cards for a list .
4128	Get comments for a card
4129	Build the URL for the API .
4130	Get data from GitHub
4131	Convert a link field to a dictionary .
4132	Query for issues .
4133	Get pull requests .
4134	Process remote issues .
4135	Returns the default value for the given key .
4136	Get templates from config file
4137	Validate the service configuration .
4138	Check if an issue is included .
4139	make a table
4140	Execute an oracle command
4141	Get an integer value .
4142	Pull issues from the server .
4143	Get data from a URL .
4144	Get collection from url
4145	Find the unique UUID for the given issue .
4146	Merges the given field into the local task .
4147	Build overrides for UDAs .
4148	Parse sprint string
4149	Get authentication credentials .
4150	Compute RUGE scores for multiple sequences .
4151	Calculate p - values for a gene .
4152	Corrects the p - values according to alpha .
4153	Compute the z - score of the data .
4154	Plot a heatmap .
4155	Adjust spines and adjust ticks accordingly .
4156	Create argument parser .
4157	Adds command line parser for preranked gene list
4158	Adds a sub - command parser to reproduce the output figure .
4159	Adds the command line parser for enrichr .
4160	Compute enrichment score .
4161	Generate ranking metric tensor .
4162	Ranking metric .
4163	Compute the p - value of the gsea distribution .
4164	Compute gsea significance .
4165	Returns a pandas DataFrame containing the names and descriptions of each mart .
4166	Get dataset data
4167	Returns a pandas DataFrame with the available attributes
4168	Get filters for the dataset
4169	Query Biomart database
4170	Run GSEA algorithm .
4171	Run SsgSEA analysis .
4172	Run pre ranking on a set of genes .
4173	Run GSEA Replot .
4174	Set the number of cores to use .
4175	Load gene sets .
4176	Get list of library names .
4177	Download genrichr library .
4178	Initialize heatmat .
4179	save results to outdir
4180	Load gene expression data
4181	Run GSEA analysis .
4182	Run GSEA analysis .
4183	Run each sample per mu .
4184	Run ssgsea for each gene
4185	Save results to a file .
4186	Parse GSEA output file .
4187	Run Enrichr on a set of gene sets .
4188	Parse gene sets
4189	Parse genes .
4190	sends the given gene list to the server
4191	Check if gene list is recognized
4192	Get the background data
4193	Run Enrichr
4194	Add a cube filter to the script .
4195	Add a sphere filter to the filter script .
4196	Generate a torus filter .
4197	Generate a plane horizontally .
4198	Generate the Hires script for a cube .
4199	Get color values from a color file .
4200	Check if var is a list
4201	Make a list of variables .
4202	Write filter XML to a file .
4203	Generate LS3 Loop XML .
4204	Merge vertices .
4205	Function to close holes .
4206	Split vertices on non manifold faces .
4207	Create a filter for mismatched Borders .
4208	Translates the given script to the given value .
4209	Rotate the script by angle .
4210	Scale the script to the given value .
4211	Returns a function that can be used as a cylinder .
4212	Convert a script to a cylinder .
4213	Bend script .
4214	deform to curve
4215	Convert a vertex color to a tex file .
4216	Convert a mesh to faces .
4217	Generate a uniform mesh filter .
4218	Generate a screened surface filter .
4219	r Voronoi algorithm .
4220	Adds all faces to the script .
4221	Writes Visual Filter to HTML .
4222	Adds a conditional function to the script .
4223	Adds a vertical function to the script .
4224	Executes a cylindrical script .
4225	Runs spherical vertically .
4226	Returns the filter XML .
4227	Rename the filter .
4228	change the layer
4229	Duplicate a layer .
4230	Delete the first layer in the script .
4231	Handle an error .
4232	Start filter script .
4233	Adds a new layer to the stack .
4234	Remove a layer from the stack .
4235	save to script_file
4236	Run a meshlab server script .
4237	Main function of the main function .
4238	Generate Hausdorff distance filter .
4239	Generate a Poisson disk filter .
4240	Adds an element to the script .
4241	Generate clustered vertex subsampling filter .
4242	Add a flat plane filter to the script .
4243	Returns the parametrization filter string .
4244	Generate a voronoi filter for the specified region .
4245	Measure the Topological Measures of the script .
4246	Parse the ml_log into a dictionary .
4247	Parse hausff log .
4248	Generate an XML filter
4249	Write voronoi filter to script .
4250	Rrainbow script .
4251	Return the inverse atan2 function .
4252	Computes the cross product of two vectors
4253	Multiply a scalar .
4254	Add new vertex attribute to script .
4255	Flip faces and selected faces .
4256	Generate point sets .
4257	Generates a Ttaubin filter script .
4258	Writes depth filter to script .
4259	function to sort polylines
4260	Measure topology .
4261	Measure all geometries within a file .
4262	Measure dimension .
4263	Convert filename to lowercase .
4264	Patch request class with max_content_length .
4265	Return the config for the given upload set .
4266	Configure upload sets .
4267	The configuration of this upload .
4268	Returns the URL for the uploaded file .
4269	Return the path to a file .
4270	Check if extension is allowed .
4271	Resolves a conflict between two files .
4272	Get version information from vprof file .
4273	Remove duplicates from a list .
4274	Get the difference between two objects .
4275	Format the object count .
4276	Trace memory usage .
4277	A list of code events that have been processed .
4278	Return the number of object overhead .
4279	Compute memory overhead .
4280	Profile the package .
4281	Profile the module .
4282	Profile the function .
4283	Profile profiling .
4284	Get all modules in a package .
4285	Runs a function in a separate process .
4286	Return the type of a run object .
4287	Initialize the module .
4288	Initialize the package .
4289	Initialize the function .
4290	Replace the run_object with the given arguments .
4291	Sample stats .
4292	Insert stack into stack
4293	calculate sample count
4294	Format the tree .
4295	Format the call tree .
4296	Return a dictionary of information about the object .
4297	Profile the module .
4298	Profile the object .
4299	Transform profiling statistics to a sorted list of tuples .
4300	Returns a dictionary containing the information about the object .
4301	Returns the profiling module .
4302	Profile the object .
4303	Initialize the database .
4304	Show the guestbook .
4305	Add a new entry to the database .
4306	Handler for profiling .
4307	Start a web server .
4308	Handle the root directory .
4309	Handle other files .
4310	Handle GET request .
4311	Handle POST request .
4312	Send a response .
4313	Check if module_path is a standard directory .
4314	Record a line .
4315	Yields lines that are not in standard directory .
4316	Update the heatmap .
4317	Given a source code and a list of lines return a list of lines that should be skipped .
4318	Retrieve the contents of the code package .
4319	Format a heatmap .
4320	Profile a module .
4321	Profile the object .
4322	Run profiling on a run .
4323	Run a function and return the result .
4324	Predict probabilities of X .
4325	Predict log probabilities of X .
4326	Fit the model
4327	Count the vocabulary .
4328	Sorts the vocabulary into an index .
4329	Limit features to the given vocabulary .
4330	Fit the vocabulary
4331	Apply the transformation to the vocabulary .
4332	Return a scikitScaler object .
4333	Fit the model to the model .
4334	Predict for X .
4335	Fit the model using Spark LinearRegression .
4336	Fit the model .
4337	Fit the model
4338	Compute the score of a transformation .
4339	Fit the model .
4340	Compute the score of an estimator using a scorer .
4341	Train K - means clustering .
4342	Predict the KMeans .
4343	Predict for X .
4344	Check if an RDD is in expected_dtype .
4345	Fit the vocabulary .
4346	Compute the mean and variance of a dataset .
4347	Fit SVD to X
4348	Apply the transformation to the SDD .
4349	Yield chunks of an iterator .
4350	Given an iterator yield a block of dtypes .
4351	Block an RDD .
4352	Apply fn to each RDD .
4353	The shape of this RDD .
4354	Convert this RDD into a numpy array .
4355	Apply a function to each column .
4356	Return whether or not the given permission is set .
4357	Return True if path is only root write .
4358	Check if the configuration file is valid .
4359	Read config from file .
4360	Run a command as a shell .
4361	Execute a command and return stdout and stderr .
4362	Execute a command over ssh
4363	Validate data .
4364	Get the headers for this request .
4365	Get the response body .
4366	Build URL for HomeAssistant .
4367	Get the IFTTT URL .
4368	Return the body of a packet .
4369	Print discovery information .
4370	Scan for devices .
4371	Execute the device .
4372	Send confirmation message .
4373	Called when the device is pushed .
4374	Execute the given device .
4375	Scan for devices
4376	Convert a transaction to a Transaction object .
4377	Find the path to the ledger file .
4378	Install compatibility .
4379	Get long description .
4380	Create a precalculatedTextMeasurer from a JSON file .
4381	Return the default text measurer .
4382	Generate a badge .
4383	Generator of supported characters .
4384	Given a list of characters and a list of encodings yield them .
4385	Returns a mapping of characters to length .
4386	Write a JSON file to a JSON file .
4387	Convolve 2D image .
4388	Create a Gaussian kernel from a 1D Gaussian kernel .
4389	Convert image to grayscale .
4390	Entry point for pyssim .
4391	Compute the SSIM value .
4392	Compute the SSIM .
4393	Destroy the node
4394	Change code version .
4395	Get the status of the node .
4396	Print the status of the server to stdout .
4397	Returns the node associated with the given connection .
4398	Try to bind to the server .
4399	Called when a new connection is received .
4400	Handle incoming message
4401	Helper function to send a command to the server .
4402	Check if the given node should be connected .
4403	Try to connect to a single node .
4404	Called when the connection is connected .
4405	Called when an outgoing message is received .
4406	Called when a connection is disconnected .
4407	Add a node to the transport .
4408	Remove a node from the graph .
4409	Send a message to a node .
4410	Destroy this node .
4411	Put an item into the queue .
4412	Put an item into the heap .
4413	Get an item from the heap .
4414	Acquire a lock .
4415	Checks if a lock is acquired .
4416	Release a lock .
4417	Decorator for checking methods .
4418	Decorator for views that checks if the request header is required
4419	Set connection parameters
4420	Create Elasticsearch indexes .
4421	Migrate aggregate indexes
4422	Remove metadata from a report .
4423	Send aggregate reports to Kafka .
4424	Extracts the XML data from a ZIP archive .
4425	Parse an aggregate report .
4426	Write a list of Frensic reports to a CSV file
4427	Parse an aggregate report .
4428	Get the capabilities of an imap server
4429	Save aggregate reports to a directory .
4430	Generate a zip archive of results .
4431	Sends an email to the given host .
4432	Save aggregate reports to Splunk
4433	Save forensic reports to Splunk
4434	Decode base64 encoded string .
4435	Get the base domain .
4436	Get the hostname of an IP address .
4437	Convert human timestamp to datetime .
4438	Download a GeoLite country from the GeoLite database
4439	Get information about an IP address .
4440	Convert an Outlook message to a string .
4441	Convert string to list
4442	Parse a report file .
4443	Drain the connection .
4444	Publish a message .
4445	Publish a request .
4446	Publish a message .
4447	Subscribe to a subject .
4448	Unsubscribe from a connection .
4449	Send a ping to the server .
4450	Select next server .
4451	Process an error message .
4452	Handle an error .
4453	Return connection command string .
4454	Process pings .
4455	Process a message .
4456	Process connection info .
4457	Process init connection .
4458	Flushes all pending data .
4459	Read from the connection .
4460	Perform coactivation on a set of studies .
4461	Decode images .
4462	Load features from an array .
4463	Load features from images .
4464	Ppearson correlation .
4465	dot product of images
4466	Select features based on feature selection .
4467	Get a list of studies for each region .
4468	Get the order of the features in the dataset
4469	Classify regions using a set of masks .
4470	Fit a classifier using a classifier .
4471	Fit the classifier .
4472	Set class weight .
4473	Fit the classifier using cross validation .
4474	Fit the dataset using sk_classifier
4475	Calculate the average of a set of regions .
4476	Get random voxels from dataset
4477	Returns the top words of the model .
4478	Pearson function .
4479	FDR function .
4480	Load activations from a file .
4481	create the image table
4482	Get a list of studies .
4483	Add a list of features to the feature table .
4484	Returns feature names
4485	Returns a dictionary of feature counts for each feature
4486	Load a dataset from a pickle file .
4487	Save feature table to file .
4488	Get image data .
4489	Get feature data .
4490	Returns the ordered names of the given features .
4491	Get ids of features above threshold
4492	Search for features matching a regular expression .
4493	Return a list of ids matching the expression .
4494	Convert DataFrame to CSR .
4495	Mark a function as deprecated .
4496	Transform foc .
4497	Convert foci to matrix .
4498	Apply a transformation .
4499	Mask the image .
4500	Get image mask .
4501	Load images from filenames .
4502	Save image to file
4503	Set logging level .
4504	Expand an address into an address .
4505	Return a list of tokens .
4506	Parse an address .
4507	Given a list of labels and a list of values return the distance between each label and the given values .
4508	Convert a dictionary to namedtuple .
4509	Get ticker price .
4510	Get a pandas DataFrame of tickers .
4511	Get bulk news data
4512	Perform a HTTP request .
4513	Get bearer information .
4514	Make a request to bearer .
4515	Return a list of all tracks in the album .
4516	Get a single artist .
4517	Get a list of albums .
4518	Return the top tracks of an artist .
4519	Return the artist related artists .
4520	Returns a list of artists .
4521	Get a specific category .
4522	Get playlists for a category .
4523	Get a list of categories .
4524	Get a list of featured playlists .
4525	Get a list of new releases .
4526	Get recommendations .
4527	Returns a list of the follow artists or users with the given ids .
4528	Get albums .
4529	Get all albums .
4530	Get the total albums .
4531	Return the artist related artists .
4532	Get the current playing track .
4533	Get current player .
4534	Get all available devices .
4535	List recently played tracks .
4536	Replace tracks in a playlist .
4537	Reorder tracks in a playlist .
4538	Create a new playlist .
4539	Get playlists .
4540	Get all tracks in this album .
4541	Get all tracks .
4542	Generate OAuth2 URL .
4543	Get album .
4544	Get a single artist .
4545	Get a single track .
4546	Get a user .
4547	Get albums .
4548	Retrieve artists .
4549	Search for tracks .
4550	Convert a string to an ID .
4551	Decorator to check if a function has an attribute .
4552	Create an instance from a client .
4553	Generate the OAuth2 URL for a client .
4554	Return a dict of attributes to be sent to the API .
4555	Get parameters as a string .
4556	Build a list of PlaylistTrack objects .
4557	Get all tracks in this playlist .
4558	Resume playback .
4559	Transfer a device to a device .
4560	Create a new instance from the URL .
4561	Get the status of the element .
4562	Convert the month to a string .
4563	Update the code URLs .
4564	Check if the current version is greater than the newer version .
4565	Determine if the current branch is a dev version .
4566	Check if the current version is deprecate .
4567	Backup the configuration .
4568	Restore the status of the backup file .
4569	Determine if the line should be ignored .
4570	Process the options .
4571	Extract base from an element .
4572	Format decoded data .
4573	Get the HTTP status code .
4574	Get the HTTP status code .
4575	Check if the given domain is valid .
4576	Check if the given domain is a subdomain .
4577	Check IP address .
4578	Check if given IP is a valid IPv4 range .
4579	Check if the given URL is valid .
4580	Load the configuration .
4581	Print out a random time .
4582	Check if a URL is a valid URL .
4583	Check if the current URL is a URL .
4584	Print the header .
4585	Determine if a file is in the mining database .
4586	Run the domain .
4587	Runs the given URL .
4588	Colorify the logo .
4589	Formats the domain from the host file .
4590	Extract domain from file .
4591	Returns the file list .
4592	Returns the URL of the file .
4593	Switch the current state .
4594	Get the expiration date .
4595	Parse the status file .
4596	Get the structure file .
4597	Create a directory .
4598	Delete all uneeded directories .
4599	Set the path to the configuration file .
4600	Load the configuration file .
4601	Install the production configuration .
4602	Install the iana configuration .
4603	Install the public suffix configuration .
4604	Install the directory structure file .
4605	Merge configuration values .
4606	Load the upstream configuration .
4607	Split the version into parts .
4608	Check the status of two versions .
4609	Check if the current version is cloned .
4610	Handle the non - existant index .
4611	Returns the path to the analytic directory .
4612	Returns the path to the unified file .
4613	Generate a status file .
4614	Check if the domain should be produced .
4615	Add the extension to the database .
4616	Load the public database .
4617	Remove special characters from element .
4618	Create a hierarchical hierarchy from an element .
4619	Load the iana database .
4620	Returns the referer for the given extension .
4621	Yields the extension and referer .
4622	Update the iana - domains database .
4623	Get a list of links from the history .
4624	Retrieve the information from the backup file .
4625	Backup the mined informations .
4626	Add files to the database .
4627	Remove the file from the mining database .
4628	Return the list of files in the mining database .
4629	Process the mining logic .
4630	Get content of file .
4631	Write content to file .
4632	The whois command .
4633	Update the expiration date .
4634	Handle referer not found .
4635	Initiates the before header .
4636	Construct a header object .
4637	Print the header .
4638	Returns the data constructor .
4639	Extract the size from the header .
4640	Colorify data .
4641	Write the data to a JSON file .
4642	Return the data .
4643	Save the output file .
4644	Calculate the day and hours .
4645	Format the execution time .
4646	Get the list of files to delete .
4647	Return the list of databases to delete .
4648	Delete all files .
4649	Hash the contents of the file .
4650	Hash the data .
4651	Returns the hash of the file .
4652	Executes the given command .
4653	Remove a key from the main dictionnary .
4654	Renames a key .
4655	Merge two dictionaries into a single dictionary .
4656	Write to a JSON file .
4657	Write the configuration to a yaml file .
4658	Fix the path .
4659	Write data to the file .
4660	Reads the file content .
4661	Return a sorted list of strings .
4662	Merges the main dict into the main dict .
4663	Returns a list of strings that match the regex
4664	Match the regex
4665	Return the replacement string .
4666	Increment the status .
4667	Calculate the percentage of the current status .
4668	Log the status .
4669	Checks if the given URL is valid .
4670	Check if a domain is valid .
4671	Check if the element is a subdomain .
4672	Return valid status .
4673	Reformatical error .
4674	Retrieve the database .
4675	Backup the inactive database .
4676	Return the current timestamp .
4677	Return the content of the database .
4678	Check if the database is present .
4679	Retrieve the whois database .
4680	Backup the datbase database
4681	Check if the user is in the database .
4682	Return True if the item is older than the database .
4683	Get the expiration date from the database .
4684	Add this element to the database .
4685	Manage travis permissions .
4686	Run travis .
4687	Query the nslookup index for the given domain or IP address .
4688	Connect to a whois server .
4689	Get status code .
4690	Return the referer .
4691	Get the current object
4692	List all standard library paths .
4693	Return list of standard package names .
4694	Yield lines of unused import .
4695	Find the unused import module name .
4696	Yield the line numbers of a star star .
4697	Produce a message with undefined name .
4698	Yield line numbers of unused variable .
4699	Return a generator that yields duplicate line numbers .
4700	Create a dictionary from a list of messages
4701	Check source .
4702	Extract package name from a line .
4703	r Check multiline imports .
4704	Is a multiline statement?
4705	Filter from from_module .
4706	Break a line into an import .
4707	Filter the source code .
4708	Return a dictionary of messages grouped by line number .
4709	Remove undefined names from a line .
4710	Filter duplicate keys .
4711	Check if a line has a key
4712	Return True if value is a literal or name .
4713	Generate line numbers for a pass line .
4714	Filter lines that are useless pass .
4715	Get the indentation of a line .
4716	Return the end of a line .
4717	Fix pyflakes .
4718	Split a comma separated string into set .
4719	Check if a file is a Python file .
4720	Check if filename is an exclude file .
4721	Find files recursively .
4722	Entry point for autoflake .
4723	Reads the lease response payload .
4724	Writes the lease to output_stream .
4725	Writes this request payload to output_stream .
4726	Reads the CancelResponsePayload from the input stream .
4727	Create a Name object .
4728	Read digest from stream .
4729	Write the digest to an ostream .
4730	Create a Digest object .
4731	Reads the application specific information .
4732	Write the application specific information to the file stream .
4733	Create an application specific information .
4734	Reads the Derivation parameters from the input stream .
4735	Write this parameter to output_stream .
4736	Reads the request payload .
4737	Writes the request payload to output_stream .
4738	Reads the payload from the input stream .
4739	Writes the response payload to output_stream .
4740	Reads the payload from the input stream .
4741	Writes the output to an output stream .
4742	Reads the payload from the input stream .
4743	Processes a request .
4744	Builds an error response .
4745	Processes a template attribute .
4746	Retrieves attributes from a managed object .
4747	Gets the attribute of a managed object .
4748	Sets attributes on a managed object .
4749	Sets an attribute on a managed object .
4750	Checks if the given policy is allowed for the given object .
4751	Writes the payload to an output stream .
4752	Create a new Secret object .
4753	Sets a configuration setting .
4754	Load server configuration file .
4755	Process bind parameter .
4756	Process the result value .
4757	Reads the value from the stream .
4758	Write this integer to an ostream .
4759	Validate the value .
4760	Reads a big integer from the stream .
4761	Write the KMIP value to the stream .
4762	Ensure that the value is an integer .
4763	Validate the enumeration .
4764	Reads the value from the stream .
4765	Write the boolean value to the stream .
4766	Writes the boolean value to ostream .
4767	Validate that the value is a boolean .
4768	Reads an interval from the stream .
4769	Validate the interval .
4770	Key wrapping data .
4771	Set key wrapping data .
4772	Validate the key .
4773	Validate the secret data .
4774	Validates that the data is valid .
4775	Convert attribute name to tag tag .
4776	Convert an attribute tag to its name .
4777	Get bit mask from enumerations .
4778	Get enumerations from a bit mask
4779	Check if a bit mask is a bit mask .
4780	Reads the keypair request payload .
4781	Writes the template attribute to the output buffer .
4782	Reads the payload from the input buffer .
4783	Writes the key to the output buffer .
4784	Reads the AttributeRequest payload .
4785	Writes the attribute payload to the output buffer .
4786	Reads the attribute list payload .
4787	Writes the attribute data to the output buffer .
4788	Get all json files .
4789	Scan the policy files and save them to disk .
4790	Starts the operation policy file monitor .
4791	Get a certificate from a connection .
4792	Returns the extended key usage value for a certificate .
4793	Get common names from a certificate .
4794	Get client identity from a certificate .
4795	Reads the CreateRequestPayload from the input buffer .
4796	Writes the object into the given output buffer .
4797	Reads the CreateResponsePayload from the input buffer .
4798	Writes the response payload to the output buffer .
4799	Convert a Pobjects object to a PObject .
4800	Reads the payload from the input stream .
4801	Reads a DeriveKeyRequest payload from the input buffer .
4802	Writes the object to an output buffer .
4803	Check if an attribute is supported by this layer .
4804	Is the attribute deprecated?
4805	Returns whether the given attribute is applicable to the given object type .
4806	Returns True if attribute is a multi - value set .
4807	Get a valid value from the configuration file .
4808	Reads the CheckResponse payload .
4809	Write this CheckResponse payload to output_stream .
4810	Reads the attribute reference from the input buffer .
4811	Writes the attribute reference to the file .
4812	Reads the attributes from the KMIP file .
4813	Write the attributes to the KMIP stream .
4814	Reads the nonce from the input stream .
4815	Writes the nonce to the output_stream .
4816	Reads the username and password from the input stream .
4817	Write the username and password to output_stream .
4818	Reads the device credential from the input stream .
4819	Write the device information to an output stream .
4820	Reads the credential from the input stream .
4821	Writes the credential data to output_stream .
4822	Reads the MAC signature key information from the input stream .
4823	Writes the MACSignatureKey to output_stream .
4824	Reads the keywrapping data .
4825	Writes the message to an output stream .
4826	Reads the keywrapping specification .
4827	Writes the keywrapping specification to output_stream .
4828	Reads the extension information from the file stream .
4829	Write the extension information to the file stream .
4830	Create an extension information .
4831	Reads the revocation reason from the stream .
4832	Write the revocation reason to ostream .
4833	Validate the revocation code
4834	Reads the object defaults from the input buffer .
4835	Writes the object defaults to the given buffer .
4836	Reads the object defaults from the input buffer .
4837	Writes the defaults field to the output buffer .
4838	Reads the RNG parameters from the input buffer .
4839	Write the KMIP parameters to an output buffer .
4840	Reads the profile information from the input buffer .
4841	Write the profile information to the output buffer .
4842	Writes the validation information to an output buffer .
4843	Reads the CapabilityInformation object .
4844	Write the KMIP to an output buffer .
4845	Stop the server .
4846	Starts the connection service .
4847	Reads the LocateRequest payload .
4848	Write this template to an output buffer .
4849	Reads the located payload .
4850	Writes the located items to the output buffer .
4851	Create a new symmetric key .
4852	Creates an asymmetric key pair .
4853	Generate a message authentication code .
4854	Encrypts a string using the specified encryption algorithm .
4855	Encrypts a string using a symmetric encryption algorithm .
4856	Encrypts an asymmetric key .
4857	Decrypt an asymmetric key .
4858	Generate an RSA key pair .
4859	Derives a key from this key .
4860	Create RSA private key .
4861	Verifies a signature .
4862	Reads the SignResponsePayload from the input stream .
4863	Write the signature to the output stream .
4864	Reads the request payload .
4865	Converts the protocol version value to a KMIP Version .
4866	Reads the protocol version from the input stream .
4867	Writes the protocol version to output_stream .
4868	Read credentials from the input stream .
4869	Write the authentication struct to output_stream .
4870	Reads the poll request payload from the input stream .
4871	Reads the certificate from the stream .
4872	Write the certificate to ostream .
4873	Authenticate with the SLUGS API .
4874	Reads the archive response payload .
4875	Writes the archive response payload to output_stream .
4876	Runs the session .
4877	Reads the RekeyResponse payload from the input stream .
4878	Checks if the given conformance clause is supported .
4879	Derive a key from an object .
4880	Get attributes .
4881	Get attribute list .
4882	Query the server .
4883	Sign the data .
4884	Opens the client connection .
4885	Closes the connection
4886	Create an operation policy .
4887	Creates a new key pair .
4888	Registers a managed object .
4889	Rekey this key .
4890	Derive a key from the specified object type .
4891	Search for managed objects .
4892	Check the status of an account .
4893	Gets a managed object .
4894	Get the attributes of a managed object .
4895	Activate the managed object .
4896	Revokes the given revocation reason .
4897	Perform the MAC authentication .
4898	Builds the cryptographic parameters from a dictionary .
4899	Build an encryption key .
4900	Build a MACSignatureKeyInformation object from a dictionary .
4901	Builds a keywrapping specification .
4902	Builds common attributes .
4903	Build the name attribute .
4904	Reads the query request payload .
4905	Writes the query request payload to the output buffer .
4906	Write this image to an output buffer .
4907	Reads the GetAttributes response payload .
4908	Writes the response payload to an output buffer .
4909	Get a single entry from a group .
4910	Get a named group by name .
4911	Get all entry points for a group .
4912	Load the object .
4913	Create an entry point from a string .
4914	Start livereload
4915	Generate project files .
4916	Generate controller file .
4917	Generate action code .
4918	Generate a form .
4919	Generate model .
4920	Generate macros .
4921	Create a directory recursively .
4922	Rewrite a project to a new file .
4923	Returns a string representation of a timesince value .
4924	Check if url is empty
4925	Encode the given object .
4926	Decode a URL safe signature .
4927	Wrap a function as a JSON response .
4928	Returns the absolute URL for the given endpoint .
4929	Load configuration from environment variables .
4930	Signin user
4931	Get the current user
4932	Create Flask application .
4933	Register Jinja environment .
4934	Register blueprints .
4935	Register error handler .
4936	Register pre - request hooks .
4937	Write a DataFrame to a CSV file .
4938	Read a DataFrame from a CSV file .
4939	Serializes a dataframe to the specified writer .
4940	Deserialize a Dataframe from a reader .
4941	Update this instance from a dataframe .
4942	Update this data type from raw data .
4943	Get the contents URL for the download .
4944	Adds a new data type from a dataframe .
4945	Adds a new data type from raw data .
4946	Opens the intermediate dataset .
4947	Read the intermediate dataset contents as binary .
4948	Read the intermediate dataset contents as text .
4949	Load the data from the stream into a pandas DataFrame .
4950	Get an intermediate dataset .
4951	Get all experiments in a workspace .
4952	Get all datasets in a workspace .
4953	Get a dataset
4954	Decorator to publish a function to a workspace .
4955	Decorator to publish a service .
4956	Add annotations to a function .
4957	Decorator to define a return type .
4958	Decorator to add an attachment to a function .
4959	Find all globals in the code .
4960	Return a copy of the Pen .
4961	Try to lookup a color .
4962	Draws the rectangle .
4963	A cubic Berstein extrema function .
4964	cubic Berstein function
4965	Build tree choices .
4966	Returns a function that takes a list of command options .
4967	Register a function to be used as a hook .
4968	Compose a static tree .
4969	Initialize the cache .
4970	Clear the cache .
4971	Get an entry from the cache .
4972	Update an entry in the cache .
4973	Set an entry in the cache .
4974	Initialize the cache .
4975	Resolve a tree i18n tree alias .
4976	Check if current app is admin .
4977	Calculates the depth of an item
4978	Get current item for given tree alias .
4979	Returns URL for given site tree item .
4980	Initialize the site tree .
4981	Get the attribute of the current page .
4982	Get the ancestor level of the current item .
4983	Generates a menu for the given tree .
4984	Check if the user can access the item
4985	Build breadcrumbs for the given tree
4986	Initialize tree .
4987	Render the children tree .
4988	Return the list of children of an item .
4989	Update the has_children attribute of the tree item
4990	Filter items based on current navigation type .
4991	Get the ancestor item of a given base item
4992	Climber tree climber
4993	Resolve a variable .
4994	Render a site tree .
4995	Render the children of a menu template .
4996	Renders a breadcrumb .
4997	Render a site menu .
4998	Render tree items .
4999	Create a template for a tag .
5000	Get the URL name for a model .
5001	Reregisters the tree admin .
5002	Handle redirects .
5003	Redirect to the next item .
5004	Redirect to the admin page .
5005	Override this method to override the redirect method .
5006	Add the parent field to the form .
5007	Get model instance .
5008	Move an item in the tree .
5009	Save item to tree .
5010	Returns the urls for the tree admin .
5011	Dump model tree to response .
5012	Create a tree object
5013	Create a new tree item
5014	Import the app s site module .
5015	Get model class by name .
5016	Create a config from a mapping .
5017	Create a Config from a pyfile .
5018	Create a Config from a TOML file .
5019	Create a Config instance from an object .
5020	Create a ZipkinAttrs object for a span .
5021	Create HTTP headers for a new span .
5022	Get the current trace context .
5023	Starts the logging context .
5024	Stop the trace .
5025	Add binary annotations to the logging context .
5026	Add a SA annotation .
5027	Override the current span name .
5028	Create an Endpoint .
5029	Creates a new Endpoint with a new service name .
5030	Build a new span .
5031	Encode a list of spans .
5032	Convert a Span to a protobuf Span .
5033	Convert a hex id to a signed integer .
5034	Return the Zipkin Span for the given kind .
5035	Convert an Endpoint object to a Zipkin Endpoint object .
5036	Convert annotations to zipkin . Annotation objects .
5037	Create an annotation object .
5038	Create a binary annotation .
5039	Create an Endpoint .
5040	Copy an endpoint with a new service name .
5041	Build a list of annotations .
5042	Build a list of binary annotations .
5043	Create a new span .
5044	Convert a thrift span to bytes .
5045	Encodes a list of thrift objects
5046	Detect span version and encoding .
5047	Convert a list of spans into a list of strings .
5048	Push zipkin attributes to a thread .
5049	Encodes a Span into a thrift span .
5050	Create json endpoint
5051	Encodes a span into a protobuf .
5052	Decode spans .
5053	Convert a thrift endpoint to an Endpoint object .
5054	Decodes thrift annotations into a dictionary .
5055	Convert binary annotations into tags and remote endpoint .
5056	Decode a thrift span into a Span .
5057	Convert a trace ID to a string .
5058	Convert an unsigned long integer to lower hex .
5059	Writes a long value to the stream .
5060	Make sure that the day is greater than 10 .
5061	Set the transaction_code for a bank tag .
5062	Set theiph_id field in the tag .
5063	Parse the TNR tag .
5064	Parse the text into a tag instance .
5065	Parse a file or file - like object .
5066	Join lines in a string .
5067	Return the JSON representation of the response .
5068	Warn if a ratelimit is exceeded .
5069	Make a request to the API .
5070	Get information about a bot .
5071	Get bots .
5072	Read and decode the term .
5073	Write a message to the pipe .
5074	Closes the streams
5075	Decode a binary term .
5076	Encodes a term .
5077	Add a multicast address to the network .
5078	Send all pending messages .
5079	Set the callback for the remote serviceHello callback .
5080	Stops the server .
5081	Clear all local services .
5082	Search for remote services .
5083	Create a SOAP message
5084	Discover the logging .
5085	Return the manager for the tagged item .
5086	Get all child fields of a model
5087	Get all parentalToMany fields of a model .
5088	Save the model to the database .
5089	Create a Model instance from serialized data .
5090	Validate unique checks .
5091	Check if the form has changed .
5092	Return a new address with a valid checksum .
5093	Generate the checksum of this address .
5094	Parse command line arguments .
5095	Create an argument parser .
5096	Prompt for a seed .
5097	Validate signature fragments .
5098	Get a private key .
5099	Get the key for the given address .
5100	Create a key iterator .
5101	Create a sponge from the given index .
5102	Convert a sequence of trits into the internal state .
5103	Squeeze a sequence of trits .
5104	Transform the state .
5105	Get digests by index .
5106	Get list of private keys .
5107	Prepare a multisig transfer command .
5108	Add trits to left
5109	Convert an integer into a list of trits .
5110	Add two trits .
5111	Helper function for full add_trits
5112	Output a seed .
5113	Execute find transactions command .
5114	Get the inputs of the device .
5115	Get new addresses .
5116	Get transfer command .
5117	Promote a transaction .
5118	Replay a bundle .
5119	Send a transfer command .
5120	Send trytes .
5121	Resolves an adapter from a URI .
5122	Send a request .
5123	Log a message .
5124	Send an HTTP request .
5125	Interpret the response .
5126	Seed the response for a given command .
5127	Add a digest to the sponge .
5128	Get the multisig address .
5129	Generate an iterator over the keys .
5130	Creates an address from a given digest .
5131	Generate an address from a key iterator .
5132	Return a list of transaction objects .
5133	Iterate over the addresses that are used by the given seed .
5134	Given a list of transaction hashes return a list of bundle IDs .
5135	Check for ASCII Trytes codec .
5136	Get codec info .
5137	Encodes the input into a binary string .
5138	Decode a trytes sequence .
5139	Find addresses in Tangle .
5140	Add a route .
5141	Create a Transaction object from a string .
5142	Return a JSON - compatible representation of this transaction .
5143	Get the trytes of the signature .
5144	Set the new is_confirmed value .
5145	Get all messages in the transaction .
5146	Return a list of Trytes in this transaction .
5147	Group transactions by address .
5148	Discover all commands in a package .
5149	Execute a request .
5150	Apply filter .
5151	Get the URL for a job .
5152	Returns a list of validation errors .
5153	Check if the bundle is valid .
5154	Validate the transaction .
5155	Given a list of groups return a list of errors .
5156	Return the error message for a group signature .
5157	Traverse a bundle by its hash .
5158	Start an IPython REPL .
5159	Return a random seed .
5160	Return the digest of the key fragment .
5161	Sign the input transaction .
5162	Pretty printer .
5163	Absorb the given trits .
5164	Squeeze a sequence of trits into the given length .
5165	Add context to exception .
5166	Validates a security level .
5167	Increment the legacy tag .
5168	The tag of this transaction .
5169	Add a transaction to the bundle .
5170	Finalize the bundle .
5171	Sign the transaction inputs .
5172	Sign the input at the given start_index .
5173	Add the input transactions to the bundle .
5174	Convert value to standard unit .
5175	Decompress G1 compressed form .
5176	Inverse of prime field inv .
5177	Create an instance from a JSON file .
5178	Return a list of words that match the category .
5179	Find the synonym for the given word .
5180	Expand abbreviations in text .
5181	Split the description .
5182	Returns a list of category names .
5183	Generate a random colour .
5184	Plot the component .
5185	Create a LEGEID from a name .
5186	Create a Timescale instance from a name .
5187	Generate a striplog .
5188	Create a Decorator from an image file .
5189	Create a legend from a CSV file .
5190	Returns a string representation of this Decorator .
5191	Returns the maximum width of the table
5192	Get a Component instance
5193	Return the value of the given attribute .
5194	Get component of this legend .
5195	Plot all objects in the list .
5196	Construct a Component from text .
5197	Return a summary of the component .
5198	Deprecated .
5199	Process a row of text .
5200	Parse a string into a dictionary .
5201	Return True if self is strict False otherwise .
5202	Returns a sorted list of unique vertices .
5203	Create a list of Interval objects from a set of values .
5204	Clean longitudinal data .
5205	Read intervals from a Petrel file .
5206	Build a list of intervals from a dictionary .
5207	Create a strip from a CSV file .
5208	Create a colormap from an image file .
5209	Create a component from a log .
5210	Create an instance from a LAS3 string .
5211	Create an Interval object from a string .
5212	Return a copy of this striplog .
5213	Export to a CSV file
5214	Create a Lithology section
5215	Plot the legend .
5216	Get data for a given field .
5217	Extract data from a log file .
5218	Return a list of indexes matching the given search_term .
5219	Find overlapping intervals .
5220	Find all gaps in self .
5221	Prune the strip .
5222	Anneal strip .
5223	Return a copy of this interval with the given components .
5224	Return a new striplog with the union of this striplog .
5225	Return a striplog with the intersection of this striplog .
5226	Merge overlapping pieces .
5227	Plot a histogram .
5228	Invert the striplog .
5229	Crop the striplog .
5230	Set the quality of the curve .
5231	Return the color name from a hex string .
5232	Read log likelihood from file .
5233	Get field name .
5234	Get all jobs .
5235	Parse a job HCL into a dictionary .
5236	Update a token .
5237	Get all allocated allocations .
5238	Fail a deployment .
5239	Pause a deployment .
5240	Get the health of a deployment .
5241	Drain a node .
5242	Drain a node .
5243	Get an eligible node .
5244	List files .
5245	Get a file from a file .
5246	Get information about a file .
5247	Join an agent .
5248	Update multiple servers .
5249	Force - leave a node .
5250	Get a list of nodes .
5251	Get all evaluations .
5252	Get all namespaces .
5253	Register a job .
5254	Plan a job .
5255	Dispatch a job .
5256	Revert a job .
5257	Set a stable job .
5258	Deregisters a job .
5259	Get current configuration .
5260	Delete a peer .
5261	Get all deployments .
5262	Get a random value from an object .
5263	Get a random mutator .
5264	Get a string from a string .
5265	Fuzz a list of objects .
5266	safe version of safe_unicode
5267	Run the server .
5268	Stop the PJFServer .
5269	Generates a custom HTML file
5270	A context manager to serve a testcase .
5271	Apply decorator to the given object .
5272	Spawns a PJF command .
5273	Get the output of the process .
5274	Finish the process and return the output .
5275	Closes the process .
5276	Start a worker .
5277	Run fuzzer on an object
5278	Decorator to encode JSON objects .
5279	Generate random string .
5280	Build the grammar .
5281	Build the query string
5282	Build a random value .
5283	Build an OptGraph .
5284	build the reference
5285	Build a random GAR .
5286	Shutdown the process .
5287	Run and monitor the process .
5288	Start the process .
5289	Returns a random float .
5290	Add a definition to the rule group .
5291	Add a definition to a category .
5292	Generate a GramFuzz object .
5293	Recursively fuzzing the elements of an element .
5294	Returns a fuzzed version of the instance .
5295	Returns fuzzed data
5296	Returns a function that will decorate the decorated function with the given function .
5297	Handle SIGTERM signal .
5298	Quit the command .
5299	Pause the command .
5300	Resume paused commands
5301	Stops the running process .
5302	restart the process
5303	Get a list of Skype events .
5304	Set the mood for the user .
5305	Set user avatar
5306	Get metadata about a Skype URL
5307	Add a contact to Skype .
5308	Fetch a user from Skype
5309	Get a list of bots .
5310	Get a bot by id
5311	Search for a Skype user
5312	Get a list of requests for this user .
5313	Create an instance from raw data .
5314	Merge self into self .
5315	Add an object to the cache .
5316	Handle a sync state call .
5317	Reads the token file
5318	Writes the token to disk .
5319	Verifies an authentication token
5320	Refresh a Skype token .
5321	Get user s ID
5322	Authenticates with Skype Token
5323	Synchronize all endpoints with the presence docs .
5324	Check if a user is valid
5325	auth token
5326	Authenticate to Skype
5327	Configures the messaging service
5328	Ping the user
5329	Get recent conversations
5330	Create a new chat .
5331	Create a new thread
5332	Extract user id from url
5333	Return the id of a chat to id .
5334	Exhaust the given function returning an iterator .
5335	Convert text to unicode .
5336	Detect handler for text .
5337	Parse frontmatter text .
5338	Return the metadata as a dict .
5339	Load a YAML file .
5340	Export metadata to YAML .
5341	Export metadata to JSON .
5342	Match pattern .
5343	Return the items in the string .
5344	Return a list of sub - lists that match i .
5345	Replace pattern with newstart .
5346	A list of Argument objects .
5347	Return a list of lists matching the pattern .
5348	Create a trie from a list of strings .
5349	Convert a trie to a regular expression .
5350	Return start and stop indices .
5351	Insert a string at index .
5352	Partition a character by its character .
5353	Returns the list of spans of the given type .
5354	Shrinks all spans within rmstart and rmstop .
5355	Insert one or more spans .
5356	Number of nesting levels .
5357	Return the shadow of this object .
5358	Return the extended link shadow .
5359	Return a dictionary that maps type_to_spans .
5360	Pretty - print the object .
5361	List of Parameter objects .
5362	List of parser functions .
5363	List of Template instances .
5364	A list of WikiLink objects .
5365	A list of Comment objects .
5366	A list of external links .
5367	A list of sections .
5368	A list of tables .
5369	Returns a list of WikiList objects .
5370	List of tags .
5371	Yield spans of the given type .
5372	Return a list of all ancestors of the document .
5373	Return the parent of this wiki .
5374	Return the mode of a list
5375	Get an argument by name .
5376	Return the canonical name .
5377	Remove the first of the arguments from the arguments list .
5378	Remove duplicate arguments .
5379	Set an argument .
5380	Get an argument by name .
5381	Check if an argument has the given name and value .
5382	Delete an argument by its name .
5383	Convert a CRS code to a string .
5384	Find an ellipsoid by name
5385	Load CRS from URL .
5386	Create a GeoJSON object from a file .
5387	Convert epsg code to CRS object
5388	Convert ESR code to CRS object
5389	Convert a CRS code to a CRS object .
5390	Create a CRS object from an unknown text .
5391	Write record to out .
5392	Read VLR from data stream .
5393	Returns a list of GeoTiffKeys from a list of VLR objects .
5394	Parse geotiff keys .
5395	Returns the signedness of an extra dimension .
5396	Return the ID for an extra dimension type .
5397	Create a new PointRecord from another point record .
5398	Copy fields from another record .
5399	Append zeros if needed
5400	Return a set of all dimensions
5401	Create a new dataset with zeros .
5402	Read points from a stream .
5403	Decompress a compressed compressed buffer .
5404	The x - axis of the dataset
5405	Returns the y - axis of the data
5406	Return the Z dimension of the image .
5407	Add an extra dimension .
5408	Write the point record to out_stream .
5409	Write the data to a file .
5410	Write the data to a file .
5411	Build a dictionary of point formats .
5412	Build an unpacked numpy dtype from point formats dimensions .
5413	Convert numpy dtype to point format .
5414	Returns the minimum file version for a point format .
5415	Checks if a point format ID is compatible with the given file version .
5416	Returns a list of vlrs matching the given type .
5417	Returns a list of vlrs that match the given type .
5418	Read num_to_to_read from data_stream .
5419	Check if point format id has the same point format .
5420	Check if all points have the same dtype .
5421	Check if the file signature is correct .
5422	Reads the header from the stream .
5423	Read VLRList from file .
5424	Read points from the stream .
5425	Read points from the stream .
5426	Read the internal waveform packet from the stream .
5427	Read evlrs from file .
5428	Warn if the stream is at the given position .
5429	Open a file - like object .
5430	Read the contents of a las file .
5431	Create a LasData object from header
5432	Create a LasData object .
5433	Convert source_las to PointRecord .
5434	Merge a list of las files .
5435	Write the contents of a las to disk .
5436	Returns a datetime object representing the creation date .
5437	sets creation date
5438	Returns the minimum values of the mesh .
5439	Set the min value .
5440	The maximum values of the mesh .
5441	Set the maximum values .
5442	Return the scales of the mesh .
5443	The offsets of the mesh .
5444	Returns the major and minor version of the file .
5445	Convert old_header to new_header .
5446	Unpack source_array from source_array to dtype .
5447	Add sub_field_array to array .
5448	Remove dimensions from point format that are not present in point format .
5449	Returns a dictionary with all sub - fields as keys .
5450	The number of extra bytes in this image .
5451	Check if the image has a waveform packet .
5452	Example entrypoint .
5453	Calculate the CRC of a command .
5454	Print hex data .
5455	Verify the checksum of a response .
5456	Return list of set bits
5457	Generate a query .
5458	Example demo .
5459	Connect to the server .
5460	Start monitoring .
5461	Disarm the device .
5462	Clear the alarm .
5463	Turn on output .
5464	Run the keep - alive command .
5465	Monitor status .
5466	Close the socket .
5467	Purge the database .
5468	Guess file type .
5469	Get the file id for the given entity .
5470	Load a notebook from the database .
5471	Create a notebook model from the database record .
5472	Get a directory .
5473	Convert file_records to file_model
5474	Create a directory model from database record .
5475	Create file model from database record .
5476	Save a notebook to the database .
5477	Save model to file .
5478	Renames a file
5479	Delete a file .
5480	Ensure user exists .
5481	Remove a user from the database .
5482	Create a directory in the database .
5483	Check if a user is in a directory .
5484	Delete a directory .
5485	Check if a directory exists .
5486	List files in a directory .
5487	List directories in a directory .
5488	Returns true if the file is in the given api_path .
5489	Select files .
5490	Return the default fields for files .
5491	Get a file from the database .
5492	Get a file from the database
5493	Get file id
5494	Check if a file exists .
5495	Rename a directory .
5496	Save a file .
5497	Generate a list of notebooks .
5498	Purge remote checkpoints .
5499	Generate a list of checkpoints from the remote engine .
5500	Generate a dictionary of notebooks .
5501	Reencrypt a row .
5502	Re - encrypt the content of a user .
5503	Derive a single Fernet key from a given password .
5504	Derive a fallback key from a list of passwords .
5505	Create a Fernet encryption factory .
5506	Memoize a function with a single argument .
5507	Get the name of a column .
5508	Convert a row of fields to a dict .
5509	Convert a row of fields to a dictionary of fields .
5510	Save a checkpoint to the database .
5511	Create a checkpoint from a file .
5512	Delete a checkpoint .
5513	Get checkpoint content .
5514	Get a list of checkpoints for a path .
5515	Move the remote checkpoints to a new path .
5516	Delete all checkpoints at path .
5517	Purge remote checkpoints .
5518	Resolves the given API path .
5519	Add prefix to model .
5520	Return a function that dispatches the given path .
5521	Return a function that dispatches the given mname .
5522	A decorator that dispatches old_path to new_manager .
5523	Called when the manager changes .
5524	Get a single file or directory .
5525	Normalize API path .
5526	Split the api path into the name and name of the path .
5527	Encode a notebook as base64 .
5528	Reads a base64 - encoded notebook .
5529	Decode bytes from base64 .
5530	Decode base64 from base64 .
5531	Return a list of all directories in a path .
5532	Decorator to handle path outside root .
5533	Create a user in the database .
5534	Split a list of models into directories and files
5535	Recursively walk the directory tree .
5536	Return an iterator over the files in the given manager .
5537	Yields all files with content .
5538	Reencrypt all users .
5539	Reencrypt a single user .
5540	Unencrypt all users .
5541	Unencrypt a single user .
5542	Create a temporary alembic . ini file .
5543	Upgrade an alembic database .
5544	Sanitize block data .
5545	Queue an embed instance .
5546	Load instances from a list of ids .
5547	Insert an instance .
5548	Load all the instances of the embeds .
5549	Validate data .
5550	Show admin page .
5551	Convert to JSON
5552	Hide authenticated fields .
5553	Remove fields from the request .
5554	Get the published version of the article .
5555	Get publishable queryset .
5556	Get publishable queryset .
5557	Return True if the field is not null .
5558	Validates a widget .
5559	Validates a zone
5560	Check if id is a valid UUID .
5561	Returns the user s permissions .
5562	Modify the user s permissions .
5563	Validate author .
5564	Save the zone
5565	Get the data as a dictionary .
5566	Prepare data .
5567	Render the template .
5568	Get settings .
5569	Execute Facebook callback .
5570	Get integration settings .
5571	Update integration settings .
5572	Signup user .
5573	Create a tag from a list of strings .
5574	Render a zone .
5575	Save the featured image .
5576	Save a subsection .
5577	Get the extension
5578	Returns the URL of the medium .
5579	Save image .
5580	Save the thumbnail
5581	Return the mysql connection .
5582	Get a BandwidthLimitedStream object from a file object .
5583	Read amount of bytes from the file .
5584	Consumes the requested amount and returns the requested amount .
5585	Schedule consumption .
5586	Process the scheduled consumption .
5587	Calculate the projected moving average rate .
5588	Record consumption rate .
5589	Download a file .
5590	Wait for a transfer to complete .
5591	Get callbacks for a transfer .
5592	Returns a copy of the original_dict with whitelisted keys .
5593	Decrement the counter .
5594	Finalize the callback .
5595	Check if a file is a special device .
5596	Acquire a tag .
5597	Release an acquire token .
5598	Adjust the chunk size based on the current chunk size .
5599	Queue a file - like task to write data .
5600	Returns an IOWriteTask for the given fileobj .
5601	Get the appropriate download manager class .
5602	Main entry point .
5603	Write data to fileobj .
5604	Request all pending writes .
5605	Check if the fileobj is seekable .
5606	Uploads a file - like object to a bucket .
5607	Download a file - like object .
5608	Copy a source to a bucket .
5609	Send a DELETE request to a bucket .
5610	Shutdown the server .
5611	Cancel transfer coordinator .
5612	Wait for the transfer coordinator .
5613	Read amount of bytes from a fileobj .
5614	Wrap data in a file - like object .
5615	Returns the appropriate upload manager for this transfer .
5616	Set the exception of the transfer .
5617	Sets the result of the job .
5618	Set the exception .
5619	Return the result of the job .
5620	Cancel the task .
5621	Submits a task to the given executor .
5622	Add a done callback .
5623	Add a failure cleanup .
5624	Called when the job is done .
5625	Submit a task to the executor .
5626	Add a callback to the future .
5627	Upload a file to S3 .
5628	Download a file from S3 .
5629	Iterate over function decorators .
5630	Parse the argument of a decorator step .
5631	Refactor a step .
5632	Iterate over step decorators .
5633	Get step arguments from a decorator step .
5634	Refactor a step .
5635	Set the Python parser to use .
5636	List team membership .
5637	Create a new team membership .
5638	Update a team membership .
5639	Delete a membership .
5640	Get a cat fact .
5641	Sends a POST request to the bot .
5642	List members in a room .
5643	Delete a membership
5644	Validate base_url .
5645	Check if string is a web URL .
5646	Opens a local file .
5647	Check if an object is an acceptable type .
5648	Create a dictionary from a list of dictionaries .
5649	Check response code for expected_response_code .
5650	Convert a JSON string into an OrderedDict .
5651	Convert a date string to a datetime object .
5652	List rooms .
5653	Create a room .
5654	Update a room .
5655	Deletes a room .
5656	List license objects .
5657	Get the created date of the team
5658	Get the access token from the environment variable .
5659	Create a new webhook .
5660	Updates a webhook .
5661	Deletes a webhook .
5662	Ensure next URL is valid .
5663	Set the value of wait_on_rate_limit to True .
5664	Update request headers .
5665	Return absolute URL .
5666	Perform an HTTP request .
5667	Perform a GET request .
5668	Get pages from a URL .
5669	Get all pages of a URL .
5670	Make a PUT request .
5671	Send HTTP DELETE request .
5672	Create a new user .
5673	List messages in a room .
5674	Create a new room .
5675	Delete a message .
5676	Create a new person .
5677	Get a person by its ID .
5678	Update a person .
5679	Deletes a person .
5680	Get the current person .
5681	List roles .
5682	List team objects .
5683	Create a team .
5684	Update a team .
5685	Delete a team .
5686	List events .
5687	Serialize the given data into a tuple .
5688	Get an access token .
5689	Returns the last activity of the team .
5690	Posts a webhook to the webhook .
5691	Get the Ngrorok public URL .
5692	Delete webhook with name
5693	Create a webhook .
5694	Delete all webhooks .
5695	Command line interface .
5696	Generator that yields Telegram objects .
5697	Read telegram data into queue .
5698	Create a DSMR protocol .
5699	Create a DSMR reader .
5700	Create a connection to a DSMR reader .
5701	Handle incoming data .
5702	Called when the connection is lost .
5703	Handle a telegram
5704	Parse telegram data .
5705	Get version from file
5706	Ensure python version is valid .
5707	Find packages in top .
5708	Create command class .
5709	Returns a function that runs the given function as a function .
5710	Run a command .
5711	Returns a command that checks the given targets .
5712	Wrap a list of commands into a Command class
5713	Returns a command handler for the given package data .
5714	Get data files .
5715	Get package data .
5716	Compile a regular expression pattern .
5717	Iterates over a path recursively .
5718	Translate glob .
5719	Join translated parts .
5720	Translate glob part .
5721	Truncate the table .
5722	Write a table to the database .
5723	Writes indexes to the database .
5724	Write triggers to a table .
5725	Add constraints to a table .
5726	Write contents of table to file .
5727	Process a single row
5728	Write the indexes of a table .
5729	Write constraints to file .
5730	Write triggers to a table .
5731	Return the number of items in the queue .
5732	Enqueue data to the database .
5733	Starts a task .
5734	Build an extra predicate string
5735	Simple JSON serializer .
5736	Reconnect to the database .
5737	Executes a query and returns the result .
5738	Connect to database
5739	Run the benchmark .
5740	Connect to the aggregator pool .
5741	Look up the globals by an error .
5742	Return the total size of all connections .
5743	Handle connection failure .
5744	Construct a simple SQLAlchemy expression
5745	Create an UPDATE statement .
5746	Connect to the database .
5747	Setup the database
5748	Destroy the database .
5749	Start a new step .
5750	Stop a step .
5751	Load start and stop steps .
5752	Disconnect from API
5753	Reconnect to zion .
5754	Connect to the websocket .
5755	Called when a message is received .
5756	Stop all timers .
5757	Send a ping to the API .
5758	Check if pong is received
5759	Send data to API .
5760	Unpause the paused state .
5761	Handle a system message .
5762	Handle information about the client .
5763	Handle error messages .
5764	Handle data .
5765	Resubscribes to channels .
5766	Handle an authentication event .
5767	Handle a configuration .
5768	Update the timestamp of a channel .
5769	Reset connection to channel_configs
5770	Get the list of candles for a pair
5771	Configures bitfinex
5772	Subscribe to a ticker .
5773	Unsubscribe from a ticker .
5774	Subscribe to an order book .
5775	Unsubscribe from an order book .
5776	Subscribe to a raw order book .
5777	Unsubscribe from raw order book .
5778	Subscribe to trades .
5779	Unsubscribe from a pair .
5780	Subscribe to candles .
5781	Unsubscribe from candles .
5782	Authenticate with API .
5783	Cancel an order .
5784	Handle a command .
5785	Handle a device command .
5786	Called when a notification is received .
5787	Creates a new DeviceType
5788	Publish an event .
5789	Update a device .
5790	Find client status list .
5791	List custom bundles
5792	Create a custom bundle
5793	Updates an existing schema
5794	Disconnect from IBM IoT Platform .
5795	Callback called when a connection is established .
5796	Subscribe to device events .
5797	Subscribe to a device status .
5798	Subscribe to device commands .
5799	Publish a command to a device .
5800	Handle unsupported messages .
5801	Process a device event .
5802	Process a device status message .
5803	Process a status message .
5804	Get a specific event .
5805	Get all events for a device .
5806	Make an API call to the API .
5807	Initiate the request .
5808	Get the status of a device .
5809	Close the index .
5810	Count the number of intersects between the given coordinates .
5811	Returns the nearest neighbors of the specified coordinates .
5812	Get the bounds of the index .
5813	Delete an index by id
5814	Create an index from a stream .
5815	Loads a byte array from the page .
5816	Remove an object from the tree .
5817	Raise RTreeError if successful
5818	Load application .
5819	Initialize Flask extension .
5820	Run the Flask application .
5821	Return the URL for this field .
5822	Crop the image on the center point .
5823	Crop the image .
5824	Process an image .
5825	Process an image .
5826	Opens the data field .
5827	Process the placeholder image .
5828	Update PersatileImage field .
5829	Update the PPO dimension field .
5830	Assigns the field to the field attribute
5831	Return the default formfield for this view .
5832	Convert value to string .
5833	Autodiscover app modules .
5834	Unregisters a SizedImage class .
5835	Unregisters a filter .
5836	Returns the url of the image .
5837	Build filters and sizers .
5838	Returns the root folder of the image field .
5839	Returns the root folder of the image field .
5840	Get the root folder of the image .
5841	Delete files matching the given regex .
5842	Preprocess an image .
5843	Preprocess GGIF .
5844	Preprocess JPEG image .
5845	Retrieve an image
5846	Save an image to disk .
5847	returns ppoi as string
5848	Creates a new resized image
5849	Render the template to a string .
5850	Adds the context to the context .
5851	Build a copy of the attributes .
5852	Returns the resized file path .
5853	Returns the path_to_image filtered by filename_key
5854	Validate sizes .
5855	Get the url from an image key .
5856	Get the rendition key set .
5857	Format an instruction .
5858	Format function code .
5859	Decode bytecode into instructions .
5860	Decode a module .
5861	Mark a function as deprecated .
5862	Connect to the server .
5863	Close the connection .
5864	Reads the response from the server .
5865	Asterisk handler .
5866	Parse agi result
5867	Check AGI code .
5868	Reset all instances .
5869	List of instances
5870	Get metadata from setup . py .
5871	Get primary keys for a model .
5872	Deserialize a dict into a single instance .
5873	Get an existing instance .
5874	Add fields to the model .
5875	Deserializes the given data .
5876	split kwargs into kwargs and association attributes
5877	Delete all orphan snapshots .
5878	Create a snapshot .
5879	List available snapshots .
5880	Restore a snapshot .
5881	Delete a snapshot
5882	Rename a snapshot
5883	Replace a snapshot .
5884	Update the indexes .
5885	Clean text .
5886	Apply a function to data .
5887	Create a function that returns a list of tokens .
5888	Process text .
5889	Apply processing to data .
5890	Generate document length stats .
5891	Return a Pandas dataframe of word counts .
5892	Map a type to its type .
5893	Parse interfaces into a dictionary .
5894	Inverse of the bidict .
5895	Perform an update with a rollback .
5896	Return a copy of this bidict .
5897	Return a copy of this bidict .
5898	Return True if two Bidicts are equal .
5899	Return a tuple of the inverted values .
5900	Clear the internal state .
5901	Move node to end .
5902	Write text to a temporary file .
5903	Search for contacts .
5904	Merge args into config .
5905	Load addresses from the configuration file .
5906	Prepare search queries
5907	Create a new contact
5908	Add birthdays to vCard list .
5909	Run a phone command on a list of vCard objects .
5910	Print a list of contacts
5911	Modify a vCard .
5912	Delete a vCard from the address book .
5913	Create a subcommand for the vCard .
5914	Run a merge command .
5915	Create a copy or move command
5916	Returns the action for the given alias
5917	Convert a boolean value to a default value .
5918	Create a new contact object .
5919	Create an instance from a file .
5920	Create a contact from user input .
5921	Create a Contact from an existing contact .
5922	Get the list of names from the vCard
5923	Add a category
5924	Parse type value .
5925	Convert list to string .
5926	Convert string to date .
5927	Compares two UIDs .
5928	Search for contacts in all contact fields
5929	Search for contact names matching a regular expression .
5930	Search for a unique UID .
5931	Search the address book .
5932	Return a dictionary of unique UIDs keyed by query .
5933	Returns the short UID of the given UID
5934	Find vCard files .
5935	Load vcard files from the address book .
5936	Get a book by name .
5937	Returns a list of available archs .
5938	Returns a list of available archs .
5939	Return inspect . ArgSpec for a given function .
5940	Dispatches the given parser .
5941	A convenience wrapper for user input .
5942	Encodes the given value to the output file .
5943	Guess type and action from kwargs
5944	Add commands to a parser .
5945	Decorate a function with a new name .
5946	Decorator that adds an option to the decorated function .
5947	Prompt user for confirmation .
5948	Return a new Query with new fields replaced .
5949	Create a new filter with the given filters .
5950	Return cached results .
5951	Returns the first item .
5952	Delete entities from the database .
5953	Called when an entity is deleted .
5954	Emulate redis prefix .
5955	Estimate the code for the given index .
5956	Search for records in the database .
5957	Return the number of items in the database
5958	Return a connection to an object .
5959	Return full text .
5960	Return an iterator over the indices of the given model .
5961	Clean old index .
5962	Add an object .
5963	Return the value for the given pk
5964	Write data to redis .
5965	Saves the object to the database .
5966	Deletes the object .
5967	Get models from redis
5968	Register a reduction function .
5969	Open a semaphore .
5970	Return the number of available CPUs .
5971	Send the result to the result queue .
5972	Process the call queue .
5973	Add a call to the queue .
5974	Ensure the executor is running .
5975	Wraps the given object into a CloudpickledObject .
5976	Start the server .
5977	Duplicate a file descriptor .
5978	Get a reusable executor .
5979	Wait for jobs completion .
5980	Get preparation data .
5981	Prepare process data .
5982	Close all open fds .
5983	Recursively kill subprocesses .
5984	Recursively terminate a process .
5985	Get the exit codes of the terminated workers .
5986	Format exit codes .
5987	Start the semaphore tracker .
5988	Ensure the semaphore tracker is running .
5989	Event processor .
5990	Disassemble the Python code .
5991	Create an interactive console .
5992	Split string into arguments .
5993	Get stack and line number .
5994	Run a list of hooks .
5995	Clear the stack .
5996	Get an integer from the interpreter .
5997	Get an integer from arg .
5998	Process commands .
5999	queue source file
6000	Returns the next blank token
6001	Log error message .
6002	Read a command line .
6003	Close the stream .
6004	Disassemble a code block .
6005	Disassemble instructions .
6006	Count the number of frames in a frame .
6007	Get the name of the call function .
6008	Print a stack trace to stdout .
6009	Look up a subcmd by prefix .
6010	Print short help message .
6011	Add a subcommand callback .
6012	Invoke the callback function .
6013	Start debugging .
6014	Show all commands in category .
6015	Log line information .
6016	Find the first frame in the given frame .
6017	Map thread names to threads .
6018	Get an integer .
6019	Get a boolean value from on and off .
6020	Set the boolean setting .
6021	Set the value of an integer .
6022	Show a boolean value .
6023	Show int value .
6024	Print the value of the debugger .
6025	Check if the line is a LOAD_FUNCTION statement .
6026	Check if the line is a class .
6027	Quit the debugger
6028	Set default background
6029	Check if a color is dark .
6030	Return the signature of a frame .
6031	Returns a list of all expressions
6032	Convert a frame to a list of strings .
6033	Return a human - readable representation of the program .
6034	Read a message from the socket .
6035	Log a debug message
6036	Log an undefined subcommand .
6037	Run routine .
6038	Pretty print an array .
6039	Look up a signame for a given number .
6040	Lookup a signal by name .
6041	Convert a SIGNAME to a signame .
6042	Set signal handler to handle .
6043	Check if all sig handlers have been added .
6044	handle signal handler
6045	Handle action .
6046	Set print method .
6047	Signal handler .
6048	Convert a filename to a module name .
6049	Search for a file .
6050	Search for a file in a directory .
6051	Return a list of all python files in a callername .
6052	Print a message
6053	Run the main program .
6054	Return a columnize of commands .
6055	Post mortem .
6056	Close the connection .
6057	Write a message to the connection .
6058	Complete an identifier .
6059	This function will be used to process the given string .
6060	Add frames to ignore_filter .
6061	Return the absolute path to a file .
6062	Returns the filename of the debugger .
6063	Check if tracing is started .
6064	Check if we have a stop level
6065	Set the next frame .
6066	Print stack trace
6067	Run the debugger .
6068	Check if the function name is called .
6069	Delete a breakpoint
6070	Delete a breakpoint by its breakpoint number .
6071	Disable all breakpoints .
6072	Disable a breakpoint by its breakpoint number .
6073	Delete breakpoints by filename and lineno .
6074	Open the file .
6075	Read a line from the stdin .
6076	Prompt the user for confirmation .
6077	Add a whitespace token .
6078	Parse a number .
6079	Convert a query to a future .
6080	Restore the original login .
6081	Load a module .
6082	Iterate over documents in a project .
6083	Entry point for the CLI .
6084	Convert JSON file to stream .
6085	Open a JSON or JSON file .
6086	Normalize dates in the stream .
6087	Convert date string to timestamp .
6088	Guess file encoding .
6089	Generator that yields JSON lines from a file .
6090	Transcode a file to UTF - 8
6091	Opens a CSV file with the same header .
6092	Read a CSV file into a dictionary .
6093	Entry point for transcoding .
6094	Connect to Luminoso .
6095	Save a token to disk .
6096	Make a request to Luminoso .
6097	Perform a DELETE request .
6098	Wait for a project to build .
6099	Return the root URL for a given URL .
6100	Save the user s token to a file .
6101	Send a request to Luminoso .
6102	Perform a POST request .
6103	Change the path of this object .
6104	Get the default account .
6105	Get the documentation of the server .
6106	Wait for a job to finish .
6107	Perform a GET request .
6108	Print results in CSV format .
6109	Read parameters from json file .
6110	Simplify a document .
6111	Create a project with the given documents .
6112	Create a project from a JSON file .
6113	Entry point for the script .
6114	Upload a stream to Luminoso .
6115	Upload a file to the server .
6116	Entry point for the script .
6117	Create a Luminoso token from a username and password .
6118	Login to the server .
6119	Post login page .
6120	Get data for a given resource .
6121	Fetch data per period
6122	Prepare the view .
6123	Initialize the view
6124	Handle GET requests
6125	Called when a message is received .
6126	Update the menus
6127	Return a list of urls for the site .
6128	Called when a message is received .
6129	Called when a DOM changes .
6130	Create widget .
6131	Initialize the widget
6132	Destroy this component .
6133	Add a child to this component
6134	Remove a child from this component .
6135	Return all child widgets .
6136	Set an attribute .
6137	Update a proxy
6138	Called when a change is changed .
6139	Find nodes matching query .
6140	Prepares the model .
6141	Set the source of this component .
6142	Set HTML source .
6143	Called when a change is changed .
6144	Called when a block changes
6145	Update the children of the block .
6146	Read the contents of a file .
6147	Print error message and exit .
6148	Error parsing command line
6149	Get a Product by its name
6150	Creates a new session .
6151	Reset the store .
6152	Search for stores matching a search term .
6153	Sets the delivery system for the given store .
6154	Returns the menu for the given store .
6155	Adds an item to the basket
6156	Adds a pizza to the basket
6157	Adds a side to the basket
6158	Removes an item from Basket
6159	Set payment method .
6160	Process payment request .
6161	Make a GET request .
6162	Make a POST request .
6163	Make an API call .
6164	Append an item to the menu
6165	Add an exit item to the list .
6166	Draw the menu
6167	Process user input .
6168	Select the selected item .
6169	Creates a CursesMenu object from an old menu
6170	Sort a DataFrame by a value .
6171	Calculate the top of a dataframe .
6172	Convert string to datetime .
6173	Convert datetime to string .
6174	Change the date of a column in a pandas DataFrame .
6175	Cast column to type
6176	Rank values in a DataFrame .
6177	Apply a waterfall to a dataframe .
6178	Perform a basic math operation on a dataframe .
6179	Round values in a column to a new column .
6180	Change the absolute values of a column .
6181	Pivot table .
6182	Pivot a variable by a group .
6183	Group by group_cols .
6184	Compute the cumulative sum of a column .
6185	Add missing rows to a dataframe .
6186	Catch exceptions raised by the decorated function .
6187	Log a message to a function .
6188	Log the time of a function .
6189	Log output shapes and output shapes .
6190	Rename values in a DataFrame .
6191	Compute the cumulative sum of each column .
6192	Combines columns using aggregation function
6193	Get a parameter value from a function call .
6194	Remove old entries from cachedir .
6195	Perform aggregation on a dataframe .
6196	Return the maximum of a column .
6197	Return the minimum of a column .
6198	Fill missing values in a column .
6199	Add an offset to a date object
6200	Adds a number of months to a date object
6201	Add a number of years to a date object
6202	Parse date string
6203	Filter a DataFrame by a date range .
6204	Calculate percentage of a column .
6205	Ada family core .
6206	Compute the optimization updates .
6207	Get training parameters .
6208	Compute optimization updates .
6209	Sample the first glimpse sensor .
6210	Prepare encoder and target_dim .
6211	Computes the cost of a tensor .
6212	Apply a function to the dataset .
6213	Vectorize the target set .
6214	Log the test statistics .
6215	Train the model .
6216	Sample from input
6217	Compute alignments based on previous state .
6218	Compute the context vector .
6219	Concatenate variables .
6220	Pad the dataset with the given length .
6221	RMSProp core .
6222	report elapsed time
6223	Run the optimizer .
6224	Run the monitor .
6225	Build the loop variables .
6226	Scan the step .
6227	Compute momentum and free parameters .
6228	This function is called when training .
6229	Skip the number of batches .
6230	Load parameters from disk .
6231	Train the model .
6232	Run the training step .
6233	Run validation .
6234	Record a score map .
6235	Get training data .
6236	Apply a function to this tensor .
6237	Print information about the used parameters .
6238	Return a tensor of the given type .
6239	Create variables from dataset .
6240	Create a shared variable .
6241	Stack encoder layers .
6242	Stack decoders .
6243	Encodes x into a neural network .
6244	Decodes x using the decoding network .
6245	Create a 2D Gaussian .
6246	Register a layer .
6247	Record the mean of all hidden outputs .
6248	Returns all parameters
6249	Set up the variables of the graph .
6250	Compute the output .
6251	Save model parameters to disk .
6252	Load parameters from a file .
6253	Log the network .
6254	Register new parameters .
6255	Register new updates .
6256	Register training updates .
6257	Register monitors .
6258	Compute the L2 norm of a list of tensors .
6259	Serialize elt to pickle file .
6260	Load elements from a file - like object .
6261	Load parameters from a file .
6262	Create request elements .
6263	Decodes the user state .
6264	Parse credentials .
6265	Filter request elements .
6266	Log in in .
6267	Normalize a dictionary to a single value .
6268	Convert a list of items into a dictionary .
6269	Parse JSON query string .
6270	Resolve provider class .
6271	Create cookie string .
6272	Save the cookie .
6273	Get cookie data .
6274	Return serialized data .
6275	Generate signature .
6276	Serialize data into a base64 string .
6277	Check if the session is valid .
6278	Return True if we have expired .
6279	Serialize this configuration into a string .
6280	Check if the content is a binary string .
6281	The content of the response .
6282	Create request elements .
6283	Add email from Bitbucket .
6284	A decorator that handles login requests .
6285	Authenticate the identifier .
6286	Return a key for a session .
6287	Set a session value .
6288	Generate a random CSRF string .
6289	Log a message to the logger .
6290	Check if status is in category category
6291	Split url into base and params
6292	A decorator to enable cross - origin cors on the application .
6293	Set CORS headers based on request context .
6294	Returns a dictionary of keyword arguments for the app instance .
6295	Return a string representation of an object .
6296	Ensure instance is iterable .
6297	Check if two numbers are equal .
6298	Mark a function as deprecated .
6299	Deserialize an audio segment .
6300	Create an AudioSegment from a file .
6301	Create an audio segment from a numpy array .
6302	Execute a sox command .
6303	Filter the audio file .
6304	Compute the Fourier transform .
6305	Generate frames .
6306	Normalize the SPL by average .
6307	Return a new AudioSegment with the same data .
6308	Resample this audio file .
6309	Serialize the state into a string .
6310	Construct a spectrogram of the data .
6311	Given a list of offset_front ids choose the offset front id from the candidates .
6312	Get the offset front id of the offset fronts
6313	Get the offset front id of the onset front
6314	Match onset_front_id to onset_fronts .
6315	Given a set of onset fronts and offset fronts return a list of consecutive segments that overlap .
6316	Update the segmentation mask .
6317	Return the index of the front item in front .
6318	Get the set of front ids from onset fronts .
6319	Given a set of onsets and onset fronts return a list of the corresponding offsets .
6320	Remove overlapping regions .
6321	Remove fronts that are too small .
6322	Break fronts into two fronts .
6323	Merge adjacent segments .
6324	Separate masks into multiple masks .
6325	Downsample the mask and stft .
6326	Simple ASA task
6327	Bandpass filter
6328	Lower - filter .
6329	Convert a list of responses to tf input matrix .
6330	Expand and standardize a dataset .
6331	Return True if a is equal to b .
6332	Group audit ranks by score .
6333	Load the confusion matrices from the audit file .
6334	Convert a list of responses to tf input .
6335	Update PIP_INDEX_URL from environment variables .
6336	Autodetects requirements . txt files .
6337	Resolve all available streams .
6338	Resolve a property by its property .
6339	Find streams matching a predicate .
6340	Raises an error if an error occurred .
6341	Push a single sample to the stream .
6342	Push a single chunk .
6343	Get stream info .
6344	Opens the stream .
6345	Compute the time of the LSL file .
6346	Create a child element .
6347	Return the next sibling of this element .
6348	Returns the previous sibling of this element .
6349	Set the label name .
6350	Set the LSL value .
6351	Append a child to this element .
6352	Prepend a child to this element .
6353	Append a new element to this element .
6354	Prepend an element to this element .
6355	Remove child from this element .
6356	List of available resolver results .
6357	List all tokens in the database
6358	Print the number of elements in s
6359	Compute edge n - grams from token .
6360	Iterate through a pipe .
6361	Map a function over an iterable .
6362	Make fuzzy search for word
6363	Do fuzzy search .
6364	Do fuzzy index .
6365	Extrapolated relations .
6366	Print help message .
6367	Print the database info .
6368	Print the value of a key
6369	Print geohash .
6370	Get a single document .
6371	Do an index .
6372	Print the best score of a word
6373	Compare two strings .
6374	Send a request .
6375	Map a list of requests .
6376	Extract bits from an array .
6377	Convert harray to bits .
6378	Convert a slice to a slice .
6379	Find files in a directory .
6380	Returns True if the iterable is in the given iterable
6381	Static method for handling multiple items .
6382	Convert a signal to a little - endian signal .
6383	Returns the ceil of x .
6384	Check if a number is a power 2 .
6385	Add a case .
6386	Set default stements .
6387	Register all interfaces in the given object .
6388	Called when the unit is started .
6389	Log a change .
6390	Return the HTML for the given process .
6391	Create a list of agents for the given unit .
6392	Return the reference to the associated CLK .
6393	Return the distinct elements in an iterable .
6394	Iterate over the items in a collection .
6395	Flatten an iterable .
6396	Merge nested if statements into self .
6397	Remove unconnected signals from netlist
6398	Check if a statement is too simple .
6399	Try to merge the statements in the processB .
6400	Reduces processes into multiple processes .
6401	Send a WRITE request .
6402	Serialize units to RTL .
6403	Given a list of Statements return the name of the output .
6404	Cut off drivers from a destination signal .
6405	Create signal .
6406	Synthesize the signal .
6407	Returns the maximum ID of the given stm
6408	Returns the maximum ID of all statements in the given proc .
6409	Write data to device
6410	Change the direction of the interface
6411	Load declarations .
6412	Returns the signals for this interface .
6413	Returns the physical name of this port .
6414	Return the number of bits in this array .
6415	Returns the sensitivity of the given operation .
6416	Evaluate the given operator .
6417	Convert bits to a given type .
6418	Cast bits to hstruct .
6419	Return the number of words covered by start and end .
6420	Split on word index .
6421	Pretty print interface .
6422	Generate frames from a transaction .
6423	Iterate over words in this TransPart .
6424	Pack data into data
6425	Clean signal meta data .
6426	Discover the enclosure for statements and outputs .
6427	Discovers the sensitivity sequence of signals .
6428	Returns RTL context .
6429	Handle the reduce operation .
6430	Merge two Statements .
6431	Check if two statements are mergable .
6432	Merges a list of statements together .
6433	Merge two statements into a single list .
6434	Try to reduce a list of statements .
6435	Called when the parent stms are dependent .
6436	Set parent Statements .
6437	Add a list of stements to the target list .
6438	Destroy this driver .
6439	Create a register container
6440	Create a signature object .
6441	Clean up all ports .
6442	Recursively walks the fields of a HUnion .
6443	Unpack data from a HStruct .
6444	Convert the operator to a signed value .
6445	Add a sensitivity process .
6446	Simulate conditional conditions .
6447	Connect a port on the subSimUnit .
6448	Return a function that returns a function that updates the nextVal .
6449	Return a function that updates the values of the given indexes .
6450	Create a Vector instance from val .
6451	Process a HW process .
6452	Evaluates a parameter
6453	Set this parameter .
6454	Create a HStruct from an interface map .
6455	Finalize the state of all resources .
6456	get index cascade
6457	Convert a Python value into an object .
6458	Try to cast sigorVal to to to type .
6459	Casts a signature or val to a type .
6460	Iterate over all the parameters of the interface .
6461	Connects a packed packed to dstInterface .
6462	Returns the interface s signature
6463	Convert a rom into a process .
6464	Convert unit to RTL .
6465	Register an interface in an interface .
6466	Try to reduce the value of val .
6467	Try to reduce an xor of a value .
6468	Get the name scope for the keywords .
6469	Returns True if the object is serialized .
6470	Returns the class representation of the given type .
6471	Serialize ifContainer .
6472	Get the base condition from a condition .
6473	Create a SimBitsT object .
6474	Get the name of a constant .
6475	Cut off drivers of a signal .
6476	Load the contents of the template from the given dtype
6477	Load the template from a HDL struct .
6478	Load data from a given HDL type .
6479	Return the width of the item in this HArray .
6480	Recursively walk the tree .
6481	Fix a signed value .
6482	Merge self with other .
6483	Return a string with the given indent number .
6484	Check that a property is available .
6485	Register a parameter .
6486	Update params from otherObj .
6487	Register a unit .
6488	Register an interface .
6489	Register an array .
6490	Returns a single driver .
6491	Evaluate the expression .
6492	Create a RtlSignal with resT
6493	Return a new context with the given indent .
6494	Try to connect to a unit
6495	Connect clock to all units .
6496	Propagate clk n to rst n
6497	Connect the clk and rst units to the given object .
6498	Propagate rst_n for this object .
6499	Propagate the RST representation of the object .
6500	Iterate the bits of a signal .
6501	Serialize obj to exclude .
6502	Return whether or not the entity should be serialized .
6503	Helper function to serialize the params that are not unique
6504	Get the name of this object .
6505	Make association between all objects .
6506	Prepare unit for given unit .
6507	Convert unit to SimModel .
6508	Reconnect unit signals to model .
6509	This function takes a list of simul functions and writes them to a file in output file .
6510	Register onT write callback
6511	Connect this port to this port .
6512	Register a signal on this port .
6513	Connect this interface to another driver .
6514	Returns the international signature of this direction .
6515	Check if the process is dependent on a signal .
6516	Add a process to the queue .
6517	Add a process to the simulation run .
6518	Schedule the comb update done event .
6519	Schedule the apply values to be applied .
6520	Given a set of values return the update strategy for the given values .
6521	Run the comb processes .
6522	Run all the processes in the sequence .
6523	Apply values to signals
6524	Return the value of a sig .
6525	write value to signal
6526	Add a process to the queue .
6527	Simulate a synthesised unit .
6528	Create RtlSignal
6529	Convert a list of statements into an if container .
6530	Process the process .
6531	Computes the distance between two hashes .
6532	Calculate the average hash of an image .
6533	Returns the distance between two images .
6534	Setup Vizio platform .
6535	Update the state of the device .
6536	Mute the volume .
6537	Volume up .
6538	Volume down .
6539	Set the volume .
6540	Reset the board .
6541	Return the piece at the given square .
6542	Remove piece at square .
6543	Sets the piece at the given square .
6544	Check if a move is suicide or not .
6545	Check if the game is suicide .
6546	Check if the game is over .
6547	Check if the game is a checkmate .
6548	Check if the player is a fourfold repetition .
6549	Pop a move .
6550	Return a list of squares .
6551	Push a move to the list of moves .
6552	Generate Zobrist hash .
6553	The symbol of the piece .
6554	Create a PIECE instance from a symbol .
6555	Return the UI representation of this piece .
6556	Return a Piece instance from a USI string .
6557	Parse commit information .
6558	Parse a commit message .
6559	Load config from CLI .
6560	Execute commands from command line .
6561	Adds an argument parser to the argument parser .
6562	Load config from file .
6563	Generate a YAML string from the configuration .
6564	Generate markdown for this class .
6565	Cast val to val .
6566	Return a list of dates between two dates .
6567	Parse a date string
6568	Load a currency file
6569	Set missing rates to None
6570	Compute missing rates for a currency
6571	Get rate for given date
6572	Convert amount to currency
6573	Group an iterable into a list .
6574	Animate multiple frames .
6575	Read n bytes from the file .
6576	Write n bytes to file .
6577	Map words to memory .
6578	Return the comment as a string
6579	Add an array to the file .
6580	Close the DAF
6581	Generate position from tdb
6582	Close the DAF file .
6583	Load the PCK data
6584	Compute the Chebyshev segment .
6585	Check for logging calls .
6586	Handle arithmetic operations .
6587	Check if a dictionary is present .
6588	Visit joined str values .
6589	Check if the keyword argument is valid .
6590	Add an exception handler .
6591	Detect logging level .
6592	Get the name of an exception handler .
6593	Get the id attribute of the object .
6594	Check if node is a bare exception .
6595	Check if exc_info arguments are valid .
6596	Delete a file from the database
6597	Returns a widget that will be used to display the widget in the database .
6598	Returns the rendered PDF content .
6599	Render the PDF template .
6600	Quotes a string and returns it .
6601	Configure MONGODB attributes .
6602	Convert string to underscore .
6603	Ensure all indexes exist .
6604	Parse csv file
6605	Load content from file .
6606	Parse a line into a PriceModel object
6607	Translates a symbol
6608	Load symbol maps .
6609	Get session .
6610	Add a price
6611	Import prices from CSV file .
6612	Show the latest prices for a security symbol
6613	List prices .
6614	Download stock prices .
6615	Remove old price entries
6616	Get the default session
6617	Create a new symbol map .
6618	List all market maps
6619	Get symbol map by symbol
6620	Read lines from a CSV file .
6621	Map entity to price model
6622	Convert model to Price .
6623	Read configuration from file
6624	Get the path to the config file .
6625	Create user config file .
6626	Returns the path to the config file .
6627	Get the contents of the config .
6628	Set option to value .
6629	Get the value of an option .
6630	Save the configuration to disk .
6631	Parse the namespace and mnemonic .
6632	Adds a price to the database .
6633	Add a price entity to the database .
6634	Download price from database
6635	Get session object
6636	Get all prices .
6637	Get prices for a given symbol
6638	Prune all security symbols
6639	Remove all prices for a symbol
6640	Download market price .
6641	Get security information
6642	Partial partial function .
6643	Update the child calls of the child .
6644	Return a generator yielding all child nodes .
6645	Decorate a function to remove child nodes from the tree .
6646	Check if the student parts have the same length .
6647	Verify that the AST is equal .
6648	Assert that the student code contains text .
6649	Test if a package has an import .
6650	Test if the student output contains text .
6651	Check if a printout is in the solution .
6652	Assert that the code contains an error .
6653	Tests if the student is selected .
6654	Check a function .
6655	Get the representation of the result .
6656	Override the solution with the given solution .
6657	Indicate whether inst is an instance of the student .
6658	Returns a copy of the collection with all the items defined in this collection .
6659	Create a child state
6660	Get a parser .
6661	Test if state has a context loop .
6662	Check if the state has a context with the correct name .
6663	Check if a student part exists .
6664	Check if the part of a student is present .
6665	Check the arguments of a function .
6666	Check a call to a student function .
6667	get true anomaly
6668	Initialize the LDAP3 login manager .
6669	Initialize the LDAP configuration .
6670	Add an LDAP server .
6671	Remove a connection from the stack .
6672	Remove the connection from the request context .
6673	Authenticate using LDAP .
6674	Perform LDAP binding .
6675	Perform LDAP search .
6676	Get groups for a user
6677	Get information about a LDAP user .
6678	Get information about a user .
6679	Get an object from the LDAP server .
6680	Return an LDAP connection .
6681	Make a connection .
6682	Create an LDAP connection
6683	Destroy a connection
6684	Search for collections .
6685	Search for labels .
6686	Search the repository .
6687	Search for jobs in a collection .
6688	Send the connection to the server .
6689	Announce a command .
6690	Update secrets
6691	Update headers
6692	Check if secrets are present
6693	Download a URL to a temporary file .
6694	Stream a URL to a stream .
6695	Update authorization token
6696	Get or create a folder .
6697	Reads the response from the server .
6698	Get the bucket .
6699	Update secrets .
6700	Initialize the client .
6701	Load secrets from cache .
6702	Get the most recent logs
6703	List all logs
6704	Create folder at endpoint_id
6705	Init transfer client .
6706	List all containers
6707	Display backend status .
6708	Add a setting to the server
6709	Remove a configuration variable
6710	Activate client secret
6711	Delete a client .
6712	Update base .
6713	Generate basic authentication header
6714	Generate signature .
6715	Generate header signature .
6716	Send a DELETE request to a URL .
6717	Send a HEAD request .
6718	Perform a GET request .
6719	Verify certificate .
6720	Remove an image
6721	Return lookup from version . py
6722	Returns the install_requires list for the given key .
6723	Get singularity version .
6724	Check if software is installed .
6725	Get the path to the installation directory .
6726	Get the path to a thumbnail
6727	Run a command and return the output
6728	Get metadata from database file
6729	Update secrets .
6730	Print the output of a container
6731	Kill all commands .
6732	List logs for a container .
6733	Get a list of all collections
6734	Update secrets
6735	Update Google Storage credentials
6736	Get Docker client
6737	Run an IPython command .
6738	Get manifests for a given repository
6739	Get the manifest for a given repository
6740	Get download cache
6741	Extracts the environment from the config file .
6742	Update base settings
6743	Update secret and private - token
6744	Get metadata about the job .
6745	Get client secrets .
6746	get and update a setting
6747	Update client secrets .
6748	Generate a signature for the registry .
6749	List builders .
6750	Load templates by name
6751	Get the IP address of a network .
6752	Run a build
6753	List all containers in the bucket
6754	List all containers in the bucket .
6755	List all queries
6756	Shared function to share images .
6757	Initialize the database .
6758	Get build template
6759	List all endpoints
6760	List all endpoints
6761	List files under endpoint .
6762	Share an image
6763	Read client secrets .
6764	Sets up the buckets and compute services .
6765	Delete an object .
6766	Delete a file
6767	Destroy an instance
6768	Get all subparsers for a given parser
6769	Generates a random string from the dataset .
6770	Get a temporary directory .
6771	Extract a tar archive .
6772	Extract a tar archive
6773	Get the hash of a file .
6774	Read the contents of a file .
6775	Read a JSON file .
6776	Clean up files
6777	Push an image to the registry .
6778	Get or create a collection .
6779	Get a collection by its name
6780	Get a container by name and version .
6781	List images .
6782	Inspect a container
6783	Rename a container
6784	Move an image to a container
6785	Remove an image
6786	Add an image to the registry
6787	Push an image
6788	Parse the header of a recipe .
6789	Find a single recipe in the manifest
6790	Create a build package
6791	Run a build
6792	Update blob metadata
6793	Formats a container name .
6794	Returns True if the user should use color .
6795	Return True if the log error occurred .
6796	Write message to stream .
6797	Display a table
6798	Push an image
6799	Get a template by name
6800	Get image manifest
6801	Get a build template
6802	Update client secrets
6803	Make a repr string .
6804	Context manager for S3 errors .
6805	Create a temporary proxy .
6806	Returns the gravatar URL for the given user .
6807	Build a gravatar URL .
6808	Check if a gravatar exists .
6809	Get gravatar profile URL .
6810	Generate chimera blocks .
6811	Compute the Chimera block quotient .
6812	Enumerate resonance smiles
6813	Returns a list of ResonanceMol objects .
6814	Normalize a molecule .
6815	Apply the transform to a molecule .
6816	Returns the canonicalize of a molecule .
6817	Validate a molecule .
6818	Disconnect bonds from a molecule
6819	Standardize smiles .
6820	Enumerate tutomers from smiles .
6821	Canonicalize a Tautomer string .
6822	Standardize a molecule .
6823	Returns the tautomer representation of a molecule
6824	Return the parent fragment of a molecule .
6825	Remove stereo molecule from a molecule .
6826	Remove isotopes with common weight .
6827	Returns the uncharged charge of a molecule .
6828	Get the super parent of a molecule .
6829	Entry point for the command line tool .
6830	Remove fragments from a molecule
6831	Choose the largest fragment for a molecule .
6832	Integrate an IP model .
6833	Get GitHub stats
6834	Get members of org .
6835	Get teams of org .
6836	Lists all repositories in the organization .
6837	Get the total number of contributors for a repo .
6838	Get the number of pull requests for a given repo .
6839	Get all issues in the repository .
6840	Look for readme in a GitHub repository .
6841	Get license from GitHub
6842	Get all commits for a repository .
6843	Write an organization json file
6844	Write the total number of issues to a file .
6845	Write languages to file
6846	Ensures that the directory exists .
6847	Remove a date from the database .
6848	Get gov organizations from GitHub .
6849	Connect to GitHub Enterprise .
6850	Check API limits .
6851	Connect to GitHub .
6852	Query repositories .
6853	Get organization information .
6854	Write stargazers to a file .
6855	Create a Project from a GitLab Repository object .
6856	Create a DOE project from a dictionary .
6857	Return the URL for a given license .
6858	Get data from GitHub
6859	Get all the releases from the repo
6860	get referrers list
6861	Get data from API
6862	Write json to json file
6863	Write data to file .
6864	check data redundancy
6865	Writes data to a file
6866	Write referrers to a file .
6867	Process a DOE code file .
6868	Process a DOE code JSON file .
6869	Process JSON files .
6870	Login to GitHub .
6871	Get members of org .
6872	Write log entries to a file .
6873	Connect to a stashy server
6874	Connect to Gitlab .
6875	Query repos .
6876	Convert a git repo to Sloc .
6877	Compute the labor hours in a given sloc .
6878	Remove empty strings from a dictionary
6879	Reads a GQL query from a file .
6880	Query a GitHub repository from a GitHub repository .
6881	Submit a git query
6882	Wait for a reset .
6883	Wait for a number of times .
6884	Loads data from a json file
6885	Write data to file .
6886	Create a connection to VSS .
6887	Create a project analysis client .
6888	Create a TFS core client .
6889	Create a TFS Git client .
6890	Create a tfvc client .
6891	Get git repositories for a project .
6892	Get Tfvc branches in a collection .
6893	Get year commits .
6894	Calculate the total number of commits .
6895	Writes the report to a CSV file
6896	Configure metrics .
6897	Get the metrics interface .
6898	Log a timing .
6899	Context manager for timing information .
6900	Decorator to mark a function as a timer .
6901	Generate a tag .
6902	Log a timing message .
6903	Log a histogram .
6904	Collect metrics from leader .
6905	Order enum field
6906	Return the value of the database .
6907	Convert value to python value .
6908	Get the value for this field .
6909	Return the set of nodes for the given path .
6910	Given a list of USPs return a mapping of tables to their corresponding list .
6911	Return the mean of the series .
6912	Mark the current rate .
6913	Return the mean rate .
6914	Mark the value at the given value .
6915	Send a metric to the buffer .
6916	Serialize a metric .
6917	Return a formatted metric string .
6918	Add a metric to the batch buffer .
6919	Check if an option is valid .
6920	Convert JSON data to JSON .
6921	Get the value of an option .
6922	Returns a mapping of ledger codes to guid .
6923	Get the available divisions .
6924	Return a mapping from exact_invoice_numbers to foreign_reference .
6925	Solve the SAT problem .
6926	Register a view .
6927	Register a form view .
6928	Bind HTTP methods to an injector .
6929	Register an API view .
6930	Register generic API view .
6931	Register a model view set .
6932	Create a stream from a file descriptor .
6933	Receive data from the socket .
6934	Close the stream .
6935	Called when an error occurs .
6936	Register a new watch request .
6937	Unwatch a watch .
6938	Setup a watch on a path .
6939	Set up the stream .
6940	Get an event from the stream .
6941	Triggers a touch event .
6942	Adjust the interval to success
6943	Update the interval in seconds .
6944	Close all connections
6945	Check if the connection is starved .
6946	Connect to nsqd .
6947	Query the lookupd endpoint .
6948	Set the max in flight state .
6949	Log a warning about the message .
6950	Register a new listener .
6951	Remove a callback .
6952	Trigger a specific event .
6953	Publish a message to a topic .
6954	set feature transform
6955	Compute the prediction of the model .
6956	Return the theta value for a given value .
6957	Parse log file .
6958	Remove unpaired fastq files .
6959	Merge default adapters .
6960	Run trimmomatic command .
6961	Read depth file .
6962	Run coverage analysis .
6963	Set the template file path .
6964	Set the names of the main channel .
6965	Get user channel
6966	Render a Jinja2 template .
6967	Render the template .
6968	Set the output channels .
6969	Add a sink to the main channel .
6970	Set a secondary channel .
6971	Update the attributes of this component .
6972	Set the compiler channels to include .
6973	Set the raw inputs of the process .
6974	Set the secondary inputs of the context .
6975	Set the raw inputs of the process
6976	Parse the coverage header .
6977	Parse an assembly file .
6978	Calculate the content of a sequence
6979	Filter contigs based on comparisons .
6980	Returns the total length of the assembly .
6981	Write the filtered assembly
6982	Write the assembly report to a file .
6983	r Remove inner - fork brackets .
6984	Check for errors in the inner fork .
6985	Runs the sanity checks in a pipeline .
6986	Parse a pipeline string .
6987	Find the source lane for a given fork signature .
6988	Parse a lane string into a list of lanes .
6989	Establish a linear connection to a list of processes
6990	Establish a forking connection .
6991	Adds unique identifiers to the pipeline string .
6992	Removes unique identifiers from the pipeline links .
6993	Check that the required files are open .
6994	Convert header to dictionary .
6995	Convert seconds to seconds .
6996	Convert bytes to bytes .
6997	Processes the log file .
6998	Clear inspect .
6999	Update barrier status .
7000	Retrieve the log from a file .
7001	Assess resource warnings .
7002	Update process stats .
7003	Parse the log file .
7004	Update inspect .
7005	Display overview .
7006	Moves the top line up .
7007	Adjust the right left and right left
7008	Get last n lines from log file
7009	Prepare static info files
7010	Parses the DAG file into a dict .
7011	Get the hash of the run .
7012	Get the path to the nextflow command .
7013	This function splits the fasta file into fasta files
7014	Main entry point for the pipeline .
7015	Brew innuendo pipeline
7016	Brew a recipe by name .
7017	List all available Recipes .
7018	Validate a pipeline string
7019	Builds the upstream pipeline .
7020	Builds the downstream pipeline fragment .
7021	Define the pipeline string
7022	Run the auto - pipeline
7023	Get component string .
7024	Write a report to a json file .
7025	Trim momatic log files
7026	Fix the contig names in the assembly .
7027	Clean up temporary files
7028	Parse files .
7029	Parse log file .
7030	Iterates over the entries in the database .
7031	Extract a contig ID from a string
7032	Get plot data
7033	Write plot data to a report .
7034	Run assembly report
7035	Parse an assembly file .
7036	Get summary stats .
7037	Returns a list of labels for the window
7038	Return GC property .
7039	Calculates the GC proportion of the sequence
7040	Run skesa .
7041	Write JSON report for a sample .
7042	Given a list of biased positions return the index of the biased position .
7043	Trim range assessment .
7044	Get the optimal trim position for the sample .
7045	Retrieve summary information from a file .
7046	Check the health of a summary .
7047	Parse bowtie log .
7048	Parse process name and directives .
7049	Add a dependency to the pipeline .
7050	Search the tree for the given template .
7051	Build the header
7052	Build the footer
7053	Set the main channels for each process
7054	Set the initial input process .
7055	Set secondary channels
7056	Set status and report channels .
7057	Build a config string from a resource dictionary .
7058	Return the container configuration string .
7059	Return a string representation of the parameters .
7060	Returns a string with the merged parameters .
7061	Return manifest string .
7062	Sets up the configuration
7063	Write a DAG to a file .
7064	Render the pipeline .
7065	Write configuration to a project .
7066	Export parameters to JSON .
7067	Export the directives as JSON .
7068	Fetch docker tags
7069	Build the project .
7070	Set kmer range .
7071	Main function for metaspades .
7072	Get the ID of the report .
7073	Update the trace file .
7074	Update the log file .
7075	Send a live report .
7076	Start report live update
7077	Closes connection to the server .
7078	Convert adapter fastqc adapter fastqc adapter .
7079	Main function for fastqc .
7080	Write mash distribution to output file
7081	This function takes the mash_output of the mash_file and extracts the shared hashes from the input file .
7082	Write version information to the versions file .
7083	Read the mash output into a dictionary
7084	Colorize a message .
7085	prints a dictionary of processes
7086	processes the pipeline
7087	Guess the file compression .
7088	Get the range of a qual string .
7089	Returns a list of encoded encodings .
7090	Parse the coverage table .
7091	Filter assembly to output .
7092	Filter out contigs based on coverage .
7093	Evaluate the minimum assembly coverage .
7094	Calculate assembly size and contig size .
7095	Main assembly mapping .
7096	Convert camel case name to camel case
7097	Return a map of class names to process classes .
7098	Process a newick file .
7099	Compute the convex hull of a sample .
7100	Map W to the best data
7101	median filter .
7102	Compute the gaussian knl function .
7103	Compute SSM .
7104	Compute the nc matrix given X and G .
7105	Gaussian filter .
7106	Compute the sum of the difference between the points in X .
7107	Circular shift function .
7108	r Creates the embedded space of a matrix .
7109	Plot formatting .
7110	Plot boundaries .
7111	Plot labels for each algorithm .
7112	Plot one track for a single track .
7113	Plot a PPastel2 tree .
7114	Get the segments of a feature .
7115	Compute the 2D Fourier Transform for each feature segment .
7116	Compute the similarity between two FMCs .
7117	Fit the model .
7118	Fit the model to the data .
7119	Read reference intervals and labels .
7120	Find estimations based on parameters .
7121	Save estimations in a file .
7122	Get all boundary algorithms .
7123	Get the configuration of the MSAFE algorithm .
7124	Get the files in the dataset .
7125	Read hierarchical annotations from a jams file .
7126	Get the duration of a feature file .
7127	Write a mirex file .
7128	Return the path to the dataset file .
7129	Find and align segmentations of a song .
7130	Estimate the beat track .
7131	Read beat annotations .
7132	Compute the beat sync features .
7133	Read the features file .
7134	Write the features
7135	Return a list of all parameter names .
7136	Compute framesync times .
7137	The list of frame times for each frame
7138	Get the available features .
7139	Select features with default parameters .
7140	Preprocess the MSAF algorithm .
7141	Preprocess estimates .
7142	Entry point for the speficied algorithm .
7143	Print results .
7144	Compute segmentation results .
7145	Compute the information gain .
7146	Process a single track .
7147	Returns the name of the results file .
7148	Perform segmentation on input file .
7149	Add a config variable .
7150	Compute all features for the given struct .
7151	Process one or more dataset files .
7152	Calculate the cost of a Gaussian .
7153	Normalizes the logarithm .
7154	Normalize F .
7155	Normalize X .
7156	Get the time frames for a given duration
7157	Remove empty segments .
7158	Sonify clicks on the audio .
7159	Synchronizes labeled labels .
7160	Process a segmentation level .
7161	Align the end hierarchies .
7162	Compute the distance between a node .
7163	Estimate k - means k - means
7164	Get clustered data
7165	Run k - means
7166	Compute the BIC
7167	Return the magnitude of X .
7168	Convert a json file to a numpy array .
7169	Convert a bounds file to a numpy array .
7170	Convert a json file to a numpy array .
7171	Load beats from a json file .
7172	Compute the 2 - D FFT of X
7173	Compute the most frequent labels
7174	Filter an activation matrix
7175	Get the module corresponding to boundaries_id .
7176	Get the module corresponding to labels_id .
7177	Run hierarchical segmentation .
7178	Segment an audio file using a flat segmentation algorithm .
7179	Run the algorithms on the audio file .
7180	Process a track .
7181	Process a single audio file .
7182	update beta matrix
7183	Command line entry point .
7184	Decorate a coroutine function .
7185	Compute the accumulator .
7186	Create a new task for the given translator .
7187	Spool an iterable .
7188	Send the input stream to the target stream .
7189	Decorate an HTTP interface to push the URL .
7190	Send a request to Google Translate .
7191	Return the translation table for a given language .
7192	Print translation table .
7193	Remove nodes from a network .
7194	Write network to HDF5 file .
7195	Create a Network from a Pandas HDF5 file .
7196	Set a variable to a variable
7197	Aggregate accessibility variables .
7198	Get the node_ids for each node .
7199	Plot the data .
7200	Set the pois
7201	Find the closest pois in the network .
7202	Calculate the low connectivity of a given impedance .
7203	Process a single node .
7204	Make an OSM query from the Overpass API .
7205	Builds a node query string .
7206	Query OSM node data .
7207	Check if value is a regular expression .
7208	Compares the given value against the expectation .
7209	Wrap a function as a method and return the result .
7210	Compares the given expression with the given value .
7211	Trigger methods on an instance .
7212	Check if the given request matches all the patterns .
7213	Get matcher by name .
7214	Initialize a matcher .
7215	Set the body of the response .
7216	Sets the response body .
7217	Set a key in the container
7218	Append functions to target .
7219	Trigger a request .
7220	Sets the URL matcher for the request .
7221	Set headers .
7222	Add headers present .
7223	Expects a list of headers .
7224	Set the Content - Type header .
7225	Add a query matcher to the request .
7226	Set the body of the request .
7227	Set the JSON response .
7228	Set the XML matcher for the request .
7229	Load a file from a file .
7230	Set the persist state .
7231	Set the error .
7232	Create a Response instance .
7233	Match request .
7234	Activate a coroutine function .
7235	Set the mock engine
7236	Enable networking .
7237	Create a new HTTP mock .
7238	Remove a mock from this instance .
7239	Activates the engine .
7240	Disable the mock engine .
7241	Return True if the request should use network filters .
7242	Match request .
7243	Return a copy of this request .
7244	Decorator to activate the engine .
7245	Context manager .
7246	Add interceptor to the engine .
7247	Remove an interceptor .
7248	Get a setting from the settings dictionary .
7249	Returns the decrypted SQL .
7250	Save the original value .
7251	Returns a placeholder for the given value .
7252	Get a DecryptedCol by alias .
7253	Generate a placeholder for the publicPG key .
7254	Hunt repeated keys in YAML format .
7255	Base regression method
7256	Returns the Cinv of the tree .
7257	Iterates over all non - terminals in the tree .
7258	Calculates the averages of all nodes in the tree .
7259	r Calculate the average averages of a node .
7260	Compute the explained variance of the tree .
7261	Compute a regression model
7262	Find the best root in the tree .
7263	Set tc
7264	Calculate the branch counts at each point .
7265	Calculate the cost of the merger .
7266	Attach the merger cost to the tree .
7267	Optimize coalescent time scale .
7268	Convert profile to sequence
7269	Normalizes profile .
7270	Set the GTR
7271	Set the GTR model .
7272	Set the sequence length
7273	Assign sequences to nodes .
7274	Prepare the tree .
7275	Prepare nodes for nodes .
7276	Calculate the dist2root of the tree .
7277	Reconstruct the tree an acstral sequences .
7278	Returns the mutation matrix for a given node .
7279	Returns the expanded sequence .
7280	Create the Fitch profiles
7281	Return the state of a node .
7282	Find the intersection of two arrays .
7283	Return the sequence of the sequence at pos .
7284	The ancestral likelihood of the tree .
7285	Returns the maximum branch length for the given node .
7286	Optimize branch length in tree .
7287	Optimize branch length
7288	Compute optimal branch length
7289	Optimize sequences and branch length .
7290	Reconstructs the alignment from the tree
7291	Returns Q matrix
7292	Create a new GTR object .
7293	Return standard model instance .
7294	Fix the GTR rate matrix
7295	Return the probability of t at t t .
7296	Compute optimal T of sequence p .
7297	Computes the optimal probability of the given sequence .
7298	Returns the probability of t profiles at time t .
7299	Evolve a profile .
7300	Compute the log likelihood of a sequence .
7301	Set branch length mode .
7302	Compute the slope of the tree .
7303	Plot root to tip
7304	resolve polytomies
7305	Print tree log - likelihood .
7306	add coalescent prior to tree
7307	Find the best root position
7308	Assure a tree
7309	Create GTR model
7310	Read in a VCF file .
7311	Reconstruction of ancestral sequences .
7312	Calculate the FWHM of a distribution .
7313	Create a new distribution .
7314	Multiply a set of distributions
7315	Assign dates to the tree
7316	Setup tree regression
7317	Create a maximum likelihood tree .
7318	Compute the likelihood of the tree .
7319	Convert the tree to a human readable date .
7320	Return the date uncertainty of a node .
7321	Calculate the maximum posterior region of a node .
7322	Returns the minimum interpolation
7323	Compute the median interpolation of the data .
7324	Returns the numeric date of the current year
7325	Create a DataFrames from a regression model .
7326	Connect to guacd server .
7327	Close the connection .
7328	Receive an instruction .
7329	Send data to the server .
7330	Send an instruction .
7331	Establish a handshake .
7332	Convert unicode string to UTF - 8 .
7333	Load an instruction .
7334	Encode an argument
7335	Encodes the instruction .
7336	Returns the URL for the given class .
7337	Returns the URL for this instance .
7338	Returns the URL for the given class .
7339	Download the vault .
7340	Return the parent object of this job .
7341	Prompt user for credentials .
7342	Login to solvebio .
7343	Show information about the user .
7344	Print user information .
7345	Return a new QuerySet with the given filters .
7346	Return a copy of this filter with the given range .
7347	Return a new VariantSet with the given position .
7348	Returns a list of facets for this query .
7349	Process filters .
7350	Returns the next row .
7351	Executes a query .
7352	Create a new dataset migration .
7353	Entry point for solvebio .
7354	Download all files from remote_path to local_path
7355	Construct an instance from a dictionary .
7356	Logout the OAuth token .
7357	Perform an HTTP request .
7358	Return the child object of this task .
7359	Cancel the job .
7360	Parse SNP annotation fields .
7361	Convert a row to a dictionary .
7362	Get credentials from netrc .
7363	Save the configuration to a file .
7364	Format a value .
7365	Normalize tabular data .
7366	Build a row of cells .
7367	Build a single line .
7368	Add alignment attributes to MediaWiki cell .
7369	Format a table .
7370	Create a new Dataset migration .
7371	Validate a full path .
7372	Uploads files to the vault
7373	Validate a Vault path .
7374	Validate the API host URL .
7375	Add a list of paths to the manifest .
7376	Annotate records .
7377	Evaluate the expression .
7378	Set format name .
7379	Register a new format formatter .
7380	Format the data according to the format .
7381	Tabulate data using tabulate .
7382	Get user config directory .
7383	Get system config directories .
7384	Read default config .
7385	Read config files .
7386	Return user config file
7387	List of system config files .
7388	Return a list of paths to the additional files .
7389	Write default config file .
7390	Read configuration files .
7391	Truncate a string .
7392	Replace characters in a string .
7393	Run commands in a sequence .
7394	Apply command options .
7395	Apply option to command .
7396	Initialize the options .
7397	Run fix on branch .
7398	Run the command .
7399	Truncate a list of strings .
7400	Format numbers .
7401	Format a row .
7402	Display a vertical table .
7403	Generate a table adapter .
7404	Render a template file .
7405	Is the certificate type?
7406	Check if the given type is a bool .
7407	Check if type is a binary type .
7408	Generates a key for the given template .
7409	Generate a public key pair .
7410	Find all the objects in the current session .
7411	Insert QR image .
7412	Export a panel
7413	Return the first weekday .
7414	Repeat a day .
7415	Repeat the start and end times
7416	Internal helper for bweekly .
7417	Handle a single chunk event .
7418	Export all causatives in a document .
7419	Create a document containing verified variants .
7420	Export a list of variants
7421	Add or remove an admin role .
7422	List all str variants
7423	Retrieve SV variant data
7424	Get str variant
7425	Verify a variant .
7426	Export data for clinvar
7427	Get variants for a variant .
7428	Retrieve a variant acmg
7429	Get an evaluation .
7430	Get Acmg classification .
7431	Upload HGNC symbols to store
7432	Download verified files .
7433	Return a mapping of aliases to aliases .
7434	Add incomplete penetrance information to genes
7435	Link genes to genes
7436	Send request to MME server
7437	Get the list of connected nodes .
7438	Get the cytoband coordinates
7439	Get the sub - category for subcategory .
7440	Calculate the length of a variant
7441	Get the end of a variant
7442	Parse the coordinates of a variant
7443	Check chromosomic coordinates .
7444	Update a panel
7445	Update a panel .
7446	Export a single panel
7447	Edit an existing gene .
7448	Save a delivery report to a case .
7449	Return photypes matching query
7450	List whitelist ids .
7451	Build phenotype object
7452	Get information about a GNC gene .
7453	Convert HGNC query to JSON .
7454	Display the list of institutes .
7455	List transcripts .
7456	Display a list of events for a given day .
7457	Retrieve variants from a case .
7458	Retrieve all str variants from a case .
7459	Return a single variant
7460	Create a single variant
7461	Parse a variant into the database
7462	Generate the header for all variants of a case .
7463	Get variant information
7464	Get predictions for a gene .
7465	Create a variant case
7466	Try to find a bai file .
7467	Retrieve observation data for a variant .
7468	Parse a gene object
7469	Return a string representation of a transcript
7470	Returns the end position of a variant
7471	Determine the most common frequency of a variant
7472	Convert clinsig objects to human format
7473	Generate a link to a thousandg variant .
7474	Retrieve the cosmic link for a variant .
7475	Generate URL for a variant .
7476	Generate URL for a variant
7477	Return human representation of spidex .
7478	Return list of manual inheritance models for a variant
7479	Return a list of callers for a given variant
7480	Return all possible variants for a case
7481	Export clinvar information .
7482	Get clinvars for a given variant .
7483	Return variant information for a given variant .
7484	Evaluate a variant on the store .
7485	Convert an evaluation object into an evaluation object .
7486	Upload HNC symbols to store
7487	Create an Excel file for verified variants .
7488	Export all genes to . bed format
7489	Parse clnsig and transcripts .
7490	Parse a list of compounds into a dictionary
7491	Print out all genes .
7492	Build an individual from the database
7493	Load variants for a case
7494	Get a case .
7495	List available collections .
7496	Install an instance .
7497	Update an institute .
7498	Get a file handle .
7499	Get net number
7500	Get next and previous values .
7501	Check year and month .
7502	Check if the day is in the week .
7503	Parse case data .
7504	Add Peddy information to config file .
7505	Parse an individual into a dictionary .
7506	Parse individuals .
7507	Parse a single case .
7508	Parse a PED file into a list of samples .
7509	Build an evaluation object .
7510	Export mitochondrial variants for a case .
7511	Check if a pathogener is a pathogener .
7512	Check if a list of pvs is likely pathogenic .
7513	Return True if bs_terms is likely Benign .
7514	Extracts uncertain significance from a list of terms .
7515	Add additional information to a variant
7516	Fetch variants from a case .
7517	Return sanger variants
7518	Returns a single variant object
7519	Retrieve variants from the database .
7520	Check if an institute is verified .
7521	Returns a list of all causatives in the case .
7522	Return a list of variants that are causative in the case .
7523	Iterate over all causatives of a variant
7524	Delete variants for a case .
7525	Returns all the variants that overlap the given case .
7526	Get all the variants that have been evaluated for a particular case .
7527	Retrieve a VCF file from a case .
7528	Retrieve variants for a given sample
7529	Get a MongoDB connection
7530	Returns a list of submission objects for the given variant .
7531	Given a list of objects of clinvar objects return a dictionary containing all the fields that are present in the submission object .
7532	Given a list of submission objects return a list of csv lines
7533	Load ensembl transcripts
7534	Load a panel
7535	Build an exon .
7536	Delete a panel
7537	Delete all indexes .
7538	Delete a user from the database .
7539	Delete the genes collection .
7540	Delete exons from Scout
7541	Delete a case .
7542	List individuals .
7543	Parse matches .
7544	Display a list of cases .
7545	Load user from store .
7546	Handle login request .
7547	Build an institute object .
7548	Delete an event .
7549	Create event in event collection .
7550	Get events for a variant .
7551	Get events for a user .
7552	Add a phenotype term to the case
7553	Removes a phenotype term from the case .
7554	Create an event for a comment on a case .
7555	Parse a variant into a list of genotypes .
7556	Check if the given position is within the region .
7557	Search HPO terms
7558	List transcripts in scoutl .
7559	Load exons
7560	Display a GNC region .
7561	Return a QuerySet of all events for a given month .
7562	Return a queryset of live events .
7563	Parse requirements . txt
7564	Get an existing gene from the panel .
7565	Update a panel with the given csv_lines
7566	create new panel
7567	Export the panel to a dictionary
7568	Return information about an archive .
7569	Update scout case
7570	Migrate a case
7571	Run the research
7572	Load hgnc genes .
7573	List HPO terms .
7574	Create a Flask application .
7575	Configure extensions .
7576	Register blueprints .
7577	Configure channels coverage .
7578	List aliases for the given symbol
7579	Build a panel
7580	Export verified variants
7581	Export variants for a case .
7582	Get a VCF entry from a variant object .
7583	Serve mongod server
7584	Generate an MD5 key from a list of arguments .
7585	Initialize the MONGO database .
7586	Setup the database
7587	Run scout index .
7588	Setup the mongo database .
7589	Run scout setup .
7590	Setup scout - demo
7591	List all institutes .
7592	Parse genetic models .
7593	Show a list of panels
7594	Add institute to database
7595	Update an institute .
7596	Fetch the institute by id
7597	Check if a date is valid .
7598	Get a datetime object from a date string .
7599	Export hpo genes
7600	Parse the rank score entry of a case .
7601	Add a user .
7602	Check connection against MongoDB
7603	Initialize the mongodb connection
7604	Load delivery report in database .
7605	Add user to database .
7606	Run pileup
7607	Load ensembl exons .
7608	Update compounds for a case .
7609	Add links to the gene object
7610	Show gene aliases for a given hgnc symbol .
7611	Parse HGNC line .
7612	Parse hgnc genes .
7613	Get an open clinvar submission .
7614	Updates clinvar_id with the given id
7615	Get clinvar_subm_id for the given id
7616	Add variants and case data to clinvar collection .
7617	Update the status of a clinvar submission .
7618	Get all clinvar submissions
7619	Delete a clinvar object
7620	Convert a case to a dictionary of clinvars .
7621	Parse HPO OBO output .
7622	List all genes in the database .
7623	Return a list of genes .
7624	Return a JSON representation of genes
7625	Check if panels exist .
7626	Load clinical variants for a case .
7627	Load a case from the database .
7628	Decorator to render a function as a template .
7629	Display institute and case .
7630	Return the list of institutes for the given login_user .
7631	Get the HGNC ID for the given HNC symbol .
7632	Update a panel .
7633	Load all disease terms
7634	Load the disease terms
7635	Parse frequencies for a variant .
7636	Parse the frequency of a variant
7637	Parse SV frequencies .
7638	List users .
7639	Build a HGGene object from a Gene object
7640	Load a panel from a parsed panel .
7641	Load OIM panel from database
7642	Compare two mim panels .
7643	Update the database version for each gene
7644	Add a panel to the database .
7645	Returns a panel object
7646	Delete a panel
7647	Get a gene panel from the database .
7648	Get gene panels .
7649	Convert gene to panels
7650	Update a panel
7651	Add pending actions to the panel .
7652	Apply pending updates to the panel
7653	Return all clinical symbols in a case
7654	List cases .
7655	Send message to SMTP
7656	Load indexes .
7657	Update indexes in the database
7658	Drop all indexes .
7659	Build a mongo query for a variant .
7660	Build a mongo query
7661	Add clinsig filter to MongoDB
7662	Add coordinates to mongo query
7663	Add a gene filter to the query
7664	Dipe the database .
7665	Parse a panel from a CSV file .
7666	Build clnsig object .
7667	Load gene bulk into database .
7668	Load transcript bulk into database
7669	Load transcript objects into database .
7670	Fetches a single gene by its identifier .
7671	Get the ID of a GNC symbol
7672	Search for genes with given symbol
7673	Fetch all genes
7674	Get number of genes for a given build
7675	Drop the genes collection .
7676	Drop the transcripts collection .
7677	Drop the exons collection .
7678	Fetch all ensembl transcripts
7679	Return a dict of hgnc_to_gene
7680	Get gene by symbol
7681	Get all genes by alias .
7682	Get all ensembl genes
7683	Retrieve the HGNC symbol associated with the given alias .
7684	Add hgnc_id to the gene
7685	Get the coding intervals for each chromosome
7686	Update omim panel
7687	Get a list of cases
7688	Get a single case .
7689	Get matches from MME server .
7690	Run matchmaker .
7691	Delete a matchmaker .
7692	Render a case report .
7693	Render a case report .
7694	Display a diagnostic about a case .
7695	List of phenotype items in a case .
7696	Action for phenotype actions .
7697	View an event .
7698	Update the status of a case .
7699	Assign an instance to the store .
7700	List HPO terms .
7701	Handles validation of a variant .
7702	Mark a variant as causative .
7703	Get the delivery report of a case
7704	Share a case .
7705	Rerun the current user .
7706	Handle a research request .
7707	Download vcf2 cytosure .
7708	Retrieve multiqc data from the store .
7709	Return a list of cases grouped by status .
7710	Return the content of a case report .
7711	Generate coverage report contents for a case .
7712	Retrieve clinvar submissions .
7713	Creates an excel file for the given case .
7714	Update the case s synopsis
7715	Return a list of henomizer diseases
7716	Convert VCF to cytosure
7717	Wrapper for multiqc .
7718	Returns a list of variants that are unevaluated by sanger .
7719	Add a user to the matchmaker database .
7720	Send a DELETE request to the matchmaker server
7721	Returns a list of matches for the matchmaker server
7722	Perform MME search on a case .
7723	Drops all genes from omim
7724	Parse callers from a variant
7725	Build a transcript
7726	Load an institute into the database .
7727	Determine the cadd of a variant
7728	Run a case .
7729	Update a variant
7730	Updates the variant rank by rank score
7731	Update the compounds for a single variant
7732	Update all compounds in a list of variants
7733	Update compound variants in bulk .
7734	Update compounds for a case .
7735	Load a variant into the database .
7736	Upserts a variant into the database .
7737	Load multiple variants into the database .
7738	Create an event to be assigned to a case .
7739	Share a case
7740	Called when a case is detected .
7741	Marks the case as checked
7742	Order verification for a variant .
7743	Return all sanger variants ordered by case_id .
7744	Validate a variant
7745	Marks a variant as causative in the case .
7746	Update a dismiss variant .
7747	Updates an acmg
7748	Parse simple_id and display_name .
7749	Parse simple ID .
7750	Parse a document ID .
7751	Convert HGNC ID to database .
7752	Get a variant id from a variant object .
7753	Returns the number of cases
7754	Update dynamic gene list
7755	Fetch a case .
7756	Delete case .
7757	Add a case to the case collection .
7758	Replace a case .
7759	Update a case s variant id
7760	Submit an evaluation for a variant .
7761	Get evaluations for a variant .
7762	Parse the transcript lines into dictionaries
7763	Parse ensembl gene request
7764	Parse ensembl transcript request
7765	Parse ensembl line
7766	Parse ensembl genes from file .
7767	Parse ensembl exons .
7768	Parse ensembl exon request .
7769	Initialize logging .
7770	Parse a line of omim .
7771	Parse MORID Morid lines .
7772	Get phenotypes for each gene .
7773	Command line interface for Scout .
7774	Convert string to int or float
7775	Format a month .
7776	Format the day list .
7777	Format the month name .
7778	Add popover information .
7779	Get panel info .
7780	Parse HGNC gene information .
7781	Parse genes from a list of gene names .
7782	Parse a gene panel
7783	List all diseases
7784	Drop HPO terms
7785	Return a dict of users and their rank .
7786	Parse conservation dictionary
7787	Parse the conservation of a variant .
7788	Get general case information .
7789	Returns a list of cases grouped by the status .
7790	Convert context to json
7791	Get the year and month
7792	Check for cancelled events .
7793	Fetch a single hpo term
7794	Search HPO terms .
7795	Get a disease term
7796	Get all disease terms for a gene .
7797	Load a disease term into the database .
7798	Generate hpo gene list .
7799	Read an HDF5 file .
7800	Setup frequency axis
7801	Setup time axis
7802	Read a filterbank file .
7803	Compute the last time from the header
7804	Blank the DC bin .
7805	Print information about the file .
7806	Calculate extent .
7807	Plot waterfall .
7808	Plot the time series .
7809	Write the signal bank to a filterbank file .
7810	Calibrate the band pass .
7811	Convert data to coarse
7812	Apply Mueller .
7813	Calculate mueller matrix
7814	Equation for Fracpols
7815	Write waterfalls and crosspols .
7816	Find the closest absolute value in xarr .
7817	Rebin the data .
7818	Unpack an 8 - bit array .
7819	Compute the difference between two waterfalls
7820	Plot the stokes diode .
7821	Plot calibrated noise diode
7822	Plot the gain offsets in a waterfall .
7823	Open file .
7824	Setup the selection range .
7825	Calculate the selection size .
7826	Calculate the selection shape .
7827	Setup channel start and stop indices
7828	Set the frequencies for the channel
7829	Populate the time axis timestamps .
7830	Populate the frequency array
7831	Calculate the number of coarse channels .
7832	Calculate the number of blobs .
7833	Determine if the data array is heavy .
7834	Read data .
7835	read all data from file
7836	Read a row from the file
7837	Read data .
7838	Update the header
7839	Print information about the file .
7840	Write data to a file .
7841	Write the data to an HDF5 file .
7842	Write filter bank to hdf5 .
7843	Determine the size of the blob in chunks
7844	Detect chunk dimensions .
7845	Grab plot data
7846	Command line tool to create spectra .
7847	Read the first header from the file .
7848	Find the number of data blocks in the file
7849	Print stats from the stream .
7850	Plot histogram .
7851	Generate filterbank header
7852	find the size of the header of a file
7853	%prog match fils
7854	Command line tool for creating HDF5 raw files .
7855	Fold a diode
7856	Integrate a waterfall .
7857	Calculate the calfluxes
7858	Return the center frequencies for each channel
7859	Calculate noise diode spectra .
7860	r Calculate the diode spectral spectrum .
7861	r Calculate tsys . tsys
7862	Calculate the fluxes for each source in a waterfall .
7863	Return the length of the header in a file .
7864	Check if a file is a filter bank .
7865	Change the header of a file .
7866	Generate a signature header string .
7867	Convert angle to sigproc .
7868	Calculate the number of ints in a file .
7869	Convert traceback to dict .
7870	Creates a sub - parser for a record type .
7871	Create parser for zonefile line parser
7872	Remove comments from a string .
7873	Add default name .
7874	Parse a single line .
7875	Parse a text file into a dictionary .
7876	Parse a zone file .
7877	Quote a field in a dictionary
7878	Parse an Avro schema string .
7879	Write a list of classes to a Python package .
7880	Return the source code for a class .
7881	Disable auto store .
7882	Convert a record to JSON compatible format .
7883	Load a serialized record from a dictionary .
7884	Deserialize a JSON record .
7885	Add a schema .
7886	Returns the record with the given name .
7887	JSON representation of the object
7888	Decorate a mixin class
7889	Create a new metacls from a class
7890	Return the schema for a record .
7891	Get the root schema for a record .
7892	A generator that yields the lines from the input stream .
7893	Write output to output_stream .
7894	Push a new OrderedDict into a new OrderedDict .
7895	Perform a query against this resource .
7896	Perform a filter on this search .
7897	Return a list of Entity objects with the given attributes .
7898	Return an Entity object from the result .
7899	Looks up a quote for a quote .
7900	Escape a single filter .
7901	Create an elementary rotation matrix .
7902	Construct a covariance matrix from a vector of parameters
7903	Calculate the average value of the sky for a given magnitude .
7904	calc parallax error
7905	Return the magnitude error in G .
7906	Return the magnitude error of a G .
7907	Make matplotlib plot .
7908	Return the average number of transits .
7909	Calculate the angular distance between two points .
7910	Transform cartesian coordinates .
7911	Transform sky coordinates .
7912	Transform a covariance matrix into a matrix .
7913	Returns the scaling factor of an observable .
7914	Make matplotlib plot .
7915	Make a matplotlib plot .
7916	Returns a function that applies to each value in the given value .
7917	A decorator that raises QDebug exceptions .
7918	Unquote a value .
7919	Apply a function to each item in the collection .
7920	Exclude elements from this RDD .
7921	Return a new Collection containing only the elements in the collection .
7922	Return a new Collection with each item in the collection .
7923	Return a copy of this collection with elements removed .
7924	Zip the elements of this collection into a new collection .
7925	Find nodes that match the given criteria .
7926	Get path to serach .
7927	Iterate over a group .
7928	Iterate over register options .
7929	Return a string representation of an event .
7930	Given a list of events returns a list of scheduled runs .
7931	Report results .
7932	Print results to stdout .
7933	Print the results .
7934	Clean code .
7935	Round x to next base .
7936	Given a list of indices return the indices of each block .
7937	Calculate the cache access .
7938	Calculate cycles per cache .
7939	Analyze the kernel .
7940	Analyze the CCA block .
7941	Strip comments and whitespace from a list of lines .
7942	Strip unreferenced labels .
7943	Select the best block in the assembly .
7944	Select the increment of the store block .
7945	Display a list of blocks in an assembly file
7946	Insert markers in asm_lines .
7947	Perform ICA instrumentation .
7948	Entry point for the script .
7949	Simulate the kernel .
7950	Generate numbers from start to stop .
7951	Get the last modified datetime .
7952	Check arguments are valid .
7953	Main entry point .
7954	Entry point for merging two dictionaries .
7955	Create symbolic symbol .
7956	Transform a multidimensional array to its type .
7957	Transform a multidim reference to a reference ref .
7958	Recursively find all nodes of a given type .
7959	Decorator to force iterable .
7960	Check if the kernel is valid .
7961	Set a constant .
7962	Substitutes constant expressions .
7963	Get the sizes of the variable .
7964	Calculate relative offset .
7965	Remove duplicate accessors .
7966	Return the length of the iteration .
7967	Generate loop stack
7968	Return a list of all symbols in this expression .
7969	Return a dictionary mapping variables to symbols .
7970	Compile relative distances for each variable .
7971	Convert global iterator to indices .
7972	Get the global iterator for the loop stack .
7973	Convert indices to global iterator .
7974	Returns an iterator over the global iteration .
7975	Print kernel information .
7976	Print information about the variables .
7977	Print information about constants .
7978	Print the kernel code to stdout .
7979	Convert math AST to sympy .
7980	Get the offsets of an array reference .
7981	Get the base name of a reference .
7982	Get the type of the loop .
7983	Build const declarations .
7984	Return array declarations .
7985	Return a list of blocks in the kernel .
7986	Build array declarations .
7987	Find the innermost loop .
7988	Build array initializations .
7989	Build dummy calls .
7990	Builds the kernel function declaration .
7991	Build scalar declarations .
7992	Get the code for the kernel .
7993	Builds a kernel call .
7994	Get the main code for this module .
7995	Analysis the kernel .
7996	Build an executable .
7997	Convert a string to a sympy expression .
7998	Get the identifier of the dataset .
7999	Get the last modified datetime .
8000	Create a CacheSimulator object from the memory hierarchy .
8001	Get the bandwidth of the benchmark .
8002	Select compiler and flags from machine description file .
8003	Parse a perfctr event .
8004	Enlarge overlapping ranges .
8005	Get the path to the header .
8006	Align the iteration with cleline boundary .
8007	Get the total load of the machine .
8008	Get the total HITs .
8009	Get the number of misses in the memory hierarchy .
8010	Get the number of stores in the machine .
8011	Get the evicts .
8012	Get information about the cache .
8013	Replace an environment variable with the given value .
8014	Add options to the argument group .
8015	Print results to stdout .
8016	Parse the README description .
8017	Schedule a retry .
8018	Build a purchase item .
8019	Record a purchase in Sailthru .
8020	Get course data from Sailthru
8021	Get course content from ecommerce API .
8022	Update the user s unenroll list
8023	Sends an email to a course refund .
8024	Sends an email to an offer assignment notification .
8025	Return a dictionary with logging information .
8026	Retry an order .
8027	Fulfills an order .
8028	Get a Sailthru client
8029	Get the value of a key .
8030	Set a cache object .
8031	Get the configuration value for the given variable .
8032	Get the filename of the overrides file .
8033	Find a value in a dictionary by version .
8034	Returns the Eplus version .
8035	Dictionary of file references .
8036	Populate the table from json data .
8037	Returns the list of external files .
8038	Set default values for all tables .
8039	Check if extensible tags are present .
8040	Returns the name of the extended field .
8041	A mapping from short_ref to short_refs .
8042	Get the value of a column .
8043	Update the value at the given index .
8044	Update the database .
8045	Set the default value of the field .
8046	Add fields to the record .
8047	Pop the value at index .
8048	Insert a value at index .
8049	Delete the record
8050	Register a record hook .
8051	Register a link .
8052	Creates a regex for the given intent .
8053	Return the duration of a given time .
8054	Serialize the event to a dictionary .
8055	Make an HTTP request .
8056	Return a list of endpoints for a given service type .
8057	Try to create a directory .
8058	Configure the service
8059	Register a service capture .
8060	Set the state of a recording .
8061	Update the status of an event .
8062	Update agent state .
8063	Return the configuration file .
8064	Update the configuration .
8065	Check the server .
8066	Initialize logging .
8067	Display preview images .
8068	Serve an image .
8069	Run multiple processes .
8070	Parse a vcal file into a dictionary
8071	Get the schedule
8072	Main control loop .
8073	Start the control loop
8074	Makes an error response
8075	Makes a data response
8076	Get internal state .
8077	List upcoming events .
8078	Get a single event
8079	Delete event via API .
8080	Modify an event
8081	Extract parameters from configuration file
8082	Ingest an event .
8083	Start a capture
8084	Render the HTML fragment to a fragment .
8085	Return a list of all available resources .
8086	Return a dictionary representation of this resource .
8087	Create a fragment from a dictionary .
8088	Add content to the message .
8089	Add a fragment resource .
8090	Add a fragment resource .
8091	Initialize the javascript function .
8092	Convert all resources to HTML .
8093	Convert a resource to HTML .
8094	Handle GET requests .
8095	Render a standalone HTML fragment .
8096	Render a fragment to standalone HTML .
8097	Calculate the fast power distribution
8098	Convert values to one dimension .
8099	Lookup values from an error table .
8100	Perform a single chromatogram .
8101	Returns a subset of the final error table .
8102	Extract summary error table .
8103	Calculate error statistics .
8104	Find the cutoff .
8105	Run XGBoost algorithm .
8106	Infer peptidoforms .
8107	Infer peptides .
8108	Infer proteins from a file .
8109	Subsample an OW file .
8110	Reduce an OW file .
8111	Backpropagate an OWR file .
8112	Filter sqmass files by maximum number of precursor and peak groups .
8113	Get group by id .
8114	Create a group .
8115	Delete a group .
8116	Get group members .
8117	Update members in a group .
8118	Get the effective member count .
8119	Check if a group is an effective member .
8120	Modify the conf file .
8121	Create a dataset .
8122	Decrypt the contents of a key .
8123	Get stdin .
8124	Get the stdout .
8125	Get the stderr output .
8126	Get debug output .
8127	Context manager that yields stdin and closes the process .
8128	Context manager that yields the stdout .
8129	Context manager for subprocess stderr .
8130	Context manager for debugging .
8131	Empty account .
8132	Get an empty container .
8133	Decorator to convert stdout to stdout
8134	Decorator for stderr .
8135	Write an error message to a file .
8136	Print help message .
8137	Print usage information .
8138	Print version information .
8139	Perform a request .
8140	POST an account .
8141	Delete an account
8142	Updates a container .
8143	Returns the HEAD of an object .
8144	Get an object .
8145	Upload an object to a container .
8146	POST an object to a container .
8147	Resolve an option in the given section .
8148	Return a copy of this context
8149	Write headers to fp .
8150	Display authentication information .
8151	Generate a temporary URL .
8152	Quote a value
8153	Watch for a container
8154	Get a new client .
8155	A generator for AES - CBC encryption .
8156	Decrypt an encrypted stream .
8157	Upload a directory structure
8158	Put an account .
8159	Put a container .
8160	Return the manifest body .
8161	Create a new container
8162	Get a temporary URL .
8163	Display trans - id information .
8164	Print help for a command .
8165	Check if the buffer is empty .
8166	Encrypts the given key using the given key .
8167	Get the status of a repository .
8168	Get pull request information
8169	Get pull requests for a repository .
8170	Mark the slider items as published
8171	Return the list of slider items .
8172	Render a hero slider .
8173	Acquire one or more readers .
8174	Release the number of readers .
8175	Acquire the writer lock .
8176	Add a task to the registry .
8177	Remove a task from the registry .
8178	Get a task by its ID .
8179	Return a list of all available tasks .
8180	Returns the configuration as a dictionary .
8181	Create a Task from a dictionary .
8182	Execute a perceval job .
8183	Initialize the archive manager .
8184	Run the job .
8185	Execute the backend .
8186	Create an ElasticSearch index
8187	Create a mapping in ElasticSearch
8188	JSON encoder function
8189	Write items to writer .
8190	Add a task to the scheduler .
8191	Cancel a task .
8192	Return all queued items in the queue .
8193	Validate the arguments .
8194	Parse archive args .
8195	Publish a job to the queue .
8196	Schedule a task on a queue .
8197	Cancel a job .
8198	Run the listener .
8199	Listen for messages .
8200	Starts the scheduler .
8201	Schedules a task .
8202	Cancel a scheduled task .
8203	Handle a successful job .
8204	Handle a failed job .
8205	Build job arguments from task .
8206	Get the contents of a secret .
8207	Register admin .
8208	Decorator to register an admin view .
8209	Reverse the action .
8210	Get view name .
8211	Get a version number from VERSION .
8212	Resolve an alias .
8213	Get an engine from a string .
8214	Parse a database path .
8215	Parse database configuration from URL .
8216	Parse a database URL .
8217	Login form .
8218	List users .
8219	Create a new password .
8220	Add detail_name to the view field .
8221	Parse a boolean value .
8222	Parse an integer .
8223	Get the parser corresponding to the given type .
8224	Get Django settings from environment variables .
8225	Create a ModelDict from a model .
8226	Encode base64 encoded string .
8227	Create a field from field_info .
8228	Create a validator from a dict .
8229	Computes the cartesian product of a parameter dictionary .
8230	Find unique points in explored_parameters .
8231	Change logging arguments .
8232	Decorator to use simple logging configuration .
8233	Try to create directories for a given filename .
8234	Get a list of strings .
8235	Rename log file .
8236	Set the logger .
8237	Extract replacements from a trajectory .
8238	Print the progress bar .
8239	Check if the argument of a parser exists .
8240	Convert a parser to a memory file .
8241	Find multiproc options .
8242	Find multiproc_dict from a dictionary .
8243	Check log config .
8244	Parse the log file and return the parser .
8245	Convert a dictionary of log files into a dictionary .
8246	Create logging handlers and tools .
8247	Finalize all tools .
8248	Start sys . stdout .
8249	Write the given buffer to stdout .
8250	Compare two results .
8251	Compare two parameters .
8252	Decorator to run a trajectory .
8253	Decorator to mark functions as deprecated .
8254	Decorator for mutually exclusive methods .
8255	Decorator to mark a function as deprecated .
8256	Decorator to retry a function .
8257	Mark class as prefix naming .
8258	Add parameters to the network .
8259	Run the network
8260	Compute the Euler scheme .
8261	Add parameters to the trajectory .
8262	Compute the difference between two values .
8263	Create a storage service .
8264	Create a storage service .
8265	Add parameters to the trajectory .
8266	Compute the difference between two values .
8267	Compact HDF5 file .
8268	Check if parameters are explored in group node .
8269	Build the model eqs for the model .
8270	Pre - build the model .
8271	Build the model .
8272	Build the equations for a trajectory
8273	Check if the network is pre - build .
8274	Build the connections from the trajectory
8275	Add parameters to the simulation .
8276	Compute the fano factor for a given neuron .
8277	Compute the mean fano factor .
8278	Compute the mean fano factor over all subruns .
8279	Add monitors to a network .
8280	Add monitors to the network
8281	Create the output folder for the plot .
8282	Plot a result
8283	Print the graph of the spike monitors .
8284	Analyse the exrun .
8285	Get the batch number .
8286	Explore a batch .
8287	Node variables .
8288	Node function .
8289	Rename the object .
8290	Set the details of this instance .
8291	Return the message for a node
8292	Recursively remove a sub - subtree .
8293	Delete a node .
8294	Removes a node or leaf from the tree .
8295	Removes a node from the tree .
8296	Translate a shortcut name .
8297	Add prefixes to split_names .
8298	Determine the type of a node .
8299	Add a generic instance to the graph .
8300	Helper method to add a group to the tree .
8301	Create a link to a node .
8302	Check for invalid names .
8303	Creates an instance of type_name with the given name .
8304	Create or create a parameter or result .
8305	Set the details of a tree node .
8306	Iterate over all the nodes of a given node .
8307	Return an iterator for a child node .
8308	Iterate through a bfs traversal .
8309	Perform a fast search .
8310	Search a node by its key .
8311	Perform a backwards search on a node .
8312	The kids of this node .
8313	Add a group from storage .
8314	Add a leaf from the storage .
8315	Returns a list of all data in the directory
8316	Returns a debug tree
8317	Get the parent of the file
8318	Add a group .
8319	Add a link to the group .
8320	Remove a link .
8321	Add a leaf .
8322	Remove this node .
8323	Remove a child from this group .
8324	Returns True if the given item is contained in the trajectory .
8325	Get the default value of a file .
8326	Return the children of this node .
8327	Get groups .
8328	Return list of leaves .
8329	Return a copy of the links
8330	Store a child .
8331	Store this trajectory .
8332	Load a child node .
8333	Load trajectory .
8334	Add a parameter group .
8335	Add a parameter .
8336	Add a result group .
8337	Add a result .
8338	Add a derived parameter group .
8339	Add a derived parameter .
8340	Add a configuration group .
8341	Add a configuration group .
8342	Evaluates the individual .
8343	Add git commit variables .
8344	Make a git commit .
8345	Flatten a nested dictionary .
8346	Nest a nested dictionary .
8347	Create a progressbar .
8348	Get argspec from a function .
8349	Given a function and a dictionary of keyword arguments return a copy of the kwargs that match the kwargs .
8350	Formats the given timestamp .
8351	Connect to a TCP port
8352	Ensure that a directory exists .
8353	Reset the interval .
8354	Get the remaining time in seconds .
8355	Convert self to a dictionary .
8356	Remove a key from the annotations dictionary .
8357	Convert Fann to string
8358	Make a result from a result .
8359	Make a shared result .
8360	Create shared data .
8361	Request data .
8362	Get the data node
8363	Check if item is supported .
8364	Create shared data for an item .
8365	Simulate multiple processes .
8366	Lock a client .
8367	Send a shutdown signal to the server .
8368	Finalize the socket .
8369	Start the client .
8370	Send a request to the server .
8371	Acquire lock .
8372	Listen for messages and send them to the queue .
8373	Put data into the queue .
8374	Detect if fork is running .
8375	Handle data .
8376	Main loop .
8377	Receive data from the queue .
8378	Receive data from the socket .
8379	Store data in the storage .
8380	Store a message
8381	Store a list of trajectory objects .
8382	Decorator to parse the config data from a . ini file .
8383	Collect a section from the parser
8384	Collect configuration from configuration files .
8385	Interpret the configuration .
8386	Add parameters to trajectory .
8387	Convert the given rule number to binary format .
8388	Make an initial state .
8389	Plot a pattern with rule number .
8390	Generate a cellular automaton .
8391	Generate a simulation of all patterns
8392	Record the number of updates to the logger .
8393	The overview group .
8394	Load data from srvc .
8395	Stores trajectories into the simulation .
8396	Load items from an iterable .
8397	Check HDF5 properties .
8398	Store items in the store .
8399	Internal routine to close the HDF5 file .
8400	Extract information from keyword arguments
8401	Backup a trajectory into an HDF5 file .
8402	Read a row of column names into a dictionary .
8403	Prepare a new trajectory
8404	Load the metadata for a trajectory .
8405	Load a sub branch .
8406	Check the version of the trajectory .
8407	Fill the run table for the given trajectory .
8408	Load experiment explorations .
8409	Store explorations in the experiment group .
8410	Create overview tables .
8411	Store a trajectory
8412	Store a branch in the tree .
8413	Create a leaf of the given trajectory .
8414	Load nodes in the tree .
8415	Internal method for tree_store_nodes
8416	Returns a table entry for all store parameters
8417	Get or create a table .
8418	Get a node by its name .
8419	Set all attributes to recall
8420	Rerecall native type
8421	Add or modify a row in a table .
8422	Insert into a row .
8423	Extract the insert dictionary from an item
8424	Truncate a string to a maximum length .
8425	Create or get a new group .
8426	Create or get a group of all trajectory groups .
8427	Store annotations for an item
8428	Load annotations into annotations
8429	Stores a trajectory group .
8430	Load a trajectory group .
8431	Load all annotations in a trajectory
8432	Extract missing flags .
8433	Add a summary to the summary table .
8434	Adds the meta information table to the summary table .
8435	Store data from a dictionary .
8436	Stores a parameter or result .
8437	Write data into shared array .
8438	Write a shared table .
8439	Write a dictionary to an object table .
8440	Write data to HDF5 file .
8441	Write data into other array .
8442	Write an array into an HDF5 array .
8443	Delete a link
8444	Delete a parameter or group or group .
8445	Write data into a pytables table
8446	Create a pytables table description
8447	Get table column from parameter value .
8448	Get the length of the longest string .
8449	Loads a parameter into a dictionary .
8450	Load a PObject as a dictionary .
8451	Read shared data .
8452	Read the parameter table .
8453	Read parameter values from HDF5 .
8454	Loads a trajectory .
8455	Make set name .
8456	Set properties of the network .
8457	Add dynamic imports .
8458	Set the crun of the parameter .
8459	Iterates over the trajectory .
8460	Shrink the trajectory .
8461	Set the default parameters of a trajectory .
8462	Sets a preset parameter .
8463	Prepare the experiment .
8464	Get the value of the given name from the run group .
8465	Check if run is completed .
8466	Remove all explored parameters .
8467	Creates a copy of the trajectory
8468	Explore the trajectory .
8469	Update the run information dictionary .
8470	Add information about a single run .
8471	Lock all parameters .
8472	Lock the derived parameters .
8473	Finalize the run .
8474	Helper function for f_load .
8475	Execute a load operation .
8476	Backup the trajectory .
8477	Create a list of wildcards for this pattern .
8478	Merge two trajectories into the current one .
8479	Merges two trajectory into one .
8480	Renames the full name of another trajectory .
8481	Merge derived parameters .
8482	Merges the other_trajectory into another .
8483	Merges config from one trajectory
8484	Merge two trajectory objects .
8485	Merge results of other_trajectory into a dictionary .
8486	Migrate this trajectory .
8487	Store the trajectory .
8488	Restore the default parameters .
8489	Set the parameter access to the given index .
8490	Make a single run .
8491	Get the list of run names .
8492	Get the run information .
8493	Find the index of the parameter with the given predicate .
8494	Start a single run .
8495	Finalize the run .
8496	Set the start time of the run .
8497	Set the finished run information .
8498	Return an instance of the given constructor .
8499	Returns a dictionary of the items in the param_dict .
8500	Finalize the run .
8501	Get configuration values .
8502	Return the results as a dictionary .
8503	Store items in the trajectory .
8504	Load items from disk .
8505	Remove items from the node
8506	Delete links from the graph .
8507	Remove all children .
8508	Delete items from the trajectory
8509	Wrapper for pool_single_run .
8510	Wrapper for frozen_pool_single_run .
8511	Configure the pool .
8512	Configure frozen pool .
8513	Process a single run .
8514	Reconfigure SCOOP data .
8515	Run scoop .
8516	Configure logging system .
8517	Configure niceness .
8518	Handle SIGINT handling .
8519	Run a single run .
8520	Wrap the handler and run the handler .
8521	Load a class from a full class string .
8522	Create a class from a list of dynamic_imports .
8523	Returns the length of the parameter .
8524	Returns a string representation of the f value
8525	Test if two values are equal .
8526	Get the range of the function .
8527	Explore the parameter .
8528	Expand the parameter list .
8529	Perform sanity checks on an iterable .
8530	Store the data into a dictionary .
8531	Load parameter from disk
8532	Load parameter from a dictionary .
8533	Compare two matrices .
8534	Check if data is a sparse matrix .
8535	serialize a sparse matrix
8536	Build name names .
8537	Reconstruct a sparse matrix .
8538	Load parameters from a dictionary
8539	Store the data into a dictionary .
8540	Load parameter from disk
8541	Translate a key to a valid key .
8542	Convert the FDF5 value to a string .
8543	Return the data as a dictionary .
8544	Set the value of the variable
8545	Get a single value from the result .
8546	Set a single result .
8547	Return True if item is supported .
8548	Serialize the parameters into a dictionary .
8549	Load data from a dictionary .
8550	Set a single result .
8551	Serialize the results into a dictionary .
8552	Load data from a pickle file .
8553	Merge all files in a folder .
8554	Upload a file to S3 .
8555	Download a file .
8556	Create a session .
8557	Merge trajectories .
8558	Start jobs .
8559	Multiply two reals
8560	Run Euler integration .
8561	Compute the firing rates .
8562	Add parameters to the trajectory
8563	Add exploration to trajectory
8564	Execute the pre - run of a network .
8565	Executes the given network on the network .
8566	Extract subruns from trajectory .
8567	Execute all subruns in a network .
8568	Adds the parameters of a trajectory
8569	Pre - build the network
8570	Run the given trajectory .
8571	Run the network .
8572	Make a filename for a trajectory
8573	Returns the next iterator .
8574	Merge all trajectories in a folder .
8575	Handle SIGINT signal .
8576	Read configuration from file .
8577	Request PIN from Ecobee .
8578	Request token from Ecobee .
8579	Refresh access token .
8580	Get the thermostat data .
8581	Write tokens to config file .
8582	Set HVAC mode .
8583	Set the fan minimum on time .
8584	Set hold temperature .
8585	Set climate hold
8586	Delete a vacation
8587	Resume a program .
8588	Send a message
8589	Set the humidity for a given index
8590	Generate a random delay .
8591	Generate a random timeout
8592	Generate time to renew a lease .
8593	Generate renewing time .
8594	Return a dict of FSM attributes
8595	Reset attributes .
8596	Get the timeout for the given state and function
8597	Set the timeout for the given state
8598	Send a discover packet
8599	Select an offer .
8600	Send a DHCP request .
8601	Set the timers .
8602	Process an ACK packet .
8603	Process a NAK packet .
8604	Initialize the current state .
8605	Set the state of the client
8606	Update the state of the client
8607	Rebinding the client
8608	End the script .
8609	Handle an error .
8610	Wait for response to select .
8611	Timeout requesting .
8612	Timeout request renewing .
8613	Timeout request rebinding .
8614	Handle an OFFER packet .
8615	Handle incoming ACK .
8616	Process a NAK packet .
8617	Handle incoming ACK .
8618	Handle NAK .
8619	Handle incoming ACK .
8620	Handle NAK .
8621	Called when the client is renewing .
8622	Return a new QuerySet with the given name and value .
8623	Return a new QuerySet with the given name and value .
8624	Return a new QuerySet with the given name and value removed .
8625	Get status of supervisor .
8626	Create output .
8627	Main entry point .
8628	Validate a message .
8629	Read tdms file
8630	Add deformation data
8631	Convert tdms file to FCS format
8632	Check if two files are equal .
8633	Create a new patch .
8634	Delete the next patch
8635	Delete a patch .
8636	Check if a file is in a patch .
8637	Backup a file
8638	Add a file to the database .
8639	Run a Quilt command .
8640	Create the directory .
8641	Copy this directory to another directory .
8642	Link this file .
8643	Copy this file to another location .
8644	Return the directory of the file .
8645	Backup a file
8646	Refresh the patches for a given patch .
8647	Unapply a patch .
8648	Unapply the top patch .
8649	Unapply all applied patches .
8650	Apply a patch to this series .
8651	Apply the next patch .
8652	Apply all patches to this series .
8653	Read the series file .
8654	Save the patchlines to a file .
8655	Add a patch line .
8656	Insert patches .
8657	Add patches to the document .
8658	Remove a patch .
8659	Return patches after a given patch .
8660	Return the patches before the given patch .
8661	Return a list of patches until a given patch .
8662	Replace old_patch with new_patch .
8663	Create the package .
8664	Check the version of the quilt meta - data file .
8665	Adds this argument group to the given parser .
8666	Adds the command line arguments to the given parser .
8667	Adds the command line arguments to the given parser .
8668	Set arguments for subparsers .
8669	Add subparsers to the given parser .
8670	Check if a file is in the given patch .
8671	Check if file is in next patches
8672	Revert a file .
8673	Import a patch .
8674	Import patches .
8675	Add a way to a way .
8676	Return the node_ids that are not present .
8677	Add a node to the graph .
8678	Build a route object .
8679	Create a short name for a relation .
8680	Get the agid for a relation .
8681	Process the map file .
8682	Add a new relation
8683	Create dummy data .
8684	Patch agencies .
8685	Create dummy trips for a trip .
8686	Write the archive to a ZIP file .
8687	Write all the buffers to the given destination .
8688	Build an agency from a relation .
8689	Extract stops from a relation .
8690	Generate shapes for a relation .
8691	Get the list of supported versions .
8692	Send an APDU .
8693	Authenticate with U2F .
8694	Register an enrollment .
8695	Authenticates the U2F request .
8696	Register all U2F devices .
8697	Convert unicode strings to strings .
8698	Wraps a flawless client function into a partial function .
8699	Wrap all methods in a class .
8700	Check if filepath matches the pattern .
8701	Get the correct email address .
8702	Return the entry for the given entry .
8703	Convert markdown to reST .
8704	Serve Flawless service .
8705	Record an error .
8706	Convert a URL to an image
8707	Convert a string to an Image object .
8708	Decorator to validate image
8709	Check if image is big enough .
8710	Check if the given width is big enough .
8711	Check if height is big enough .
8712	Parse the category of the item .
8713	Parse the total value of a field .
8714	Get items from the XML file .
8715	Save an error .
8716	Parse the source
8717	Parse an item into a dictionary .
8718	Get an instance from the database .
8719	Save an item .
8720	Download a file from a URL .
8721	Open the source file .
8722	Get items from CSV file
8723	Sets the network access settings .
8724	Run a docker command .
8725	Add a list of files to this container .
8726	Copy a file to the working directory .
8727	Returns a list of all enrollments for the given course
8728	Get enrollments for an SIS .
8729	Get all enrollments for a section
8730	Get enrollments for an SIS section .
8731	Get enrollments for a regid .
8732	Enroll a user .
8733	Get all the roles in an account
8734	Get roles by SIS Id .
8735	Get all course roles in an account .
8736	Get a single role .
8737	Get a role by SIS ID .
8738	Get a course by its id
8739	Get a course by SIS ID .
8740	Returns a list of courses in an account .
8741	Get courses in SIS .
8742	Get a list of courses in an account .
8743	Get a list of published courses in an SIS account .
8744	Returns a list of courses for the given regid .
8745	Create a course .
8746	Update an SIS ID .
8747	Get the activity for the given account .
8748	Gets grades for the given account .
8749	Get statistics for an account .
8750	Get activity by SIS course ID .
8751	Gets all assignments for an SIS course .
8752	Gets the student summaries for an SIS course .
8753	Get the student activity for an SIS user and SIS course .
8754	Get the student messaging for an SIS user .
8755	Get all external tools in an account
8756	Get all external tools in a course
8757	Create an external tool .
8758	Update an external tool .
8759	Delete an external tool .
8760	Check that all required parameters are set .
8761	Get a user s profile .
8762	Returns a list of CanvasUser objects for the given course .
8763	Get users for an SIS .
8764	Create a new user .
8765	Returns a list of all loggedins for a user .
8766	Update a user login .
8767	Return the next page in the response .
8768	Get a resource URL .
8769	Helper function to get a resource
8770	Get a resource
8771	HTTP PUT resource .
8772	POST a resource
8773	Delete a resource
8774	Returns a list of CanvasAdmin objects .
8775	Create a new CanvasAdmin instance .
8776	Create an admin by SIS ID .
8777	Delete an admin .
8778	Delete admin by SIS ID .
8779	Creates a new grading standard for the given course .
8780	Get a single section
8781	Get a section by SIS ID .
8782	Returns a list of all sections in the given course
8783	Get all sections in an SIS
8784	Get all sections with students in the given course
8785	Get sections with students in SIS .
8786	Create a course section .
8787	Update a course section .
8788	Get quizes for a course .
8789	Get an account by id .
8790	Returns a list of sub - accounts for the given account .
8791	Update an account .
8792	Update SIS ID .
8793	Get the authentication settings for an account
8794	Update the authentication settings for an account .
8795	Gets a term by SIS ID .
8796	Import a string from a CSV string .
8797	Import data from a directory .
8798	Get status of a SIS import .
8799	Build the import . zip archive .
8800	Returns a list of assignments for the given course .
8801	Update an Assignment .
8802	Returns a list of available report types .
8803	Get a list of reports by type .
8804	Create a report .
8805	Create a course provisioning report .
8806	Create a report for SIS export .
8807	Creates a report for unused courses .
8808	Get report data .
8809	Get a report status
8810	Delete a report .
8811	Move all detections in label
8812	Flip detections in label
8813	Return a dict representation of an object .
8814	Get config from settings .
8815	Return the empty value if edit is True .
8816	Parse arguments and keyword arguments .
8817	Create metrics .
8818	Setup logging .
8819	Configure the registry .
8820	Create metrics from multiple metrics .
8821	Get a metric by name .
8822	Handle the home page .
8823	Handle metrics .
8824	Wrapper around Wolframalpha API .
8825	Monkey - patch http_client . HTTPMessage .
8826	Query the Wolframalpha API .
8827	Return a list of information about this node .
8828	Return the results of the pod .
8829	Add data to request .
8830	Make a request to the API .
8831	Make a GET request .
8832	Make a DELETE request .
8833	Make a PUT request .
8834	Make a POST request .
8835	Process a query .
8836	Group sentences by group length .
8837	Disambiguation from a PDF file .
8838	Disambiguation query .
8839	Segment text .
8840	Get language for given text .
8841	Get a concept by its id
8842	Fit the ensemble .
8843	Compute the score of the given features .
8844	Fit the model .
8845	Fit the model .
8846	Compute the accuracy of the MDR model .
8847	Fit CMDR .
8848	Transform a list of features .
8849	Compute the MDR score .
8850	MDR prediction .
8851	Generator of n - way models .
8852	Plot the grid of the model .
8853	Get the configuration of the given app .
8854	Get the value of a config key
8855	Create a vector from an iterable of members .
8856	Create a vector of members .
8857	Evaluates the given file .
8858	Compiles the form from the given stream .
8859	Compiles a form from a string .
8860	Bootstrap REPL .
8861	Run the given code or code .
8862	Create a MultiFunction from a dispatch function .
8863	Add a method to a map .
8864	Add a method to the map .
8865	Get the method for the given key .
8866	Remove a method from a map .
8867	Remove a method by key .
8868	Check if a variable is a macro .
8869	Return the location of a Lisp form .
8870	Decorate a parse function to add missing locations .
8871	Assert that node is not in tail position .
8872	Assert that the node is tail .
8873	Resolve a bare symbol .
8874	Resolve a fully qualified symbol .
8875	Parse an AST from a Reader form .
8876	Whether or not the variable should be shadowed .
8877	Put a new symbol into the symbol table .
8878	Return a string representation of entries .
8879	Pretty - print a sequence .
8880	Return a string representation of an object .
8881	Fallback to lrepr .
8882	Fix missing locations .
8883	Compile a form form into a module .
8884	Compiles a Python module .
8885	Compiles a Python module .
8886	Compiles bytecode into module .
8887	Convert an iterable into a sequence .
8888	Munge a string .
8889	Replace underscores with underscores .
8890	Create a Fraction object .
8891	Get logging handler .
8892	Create a new map from kvs .
8893	Yield n elements from a collection .
8894	Decorator to add line and column metadata .
8895	Read a namespace namespace .
8896	Read a collection from the reader .
8897	Read a list .
8898	Read a vector .
8899	Read a set .
8900	Read a map from the reader .
8901	Read a string from the reader .
8902	Read a symbol from the context .
8903	Read a keyword .
8904	Read meta data .
8905	Read function .
8906	Read a quoted comment .
8907	Expand syntax quotes .
8908	Process syntax quoted form .
8909	Read a syntax quoted form .
8910	Read an unquote form .
8911	Read a deref form .
8912	Read a character from the reader .
8913	Read a regular expression pattern .
8914	Read a reader macro .
8915	Read the next comment .
8916	Read the next token from the reader .
8917	Read expressions from a stream .
8918	Read a string from a string .
8919	Read a file .
8920	Update current location .
8921	Move back to the next item .
8922	Return the next token .
8923	Bilisp bytecode .
8924	Extract bytecode from the bytecode cache .
8925	Return the path to a lpyc file .
8926	Add imports to sys . meta_path .
8927	Find a Basilisp module .
8928	Execute a Basilisp module .
8929	Execute a Basilisp module .
8930	Compiles a module into the cache .
8931	Create a Symbol instance .
8932	completes the given text
8933	Get or create a keyword if it exists .
8934	Return a new keyword .
8935	Chain all generated PyAST nodes .
8936	Load an attribute .
8937	A simple AST generator .
8938	Yield Python ASTs from form .
8939	Set the location of a Python AST with the given environment .
8940	A decorator that adds line and locs to a function .
8941	Decorator that adds line - and locs to the AST .
8942	Check if the variable is dynamic
8943	True if v is reable .
8944	Convert an AST into a statement .
8945	Create an ast . FunctionDef from the body .
8946	Decide if we need to warn on a definition .
8947	Convert a DO to a Python AST .
8948	Generate the name of a function .
8949	Convert function arguments to python AST .
8950	Convert a function node into an AST .
8951	Convert a function to a Python AST .
8952	Convert a function to a Python AST .
8953	Convert if body to python AST .
8954	Convert if to python AST .
8955	Convert an Invoke node to Python AST .
8956	Convert quote node to Python AST .
8957	Convert a loop node into an AST .
8958	Convert a Recur node to a Python AST .
8959	Convert set bang node to python AST
8960	Convert an exception to a Python AST .
8961	Convert a TryNode to a Python AST .
8962	Convert local symbol to python AST .
8963	Convert a var to a python AST .
8964	Convert a variable symbol to a Python AST .
8965	Convert host field to python AST .
8966	Convert maybe class to Python AST .
8967	Convert a MaybeHostForm to a Python AST .
8968	Convert a constant value to a Python AST .
8969	Convert a collection literal to Python AST .
8970	Generate a Python AST from a Lisp AST .
8971	An iterator over the module imports .
8972	Create an ast . ast . ImportFrom object .
8973	Create a namespace variable .
8974	Convert an iterable into a set .
8975	Return a set of members .
8976	Visit an except node .
8977	Visitor for expressions .
8978	Visit function definition .
8979	Visitor for While node .
8980	Visitor for a Try node .
8981	Create a new module .
8982	Return the first element of o .
8983	Return the rest of o .
8984	Return the nth occurrence of a collection .
8985	Return the next element in coll .
8986	Combine o into o .
8987	Convert an object to a sequence .
8988	Concatenate multiple sequences .
8989	Associates the given key - value pairs .
8990	Return the conjugate of a collection .
8991	Return a partial function .
8992	Dereference an object .
8993	Compare two boolean values .
8994	Divide x to a fraction .
8995	Sorts a collection .
8996	Returns True if the given key is contained in the coll .
8997	Get a value from a dictionary .
8998	Convert object to LISP format .
8999	Convert an object into a Python object .
9000	Return a representation of an object .
9001	Return a list of arguments .
9002	Wrap a function as a trampoline .
9003	Add attributes to a function .
9004	Add meta information to a function .
9005	Mark a function as a baseilisp .
9006	Resolve an alias to a variable .
9007	Resolve a variable .
9008	Add a generated python variable to the current namespace .
9009	Bootstrap dynamic variables .
9010	Create a new variable in ns .
9011	Creates a new variable with the given name .
9012	Find a variable in namespace with name_sym .
9013	Find a variable in a namespace .
9014	Find a variable in the current context .
9015	Add default import .
9016	Add an alias to the namespace .
9017	Intern a symbol .
9018	Replace a new_var with a new_var .
9019	Find a variable by symbol .
9020	Add an import .
9021	Returns the module for the given symbol .
9022	Add a reference to the variable .
9023	Returns the variable referenced by symbol
9024	Refers all symbols in other_ns .
9025	Reference all namespaces .
9026	Get or create a new namespace .
9027	Get or create a namespace by name .
9028	Get the namespace for the given symbol .
9029	Remove a namespace from the map .
9030	Return a matcher for the given text .
9031	Yields all aliases that match the given prefix .
9032	complete imports and aliases
9033	complete the interns .
9034	Return an iterable of strings that match the reference definitions .
9035	Complete all aliases in text .
9036	The list of args .
9037	Create a plist .
9038	Convert an iterable into a list .
9039	Decorator to change a scalar style
9040	Decrypt a JWE token .
9041	Encrypts a JWE .
9042	Delete an item from the cache .
9043	Convert this selector to a tuple .
9044	Close the writer .
9045	Parse a FQL string into an Expression .
9046	Dump DB model into a file - like object .
9047	Hook handler for objects .
9048	Decode a date .
9049	Decode the value .
9050	JSON encoder .
9051	Validate version string
9052	Generate a changelog
9053	Return strongly connected components .
9054	Toplogical sort algorithm .
9055	Set the parent of this expression .
9056	Returns the parent object
9057	Add an operator to the fragment .
9058	Add an element to this fragment .
9059	Create an AND expression .
9060	Create an operator with OR operator .
9061	Log a function to the logger .
9062	Parse incoming message .
9063	Convert a list of tuples into an OrderedDict
9064	Return the first message in a list of messages .
9065	Prepare send message .
9066	Flush all messages from the socket .
9067	Enable a slide .
9068	Save a leicacam template .
9069	Load a leicacam template .
9070	Get information about the device .
9071	Read aninc file .
9072	Locate the package . json file .
9073	Parse package JSON file .
9074	Handle an API error .
9075	Validate the response .
9076	Homogenize two waves .
9077	Interpolate indep vector .
9078	Calculate the independent variable range .
9079	Check if two waveforms are compatible .
9080	Load the systemjs bundle manifest
9081	Create a namedtuple of partuple .
9082	Run trace on a module .
9083	Shorten a URL .
9084	expand a short url
9085	Get URL statistics for a short URL .
9086	Get stats from DB .
9087	Get database stats .
9088	Prints a python package command
9089	Echo a command .
9090	Log a message to the stdout .
9091	Cache a cached method .
9092	Split an iterable into chunks .
9093	Return a generator that yields chunks of a given iterable .
9094	Flatten an iterable .
9095	Signals SIGINT to exit .
9096	Pretty print a table .
9097	Create dummy class .
9098	Create an instance from a human readable string .
9099	YOURLS client .
9100	Trace the waveform module .
9101	Add links to requirements . json file .
9102	Add a common entry to the plist .
9103	Append a list of Python versions to the plist .
9104	Convert comparison operators to a string .
9105	chunk noise
9106	Split a frequency matrix into data points
9107	Write a touchstone file .
9108	r Bound waveform .
9109	Build the unit string .
9110	Perform an operation on a wave .
9111	Calculate the area of the running task .
9112	Validate the min and indep_max parameters .
9113	Return the arccos of the wave .
9114	Return the cosine of a wave .
9115	Return the sine of a wave .
9116	Return the angle of the wave .
9117	Calculate the average of a waveform .
9118	Create a copy of the wave
9119	Derivative of the waveform
9120	Compute the Fourier transform .
9121	Compute the Fourier transform .
9122	Compute the wave .
9123	Compute the FFT .
9124	Compute the FFT of a wave .
9125	Inverse Fourier transform .
9126	Compute the Fourier transform .
9127	r Return the phase of a wave .
9128	Inverse Fourier transform .
9129	Return a copy of the waveform with the integral .
9130	Derivative of the group delay
9131	Compute the log of a wave .
9132	Apply a waveform to a waveform .
9133	Return the integral of a waveform .
9134	Return the maximum value of a waveform .
9135	Return the minimum of a waveform .
9136	Phase a wave .
9137	Round a complex wave .
9138	Return the square root of the wave .
9139	Return a new waveform .
9140	Return a copy of the wave .
9141	Convert a complex wave to a float .
9142	Convert a complex wave into an integer .
9143	r Return the wvalue of the wave .
9144	Return a list of paths to serve .
9145	Get short description from long description .
9146	Build expression .
9147	Return next rdelim .
9148	Extract functions from an expression
9149	Pair delimiters between delimiters .
9150	Parse an expression .
9151	Remove consecutive delimiters .
9152	Split text into count items .
9153	Convert number to engineering notation .
9154	Convert a number to a string .
9155	Convert number to engineering notation .
9156	Convert a number to a float .
9157	Return the fraction of a string .
9158	Convert a number to a float .
9159	Return an Eng power
9160	Convert a suffix to an integer .
9161	Remove extra delimiters .
9162	Convert a number to a scientific string .
9163	Convert a number to a scientific tuple .
9164	Find a sourcemap comment .
9165	Check if the app has an extension .
9166	Bundle the application .
9167	Returns a dictionary containing the trace information for the given app .
9168	Check if the hash of the dep_tree is correct .
9169	Format a hexdump file
9170	Parse a docstring from a docstring .
9171	Return a list of valid identifiers .
9172	Add an action to a context .
9173	Split a line into parts .
9174	Check if the context exists .
9175	Help function .
9176	Find a function in a context .
9177	Print a listing of functions and functions .
9178	Check if argument is a flag .
9179	Process arguments .
9180	Extract the value of a keyword argument .
9181	Invoke one function .
9182	Invoke the interpreter .
9183	Invoke this function .
9184	Parse a parameter .
9185	Parse return line .
9186	Classify a section .
9187	Classify a line .
9188	Join lines into paragraphs .
9189	Wrap the Mindoc object and format it .
9190	Converts the given value to a type .
9191	Convert binary value to type
9192	Get the size of a type
9193	Returns the formatted value of the given type .
9194	Validate the given type .
9195	Check if type_name is known .
9196	Split a complex type into a tuple .
9197	Instantiate a complex type .
9198	Get a type by name .
9199	Check if the given format is known
9200	Inject a type into the registry .
9201	Load types from a module .
9202	Check if the positional arguments are filled
9203	Add a parameter .
9204	Set a typed return value .
9205	Define a custom return value .
9206	Try to match a short - name short name .
9207	Return the type of a parameter .
9208	Returns the signature of the parameter .
9209	Formats the return value
9210	Convert a positional argument .
9211	Check for positional arguments .
9212	Convert an argument to a type .
9213	Return formatted message .
9214	Return a dictionary representation of the exception .
9215	Check and execute a function .
9216	Parse a list of valid validators .
9217	Find all objects in a container .
9218	Get a context object from a module .
9219	Get help text .
9220	Annotate a function as a parameter .
9221	Mark a function as annotated .
9222	Annotate a function with a type name .
9223	Mark a class as annotated .
9224	Annotate a function .
9225	Mark a function as annotated .
9226	Get the short description of a function .
9227	load cron tasks
9228	Install crontab tasks .
9229	Print all the tasks in the crontab .
9230	Uninstall the brontab .
9231	Create a new handler from a URI .
9232	Load the project configuration .
9233	Save project configuration to disk .
9234	Define a singleton property .
9235	Returns a dictionary of all projects in this project .
9236	Decorate a function to run on a project command
9237	Initialize project .
9238	r Set an item to a new value .
9239	Return a copy of this object .
9240	Create a new instance from an iterable .
9241	Create a setter for the current state .
9242	Returns a function that will iterate over the given values .
9243	Modify a function over the state .
9244	Return a function that returns a generator that returns n arguments .
9245	Call function f .
9246	Return the result of the function f .
9247	View the current fold .
9248	Convert this Fold to a list of lists .
9249	Apply a function over the set .
9250	Set the value to the given value .
9251	Iterate over an iterable .
9252	Return the kind of this item .
9253	Run the game .
9254	Return the stepwards between this vector and another .
9255	Handle input .
9256	Advance robots towards the player .
9257	End the game .
9258	Enter a player .
9259	Play a game .
9260	Make a move .
9261	Returns the winner of the game .
9262	Generator for potential games .
9263	Process an item .
9264	Open a spider .
9265	Upload a chunk to S3 .
9266	Make a file - like object from JSON .
9267	Get the state of an account .
9268	Get the state of an asset .
9269	Get a block by its hash .
9270	Get the block hash .
9271	Get the system fee for a block .
9272	Get the state of a contract .
9273	Get a raw transaction by its hash .
9274	Get the storage value for the given script hash .
9275	Get the out of a transaction .
9276	Invoke a JSONRPC RPC .
9277	Invoke a RPC function .
9278	Invoke a script .
9279	Send a raw transaction .
9280	Validate an address .
9281	Call a JSON - RPC method .
9282	Check if a string is a hash256 hash .
9283	Check if a string is a hash160
9284	Encodes the invocation parameters into a list of parameters .
9285	Decode the stack of an invocation result .
9286	A decorator that ensures a function has a default value .
9287	Apply a transformation to a datetime object .
9288	Return a datetime with the given timezone .
9289	Save the template to a file .
9290	Render Barcode .
9291	Calculate the checksum of the EAN
9292	Renders the given code .
9293	Connect to a KVS session .
9294	CLI entrypoint entrypoint .
9295	Download a file from S3
9296	Upload a file to S3
9297	Downsync map files for a given section .
9298	Show difference between S3 and S3 .
9299	Parse an environment variable .
9300	Set username and password .
9301	Specify an API key .
9302	Get json content from folder .
9303	Get all schemas .
9304	Returns the schema for this schema
9305	Get a JSONschema resolver .
9306	Validate the given object .
9307	Get all valid examples .
9308	Get invalid examples .
9309	Returns the auth url for the user
9310	Process URL .
9311	Get an auth token .
9312	Get the user s ID .
9313	List all files in a folder .
9314	Create a new folder .
9315	Add a comment to an object .
9316	Decode an object to unicode .
9317	Set drop target for obj
9318	start the drag operation
9319	Set default TLLW .
9320	Inspect an object
9321	Return an interactive shell
9322	Migrates font .
9323	loads a single page
9324	Get param from tag .
9325	Send a message to the GUI
9326	This function is called when the main window is closed .
9327	handle mouse down event
9328	Mouse move event handler
9329	handle resize events
9330	key press event handler
9331	Delete selected objects
9332	Duplicate the selected objects
9333	Refresh the image .
9334	Calculates the best position of widget
9335	Returns the pydata for the given item
9336	Sets the python data for the item
9337	Find an item in the combobox .
9338	Deletes an item from the list
9339	Delete all items
9340	Clear all columns .
9341	set selected selection
9342	Returns a list of strings
9343	set client data
9344	Append a string to the wx object
9345	Represent an object .
9346	Get GUI object by name .
9347	Create a copy of this object and return it
9348	add a child
9349	set parent
9350	Draws the background of the window
9351	redraw the background
9352	Paints the text
9353	Find modules in rootpath .
9354	Return a list of column headings
9355	Reset the view
9356	Updates the values of the grid
9357	Update column attributes .
9358	Sorts a column .
9359	Clears the list
9360	Create combobox
9361	Begin editing of the widget
9362	Ends the edit
9363	Checks if a key is accepted
9364	key event handler
9365	Return a metaclass for a type .
9366	Enables the given value .
9367	Returns True if the menu is enabled .
9368	Enables the top menu .
9369	Returns True if the menu is enabled .
9370	Removes a menu from the menu
9371	Submit a button .
9372	Set object attributes .
9373	Convert HTML table to text .
9374	Get the documenter for an object .
9375	Manages the signature of a signature
9376	Import object by name .
9377	Autoolink role .
9378	Display an alert dialog
9379	Display a text entry
9380	Select a font
9381	Display a color dialog .
9382	Display a directory dialog
9383	Display search dialog .
9384	Sets the children of this item .
9385	set wx icon
9386	Show the window .
9387	Parse a resource file .
9388	save rsrc to filename
9389	Build a window
9390	Build a GUI component
9391	Connect a component to a controller
9392	Convert property to name .
9393	set the data
9394	Find autummary lines in a docstring .
9395	loads the application tree
9396	Inspect a child
9397	Activate an item
9398	Update the tree
9399	Show a context menu
9400	Return the representation of the thumbnail .
9401	Add an expression filter .
9402	Register a node filter .
9403	Assert that the current path exists .
9404	Assert that the given path has no current path .
9405	Fail if path has current path
9406	Fail if path has no current path .
9407	Select option .
9408	Apply the filter .
9409	Get a webdriver instance
9410	Return the XPath representation of this expression .
9411	Check if the given node matches the filters .
9412	Switch to a frame .
9413	Accept an alert .
9414	Accept a confirmation dialog .
9415	Display a confirmation dialog .
9416	Accept a prompt .
9417	Dismiss prompt .
9418	Save body to file .
9419	Save a screenshot to disk .
9420	Raises the server error .
9421	Check if the value matches the filter .
9422	Check if the element has checked .
9423	Check if element has not checked .
9424	Check if element has unchecked field .
9425	Adds an unchecked field to the document .
9426	Assert that the query matches the query .
9427	Assert that the query has no text .
9428	Assert that the given title matches the given title .
9429	Assert that the document has no title .
9430	Assert that the document has a title .
9431	Fail if title has no title .
9432	Find all matching results .
9433	Find the first item in the collection .
9434	Return the inner content of a node .
9435	Return the inner text of a node .
9436	Normalize URL .
9437	Decorate a function to make a setter .
9438	Decorate a function to synchronize the session .
9439	Check if an error is caught .
9440	Compares the results of the query .
9441	Return True if the result is at least size .
9442	Returns True if any of the options is None False otherwise .
9443	Generate a failure message
9444	Returns True if count matches the given options .
9445	Normalize text .
9446	Normalize whitespace .
9447	Convert text to regex .
9448	Checks if the current URL matches the current URL .
9449	Resize window to specified width and height .
9450	Start the WSGI server .
9451	Set the getter for this property .
9452	Set the class instance method .
9453	Sets the class_method of this class .
9454	Return the traceback as a string .
9455	Get object source .
9456	Get the logger for the given instance .
9457	Set the logger .
9458	Call the API
9459	List of available channels .
9460	List of users .
9461	Make a message
9462	Translates a message .
9463	Send a message to Slack .
9464	Read a channel from the server .
9465	Run the bot .
9466	Run the slack client
9467	Return the difference between two dictionaries .
9468	Color a message .
9469	Called when a task is started .
9470	Run the task on the server .
9471	Print a v2 playbook on the stats .
9472	Called when a task is skipped .
9473	Convert prefix to addressmask .
9474	Check if value is empty
9475	Add model to model
9476	Return a dictionary containing the keys and values .
9477	Load data from a dictionary .
9478	Convert to a dictionary .
9479	Parse config .
9480	Parse state .
9481	Translate the config into a string .
9482	Load all JINJA_FILTERS .
9483	Find YANG file .
9484	Convert a model to a dictionary .
9485	Diff two objects
9486	Perform HTTP POST request .
9487	Returns the authorization code URI .
9488	Get an access token .
9489	Extract query parameters from url .
9490	Dequery a URL .
9491	Build a URL .
9492	Handle an exception .
9493	Create a Response object .
9494	Make a redirect error response .
9495	Make a JSON response
9496	Get authorization code .
9497	Refresh a refresh token .
9498	Get an authorization token .
9499	Get an authorization code from a URI .
9500	Get token from POST data .
9501	Returns an authorization object .
9502	Open a file for the specified bus .
9503	Read a single byte from the bus .
9504	Read a number of bytes from the bus .
9505	Read one byte from a device .
9506	Write bytes to the bus .
9507	Write a byte to the device .
9508	Write block data to a device .
9509	Return the CDN URL for this dataset .
9510	Create a copy of the file .
9511	Create a local copy of the file .
9512	Create a remote copy of a remote file .
9513	Construct a File from a file .
9514	Upload a file .
9515	Upload a file from a URL .
9516	Upload a file from a URL .
9517	Returns a list of CDN URLs for this group .
9518	Construct a Group object from the cache .
9519	Create group .
9520	Make a request to the server
9521	Yield the UUIDs of this sequence .
9522	API list generator .
9523	A bar bar .
9524	Perform an upload request .
9525	Get the status of the home mode .
9526	List all cameras .
9527	Get camera information .
9528	Get camera snapshot .
9529	Disable a camera
9530	Get motion settings for a specified camera .
9531	Send a camera event to a camera event .
9532	Update camera motion settings .
9533	Is the last li in the current list?
9534	A generator that yields nodes of a single list .
9535	Get the IDL for a given w_namespace .
9536	Get v - merge from xml .
9537	Returns the grid span for the given tc element
9538	Get the cell at the given index .
9539	Return True if style is False otherwise .
9540	Return True if r is bold .
9541	Return True if the string is anitalics document .
9542	Return True if r is underlined
9543	Returns True if p is a Title
9544	Get the content of a text run .
9545	Get relationship info .
9546	Extract data from the zip file .
9547	Returns the list type for the specified numbering .
9548	Build a list from a list .
9549	Build a tr element .
9550	Build a table element .
9551	Get the content of a T tag .
9552	Remove the tag from the tree .
9553	Find the dataset with the given url .
9554	Load MNIST dataset .
9555	Load cifar10 images from tar archive
9556	Plot multiple images .
9557	Plot layers .
9558	Plot the filters .
9559	Generates a random sample from a list of arrays .
9560	Encodes a string into a list of strings .
9561	Returns a batch of inputs and outputs .
9562	Predict sequence of sequences .
9563	Add convolution weights to the model .
9564	Encodes the given layer .
9565	Decode the graph .
9566	Find the output name of a layer .
9567	Compute the autoencoder score .
9568	Predict for x .
9569	Predict probabilities of x .
9570	Predict the logit of x .
9571	Compute the score of the model
9572	Batches features into features and mask .
9573	Returns a batch of samples in the dataset .
9574	Load a network from disk .
9575	Generate a random weight matrix .
9576	Return a random vector .
9577	Yield outputs matching patterns .
9578	Yield all parameters matching the given patterns .
9579	Creates a new graph from the given kwargs .
9580	Returns the list of variables .
9581	Compute accuracy .
9582	Perform a scan .
9583	Build an Activation .
9584	Reservoir .
9585	Add loss to self . losses .
9586	Iterates over training data .
9587	Train the model .
9588	Return a hash of the layers and losses .
9589	Build a computation graph .
9590	List of input layers .
9591	Returns a list of variables in the computation .
9592	Find a layer by param .
9593	Feed forward computation .
9594	Predict for x .
9595	Compute the score of the model
9596	Save the model to a pickle file .
9597	Load a network from a pickle file .
9598	Compute the loss .
9599	Returns a list of updates that match the given kwargs .
9600	Shape of the output layer .
9601	Connects the inputs to the graph .
9602	Bind the graph to the network .
9603	Resolve input shapes .
9604	Resolve the output shape .
9605	Log the layer .
9606	Log the total number of parameters
9607	Format the field name .
9608	Resolve the shape of a layer .
9609	Find a parameter by its name .
9610	Add a bias vector .
9611	Convert the form to a dictionary .
9612	Compute the loggabor energy .
9613	Loggabor image
9614	Add a new tier
9615	Remove a tier by name .
9616	Get a tier by name .
9617	Convert the TAF to an EAF object
9618	Add a point to the tier .
9619	Add an interval to the tier
9620	Remove an interval from the tier .
9621	Remove a point from this tier .
9622	Return an iterator over the intervals
9623	Returns a sorted list of intervals
9624	Indent an element .
9625	Add an annotation to a tier .
9626	Add an entry to the controlled vocabulary .
9627	Add a description to the controlled vocabulary .
9628	Add an external reference .
9629	Add a language .
9630	Add a lexicon reference
9631	Add a linguistic type
9632	Add a linked file
9633	Add a locale .
9634	Add a secondary file descriptor
9635	Add a tier .
9636	Remove all time slots .
9637	Extract annotation data from the EAF .
9638	Generate an annotation id .
9639	Generate a unique id for a time
9640	Get child tiers for the given id_tier
9641	Get the full time interval .
9642	Get reference annotation data after given time .
9643	Get reference annotation data before time .
9644	Returns a list of tier IDs for the given ling type .
9645	Merge tier data .
9646	Removes all annotations from a tier
9647	Removes a description from the controlled vocabulary .
9648	Remove a license .
9649	Remove linked files .
9650	Remove a property .
9651	Removes a reference annotation from the graph .
9652	Remove secondary files .
9653	Remove a tier .
9654	Remove all tiers
9655	Rename a tier .
9656	Shift annotations by time .
9657	Main entry point .
9658	Print a debug message to stderr .
9659	Get base level from text .
9660	Get embedding levels from text .
9661	Given a storage and a dictionary of bidi_LEVEL_limit and a directional_override_limit to override it .
9662	Calculate level runs for each level .
9663	Resolves weak types of strong types .
9664	Find all neutral types in the storage .
9665	Reverse contiguous sequences .
9666	Re - order the embedding level .
9667	Retrieve current file
9668	Convert PySide2 .
9669	Add an attribute to an object .
9670	Parse command line arguments .
9671	Maintain backwards compatibility .
9672	Show the GUI .
9673	Discovers the GUI
9674	Deregister host
9675	Add an entry to the filemenu .
9676	Context manager that maintains a selection
9677	Context manager that maintains the current time .
9678	Show a message about a registered GUI .
9679	Load types .
9680	Get cumulative data .
9681	Get the values for a single axis
9682	Draw a constant line
9683	Load the transform parameters .
9684	Reverse mapping .
9685	Generate a range from start to stop .
9686	Add data to self . data .
9687	Add defs to the document .
9688	Add data to self . data
9689	Burns the graph .
9690	Calculate left margin .
9691	Calculate right margin
9692	Calculate border margin .
9693	Add a popup .
9694	Calculate bottom margin
9695	Draw the graph
9696	Add a data point to the background .
9697	Draw x - labels .
9698	Draw y labels .
9699	Draw x - guidelines .
9700	Draw y - guidelines .
9701	Draw the titles
9702	Process inline styles .
9703	Create SVG element .
9704	Return a list of stylesheets .
9705	Run a bot .
9706	Send data to the socket .
9707	Connect to the server
9708	Respond to a channel or channel .
9709	Return a list of patterns that match this pattern .
9710	Create a new nick
9711	Handle ping .
9712	Called when the server is registered .
9713	Main event loop .
9714	Register with boss .
9715	Task runner .
9716	Decorate a callback to require a boss channel .
9717	Return a list of patterns for the command .
9718	Called when the server is successful .
9719	Execute a worker
9720	Add a new nick to this worker .
9721	Send the validation email .
9722	Send password reset notification .
9723	Check that the password is valid .
9724	Verifies the token is valid .
9725	Delete the user s avatar .
9726	Override to allow POST requests .
9727	Get an executor for the pool .
9728	Return an API client .
9729	Return TLS client .
9730	Return the name of the service .
9731	Wrapper around docker API .
9732	Execute a method in a docker container .
9733	Poll a docker service .
9734	Stop the container
9735	Filter unique email addresses .
9736	Validate a new password .
9737	Update the password .
9738	Validate email address .
9739	Create a new token
9740	Delete the token .
9741	Check if the user has been logged .
9742	Handle POST request .
9743	Update the expiry of the object .
9744	Returns the context for the password reset email .
9745	Send email notification .
9746	Default password reset email handler .
9747	Handle validation email notification .
9748	Get the user and token from the request .
9749	Check if the token has expired .
9750	Publish a Bokeh notebook .
9751	Process Bokeh plots .
9752	get custom javascript
9753	Returns the widget with the given name .
9754	Render a HoloViews object
9755	Create text input .
9756	Return a list of named objects .
9757	Get the owner of a method .
9758	Assigns authentication values to the client .
9759	Ping the server .
9760	Get info .
9761	Get the health of the cluster .
9762	Convert bytes to human readable string .
9763	Returns the total load of the CPU .
9764	Returns the memory size in bytes .
9765	Get the number of transactions in the network .
9766	List of volumes
9767	Get volume by id
9768	Returns the total size of a volume
9769	Returns the percentage of the volume used .
9770	Returns the average disk temperature for a given volume
9771	Returns the maximum disk temperatures of a volume
9772	Get a disk by its id .
9773	Authenticate the user
9774	Send a GET request to a URL .
9775	Execute a GET request
9776	Update the system information .
9777	Gets the utilisation object
9778	Return SynoStorage object
9779	Create a context for a webhook request .
9780	Get the tenant token
9781	Return the attributes for this widget .
9782	Add apps to INSTALLED_APPS .
9783	Set apps without apps .
9784	Get global settings .
9785	Handle GET request .
9786	Get a configuration value .
9787	Change the value of a config file .
9788	Migrate config file .
9789	Start the web server .
9790	Wait for the server to finish .
9791	Get access information from Reddit .
9792	Check if the token is present
9793	Set access credentials .
9794	Refresh OAuth2 token .
9795	Create the manifest table .
9796	Split path into bucket and prefix .
9797	Check if a bucket is a Gault bucket .
9798	Extract the run id from a key .
9799	Remove None values from a dictionary
9800	Add run_id to the manifest .
9801	Check if a run is in the manifest .
9802	Extract schema from schema URI .
9803	Fix schema name and version .
9804	Parse contexts .
9805	Parse an unstructured event .
9806	Transform a line of text into a JSON object .
9807	Convert a Snowplow event to JSON .
9808	Get the name of the used template .
9809	Print the context of a Django context .
9810	Print the variables in the context .
9811	Format a SQL query .
9812	Pretty print a Django context .
9813	Format a dictionary summary .
9814	Apply formatting to text .
9815	Format the object .
9816	Format the object .
9817	Get a token from a string .
9818	Return a list of LaTeX nodes from a string .
9819	Convert latex text to text .
9820	Set the latex input directory .
9821	Read an input file .
9822	Convert a latex document to text .
9823	Convert a unicode string into a unicode string .
9824	Unascii - encoded string .
9825	Gets the organisation information .
9826	Returns a list of boards .
9827	Returns a list of members .
9828	Updates an organisation .
9829	Removes a member from the server .
9830	Add a member to this group .
9831	Add a member to the organization .
9832	Gets the list information of the list .
9833	Add a card to the server .
9834	Retrieves information about the label .
9835	Returns a list of items that match the specified query parameters .
9836	Updates a label .
9837	Updates the label with the specified parameters .
9838	Gets the user authorisation URL .
9839	Gets the card information .
9840	Gets a board by query parameters .
9841	Get a list of resources .
9842	Gets a list of checklists .
9843	Add a comment to the server .
9844	Add an attachment to the server .
9845	Add a checklist to the server .
9846	Add a label from a dictionary .
9847	Add a label from a class
9848	Add a member to the server .
9849	Retrieves the member information from the server .
9850	Returns a list of cards .
9851	Gets all organisations
9852	Creates a new board .
9853	Decorator for singledispatch methods .
9854	Gets information about the board .
9855	Returns a list of lists .
9856	Returns a list of labels .
9857	Gets a single card .
9858	Returns a list of Checklists
9859	Gets an organisation .
9860	Update board .
9861	Add a new list .
9862	Add a label to the cluster .
9863	Get a list of checklists .
9864	Get a single card .
9865	Returns a list of ChecklistItem objects
9866	Update a checklist .
9867	Adds a new item to the server .
9868	Removes an item from the CheckItem .
9869	Update the name of this checklist .
9870	Update the checklist item .
9871	Add authorisation token to query_params
9872	Check for errors .
9873	Build the URI for the given path .
9874	Fetches JSON from the specified URI .
9875	Create an organisation .
9876	Create a board .
9877	Create a label from a JSON string .
9878	Create a list from json .
9879	Create a card object from a json string .
9880	Create a checklist .
9881	Create a member from a json string .
9882	Get an organisation
9883	Get a single board .
9884	Get a list .
9885	Get a single card .
9886	Get a checklist .
9887	Get a member
9888	Extracts domain from URL .
9889	Tokenize text .
9890	Convert text to raw text .
9891	Convert text to raw text .
9892	Set the password for a service .
9893	Split text by locations .
9894	Mark a regex as split .
9895	Mark a regex as split .
9896	Entry point for the CLI .
9897	Create AES cipher
9898	Get AES mode .
9899	Priority ordering .
9900	Check the encryption scheme .
9901	Called when a message is received .
9902	Generate a unique id .
9903	Connect to the server .
9904	Handle connection ack .
9905	Encodes a string .
9906	Decode a UTF - 8 encoded string .
9907	Encode a 16 - bit integer .
9908	Encode a length .
9909	Decode encoded length .
9910	Encode the packet as a string .
9911	Encode the packet
9912	Decode a Packet from a packet .
9913	Encode the result code .
9914	Decode packet .
9915	Decode message .
9916	Encode the message .
9917	Encode the message .
9918	Decode message .
9919	Encode the message .
9920	Encode the payload as a string .
9921	Decode packet .
9922	Decode packet .
9923	Build API URL .
9924	Make a request to the API .
9925	Refresh the list of blocks .
9926	Format data into a numpy array
9927	Fit data to data
9928	Fit KMeans to data
9929	Fit the mean shift
9930	Fit the model to data
9931	Predict clusters from data
9932	Map a set of clusters to an array of indices .
9933	Sort clusters by cluster
9934	convert datetime to datetime
9935	Calculate the total number of points in a dictionary .
9936	Get the total time span in a dictionary .
9937	Display a unit picker .
9938	Pretty - print an element
9939	Convert a string to a name mass
9940	Convert analyte to massname
9941	Collate data from a directory .
9942	Convert a boolean array into a numpy array .
9943	Convert a list of tuples into a boolean array .
9944	Smooth an array .
9945	Fast gradient of an array .
9946	Find minima within y
9947	Cluster meanshift .
9948	Cluster k - means clustering .
9949	Cluster data using DBSCAN .
9950	Get the set of defined srms .
9951	Read the configuration file .
9952	Read latools . cfg file
9953	Print all configuration files .
9954	Copy SRM file from configuration
9955	Create a config file .
9956	Change the default configuration .
9957	Exclude downholes from a filter .
9958	Defrag a filter .
9959	Despike despiker
9960	Autorange plot .
9961	Set the number of traces to be used in the simulation .
9962	Calculate the ratio of analytes
9963	Calibrate the data .
9964	Sample stats from the inputalytes .
9965	A dictionary with ablation times
9966	Add a filter to the filter
9967	Filter the gradients by threshold
9968	Calculate correlation between two columns .
9969	Filter the correlation filter .
9970	Add a new filter
9971	Get parameters for this filter
9972	Plot histograms .
9973	Compute summary statistics
9974	Load reference data .
9975	Lookup the type of a type .
9976	Returns the elements in a pickle file
9977	Calculate the atomic weight of a molecule .
9978	Generate namedtuple .
9979	Return a list of extra elements that are not in the stack .
9980	Deduplication .
9981	Calculate weighted weighted stats .
9982	Gaussian Gauss
9983	Compute the standard deviation of an array .
9984	Get the list of samples .
9985	Depike data .
9986	Calculate the weighted mean of analytes .
9987	Calculate background interpolation .
9988	Perform background correction .
9989	Calculate the ratio of the data .
9990	Make a subset of the analysis .
9991	Filter gradients by a certain percentile .
9992	Fit a classifier
9993	Apply a classifier .
9994	Filter the data by correlation .
9995	Filter data based on a filter
9996	Filter the data using a filter .
9997	Return the status of the filter
9998	Defrag a filter .
9999	Filter all samples that have been removed .
10000	Plot a histogram of the gradients .
10001	Plot the gradient of the image .
10002	Plot histograms .
10003	Create a plot of the trace plot
10004	Generate gradient plots for the analysis .
10005	Filter reports based on a filter
10006	Sample stats from analytes
10007	Get a pandas DataFrame of stats for each sample
10008	Export traces from latols .
10009	Export traces to a directory .
10010	Save the analysis log to a directory .
10011	Export the minimal reproduction dataset to a zip file .
10012	Split a file into segments .
10013	Apply f and z to f .
10014	Plot a PCA .
10015	Compute the bayes scale of a signal .
10016	Calculate the median of the data .
10017	Despikke signal
10018	Despike despike
10019	Add a new component
10020	Remove one or more configurations .
10021	Clear the configuration .
10022	Remove unused switches .
10023	Returns the key that matches the given fuzzkey
10024	Make a state from a key .
10025	Grab a filter
10026	Get information about components .
10027	Decorator for logging functions .
10028	Write log file .
10029	read a log file into a dictionary
10030	Autologin function .
10031	Get information from modem
10032	Send SMS message .
10033	Parse a SQL file .
10034	Generate a link to a notebook .
10035	Returns the thumbnail div .
10036	Returns the code div .
10037	The code example of the notebook .
10038	URL of the notebook
10039	Get the output file name .
10040	Read and process a notebook file .
10041	Create a python file from the notebook
10042	Download files .
10043	Create a thumbnail for this image .
10044	Extract header and description from header .
10045	Scale an image to a given size .
10046	Save the thumbnail .
10047	Copy thumbnail figure to file
10048	Returns the url of a notebook
10049	Get language codes for field_name
10050	Returns the default value of the field
10051	Processes a thumbnail .
10052	Pre - save the image .
10053	Refresh cached thumbnails .
10054	List of all thumbnails .
10055	Create a thumbnail .
10056	Delete a thumbnail .
10057	Create a new thumbnail .
10058	Get a thumbnail .
10059	Delete a thumbnail .
10060	Handle incoming message .
10061	Subscribe to a subscriber .
10062	Return a set of accepted states
10063	Register a provider .
10064	Send a message .
10065	Returns a blueprint for the receiver .
10066	Return a dict of receiver blueprints .
10067	Receive a message .
10068	Receive a status .
10069	Decorator to handle HTTP exceptions .
10070	Forward an incoming message to all clients .
10071	Sign a web3 transaction .
10072	Estimate the gas of a transaction with the given data .
10073	Estimate the gas for a transaction .
10074	Write to the output buffer .
10075	Read a line from the serial port .
10076	Send a message .
10077	Return the email as a string .
10078	Check for bad headers .
10079	Attaches an attachment to this request .
10080	Register services .
10081	Create a Config object from a module .
10082	Register resources .
10083	Return the value of the given key .
10084	Raises an exception in - context .
10085	Setup the data manager
10086	Compute the N - D derivative of a given wavelength .
10087	Calculate the CAuchy equation of a set of coefficients .
10088	Initialize the backend .
10089	Login to the backend .
10090	Returns a dictionary of domains
10091	Get all elements .
10092	Perform a PATCH request .
10093	Perform a DELETE request .
10094	Check if two paths are the same .
10095	Create a new junction link .
10096	Initialize the logger .
10097	Raise a usage error .
10098	Claim VCFs from a list of file readers .
10099	Return the header of the MuTect header .
10100	Claim VCF files .
10101	Initialize population stats .
10102	Claim unclaimed file readers .
10103	Split the data into multiple lines .
10104	Return the line terminator of data .
10105	Return the terminator of a string .
10106	Seek to next line .
10107	Seek to the previous line .
10108	Return the last line of the file .
10109	Returns the first line of the file .
10110	Follow the file .
10111	Claim file readers .
10112	Parse a VCF line into a VCFRecord object .
10113	Format sample tag values as OrderedDict .
10114	Format the tags .
10115	Join info fields
10116	Format field to format .
10117	Returns the field name for a sample
10118	Return the VCF as a string .
10119	Add a tag value to the format tag .
10120	Add or replace the filter .
10121	Return a list of available categories .
10122	Returns a form for a list of products .
10123	Returns a form for creating staff products .
10124	Add an error to the inventory .
10125	Memoise function .
10126	Returns a form for the given model .
10127	Returns a list of items that are pending or purchased
10128	Send an email .
10129	Return an iterator over OpenStreetMap stream .
10130	Parse OSM OSM file .
10131	Iterate over OSM notes .
10132	Returns True if the condition matches the condition .
10133	Check if user is met .
10134	Return the remaining quantity of a user .
10135	Filter items that have been released .
10136	Filter items that are not in the cart .
10137	Filter items that are reserved for this user .
10138	Filter out proposals of a user .
10139	Filter for groups
10140	Decorator to mark cart as modified .
10141	Create a cart for a given user .
10142	Automatically extend the reservation duration .
10143	Apply a voucher code .
10144	Validate the cart .
10145	Fix product and discounts
10146	Recalculate discounts .
10147	Add a discount clause to the cart .
10148	Decorator to create a report view .
10149	Yields the rows of the table .
10150	Returns the form instance .
10151	Render the given data .
10152	List all reports .
10153	List items sold income
10154	Summarize all sales payments .
10155	List all payments .
10156	Show credit note refunds .
10157	Show product status .
10158	Display the status of a discount .
10159	Return a list of invoice items for a product .
10160	Return a list of invoices that have been paid .
10161	View credit notes .
10162	View invoices .
10163	List attendees .
10164	List the speaker registrations .
10165	Displays a manifest of products .
10166	Return a set of all categories that are available for this user .
10167	Return the amount of available credit for this invoice .
10168	Check if the user has sold out or not .
10169	Guided registration .
10170	Edit profile .
10171	Handle a profile form .
10172	List available products .
10173	Handle the products form .
10174	Process a voucher form .
10175	View the current invoice .
10176	View for an invoice access .
10177	View an invoice .
10178	Form a manual payment .
10179	Refund an invoice .
10180	Apply a credit note to an invoice .
10181	Add products to the cart .
10182	Add a new reservation to the cart .
10183	Sends an invoice to an invoice .
10184	Show a list of badges .
10185	Render a badge .
10186	Get available discounts for a given user and product .
10187	Annotate discount items with past use counts .
10188	Return a list of available products for a user .
10189	Apply this credit note to an invoice .
10190	Calculate the cancellation fee for the credit note .
10191	Generate a random access code .
10192	A lazy version of lazy .
10193	Get object from module name .
10194	Returns an invoice for the given cart .
10195	Create a manual invoice for a given user .
10196	Generate line items from a cart .
10197	Apply credit notes to an invoice .
10198	Check if the user can view this invoice .
10199	Refresh invoice from database .
10200	Validate that the invoice is allowed to pay .
10201	Update the status of the invoice .
10202	Mark the invoice as paid
10203	Check if the invoice is in the cart .
10204	Update the validity of the invoice .
10205	Marks the invoice as invalid .
10206	Refund the invoice .
10207	Send an email to an invoice .
10208	Update the instance with the given data .
10209	Flatten a field into a dictionary .
10210	Print downloaded files .
10211	Download a field from the processor .
10212	Get project data .
10213	Get processor objects
10214	Print the inputs of a given processor .
10215	Run data from a string .
10216	Upload files to project .
10217	Upload a file
10218	Download a set of files
10219	Get all subclasses of a class .
10220	Get repo and project .
10221	Get phenotypes with suggested changes .
10222	Return evidence with suggested changes .
10223	Search for variants by coordinate query .
10224	Bulk search variants by coordinates
10225	Update this element .
10226	Remove duplicates from a sequence .
10227	Authenticate asana .
10228	Prompt the user for a list .
10229	Get the data for an issue .
10230	Move issue data to other_ns .
10231	Get task data .
10232	Get an asana task .
10233	Save data to file .
10234	Apply a flag .
10235	Decorator for asana .
10236	Wait for the queue to finish .
10237	Create a task .
10238	Formats a list of tasks with links
10239	Create a missing task .
10240	List of data types in this project .
10241	Log a message to ekmmeters log
10242	init the serial port
10243	Set the values for polling .
10244	Combines A and B .
10245	Returns a JSON representation of the reads since timestamp .
10246	set the context
10247	Calculate PPF .
10248	set max demand period
10249	Set meter password .
10250	unpacks a struct
10251	Convert the read data into a MeterData object .
10252	Render a serial block
10253	Check the CRC of a read .
10254	Split a date into a namedtuple .
10255	Get the month buffer .
10256	set legal CT ratio
10257	Assigns a schedule to the schedule .
10258	Assigns a schedule to a schedule
10259	set season schedules
10260	Assigns a new holiday to a given month and day .
10261	read schedules
10262	Extract information about a schedule .
10263	Read month tar .
10264	Extract the month tariff field from the month .
10265	read holiday dates
10266	Extract holiday date .
10267	Checks if the settings file is valid .
10268	write a message to the device
10269	Send password authentication
10270	Update all observers
10271	Initialize the LCD lookup .
10272	Make a request
10273	Request a meter A
10274	request a b
10275	Add required fields to B
10276	calculates the power factor values
10277	set LCDs command
10278	Set the relay duration .
10279	Send the termination string to the serial port
10280	set pulse input ratio
10281	set zero reset table
10282	Set the LCDs .
10283	Iterate over fields in a schema .
10284	Iterate over a schema .
10285	Creates a list of paragraphs .
10286	Generate a random text .
10287	Return statistics .
10288	Colorize text .
10289	Show text .
10290	Returns a summary of the result .
10291	Parse command line arguments .
10292	Setup ivoire .
10293	Run tests .
10294	Run the script .
10295	Transform a describe node to a test definition .
10296	Transform the describe body .
10297	Transform an example node .
10298	Transform an example body .
10299	A helper for creating an astroid . Arguments .
10300	Register a file finder .
10301	Convert source to code .
10302	Returns the arguments parsed by the argparseParser .
10303	Load a module by name .
10304	Load source from a path .
10305	Find all files in path .
10306	Return a function that checks the contents of a file .
10307	Return a function that checks if the file is new .
10308	Add a command to the config .
10309	Remove a config file .
10310	Send a restart message .
10311	Call a Place object .
10312	Create a TaserService .
10313	Create a processmon service
10314	Refresh a session .
10315	Remove expired nodes .
10316	Remove a node from the nodelist .
10317	Get the last updated node .
10318	Get all nodes .
10319	Refresh the session
10320	Increment the times modified time
10321	Dereference this node .
10322	Delimit a list of values .
10323	Check if path is bad .
10324	Merge the current message with the given status .
10325	Create a query that matches the given value .
10326	Create a MATCH query .
10327	Returns a function that returns a constant .
10328	Splatted version of a function .
10329	Returns a function that takes an iterable and returns it .
10330	Run a process and wait for it to finish .
10331	Create a timer service
10332	Parse the parser and return a FailureFailure .
10333	Parse a literal .
10334	Create an optional parser .
10335	Create a parser that parses a parser .
10336	Create a parser from a parser .
10337	Create a parser with a separator .
10338	Create a repeated separated parser .
10339	Check states .
10340	Close the transaction .
10341	Check if the URL is valid .
10342	Add a new heart service .
10343	Wrap a service in a multi service .
10344	Freeze the graph from a checkpoint .
10345	Freeze model from checkpoint .
10346	Save graph only .
10347	Save graph only from a checkpoint .
10348	Save weights from a checkpoint .
10349	Restore meta graph from checkpoint .
10350	Parse the tag from the given parser .
10351	Render tag .
10352	Validate the arguments of a tag .
10353	Returns the context data .
10354	Parse template tag .
10355	Return the context data .
10356	Convert caffe model to TensorFlow session .
10357	Freeze a caffe file .
10358	Save graph only .
10359	Split a sequence into num_columns columns .
10360	Group n items in iterable into chunks .
10361	Iterate over all items in iterable .
10362	Remove duplicates from an iterable .
10363	Peek in an iterable .
10364	Yield the next item from iterable until the predicate is reached .
10365	Partition items into bins .
10366	Check if item is iterable .
10367	Suppress exceptions from callables .
10368	Return a list of duplicates .
10369	Assert iterable is ordered .
10370	Swap the first item in the partition result .
10371	Partition a dictionary by key .
10372	Get first n queues
10373	Reset the iterator .
10374	Parse as_var .
10375	Decorator to mark a class as a template tag .
10376	Given a chain path return a PublicKeychain .
10377	Fetches the SQLite master record list .
10378	Iterate over objects in an object .
10379	Return True if the given selector matches the given object .
10380	Parse a selector .
10381	Parse a selector .
10382	Returns the list of nodes from lhs and rhs .
10383	Return nodes that are ancestors of lhs and rhs .
10384	Return the siblings of lhs and rhs .
10385	Parse the nth - child expression .
10386	Match the given validators .
10387	Send ICMP ping to destination .
10388	Send request body .
10389	Expire expired entries .
10390	Store a value in the cache .
10391	Get a value from the cache .
10392	Returns True if the key is in the cache False otherwise .
10393	Check if the beacon is valid .
10394	Create a node from a JSON string .
10395	Create a beacon from an XML string .
10396	Returns the rendered content of the rendered template
10397	Get the contents of the file .
10398	Return a list of rows .
10399	Validate token .
10400	Return the Fernet engine .
10401	Validate token .
10402	Create a token .
10403	Compute counter32 .
10404	Compute the counter value .
10405	Calculate the average duration .
10406	Setup Riemann outputs
10407	Setup sources and triggers .
10408	Send an event to the event queue .
10409	Start the watchdog
10410	Parse a format string .
10411	Parse log line .
10412	Validate the expiration date .
10413	Ensure that the message is valid .
10414	Verify a token
10415	The device name .
10416	Deprecated .
10417	Connects to receivers .
10418	Create a secret link .
10419	Send an accept notification .
10420	Send confirmation notification .
10421	Send email notification .
10422	Sends a rejected notification .
10423	Send email notification .
10424	Create a new secret link .
10425	Validate a secret token .
10426	Revoke this link .
10427	Create a new Request
10428	Get request by receiver .
10429	Confirm this request .
10430	Accept this request .
10431	Reject this request .
10432	Create a secret link .
10433	Generate a SHA512 hash .
10434	Verifies that a signature is valid .
10435	Check if a record is emargoed
10436	Handle access request .
10437	Confirm email address .
10438	Return a connection to the SSH server .
10439	Reverse a column
10440	Return the selected value .
10441	Return an ordered query .
10442	Extract the version from the file .
10443	Set the version of the file .
10444	Initialize SSH variables .
10445	Start the timer .
10446	Start the event loop .
10447	List shared links .
10448	Create a new Riemann client .
10449	Stop the transport .
10450	Empty the queue .
10451	Handle events received .
10452	Create a connection to the Riemann server .
10453	Create an Elasticsearch client
10454	Encodes an Event into a protobuf .
10455	Encodes a list of events into a protobuf .
10456	Decodes a protobuf message .
10457	Send events .
10458	Generate file previews .
10459	Retrieve a preview .
10460	Send message to R_Q queue .
10461	Message loop
10462	Return True if log_delta is enabled .
10463	Respond to a SASL response .
10464	Abort SASL authentication .
10465	Do mapping of SASL characters .
10466	Render the admin footer .
10467	Build payment parameters
10468	Build the payment parameters for register credit card .
10469	Send a Pay with an alias
10470	Get the version string .
10471	Constructs the widget .
10472	Initialize the filesystem browser .
10473	Configure up shortcuts
10474	Activates the item at the given index .
10475	Handle the selected item .
10476	Navigate to the given index .
10477	Finalize options .
10478	Compile the resource . py file .
10479	Clean the directory .
10480	Fetches the children of this node .
10481	Refetch all children .
10482	Returns the icon for the given index .
10483	Call the given command with the given arguments .
10484	Get the maximum file descriptor .
10485	Close a file descriptor .
10486	Close open descriptors .
10487	Redirect stream to target .
10488	Set widget attributes .
10489	Given a module name import it .
10490	Import all project modules .
10491	Include a template .
10492	Get gravatar URL .
10493	Get gravatar image .
10494	Check if path is a valid file system
10495	Check if url is a valid S3 location
10496	Get the absolute path of a template file .
10497	List objects in the bucket .
10498	Builds a JSON representation of the workflow
10499	Execute this workflow .
10500	Archive a folder .
10501	Create a directory recursively .
10502	List all files in the archive
10503	Restore a folder from the project archive
10504	Create an instance of the client .
10505	List the files in the given path .
10506	Download a file .
10507	Checks if the given storage path exists .
10508	Gets the parent entity of the given path .
10509	Create a folder at the given path .
10510	Uploads a file to the given destination path .
10511	Deletes the given path from the storage .
10512	Validates that the storage path is valid .
10513	Create a new Storage client .
10514	Create a new entity .
10515	Get entity details .
10516	Set the metadata for a given entity .
10517	Get metadata for a given entity .
10518	Updates the metadata of an entity .
10519	Deletes the specified metadata for the specified entity .
10520	List projects .
10521	Get project details .
10522	Create a new project .
10523	Deletes a project .
10524	Create a new folder .
10525	Returns details about a folder .
10526	Deletes a folder .
10527	Uploads the content of a file .
10528	Copies the content of a file to a file .
10529	Download the content of a file .
10530	Gets the signed URL of a file .
10531	Emit a record .
10532	Get the URL for a given service and version .
10533	Returns a copy of the response with the given headers .
10534	Returns a copy of the request with the given parameters .
10535	Raise an exception .
10536	Returns a list of field names to display .
10537	Apply a function to each sample in a list of samples .
10538	Use GATK to generate GATKGVCFs using GATK .
10539	Run oncotator on a VCF .
10540	Sort the list .
10541	Return a list of datetime objects .
10542	Load export data .
10543	Shift the data .
10544	Return the sum of all values
10545	Return a list of Rfxcom objects .
10546	Create a new user .
10547	Parses VNS results .
10548	parse release results
10549	Parse product staff results .
10550	Parse character results .
10551	parse tag results
10552	parse user results
10553	Write a list of file paths to a tar archive .
10554	Apply an operation to all files in a directory .
10555	Copy a file from the job store to the output_dir .
10556	Create arguments for spark .
10557	Build docker parameters
10558	Read metadata from disk
10559	Run MuTect .
10560	Create this node .
10561	Return a list of streams .
10562	Export the device to a directory .
10563	Search VNDDB .
10564	Parse search results .
10565	Add a stream to the dataset
10566	Reset API key .
10567	List of users .
10568	Create a BWA index for a reference .
10569	Connect to the DB
10570	Add a stream
10571	Add a stream to the database
10572	Insert a datapoint into the cache .
10573	Sync the datapoint database
10574	Start the syncer .
10575	Stop sync thread .
10576	Download the given URL to S3 .
10577	Uploads a file to S3
10578	List labels for a given ontology
10579	Print tree of given ontology
10580	Get the mean size of a bam
10581	Get the current container ID .
10582	Download and download star index from star index .
10583	Create a new document in the database .
10584	Export the stream to a directory .
10585	Return a Device object
10586	Get all labels for an ontology
10587	Get the hierarchy of an ontology
10588	Run a toil command .
10589	Populates an ArgumentParser from a configuration dictionary .
10590	Get the empty config .
10591	Get the path to the docker mount
10592	Add an option to the arg_parser .
10593	Create an argument parser .
10594	Create the command to run the pipeline .
10595	Set authentication for websocket
10596	Handle the result of the server .
10597	Ping the server
10598	Create a new resource .
10599	Update a resource
10600	Perform a DELETE request
10601	Subscribe to a stream .
10602	Create a new object .
10603	List devices .
10604	Run cutadapt .
10605	Run samtools faidx on a reference
10606	Run samtools index on a bam
10607	Run sambamba markdup on the input bam
10608	Run samblaster on sam
10609	Mark duplicates in a BAM file .
10610	Run Picard sort .
10611	Run GATK base recalibration .
10612	Download kallisto index from hg38
10613	Download RSEM reference files from RSEM .
10614	Returns the affinity of the user
10615	Send a command to the server .
10616	Subscribe to a stream .
10617	Connect to the server .
10618	Reconnect to the server
10619	Resubscribes all subscriptions
10620	Connect to the websocket
10621	Called when the websocket is closed
10622	Connection error handler
10623	Handle a websocket message
10624	Check if websocket is alive
10625	Run GATK selectVariants to select variants from a VCF
10626	Run VATK VariantFilter on a VCF .
10627	Run GATK variant recalibrator .
10628	Run GATK Recalibration on a VCF .
10629	Run GATK CombineVariants .
10630	Check if bam is quickcheck
10631	Load handlers from a mapping .
10632	Write configuration to config file .
10633	Get the current configuration .
10634	Get a single term by iri
10635	Search ontology by name
10636	Search for an ontology
10637	Iterate over the descendants of an ontology .
10638	Iterate over all descendants of ontology .
10639	Iterate over labels of ontology .
10640	Iterates over the terms of an ontology .
10641	Run fastqc on given R1 and R2 .
10642	Add a stream to the query
10643	Initialize the Flask application .
10644	Start the Spark container .
10645	Start Spark .
10646	Start the datanode
10647	Stop the Spark container .
10648	Check the status of the Spark container .
10649	Tokenize a file .
10650	Looks up a zone by name .
10651	Fetch the configuration for a zone .
10652	Merge a list of ResourceRecordSets into a single XML .
10653	Validate changeset .
10654	Sort members by fitness score .
10655	Returns the fitness of the group .
10656	Return the average cost function value of all members .
10657	Returns the median cost function of all members .
10658	Returns the sum of all parameters in the group .
10659	Return the members of the process .
10660	add a parameter
10661	Select next generation .
10662	Normalize options .
10663	Get environment variables .
10664	Calls the given callable with the given exceptions .
10665	Transform a list of packages into a list of packages
10666	Convert result to string .
10667	Convert html to XHTML .
10668	Convert xhtml to HTML .
10669	Convert an XML document to a string .
10670	Open an HTML document in a web browser .
10671	Drop the tree .
10672	Drop the current tag .
10673	Get element by id .
10674	Apply CSS selector to the document .
10675	List all log handlers
10676	Get the number of tests .
10677	Determine whether a single class is a single class .
10678	Check if a module is a single module .
10679	Validate params in request .
10680	Ensure id is valid
10681	Decode a file system encoding .
10682	Escape the argumentspec of an object .
10683	Returns the canonical name of the given encoding .
10684	Detects the BOM from the stream .
10685	Get the remote address from the forwarded_for list .
10686	convert obj to Decimal
10687	Parse HTML document .
10688	Parse an XML file .
10689	Convert BeautifulSoup tree to HTML .
10690	Get the current traceback .
10691	Return the exception as a string .
10692	Render a summary of the traceback .
10693	Generate a plaintext representation of the traceback .
10694	Return a list of lines annotated with this code .
10695	Render the source table as HTML .
10696	Given an egg_info link return the project name and version .
10697	Get the locations of a project .
10698	Find all versions of a project .
10699	Return an InstallationCandidate for the given requirement .
10700	Sort a list of links .
10701	Get the Content - Type header .
10702	Return a generator that yields Link objects .
10703	Return whether this link is verifiable .
10704	Find data files for a package .
10705	Exclude data files .
10706	Parse requirements file .
10707	Join a list of lines .
10708	Ignore comments .
10709	Compile a marker
10710	Visit the AST node .
10711	Return an ast . Attribute node .
10712	Coerce a value into a number .
10713	Decorator to copy current request context .
10714	Push the current context to the stack .
10715	Pop an app context .
10716	Return a copy of this instance .
10717	Match the request .
10718	Push the current context onto the stack .
10719	Make path relative to relative_to .
10720	Return True if dist is editable .
10721	Add a url - value preprocessor .
10722	Add a url default function to the app .
10723	Register an error handler .
10724	Stream a generator from a request context .
10725	Make a response .
10726	Generate a URL for the given endpoint .
10727	Safely join a file .
10728	Get the root path of an import .
10729	Returns a Jinja loader
10730	Print completion script .
10731	Return the domain of the session cookie .
10732	Generate a cache key for a link .
10733	Check if root is purelib .
10734	Return path to uninstallation paths .
10735	Check if wheel is compatible with pip .
10736	Build a wheel .
10737	Iterate over symbols in a code object .
10738	Decorator to ensure fresh rates are available .
10739	Add egg - info files .
10740	Write a delete marker file .
10741	Return True if running in virtualenv .
10742	get username
10743	Return a scheme for a distutils distribution .
10744	Parse cache - control headers
10745	Check if a request is cached .
10746	Cache the response
10747	Update the zipimporter cache .
10748	Load script template .
10749	Install the site . py file .
10750	Save path to file .
10751	Convert a value to the appropriate type .
10752	Add filters to the given filterer
10753	Configure logging handler .
10754	Add handlers to a logger .
10755	Common logger configuration .
10756	Execute a Python script .
10757	Temporarily override a temporary directory .
10758	Replace url with ssh and ssh
10759	Get an item from an object .
10760	Generate code from source .
10761	Compile Jinja2 templates .
10762	Return the default cache path .
10763	Find eggs in zip file .
10764	Find distributions on the given path .
10765	Declare a namespace .
10766	Get the list of MROs of the given class .
10767	Find adapter for ob .
10768	Ensure directory exists .
10769	Iterate over all entry points in a group .
10770	Check whether the given dist can be added .
10771	Find the best match to a working set .
10772	Evaluate a marker .
10773	Evaluate a marker library .
10774	Format a log record .
10775	Format a number .
10776	Parse a number pattern .
10777	Returns decimal quantum .
10778	Get decimal precision .
10779	Compute scientific notation elements .
10780	Return the total seconds in seconds .
10781	Parse requirements .
10782	Ensure that class is not patched .
10783	Check that requirements are valid .
10784	Fetch the build egg
10785	Roll the dice
10786	Convert an object to a Price class .
10787	Declare price .
10788	Validate the request .
10789	Get method by id .
10790	Calls the given method and returns the result .
10791	Deprecated .
10792	Get the blueprint name for the route .
10793	Create a subclass of files with error messages .
10794	Make an abstract distribution .
10795	Add an InstallRequirement to this environment .
10796	Walks the requirements to install the given handler .
10797	Check if a requirement is installed .
10798	Returns an ordered list of requirements .
10799	Get all namespace packages .
10800	Encode the given object as JSON .
10801	Tokenize a document .
10802	Merge two HTML annotations .
10803	Copy annotations from src to dest .
10804	Compress a list of tokens .
10805	Serialize a list of tokens into HTML .
10806	Expand tokens .
10807	Locate the unbalanced end of the unbalanced end .
10808	Fix the HTML representation of a list of chunks .
10809	Flatten an HTML element .
10810	Split text into words .
10811	Return start tag .
10812	Return HTML end tag .
10813	Serializes an HTML fragment .
10814	Remove ins and delete tags from a doc .
10815	Extract a constant from code .
10816	Return the URL for a cache request .
10817	Add links to an element .
10818	Kill conditional comments .
10819	Create a DOM from a string .
10820	Decorator to make sure the API returns JSON
10821	Return the tree walker for the given type
10822	Export an svn repository to the given location .
10823	Get the revision for a given location .
10824	Decorate a function to be called after the first request .
10825	The name of the module .
10826	Return whether or not the debugger should be propagated .
10827	Find the path to the instance .
10828	Update the current template context .
10829	Handle an HTTP exception .
10830	Return True if the given exception should be handled .
10831	Handle an exception .
10832	Raise an exception if the request is not enabled .
10833	Dispatch the request .
10834	Make default OPTIONS response .
10835	Create a URL adapter .
10836	Inject URL defaults to the given endpoint .
10837	Yield unique elements from an iterable .
10838	Process pkg_info .
10839	Convert a requirement to a string .
10840	Convert pkginfo to metadata
10841	Iterate over all the modules in this environment .
10842	Returns a generator that yields all TestCase classes that match the class_name .
10843	get method names
10844	Find the basename of a file .
10845	Check if given path is a module path .
10846	Walks the given basedir and returns the root directories and files
10847	Return an iterator over all paths in the base directory .
10848	Dump JSON arguments to JSON .
10849	Set default decoder for current app .
10850	Emulate set .
10851	Increments the value of a key by the given value .
10852	Serialize an object .
10853	Parse editable options .
10854	Populates the link of this requirement .
10855	Ensure source_dir exists .
10856	Remove the temporary source .
10857	Returns a pkg_resources . Distribution object .
10858	Get data from the request .
10859	Return the WSGI headers for this response .
10860	Convert an IRI to a native URI .
10861	Return the path to the user s cache directory .
10862	Get the path to the user s data directory .
10863	Get user log directory .
10864	Return the path to the user s config directory .
10865	Return a list of directories for the given application .
10866	Iterate over all module files .
10867	Restart the environment with a reloader .
10868	Convert s to text .
10869	Find the CA bundle .
10870	Parse an HTML document .
10871	Parse the given stream into a DOM tree .
10872	Parse HTML fragment .
10873	Returns a sorted list of all transmissions for word .
10874	Convert command line arguments to tokens .
10875	Bind to the server
10876	Print report message .
10877	Load the bytecode from a file .
10878	Given a dictionary of stylesheet parameters return a new dictionary with the given parameters .
10879	Run a VCS command .
10880	Get the implementation version
10881	Return a list of distributions for a given location .
10882	Find external links .
10883	Open a local file .
10884	Process a URL .
10885	Return set of removed paths .
10886	Initialize path from sys . path
10887	Add package name to sys . path
10888	Add path components to sys . path
10889	Check if the process is enabled .
10890	Add user - site - packages
10891	Set quit to quit .
10892	Alias for mbcs .
10893	Set default encoding .
10894	Force all global eggs after sys . path .
10895	Fix sys . path in sys . path
10896	Wrapper for subprocess . Popen .
10897	Check if pyrex is available .
10898	Convert Cython source files to language .
10899	Context manager for debugging .
10900	Get a resource .
10901	Return user agent information .
10902	Check if name is a URL .
10903	Unpack a link to a location .
10904	Download a file from a URL .
10905	Check if a link is already downloaded .
10906	Format currency action .
10907	Register an exchange .
10908	Decode the response .
10909	Default template context processor .
10910	Render a template .
10911	Render a Jinja2 template .
10912	Render a Jinja template .
10913	Parse a version string .
10914	Check if a variable is declared .
10915	Visitor for NameNode .
10916	Visit a template .
10917	Visit an import node .
10918	Create a wheel file in base_dir .
10919	Atomize a function .
10920	Factory for service factory
10921	Encode the given object as unicode .
10922	Find wheels that match a requirement .
10923	Populate a requirement set .
10924	Export to a temporary directory
10925	Lookup Amazon Products .
10926	Iterate over pages .
10927	The ancestors of this browse node .
10928	Children of this browse node .
10929	Safely get an element .
10930	Get element text .
10931	Get the date of the element .
10932	Returns the price and currency .
10933	List Price .
10934	Override caching .
10935	Build the response .
10936	Create an attribute getter from an environment .
10937	Convert string to title
10938	Sort an iterable .
10939	Group tuples by the given attribute .
10940	Apply a filter to an iterable .
10941	Create a logger .
10942	Compare two strings .
10943	Verifies that a signature is valid .
10944	Derives the secret key .
10945	Generate base64 - encoded signature .
10946	Sign a value .
10947	Verify a signature .
10948	Return signed value .
10949	Sign a value .
10950	Validate signed value
10951	Serialize and sign the given object .
10952	Error handler .
10953	Find packages .
10954	Given a list of packages require parents .
10955	Return all directories in base_path .
10956	Prepare the cached response .
10957	Unsign a wheel .
10958	Unpack a wheel file
10959	Install setuptools scripts .
10960	Rearrange the graph .
10961	Redraw the graph .
10962	Get a node by its ID .
10963	Called when the graph is directed .
10964	Handle edges .
10965	Called when a component is changed
10966	Left click on the component
10967	Called when diagram canvas is changed .
10968	Clear the diagram .
10969	Called when a diagram is changed
10970	Map the elements in the domain model to another .
10971	Remove all elements from the collection
10972	Map element to diagram
10973	Set the style of a node .
10974	Parse xdot data .
10975	Process font .
10976	Process an ellipse component .
10977	Process a polygon .
10978	Process a polyline .
10979	Process text .
10980	Process an image .
10981	Serializes a GridFS file .
10982	Save the dot file
10983	Load dot file .
10984	Checks if a point is inside the rectangle .
10985	Draw the bounding box
10986	Create a new DotGraph wizard
10987	Connect to the database .
10988	Parse dot code .
10989	Create new graph
10990	Open graphviz file .
10991	Save model to file .
10992	Saves the model to file
10993	Configures the graph
10994	Configure nodes .
10995	Configure edges .
10996	Called when a got .
10997	Add a new node .
10998	Add an edge to the graph .
10999	Add a subgraph to the UI .
11000	Add a cluster to the cluster
11001	Request the selected graph .
11002	Edit options .
11003	Configure dot code
11004	Prompt the user to exit .
11005	Move components to origin
11006	Save the object to a file .
11007	Load from a file - like object .
11008	Save object to file .
11009	Load from file .
11010	Alias of a property .
11011	Parse a text file .
11012	List of start words
11013	Add a Markov chain .
11014	Remove a chain from the chain .
11015	Build a chain .
11016	Generate a sentence from the chain .
11017	Create and save the graph .
11018	Add a new node
11019	Remove a node from the graph .
11020	Get a node by its ID .
11021	Delete an edge .
11022	Add an edge to the graph .
11023	Add a subgraph to this graph .
11024	Report if a program is changed .
11025	Set the nodes of the graph .
11026	Parse a DOT file .
11027	Parse a dot file .
11028	Build the top graph .
11029	Build graph from tokens .
11030	Get units and multiplier for a given time .
11031	Format a duration in seconds .
11032	Update graph with new name .
11033	Create the ui
11034	Split a sequence into n times .
11035	Yield multiple windows .
11036	Run the application .
11037	Get all children of an object .
11038	Append a child object to the object .
11039	Insert a child into the object .
11040	Remove a child from an object .
11041	Called when children are replaced .
11042	Called when children changes
11043	Get label from object
11044	Set the label of an object .
11045	Called when the widget is changed .
11046	Initialize the graph
11047	Update the editor .
11048	Add listeners to the graph editor .
11049	Called when a node is replaced .
11050	Node changed .
11051	Add nodes to the graph .
11052	Replace old edges .
11053	Called when an edge is changed .
11054	Add edges to the graph .
11055	Parse xdot directive .
11056	Called when drawing changes .
11057	Create a node .
11058	Create an edge .
11059	Set up the database
11060	Parse xdot directive .
11061	Parse xdot directive .
11062	Called when drawing is changed
11063	Update the widget s position
11064	update the position of the component
11065	Handles the right - down event .
11066	Display a list of styles
11067	Draw the main layer .
11068	Checks if a point is in the polygon .
11069	Draw the main layer
11070	Handle an event .
11071	Run the loop .
11072	Get full page url .
11073	Return HTML for the previous page .
11074	Render the links for the page .
11075	Return True if candidate matches content type .
11076	Select most specific content type .
11077	Rewrite a URL .
11078	Remove auth from url
11079	Create URL identifier .
11080	Normalize host .
11081	Find modules in a directory .
11082	Discover all modules in a directory .
11083	Find all modules in a module .
11084	List all classes in a module .
11085	List all classes in module .
11086	Ensure directory exists .
11087	Store the contents of a blob .
11088	Checks if a card number is valid .
11089	Returns the git revision as string .
11090	Load a module .
11091	Add a path to the list of paths
11092	Find a module by name .
11093	Split a line into multiple lines .
11094	Remove namespaces from root .
11095	Check that the current version matches the desired version .
11096	Create an instance from a YAML dictionary .
11097	Merge the actions from a dictionary .
11098	Execute all actions in the given working directory .
11099	Create an instance from a YAML configuration file .
11100	Add details to the message
11101	Send the message to the rate limit .
11102	Add image_renition to context
11103	Log account attempt .
11104	Add url to queue .
11105	Start all the workers .
11106	Set the value of a key .
11107	Get a value from KVStore
11108	Get the contents of a key .
11109	Get the index of a node .
11110	Delete an item .
11111	Plot heatmap for feature importance .
11112	Adds a number of months to a given timestamp .
11113	Adds a number of months to a date .
11114	Is the christmas period?
11115	Use a music service .
11116	Use the given storage service .
11117	Load data from a CSV file .
11118	Read JSON from JSON file .
11119	Write data to JSON file .
11120	Filter by reference label
11121	Average by label
11122	Feature importance report .
11123	Restore session data .
11124	Merge two dictionaries .
11125	Decorator for dispatching a function .
11126	Add a method to a dispatch function .
11127	Import all registered blocks .
11128	Verify that the given block is registered .
11129	Register a block .
11130	Unregisters the given block type .
11131	Convert file_name to MP3 .
11132	Checks if the desired version is valid .
11133	Handle SSL redirects .
11134	Initialize celery task .
11135	Queue an email .
11136	Parse Accept header value .
11137	Parse cache control directives .
11138	Parse a Content - Type content type .
11139	Parse a forwarded header value .
11140	Parse a comma - separated list .
11141	Parse parameter list .
11142	Resizes an image to fit width .
11143	Add a new value .
11144	Download a video .
11145	Connect to Google Music .
11146	Uploads a file to the server .
11147	Connect to music folder .
11148	Write sky parameters to file
11149	Update the names of the sky files
11150	Read Aphi absorption from file .
11151	scale A_phi
11152	read pressure absorption from file
11153	Read Pure water scattering from file .
11154	read iop from file
11155	write iop to file
11156	Build the b
11157	calculate total absorption
11158	Build total attenuation C .
11159	build all b and c c
11160	Batch parameters .
11161	Read a parameter file into a dictionary
11162	Converts a string to a list of floats .
11163	Read a Quad solid angle mean and phi table .
11164	Register a signal handler .
11165	Signal handler .
11166	Default handler .
11167	Pause a signal .
11168	Abort a signal .
11169	Process a status signal .
11170	Unregisters an event from the signal list
11171	Query the DPS for a given metric .
11172	Return a sorted list of metrics .
11173	Return a list of n elements .
11174	Print an item to stdout .
11175	Print all items in iterable .
11176	Initialize signature from a function .
11177	Initialize signature from a partial instance .
11178	Return new argv .
11179	Return True if the filename should be ignored .
11180	Return the priority of a file .
11181	Convert a VLQ value to an integer .
11182	Read an integer table .
11183	Parse archive header .
11184	Returns the duration in seconds
11185	Print team details .
11186	Set the data from the UI
11187	Search the file result file .
11188	Writes the batch to a file .
11189	Process the output file .
11190	Display the connected graphic
11191	Print graphic information .
11192	Displays the error message .
11193	Hides the error message .
11194	Run the planarrad .
11195	Cancel the planarrad
11196	Quit the program .
11197	Saves the figure to the GUI .
11198	Opens the log file .
11199	Opens the documentation .
11200	Prerequisite actions .
11201	Click event handler
11202	Mouse move event handler
11203	Display the target
11204	Return a LockSet for the given genesis block .
11205	Sign this instance .
11206	Return the hash of this signature .
11207	Check if this node is valid .
11208	Issue a new funds .
11209	Return the last lock .
11210	Return the last vote proposal .
11211	Return the last valid lockset .
11212	Get the timeout time in seconds .
11213	Called when a proposal has been reached .
11214	Generate private keys .
11215	Calculate the delay of a packet .
11216	Deliver packet to receiver .
11217	Creates a proxy for a given chain .
11218	Convert an address to a native contract class .
11219	Register a native contract .
11220	Update filter .
11221	Called when a remote transaction is received .
11222	Convert vgg to RGB
11223	Convert image to vgg .
11224	Get the f layer .
11225	Get layer output .
11226	Get features for x .
11227	Create a new key file
11228	Runs the batch .
11229	Load data from a file .
11230	Put items into the batch .
11231	Releases the bulk load .
11232	Return table names .
11233	Make sure that the compiler is compiled .
11234	Find Teradata home directory .
11235	Get a configuration value .
11236	Set a configuration value .
11237	Process a table line
11238	Execute a command .
11239	Get a value from settings .
11240	Write default configuration to file .
11241	Set the filter .
11242	Write the table to an archive .
11243	Return settings as a string .
11244	Convert a string to a float .
11245	Parse Gains from a string .
11246	Return device settings from string .
11247	Wrap the given text with the specified indent .
11248	Detects and returns a tuple of devices .
11249	Set the center frequency .
11250	Calculate frequency and power of the PSD .
11251	Wait for a PSD to finish .
11252	Update PSD state
11253	Read data from a file - like object .
11254	Write packet data to file .
11255	Submits the given function to the pool .
11256	Return the number of times to repeats .
11257	Calculate the frequency plan for a given min_freq and max_freq .
11258	Create a new buffer
11259	Setup the PSD
11260	Stop the stream .
11261	Tune the stream
11262	Perform a sweep .
11263	Set the slave address .
11264	Run CMake using CMake
11265	Given a list of datetimes return a list of datetimes that are valid .
11266	Mask datetime .
11267	Mask the week in the given datetime .
11268	Given a set of datetimes return a subset of the given datetimes .
11269	Convert a list of datetime objects to delete .
11270	Return a set of dates to keep .
11271	Return a list of dates to delete .
11272	Get the SPI control byte from the hardware .
11273	Read a single bit value .
11274	Write a bit value to the specified address .
11275	Get the bit number from a given bit pattern .
11276	Watch port events for the specified port .
11277	Handle events from a queue .
11278	Activate GPIO interrupt into userspace .
11279	Set the interrupt edge of the GPIO device
11280	Wait until a file exists .
11281	Register a callback for a pin .
11282	Deregisters a pin .
11283	Enable GPIO interrupts .
11284	Send the specified bytes to the SPI buffer .
11285	Render a form .
11286	Return True if the form has any errors .
11287	Render the link .
11288	Extract the version of a package .
11289	Return the form kwargs .
11290	Check status of the API response .
11291	Make a GET request .
11292	Get download link .
11293	Get upload link .
11294	Upload a file to a folder .
11295	Upload a remote URL to a folder .
11296	Get the status of a remote upload .
11297	List files in a folder .
11298	Get a list of running conversion conversions .
11299	Calculate humidity .
11300	Calculate the dewpoint at a given temperature .
11301	Publish to server .
11302	Calculate Vpro CRC .
11303	Verify CRC
11304	Unpack a storm date into a string .
11305	Determine whether or not the archive rev .
11306	Wake the weather station .
11307	send a command to weather station
11308	Send DMPAFT command .
11309	Get the newest record .
11310	Parse the loop fields .
11311	Update weather data .
11312	Initialize logging .
11313	Get all pub services
11314	Get wind gust .
11315	Set parameters for Wunderground upload .
11316	Set arguments .
11317	Write dictionary to file .
11318	Decorator that allows the user to request a request .
11319	Initialize an extension .
11320	Returns True if all requirements are satisfied .
11321	Push an override to the stack .
11322	Pop the current override context .
11323	Temporarily overrides an override .
11324	Push additional context to current context stack .
11325	Remove the current context from the stack .
11326	Adds additional arguments to the context .
11327	Unduplicate field names .
11328	Interpret stats .
11329	Extract params from user namespace .
11330	Run a query against the database .
11331	Returns a Pandas DataFrame .
11332	Get the graph of the results .
11333	Plot a pie chart .
11334	Plot the data .
11335	Plot a bar chart .
11336	Write the results to a CSV file .
11337	Decorator that checks if the user has a permission .
11338	Returns context data .
11339	Returns sorted list of widgets sorted by position .
11340	Get widgets that need update .
11341	Register a dashboard widget .
11342	Unregister a widget .
11343	Returns the last update of the dashboard widget
11344	Get setting by name
11345	Save a setting to the dashboard .
11346	Check if the last update should be updated
11347	Convert an array into Spark .
11348	Create one or more ones .
11349	Concatenate two arrays .
11350	Check if arguments are valid
11351	Helper function to format axes .
11352	Wrap a function over a set of keys and values .
11353	Align the array with the given axes .
11354	Convert to Spark .
11355	Return a tordd .
11356	Create a new RDD with the specified size .
11357	Apply a function to each RDD .
11358	Split the data into a single chunk .
11359	Apply a function to each element in the ChunkedArray .
11360	Apply a function to each RDD .
11361	Get the plan of the data
11362	Remove padding from array .
11363	Get the number of chunks of a plan .
11364	Split plan into slices .
11365	Return a mask of the given indices .
11366	Repartition the RDD by npartitions .
11367	Return a stack of the given size .
11368	Align the dimension along a given axis .
11369	Returns the first item in the RDD .
11370	Return statistical statistics for each dimension .
11371	Return the mean of an axis .
11372	Return the variance of an axis .
11373	Return the standard deviation of an axis .
11374	Compute the sum of each dimension .
11375	Return the maximum value .
11376	Return the minimum value .
11377	Create a chunk of the data .
11378	Return a copy of this BArray with the same axes .
11379	Transpose the dimension .
11380	Transpose axis1 and axis2 .
11381	Reshape the array .
11382	Return the index of the given shape .
11383	r Squeeze out the data .
11384	Cast this RDD to a new type .
11385	Clip elements in this RDD .
11386	Convert to numpy array .
11387	Convert an argument to a tuple .
11388	Convert arguments to a tuple .
11389	Check if axis is in shape .
11390	Return True if a and b are allclose .
11391	Return a flattened list of integers .
11392	Slicify a slice .
11393	Check if two axes are in the same order .
11394	Check whether new keys are reshapeable .
11395	Concatenate a list of arrays .
11396	Expands an array along an axis .
11397	Zip the RDD with index .
11398	Decorate a function to construct an array .
11399	Lookup a constructor by name .
11400	Reshape the barray .
11401	Return a new barray with the same shape .
11402	Reshape the BoltArray .
11403	Return a copy of the barray .
11404	Create one or more ones .
11405	Create an array of zeros .
11406	Concatenate multiple arrays .
11407	Compute a discrete likelihood of data .
11408	Returns the most likely alpha .
11409	Estimate discrete alpha .
11410	Compute the best alpha for the given data .
11411	Calculate the best alpha of the model .
11412	Plot the probability distribution .
11413	Compute the lognormal distribution
11414	Sanitize the HTML .
11415	Configure analytics .
11416	Return a list of tags for the model .
11417	Return the MD5 of the key .
11418	Return the SHA256 hash of the key .
11419	Return the SHA512 hash of the key .
11420	Parse a long string .
11421	Decode a public key
11422	Parse options .
11423	Process SSH RSA key .
11424	Process a DSA key .
11425	Process the ECDSA hash .
11426	Process ed255 16 bit bits .
11427	Parse SSH key .
11428	Step the current mechanism .
11429	Step the input token .
11430	List of mechan names .
11431	Store a GSSAPI credential .
11432	Main entry point .
11433	Initialize setuptools .
11434	Context manager to create a file .
11435	Return HTML for h5bp CSS .
11436	Return HTML for djfrontend normalize
11437	Return CSS for a fontawesome file .
11438	Return HTML for dj Frontend
11439	Return HTML for django frontend .
11440	Return HTML for the jj frontend .
11441	This function is used to render the Django Datatatable data tables
11442	Return HTML for the JJFRONTEND_DATATABLES stylesheet
11443	Return HTML for the Django Datatersoller .
11444	Return HTML for the jQuery formset
11445	Return HTML for jQuery scrollto
11446	This function is used to render jQuery s smoothscroll .
11447	Link to twbs .
11448	Returns HTML for the Google Analytics API .
11449	Render CodeMirror text .
11450	Iterate over authentication hashes .
11451	Calculate the expiry time .
11452	Generate a token for a user .
11453	Serialize the User object .
11454	Deserialize profile into a dict .
11455	Update a profile .
11456	Called when an authentication failed .
11457	Check if the token is valid .
11458	Check if the request is secure .
11459	Get username from user object
11460	Create a new user .
11461	Called when a user is logged in .
11462	Logout of the user
11463	Authenticate with the user .
11464	Login with given parameters .
11465	Login with a resume token .
11466	Change user password
11467	Reset password for a user .
11468	Reset a user s password .
11469	Recursively merge nested dictionaries .
11470	Read the contents of a file .
11471	Get the AleaId field from an object mapping .
11472	Get the meteor id mapping for a model .
11473	Get the object ID for a given model .
11474	Get a mapping of meteor_ids .
11475	Get an object from a model .
11476	Set default forwards for an operation .
11477	Set the default id for the model .
11478	Truncate the database .
11479	Truncate the database forwards .
11480	Truncate the database backwards .
11481	Initialize options .
11482	Finalize the options .
11483	Build meteor app .
11484	Convert a path to a directory .
11485	Seed random values .
11486	Return current state .
11487	Returns a random string of given length .
11488	Decorator to register API endpoint .
11489	Iterate over all endpoints of an object .
11490	Clear the cache of all api paths
11491	Print the value to stdout .
11492	Validate the kwargs passed to the function .
11493	Called when the websocket is open .
11494	Close connection .
11495	Process incoming message .
11496	Parse DDP message .
11497	Process a DDP message .
11498	Dispatch the given message to the appropriate handler .
11499	Receive a connection .
11500	Receive a ping .
11501	Receive a sub subscription .
11502	Receive an unsub message
11503	Receive a method .
11504	Dpp socket info
11505	Run the server .
11506	Main entry point .
11507	Print msg at verbosity level .
11508	Stop all threads .
11509	Run the postgres greenlet .
11510	Run the connection .
11511	Poll for notifications .
11512	Set up a greenlet .
11513	Generate a random ID from a stream .
11514	Autodiscover modules
11515	Return the error as a dict .
11516	Get an instance of the given factory .
11517	Add a record to the log
11518	A negotiation middleware .
11519	Context manager to add a route context .
11520	Add a route to a resource .
11521	Run the application .
11522	Send message .
11523	Send an alert to APNS .
11524	Fetch inactive IDs .
11525	Send a message to the GCM server .
11526	Send a bulk message .
11527	Send data to GCMP .
11528	Send data to the API
11529	Returns the class corresponding to the given module location .
11530	Fast forward selection algorithm .
11531	Search the Giphy API .
11532	Translate the Giphy API .
11533	Query Giphy API .
11534	Retrieve a GIF from the API .
11535	Create a screensaver object .
11536	Upload tags to Giphy .
11537	Convert data to integers .
11538	Fetch data from an endpoint .
11539	Translate an image to a GIF .
11540	Get trending images .
11541	Fetch a GIF from the API .
11542	Upload a file to GIF .
11543	Add access control to media group
11544	Authenticate .
11545	Upload a video .
11546	Check upload status
11547	Update a video .
11548	Delete a video from Youtube .
11549	Check availability of a video .
11550	Check if video is available .
11551	List videos of a user .
11552	Upload a video to youtube .
11553	Upload a video .
11554	Handle the upload request .
11555	Remove video from database .
11556	Return the entry for this video .
11557	Save the video .
11558	Delete this video .
11559	Update the metadata of a project .
11560	Updates an existing metadata field .
11561	Update this item .
11562	Parse string into list of nodes .
11563	Return a string representation of a tree .
11564	Load data from file .
11565	Read data from a file .
11566	Parse a node .
11567	Create a new node .
11568	Return a string representing the newick .
11569	Return ASCII art .
11570	Return the node with the given label .
11571	Prune the tree .
11572	Resolve polytomies .
11573	Remove internal names .
11574	Remove leaf names .
11575	Decorator that checks if the user is authenticated
11576	Cleans up a JSON string .
11577	Raise an exception if the setting is not present
11578	Get the last argument .
11579	Get a list of arguments from the request .
11580	Wrap an async callback .
11581	Get a cookie .
11582	Clear a cookie .
11583	Redirect to OpenID .
11584	Get an authenticated user .
11585	Generate OAuth request parameters .
11586	Redirect to OAuth .
11587	Make a request to Facebook .
11588	Get an authenticated user .
11589	Concatenate a list of arguments together .
11590	Parse a header line
11591	Add a new value to the header .
11592	Get a list of headers .
11593	Parse a single line .
11594	Parse header string .
11595	Normalize HTTP headers .
11596	Convert value to UTF - 8 .
11597	Convert value to unicode .
11598	Convert value to basestring .
11599	Recursively convert unicode objects to unicode .
11600	Check that all auth plugins have the same keyword .
11601	Iterate over all subclasses of cls .
11602	Select policy based on origin .
11603	Find the occupancy of a grid .
11604	Write agro file .
11605	Write a PDB file .
11606	Determine the number of molecules .
11607	Resize a PBC box based on number of lipids .
11608	Write a rudimentary topology file .
11609	Iterate over a file .
11610	Send a message to a user .
11611	Log a message .
11612	Get all messages for a user .
11613	Add all messages to the logged in user .
11614	Check config file .
11615	Verify a profile name .
11616	Retrieve data from config .
11617	Retrieve password from config .
11618	Update config data
11619	update config password
11620	Create a config profile .
11621	Display required items
11622	Get data from user settings
11623	Get authentication information from user .
11624	Configure a profile .
11625	Write data to the config .
11626	Write authentication information .
11627	Add attachments to message
11628	Send the message .
11629	Send a message .
11630	Factory method for sending message .
11631	Creates a property that will be obfuscated with the given credentials .
11632	Returns a property that will be used to validate the attribute of an instance .
11633	Validate input .
11634	Validate Twilio attributes .
11635	Validate SlackPost attribute .
11636	Validate a WhatsApp attribute .
11637	Send a coroutine .
11638	Add a message to the coroutine .
11639	Get body from file .
11640	Takes a dictionary of keyword arguments and returns a copy of the kwargs
11641	Send a message .
11642	Get chat id for a user
11643	Send content to the server .
11644	Send the message .
11645	Get the SMTP server
11646	Generate email message .
11647	Add headers to the message .
11648	Add the message body .
11649	Add attachments to the message .
11650	Get an SMTP session
11651	Get an SMTP_SSL connection .
11652	Get a SMTP session
11653	Send email .
11654	Save tags to file .
11655	Unloads the image .
11656	Get a region of the image .
11657	Validate the object .
11658	Remove all entries from the internal list .
11659	Write the tag to a file .
11660	Reads data from file .
11661	Delete the file .
11662	Resize the file .
11663	Insert a chunk into the IFF file .
11664	Save the ID3 file .
11665	Delete the file from disk .
11666	Parse a file .
11667	Process a line .
11668	Add a source block to the list of lines .
11669	Draws a string using the given font .
11670	Parse an ISO 8601 time string .
11671	Make HTML words
11672	Turns a word into HTML .
11673	Create HTML paragraph from list of words .
11674	Make HTML code .
11675	Make HTML items from a list of items .
11676	Save metadata to file .
11677	update parents in path
11678	Run bacon .
11679	Register a mapping .
11680	Return the registered controller .
11681	Register a freeform key .
11682	Sign a string .
11683	Generate the request headers .
11684	Send a request
11685	Send a GET request .
11686	Send a POST request .
11687	Send a DELETE request .
11688	Create an APEValue .
11689	Send a request to the transport .
11690	Perform an autaginating API call .
11691	List hosted zones .
11692	Create a hosted zone .
11693	Get a list of resource record sets by zone id .
11694	Change a resource record set .
11695	Draw an image .
11696	Draw a region of an image .
11697	The header size .
11698	Replace old_pages with new_pages .
11699	Find the last page of a stream .
11700	Set a section .
11701	Add markup .
11702	Process markup content .
11703	Get the markup for the given tag name .
11704	Create a new hosted zone .
11705	Lock a file .
11706	Insert bytes into a file .
11707	Delete size bytes from fobj .
11708	Convert unicode to UTF - 8
11709	Add a change to the record list .
11710	Parses the e_change_info element .
11711	Measure a string
11712	Check if the object is modified .
11713	Delete this resource .
11714	Save this resource .
11715	Parse an ID3v1 tag .
11716	Make ID3 v1 v1 format from id3 .
11717	Read size bytes from the file .
11718	Remove all entries from the dictionary .
11719	Add a frame to the frame
11720	Update common images .
11721	Update this packet to v24 .
11722	Unloads the sound .
11723	Play the sound .
11724	Set the loop points for the voice loop .
11725	get glyphs and values from adobe glyph list
11726	Filter glyph names based on filter .
11727	Write an encoding table .
11728	Dump an unsigned array .
11729	NAME glyph names . py
11730	Check if a file exists
11731	Make a list of files in the command line .
11732	Parse a hosted zone .
11733	Parse the delegation set .
11734	Write a list of blocks
11735	Group padding blocks .
11736	Remove metadata blocks from file .
11737	Save the metadata to a file .
11738	Parse an RRRecordSet alias .
11739	Parse a list of RRRecords into a list of strings .
11740	Parse a ResourceRecordSet from an e_rrset .
11741	Delete this HostedZone .
11742	Add a new record set to this zone .
11743	Create a record .
11744	Creates a new AAAA record .
11745	Creates a CNAME record .
11746	Create a new MX ResourceRecordSet .
11747	Create a new NS resource record .
11748	Create a PTR record .
11749	Creates a new SPF resource record .
11750	Create a new SRV resource record .
11751	Creates a new TXT record .
11752	Register a TXXX key .
11753	Get the values for a change .
11754	Serialize change to XML .
11755	Creates an XML document for a change set .
11756	Initialize log file
11757	Return the item associated with the given alias .
11758	Freeze a dictionary
11759	Join HTML attributes .
11760	Initialize the application
11761	Initialize all the bars .
11762	Bind a Bar to the Bar .
11763	Return the parsed args .
11764	The URL for this endpoint .
11765	Is the current request?
11766	Validate a metric class .
11767	Get stat by name .
11768	Calculate statistics .
11769	Autodiscover all apps in INSTALLED_APPS .
11770	Returns a csv of the given metric .
11771	List statistics for the given frequency
11772	Get a list of values from GET variables .
11773	Extracts a boolean value from a GET request .
11774	Get next colour
11775	Returns a dictionary of parameters to be used in the Gecko API
11776	Returns a tuple of the number of numbers of the current user .
11777	Return a list of metrics for a geckoboard
11778	Returns a list of line charts for a given metric .
11779	Get a geckoboard metric .
11780	Returns a list of metrics for the gecko board .
11781	Get all active gadgets .
11782	Register gadget .
11783	Returns context data
11784	Prints an error message to stderr .
11785	Decorator to validate params .
11786	Prompt the user for long input .
11787	List input .
11788	Prompt user for a file .
11789	Get games for a given year .
11790	Returns the winner of the game .
11791	Returns the season of the date
11792	Returns a DataFrame of the starters of the game .
11793	The surface of the game .
11794	Returns the player s coin toss
11795	Return the weather data .
11796	Get information about the sports ref .
11797	Get games for a given kind .
11798	Table of standings .
11799	Get table of team stats .
11800	Returns a table of the roy voting .
11801	Returns a pandas DataFrame containing the lines of the game .
11802	Returns the year of the year
11803	Get stats from the game .
11804	Change the current working directory to a given directory .
11805	Decorator to check if the cache is valid .
11806	Get the key for the class instance .
11807	Memoization decorator .
11808	Returns the age of the person .
11809	Get the stats table from the server .
11810	Get stats for a game .
11811	Get all stats for a particular kind
11812	Return the stats for a 24 - hour number .
11813	Return stats per 100 percent .
11814	Get the advanced stats table .
11815	Get the stats of the cluster .
11816	Get basic PBP stats .
11817	Get game log information .
11818	Get session data
11819	Expand the details of a playbook .
11820	Add team and opp columns to features .
11821	Add team features for each team
11822	Returns the probability of the initial window .
11823	Returns a DataFrame containing the passings of the game .
11824	Get award for award .
11825	Get team name
11826	Get box scores for a year .
11827	Get information about a year .
11828	Return the head coaches of a year .
11829	Returns the game schedule for a given year .
11830	Return the offensive coordinator for a year .
11831	Return the coordinator for a year .
11832	Get the stadium link for the given year .
11833	Return the offensive scheme for a year .
11834	Returns the defensive alignment for a year .
11835	Returns the splits for a given year .
11836	Get HTML from given URL .
11837	Flatten links in a td .
11838	Convert rel url to id
11839	Convert kwargs to a query string
11840	Read data from the stream .
11841	Returns a guard that can be used to put the read .
11842	Get a direct read .
11843	Close all open connections .
11844	Get a batch from the dataset .
11845	Get the remainder of a file .
11846	Get a queue from the dataset .
11847	Get a generator from the queue .
11848	Parse a PB file .
11849	Write a protobuf file .
11850	Read varint .
11851	Read objects from the stream .
11852	Close the file .
11853	Write a protobuf message .
11854	Flush the output buffer .
11855	Get the directory of the game .
11856	Input text with keyboard emulation .
11857	Generate fake movie .
11858	Evaluate traits .
11859	Waits until a condition is reached .
11860	Waits until all traits are present
11861	Add exceptions to the exception list .
11862	Get the volume
11863	Get the source of the main program .
11864	Send a message to the socket .
11865	Return status of NAD .
11866	Power off the device .
11867	Power on the device .
11868	Set the volume
11869	Select a source
11870	Deobfuscate a request .
11871	Calculate the CRC of a string .
11872	Obfuscate a value .
11873	check for missing songs
11874	returns a list of links
11875	check song name
11876	Parse the url and return the href of the song
11877	returns url for a song
11878	Parse download url
11879	Parse a song from Google .
11880	Download an HTML page .
11881	Download a file using requests .
11882	Download a file using wget
11883	Search for station codes by name
11884	Get observation for a location .
11885	Parse observation response .
11886	Get station observation information .
11887	Return search paths .
11888	List of compiled compiler extensions .
11889	The mimetype of the file .
11890	Return the mimetype of the compiler .
11891	Return the compiler format extension .
11892	Register a processor .
11893	Unregister a processor .
11894	Return a list of paths for this finder .
11895	Register default values .
11896	Import Qt core .
11897	Get meta node .
11898	Add a plugin name to the netnode .
11899	Remove a plugin from the netnode .
11900	Import settings from config_path
11901	Exports settings from settings .
11902	Returns the directory configuration directory
11903	Iterate over all keys in the database .
11904	Simple error handler .
11905	Get a DynamoDB table
11906	List all tables in DynamoDB
11907	Fetch items for given category
11908	Return the ID of a metadata item .
11909	Get the updated_at timestamp of the metadata .
11910	Fetches the owner team of a crate .
11911	Fetch the owner user of a crate .
11912	Fetch the versions of a crate .
11913	Fetch crate version downloads .
11914	Fetch data for a crate .
11915	Returns the summary of the category .
11916	Get a list of crates .
11917	Get a crate by crate_id .
11918	Fetches an attribute from a crate .
11919	Return a generator that yields items from the server
11920	Fetch items .
11921	Fetch items from Kitsune API .
11922	Get questions .
11923	Fetch events for the given category .
11924	Get the updated date of the updated event .
11925	Determine the category of the metadata item .
11926	Get items from ReMo .
11927	Return the list of buffered buffers .
11928	The priority of the IO request .
11929	Close the stream .
11930	Submits a list of blocks .
11931	Cancels a block .
11932	Cancel all pending transfers .
11933	Get a list of events from the event queue .
11934	Fetch the items for the given category .
11935	Get all spreadsheet data
11936	Parse the feed
11937	Return a sorted list of formats for a record type .
11938	Permission factory .
11939	Create the blueprint .
11940	Create a URL rule .
11941	Record a record .
11942	Default view method .
11943	Export a record .
11944	Time a callable function .
11945	Close the socket .
11946	Remove a client .
11947	Increment a counter .
11948	Send a timing request .
11949	Log timing since start_time .
11950	Send a gauge .
11951	Send a gauge delta .
11952	Set a metric .
11953	Send data to batch .
11954	Create a batch client
11955	Return a unit client .
11956	Send all the batches in the batch .
11957	Check if a record is open .
11958	Create and configure a batch client .
11959	Flush all the batches in the batch .
11960	Return a unit client .
11961	Create or create a User object .
11962	Convert an object into an OpenMath object .
11963	Try to convert a term to OpenMath
11964	Convert an omobj into a Python object .
11965	Convert an object to OpenMath .
11966	Register a converter for a Python class .
11967	Register a converter to a Python object .
11968	Initialize the Redis application .
11969	Generate valid choices .
11970	Split kwargs into model fields and fields .
11971	Decorator for registering a field .
11972	Create an object value
11973	Get form data and form data .
11974	Decorator that ensures a field is required .
11975	Decorator for field choices attribute
11976	Returns the decimal value of a field .
11977	Return email field data .
11978	Returns a random date field .
11979	Returns a random value of a datetime field .
11980	Return the data for a float field .
11981	Return the data for an integer field .
11982	Generate a random time field .
11983	Returns a random string of the field s choices .
11984	Generate data for multiple choice fields .
11985	Return random data from queryset .
11986	Encode a Python object as bytes .
11987	publish package
11988	Tag the current version .
11989	If the field is blank return None .
11990	Load a Python global .
11991	Create a copy of an instance .
11992	Convert a list to a list .
11993	Return an OMT tuple .
11994	Decode a byte string
11995	Encodes the given data into a byte string .
11996	Convert value to fixed precision .
11997	Format a number .
11998	Convert a number to a Money object
11999	Convert data into numpy array .
12000	Pack data from an array .
12001	Add a workspace .
12002	Remove a workspace .
12003	List workspaces
12004	Get a websocket by name .
12005	Check if a repository exists .
12006	Sync repositories
12007	Clone a repository .
12008	Check if ndio version is available .
12009	Return the voxels of an array
12010	Convert a list of voxels into a numpy array .
12011	Executes the specified command .
12012	Update the repository
12013	Set console handler .
12014	Executes a command .
12015	Load a PNG file .
12016	Save numpy data to PNG file .
12017	Save numpy data to file .
12018	Print the contents of a workspace .
12019	Print repository status
12020	Get block size
12021	Post cutout without chunking .
12022	Load image from file .
12023	Save numpy data to PNG file .
12024	Load multipage data from multi - layer TIFF files .
12025	Write configuration to file .
12026	Clone a repository .
12027	Get version of yoda .
12028	Mix a name and match it .
12029	Print an option .
12030	Return a list of ids for a channel
12031	Merge multiple ids .
12032	Propagate to channel
12033	List projects in a dataset .
12034	Get a single dataset by name
12035	List datasets .
12036	Parse workspace details .
12037	Show a workspace .
12038	Show a workspace
12039	Show all workspaces
12040	Generate a URL for this endpoint .
12041	Guess format from file extension .
12042	Open an image file .
12043	Convert input file to out_file .
12044	Build graph .
12045	Compute invariants for a given graph file .
12046	Convert a graph file .
12047	Convert a list of ramons to a dictionary .
12048	Return RAMon type .
12049	Delete a channel .
12050	Add dataset .
12051	Convert an ND array to a JSON string .
12052	Create a dictionary of datasets
12053	Create a channel dictionary .
12054	Create a dict representation of a project .
12055	Identify image dimensions .
12056	Upload data to autoIngest
12057	Find a workspace s path .
12058	Returns a list of public tokens for this project .
12059	Get project info
12060	Set the metadata for the given token
12061	Get url from url
12062	Perform a POST request .
12063	Delete a URL .
12064	Load an hdf5 file .
12065	Save array to HDF5 file .
12066	Infer gaps in a Dendropy tree .
12067	Recover IO .
12068	Install gettext translations to the environment .
12069	A context manager .
12070	Returns the percent of the given part .
12071	Get cache stats .
12072	Get cache slab information
12073	Return context data .
12074	Show server status .
12075	Dashboard .
12076	Display memcached statistics .
12077	Render memlabs .
12078	Convert value to human readable string .
12079	Find a Config object and return it .
12080	Add a new directory .
12081	Applies the current configuration to the file .
12082	Absolute path of the file .
12083	read the contents of the file
12084	Write data to file .
12085	Configure logging .
12086	Create the file .
12087	Applies the applicator to all children .
12088	Absolute path of the file .
12089	Removes the directory .
12090	Prepares the tree .
12091	Clean up all children .
12092	Returns the path to the file
12093	Return a list of File objects .
12094	Write data to file .
12095	Read the contents of a file .
12096	Add a file to this tree .
12097	Save configuration to file .
12098	Load the yaml file
12099	Remove the temporary directory if it exists .
12100	Load plugins from a directory .
12101	Recursively update a dictionary .
12102	Return a child node
12103	Resolve the key path .
12104	Get the value of this node .
12105	Update this configuration .
12106	Load the configuration from the file .
12107	Convert a string to a string
12108	Build the URL for a callback .
12109	Process input from socket
12110	Send socket output
12111	Send an RPC request .
12112	Read input from socket
12113	Write the output of a socket .
12114	A decorator that ensures that the link is not reentrant .
12115	Get the settle mode for the remote link .
12116	Configure the network link .
12117	The address of the link .
12118	The target address .
12119	Called when the session is closed .
12120	Create a new sender .
12121	Request a sender link .
12122	Create a new receiver .
12123	Request a receiver link .
12124	Called when a link is destroyed .
12125	Called when the session is closed .
12126	Process an endpoint event .
12127	Add mark patterns .
12128	Called when receiver is closed .
12129	Called when the receiver failed .
12130	Get host and port from a server address .
12131	Connect to host and port .
12132	Create a server socket
12133	Get readers and writers .
12134	Decorator to make sure the connection is reentrant .
12135	Process the connection .
12136	Read data from the transport .
12137	Create a new sender .
12138	Reject a sender .
12139	Create a new receiver .
12140	Called when the connection failed .
12141	Called when the connection is active .
12142	Check if connection is remotely closed .
12143	Handle an error .
12144	Decorator for twilio views
12145	Get color string .
12146	Get a TTF file
12147	Sets the compression flag .
12148	Add a PDFObject .
12149	Write a stream to the output buffer .
12150	Write stream to stream
12151	Add a new page to the document .
12152	Set drawing color scheme .
12153	Set default font .
12154	Add a PDF page .
12155	Set font size .
12156	Add text to PDF .
12157	Add a newline to the page .
12158	Add a pie chart to the page .
12159	Output pages .
12160	Return a list of pages that have changed
12161	Output fonts .
12162	Output images .
12163	Output the image .
12164	Change the current matrix .
12165	Returns the absolute position of the current matrix .
12166	Set the style of the font
12167	Rotate point by angle .
12168	Set information about an object .
12169	Set display mode
12170	Closes the document .
12171	Put the PDF header .
12172	Put pages into PDF .
12173	put a resource dict into the PDF
12174	Put the information into the session
12175	put catalog into catalog
12176	Put the trailer into the session .
12177	Floyd function
12178	Naive strategy .
12179	Gosper generator .
12180	Brent - Brent algorithm .
12181	Check if x is fit
12182	Fit y to y
12183	Check if x is greater than test_ordinate .
12184	Return True if y is greater than test_ordinate .
12185	Return a copy of the cursor .
12186	Add x to x .
12187	Add y to y
12188	Draws the table .
12189	Create a new tag .
12190	List tags .
12191	Get labels by name
12192	Update a tag
12193	Delete a tag by id .
12194	Create a new label .
12195	List actions .
12196	Get tags with label_sn
12197	Create a new tag
12198	List registered hooks .
12199	Update a hook
12200	Create an alert .
12201	Get alert list .
12202	Update an alert
12203	Setup sphinx extension .
12204	Return the path to the themes directory .
12205	Perform a POST request .
12206	List all hosts
12207	Get information about a log set .
12208	Find attacker slider .
12209	Return the duration in seconds .
12210	Update the transit model .
12211	Compute the current state .
12212	Return the binary data .
12213	Free memory .
12214	Receive data from the NNTP server .
12215	Generator that yields lines from the stream .
12216	Generator that yields data from the stream .
12217	Return the status of the network .
12218	Generate INFO message
12219	Generate an INFO message .
12220	Execute NNTP command .
12221	Returns the capabilities of the server .
12222	Returns True if the server is read .
12223	Quit the server .
12224	Get a date from the server .
12225	Send a help message .
12226	Generate new groups .
12227	Generate new news lines .
12228	Return a list of new news .
12229	List active groups .
12230	Get list active times .
12231	list new new groups
12232	Generator for listing overview .
12233	List extensions .
12234	Generate a list of dictionaries .
12235	Return a list of all the items in the container .
12236	Send a group command .
12237	Get next article .
12238	Send an article .
12239	Send a HEAD request .
12240	Get the body of a message .
12241	Send an xgtitle command .
12242	Send XHEADER message .
12243	Send XZHEADER message .
12244	Execute the Xover command .
12245	Generate messages for a given message .
12246	Return a list of strings matching pattern .
12247	Send the XFEATURE GZIP command to the server .
12248	Send a POST request .
12249	Convert an integer to an integer .
12250	Convert a value to a timestamp .
12251	Convert a string to a datetime object .
12252	Perform an HTTP POST request .
12253	Perform an HTTP DELETE request .
12254	Perform an HTTP GET request .
12255	List scheduled queries .
12256	List the tags for the account .
12257	Get tags by name or id
12258	Create an alert notify
12259	Delete a tag .
12260	Create a scheduled query .
12261	Create a scheduled query .
12262	Delete a scheduled query .
12263	Convert a range to a string .
12264	Parse a new group line
12265	Parse a line of a header .
12266	Unparse headers .
12267	Handle POST request .
12268	Run tests .
12269	Return a docstring for the defaults .
12270	Add default keyword arguments to a function .
12271	Generate a docstring for the defaults .
12272	Set value .
12273	Check that the value is of the same type .
12274	The value of the model
12275	Check that value is a scalar .
12276	The symmetric error .
12277	Set errors .
12278	Sets the value of the object
12279	Import the metrics to the API .
12280	Extracts metrics from a list of metrics
12281	Filter metrics by filter_expression .
12282	Call the API .
12283	Alternation .
12284	Process operator .
12285	Add an operator .
12286	Initialize properties .
12287	Returns a list of Parameter objects .
12288	Return a numpy array of parameter values .
12289	Returns the errors of each parameter .
12290	Clear all derived values .
12291	Setter for method .
12292	Parse environment variables .
12293	Get the URL parameters .
12294	Perform a GET request .
12295	Perform a DELETE request .
12296	Perform a POST request .
12297	Perform a PUT request .
12298	Call the API .
12299	Validate sceneInfo .
12300	Verify type product .
12301	Get the size of a remote file
12302	Download the scene .
12303	Validate bands .
12304	Establish connection to Earthexplorer
12305	Returns a function that starts with the given prefix .
12306	Return a timezone object for the given zone .
12307	Convert a datetime to a naive time .
12308	Joins an iterable with a delimiter
12309	Get the positions of newlines in a text .
12310	Convert a point to a source string .
12311	Dump the results of the relay .
12312	Remove metrics and plugins .
12313	Load a list of fortune files .
12314	Load a set of files .
12315	Main entry point .
12316	Process rule .
12317	Handle special handling .
12318	Parse the grammar .
12319	A list of all rules in the grammar .
12320	The list of comments in the grammar .
12321	Returns a list of all directives in the file .
12322	Return the compiled source code .
12323	Compile the parser .
12324	Get import directives .
12325	Returns a string representing the token type enum for this parser .
12326	Generate class definition .
12327	Return the name of the entry point .
12328	Get rule definition .
12329	Get the source of a rule .
12330	Get rule transform .
12331	Convert an expression to ASN .
12332	Convert node to ASN .
12333	Return a list of operands that match the predicate .
12334	Remove grouping groups from an optree .
12335	Convert an AST node to code .
12336	Convert an AST node to code .
12337	Return code for a terminal .
12338	Convert an option group into an option group .
12339	Convert a repetition group into a string .
12340	Return code for an AST special handling .
12341	Convert an OP_ALTERNATE to a list of statements .
12342	Convert an OP_Concat expression into a list of strings .
12343	Return an exclude statement .
12344	Return the code for the multiplication operator .
12345	Convert an AST expression to a code block .
12346	Find directives that match a predicate .
12347	Helper function to flatten an expression
12348	Parse a comment from a comment .
12349	Handle API results .
12350	Get a new ID .
12351	remove a key from the list
12352	Add command line arguments .
12353	Configure logging .
12354	Validate arguments .
12355	Given a list of operators convert them to postfix .
12356	Convert a list of operators to an OptreeNode .
12357	Reduces a list of operators into a single operator .
12358	Add command line arguments .
12359	Load plugin manifest
12360	Get a metric definition by name .
12361	Calculate the length of the fields .
12362	Calculate the length of the metrics column .
12363	Replace underscores with underscores
12364	Output fields in markdown format .
12365	Output metrics to markdown .
12366	Generate and output metrics definitions .
12367	Parse the input .
12368	Attempt to find most consumed characters .
12369	Add command line arguments .
12370	Parse a time string into a datetime object .
12371	Output a JSON response to a CSV file .
12372	Output JSON data .
12373	Output raw text .
12374	Convert a JSON result to XML .
12375	Check if node is empty
12376	Pretty print the tree .
12377	Create a function that returns a repetition function .
12378	Return a parse node .
12379	Extract a repetition from the text .
12380	Get exclusion from text .
12381	Return the index of the leading whitespace .
12382	Call extractor function .
12383	Return the position of this node .
12384	Check if this node is empty .
12385	Add ignored items .
12386	Check if value is a type of node_type .
12387	Return a flattened copy of this node .
12388	Return a new parse node with the given predicate .
12389	Merge this node into another parse node .
12390	Return a new type .
12391	Return a compressed representation of this node .
12392	Return the current position .
12393	Return the maxreaded position .
12394	Go to the next character .
12395	Move to the next line .
12396	Step previous line .
12397	Return the lastreaded line .
12398	Increment the position of the cursor .
12399	Save current context .
12400	Restore current context .
12401	Return a formatted message .
12402	Set the name of the signature
12403	Count the number of variables in this signature .
12404	Count the number of functions in this signature .
12405	Update count .
12406	Update the scope with the given signature .
12407	Return a new scope with the union of this scope .
12408	Update the scope with the intersection set .
12409	Return a new scope with the given signature .
12410	Update the scope with the given oset .
12411	Return a new scope with the same signature .
12412	Update the scope with the symmetric difference .
12413	Return a new scope with the symmetric difference .
12414	Add a signature to this scope .
12415	Remove a signature from the set .
12416	Remove a signature from the scope .
12417	Returns all signatures of this scope .
12418	The first signature .
12419	The last signature .
12420	Get signature by key .
12421	Get a scope by its symbol name .
12422	Get a signature by its name .
12423	Returns a list of all the return contexts that are polymorphic
12424	Call an ast translator injector .
12425	Normalize an AST .
12426	Set this node from another node .
12427	Iterate over the values of this node .
12428	Check if hit is OK
12429	Compute the signature
12430	Resolves the resolution of this signature .
12431	Returns the resolved names for the given type .
12432	Set resolved name to reference
12433	Delete a local file .
12434	Delete a file from S3
12435	Delete a file .
12436	Save an object to a local file .
12437	Save temp file to S3
12438	Save object to local file
12439	Find bucket by path
12440	Build enum class .
12441	Check the types of a function .
12442	Add a callobject to the chainmap .
12443	Decorator to add a method to the class
12444	Decorator to register a class hook .
12445	Decorator to define a class rule .
12446	Decorator to register a class directive .
12447	Decorate a class decorator .
12448	Bind a node to a node .
12449	Read EOF from the stream .
12450	Push rule nodes to the stack .
12451	Pop the rule nodes from the stack .
12452	Get the value of a node .
12453	Parse a stream .
12454	Begin a tag .
12455	End a tag .
12456	Set rules .
12457	Set hooks .
12458	Set directives .
12459	Evaluate a rule .
12460	Evaluate a hook .
12461	Read a string from the stream .
12462	Read one character .
12463	Read a single character .
12464	Read until EOF is reached .
12465	Ignore whitespace .
12466	Set hit_dtype .
12467	Set the cluster dtype .
12468	Check that the hit fields are consistent .
12469	Add a rule clause name .
12470	Add rules to BNF .
12471	Add a rule to the grammar .
12472	Add sequences to the parser tree .
12473	Add an alternative .
12474	Add a range to the sequence .
12475	Add a rule to the sequence .
12476	Add a capture to the sequence .
12477	Add a binding to the sequence .
12478	Add a hook to the parser tree .
12479	Set parameter number .
12480	Parse a single parameter .
12481	Parse parameter character .
12482	Parse parameter id .
12483	Set the name of a hook .
12484	Add a parameter to a hook .
12485	Returns parsed rules .
12486	Ignore cpp files .
12487	Add a new state
12488	Return a DOT representation of the graph .
12489	Write the graph to a DOT file .
12490	Write the graph to a PNG file .
12491	Return a string representation of the event .
12492	Return the next state .
12493	Clean living state
12494	Infer type of block .
12495	infer a subexpr
12496	Infer an identifier by its identifier .
12497	infer a literal
12498	Dump nodes to stdout .
12499	Convert a parserrule to a Python function .
12500	Return an exit scope .
12501	Return an expression .
12502	Return an astroid . Call node .
12503	Return an astroid . CallTrue expression .
12504	visit a hook node .
12505	Return an astroid . Expression node .
12506	visit a Capture node .
12507	Visitor for a scope .
12508	visit an Alt node .
12509	Visit a sequence node .
12510	Visitor for RepOptional node .
12511	Visitor for Rep0N .
12512	Return an AST node .
12513	Concatenate src to dst
12514	Set the indentation of a list .
12515	convert list to str
12516	Print nodes and their values .
12517	Populate an edge from a sequence .
12518	Create an edge from all sequences in a sequence register .
12519	Build the state tree from the tree .
12520	Test if n is equal to val
12521	Build a grammar from a string .
12522	Load a grammar from a file .
12523	Parse the AST .
12524	Parse a file .
12525	Set a node in the rule cache
12526	Set node value as integer .
12527	Get a subnode from the AST .
12528	Default serializer function .
12529	Get a list of depositions
12530	Serialize a deposition into a JSON object .
12531	Get all record ids in a given date .
12532	Get all record ids in a given date .
12533	Import Bibdoc documentation .
12534	Return a list of bibdoc files for a given record .
12535	Get check number .
12536	Check all files in the database .
12537	Serialize a Token object .
12538	Get user count .
12539	Return a JSON representation of a user .
12540	Get featured community count .
12541	Return a set of modified record ids .
12542	Get list of modified record ids .
12543	Get restrictions for a collection .
12544	Get the revisions of a record .
12545	Get all collections of a record .
12546	Return record JSON as JSON .
12547	Get the records that match the given query .
12548	Dump a record .
12549	Dump ra to a dictionary .
12550	Load common model .
12551	Return a dictionary of things .
12552	Initialize the app context .
12553	Memoization decorator .
12554	Get run SQL .
12555	Get connected roles .
12556	Get actions by query
12557	Return a JSON representation of a remote account .
12558	Load token .
12559	Import record into database .
12560	Return a default value for the given config variable .
12561	Serialize an object to a dictionary .
12562	Retrieve users .
12563	Get users .
12564	Serialize a User object .
12565	Load deposit .
12566	Create record and pid .
12567	Load record .
12568	Load records from multiple sources .
12569	Inspect records in a dump .
12570	Load common dumps .
12571	Load communities .
12572	Load users .
12573	Load deposit
12574	Get profiling statistics .
12575	Start the application .
12576	Dump profiling statistics to a file .
12577	Delete the profiler .
12578	Delete the profiler .
12579	Get current state
12580	Disable timestamp .
12581	Load user .
12582	Calculate translations in parallel .
12583	Merge multiple images into a 2D array .
12584	Add one dimension to an array .
12585	Create and update a record .
12586	Create record and update persistent identifier .
12587	Update a record .
12588	Create persistent identifiers .
12589	Delete a persistent identifier .
12590	Create files in a record .
12591	Create FileInstance from file_versions .
12592	Delete all buckets .
12593	Return a list of pids that are missing
12594	Prepare revisions .
12595	Prepare files .
12596	Return list of pids .
12597	Return True if record is deleted .
12598	Load a community .
12599	Load a featured community .
12600	Dump a thing to a JSON file .
12601	Check a thing .
12602	Delete the event handler
12603	Return the magnitude of a vector .
12604	Normalize a vector .
12605	Transform a set of texcoords to the given dimensions .
12606	Ensure all the bones in the data exist .
12607	Set the length of the bone .
12608	Set the parent of this bones .
12609	Calculate the pivot point of data
12610	start an animation
12611	Set the state of the scene .
12612	Unset the state of the scene .
12613	Set camera state .
12614	Reset the state of this region .
12615	Ensure that the model data exists .
12616	Redraw the data for the given object .
12617	Draw the given object .
12618	Sets the model
12619	Write reports to disk .
12620	Convert test reports to XML .
12621	Add a menu .
12622	Redraw the label .
12623	Redraw the label .
12624	Draw the window
12625	Delete a widget
12626	Redraw the label .
12627	Register on mouse events .
12628	Register the event handler
12629	Add the main label
12630	Add OK button
12631	Exit dialog .
12632	Add confirmation button
12633	Add a cancel button
12634	Update the progress label
12635	Render the actor .
12636	Render a 3D scene .
12637	Context manager for a step .
12638	Check if a resource exists .
12639	add a category
12640	Get the missing texture
12641	Returns the model with the given name .
12642	Load a model
12643	Returns the model data for the given model name .
12644	Load a model from a JSON file .
12645	Add a widget to the container .
12646	Draw the submenu
12647	Redraw the image .
12648	Redraw the scrollbar .
12649	Check if a mouse bounding box is within the bounding box .
12650	Return the p - value of the interval .
12651	Adds a new layer to the stack .
12652	Get a region from the buffer .
12653	Draw the buffer .
12654	Add a new action .
12655	Calls all registered actions
12656	Register a new identifier .
12657	Add a layer to the layer .
12658	Draw all layers .
12659	Deletes all layers .
12660	The border of the widget .
12661	The offset of the widget .
12662	Returns the size of the widget
12663	Read a mesh from a HDF5 file .
12664	Make a connectivity matrix
12665	Set fields .
12666	Add a list of fields .
12667	Check element types
12668	The space of this element .
12669	Return centroids and volumes of the molecule .
12670	Return the angles of the element .
12671	Return a pandas . ndarray of edges .
12672	Calculate centroids and edges .
12673	Convert an element set to a node set .
12674	Convert node set to surface
12675	Convert surface to element sets
12676	Return metadata for each field
12677	Return metadata for this step .
12678	Make the workdir .
12679	Run post - processor .
12680	run gmsh
12681	Read history report .
12682	Read a field report from a file .
12683	convert a list to a string
12684	Return the equation .
12685	Return an unsorted set .
12686	Parse the response .
12687	Make a request to the API .
12688	Write XYZ data to file .
12689	Write a field report
12690	List available creators .
12691	Return an error message for this field .
12692	Returns True if the exception was thrown by the descriptor .
12693	Set the data .
12694	Get the mode of an axis .
12695	Set plot options
12696	Create a new class
12697	Cycle through datafeeds and draw notifications .
12698	Try conversion of string to float .
12699	Convert string to int .
12700	Plot the graph .
12701	Convert raw string to unicode .
12702	Clean HTML .
12703	Check if the given mime type matches the include_mime_types .
12704	Clean a domain name from a string .
12705	Returns the left cuts of a domain .
12706	Make a hash keyword from a token .
12707	Collect words from a sentence .
12708	Index a stream item .
12709	Invert a hash .
12710	Get the frequency of the given hashes .
12711	Looks up a tf index table .
12712	Lookup TF index table .
12713	Make stream items from a proto stream .
12714	Make a stream item from an entry .
12715	Create a streamcorpus . ContentItem from a node .
12716	Reads a varint from the stream .
12717	Read a Block from the stream .
12718	Serialize a stream item key into a byte string .
12719	Return key and data for a stream item .
12720	Change working directory .
12721	Strip prefix from string .
12722	Strip a suffix from a string .
12723	Check if needle is a subsequence of haystack .
12724	Entry point for ICE .
12725	Run the Wsgiref server .
12726	Shutdown the server .
12727	Register a route .
12728	Register an error handler .
12729	Serve a static file .
12730	Get error page callback .
12731	Add a callback to the route .
12732	Resolve a route
12733	Resolve a non - literal route .
12734	Normalize pattern type .
12735	Return the response .
12736	Add a header .
12737	Set a cookie .
12738	Return status line .
12739	The Content - Type header .
12740	Get all values for key
12741	r Delete a directory .
12742	Return a list of open file descriptors .
12743	print file type stats
12744	Run the rejester run .
12745	Fetches the contents of the given work unit
12746	Get the lines of a file .
12747	Generate a pair of species .
12748	Generate a random adjspecies pair .
12749	Morph a sentence .
12750	Get similarity of a query pair .
12751	Converts a sentence to hiragana .
12752	Entity of a sentence .
12753	Print a shortsum of a review .
12754	Get keywords .
12755	Query Goolabs API for a sentence .
12756	Create a scp stage .
12757	Initialize the stages from a config .
12758	Initialize all stages .
12759	Run the stream processing .
12760	Run all writers .
12761	Run an incremental transform on a stream .
12762	Replace the pipeline config with a new config .
12763	Create a WSGI application .
12764	Create a list of chains with the names of the tagger .
12765	Return True if all target mentions in chain_mions match .
12766	Return True if any target mentions in chain_mentions are in chain_mentions .
12767	Looks up the mentions in the rating .
12768	Match a single tagger .
12769	Create a tagger file .
12770	aligns ner_xml to o_chunk
12771	Terminate the child .
12772	Polynomial multiplication .
12773	Fix email addresses
12774	Returns a list of sentences representing the sentence .
12775	Make the label index for the given stream item .
12776	Returns a list of sentences .
12777	Convert HTML entities to unicode .
12778	make a cleansed file
12779	create nner file
12780	Cleans a given span
12781	aligns a chunk with ner
12782	Ensure paths are absolute .
12783	Initialize a pipeline configuration .
12784	Generate a chunk for a joith - smith - corpus .
12785	re - re - based re - re - based - re - re - re - re - re - re - visible
12786	Removes all tags from an HTML document .
12787	Create a clean - visible file for the given chunk .
12788	Remove leading and trailing whitespace from a string .
12789	Parse HTML file .
12790	Load a stage by name .
12791	Load the stages from an external path .
12792	Load stages from a module .
12793	Initialize a stage by name .
12794	Read from idx_bytes .
12795	Return True if href is a valid URL .
12796	Return a list of labels for this offset
12797	Iterate over all files in input_dir .
12798	Get all tasks in the cluster .
12799	Get a random key from the cluster .
12800	Tokenize a sentence .
12801	Extract sentences from ningpipe
12802	Decorator to retry function .
12803	Verify the MD5 of data .
12804	Get bucket from config .
12805	Decodes the given data .
12806	Get a single chunk from a bucket .
12807	Convert a stream ID to a key .
12808	Convert kvlayer key to stream id .
12809	Generate a key for a stream item .
12810	Main entry point .
12811	Build an argument parser .
12812	Adds xpaths to stream item
12813	Convert a list of sentences to char tokens .
12814	Convert a list of tokens to character offsets .
12815	Convert character offsets to xpaths .
12816	Add an element to the document .
12817	Returns the XPath piece for the current piece .
12818	Return the index of the text node .
12819	Yield all descendants of elem .
12820	Select elements from source .
12821	Select elements by name .
12822	Select elements matching a regular expression pattern .
12823	Select an attribute by name .
12824	Return the next sibling of elem .
12825	Return a pretty representation of elem .
12826	Call inkscape .
12827	Export text to a file .
12828	Export an SVG file to a PDF file .
12829	Export SVG to PNG file .
12830	Returns a Jinja environment for the given file path .
12831	Sets up the template file
12832	Fill the document with the given contents .
12833	Save the template content to a file .
12834	Create a doctype object from a template file .
12835	Fill the contents of the document .
12836	Render the image .
12837	Render the notebook to a PDF file .
12838	Parse an XML source .
12839	Parse HTML source .
12840	Parse HTML fragment .
12841	Insert text .
12842	insert node before refNode
12843	Clone this element .
12844	Entry point for the benchmark .
12845	Get the string representation of a node .
12846	Insert a child into this node .
12847	Parse config file .
12848	Get Google API credentials .
12849	Create event datetimes .
12850	Create a calendar event .
12851	Main entry point .
12852	Get file extension
12853	Add a file extension if it does not exist .
12854	Get a temporary file .
12855	Remove all files with the given extension .
12856	Write csv to json file
12857	Replace old with new content .
12858	Parses HTML tags .
12859	Check the next sibling of a tag .
12860	Create italic tag .
12861	Create strong tag .
12862	Create the underline tag .
12863	Parse the attributes of a tag .
12864	Clean line breaks .
12865	Return query string from href
12866	Parse an attribute .
12867	Translates a list of keys from a dictionary .
12868	Returns a JSON representation of the object
12869	Return a list of files matching a regular expression .
12870	Concatenate strings .
12871	Yields True if full starts with part .
12872	Yields whether a part contains part .
12873	Yield the length of a string .
12874	Convert an object to a boolean .
12875	Apply XPath expression to a sequence .
12876	Perform a lookup on a table .
12877	Replace characters for SVG code .
12878	Check if a SVG file is valid .
12879	Merge two svg files .
12880	Merge PDF files into a single file .
12881	Embed font files into SVG .
12882	Embed a font into an SVG file .
12883	Check the inputs .
12884	Check that the function is callable .
12885	Recursive recursive function .
12886	Create a jinja2 input file .
12887	Recursive recursive function .
12888	Convert an object into a string .
12889	Convert obj to numbers .
12890	Convert an object into a boolean .
12891	Serialize the AST tree .
12892	Change XML encoding .
12893	Save text into a QR code .
12894	Launch Gromacs using longbow .
12895	Call a command with args_strings .
12896	Convert a LaTeX file to a PDF file .
12897	Return the list of options for this node
12898	Transform a geometry to another .
12899	Create a Geometry from a GeoJSON or GeoJSON object .
12900	Expand intervals in self .
12901	Return a new Envelope with the intersection of other .
12902	Returns True if this bounding box intersects other .
12903	Returns the polygon
12904	Create a Pandas DataFrame from a Z - N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N
12905	Write DataFrame to file .
12906	Select rows by condition .
12907	Return the table at the given nuclei .
12908	Return the intersection of this table .
12909	Returns a Table that is not in this table .
12910	Return a DataArray where the values are odd even .
12911	Returns a DataArray where each element is an even odd .
12912	Return a new RDD where the elements are equal .
12913	Returns the error frame .
12914	Mean squared error .
12915	The binding energy
12916	S2n model
12917	S1n model
12918	S2p
12919	S1p
12920	Calculate derived values for this table .
12921	Executes a function as a db session .
12922	Derive key from master_password
12923	Bootstrap the database .
12924	Search for domains .
12925	Modify a domain .
12926	Create a new domain .
12927	Extract hbs from a file .
12928	Return the file system prefix for the given path .
12929	Returns the SRID of the authority .
12930	Main entry point .
12931	Initialize logging .
12932	Update a file from a URL .
12933	Get a dictionary of available drivers .
12934	Return the image driver for a given path .
12935	Convert a geometry to an array .
12936	Rasterize a raster .
12937	Open a raster from a path .
12938	Create a raster from bytes
12939	Copy a raster
12940	List of options .
12941	Create a Raster object from the source file .
12942	Set the Affine transform
12943	Read data as array .
12944	Returns the envelope
12945	Get the image driver
12946	Return a new raster
12947	Return a masked array of the input geometry .
12948	Return the value of the data stored in the image .
12949	Read a raster
12950	Resample this image to the given size .
12951	Save image to a file .
12952	Set the spatial reference projection
12953	Warp this raster to another .
12954	Calculate chunk length .
12955	Lookup the charset for a given charset .
12956	Encode a long chunk .
12957	Convert chunk to long
12958	Get chunk from data
12959	Memoize a function .
12960	Returns a regular expression for the given file .
12961	Normalize date format .
12962	Detect timezone .
12963	Return a dictionary representation of the object .
12964	Activate the exception hook .
12965	Format an object as emphasis .
12966	Handle a single job .
12967	Main worker function .
12968	Run a worker pool .
12969	Sets the classification of this Product .
12970	Send a message to the queue .
12971	Turn on light .
12972	Turn on switch .
12973	Turn on a light .
12974	Turn off a device .
12975	Send messages from the queue .
12976	Send a message to the network .
12977	Create an adapter object .
12978	Sets the nature of this Product .
12979	Update self . def_dict with sct_dict
12980	Reset default values .
12981	Set the list of paths to use .
12982	Generator of option values
12983	Iterate over the default values for each section .
12984	Create a config file
12985	Update the configuration dictionary .
12986	Read a TOML configuration file .
12987	Read configuration files .
12988	Return the names for the option .
12989	Return a list of sections .
12990	Solve options for a command .
12991	Add options to a parser .
12992	Build the argument parser .
12993	Parse command - line arguments .
12994	Run zsh command .
12995	Perform zsh completion
12996	Return a list of command names for a bash command .
12997	Perform bash completion .
12998	Start a master .
12999	Called when a connection is established .
13000	Called when a line is received .
13001	Called when the worker is lost .
13002	Called when a job is loaded .
13003	Handle a response received from the worker .
13004	Close the job .
13005	Add jobs to the master .
13006	Close the connection .
13007	Remove all waiters
13008	Add a result to the list .
13009	Wait for the task to complete .
13010	Load a job from the deck .
13011	Marks this job as done .
13012	Add a result to the queue .
13013	Cancel all jobs .
13014	Wait for all active jobs .
13015	Distribute jobs from active jobs .
13016	Add a job set .
13017	Get a job from the queue .
13018	Return a job .
13019	Add a result to a job .
13020	Called when a job is done .
13021	Close the application .
13022	Remove duplicates from a list .
13023	Match a regular expression .
13024	Get a list of entries .
13025	Get AWS region from environment variables .
13026	Filter entries according to filters .
13027	Get host by name
13028	Create an instance from a dictionary .
13029	Get an attribute .
13030	Sort a list of entries by attribute .
13031	Display the table as a string .
13032	Create an instance from a boto3 instance .
13033	Matches the given filter .
13034	Display the IP address .
13035	Render a table of entries .
13036	Add timestamp to event dict .
13037	Setup logging .
13038	Create a logger .
13039	Setup the Celery application .
13040	Get a single worker .
13041	Delete a job
13042	Create a switch option
13043	Config section .
13044	Set an option in a configuration file .
13045	Handles config commands .
13046	Create zsh - completion files .
13047	Render a list of columns .
13048	Render a row of columns .
13049	Render a table .
13050	Prepare rows that are not None
13051	Returns a color for a given number .
13052	Get a color from a string .
13053	Generate a random color .
13054	Prompt user for input .
13055	Check username and password .
13056	Check if token is valid .
13057	Decorator to check token authentication
13058	Check if process is running
13059	Dynamically import a module .
13060	Try to find the IP address
13061	Perform a HTTP request .
13062	Prepare post parameters .
13063	Serve application .
13064	Render the template .
13065	Runs a command in a shell .
13066	Stream commands from multiple commands .
13067	Stream commands from a list of commands .
13068	Get network days between two dates .
13069	Get the path to a command .
13070	Build the ssh command .
13071	Build scp command .
13072	Copy entries to local_path .
13073	Copy a list of entries to a remote path .
13074	Run a command on a list of hosts .
13075	Connect to an SSH entry .
13076	Load a LSI profile .
13077	Create a LsiProfile from command line options .
13078	Add relationship to the object .
13079	Return the names of all related parts of the given reltype .
13080	Load relationships from source
13081	Add a new content type .
13082	Load a part .
13083	Find the value for a given name .
13084	Create a ContentType from an XML element .
13085	Parse a chatl tree .
13086	Build a JWT from a secret key .
13087	Assign force field to AMPAL object
13088	Find the maximum radnp .
13089	Convert force field parameters into a dictionary .
13090	Return stream as bytes .
13091	Get all the segments matching the given name .
13092	Copies a directory from one bucket to another .
13093	Open an S3 bucket .
13094	Uploads a directory to S3 .
13095	Uploads a file to a bucket .
13096	Upload an object to a bucket .
13097	List all files in a directory .
13098	List all directories under a given directory .
13099	Create the prefix for a directory .
13100	Delete a file .
13101	Ensure that the user is authenticated .
13102	Return loud
13103	Delete objects in a bucket .
13104	Returns the home URL .
13105	Decorator that silences the given label .
13106	Render a breadcrumb for the home page .
13107	Breadcrumb breadcrumb .
13108	Calculate the energy of an AMPAL object .
13109	Get the internal energy of an AMPAL object .
13110	Return a list of the hotspots of the leaf .
13111	Get the Keeper token for the given host .
13112	Upload a git ref .
13113	Return True if the travis event should be skipped .
13114	Purge an API key .
13115	Register a build .
13116	Confirm a build
13117	Recursively update a dictionary .
13118	CLI entry point .
13119	Edit a part .
13120	List all files in a directory .
13121	Split a path into multiple parts .
13122	Find file and part of path
13123	Get editor from file .
13124	Process a module .
13125	Generate an HTML chart
13126	Generate HTML for a chart .
13127	Serialize a data object to a Chart
13128	Patch json data into json
13129	Convert json to html
13130	Convert a dictionary to a Pandas DataFrame .
13131	Write html file
13132	Returns a chart class
13133	Encode a list of x and yfields .
13134	Link to a GitHub user .
13135	Infer tarball URL .
13136	Create an app .
13137	Delete an app .
13138	Decorate an iterable attribute .
13139	Generate a random binary string .
13140	Generate a random IP address .
13141	Generate a random date
13142	Return session object .
13143	Make a request to the Heroku API .
13144	Create an application setup .
13145	Check the status of an app setup
13146	Generate a sequence of strings for the given prefix .
13147	Memoize a function .
13148	Cache the result of a function .
13149	Register sub - commands .
13150	Returns the root argparser for this command .
13151	Get the description of the method .
13152	Return the help string for this method
13153	Run the parser .
13154	Encode dataset .
13155	Get all athletes
13156	Get the last n activities .
13157	Request activity list .
13158	Request activity data .
13159	Returns the endpoint for the athlete
13160	Get activity endpoint .
13161	Perform a GET request .
13162	Create a new build .
13163	Return url with auth
13164	Get a random title .
13165	Generate a random person .
13166	Get a random name .
13167	Render the plot
13168	Set dataset .
13169	Render the chart
13170	Check chart type .
13171	Returns the url of the query
13172	Open a web browser .
13173	Save the image to a file .
13174	Call urlopen .
13175	Returns a PIL Image object
13176	Write content to file .
13177	Calculate the checksum of the file .
13178	Returns a random amount
13179	Decorator for the entity name decorator .
13180	Returns the unprotected and protected claims .
13181	Return the signing keys as a JWK object .
13182	Unpack a metadata statement
13183	Produce a metadata statement .
13184	Evaluate the metadata statement
13185	Corrects the usage of the metadata
13186	Add metadata_statements to request .
13187	Parse command line arguments .
13188	Add command line arguments to the argument parser .
13189	Apply logging options to log files .
13190	Log a verbose message .
13191	Return a mapping from letter to number
13192	Generate anagrams in a word .
13193	Convert class to an AMP .
13194	Transform a timeseries to a list of points
13195	Get the last value of a timeseries
13196	Validate that the page number is an integer .
13197	Get a single page of iterator .
13198	Change the permissions of a file .
13199	Create an internal signing service .
13200	Create a signing service .
13201	Sign a request .
13202	Create a new resource
13203	Update a metadata statement .
13204	Update signature .
13205	Yields the contents of a bundle
13206	Create a new bundle .
13207	Returns a list of urls for the given asset type .
13208	Return HTML tags for the given asset type .
13209	Return HTML tags for all assets .
13210	Ensure that the given URL is a protocol .
13211	Return a list of links from url
13212	Start listening to AMP server .
13213	Get the list of module names .
13214	Import service modules
13215	Convert a date parameter to a tuple .
13216	Given a list of field names and a list of fields return the new document with the new values
13217	Format a cursor to a date map .
13218	Print the current cursor .
13219	Prints the cursor to stdout .
13220	Given a list of do_tasks and a dep_graph return a list of tasks grouped by their dependencies .
13221	add default department
13222	create atype for project
13223	Add default sequences for project .
13224	Add a random shot to the project .
13225	Add default types and types to a project
13226	Create shot for a sequence
13227	Create all tasks in the project
13228	Return a deferred to connect to the given peer .
13229	Send a packet to a peer .
13230	Get the value of a config value .
13231	Decorator to register a nova event .
13232	Decorator to register an event type .
13233	Decorator to register a neutron event .
13234	Decorator to register an event type .
13235	Decorator to register swift events .
13236	Decorator to register an event type .
13237	Decorator to register a heat customer event .
13238	Add a factory to the registry .
13239	Removes a factory from the registry .
13240	Establish a new connection to this peer .
13241	Receive data from a connection .
13242	Disconnect a connection .
13243	Call a remote command .
13244	Called when a connection is made .
13245	Called when a connection is made .
13246	Called when data is received .
13247	Send data to the remote device .
13248	Called when a connection is lost .
13249	Returns the local protocol for the given connection identifier .
13250	Handle remote data .
13251	Disconnect the given connection .
13252	Center a string on the terminal .
13253	Display a clock on the right .
13254	Generate a version number .
13255	Identify the unit framework for the given target unit .
13256	Raise an error if the value is not convertable .
13257	Add padding to data_to_pad
13258	Unpadded data .
13259	Sign this message .
13260	Gather metadata statements for a given context
13261	Pretty print anagram .
13262	Parse arguments .
13263	Parse command line arguments .
13264	Process data received .
13265	Called when a connection is unregistered .
13266	Create a stub for a remote function .
13267	Ping a remote call .
13268	Return a regex for this command .
13269	Create an AMPList from a string .
13270	Convert a list to a protobuf .
13271	Verify that this metadata statement is valid .
13272	Parse a remote response .
13273	Run pgdump command
13274	Return a list of databases
13275	Get the local files in a directory .
13276	Sync local files to S3 .
13277	Decorator for views that require a service list .
13278	Handle the login request .
13279	Build all the modules in the given package
13280	Create a new fridge object .
13281	Load data from a JSON file .
13282	Create JWT from keyjar
13283	Request signed JWT .
13284	Decorate a function .
13285	Discovers all python modules in testdir
13286	Execute the test runner .
13287	Return the score of a letter .
13288	Compute the score of a word .
13289	Return a list of words .
13290	Checks if a word is valid .
13291	The main function .
13292	CLI entry point .
13293	Handle a string received from the server .
13294	Returns the command and responder function .
13295	Parse the request values .
13296	Run the responder .
13297	Write the response to the transport .
13298	Called when a connection is lost .
13299	Build a protocol receiver .
13300	Returns a KeyJar object from a JSON object .
13301	Load keys from a JSON string .
13302	Process a nova event .
13303	Process a cinder event .
13304	Process a message .
13305	Process an event .
13306	Process a SWift message .
13307	Process a keystone event .
13308	Process a heat customer event .
13309	Serve the websocket .
13310	Print msg to stdout .
13311	Print msg to stderr .
13312	Register a command subclass .
13313	Register a command subclass .
13314	Returns the string representation of the value .
13315	Convert a string into an argument .
13316	Update completer .
13317	Do the work
13318	Initialize and return a connection .
13319	init service modules
13320	Start the NVA consumer
13321	Init the cinder consumer
13322	Start the neutron consumer
13323	Start the glance consumer
13324	Initialize the heat consumer
13325	Enable notification for given OpenStack component .
13326	Get information about a song
13327	Download a song .
13328	Execute this instruction .
13329	Load a module name .
13330	call a function
13331	Dump a database to a file .
13332	Render aditaa code .
13333	This function is called when the application is stopped .
13334	Run the application .
13335	Change the current working directory .
13336	Recursively copy a directory .
13337	Context manager for debugging .
13338	Get the mtime of a file .
13339	Check if the file has changed .
13340	Sync all files
13341	Clear the cache .
13342	Scrape feed .
13343	Download the image
13344	Check if the image has changed .
13345	Generic tag compiler .
13346	Find the filename and line number of the caller .
13347	Get the component of a pe
13348	Command line entry point .
13349	Find a symbol by name and kind .
13350	Check if pe is contained in root
13351	Checks if a pe is a global peptide
13352	Get the data type name from a string
13353	Get related attributes .
13354	Create a namedtuple containing enum values .
13355	Return a function that creates a bridge .
13356	make an external entity
13357	Create a function from a metamodel .
13358	Make a constant from a string
13359	Create a method from an operation .
13360	Create a derived attribute .
13361	Create a class from an O_obj .
13362	Make a simple association
13363	Make a linked association .
13364	Make an association for a relationship relation .
13365	Create a domain component from a model
13366	Run a single RPC call .
13367	Send an ACCEPT message .
13368	Reject a call .
13369	Send an exception to the remote server .
13370	Wait for an emission .
13371	Establish a result queue .
13372	Dispatch a reply .
13373	Guess the type name of a value .
13374	Deserialize the value of the given type
13375	r
13376	r
13377	Get the content by content_id .
13378	Get multiple documents .
13379	Put items into Elasticsearch .
13380	Delete content by id
13381	Delete all documents in the index .
13382	Delete the index .
13383	Perform a scan on the database .
13384	Return an iterator over the ids that match the given range .
13385	Perform a scan on a prefix .
13386	Iterator over all the IDs of a given prefix .
13387	Perform a fulltext scan .
13388	Iterator over fulltext search results .
13389	Return an iterator over the keywords .
13390	Return an iterator over all keywords in the database .
13391	Yield scan ids for a given value
13392	Given a list of feature names return the source code .
13393	Returns a list of filters for the given range .
13394	Create index .
13395	Create mapping for this index .
13396	Get mapping from index to index
13397	Get field types
13398	Returns a disjunction from the feature_fc .
13399	Return the number of features in a dictionary .
13400	Count the number of bytes in the database .
13401	Return a string representation of a FeatureCollection .
13402	Command line interface .
13403	Default formatter .
13404	Convert an instance to a link .
13405	Generate a unique identifier .
13406	Check uniqueness constraint .
13407	Check integrity of a link .
13408	Check the integrity of a subtype .
13409	Given a list of feature names return the corresponding feature index .
13410	Convert an integer to a binary string .
13411	Store items in the datastore .
13412	Delete all entries from the database .
13413	Perform a scan on the table .
13414	Scan all keys in the table .
13415	Scan the index for a given value .
13416	Index a scan prefix .
13417	Index a scan prefix .
13418	Implementation of index scan_prefix .
13419	Define an index .
13420	Store a new index .
13421	Put a raw value into the index .
13422	Yield the keys for the given index .
13423	Get an index by name .
13424	Check if a package name is available .
13425	Add a direction .
13426	Returns the name of the type of the given SDT
13427	get the refered attribute
13428	Build core type element .
13429	Build a simple type element .
13430	Build complex type element .
13431	Build user type element .
13432	Build a type from a string .
13433	Build XML element .
13434	Build an element for a complex type .
13435	Build a schema element .
13436	Pretty - print XML .
13437	Fetch bikes from bikeregister .
13438	set positional information
13439	Decorator for track_production .
13440	r \
13441	r
13442	r
13443	r
13444	r
13445	r
13446	r
13447	r
13448	r
13449	r
13450	Left - left .
13451	r
13452	r
13453	Create a queue
13454	Delete a queue .
13455	List all queues
13456	List exchange properties .
13457	Purge a queue .
13458	Create email message .
13459	Reads the text from the device .
13460	Is the text visible?
13461	Main entry point .
13462	Serialize the value for the given type
13463	Return a string representing an association .
13464	Return a string representation of a class .
13465	Entry point for the command line interface .
13466	Search for documents in the corpus
13467	Partition a collection by condition .
13468	Run web server .
13469	Return context for RTL language .
13470	Find a link between two instances .
13471	Return a copy of the target class .
13472	Compute the lookup key for a given instance .
13473	Compute the index key for the given instance .
13474	Return the type of an attribute .
13475	Creates a new instance of the model .
13476	Return an iterator over the instances of this class .
13477	Define a class with the given attributes .
13478	Send a seam message .
13479	Receive messages from socket and return them .
13480	Find dead code .
13481	Parse email addresses .
13482	Decorator to register an RPC function .
13483	Return a table of RPC specs .
13484	Normalize postcode .
13485	Return the next value .
13486	Accept S systems and add them to the system .
13487	Accept C C C C .
13488	Accept PE_PE .
13489	Get the brightness of the image
13490	Match pattern .
13491	Search for a matching character .
13492	Returns an extra selection for the given character .
13493	Matches the current cursor position .
13494	Return information about the exception .
13495	Create an input hook for Qt4 .
13496	get mapper by name
13497	Add a URL pattern .
13498	Register a function as a URL .
13499	Add a pattern to the data store .
13500	Add a function to the server .
13501	Call the data store with the specified method .
13502	Executes the command .
13503	Return True if the prompt is pressed .
13504	Return True if the cursor is pressed .
13505	Returns True if the previous entry is in the history .
13506	Returns True if the next entry is in the history .
13507	Handle an execute reply message .
13508	Return True if the history lock is locked .
13509	Return the edited history
13510	Set history .
13511	Store the edits in the history
13512	Function to close the window .
13513	Build a Record Collection from a DataFrame
13514	Convert a collection to a pandas DataFrame .
13515	Takes a dataframe and returns a Pandas dataframe
13516	Set attributes .
13517	Subscribes to the socket
13518	Log a message .
13519	Sort a list of lists .
13520	Iterates over a remote view .
13521	Convert a notebook to a new notebook .
13522	Return the supported platform
13523	Get importer for given path .
13524	Returns a StringIO object .
13525	Parse a version string .
13526	Determine if setuptools should override setuptools .
13527	Add a distros .
13528	Find all installed plugins .
13529	Get the path to a temporary archive .
13530	Parse an entry from a string .
13531	Return parsed package info
13532	Compute dependencies for this package .
13533	Parse filename .
13534	collapse leading whitespace from header
13535	Removes the event filter .
13536	Connects to the completion widget .
13537	Returns the current text cursor .
13538	Update current item .
13539	Register admin site .
13540	Return the partition of all windows .
13541	Returns a tuple of the user and idle time for the system .
13542	Return a list of system CPU times .
13543	Read raw data from stdin .
13544	Read from stdin .
13545	Update the visibility of the tab bar .
13546	Create a tab with the current kernel .
13547	Add a tab to the tab widget
13548	Add a menu action .
13549	Create dynamic magic function .
13550	Populates all magic menu
13551	Close all tabs
13552	Generate password .
13553	Verify that the hashed passphrase matches the hashed passphrase .
13554	Render an editable boolean cell .
13555	Return an indented short title for an item .
13556	Collect editable booleans from the list display .
13557	Toggles a boolean
13558	Check if the user has permissions for the object .
13559	Check if the user has permission to delete the object .
13560	Recursively add children of G .
13561	Create a bintree graph .
13562	Submit jobs to graph G .
13563	Validate a tree .
13564	Make color table .
13565	Return a copy of this color scheme .
13566	Add a new scheme to the table .
13567	Set the active color scheme .
13568	Return the path to the Python library .
13569	Handle incoming messages from the channel .
13570	Handle stdin request .
13571	Wait for the kernel to finish .
13572	Set the style of the chart .
13573	Get the format for the given token .
13574	Get the format from the document .
13575	Get a QTextCharFormat from the given style .
13576	Find a command in a list of paths .
13577	Normalize path .
13578	Check that a package is declared as a package namespace .
13579	Check that entry points are valid .
13580	Return True if src is the last blank line .
13581	Check if the last two blank lines are the same .
13582	Transform the output of an assignment system .
13583	Transform assignment magic to python .
13584	Remove a class prompt from a line .
13585	Transform input line to IPython prompt .
13586	Push the code to the kernel .
13587	Return True if there are more expressions .
13588	Find the indenting of a line
13589	Store the given lines .
13590	Reset the source .
13591	Process cell magic lines .
13592	Add lines to the cell .
13593	Transform a cell .
13594	Push lines to the input splitter .
13595	Initialize the observers
13596	Post a notification .
13597	Return set of observers for a given notification .
13598	Register a callback to be called when a notification is received .
13599	Create a new job .
13600	Update all running jobs .
13601	Print a group report
13602	Flush the group .
13603	Check status of completed jobs .
13604	Print the status of the job .
13605	Initialize the background job .
13606	Insert a new value .
13607	Return a copy of the directory .
13608	Declare a special variable .
13609	Declare a list variable .
13610	Declare a set variable .
13611	Set the current working directory .
13612	Move the state to a random state .
13613	Calculate the energy of the network .
13614	Return a dictionary with default values .
13615	Check that the table exists .
13616	Convert a list to a dictionary .
13617	Render a check expression .
13618	Print a warning message .
13619	Parse config file .
13620	Return HTML table .
13621	Return an HTML link .
13622	Generate HTML file for given URL .
13623	Returns HTML stylesheet
13624	Create an img tag
13625	Subtract the value from the given value .
13626	Multiply two values
13627	Returns the division of value .
13628	Modifies value with an argument .
13629	Get the verbose name of an object .
13630	Split user input .
13631	Add test runner options .
13632	Add a builtin value .
13633	Remove a builtin value .
13634	Deactivate all builtin functions .
13635	Find the base name of a requirement .
13636	A generator that yields a list of Links .
13637	Convert a string to a list of filenames .
13638	Run the coverage script .
13639	Add a callback option .
13640	Append an action to the parser .
13641	Parse command - line arguments .
13642	Print help message .
13643	Handle help commands .
13644	Check if arguments are valid .
13645	Execute the script .
13646	Print debug information .
13647	Unserialize an object .
13648	Set the display hook .
13649	Log uncaught exceptions .
13650	Check if the given URL is a URL .
13651	Validate URL .
13652	Validate a URL container
13653	Pull values from global namespace .
13654	Select random ports .
13655	Create a remote function
13656	Creates a parallel function from a view .
13657	Map a sequence of sequences .
13658	Return the last n lines of the line .
13659	Set the autoindent flag .
13660	Initialize logstart .
13661	Save sys . sys . sys . sys . sys . sys . sys . modules .
13662	Restore system state .
13663	Register a post - execute function .
13664	Create a new main module .
13665	Store the main module in the cache .
13666	Initialize the user - defined namespace .
13667	Return a list of all namespace references .
13668	Reset the history .
13669	Delete a variable .
13670	Remove all keys that match a regular expression .
13671	Push variables to user namespace .
13672	Looks up a Python module and returns a dictionary of the namespace and the namespace .
13673	Check if a property exists .
13674	Find an object by name .
13675	Inspect an object .
13676	Initialize history manager
13677	Excepthook .
13678	Print the traceback to the console .
13679	Print traceback to stdout .
13680	Show a syntax error .
13681	Pre - readline .
13682	Provide completion for completion .
13683	Set a custom completer .
13684	Set completer namespace .
13685	Run a single cell magic .
13686	Find a magic by name .
13687	Define a macro .
13688	Run a shell command .
13689	Auto rewrite input .
13690	Return a dictionary of user variables
13691	Evaluate a list of expressions .
13692	Evaluate expression .
13693	Safely open a file .
13694	Run a cached cell .
13695	Run a cell .
13696	Run the ast nodes in the given nodelist .
13697	Activate pylab .
13698	Expand variables in a variable .
13699	Create a temporary file .
13700	Extract input lines from the history manager .
13701	Find user code .
13702	Cleans up all temp files .
13703	Broadcast a message to a client .
13704	Send a message to multiple targets .
13705	Decorator to skip a test condition .
13706	Decorator to mark a test if a known failure condition is raised .
13707	Mark a function as deprecated .
13708	List all profiles in path
13709	List all bundled profiles .
13710	Find the distribution by key .
13711	Run a command and return the result .
13712	Find the path to a file .
13713	Return the next line .
13714	Send a string to the child process .
13715	Send CTRL - C to the terminal .
13716	Prepare regex pattern .
13717	Expect pattern to match pattern .
13718	The expect loop .
13719	Prepare a regular expression pattern .
13720	Search for all strings in buffer .
13721	Search for a given buffer .
13722	Creates a listener for logging .
13723	Unpack a directory .
13724	Emit a message .
13725	return the last error
13726	Execute a command and return its output .
13727	Find the source code for the given filename .
13728	Return the executed arcs .
13729	Return a list of all arcs that have been executed .
13730	Return a list of unpredicted arcs .
13731	Return branch lines .
13732	Total branches .
13733	Return a dict of branch arcs that are missing
13734	Compute branch stats .
13735	Set precision .
13736	Calculate coverage coverage .
13737	Returns a string representation of the PC covered .
13738	Highlights the given list of words in the haystack .
13739	Highlight the given keywords .
13740	Highlight the given keywords .
13741	Run a function on the file .
13742	Remove quotes from a string .
13743	Indent a string .
13744	Return a marquee .
13745	Remove paragraphs and paragraphs from a string .
13746	Dedent text .
13747	Wrap all paragraphs in a text .
13748	Find optimal separator width
13749	Get a value from a list .
13750	Compute an item matrix for a list of items .
13751	Returns a list of fields
13752	Build kernel argv
13753	Configure SSH to the kernel
13754	Pretty print an object .
13755	Pretty print an object .
13756	Return the MRO for the given object class .
13757	Default printer .
13758	Return a printer for a sequence type .
13759	Return a pretty printer for a dictionary .
13760	Pretty printer .
13761	Pretty print re . pattern .
13762	Print type information .
13763	Pretty print a function .
13764	Pretty print an exception .
13765	Decorator to register a function for a type .
13766	Return a function that will be called when a type is registered .
13767	Add an object to the output buffer .
13768	Append a breakable to the output buffer .
13769	End a group .
13770	Flush the buffer .
13771	Pretty print the given object .
13772	Return a color scheme for the exception .
13773	Writes a row into ods .
13774	Get the text from the clipboard .
13775	Get clipboard .
13776	Get the text from the clipboard .
13777	Get the path to the build prefix
13778	Rekey a dictionary .
13779	Extract dates from an object .
13780	Squash dates into datetime objects .
13781	Return ISO8601 formatted date .
13782	Convert obj to JSON .
13783	Check if the site directory is valid .
13784	Write a script to the install directory .
13785	Sleep from the engine
13786	Create an ArgumentParser .
13787	Convert source files to C .
13788	Create a new connection .
13789	Build a PackageFinder instance .
13790	Called when a log level changes
13791	Default logging logger .
13792	Called when a flag is changed .
13793	Print help for aliases .
13794	Print flag help .
13795	Print the subcommands .
13796	Print help text .
13797	Print the examples .
13798	Update the current configuration .
13799	Initialize subcommands .
13800	Flatten flags into a dictionary .
13801	Parse command line arguments .
13802	Load a config file .
13803	Generate the configuration file .
13804	Downsample data from an array .
13805	Format info .
13806	Write message to output .
13807	Called when a config is changed .
13808	Return the help string for this class .
13809	Return help text for a trait
13810	Generate a section for a class .
13811	Clear the instance of the given class .
13812	Create an instance of the given class .
13813	Format a failure .
13814	Default exception handler .
13815	Flush the channel .
13816	Emit a signal when the channel is started .
13817	Read the contents of a file .
13818	Read data from a file .
13819	Process a command and return its output .
13820	Split string into tokens .
13821	Compress the dhist into a single list .
13822	Decorator to register magics .
13823	Add a magic function to a dictionary .
13824	Mark a method as a magic marker .
13825	Decorator to mark a function as a magic marker .
13826	Get the documentation for all magics .
13827	Register magics .
13828	Register a function in the magics table .
13829	Format a string in LaTeX format .
13830	Parse command line options .
13831	Set the default option for a magic function .
13832	Go to IPython notebook .
13833	Create a task with the given callable .
13834	Get task info by label
13835	Get the callable from the task info .
13836	Calculate the next run .
13837	Submit this task .
13838	Run the task .
13839	Run asap .
13840	Run a task with the specified number of iterations .
13841	Run a function once .
13842	Find the controller key file .
13843	Bind the kernel to an IPython kernel .
13844	Read the test steps from a test file .
13845	Create an interrupt event .
13846	Wait for multiple objects .
13847	Filter objects that match a regex pattern .
13848	List all objects in a namespace .
13849	Check that two options are mutually exclusive .
13850	Draw the current figure if it is interactive .
13851	Flush all figures .
13852	Send a matplotlib figure to the console
13853	Load an IPython extension .
13854	Unload an extension .
13855	Generate random ports .
13856	Initialize the notebook server .
13857	Handle SIGINT signal handler
13858	Confirm that the user exits .
13859	Shutdown the kernel manager .
13860	Generate price options .
13861	Replace all occurrences of text in a dictionary .
13862	Render the terminal .
13863	Launch a kernel .
13864	Create a zip file .
13865	Replace version with new_version .
13866	Check if an object is mappable .
13867	Get a partition from a sequence .
13868	Monkey patch pexpect spawn .
13869	Run a file .
13870	Run the given source .
13871	Generate coverage report .
13872	Create XML file for analysis .
13873	Download a file from Supercomputing . org .
13874	Reduce frequencies by frequency
13875	Compute the number of digits in a text file .
13876	Yield digits from a txt file .
13877	Return the frequencies of one digit digits .
13878	Calculate the frequency of a list of digits .
13879	Compute the n digit frequencies .
13880	Plot two digit frequencies
13881	Plot single digit counts in pi .
13882	Debug debugging .
13883	Reverse a view .
13884	Return True if prefix is private .
13885	Create a test suite for a DocFile .
13886	Print a debug script .
13887	Dump a Python script to a Python file .
13888	Print a debug message for a module .
13889	return a dictionary with all files in hashroot
13890	compress all files in hashroot
13891	Return a list of keys matching the given glob pattern .
13892	Allow the given record .
13893	Return True if any of the given record matches .
13894	Format an error .
13895	Embed a shell into a terminal .
13896	The main loop .
13897	Create a new CSV writer and return it .
13898	Prepare locale directories .
13899	Write po files .
13900	Write the header of a po file
13901	Subscribe a user
13902	Initialize the command line parser .
13903	Run a Python module .
13904	Run a Python file .
13905	Make a Python code object from a Python file .
13906	Convert a . pyc file to a Python code object .
13907	Return an HTML table .
13908	Set current value .
13909	Cancel completion .
13910	set the index
13911	Select up the cursor .
13912	Select down .
13913	Select left .
13914	Select the right position .
13915	Update the list .
13916	Return the frequency of words in text .
13917	Print word frequency
13918	Return the document as a string .
13919	Write self to a file .
13920	Validate a pin .
13921	Send a pin to the specified topics .
13922	Delete a shared pin .
13923	Send a pin to the user .
13924	Delete a pin .
13925	Subscribe to a topic .
13926	List all subscriptions for a user .
13927	Decorator to monitor a function .
13928	Start a progress monitor .
13929	Context manager to start a task .
13930	Context manager for subtask .
13931	Update the progress monitor .
13932	Create a new progress monitor .
13933	Mark the task as done .
13934	Page a string .
13935	Move this package to a new location .
13936	Load a configuration from a list of pyconfig files .
13937	Load configuration from file .
13938	Loads the config file as a dictionary .
13939	Load flag from config .
13940	Decode argv .
13941	Load the IPython config .
13942	Load the configuration .
13943	Parse command - line arguments .
13944	Convert the parsed data into a Config object .
13945	Find a Python module .
13946	Add a stop callback .
13947	Called when the process starts .
13948	Notify the process to stop .
13949	Wait for SIGINT to terminate .
13950	Find command line arguments
13951	Start the MPI launcher .
13952	Send a file to remote
13953	Fetch a file from remote
13954	Return the number of engines .
13955	Start all engines .
13956	Start the job .
13957	Default context context
13958	Parse the output of the job .
13959	write batch script
13960	Start the batch script .
13961	Returns the context menu for this widget .
13962	Appends a jpg to the terminal .
13963	Append a PNG to the terminal .
13964	Appends an SVG to the terminal .
13965	Add an image to the document .
13966	Copies the image to the clipboard
13967	Get image by name .
13968	Insert an image into the cursor .
13969	Insert an SVG into the cursor .
13970	Save an image
13971	Called when the client exits .
13972	Initialize the environment .
13973	Re - rewrite input .
13974	Ask the interactive shell to exit .
13975	Set the next input .
13976	Read config file .
13977	Get a list of values .
13978	Get a list of lines from a section .
13979	Read environment variables from an environment variable .
13980	Set attributes from kwargs .
13981	Load configuration from a file .
13982	Sets an attribute from a config option .
13983	Expand user and tilde .
13984	Set the delimiter .
13985	Split a single line .
13986	Return a list of keywords that match the input text .
13987	Match attributes .
13988	Called when the user has changed .
13989	Match text .
13990	Return aliases matching text .
13991	Returns a list of Python matches for the given text .
13992	Get the default arguments for an object .
13993	completes a line
13994	Handle readline completion .
13995	Match one or more tests .
13996	Find records matching the filter .
13997	Extract a subdict from a dict
13998	Return True if the prompt ends with a string .
13999	Write output prompt .
14000	Write format data to stdout .
14001	Log the output
14002	Check if object is freezed .
14003	Convert timestamp to Timestamp .
14004	Called when an eventloop is changed .
14005	Dispatch a control message .
14006	Dispatch a message .
14007	Start the shell .
14008	Do one iteration .
14009	Publish a pyin message .
14010	Abort a request .
14011	Send a clear reply to a stream .
14012	Return the topic name for the given topic .
14013	Handle shutdown events
14014	Call before context .
14015	Remove all modules from the stack .
14016	Return absolute path .
14017	Check if a file is a file - like object .
14018	Check if an object is a class .
14019	Check if given path is a package .
14020	Get the package name of a package .
14021	Label label .
14022	Returns a function that returns the last key that matches a regex .
14023	Turn a function into a transplant function .
14024	Create a transplant class .
14025	Return a tuple of cpu times for the system .
14026	Get the command line of the process .
14027	Return a list of open files .
14028	Return a list of connections for this process .
14029	Check if the given user has the given group .
14030	Resolve a class .
14031	Returns the percentage of used and total percentage .
14032	Memoization decorator .
14033	Mark a function as deprecated .
14034	Login to Google API .
14035	Get gdocs key from url
14036	Ensure temp path exists .
14037	Clear temporary files .
14038	Upload a file to a GOD document .
14039	Synchronize local and local translations .
14040	Download gdocs and po files .
14041	Upload po files to GODs .
14042	Clears the empty file .
14043	Connect to Qt console
14044	Check if the given URL is accessible from this machine .
14045	Check if the given URL contains contents .
14046	Get the HTTP code of a given URL .
14047	Compare the content type of a given URL .
14048	Compare response code with given code .
14049	Validate data .
14050	Clear stdout and stderr .
14051	Find the path of a command .
14052	Create a CodeUnit object from a list of morfs .
14053	Return the full path of the file .
14054	Return the source file for this code .
14055	Determine whether this file should be imported .
14056	Return the total seconds in seconds .
14057	Wait for the result to be ready .
14058	Wait for the job to complete .
14059	Get a dictionary of the results from the engine .
14060	Abort the job .
14061	Return the elapsed time in seconds .
14062	Wait for all tasks to complete .
14063	Publish a display pub
14064	Wait until all outputs are ready .
14065	Wait for the message to be ready .
14066	Return absolute file path .
14067	Prepare a list of patterns .
14068	Return the separator from a string .
14069	Find all python files in a directory .
14070	Return relative filename .
14071	Return canonical filename .
14072	Get zip data .
14073	Check if a file is in the directory .
14074	Return True if fpath matches patterns .
14075	Apply aliases to a path .
14076	Run an IPython event loop .
14077	Start an event loop
14078	Main loop function .
14079	Run a gtk . kernel
14080	Run a CFRunLoop on a kernel .
14081	Enable a GUI event loop .
14082	Compute the GOE of a normal distribution .
14083	Calculate the center eigenvalue of a matrix .
14084	Compute the eigenvalue differences between each eigenvalue .
14085	Initialize this step .
14086	Parse a YAML file .
14087	Parse a step configuration .
14088	Initialize the crash handler .
14089	Try to load the config file .
14090	Find profile dir .
14091	Generate a default config file .
14092	Write the file .
14093	Erase the file .
14094	Return line data as a dictionary .
14095	Return arc data as a dictionary .
14096	Write the data to a pickle file .
14097	Read a file .
14098	Read data from a pickle file .
14099	Read a file .
14100	Combine parallel data .
14101	Add line data .
14102	Add arc data .
14103	Add the executed files to the hash .
14104	Return a summary of the file .
14105	Get a list of lines that are pasted .
14106	main loop for interacting with readline
14107	Replace the line with multiline history .
14108	Return raw input .
14109	Update the syntax error .
14110	Return True if the error should be recompile .
14111	Exit the user .
14112	Get URL and revision from VCS
14113	Create a new frontend master
14114	Initialize the colors based on the config .
14115	Get information about this object .
14116	Convert Robj to numpy array
14117	Find the source code for an object .
14118	Set colors of the color scheme .
14119	Toggle color scheme
14120	Convert traceback to text .
14121	Return a formatted traceback .
14122	Format the extracted list .
14123	format exception only
14124	Show exception only .
14125	 debugger
14126	Set the mode .
14127	Decorator that checks if the user is in a superuser .
14128	Ensure all items in mod are in a list .
14129	Add a line to the code .
14130	Add a section .
14131	Get function by name
14132	return code for expr
14133	Render the template .
14134	Apply dots to value .
14135	Render a template .
14136	Return a dictionary of default formatter classes .
14137	Register a function for a type .
14138	Return a callback for the given type .
14139	Called when precision is changed .
14140	Return a list of user config files .
14141	Parse command line arguments .
14142	Configure logging .
14143	Configure working directories .
14144	Pretty print a string in a nice way .
14145	Page a string .
14146	Page a file .
14147	Get the pager command to use .
14148	Get the start string for the pager .
14149	Print str to screen .
14150	Pretty print an object .
14151	Return a PNG representation of an object .
14152	Return a PNG representation of an object .
14153	Check if an object can be printed .
14154	Return a latex representation of an object .
14155	Add options to this plugin .
14156	Validate a list of strings .
14157	Validate that all keys and values are strings .
14158	Run the IOLoop .
14159	Handle incoming message .
14160	Execute code .
14161	Send a complete request .
14162	Get object info
14163	Create a history request
14164	Send a shutdown request to the kernel .
14165	Flush the stream .
14166	Send input to the server .
14167	Start all the channels .
14168	Stop all channels
14169	Return True if all channels are running .
14170	Load configuration from a json file .
14171	Write connection file
14172	Launch a kernel on the local interface .
14173	Shutdown the kernel .
14174	Restart the kernel .
14175	Kill the kernel .
14176	Interrupt the kernel .
14177	Send signal to kernel .
14178	Check if the kernel is alive .
14179	Get a shell channel
14180	Return a sub - channel instance .
14181	Return the hb channel .
14182	Bind a kernel to an IPython application .
14183	Log a debug message .
14184	Get the list of extension classes .
14185	Perform a pre - step step .
14186	Perform a post - step of all extensions .
14187	Finalize all extensions .
14188	Walk an egg directory
14189	Check if a module belongs to an extension .
14190	Launches a new IP controller .
14191	Save connection dictionary to file
14192	load config from json
14193	Load secondary configuration from JSON .
14194	Execute a cell on the engine .
14195	enable autopx
14196	Disable autopx
14197	Run a single cell .
14198	Check if a message is alive
14199	Run task .
14200	Remove task from message
14201	Monkey - patch the protocol with a fake protocol .
14202	Patch an object s attribute with the given method .
14203	Accept a connection .
14204	Reject a connection .
14205	Returns a proxy agent with the given context factory .
14206	Handle form validation .
14207	Delete the object .
14208	Check if user is authenticated .
14209	Report code units .
14210	Check if the module is enabled .
14211	Open an IPython file .
14212	Fix error in vim
14213	Get the current clipboard .
14214	Add a function to the chain .
14215	Get the metadata for a module
14216	Configure options and conf .
14217	Import an item .
14218	Try to passwordless SSH .
14219	Try to open a passwordless .
14220	Try to use paramiko .
14221	Create a tunnel connection .
14222	Open a tunnel .
14223	Stop scheduling tasks .
14224	Unwrap an exception from an exception
14225	Register an engine .
14226	Unregister an engine .
14227	Handle an execute reply message .
14228	Flushes all notifications from the socket .
14229	Flush results from the queue .
14230	Flushes messages from socket .
14231	Flush ignored control replies .
14232	Flush messages from the socket .
14233	Spin forever .
14234	Stop the thread .
14235	Start the thread .
14236	Wait for a list of jobs .
14237	Send an apply request .
14238	Send an execute request .
14239	Get a result from the scheduler .
14240	Get queue status
14241	Purge results .
14242	Get the history of the hub .
14243	Query the database
14244	Return a set of opcode names .
14245	Returns the byte parser .
14246	Find lines matching regexes .
14247	Parse the text .
14248	Return the first line of the line .
14249	Find the first line in a list of lines .
14250	Parse the source .
14251	Get arcs .
14252	Count the number of exit code .
14253	Return a list of child parsers .
14254	Yield the number of lines in the code .
14255	Find all statements in this code .
14256	Return a representation of a block stack .
14257	Split the code into chunks .
14258	Validate chunks .
14259	Yields the arcs at each line .
14260	Return all child parsers as a list of chunks .
14261	Return all arcs for this parser .
14262	Add coverage options
14263	Start coverage .
14264	generate coverage report
14265	Check if a file should be included .
14266	Interpret a source distro name .
14267	Open a URL with authentication .
14268	Fetch a distribution from the environment .
14269	Get parent object .
14270	The root topic of the engine .
14271	Render a template .
14272	Configure the configuration .
14273	Format an error .
14274	Split data by num .
14275	Convert a notebook to a notebook .
14276	Convert hex color to RGB
14277	Get colors for a stylename
14278	Get a font .
14279	Handle an execute reply message .
14280	Handle a history reply .
14281	Handle a pyout message .
14282	Handle a display data message .
14283	Load guiref magic
14284	Execute a file .
14285	Handle an execute error message .
14286	Process a payload .
14287	Set default style
14288	Opens a text editor .
14289	Make an in prompt .
14290	Make the continuation prompt .
14291	Update the style sheet .
14292	Handle syntax style changes .
14293	Handle the response from the server .
14294	Sign request parameters .
14295	Transform a dictionary into a dictionary .
14296	Return virtual memory information .
14297	Returns a tuple of cpu times for the system
14298	Return the uuids of the process .
14299	Get the gids of the process .
14300	Get process threads .
14301	Return a list of open files for this process .
14302	Get package commit hash .
14303	Return information about a package .
14304	Return system information .
14305	Return the number of cpus on Mac OS .
14306	Return the number of CPUs on the system .
14307	Return the next result set .
14308	Fetch a single row .
14309	Fetch many rows .
14310	Fetch all rows .
14311	Connect to peers .
14312	Reads a notebook from a string .
14313	Read a Python notebook .
14314	Read the contents of a string .
14315	Writes a notebook to the specified format .
14316	Write a notebook to a file .
14317	Convert json files to metadata
14318	Load from a dictionary .
14319	Return True if the given name matches the filter .
14320	Return whether the given class is wanted .
14321	Return True if the given directory should be found .
14322	Check if a file should be loaded .
14323	Check if a function has been registered .
14324	Check if a method has been registered .
14325	Check if a module is available .
14326	Read lines from a file .
14327	Parse a list command
14328	Print a list of lines .
14329	P - magic .
14330	Returns the conversion factor between two symbols
14331	Convert a currency to another currency
14332	Compute the return value between two dates
14333	Get stream encoding .
14334	Get default encoding .
14335	Write the connection file
14336	Start the heartbeat .
14337	Log connection information .
14338	Initialize session .
14339	Initialize stdout and display hook
14340	Initialize the kernel .
14341	Setup the connection to the controller .
14342	Register the controller
14343	Convert HTML to text .
14344	Convert markdown to text .
14345	Convert domain to fully qualified name .
14346	Add options to the parser .
14347	Configure exclude directories .
14348	Check if a directory should be excluded .
14349	Check if the given extension is a dynamic library .
14350	Call each of the given functions and return the result .
14351	Call multiple functions in reverse order .
14352	Append a function to the stack .
14353	Insert a function at index .
14354	Format the usage string
14355	Initialize the application .
14356	Write the pid file for this server .
14357	Remove the pid file
14358	Get pid from pid file .
14359	Construct an argparse parser from a magic function .
14360	Return the name of a magic function .
14361	Highlights a block .
14362	Rehighlight the block .
14363	Set the formatter to use .
14364	Copies the text to the clipboard
14365	Execute a message .
14366	Called when the prompt is finished .
14367	Check if the cursor is pressed .
14368	Make a context menu .
14369	Event handler .
14370	Insert the continuation prompt .
14371	Handle a complete reply .
14372	Send a message to the shell channel .
14373	Handle an exec callback .
14374	Handle an execute reply .
14375	Handle input request .
14376	Called when the kernel is died .
14377	Handle an object info reply .
14378	Handle a pyout message .
14379	Handle a stream message .
14380	Handle a shutdown reply
14381	Execute a file .
14382	Interrupt the kernel .
14383	Reset the kernel .
14384	Prompt the user to restart the kernel .
14385	Show the call tip .
14386	Send the completion request .
14387	Handle an execute error .
14388	Process an execute message .
14389	Called when the document changes .
14390	Add a plugin to the list of plugins .
14391	Run all registered plugins .
14392	Generator yielding results .
14393	Simple wrapper around all plugins .
14394	Configure plugins .
14395	Load all registered plugins .
14396	Load all builtin plugins
14397	Convert latex string to PNG .
14398	Convert LaTeX to HTML .
14399	Convert a string to an image .
14400	Check if the requirement exists .
14401	Return a list of Process instances .
14402	Calculate the percentage of busy usage .
14403	Return the object as a dict .
14404	The name of the process .
14405	Get the path to the executable .
14406	Get the children of this process .
14407	Returns the percentage of cpu times in seconds .
14408	Returns the percentage of memory .
14409	Get the memory map .
14410	Checks if the process is running .
14411	Suspends the process .
14412	Resumes the current process .
14413	Kill the current process .
14414	Wait for the process to finish .
14415	wire the kernel
14416	Make gtk . main and main_quit
14417	Return True if identifier is shadowed .
14418	Initialize transformers .
14419	Register a transformer .
14420	Unregisters a transformer .
14421	Initialize checkers .
14422	Register a checker .
14423	Unregisters a checker .
14424	Initialize handlers .
14425	Register handler .
14426	Unregister a handler .
14427	Filter line_info by line_info
14428	Find a handler by line_info .
14429	Apply transformers to a line .
14430	Prefilter a line .
14431	Prefilter lines .
14432	Check if IPy is available .
14433	Return the handler for the given line .
14434	Return the handler for the help command .
14435	Check if alias is not shadowed .
14436	Handle a line .
14437	Expand aliases .
14438	Handle the magic line .
14439	Handle magic calls .
14440	Handle input .
14441	Handle a line .
14442	Called when the event is pressed .
14443	Stops the hide timer .
14444	Paint the option tooltip
14445	Show call info .
14446	Show the call tip .
14447	Called when the cursor position is changed .
14448	Creates a proxied attribute .
14449	Canonicalize a path .
14450	Validate an instance against a schema .
14451	Mask the object .
14452	Returns True if the no - global site - packages file exists in the virtualenv .
14453	Calculate the frequency of a set of fnames .
14454	Decorator for views .
14455	Default aliases for the kernel .
14456	Define an alias .
14457	Define an alias .
14458	Validate an alias command .
14459	Call an alias .
14460	Transform an alias .
14461	Expand aliases .
14462	Auto - help directive .
14463	Reset the image .
14464	Split string into actions .
14465	Returns QtGui . QColor .
14466	Returns a QTextCharFormat for this widget .
14467	Generate a JWT .
14468	Lock the decorated function
14469	Remove expired JWTs
14470	Check if a token is already used .
14471	Validate a JWT .
14472	Acquire a semaphore .
14473	Return common prefix for given items .
14474	Event handler .
14475	Get the size of the scrollbar .
14476	Return whether the cursor can cut .
14477	Return whether the user can paste the clipboard .
14478	Clear the screen .
14479	Cuts the text .
14480	Execute the prompt .
14481	Get the input buffer .
14482	Sets the input buffer .
14483	Sets the font .
14484	Paste the text into the buffer .
14485	Print the dialog .
14486	Prompt to the top of the prompt .
14487	Reset the font .
14488	Perform a custom insert .
14489	Appends the given html to the prompt .
14490	Appends html to the prompt .
14491	Append text to the terminal .
14492	Clears the temporary buffer .
14493	Handles completion with given items .
14494	Fills the temporary buffer with the given text .
14495	Check if a control key is down .
14496	Creates and returns the underlying control .
14497	Creates the control for this widget .
14498	Event handler for page key events
14499	Get the text of a block
14500	Get the end cursor
14501	Get the column number of the input buffer cursor .
14502	Get line from input buffer .
14503	Get prompt cursor
14504	Get text cursor
14505	Insert the continuation prompt .
14506	Insert HTML into the cursor .
14507	Insert text into cursor .
14508	Insert plain text .
14509	Move cursor to end .
14510	Quit the keyboard .
14511	Display a single page .
14512	Called when the prompt is started .
14513	Read a line from the widget .
14514	Set the continuation prompt .
14515	Sets the top cursor .
14516	Show the prompt .
14517	Adjust the scrollbars to the viewport .
14518	Main entry point .
14519	Copy a config file to the current location .
14520	Create a profile directory by name .
14521	Find a profile directory by name .
14522	Convert a key to a key .
14523	Read the contents of a file .
14524	Simple wrapper around raw_input .
14525	Create a temporary file and return it .
14526	Close the stream .
14527	Write data to file .
14528	Register a new heartbeat handler .
14529	Register a new heart failure handler .
14530	Handle a ping message
14531	Return a list of batches of a sequence .
14532	Return path and filename from pathfile .
14533	Walk a directory tree .
14534	Display the elapsed time .
14535	Return the time unit for a given interval .
14536	Extract the wininst config from a distribution file .
14537	Uncache the zip directory
14538	Quote a double quotes argument
14539	Check for conflicts .
14540	Add fetch options to setup . cfg file .
14541	Create home directory
14542	Check if name is an archive file .
14543	Return a copy of an object .
14544	Make an object readonly .
14545	Create a new heading cell .
14546	Create a new notebook node .
14547	Create a new notebook node .
14548	Check if path is a writable directory .
14549	Unquote a filename .
14550	Get the filename of a file .
14551	Return the absolute path of a file .
14552	Get IPython home directory .
14553	Return the current XDG directory .
14554	Get the IPYTHON_DIR from the environment .
14555	Get IPython package directory .
14556	Get the path to an IPython module .
14557	check if a target is outdated
14558	Return md5 hash of file
14559	Check for old IPython configuration files .
14560	Update object view dictionary .
14561	Get suggestions for given object .
14562	Return the suggestions for the given object .
14563	Relative path to this directory .
14564	Return a list of files matching the pattern .
14565	Return a list of lines of the file .
14566	Returns the MD5 hash of the file .
14567	Start a new profile
14568	Print profiling report .
14569	Finalize the profiling .
14570	This function will be called every time .
14571	Enable a wx event loop .
14572	Disable the wx event loop .
14573	Disable Qt4 event loop .
14574	Enable gtk .
14575	Enable a Tk widget .
14576	Enable a pyglet .
14577	Save wave saver .
14578	Initialize the database .
14579	Run SQL against the database .
14580	Get session info .
14581	Return the last n rows
14582	Get a range from a string
14583	Returns the path to the history file .
14584	Change the session number .
14585	Reset the history .
14586	Get a range session
14587	Store the output .
14588	Write the output cache to the database .
14589	Stop the agent .
14590	Determine the number of CPUs on the computer .
14591	Return a list of the system CPU times .
14592	Return all disk partitions .
14593	Get a list of process IDs .
14594	Return a nicely formatted pair .
14595	Format statements and lines .
14596	Return a short version of the stack .
14597	Decorator that checks the cache .
14598	Join regexs together .
14599	Try to remove a file .
14600	update md5
14601	Update the list of profiles
14602	Start a cluster .
14603	Stop a cluster .
14604	Search for a command .
14605	Process stdout and stderr .
14606	Find all code units in the coverage .
14607	Run report_fn on all the code units .
14608	Raises an AssertionError .
14609	Set stdout and stdout .
14610	Decorator that checks if the time limit is exceeded .
14611	Load IPython extensions
14612	Initialize the code .
14613	Run code from user namespace .
14614	Run startup files .
14615	Run the executable files in the list .
14616	Run code in shell .
14617	Run the module .
14618	Decorator to add a method to a class
14619	Find the filename of a static file .
14620	Read data from a file .
14621	Escape special characters .
14622	Generate the coverage report .
14623	Copy the static report files to the directory .
14624	Write HTML to file .
14625	Return the hash of the source file .
14626	Generate the index file .
14627	Read coverage information from a directory .
14628	Write coverage report to directory .
14629	Compare two lists .
14630	Get a slice of a sequence .
14631	Split a sequence into chunks .
14632	Read config file .
14633	Read MANIFEST . in file .
14634	Convert glob to regular expression .
14635	Return True if filename matches any of the patterns .
14636	Return list of versioned files .
14637	Start a new kernel .
14638	Shutdown the kernel .
14639	Kill a kernel .
14640	Get a kernel by its ID .
14641	Get the ports of a kernel .
14642	Returns the notebook ID associated with the given kernel .
14643	Start a kernel .
14644	Shutdown the kernel .
14645	Interrupt a kernel .
14646	Restart a kernel .
14647	Creates an iopub stream for the given kernel .
14648	Creates a shell stream for the given kernel .
14649	Creates a stream for the given kernel .
14650	Reset all one - time properties .
14651	Export HTML to filename .
14652	Export HTML to a file .
14653	Ensure image tag is utf8 .
14654	Replace empty paragraphs with line breaks .
14655	Exports the file .
14656	Get a single item from the database .
14657	Build a query from a list of tokenized_terms .
14658	Get a query string from a text string .
14659	Get a query with the given date field
14660	Get a query that will be less than the given number of days .
14661	Get a set of null or blank query for a given field .
14662	Set fields_dict to case insensitive fields
14663	Add options to the parser .
14664	Validate attribute .
14665	Check if a method has an attribute .
14666	Rotate the ring .
14667	Monkey patch pyzmq . ioloop .
14668	Create a parser from a WSDL document .
14669	Get websocket URL .
14670	Re - serialize a reply .
14671	Injects a cookie into this request .
14672	Start the heartbeat .
14673	Start the heartbeat .
14674	Stop the heartbeat .
14675	Load data into blocks .
14676	Get the block index .
14677	Seek to a block .
14678	Edit a file .
14679	Show the source block at the given index .
14680	Print all source blocks .
14681	Run a method on a collection of objects .
14682	Batch a collection .
14683	Run a function on a sequence
14684	Run a method on a collection .
14685	Decorate a function with an object .
14686	Decorate a function with an object attribute .
14687	Get the source of a traceback .
14688	Find lines that are inspectable .
14689	Display a progressdown .
14690	Stop all the engines .
14691	Check the condition .
14692	Post - call .
14693	Save the message ids to the client .
14694	Synchronizes the results of a function .
14695	Spawns a function after f .
14696	Get all available messages .
14697	Get a message from the queue .
14698	Decorator to define a property .
14699	Returns a tuple of property names for the given fields .
14700	Parse a URL into a dictionary .
14701	Return a list of modules in a given path .
14702	Get the list of root modules
14703	Quick completion function .
14704	Parse module completion .
14705	Completer for magic completion .
14706	Return a list of completions for the user .
14707	Quote attribute .
14708	Configure the plugin .
14709	Write XML report to stream .
14710	add an error to the test list
14711	add a failure
14712	Add a testcase to the testlist .
14713	Generate random numbers from a list of loads
14714	Given a list of loads return the index of the weight
14715	Register an engine .
14716	Unregister an engine
14717	Handle stranded tasks
14718	Dispatch a raw message .
14719	Check if the timeout of this task has been exceeded .
14720	Fail an unreachable dependency .
14721	Check if the job can run .
14722	Mark a job as not met .
14723	Submit a single task .
14724	Dispatch the result of a task .
14725	Handle a result .
14726	Handle an unmet dependency .
14727	Update the dependencies of a dependency .
14728	Initialize a log file .
14729	Prints the state of the log file .
14730	Log a single line .
14731	write data to logfile
14732	Stop logging .
14733	Create a new notebook node .
14734	add a command to the dispatcher
14735	Add a regex to the dispatcher .
14736	yields all strings matching key
14737	Return the flat matches of key
14738	Called when the notebook directory is changed .
14739	List all notebooks .
14740	Return a unique id for a notebook .
14741	Delete a notebook .
14742	Check if a notebook exists .
14743	Return the path to the notebook .
14744	Get the file path by name
14745	Get a notebook .
14746	Get a notebook object .
14747	Save a new notebook .
14748	Save a notebook .
14749	Save notebook object .
14750	Delete a notebook .
14751	Create a new notebook
14752	Copy a notebook
14753	Convert a list of tokens into a list of tokens .
14754	Tokenize a source string into a list of lines .
14755	Load default config file .
14756	Return a list of all subclasses of this class .
14757	Parse command line arguments .
14758	Initialize the terminal .
14759	Initialize the interactive shell .
14760	Initialize the banner .
14761	Return a human - readable representation of an object .
14762	Parse a notifier name .
14763	Set the default value for this trait .
14764	Called when a listener is changed .
14765	Return traits matching metadata
14766	Get the metadata for a particular trait .
14767	Validate that value is a subclass of klass .
14768	Returns the default value .
14769	Check if the task is complete .
14770	Check if the task is unreachable .
14771	Return the dependencies as a dictionary .
14772	Return the depth of n in tree
14773	Pretty print tree .
14774	Disambiguate a DNS URL .
14775	Apply a function to all elements of this RDD .
14776	Validate targets .
14777	Dispatch a single monitor message .
14778	Dispatch a query message .
14779	Handle a new heart .
14780	Handle a heartbeat .
14781	Save a task request
14782	Save a task result .
14783	Save an iopub message
14784	Handle a connection request
14785	Register a new engine
14786	Unregister an engine
14787	Finish a registration
14788	Send a shutdown request to the server .
14789	Purge results of a client .
14790	Extract data from a record .
14791	Get results for a client .
14792	Get history of message
14793	Handle DB query
14794	Change the current working directory .
14795	Decode the output of a completed command .
14796	run command under r_root
14797	Execute Rscript command
14798	Dispatch a message .
14799	Check if a message is from the current session .
14800	Report the given morfs .
14801	Annotate an analysis file .
14802	Get the installed version of apt cache policy
14803	Recursively squash unicode strings .
14804	Extracts the header from a message .
14805	Check the packers .
14806	Generate a message .
14807	Sign a list of messages .
14808	Serializes and signs a message
14809	Send a message to the given stream .
14810	Send message_list to stream .
14811	Receive a multipart message from a socket and return the identity dict .
14812	Feed identities into identities .
14813	Unserialize message .
14814	Save an SVG document to a file .
14815	Save svg to clipboard .
14816	Converts a SVG string to an image .
14817	Return information about an object .
14818	Get the docstring of an object .
14819	Get source code for an object .
14820	Get the argspec of an object .
14821	Return a tuple describing the call tip .
14822	Find the absolute file of an object .
14823	Find the source lines of an object .
14824	Get the description of an object .
14825	Return the header heading .
14826	print no info
14827	Print the definition of an object .
14828	Print the documentation of an object .
14829	Display the source of an object .
14830	Print file contents .
14831	Format a list of fields
14832	Return a description of an object .
14833	search for namespaces
14834	Create a twisted reactor and return it .
14835	Decorate a function into a deferred .
14836	Find best string matching query .
14837	Convert to string .
14838	Returns the XML representation of the document .
14839	Import all modules in a package .
14840	Invert a dictionary
14841	Merge data into a new struct .
14842	Convert object to primitive .
14843	Format raw string .
14844	Get a list of figures .
14845	Print a matplotlib figure .
14846	A decorator that wraps matplotlib . execfile .
14847	Set the matplotlib figure format .
14848	Find GUI and backend .
14849	Activate matplotlib backend .
14850	Configure inline support .
14851	Activate a pylab environment .
14852	Trace an event .
14853	Start tracing .
14854	Stop tracing .
14855	Start a new tracer .
14856	Install the trace function .
14857	Start the collector .
14858	Stops this collector .
14859	Stop profiling .
14860	Resume tracing .
14861	Get line data .
14862	Return a list of RemoteError objects from a list of RemoteError objects .
14863	Render the traceback as a string
14864	Start coverage process .
14865	Return the canonical directory of the morf .
14866	Returns the source code for the given filename .
14867	Determine if a filename should be trace .
14868	Check if the trace should be traced .
14869	Add a warning .
14870	Look for packages in source_pkgs .
14871	Start the configuration .
14872	Stop the process .
14873	Exclude the given regex
14874	Return the regex to exclude .
14875	Save the data to the database .
14876	Combine data .
14877	Harvest data .
14878	Analysis the given MORF .
14879	Return a 2 - tuple of tuples containing all statements in the MORF .
14880	Analyzes an analysis .
14881	Produce a summary of the given morfs .
14882	Annotate one or more morfs .
14883	Generate HTML report .
14884	Produce xml report .
14885	Display a list of objects .
14886	Display the given objects as HTML .
14887	Display an SVG document .
14888	Display objects in PNG format .
14889	Display images in JPEG format .
14890	Display a list of objects in LaTeX format .
14891	Display JSON data .
14892	Display a list of javascript objects .
14893	Reload the data from the file .
14894	Find the path to a command
14895	Run a command .
14896	Forward read events to a thread .
14897	Main loop .
14898	Find launcher class .
14899	Start the cluster .
14900	Build a launcher .
14901	Start the IPython cluster .
14902	Start the cluster .
14903	Returns a wx . PySimpleApp object .
14904	Check if an event loop is running
14905	Start event loop .
14906	Return an IPython QApplication instance .
14907	Check if an event loop is running
14908	Start an event loop
14909	Create a blank canvas .
14910	Draw a cross .
14911	Draw a line between two positions .
14912	Set text at position .
14913	Create an AnnotatedImage from grayscale .
14914	Generate a UUID .
14915	Generate a cache key for a GET request .
14916	Get domain from url
14917	Get query parameters from url
