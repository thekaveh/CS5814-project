0	Emit a single element in the queue .
1	Wrap an Observable source .
2	Sorts the elements in sorted order .
3	Observes the given ConnectableObserver on the given scheduler .
4	Creates a new unicast processor instance .
5	Create a new durable processor .
6	Try to check if a subscriber is null .
7	Converts a value to a Streamable .
8	Resets all variables .
9	Creates a new Maybe from a CompletableSource .
10	Creates a Maybe from a single Single .
11	Retries the given number of times the given predicate .
12	Requests that the given object is not null .
13	Returns an identity function .
14	Converts value to a Callable .
15	Returns a function that wraps the given value .
16	Creates a function that returns a cast to the target class .
17	Create a new durable subject .
18	Create a new durable subject .
19	Create a new durable subject with the given capacity .
20	Create a new durable subject .
21	Waits for the current thread to be executed .
22	Waits for the given timeout for the given timeout .
23	Waits for the current thread to complete .
24	Drains a max loop from a queue .
25	Requests a subscription .
26	Post a subscriber to the given subscriber .
27	Completes the current value .
28	Returns the notification value .
29	Get the error .
30	Validates that the given observable is not disposed .
31	Sets the AtomicReference to the given AtomicReference .
32	Verifies that the upstream subscription is cancelled .
33	Sets the next Subscription .
34	Add a long .
35	Multiply the capacity of two arrays .
36	Add a value to the given AtomicLong .
37	Converts an exception to a NullPointerException .
38	Adds an object to the list .
39	Shuts down the pool .
40	Creates a scheduled executor service .
41	Sets the subscription .
42	Emit loop .
43	Wraps a RuntimeException .
44	Flattens a stack .
45	Throws an exception if it is an exception .
46	Removes all resources .
47	Returns the number of resources .
48	Try to subscribe an Observable to the given Observable .
49	Converts an observable value to a scalar observable using the provided function .
50	Accepts a subscriber .
51	Accepts all elements in the list .
52	Start the queue .
53	Start the queue .
54	Adds an element to the queue .
55	Gets the Disposition .
56	Completes the current value with the given value .
57	Sends an error .
58	Completes the consumer .
59	Concatenates a map of results to a new one .
60	Concatenates an iterable over the elements of each element in the map .
61	Sorts the elements in the given collection .
62	Awaits for the consumer
63	Sends a request to the stream .
64	Adds a subscriber to this list .
65	Removes the specified subscriber from this list .
66	Observes a ConnectableFlowable on the scheduler .
67	Parse the annotations for the given method .
68	Sets the delay .
69	Creates an error response .
70	Calculates the delay of a call .
71	Creates sample data .
72	Returns the HttpMethod object for the given String .
73	Searches for a user .
74	Encodes a raw password .
75	Checks if the given raw password matches the given raw password .
76	Checks if the given version is enabled .
77	Returns true if the given Spring security version is enabled .
78	Gets the spring security core .
79	Add attribute exchange .
80	Creates an OAuth2 client .
81	Configure OAuth2 resource .
82	Returns a ChannelMatcher that corresponds to a ChannelMatcher .
83	Compares an LDAP attribute with the specified value .
84	Retrieves an entry for the specified DN .
85	Searches for single attribute values .
86	Searches for a set of attribute values .
87	Searches a single entry for a given DN .
88	Builds a new SearchControls object based on the given parameters .
89	Look up the primary keys .
90	Builds the preauthentication details for the user .
91	Creates embedded server .
92	Create servlet filter .
93	Create jaas filter .
94	Creates a whitelisted type .
95	Registers the spring security filter chain .
96	Gets the token for the given series .
97	Returns a list of granted authorities .
98	Creates a new cipher .
99	Sets the authentication manager .
100	Performs the authentication .
101	Determines if the authentication is changed .
102	Performs the authentication .
103	Check the content length of the response .
104	Converts a collection of authorities to a set of authorities .
105	Sets the URL of the login process .
106	Updates the authentication defaults .
107	Update access defaults .
108	Maps the given password to a String .
109	Extracts the cookie from the request .
110	Encode cookie tokens .
111	Sets cookie .
112	Resolves a security context .
113	Gets the query string from the request .
114	Gets the service port .
115	Gets the principal .
116	Log out the session .
117	Authenticate a user .
118	Builds a provider URL for a list of LDAP DNs .
119	Set environment variables .
120	Returns the full URL of this request .
121	Render the tag .
122	Initialize user details .
123	Gets the UserDetailsService .
124	Adds the parameters to the map .
125	Checks if the request is required .
126	Handle ticket request .
127	Performs a proxy request .
128	Returns true if the authentication token is authenticated .
129	Check if the request is proxied .
130	Creates a method SecurityExpression .
131	Retrieve JWK set .
132	Encode a string value .
133	Gets the list of granted authorities based on the current user .
134	Loads user details by assertion .
135	Gets the pre - authenticated principal .
136	Concatenates two arrays .
137	Returns a portion of a byte array .
138	Gets the granted authorities for the given attributes .
139	Pre - processes a map .
140	Gets the permission collection .
141	Adds a collection of granted authorities to the result set .
142	Gets the pre - authenticated principal .
143	Gets shared object .
144	Build redirect URL for given request .
145	Invokes the interceptor method .
146	Converts a string to a role .
147	Returns true if any of the roles are present in the roles .
148	Process an auto login token .
149	This method is called when the login is successful .
150	Attempts to authenticate a user .
151	Attempts to switch a user to a user .
152	Sets the exit user URL .
153	Display public index .
154	Build the Spring SecurityFilter chain .
155	Decodes a JWT token .
156	Method to authorize the access expression .
157	This method checks if the current user is authorized .
158	Convert a JWT token to a list of roles .
159	Generate a CsrF token .
160	Display admin permission .
161	Display the addPermission for a contact .
162	Add a new Permission
163	Delete a permission
164	Returns a role with the default role prefix .
165	Creates a new UserDetailsFactory from a String .
166	Get attribute values for a given attribute .
167	Returns the first attribute value for the given attribute .
168	Encodes a string .
169	Decode a byte array .
170	Returns the parameter names of the given type .
171	Add a contact .
172	Finds the attributes of the given class .
173	Adds a secure method .
174	Returns all config attributes .
175	Checks if the method name matches the mapped name .
176	Configures the Matcher that matches any of any request .
177	Handle a bind exception .
178	Gets random contact .
179	Remove authentication attributes .
180	Returns the field with the given name .
181	Create service url .
182	Create redirect url .
183	Extracts the SHA prefix from the given encoder pass .
184	Commit the access point .
185	Checks the stack stack .
186	Gets all registered types .
187	Retrieves the cause of the given throwable .
188	Register access manager .
189	Converts a collection of user authorities to a set of authorities .
190	Compares two byte arrays .
191	Sets the default failure url .
192	Sets the input hidden inputs .
193	Build the request URL .
194	Checks if the given URL is an absolute URL .
195	Creates an attribute list for the given identifier .
196	Converts a result set to a unique identifier .
197	Adds entries to the ACL .
198	Creates an object identity .
199	Updates an object identity .
200	Saves the request to the session .
201	Creates a server web exchange matcher that matches the given paths .
202	Returns a Matcher that matches any exchange .
203	Creates a new decryptor with the given salt .
204	Creates a new text encryptor .
205	Creates a ciphertext encryptor for the given password and password .
206	Write headers to the response .
207	Determine the target URL .
208	Determine the target URL .
209	Sets the target URL parameter .
210	Gets the directory with the given id .
211	Build a distinguished name .
212	Creates shared objects .
213	Utility method to configure JAAS property
214	Gets the current date .
215	Internal method for parsing a date .
216	Updates the cache .
217	Sets the authentication details .
218	Determine the security name for the given subject .
219	Determine the groups for a given security name .
220	Change the password for a user .
221	Build a distinguished name .
222	This method is called when a session is exceeded .
223	Copy details from source to destination .
224	Returns a list of filters for the given request .
225	Get a list of filtered filters
226	Returns the application context for the given page context .
227	Gets the full distinguished name .
228	Sets session attributes .
229	Creates a basic authentication scheme .
230	Add filters .
231	Add filters to the REST account .
232	Creates a basic authentication scheme .
233	Creates an authentication scheme .
234	Creates a new authentication scheme .
235	Sets the proxy .
236	Print response options .
237	Sets configuration for redirect .
238	Sets the charset for the query parameter .
239	Sets default object mapper .
240	Configures the given JAXBObjectFactory .
241	Sets mock manager config .
242	Sets mock mapper config .
243	Sets the mock mapper config .
244	Sets mock mapper config .
245	Sets mock mapper config .
246	Sets the mock mapper config .
247	Sets mock mapper config .
248	Sets mock mock mock config .
249	Creates new mock mapper .
250	Sets mock mock config .
251	Sets mock mapper config .
252	Specify matcher config .
253	Allow all hostnames to be allowed .
254	Declare a namespace config .
255	Sets a new namespace declaration .
256	Executes an HTTP request with the given method .
257	Sets the headers .
258	Set the default proxy .
259	Sets the control name .
260	Sets a header value .
261	Sets the basic authentication .
262	Sets ntl mtl .
263	Creates a new headers from the given header .
264	Resets the configuration .
265	Sets a header to the response .
266	Builds the response .
267	Applies a cookie matcher to the given property .
268	Matches a cookie that matches the given comment .
269	Matches the given expiry date .
270	Applies a cookie matcher to a cookie .
271	Returns a cookie matcher that matches the given path .
272	Returns a cookie matcher that matches the given matcher .
273	Matches a cookie .
274	Matches a cookie that matches the given version .
275	Applies a cookie to the given max age .
276	Expect a header that matches the given expected value .
277	Expect a header to be expected .
278	Expect the cookie value for the given cookie name .
279	Returns a new proxy specification .
280	Specifies a number of type return type .
281	Sets the default parser type .
282	Default logging for logging .
283	Enable logging .
284	Creates an HTTP request based on the given HTTP method and body .
285	Sets the default boundary .
286	Add an attribute .
287	Add a header .
288	Add a multi part part .
289	Add result handlers .
290	Sets a new HttpClientConfig instance .
291	Creates a new HttpClientConfig instance .
292	Configures the HttpClientFactory for this HttpClientFactory .
293	Configures the HttpMultipartMode .
294	Gets a JSON value .
295	Returns an integer value as an integer .
296	Returns the value of the specified path .
297	Returns the short value for the given path .
298	Returns a float value .
299	Gets a double value .
300	Returns the value of the specified path .
301	Returns an unmodifiable list with the specified generic type .
302	Gets a map from the path .
303	Gets an object from the path .
304	Sets the body of the request .
305	Add cookie .
306	Adds a parameter to the request .
307	Adds a parameter to the request .
308	Set new form parameters for update strategy .
309	Logs response to the output stream .
310	Adds additional cookies to the list .
311	Remove all keys from the given set .
312	Index implicit bindings .
313	Gets a binding for a given key .
314	Convert a constant string to a constant string .
315	Cleans up the bindings for the given binding .
316	Removes failed binding .
317	Gets the internal dependencies .
318	Creates an uninitialized binding .
319	Gets all parameters .
320	Binds an injector .
321	Binds a logger .
322	Checks whether the given member annotations are found .
323	Returns true if two methods are overridden .
324	Initializes the delegate .
325	Returns the type of the provider .
326	Resolve all of the given types .
327	Converts a type literal to a type literal .
328	Prepares the type converters .
329	Converts the given class loader to a canonical class loader .
330	Checks if the given class is the same .
331	Returns true if the given member is public .
332	Fixes annotations .
333	Requests an instance of the given object .
334	Validates all injected injections .
335	Creates a new instance of the constructor .
336	Wrap a servlet request .
337	Creates a new factory for the given scope .
338	Makes sure that the given scoped scoped .
339	Normalize the given path .
340	Returns an annotation for the given annotation type .
341	Determines if the given annotation type is retained .
342	Finds scope annotation .
343	Gets the binding for the given type .
344	Returns the name of an annotation .
345	Initializes the delegate provider .
346	Adds the binding binding .
347	Returns the constructor in the constructor .
348	Returns true if the given interceptor is a scope annotation .
349	New real map binder .
350	Gets the key for the given key .
351	Creates a new instance of the given construction context .
352	Writes the source .
353	Returns an instance of the CheckedProviders module .
354	Gets all registered methods .
355	Determines if a type literal is not defined .
356	Returns true if the constructor matches the given parameters .
357	Returns the dependencies for the given ctor point .
358	Removes all known dependencies from the given set of dependencies .
359	Returns true if the dependency is valid for the given provider .
360	Gets the binding for the given injector .
361	Invokes the assist method .
362	Checks for missing implementation for missing implementation .
363	Creates a new real Multibinder .
364	Gets the key for a new item .
365	Find the next filter .
366	Returns true if the constructor is annotated .
367	Gets the internal constructor .
368	Returns the set of internal dependencies .
369	Returns a module for the given module .
370	Returns the annotation for the given method .
371	Gets the line number for the given member .
372	Initialize errors .
373	Returns a callable that wraps the given callable and returns the result .
374	Converts a callable to a request .
375	Validates the given object .
376	Returns the members injector .
377	Creates an instance of the given type .
378	Gets the injectors .
379	Returns a new instance of the given type .
380	Creates a strategy for the given annotation .
381	Returns a strategy strategy for the given annotation type .
382	Prune stack trace .
383	Gets the binding source .
384	Format a collection of errors .
385	Create a message with the given message format and arguments .
386	Creates a message with the given Throwable and formatted message format .
387	Creates a message from a Throwable .
388	Convert an object to an element .
389	Determines whether the given class should be skipped .
390	Creates an object from the module names .
391	Main method for testing .
392	Push a dependency .
393	Push a state to a key .
394	Creates an initializable value .
395	Creates a new instance of the given provider .
396	Called when a connection event is received .
397	Add a connection event processor .
398	Gets the result of a Future .
399	Lists a Throwable .
400	Registers a processor for the given command code .
401	Registers the default processor .
402	Returns the processor for the given command code .
403	Returns a Url for the given URL .
404	Decode protocol code .
405	Gets all connections .
406	Scan all connections in the pool
407	Gets a connection pool .
408	Creates a new connection if necessary .
409	Remove a connection from the pool .
410	Tries to run a connection .
411	Creates a connection
412	Closes a connection .
413	Called when the connection is closed .
414	Close the connection .
415	Sets an attribute .
416	Register a user processor
417	Registers a user processor with the given processor
418	Dispatches an RpcRequest command
419	deserialize request command
420	Preprocess the remoting context
421	Log timeout .
422	Debug debug logging .
423	Process a message
424	Invokes a reply with a callback .
425	On invocation .
426	Converts a bit set to a byte value .
427	Converts an integer value to a BitSet .
428	Adds a reconnect task .
429	Stop the process .
430	Create a remoting command .
431	Filter a list of connections
432	Monitor connections .
433	Close the last select connections
434	Gets a boolean property .
435	Log information about an INFO message .
436	Returns true if the request is a request timeout .
437	Gets user processor .
438	Returns a random connection from the list of connections .
439	Returns the value associated with the given key .
440	Returns the value of a property .
441	Resolve a response object to a response .
442	Deserialize response command .
443	Converts a response command to a throwable .
444	Extract error message from client .
445	Creates an RpcServerException .
446	Print the connection trace log
447	Creates a new event loop group .
448	Parse the remote address from a channel .
449	Parse local address from channel .
450	Parses the remote IP address .
451	Returns the host name of the remote host .
452	Returns the local IP address for the given channel .
453	Parses the remote port .
454	Returns the port of the given channel .
455	Parse socket address .
456	Adds a connection to this pool .
457	Removes a connection from this pool .
458	Gets the connection .
459	Register a custom serializer .
460	Returns the custom serializer for the given class name .
461	Register a custom serializer for a command code .
462	Returns the custom serializer for the given command code .
463	Start the connection monitor .
464	Checks if the remote address is connected .
465	Initialize write buffer .
466	Creates a frame for the given opcode .
467	Batch out the batch .
468	Sets the code .
469	Validates the payload .
470	Update payload .
471	Checks if the handshake state contains the given protocol .
472	Translate a single length limit .
473	Translate a single frame check to a single one .
474	Generate a final key .
475	Processes a continuous frame
476	Process a frame .
477	Log a runtime exception .
478	Process a frame text .
479	Process the next frame .
480	Process the next frame .
481	Process close frame .
482	Checks if the buffer size is exceeded .
483	Gets the payload from the buffer list .
484	Returns the total size of the byte buffer list .
485	Translate the HTTP request .
486	Translate http client .
487	Decodes the socket .
488	Close connection .
489	Close connection .
490	Generate HTTP response .
491	Sends the specified text to the client .
492	Resets the connection .
493	Start reading thread .
494	Returns the port .
495	Send the handshake .
496	Sets the connection lost timeout .
497	Stop the connection lost .
498	Start the connection lost timeout .
499	Restarts the timer for a connection .
500	Called when a connection is detected .
501	Cancel a connection lost timer .
502	On handshake .
503	Sends a ping frame .
504	Stops the connection .
505	Gets the port .
506	Perform additional read .
507	Accept an iterator .
508	Reads a read from the input stream .
509	Performs a write operation .
510	Setup the selector thread and register the selector thread .
511	Ensure that a single thread is open .
512	Shuts down the server .
513	Gets the socket .
514	Broadcasts a message to all clients .
515	Broadcast a given text to all clients .
516	Broadcasts the given data to the given client .
517	Fill frames for a specific draft .
518	Transfers source to destination buffer .
519	Start the entity manager .
520	Get an entity manager .
521	Adds a transaction to this transaction .
522	Converts the given arguments to a Scala buffer .
523	Wrap the given arguments .
524	Gets a localized message .
525	Gets a message .
526	Checks if the specified key is defined in the language .
527	Returns the preferred messages for the specified languages .
528	Returns the preferred message for this request .
529	Sets the language .
530	Adds bindings .
531	Adds bindings .
532	Adds bindings .
533	Sets the overrides .
534	Sets the overrides .
535	Sets the overrides .
536	Disable module classes .
537	Invokes a CompletionStage .
538	Invokes the given action .
539	Gets an existing file .
540	Returns a binding for the given scope .
541	Static factory method for creating a tuple
542	Static factory method for creating a tuple .
543	Converts an execution context to Executor .
544	Creates a new JPACon configuration .
545	Creates a JPACon configuration .
546	Creates a new instance of JPAConConfig .
547	Creates a flow from a string .
548	Creates a new JsonNode with the given callback name .
549	Adds a new constraint to the map .
550	Creates a new instance of the given class .
551	Gets the accessible method with the given name and parameter types .
552	Called when an error occurs .
553	Handle a bad request .
554	Called when the request is forbidden .
555	Invoked when not found .
556	Handles an error .
557	Logs server error .
558	Converts a throwable exception to a usable exception .
559	Called when an error occurs .
560	Called when an error occurs .
561	Creates a BuildDocHandler from a list of resources .
562	Creates a build doc handler for a directory .
563	Creates a BuildDocHandler from a directory and a jar file .
564	Creates a documentation handler for the given directory and jar file .
565	Creates a documentation handler from a jar file .
566	Consume all data from the current materializer .
567	Creates HttpEntity from content .
568	Creates an HttpEntity from a string .
569	Creates a chunked entity from the given data .
570	Sets the status of a response .
571	Sends a status message to the given response .
572	Sets the status of the given content .
573	Sends an input stream to the given status .
574	Sets the status of a file .
575	Returns a user by id .
576	Gets the preferred language .
577	Returns a unique call .
578	Returns a call to a call .
579	Returns an absolute URL for the given request .
580	Returns the web socket URL for the given request .
581	Creates a function that returns a connection to a connection .
582	Creates a function that returns a connection function that returns a connection .
583	Creates a new server .
584	Converts the given object to JsonNode .
585	Converts a JsonNode to a class .
586	Parse JsonNode .
587	Parse JsonNode from input stream .
588	Returns a relative path relative to the given start path .
589	Returns the canonical form of the given URL .
590	Displays a list of constraints for the given set of constraints .
591	Returns the displayable constraint .
592	Timeout the given CompletionStage .
593	Check if two classes are assignable .
594	Parse cron expression .
595	Gets the next interval .
596	Creates a new WSClient .
597	Creates a GuiceApplicationBuilder .
598	Returns a response for the request .
599	Sets a session .
600	Sets the flash value for the given key .
601	Qualify the binding key .
602	Specifies a binding key .
603	Returns the binding of this binding .
604	Returns the binding of this Binding .
605	Sets the binding .
606	Converts a binding key to a Java binding .
607	Converts a provider to a provider .
608	Returns a list of available languages .
609	Returns the preferred language for the given application .
610	Creates a new Evolutions reader from a map .
611	Creates a new version of the evolution reader .
612	Removes all executions from the database .
613	Adds a configuration loader to the builder .
614	Adds a module loader to the builder .
615	Loads a Guice application .
616	Loads Guice application .
617	Loads the given modules .
618	Load bindings .
619	Creates a new GuiceBuilder .
620	Encode a cookie .
621	Gets the entity manager .
622	Gets the deque stack .
623	Pushes the given EntityManager to the given EntityManager .
624	Creates a flow with the given splitter .
625	Creates a flow with the given flow strategy .
626	Creates an actor from an actor .
627	Convert the given arguments to a list of error arguments .
628	Fill a form with the specified value .
629	Returns global validation errors .
630	Returns JSON representation of errors .
631	Returns the value associated with the given key .
632	Fills the form .
633	Converts the given text to a type .
634	Converts a text field to a type .
635	Print an object .
636	Prints a single field .
637	Print a type descriptor .
638	Register a converter to a string .
639	Registers a formatter for the given class .
640	Register an annotation formatter .
641	Encodes a cookie .
642	Returns a list of nodes matching the specified path .
643	Converts a List to a Sequence .
644	Converts an array to a sequence .
645	Creates an array of varargs .
646	Creates a Mapped WebSocket Acceptor .
647	Accepts and returns a WebSocket .
648	Checks if an object is accessible .
649	Calculates the cost of a primitive type .
650	Returns the total transformation cost for the given executable arguments .
651	Computes the cost transformation for an object class .
652	Gets the message .
653	Gets the message at the given keys .
654	Creates a new database from the given parameters .
655	Create a parallelSorter .
656	Performs a quick sort of elements in the specified range .
657	Merges the elements in the given range .
658	Invoke a private method .
659	Cast a numeric value to a type .
660	Load an argument .
661	Emit a field instruction .
662	Push a type to the stack
663	Ensures that the given type is zero .
664	Generates code for a given type .
665	Generates a non null null null if any .
666	Resolve all bridge bridges .
667	Retrieves all methods from the superclass of the superclass .
668	Filter the constructors .
669	Sets the super class .
670	Generate a field .
671	Add a method signature .
672	Returns the cardinality of this matrix .
673	Sets the naming policy .
674	Finds all methods in the given array .
675	Resolve child path .
676	Read string .
677	Sets the host host .
678	Creates a new HTTP request with the given destination .
679	Create a connect request to a destination .
680	Creates a GET request .
681	Creates a POST request for a destination .
682	Create a PUT request for a destination .
683	Creates a HTTP request for PATCH request .
684	Creates a DELETE request .
685	Creates a HEAD HEAD request .
686	Creates a HEAD request for a destination .
687	Creates an OPTIONS request .
688	Set the path .
689	Add cookies to the request .
690	Add a query parameter to the request .
691	Add query map .
692	Set query string .
693	Returns the query string .
694	Get the host URL .
695	Sets the basic authentication header .
696	Set the host header .
697	Prepare the request .
698	Sends the response and returns the response .
699	Remove a range from the given range .
700	Returns the length of the exception table .
701	Collect all action interceptors .
702	Collect action filters .
703	Collect action results .
704	Collect the actions of the actions .
705	Sets a simple property .
706	Gets the property .
707	Extract the reference from the property name .
708	Returns the writer .
709	Sets an object reference .
710	Get object reference .
711	Lookup an object reference .
712	Returns the table descriptor for the given table reference .
713	Find table descriptor by column ref .
714	Returns the table alias for the given table .
715	Register a table reference .
716	Lookup a table reference .
717	Registers a hint .
718	Serializes the given value to the given JSON context .
719	Inject attributes from the servlet request .
720	Inject parameters .
721	Inject uploaded files .
722	Convert property name to column name .
723	Convert column name to camel case .
724	Applies the specified column name to the column name .
725	Stores the value in the prepared statement .
726	Prepares the value of the given type .
727	Returns a set of wrappers .
728	Resolves a wrapper .
729	Creates a new wrapper instance .
730	Converts a path to a system separator .
731	Gets the path of the given filename .
732	Splits a filename into an array of strings .
733	Returns relative path relative to basePath
734	Register an instance of the specified class .
735	Adds an action config for the given action type .
736	Start the web application .
737	Configure default values .
738	Registers the graphics components .
739	Exclude jars from classes .
740	Includes the specified jars .
741	Includes the given entries .
742	Exclude entries from class scanner .
743	Scan jar file .
744	Scan classpath .
745	Generates bytecode for a given type .
746	Scan classes .
747	Scan classes .
748	Creates a new transaction .
749	Get the scope of a scope .
750	Gets or creates a new scopes .
751	Adds a new scope to the given scope .
752	Decodes a char array .
753	Prepares a CSRF token .
754	Ensure the size of the given set .
755	Check if a CSRF token is expired .
756	Creates a copy of the given object .
757	Creates a copy of this node .
758	Visit property .
759	Initialize the table reference .
760	Resolves a scope for a specific type .
761	Registers a bean definition .
762	Registers a bean definition .
763	Removes a bean by its type .
764	Resolve beans for a given type .
765	Registers an injection point for a bean .
766	Registers a property in the specified bean .
767	Registers a set InjectionSet for the specified bean name .
768	Registers a method injection point for a method .
769	Registers the init method points for a bean .
770	Registers the destroy method with the specified bean name .
771	Registers a Petite provider for a given bean name .
772	Registers a provider for a given provider .
773	Iterate over all beans of the given type .
774	Defines the parameters for the given map .
775	Intercept the action request .
776	Resolves java version .
777	Push an integer to the stack .
778	Checks if the argument index is valid .
779	Returns the advice field name for the given field .
780	Returns the name of the advice method name .
781	load method arguments
782	Load static method arguments .
783	Load the virtual method arguments .
784	Load a method argument .
785	Store a method argument .
786	Prepares the return value for a method .
787	Creates a key key for the method signature .
788	Generate a new array .
789	Store the given component into an array .
790	Extract encoding from content type .
791	Returns true if the given flags are empty .
792	Resolve authentication token from request .
793	Sends a response to the response .
794	Prepares a file for download .
795	Prepares a response to a file .
796	Gets all cookies with the given name .
797	Read request body from request .
798	Read request body from request .
799	Stores the context path to the servlet context .
800	Stores the context path in the servlet context .
801	Checks if the given parameter is a GET parameter .
802	Prepares the given array of parameters .
803	Copy params from servlet request .
804	Invokes the tag body .
805	Renders the given JspFragment .
806	Renders the given JspFragment .
807	Invokes all init methods on the bean definition .
808	Call the destroy methods .
809	Creates a new bean instance .
810	Inject bean parameters .
811	Rewrite the action path .
812	Add a header .
813	Put a value into the map .
814	Adds a base property .
815	Put a profile property .
816	Get the properties for a profile
817	Resolves macro macros .
818	Extracts all profiles from a map .
819	Read a bit word from a byte array
820	Hash password .
821	Checks if the given text is a password .
822	Read all bytes from the stream to the given output stream .
823	Read bytes from the given stream to the given output stream .
824	Parse an action .
825	Resolves action config .
826	Detect and register an action .
827	Read the action interceptors .
828	Read action filters .
829	Read the package action path .
830	Read method action action path .
831	Parses the method alias .
832	Create an action runtime .
833	Sets the last modified time .
834	Apply an advice to the target class .
835	Injects the target object into the proxy .
836	Visit an annotation .
837	Resolve real name .
838	Resolve json name .
839	Lookup the type data for a given class .
840	Lookup the type for a given class .
841	Finds the type data for the given type .
842	Resolves a Json name .
843	Resolve real name .
844	Returns the file content .
845	Copy the bootstrap methods .
846	Sets the major version and class name .
847	Put constant pool pool .
848	Put the bootstrap methods .
849	Adds a constant field ref .
850	Adds a constant reference to this class .
851	Adds a reference to a constant pool .
852	Adds a constant reference to the constant pool .
853	Adds a constant integer to the constant pool .
854	Adds a constant integer to the table .
855	Adds an entry to the constant pool .
856	Adds a constant or double .
857	Adds a constant name and descriptor .
858	Adds a constant name and descriptor .
859	Adds a string to the constant pool .
860	Adds a constant constant .
861	Adds a constant method handle .
862	Adds a constant method handle .
863	Adds a dynamic constant to the bootstrap method .
864	Adds a dynamic dynamic method invocation .
865	Add a constant reference to a constant pool .
866	Adds a constant reference to the constant pool .
867	Adds a constant reference to the constant pool .
868	Adds a constant constant .
869	Add a bootstrap method .
870	Adds a merged type to the list of types .
871	Returns the hash of the given name .
872	Clear the internal map .
873	Gets all values with the given name .
874	Returns an iterator over the elements in this iterator .
875	Returns all entries in this map .
876	Grows the buffer if necessary .
877	Append characters to the buffer .
878	Visit an annotation .
879	Visit the end of the chain .
880	This method is called when the delegate method is invoked .
881	Create a delegate to the next chain .
882	Parse a path .
883	Push a field to the path .
884	Configure servlet context .
885	Execute the target method .
886	Returns an array of FieldDescriptors .
887	Override this method to override the bean definition .
888	Convert transaction mode to DB .
889	Reads property from source .
890	Copies all entries from the given map .
891	Appends a new buffer to this buffer .
892	Writes all objects to a writer .
893	Writes all objects to the given output stream .
894	Writes all objects to the output stream .
895	Returns the string value for the given key .
896	Gets an Integer .
897	Gets a long .
898	Gets a Double .
899	Gets a float .
900	Returns the value associated with the given key .
901	Adds a value to the JSON object .
902	Sets the mail folder to use .
903	Fetch all messages from a folder .
904	Updates the flags of an email .
905	Close folder .
906	Look up a named parameter .
907	Helper method for creating a new string .
908	Perform validation action .
909	Add a new violation .
910	Sets the mime type .
911	Sets the download for download .
912	Sets the input stream .
913	Sets the target class name .
914	Sets the target class .
915	Processes the class input stream .
916	Create the proxy .
917	Define the target class .
918	Creates a new instance of Proxec .
919	Dumps the class in debug mode .
920	Set the email address from the specified personal name .
921	Set the address of the email address .
922	Add a new email address to the specified personal name .
923	Set the reply to be sent .
924	Set the cc address .
925	Add a text message .
926	Add an HTML message to an email .
927	Add a header .
928	Returns the value of a system property .
929	Gets a boolean property .
930	Gets an integer property .
931	Gets a long value .
932	Returns the parameters of the method parameter .
933	Serialize a single field value .
934	Lookup an alias .
935	Resolve alias .
936	Resolve result path .
937	Resolve result path string .
938	Returns the index of the last slash .
939	Gets the last index of the given string .
940	Gets the index of the specified string .
941	Strips the last camel word .
942	Resolve schema name .
943	Resolve column descriptors .
944	Initializes this instance with the specified key .
945	Mix a matrix .
946	Removes the matrix from a given position .
947	Sets the key for the given key .
948	Initializes the key with the given key .
949	Encrypt a block .
950	Converts a byte array to a long array .
951	Removes the upper bounding bounding box .
952	Returns path .
953	zips a file
954	Gzip a file .
955	Unzipped file .
956	Lists all entries in a zip file .
957	Unzip a zip file .
958	Adds a file to a ZIP output stream .
959	Adds the content to the zip output stream .
960	Returns the field descriptor for the given name .
961	Returns the property descriptor for the given name .
962	Sets the bundle name for the request .
963	Sets the locale for a session .
964	Gets the locale from the session .
965	Returns the parameters for the given bean name .
966	Add profiles .
967	Read a little endian long from the buffer at the given offset .
968	Reads a stream from an input stream .
969	Reads a label at the given bytecode offset .
970	Returns the bytecode offset for a type annotation .
971	Read elements .
972	Read verification type information .
973	Read bootstrap methods .
974	Returns an array of constructors .
975	Returns the descriptor for the given arguments .
976	Gets the request map .
977	Creates a map from the servlet request .
978	Convert an array to a long array .
979	Initialize servlet manager .
980	Adds a file consumer to the list of files .
981	Adds a path to the file .
982	Add a search path .
983	Includes multiple patterns .
984	Exclude patterns .
985	Adds a path to the list .
986	Returns all files in the scanner .
987	Initialize rules .
988	Returns an iterator over all files .
989	Resolves the wire mode .
990	Resolve bean name .
991	Gets the writer .
992	Gets the servlet output stream .
993	Returns the class name .
994	Returns a descriptor for a constructor .
995	Returns a method descriptor for the given return type .
996	Returns a method descriptor for a method .
997	Append descriptor .
998	Returns the size of this node .
999	Parses the arguments of a method descriptor .
1000	Sets the rollback .
1001	Commit the transaction .
1002	Rollback all resources .
1003	Request a resource from the transaction .
1004	Pop a name .
1005	Writes a string .
1006	Write a character .
1007	Write a character sequence .
1008	Sets the log error log level .
1009	Start a new region .
1010	Checks if the value contains the given value .
1011	Registers a pseudo function .
1012	Lookup a pseudo function name .
1013	This method is called to write a destination object .
1014	Visit an annotation .
1015	Make the static initial init method .
1016	Make the proxy constructor .
1017	Process super methods .
1018	Finds the last index in the range .
1019	Add a string to a prefix .
1020	Replace ASM instructions for the class file .
1021	Collects all the attributes of the first attribute .
1022	Registers default values .
1023	Registers the given type .
1024	Lookup the type for a given class .
1025	Lookup the SQL type for the given class .
1026	Creates a socks44 proxy .
1027	Creates a proxy for socks5 proxy .
1028	Creates a HTTP proxy .
1029	Get the total number of thread transactions .
1030	Returns the number of threads that have the given status .
1031	Associate a new transaction .
1032	Checks if the given transaction is a single transaction .
1033	Lookup a resource manager for the given resource type .
1034	Creates a proxy object .
1035	Append method name .
1036	Align the given text to the given size .
1037	Converts an object to a pretty string .
1038	Converts a string to camelCase .
1039	Formats a paragraph .
1040	Converts the given line width to spaces .
1041	Escapes a string .
1042	Unescapes a string .
1043	Gets the bean .
1044	Gets a bean by name .
1045	Initialize bean definition .
1046	Invokes the provider .
1047	Adds a new bean to the factory .
1048	Sets a bean property .
1049	Gets bean property .
1050	Shutdown all beans .
1051	Resolve method parameter types .
1052	Populates the body of the body .
1053	Gets the value of the property .
1054	Ends the closing tag .
1055	Creates an element node .
1056	Tag a tag .
1057	Remove last child node .
1058	Build query string .
1059	Gets the action class name .
1060	Calculates the number of elements from the given count .
1061	Iterate over a collection .
1062	Iterate over an array of items .
1063	Replaces all occurrences of a string with the given string .
1064	Replaces a string with the given character .
1065	Replaces all characters in a string with the same string .
1066	Replaces the first occurrence of a string with the given string .
1067	Replaces the first occurrence of a string with the given character .
1068	Replaces the last substring with the given string .
1069	Replaces the last substring of a string with the given character .
1070	Removes substring from string .
1071	Removes the given character from the string .
1072	Check if all strings are empty .
1073	Check if all strings are blank .
1074	Converts an object to a string array .
1075	Change the first character of a string .
1076	Title of a string .
1077	Convert a string to a string
1078	Checks if a string starts with the given substring at the given startIndex .
1079	Returns true if the string ends with the given character .
1080	Count the number of occurrences of the given string .
1081	Compares two strings .
1082	Returns the index of the first occurrence of the specified string .
1083	Strip the leading character from a string .
1084	Strip trailing char from string .
1085	Strip a character from a string .
1086	Strips the specified character from the string .
1087	Strip a character from a string .
1088	Crops all strings in the array .
1089	Removes whitespace from a string .
1090	Removes whitespace from the string .
1091	Returns the index of the substring of the specified region .
1092	Joins a collection of Strings with the given separator .
1093	Join an array of objects with the given separator .
1094	Converts a string to a string .
1095	Checks if the given char is equal to the given index .
1096	Surround the string with suffix .
1097	Prefix a string .
1098	Add a string to a string .
1099	Cut the first occurrence of the specified string .
1100	Cut the substring of a string .
1101	Cut the prefix from a string .
1102	Cut a suffix from a string .
1103	Cut a string with prefix and suffix .
1104	Insert a string into a string .
1105	Creates a string with the specified number of characters .
1106	Reverses a string .
1107	Returns the longest common prefix of two strings .
1108	Find common prefix .
1109	Shortcut to shorten string .
1110	Converts a string to upper case .
1111	Remove quotes from string .
1112	Converts a byte array to a hex string .
1113	Gets byte array .
1114	Detect quote character .
1115	Visit an attribute .
1116	Visit an enum value .
1117	Visit an annotation .
1118	Registers a new entity descriptor .
1119	Registers an entity .
1120	Remove an entity descriptor .
1121	Creates an entity instance .
1122	Sets the target interface .
1123	Inject target field .
1124	Look up all annotated properties for a given type .
1125	Detect database and configure database .
1126	Closes the output stream .
1127	Writes a byte to the output stream .
1128	Removes the session id from the request .
1129	Gets the name of the mail .
1130	Serialize this object to a byte array .
1131	Writes the mail data to a file .
1132	Writes the message to the output stream .
1133	Append an argument to the type .
1134	Prepend the argument to the given type .
1135	Change return type .
1136	Subclasses should override this method .
1137	Register a type converter .
1138	Lookup a converter for a given type .
1139	Selects a CSS select query .
1140	Selects a collection of selectors .
1141	Processes selectors .
1142	Selects the first node with the given query string .
1143	Walk all descendants of the given node .
1144	Recursively walk the root node .
1145	Selects a node and adds it to the result .
1146	Filter the given CssSelector .
1147	Unpack a string from a packed string .
1148	Refreshes the buffer .
1149	Execute a page query .
1150	Removes the SELECT statement from the SQL statement .
1151	Removes from SQL .
1152	Remove last order by clause .
1153	Decode HTML string .
1154	Detects a name from an input array .
1155	Build ORDER BY clause .
1156	Builds the SQL statement .
1157	Resolve column names and properties .
1158	Find by column name .
1159	Find by property name .
1160	Returns the property name for the given column .
1161	Get column name
1162	Returns the id of the given object .
1163	Sets the id property .
1164	Returns the key value for the given object .
1165	Appends a string to the array .
1166	Sets the index .
1167	Expands the capacity .
1168	Calculates the length of the array .
1169	Creates a message for the given bean definition .
1170	Creates a scoped proxy bean .
1171	Invokes the loop body .
1172	Initialize the files .
1173	Returns true if the given file is a directory .
1174	Sets a watch file .
1175	Start the timer .
1176	Handle a change event .
1177	Adds an enumeration to the list .
1178	Compute the size of the field info .
1179	Puts the field information into the byte vector .
1180	Creates a new Target .
1181	Writes a value to the injection point .
1182	Decorate page content .
1183	Parses the content of a page .
1184	Writes a DecoratedPage to the decor .
1185	Writes the content of a decora tag .
1186	Starts the server .
1187	Runs the given process .
1188	Returns the store for the given session .
1189	Creates an output stream for the response .
1190	Initializes the hint .
1191	Append an alias .
1192	Append column name .
1193	Adds a new rule .
1194	Apply rules to the given value .
1195	Process include .
1196	Processes the given value .
1197	Gets the pseudo class name .
1198	Adds all elements from the given collection .
1199	Find the insertion point at the given index .
1200	Bind an annotation .
1201	Registers an action configuration .
1202	Lookup an action configuration .
1203	Adds a action config with the given action type .
1204	Set system properties .
1205	Validates the bounds of a value .
1206	Find the last table node .
1207	Removes all child elements from the table .
1208	Registers bean beans .
1209	Gets the bean map .
1210	Initialize this proxy .
1211	Adds an advice .
1212	Ends the bundle .
1213	Adds a value to the profile .
1214	Extracts the profiles and adds them to the given key .
1215	Adds the given key to the map .
1216	Convert a typed descriptor to a class name .
1217	Convert a type reference to a type reference .
1218	Convert a typedescriptor to a signature .
1219	Convert a type to a type reference .
1220	Adds all consumers to this consumer .
1221	Creates a new collection .
1222	Converts a value to a single element collection .
1223	Converts a value to a collection .
1224	Convert a collection to a collection .
1225	Convert a primitive value to a collection .
1226	Add a line number .
1227	Makes the method visitor visit this method .
1228	Puts the instruction at the given instruction .
1229	Add forward references .
1230	Resolves a forward reference to the class .
1231	Marks a subroutine as a subroutine .
1232	Adds a copy of the basic block to the next block .
1233	Compares two strings .
1234	Fix an accent .
1235	Puts a byte into the buffer .
1236	Put two byte arrays into the buffer .
1237	Put a short value .
1238	Puts two byte value into the buffer .
1239	Put two byte values .
1240	Put an integer value into the buffer .
1241	Put two byte values .
1242	Put a long value into the buffer .
1243	Put a byte array at the specified offset .
1244	Increases the size of the array .
1245	Authenticate user .
1246	Authenticate user by token .
1247	Authenticate user .
1248	Returns the default message for the given key .
1249	Gets a resource bundle .
1250	Returns the value at the specified index .
1251	Sets the entity id .
1252	Save an entity .
1253	Update entity .
1254	Updates an existing property .
1255	Updates an existing property .
1256	Finds an entity by id .
1257	Find by property .
1258	Finds an entity by its criteria .
1259	Deletes an entity by id .
1260	Delete an entity by ID .
1261	Counts the number of entities in the database .
1262	Increase a property by name
1263	Decreases a property by its name .
1264	Finds all related objects related to the given target .
1265	Lists all entities .
1266	Removes all attributes from the cache .
1267	Returns an unmodifiable set of attributes .
1268	Set the value associated with the given key .
1269	Removes an entry from the cache .
1270	Get current stack trace element .
1271	Gets stack trace .
1272	Gets stack trace .
1273	Gets the chain of exceptions .
1274	Converts an exception to a string .
1275	Converts an exception to a string .
1276	Builds a message .
1277	Unwraps the wrapped exception .
1278	Registers a consumer for the given class .
1279	Adds the specified component class to this class .
1280	Get the system class loader .
1281	Gets the resource as stream .
1282	Gets the resource as an InputStream .
1283	Returns an InputStream for the given class .
1284	Get an InputStream from a classpath .
1285	Add a new route .
1286	Finds a child node .
1287	Parse request parameters .
1288	Convert value to collection .
1289	Invokes the setter method .
1290	Set the value of an array to be set .
1291	Creates a bean .
1292	Extracts the type of a property .
1293	Stop authentication .
1294	Start the authentication token .
1295	Converts a local date to a date .
1296	Convert a local date to a Calendar .
1297	Define proxy .
1298	Adds a new check .
1299	Resolve validation context .
1300	Add all checks for the given target class .
1301	Collects annotations for a property .
1302	Collect annotations .
1303	Copy default properties .
1304	Encode a URI component .
1305	Encodes the given string using the given encoding .
1306	Encodes a URI scheme .
1307	Encode host URI .
1308	Encode port .
1309	Encodes a path .
1310	Encodes a query string .
1311	Encodes a query param .
1312	Encodes a URI fragment .
1313	Returns a map of properties for the class descriptor .
1314	Returns an array of PropertyDescriptors .
1315	Get the set of cookies .
1316	Unzip response .
1317	Close the response .
1318	Accepts a reference to this scope .
1319	Prints all routes .
1320	Encrypt a byte array .
1321	Decrypts the given encrypted content .
1322	Convert map to bean .
1323	Generate a list of objects .
1324	Sets the value of a property .
1325	Generate map .
1326	Compares two column descriptors .
1327	Sets the default header .
1328	Send a request .
1329	Sends a request to the server .
1330	Adds default headers .
1331	Read cookies from http response .
1332	Adds cookies to the http request .
1333	Send an email .
1334	Sets the subject s subject .
1335	Sets the sent date .
1336	Sets headers .
1337	Sets the person s recipients .
1338	Sets the recipient s recipients .
1339	Add body data to email .
1340	Sets the content of an email message .
1341	Create a MimeBodyPart .
1342	Gets the content type .
1343	Saves a result set .
1344	Close all associated ResultSets .
1345	Closes the query .
1346	Closes the query .
1347	Sets the fetch size for this query .
1348	Sets the maximum number of rows .
1349	Executes an update .
1350	Execute the count .
1351	Gets generated columns .
1352	Gets the query string .
1353	Creates a proxy for the given aspect class .
1354	Creates a collection from an iterator .
1355	Creates a stream from an iterator .
1356	Compares two Comparators .
1357	Sets the default wiring .
1358	Print a message to stdout .
1359	Returns the caller class name .
1360	Shortcut for a class name .
1361	Exclude types .
1362	Serialize an object to an Appendable .
1363	Serialize an object to a string .
1364	Clone the given object .
1365	Writes an object to a file .
1366	Reads an object from a file .
1367	Serialize an object to a byte array .
1368	Convert a byte array to an object .
1369	Resolve the mapping table names .
1370	Creates the table names for the given types .
1371	Reads the value of a column .
1372	Cache entities .
1373	Resolve provider definitions for a given class .
1374	Apply the entity name to the table .
1375	Checks if the connection is valid .
1376	Renders the view .
1377	Locates the target view .
1378	Gets the writer .
1379	Gets output stream .
1380	Writes content to the response .
1381	Sets the content type .
1382	Prints a string .
1383	Logs the user .
1384	Returns the token as JSON .
1385	Login with basic authentication .
1386	Stops the user .
1387	Convert a URL to a container file .
1388	Create a directory .
1389	Create a directory .
1390	Copy file .
1391	Copy a directory .
1392	Moves a file to a destination directory .
1393	Moves a directory .
1394	Deletes a directory .
1395	Read chars from a file .
1396	Read characters from a file .
1397	Write chars to a file .
1398	Writes a string to a file .
1399	Append a string to a file .
1400	Read number of bytes from a file
1401	Write bytes to a file .
1402	Append bytes to a file .
1403	Copy a file to a directory .
1404	Deletes a directory .
1405	Creates a temporary directory .
1406	Checks if the given file is binary .
1407	Checks if a directory exists .
1408	Checks if a file exists .
1409	Prints usage information for a command .
1410	Resolve an action method .
1411	Registers an action .
1412	Register a path alias .
1413	Moves to the next iteration .
1414	Creates a new CharArraySequence from the specified array .
1415	Executes the proxy .
1416	Checks if the input array matches the input string .
1417	Returns a sequence of characters from the input .
1418	Creates an array of URLs from a classloader .
1419	Sets the bcc address .
1420	Registers a serializer for the given type .
1421	Lookup a serializer for a given type .
1422	Parse request input stream .
1423	Get the value of a parameter .
1424	Get the values of a parameter .
1425	Get a file upload .
1426	Get a list of uploaded files .
1427	Initialize the configuration .
1428	Parse template .
1429	Returns the index of the end of the template .
1430	Count the number of escapes in the template .
1431	Build query string .
1432	Parse query string .
1433	Prepares header parameter name .
1434	Extract media type .
1435	Render the given appendable .
1436	Returns the inner HTML for the given node .
1437	Configure the parameters for this servlet .
1438	Resets the internal state .
1439	Configures the JSON parser .
1440	Returns the target type for the given path .
1441	Parses a string into a list of objects .
1442	Parses a JSON string .
1443	Resolve the given value .
1444	Skip object .
1445	Parse a string .
1446	Parse string content .
1447	Parses a unicode character .
1448	Parse unquoted string content .
1449	Parse a number .
1450	Parse an array content .
1451	Create empty constructor .
1452	Create a simple method wrapper .
1453	Resolve raw type name .
1454	Resolves a reference from a property descriptor .
1455	Resolve references from a method .
1456	Read bean references from method .
1457	Build default references .
1458	Build default references .
1459	Remove duplicate names .
1460	Convert a string array to an array of references .
1461	Converts an annotation value into an array of beans .
1462	Runs the Joyder .
1463	Finds a method with the given name .
1464	Finds a constructor matching the given parameter types .
1465	Resolve all interfaces .
1466	Compare two parameters .
1467	Force access to the given object .
1468	Creates a new instance of the given class .
1469	Get all superclasses of a given type .
1470	Returns the child class of the given instance .
1471	Returns the JarFile for the given class .
1472	Sleep for the given number of milliseconds .
1473	Sleep for the current thread .
1474	Wait for an object .
1475	Creates a new thread factory .
1476	Returns the value associated with this supplier .
1477	Visit a parameter .
1478	Visit an annotation .
1479	Visit an annotation .
1480	Visits a parameter annotation .
1481	Visit a field instruction .
1482	Visit an instruction .
1483	Visits an invoke instruction .
1484	Visit a jump instruction .
1485	Visit a multi - array instruction .
1486	Visit a try catch block .
1487	Visit a local variable annotation .
1488	Convert properties to a writer .
1489	Processes the input stream .
1490	Moves the next element .
1491	Moves the next row to the next row .
1492	Join an array of arrays
1493	Join an array of arrays .
1494	Resizes the given buffer to the given size .
1495	Appends an element to the end of the buffer .
1496	Removes the specified element from the given array .
1497	Returns the index of the first occurrence of the specified value .
1498	Returns the index of the first occurrence of the specified value .
1499	Returns the index of the first occurrence of the specified sub - array .
1500	Enable XML parsing .
1501	Parses the content of a fragment .
1502	Parse the fragment .
1503	Compute max stack and local stack and local blocks .
1504	End basic block .
1505	Collect attribute types .
1506	Inject target object .
1507	Register a pseudo class .
1508	Looks up a pseudo class by name .
1509	Invokes the given action request .
1510	Returns all property names for the given type .
1511	Visit the properties .
1512	Returns true if the given property name matches the given rule .
1513	Resolves all methods in the given type .
1514	Read filter parameters .
1515	Send bundle file .
1516	Lookup the bundle file for the given bundle id .
1517	Look up a gzip bundle file .
1518	Registers a bundle .
1519	Create a digest based on a string .
1520	Create a bundle
1521	Resets all bundles .
1522	Fixes CSS URLs .
1523	Update column .
1524	Create table name .
1525	Gets a database resource .
1526	Converts an object to a single element array .
1527	Parse a signature for a signature .
1528	Resolves the set of properties for a given class .
1529	Match property types .
1530	Open a connection to the database .
1531	Open a transaction .
1532	Close transaction .
1533	Commits a transaction .
1534	Rollback a transaction .
1535	Creates a new Properties object from a file .
1536	Create a Properties object from a String .
1537	Load properties from a string .
1538	Returns a subset of properties that match the given prefix .
1539	Creates a new Properties object from the classpath .
1540	Gets a property as a String .
1541	Resolve all variables .
1542	Resolve property .
1543	Resolve scope pattern for given type .
1544	Get transaction mode .
1545	Register the given annotations .
1546	Reads a transaction annotation .
1547	Matches the given node .
1548	Match element .
1549	Tries to match the selected results
1550	Urips the given value .
1551	Build the JRE packages .
1552	Clones this node .
1553	Removes the node from the parent node .
1554	Adds a child nodes to this node .
1555	Insert a child node at the specified index .
1556	Inserts a new child with the specified reference .
1557	Inserts a new child with the given ref .
1558	Inserts a new child .
1559	Inserts a new child with the given ref .
1560	Remove all child nodes .
1561	Returns the child node with the given name .
1562	Returns all child nodes that match the given predicate .
1563	Checks if this node is valid .
1564	Initialize child element nodes .
1565	Initialize sibling names .
1566	Initialize child nodes .
1567	Changes the owner of the given node .
1568	Gets the previous sibling node .
1569	Returns the text content of this node .
1570	Get the HTML representation of the fragment .
1571	Gets the inner HTML HTML .
1572	Visit children .
1573	Gets the CSS path .
1574	On decora tag .
1575	On id attribute start tag .
1576	Defines the decora tag .
1577	Adds a perspective aspect .
1578	Adds a root package .
1579	Adds the root package for the given action class .
1580	Find the root package for the given action path .
1581	Resolve validation message .
1582	Removes duplicate names from this bean .
1583	Add a property file name .
1584	Process the target targets for each target .
1585	Iterate over all targets in the given scope .
1586	Iterate over all targets in the given scope .
1587	Extract values from parameters .
1588	Creates an array of targets for the given action .
1589	Creates an action argument .
1590	Called when a session is created .
1591	Called when a session is destroyed .
1592	Adds a value to the list .
1593	Adds all elements from the given JsonArray .
1594	Removes a position from the list .
1595	Resolve target .
1596	Sends the target not found .
1597	Convert a value to a string .
1598	Resolve an action filter .
1599	Returns the name of the pseudo function .
1600	Resolves all properties for the given type .
1601	Create a socket socket for a proxy .
1602	Returns the number of attributes .
1603	Get all action results .
1604	Checks if the given CharSequence matches the given char
1605	Returns the index of the first occurrence of the given index .
1606	Returns the index of the first occurrence of the given char array .
1607	Add command line arguments .
1608	Add environment variable .
1609	Run the process .
1610	Invokes a listener .
1611	Creates a copy of this frame .
1612	Gets the abstract type .
1613	Returns the abstract type from the given descriptor .
1614	Sets the input frame for the given api format .
1615	Returns the local type for the given index .
1616	Set local local variable .
1617	Push an abstract type to the output stack .
1618	Pushes an abstract type .
1619	Pop the given number of elements from the output stack .
1620	Pop the stack .
1621	Add an abstract type .
1622	Returns the initial type of the initial type .
1623	Writes an abstract type to the given symbol table .
1624	Removes entries from cache .
1625	Schedules the prune .
1626	Visit a module .
1627	Visit a nest host .
1628	Visit an outer class .
1629	Visit an annotation .
1630	Visit a nested nest member .
1631	Visit an inner class .
1632	Visit a field .
1633	Gets the current thread session .
1634	Close the thread session .
1635	Creates the execution of the action .
1636	Invokes the action method .
1637	Read request body .
1638	Calculates the index of the first item of a page .
1639	Calculates the index of the first page of the page request .
1640	Returns true if the given value matches the given value .
1641	Converts a char array to a byte array .
1642	Returns the index of the first occurrence of the given character in the given source .
1643	Resolve node name .
1644	Resolve attribute name .
1645	Renders an attribute .
1646	Loads properties from a file .
1647	Load props from a file .
1648	Load props from an input stream .
1649	Load properties from a map .
1650	Load properties from a map .
1651	Loads properties from classpath .
1652	Returns the value of a profile .
1653	Sets a value for a key .
1654	Extract props from target map .
1655	Extract properties from target map .
1656	Extract sub props from target map
1657	Retrieves a map from the active profiles .
1658	Add inner map .
1659	Resolve active profiles .
1660	Get all profiles .
1661	Get profiles for a given property key .
1662	Adds a property injection point .
1663	Adds a set InjectionPoint .
1664	Adds a method injection point .
1665	Add init method points .
1666	Add destroy method points .
1667	Resolve the wrapper class .
1668	Inject the target object into the wrapper .
1669	Gets the target wrapper type .
1670	Finds the field descriptor for the given field .
1671	Returns the type of the field .
1672	Resolves the key type .
1673	Resolves the component type .
1674	Creates a JsonResult from the given object .
1675	Converts an exception to a JSON result .
1676	Resolve HTTP method name .
1677	Returns true if the given string matches the pattern .
1678	Resolves a loader .
1679	Resolves a resource to a resource .
1680	Loads a class with the given name .
1681	Returns the URL of the given resource .
1682	Wait for the end of the queue .
1683	Find annotation type .
1684	Build an InjectionPoint .
1685	Visits the class descriptor .
1686	Creates a list of URLs from a classloader .
1687	Sets the bean .
1688	Update the bean .
1689	Loads the property descriptor .
1690	Returns the getter for the given property .
1691	Returns the setter for the given property .
1692	Connect to database .
1693	Adds an iterator to the iterator .
1694	Print the logo .
1695	Stop the joy .
1696	Creates a socket .
1697	Creates an SSLSocket .
1698	Gets the default SSLSocket factory .
1699	Returns the socket factory for the given proxy type .
1700	Returns a random string with the specified number of characters .
1701	Returns a random string of the specified range .
1702	Returns a random range of characters .
1703	Creates a new collection instance .
1704	Inject a value into the target object .
1705	Convert value to target type .
1706	Visit provider .
1707	Creates a new type cache .
1708	Adds a value to the map .
1709	Returns an array of method descriptors .
1710	Resolve an IP address .
1711	Parses an IP address as an integer .
1712	Checks if the input string is valid for an IPv4 address format .
1713	Resolve host name .
1714	Download bytes from a URL .
1715	Download a string from a URL .
1716	Downloads a file from a URL .
1717	Inject the given action request .
1718	Invokes the given action request .
1719	Connect to a socket .
1720	Connect to a socket .
1721	Gets the index of a primitive type name .
1722	Loads a class from the classloader .
1723	Load an array class by its component type .
1724	Shuts down all bean instances .
1725	Returns a binary search for the given array .
1726	Creates a binary search for a given array of elements .
1727	Exclude patterns .
1728	Includes the given strings .
1729	Includes all bean properties .
1730	Start the start tag .
1731	Register a new component .
1732	Resolve column type .
1733	Preprocess SQL string .
1734	Create a new ResultSetMapper .
1735	Find the generated key by the given type .
1736	Populate generated keys .
1737	Create bean wrapper .
1738	Set bean .
1739	Sets the query parameters .
1740	Sets the objects in the query .
1741	Inserts the next chunk after the previous chunk .
1742	Lookup the type of the given entity .
1743	Find the table reference for a column reference .
1744	Resolve table name .
1745	Resolve the given object .
1746	Appends missing space to the output builder .
1747	Returns an enumeration of the file parameter names .
1748	Includes a page .
1749	Gets the URL from the request .
1750	Gets the request uri .
1751	Resolve the parameters of a action class .
1752	Start the agent .
1753	Shuts down the container .
1754	Filter the subject .
1755	Filter message id .
1756	Filter from email address .
1757	Method allow to filter a recipient .
1758	Method allow to filter a cc address .
1759	Filter a bcc address .
1760	Applies a flag to the filter .
1761	Add a flag to the email .
1762	Applies a received date filter to this filter .
1763	Applies a sent date filter to the email .
1764	Applies a filter to the list of emails .
1765	Method that accepts the given email filters .
1766	Returns a new list of email filters .
1767	Filter the specified email .
1768	Concatenate a search term .
1769	Encodes a byte array .
1770	Convert a value to a byte array .
1771	Checks if the request is eligible for gzip .
1772	Validates the given object .
1773	Validates the given target .
1774	Sets the specified profile .
1775	Sets the enabled profiles .
1776	Matches the given list of profiles .
1777	Parse request body .
1778	Convert this date to milliseconds .
1779	Add this date to another date .
1780	Subtract this date from another date .
1781	Sets an integer value .
1782	Initialize parser .
1783	Emit a comment .
1784	Generate error message .
1785	Create a Pbdf2 hash of the given password .
1786	Generates a PBK key using the given password .
1787	Convert hex string to byte array .
1788	Resolve provider definitions for the given type .
1789	Sets the name of the email attachment .
1790	Sets the content id from the email .
1791	Resolves the mime type .
1792	Parses a type signature .
1793	Compute the size of the attribute size .
1794	Writes the attributes of the module .
1795	Decodes the given string .
1796	Decode query string .
1797	Start database .
1798	Check connection provider .
1799	Visit a method annotation .
1800	overrides the visitor to collect all superclasses
1801	Create a method signature .
1802	Converts an array of objects to a CSV string .
1803	Convert a line to a String array .
1804	Resolves a class for the given type .
1805	Creates a class reader .
1806	Gets the cached class reader reader .
1807	Encrypt a string
1808	Decrypt a string .
1809	Gets logger .
1810	Sets the cookie name .
1811	Create an action request .
1812	Creates a bean wrapper .
1813	Destroy bean .
1814	Shuts down all beans .
1815	Returns an array of messages from the specified folder .
1816	Starts the ClusteringService .
1817	Run the report .
1818	Prints error message .
1819	Print rate .
1820	Maps a file to a ReadOnlyByteBuffer .
1821	Closes the replay destination .
1822	Perform the number of work in the job .
1823	Returns the position of the log .
1824	Adds a new buffer to the buffer .
1825	Append the length of the given length .
1826	Closes the archive .
1827	Returns the error message for the error response .
1828	Stops the archive .
1829	Called when an image is available .
1830	Called when an image is unavailable .
1831	Read channel status indicator .
1832	Read status indicator .
1833	Sets the limit .
1834	Append the contents of this buffer to the buffer .
1835	Returns a number of available fragments .
1836	Maps a loss report file to a byte buffer .
1837	Snapshot stream .
1838	Creates a new default header .
1839	Writes a key buffer to the key buffer .
1840	Adds labels to the label buffer .
1841	Connect to Aeron archive
1842	Attempts to connect to the given buffer
1843	Sends a close session .
1844	Sends a message to the channel .
1845	Sets the stop recording .
1846	Creates a replay request .
1847	Stops the replay request .
1848	List the records in the buffer .
1849	List all records for the given URI request .
1850	List recording records .
1851	Adds a recording request to the recording .
1852	Returns a recording position for the recording .
1853	Returns true if stop position is available .
1854	List recording subscriptions .
1855	Returns true if the given udp channel matches the given endpoint .
1856	Returns destination address .
1857	Returns the description of the udp channel .
1858	Adds an image to the network .
1859	Inserts a packet into the buffer .
1860	Find the control type in the counter .
1861	Put a string value .
1862	Gets the channel tag .
1863	Returns the entity tag .
1864	Add session id to channel
1865	Gets tag .
1866	Append padding to the frame .
1867	Update the publisher limit .
1868	Allocates an unsafe buffer position .
1869	Returns the label name for the given type .
1870	Scans the buffer at the specified offset .
1871	Resets the state of this channel .
1872	Validates the state of this channel .
1873	Sets the prefix .
1874	Sets the media media .
1875	Sets the control mode .
1876	Sets the term length .
1877	Sets the term offset .
1878	Set linger .
1879	Open a datagram channel .
1880	Close the read .
1881	Check if the buffer is a valid frame .
1882	Receive data from the network .
1883	This method is called when a retransmit occurs .
1884	Process the retransmit timeout .
1885	Returns a string representation of the given status .
1886	Allocate an AtomicCounter .
1887	Resets a new vector .
1888	Validates that this buffer is valid .
1889	Computes the length of a vector .
1890	Calculates the producer window length of the given term buffer .
1891	Validates the socket buffers .
1892	Validates the page size .
1893	Validate session id range .
1894	Validates that the publication timeout expires .
1895	Sets the error code .
1896	Reset state .
1897	Encode cluster members .
1898	Adds the status of a member to the channelUri .
1899	Close the given cluster members .
1900	Checks if the given cluster members are active .
1901	Returns the quorum position in the cluster .
1902	Resets the log position of the cluster members .
1903	Check if the cluster members are reachable .
1904	Checks to see if the members of the members of the given candidate .
1905	Determines if the cluster members have the given vote .
1906	Determine the member member from cluster members .
1907	Validates the members of the member members of the member .
1908	Determines if two clusters are identical .
1909	Returns true if the given cluster member is the same .
1910	Determines if the given cluster member is quorum candidate .
1911	Checks if the given members are duplicated .
1912	Find the index of the member members of the cluster .
1913	Remove a member from the cluster .
1914	Gets the highest member id .
1915	Maps a cnc file to a new one .
1916	Check if the driver is active .
1917	Check if the driver is active .
1918	Check if the driver is active .
1919	Requests the driver termination .
1920	Returns the length of the frame at the given offset .
1921	Writes the length of the frame length in the buffer .
1922	Writes a frame type .
1923	Writes the flags of a frame .
1924	Writes a frame offset to the buffer .
1925	Writes a term id to the buffer .
1926	Find counter id by recording
1927	Find counter id by session id
1928	Gets the record id for the given counter .
1929	Checks if the given counter is active .
1930	Sets the application - specific header field .
1931	Reloads the cache .
1932	Returns the last term .
1933	Creates a recovery plan for a given archive .
1934	Create a recovery plan for a list of snapshots .
1935	Append a term .
1936	Appends a snapshot to the cluster .
1937	Commits the log position .
1938	Remove tombstone entry .
1939	Close the publication .
1940	Offers the first row in the list .
1941	Unblock the given log .
1942	Gets the channel channel .
1943	Set the channel channel
1944	Checks that the given term length is valid .
1945	Checks if the given page size is a valid page size .
1946	Sets the active term count .
1947	Computes the position of an active term .
1948	Compute the length of the given term length .
1949	Stores the default frame header .
1950	Applies the default header to the document buffer .
1951	Rotate log log .
1952	Initialise the tail of the tail buffer .
1953	Returns the offset of the raw tail of the given tail .
1954	Reads the tail of the given metadata buffer .
1955	Parses the raw tail of a raw tail .
1956	Sets the token buffer .
1957	Allocates a counter .
1958	Find counter id .
1959	Checks if the given counter has a replay flag .
1960	Gets the snapshot id of a counter .
1961	Convert flags to char array .
1962	Set the channel channel
1963	Offers the buffer at the given offset .
1964	Wrap the given buffer at the given offset .
1965	Commits the frame length .
1966	Aborts the header .
1967	Starts the driver .
1968	Closes the runner .
1969	Returns the position of the frame .
1970	Allocate a counter .
1971	Returns the counter id of the given service .
1972	Snapshot snapshots .
1973	Allocate an AtomicCounter .
1974	Close the connection .
1975	Dispatch a recording descriptor .
1976	Add a new slab .
1977	Sets the value at the specified index .
1978	Add a statistics .
1979	Calculates the row ranges .
1980	Convert array type to array type .
1981	Convert a struct type to a group type .
1982	Annotate the message part of a message .
1983	Ends the previous bit - packed - packed bit - packed - packed - packed - packed - packed - packed - packed - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
1984	Reads a single struct .
1985	Read a list of footers .
1986	Reads all footers from the given summary file .
1987	Read the footer from the given file .
1988	Read the next row group .
1989	Reads the next row group .
1990	Reads a dictionary .
1991	Adds a writer to the pool .
1992	Removes a writer .
1993	Updates the total allocation .
1994	Registers a scale call .
1995	Starts the reader .
1996	Start a new block .
1997	Start a new column .
1998	Write a dictionary page .
1999	Write a data page .
2000	Writes a chunk of data .
2001	End a block .
2002	Copy bytes from the input stream to the given position .
2003	Ends the trailer data .
2004	Merge all files in the given file .
2005	Merges the given list of files into the given file .
2006	Writes the job summary to a file .
2007	Merges the given metadata into a new one .
2008	Read value .
2009	Returns true if schema is valid .
2010	Returns the first occurrence of the given objects .
2011	Convert a string to a value .
2012	Creates thrift metadata from the given meta data .
2013	Creates a ThriftMetaData from thrift class .
2014	Returns the extra meta data for this instance .
2015	Write null values .
2016	Write a new page .
2017	Initialize delta data from a stream .
2018	Allocates values in the header buffer .
2019	Checks for enum value .
2020	Calculate bit widths for the delta block buffer .
2021	Throws an exception if the given exception is not an exception .
2022	Returns the statistics for the given type
2023	Gets a reader for a given type .
2024	Merges the statistics with the given statistics .
2025	Gets non null .
2026	Creates a new TaskAttemptContext .
2027	Invokes a method .
2028	Writes the members of the fields in a StringBuilder .
2029	Merges the fields of the given group .
2030	Initialize counter .
2031	Gets the filter .
2032	Gets the footer for the given statuses .
2033	Generate splits from row groups .
2034	Writes a record to the log .
2035	Validates the fields of a parquet schema .
2036	Serialize a message .
2037	Creates a new ByteCodecFactory .
2038	Updates required fields .
2039	Checks the set of fields .
2040	Read a file from an input stream .
2041	Closes the record writer .
2042	Set the schema for a job .
2043	Adds a parameter to the parquet type .
2044	Asserts that the given column is valid .
2045	Throws an exception if the long is an integer .
2046	Creates a schema mapping from an arrow schema .
2047	Creates a schema mapping from a parquet schema .
2048	Maps the given parquet schema into a schema .
2049	Write a data page header .
2050	Skip over the next record .
2051	Write object to conf
2052	Removes an entry from the cache .
2053	Adds a new entry to the cache .
2054	Returns the current value for the given key .
2055	Writes the given value to the given schema .
2056	Write value without conversion .
2057	Sets the glob .
2058	Writes a string to the output stream .
2059	Open an input stream .
2060	Returns a record filter that matches the given column path .
2061	Convert a schema to a schema .
2062	Creates a new group type .
2063	Creates a new group type .
2064	Returns a map of key - value pairs .
2065	Get a split split .
2066	Retrieves all fields of a record .
2067	Resolve the schema access to the requested schema .
2068	Parses the input list of files .
2069	Checks that all parquet files are valid .
2070	Gets the input files from a directory .
2071	Returns an unbound page filter .
2072	Creates a list consumer with a given consumer .
2073	Initialize the plan .
2074	Merges all tuples of the given tuple .
2075	Sum up all tuples of the given tuple .
2076	Read a single struct .
2077	Reads a map entry .
2078	Write an integer value to the stream .
2079	Read a little endian integer from the given buffer .
2080	Set the schema for the job .
2081	Creates a topic if it exists .
2082	Create a duplicate stage of the given pipeline .
2083	Creates a new stage bean .
2084	Create interceptors .
2085	Creates an interceptor for the given context .
2086	Parse a schema string .
2087	Converts the given milliseconds to a number of milliseconds .
2088	Get Avro schema from header .
2089	Convenience method for upgrade .
2090	Returns the length of the stream .
2091	Copy blob resources .
2092	Resets the columns .
2093	Report the thread health of a thread .
2094	Register a gauge with the specified thread name .
2095	Stores the configuration of a control hub .
2096	Login credential .
2097	Checks if the given pipeline is upgrade .
2098	Updates the upgrade configuration .
2099	Upgrade the given stage .
2100	Updates the service configuration .
2101	Upgrades the upgrade .
2102	Gets all fields that are not null .
2103	Checks if the given name is a system class .
2104	Adds an element to the list .
2105	Adds the given element to the list and returns the removed element .
2106	Returns the value for the given key or null if no value is found .
2107	Add the list of stages to the stage .
2108	Returns a Descriptor for the given message descriptor .
2109	Gets all file descriptors .
2110	Populate the default values for the given file descriptors .
2111	Returns a file descriptor for the given message type .
2112	Converts protobuf protobuf to a SdcFieldMap .
2113	Converts a protobuf field into a protobuf message .
2114	Converts a protobuf field into a protobuf message .
2115	Upgrade a list of configs .
2116	Check connection .
2117	Convert a Kudu type to Field type .
2118	Create a Field .
2119	Intercepts a list of records .
2120	Returns the content of the chunk .
2121	Adds missing configurations to the given stage .
2122	Parse a response from an input stream .
2123	Adds the response headers to the record .
2124	Writes the response header to the record .
2125	Write response header to record .
2126	Save metadata .
2127	Configure client .
2128	Parse headers .
2129	Increments the source offset .
2130	Parse pagination .
2131	Adds the response headers to the response .
2132	Resolve request headers .
2133	Processes the response .
2134	Returns true if the given property is defined .
2135	Convert an exception to a RecoverableDataException .
2136	Converts an exception to a DataGeneratorException .
2137	Get the credentials for the user .
2138	Get preview information for a pipeline
2139	Copies the buffer to the buffer .
2140	Removes duplicate duplicates .
2141	Empty batch .
2142	Finds the main main line index for the given start index .
2143	Resolves a chunk of partial lines .
2144	Closes the connection .
2145	Escapes quoted string .
2146	Creates flow control settings .
2147	Creates a channel provider .
2148	Adds a batch of messages to the consumer .
2149	Compile the given expression .
2150	Digest an expression from a string .
2151	Adds a dictionary to the dictionary .
2152	Adds a dictionary to the dictionary .
2153	Stops all the aggregators .
2154	Rolls all aggregators .
2155	Serialize an object to a string .
2156	Deserialize the given string to an object .
2157	Deserialize the given file .
2158	Write a record to the output stream .
2159	Resolve a string to a string .
2160	Generate an inner field from the original list .
2161	Gets the table name .
2162	Gets the database name from the database .
2163	Gets internal field .
2164	Gets the location of the location .
2165	Determine whether the given metadata is a custom location .
2166	Get Avro schema from Avro schema .
2167	Returns the data format for the given metadata .
2168	Creates a new schema field .
2169	Validate partition information .
2170	Generate a path path .
2171	Serialize a schema to a HDFS file
2172	Sets the parameters for the given operation .
2173	Get configuration parameters
2174	Parse a string representation of the rfc3 format .
2175	Formats the given string with the given arguments .
2176	Start a BatchContext .
2177	Checks if the record contains all fields contained in the record map .
2178	Returns a list of autogated field names .
2179	Sends an error event to the given record .
2180	Parse a jar name from a jar .
2181	Parse a URL from a URL .
2182	Creates a new instance of CouchbaseConnector .
2183	Closes the database .
2184	Validate configuration .
2185	Returns the label of the given operation code .
2186	Verifies that a dependency definition exists .
2187	Reads a secret from the specified path .
2188	Gets the write operation type from the header .
2189	Writes a document to a record .
2190	Builds a mutation .
2191	Generate a SQL table for a table .
2192	Configure parameters from the given configuration .
2193	Take a sequence of messages from the control channel .
2194	Commits the offset at the given offset .
2195	Sends an error message .
2196	Injects the given stage .
2197	Get definitions for the given stage .
2198	Returns the publisher definition for the given publisher .
2199	Format column name .
2200	Returns the value of the given value .
2201	Get information about a pipeline .
2202	Create a draft fragment for a pipeline fragment .
2203	Get all pipelines for a filter
2204	Import a pipeline fragment .
2205	Gets the temp file path .
2206	Get an operation from a record .
2207	Get field path .
2208	Poll the event from the queue .
2209	Gets the runner .
2210	Gets the runner from the queue .
2211	Returns a runner .
2212	Destroys this runner .
2213	Validates that the container is not destroyed .
2214	Checks if a stream exists .
2215	Gets the last shard id .
2216	Process a queue .
2217	Handle exception .
2218	Get the column hash code .
2219	Compares two files .
2220	Retrieves the PID of the given process .
2221	Retrieves the fields from the given record .
2222	Gets the user s user .
2223	Rolls the active stats .
2224	Creates a snapshot of this instance .
2225	Ensures that the given path exists .
2226	Writes all records in the given batch .
2227	Writes a batch of records to the batch .
2228	Writes all records in the given iterator .
2229	Generate no more data event .
2230	Detect a new partition information .
2231	Updates record header .
2232	Process a group
2233	Checks if two stages are the same .
2234	Entry point for the Mesos driver .
2235	Configure OAuth2 client .
2236	Resolve header values .
2237	Get HttpMethod .
2238	Fill null types .
2239	Gets the value of the field in the record .
2240	Load schema from schema .
2241	Registers a schema .
2242	Load schema from registry .
2243	Gets the schema id from the given subject .
2244	Load schema from registry .
2245	Writes a schema id to the output stream .
2246	Detect the schema ID from the given data .
2247	Returns the default values for the given schema
2248	Parses the given payload and returns a list of records .
2249	Log the details of the artifact .
2250	Returns a list of errors for the error sink .
2251	Initializes the configuration .
2252	Gets all the outgoing edges of a vertex .
2253	Retrieves the edges of a vertex .
2254	Serialize an offset map .
2255	Deserialize an offset map .
2256	Queue a new report .
2257	Gets the report .
2258	Checks if the checkpoint is valid .
2259	Writes the offsets to the file .
2260	Deletes an object .
2261	Handle an error .
2262	Handles an archive .
2263	Returns a reader for the current file .
2264	Releases a reader .
2265	Sets the dpm base url .
2266	Add default header .
2267	Parse a date string .
2268	Escape a string .
2269	Get client .
2270	Initialize a connection
2271	Gets the meta data table
2272	Create bulk insert in bulk .
2273	Creates a new event builder .
2274	Build a schema from the given fields .
2275	Convert an Oracle SQL code to an SQL operation type .
2276	Add jars to the job .
2277	Adds jars to the job .
2278	Check field order by field name
2279	Checks for condition expressions .
2280	Gets the offset for a file offset .
2281	Run the premain method .
2282	Get the parallelism of this producer .
2283	Runs the given query .
2284	Converts a schema to a map .
2285	Get table description .
2286	Validates that the table s columns are accepted .
2287	Get the column type for a field
2288	Check if field is nullable
2289	Get the schema for a table
2290	Get column properties
2291	Returns the class for the given type name .
2292	Initializes Aerospike client .
2293	Get topic
2294	Convenience method for upgrade .
2295	Returns an input stream for reading .
2296	Returns an output stream .
2297	Returns true if the file exists .
2298	Parse a filesystem permission string .
2299	Validates that all the services have been satisfied .
2300	Creates a new aggregator .
2301	Gets the aggregator unit unit .
2302	Creates an aggregator data .
2303	Create a GroupByAggregator .
2304	Start the data provider .
2305	Stops the aggregator .
2306	Rolls the aggregator and returns the aggregator data .
2307	Acquires a login manager .
2308	Release the login manager .
2309	Converts a glob to a regular expression .
2310	Lists a listing of objects in a bucket .
2311	Stop the snapshot .
2312	Returns a batch of empty batches for all active runners .
2313	Creates a snapshot of a pipeline snapshot .
2314	Convert a record to a BoundStatement .
2315	Sets the configuration of this configuration .
2316	Generate lookup key .
2317	Handles a partitioning state .
2318	Read a line .
2319	Rolls a new usage timer .
2320	Enable DPM .
2321	Disables dPM .
2322	Normalize DPM base URL .
2323	Retrieves a user token .
2324	Log out the user
2325	Update the token file .
2326	Update DPM properties .
2327	Returns the schema for the given field .
2328	Returns the schema for the given field .
2329	Gets decimal scale .
2330	Returns the default value for the given schema .
2331	Initialize metrics if needed .
2332	Compares two paths .
2333	Returns the index of the group in the specified group .
2334	Returns the names of the group .
2335	Returns true if the given string is an escaped or not .
2336	Returns true if the given string is an escape character .
2337	Determines if the string is inside a char .
2338	Count the number of openParens in the given string .
2339	Extract group info from a named pattern .
2340	Replaces the input string with a replacement string .
2341	Performs a GET request .
2342	Refresh the schema for the given schema .
2343	Determines if an entry is expired .
2344	Returns the offset .
2345	Fast forward to the next line
2346	Returns an envelope for a detached stage .
2347	Convert a string to a proper number .
2348	Parse a part .
2349	Parse values .
2350	Lookup the primary key columns .
2351	Creates custom field mappings .
2352	Returns the SQL type name for the given field .
2353	Returns the name of the table .
2354	Set primary key columns .
2355	Handle SQL exception .
2356	Performs the processing of a pipeline .
2357	Prepare a pipeline context .
2358	Finishes the execution context .
2359	Flattens the record .
2360	Creates a DetachedStageRuntime instance .
2361	Execute an action .
2362	Retrieves the columns from the given record .
2363	Returns the condition for the given partition .
2364	Validates and returns a map of stored offsets .
2365	Returns the list of definitions for the given list of generators .
2366	Gets the non - empty non - empty string array .
2367	Gets operation .
2368	Convert the given number of bytes to display .
2369	Scans the current live file
2370	Returns the number of pending files in the given live file .
2371	Checks if the given name is a whitelisted whitelisted .
2372	Returns true if the provided versions are equal to the expected versions .
2373	Entry point for testing .
2374	Propagate runtime configurations .
2375	Validate the report description .
2376	Creates a JdbcRecordWriter for a given connection .
2377	Creates a JdbcRecordWriter for a given connection .
2378	Convenience method for upgrade .
2379	Extracts named groups from raw data .
2380	Commit a consumer .
2381	Creates an embedded SCC .
2382	Sets fields in the record .
2383	Retrieves all remote pipelines that have been changed .
2384	Creates a Future from a Future .
2385	Creates a Gauge
2386	Gets the columns for the given operation .
2387	Generate header attributes .
2388	Validates a record .
2389	Removes old temp files from temp table .
2390	Get an avro input stream from a record .
2391	Get a datum file reader .
2392	method to write Parquet
2393	Checks if input is encrypted .
2394	Checks if the input field is valid .
2395	Checks if the input field is valid .
2396	Checks if input is valid .
2397	Prepares the encryption .
2398	Sets the pattern .
2399	Append a replacement string to the builder .
2400	Retrieves the names of the matched groups .
2401	Replaces all properties with the given replacement .
2402	Ensure the avro schema exists .
2403	Returns the value of the global variable .
2404	Creates a start event .
2405	Creates a stop event .
2406	Fix offset column .
2407	Extracts the value of a field from the given string .
2408	Execute an alter table query .
2409	Executes a set of ALTER TABLE .
2410	Executes a database .
2411	Executes a query .
2412	Executes a query .
2413	Executes a pipeline for pipeline operations .
2414	Iterate over all pipes .
2415	Gets the offset commit trigger .
2416	Determine whether the pipeline is stopped .
2417	Accepts a consumer .
2418	Get the insert id for a record
2419	get value from field path
2420	Sets the fragment in a record .
2421	Sets the document in the record .
2422	Sets the n1QL row in the record .
2423	Handle the full file data format .
2424	Returns true if there are incomplete transactions in the given group .
2425	Helper method for creating a new instance of the class loader
2426	Sets a new stage creator .
2427	Logs the session .
2428	Sets exceptions .
2429	Replace variables .
2430	Ensures that the given path is valid for the given path .
2431	Entry point for the EMRBatch .
2432	Returns the path of the target directory .
2433	Renames the final path .
2434	Determine if the record should be rolled back .
2435	Returns true if the given string matches the given pattern
2436	Returns a map of file names .
2437	Returns the remaining wait time for the given start time .
2438	Gets the offsets for a given map .
2439	Creates and initializes a runtime library .
2440	Create a delegate for the given stage library .
2441	Creates a new instance of the delegate library .
2442	Gets the value of the metric .
2443	Find the end of the header end of the buffer .
2444	Gets the body size .
2445	Save a byte buffer into a temporary file
2446	Creates a new SSLServerFactory for the given keystore .
2447	Gets the mime type for a file .
2448	Handle a session .
2449	Stop all connections .
2450	Adds the routes to the controller .
2451	Send response to output stream .
2452	Send body to the output stream .
2453	Creates a fixed length response .
2454	Determines whether this message can be used as a Gzip option .
2455	Sets a cookie .
2456	Unload the queue .
2457	Decode cookie .
2458	Encodes a cookie .
2459	Sets the table name .
2460	Returns the username of the given object .
2461	Register a session repository filter .
2462	Resolve principal name .
2463	Gets a session .
2464	Gets the JNDI name .
2465	Gets the canonical parameter types .
2466	Registers a SynchronizedTransaction .
2467	This method is called before the last SynchronizedCompletionList has been completed .
2468	Gets the current transaction .
2469	This method is called by the deployment unit tests .
2470	Determine if the cache region name is unique .
2471	Retrieves a list of server configurations for the application .
2472	Decrement the read lock count .
2473	Increments the read lock count .
2474	Add a service .
2475	Handle the next expiration calculation .
2476	Add the repository to the repository .
2477	Adds the bdas from the root modules .
2478	Create the metadata for the given deployment .
2479	Sets config name and file name .
2480	Creates a list of security meta data .
2481	Gets servlet mappings .
2482	Gets servlet classes .
2483	Resolves the view .
2484	Returns the list of available connections .
2485	Parse core environment element .
2486	Parse the processId .
2487	Returns the path address of the given operation node .
2488	Sets the path address .
2489	Returns the attribute value of an operation .
2490	Returns true if the operation is included in the operation .
2491	Creates a composite operation .
2492	Create an operation with the given parameters .
2493	Returns an operation node with the given index and index .
2494	Creates a read - attribute operation .
2495	Creates a write attribute operation .
2496	Create an undefine attribute operation .
2497	Returns the value of the current context .
2498	Adds a factory factory for the given scheme .
2499	Removes a factory factory for a given scheme .
2500	Load providers .
2501	Modify the deployment .
2502	Configure endpoint beans .
2503	Modify the context root of the deployment .
2504	Get the transport class name from the deployment .
2505	Sets the RunAsAs for the given security context .
2506	Removes the RunAsAs .
2507	Process the management view .
2508	Inject a property value to the specified object .
2509	Checks if the given class type matches the specified property type .
2510	Finds a method with the given name and property .
2511	Finds a field by its name and type .
2512	Initialize options .
2513	Determines the contents of the request .
2514	Collect a Jdr report .
2515	Collect the Jdr report .
2516	Register a resource adapter .
2517	Unregister a resource adapter
2518	Registers the transformers .
2519	Writes the parameters to the output stream .
2520	Read an exception from an input stream .
2521	Returns the lock owner .
2522	Release the lock .
2523	Add a content to the log .
2524	Adds CDI .
2525	Gets the component view .
2526	Invokes the given endpoint .
2527	Returns the view method that matches the given view methods .
2528	Checks if the given method method matches the target method .
2529	Creates the management statistics resource .
2530	Get the security meta data for the specified endpoint .
2531	Get the domain domain .
2532	Ensures that the two security domains are not same .
2533	Set the idl for the accessor analysis .
2534	Returns the absolute name of this node .
2535	Construct a JNDI name from the given string .
2536	This method is called when the deployment is deployed .
2537	Handles a request .
2538	Checks if the current transaction is in the transaction registry .
2539	Returns the transaction synchronization registry .
2540	Gets the connection factory .
2541	Gets the last component .
2542	Returns true if the name is empty .
2543	Creates a nameNotFoundException .
2544	Creates a naming exception .
2545	Creates a naming exception .
2546	Creates a new CannotProceedableException .
2547	Returns a naming Enumeration for the given collection .
2548	Binding an object .
2549	Returns the activeMQ component control .
2550	Parse connection attributes .
2551	Creates a new component instance .
2552	Returns a virtual file that is used to restore the resource root .
2553	Resolve runtime name .
2554	Creates a listener .
2555	Get a PrimitiveAnalysis for a given class
2556	Shuts down the component .
2557	Gets the url patterns .
2558	Gets the servlets meta data .
2559	Gets servlet mappings .
2560	Get a list of SecurityConstraints from a JBossMetaData .
2561	Gets the login config meta data .
2562	Gets the context params from a JBossWebMetaData .
2563	Gets the web resource collections metadata .
2564	Gets the init params for the servlet metadata .
2565	Creates a new SecurityConstraints object .
2566	New web resource collection metadata .
2567	Creates a new servlet metadata .
2568	New servlet mappings .
2569	New auth ConstraintMetaData .
2570	Returns a new UserDataConstraint with the given parameters .
2571	New param value .
2572	Creates a new ParamValueMetaData .
2573	Registers interceptors for a session .
2574	Process injection targets .
2575	Stop the container .
2576	Get JNDI name .
2577	Resolve an attribute definition .
2578	Returns the type of the given URL pattern .
2579	Checks if a connection factory is a pooled connection .
2580	Checks if the given resource adapter is an external connection factory .
2581	Gets the activeMQ server name .
2582	Returns the default persistence unit name .
2583	Start the activity .
2584	Stop the activity .
2585	Suspend the server .
2586	Resume the server .
2587	Called when the invocation is completed .
2588	Called when a transaction is created .
2589	Start binding .
2590	Stop the context .
2591	Returns the service name for the given capability .
2592	Creates a list of resource roots .
2593	Returns all class loaders of a deployment unit .
2594	Returns true if the persistence unit transformer is needed .
2595	Determines whether or not the given persistence unit is allowed .
2596	Returns true if default data source is allowed .
2597	Determines whether or not the mixed synchronization type is enabled .
2598	Get an ORB object for the given server and environment .
2599	Initialize ORB .
2600	Initialize method handles methods .
2601	Set the active naming store .
2602	Validate default values .
2603	Checks if the parameter is a type .
2604	Lookup the default value for a default value
2605	Validate base type .
2606	Retrieves the deferred entity managers .
2607	Converts a transaction status to a string .
2608	Add cache dependencies for a given classification type .
2609	Extract dialect dialects from database .
2610	Inspect the database dialect .
2611	Identify dialect .
2612	Checks if the database exists .
2613	Converts a string to a schedule date .
2614	Sets node name .
2615	Marks the deployment unit .
2616	Read parameters from an input stream .
2617	Writes the object to the output stream .
2618	Writes an exception to the output stream .
2619	Look up a class using the given lookup .
2620	Begins the creation of the SFSBB .
2621	Called when a SFSB call is finished .
2622	Returns the current SFS call stack
2623	Push a call to the stack .
2624	Removes a map from the stack .
2625	Gets the current session manager .
2626	Add beans to the deployment .
2627	Processes managed bean classes .
2628	Process phase listeners .
2629	Returns the type ID for a given class
2630	Inserts a primitive value into an Any object .
2631	Converts a java name to an IDL string .
2632	Returns true if the given string is a reserved IDL keyword .
2633	Returns the signature for the given class .
2634	Returns the signature of a method .
2635	Returns a string identifying a primitive type .
2636	Returns a BatchPermission for the given name .
2637	Get or create a new entity manager .
2638	Sets the value for the given key .
2639	Converts a SecurityRole to a ModelNode .
2640	Retrieves the latest timestamp from the transaction manager .
2641	Get timers for the given timed object id .
2642	Get the directory for the given timed object id .
2643	Add a listener for a naming listener .
2644	Remove a listener .
2645	Fire an event .
2646	Returns a consumer that closes the consumer .
2647	Add private credential .
2648	Get an instance of the specified object .
2649	Add transaction interceptor for view .
2650	Substitutes a substring of a given string .
2651	Creates a transport configuration for the Invm connector .
2652	Add an ear prefix to the deployment adapter .
2653	Gets the root deployment unit .
2654	Gets the service name .
2655	Creates a new ViewConfiguration instance .
2656	Create an InjectionSource .
2657	Returns a list of view interceptors .
2658	Add a view interceptor to the interceptor factory .
2659	Add a view interceptor for a method .
2660	Returns a list of client interceptors for the given method .
2661	Add a client interceptor for the given priority .
2662	Add a client interceptor for a method .
2663	Put private data .
2664	Thrown when an unexpected element is encountered .
2665	Gets the list of ejws endpoint .
2666	Gets the POJO endpoint .
2667	Gets the endpoint name .
2668	Gets the endpoint class name .
2669	Gets the servlet metadata for a given name .
2670	Gets the required attachment from the deployment unit .
2671	Gets an attachment from a deployment unit .
2672	Gets the JBossWebMetaData from the deployment .
2673	Gets the metadata component metadata .
2674	Returns the web endpoint metadata for the given class name .
2675	Returns the context root of the deployment .
2676	Returns the class for the given name .
2677	Gets a resource .
2678	Gets the resources for the given name .
2679	Lists all resources under the specified path .
2680	Pop the call stack .
2681	Gets the entity manager .
2682	Register a cleanup listener for the given context .
2683	Deploys the given WARs .
2684	Update server configuration .
2685	Check if all fields are public .
2686	Creates a new HTTP endpoint .
2687	Creates a new Jaw deployment model .
2688	Determines if the deployment unit is a JAX - RS deployment deployment .
2689	Set the next timeout .
2690	Sets the timer state .
2691	Merges the deployment data from a list of deployed deployments .
2692	This method is called when the deployment is deployed .
2693	Adds a dependency to the component .
2694	Gets all container interceptors .
2695	Determine if the specified method is at the specified level .
2696	Checks that two elements are required .
2697	Returns the type of the class .
2698	Returns the component type for the given parameter .
2699	Returns a resource definition for the key store .
2700	Returns a resource definition for the key manager .
2701	Gets the resource definition definition .
2702	Parse a name from a name string .
2703	Converts a String into a Vector of Strings
2704	Parse a component .
2705	Shutdown the POAR object .
2706	Convert a CORBA servant to a reference .
2707	Authenticate the given username and password .
2708	Checks if the given class is a type .
2709	Lookup a binding .
2710	Unbind a JNDI .
2711	Instantiates a bean .
2712	Configure bean properties .
2713	Dispatch a lifecycle join .
2714	Gets the current namespace context .
2715	Convert a bean name to a bean name .
2716	Returns the service name for the given class .
2717	Returns the class with the given name .
2718	Process annotations .
2719	Performs post processing on persistence unit .
2720	Validates that the given string is valid .
2721	Creates the deployment descriptor .
2722	Create web app descriptor .
2723	Gets the auth method .
2724	Deploys the JBoss service .
2725	Handle a stateless session bean .
2726	Create a stub class for the given class .
2727	Returns an anonymous object id for an anonymous object .
2728	Gets the persistence providers .
2729	Remove the cached deployment providers for the given deployment class .
2730	Add a persistence provider to the list of persistence providers
2731	Gets the parent module class loader .
2732	Deploys the deployment dependencies .
2733	Adds the persistence unit to the deployment .
2734	Sets all annotation indexes for the deployment .
2735	Get persistence provider adaptor
2736	Saves the persistence provider adaptor for the given deployment unit .
2737	Lookup the persistence provider .
2738	Returns all classes that are annotated with the given URIs .
2739	Create the archive metadata for the given deployment .
2740	Builds the enterprise bean metadata .
2741	Refresh the participant .
2742	Get a container for the given class
2743	Lookup the analysis for a given class
2744	Creates the work in progress .
2745	Gets the IDL module name .
2746	Converts an integer to a hex string .
2747	Converts a long to a hexadecimal string .
2748	Determine if the given method is an accessor .
2749	Returns true if the given method is a mutable method .
2750	Returns true if the method is non - null .
2751	Returns the name of the attribute read .
2752	Returns the name of the attribute write .
2753	Fixup operation names .
2754	This method is used to fix the names of the elements that have the same name .
2755	Escape a string .
2756	Parse an XTS environment element .
2757	Parse the default context element .
2758	Process attributes .
2759	Loads the persistence provider with the given module name .
2760	Creates an add operation handler for the given child type .
2761	Add the module dependencies to the deployment unit .
2762	Write an attribute .
2763	Creates a MethodInt from the context .
2764	Creates a session .
2765	Infer the destination name .
2766	Registers a set of endpoint handlers for the given class .
2767	Gets the job names .
2768	Initialize the job configuration .
2769	Returns the URI of the request .
2770	Creates a new URL using the given URL .
2771	Lookup an object .
2772	Bind an object to an object .
2773	Unbind a path .
2774	Returns a list of bindings for the given name .
2775	Call the destroy method .
2776	Destroys a name .
2777	Bind a new context .
2778	Create a new context .
2779	Lookup a link .
2780	Adds a property to the environment .
2781	Remove a property from the environment .
2782	Adds the transformations to the resource .
2783	Parse the credential .
2784	Remove a security domain
2785	Lookup the JNDI context .
2786	Returns a modifiable reference for the given type .
2787	Creates a modifiable reference .
2788	Returns a modifiable reference for the given type .
2789	Get the localID for a given type .
2790	Waits for a security domain to be available .
2791	Computes the password for the vault .
2792	Initializes the security vault .
2793	Start a new vault session .
2794	Print an attribute for the vault .
2795	Displays the vault configuration .
2796	Returns the vault configuration for the vault .
2797	Checks if the given value is not null .
2798	Get the deployment service name from the ActivationManager .
2799	Insert a value into a WString .
2800	Returns true if the given JNDI has the given permission .
2801	Gets the action string .
2802	Gets the name of the log file .
2803	Send a state change notification .
2804	Gets the state of the remote object .
2805	Returns the value of the given type .
2806	Gets the context service name .
2807	Returns all interceptors .
2808	Add an interceptor for a method .
2809	Adds a dependency to this service .
2810	Returns all interceptors for the given method .
2811	Returns a list of interceptors for the given method .
2812	Add a timeout for a method .
2813	Add an interceptor to the interceptor factory .
2814	Add a postConstruct interceptor .
2815	Add a preDestroy interceptor .
2816	Add a pre - pass interceptor for the given priority .
2817	Add a post - activate interceptor .
2818	Sets the createServiceFactory .
2819	Remove JNDI aliases .
2820	Accepts the remote transport context .
2821	Returns the context service name for a component .
2822	Returns the context service name for the module .
2823	Returns the bind info for an environment entry .
2824	Returns the bindInfo for the given JNDI name .
2825	Gets cache .
2826	Get ValueMembers .
2827	Returns an array of ValueMembers for this type .
2828	Create a subsystem node .
2829	Parse the configuration .
2830	Start the naming service .
2831	Adds the Weld integration .
2832	Returns a service name for the job .
2833	Adds a component to the deployment .
2834	Add message destination .
2835	Gets the view descriptions for the given view type .
2836	Returns all the components of the given component .
2837	Retrieves all views for the given component .
2838	Resolve message destination .
2839	Build transformers .
2840	Sets the definition with the given attribute definition .
2841	Rename an attribute .
2842	Pop the identity from the context cache .
2843	Loads and sets the IDs in the module .
2844	Checks that the versions of the versions of the module .
2845	Compute slot .
2846	Returns the type code for a constant .
2847	Add a type code for a class .
2848	Creates a new package definition .
2849	Add all interfaces from a container .
2850	This method adds all the base valuids to the given container .
2851	Add a class .
2852	Add an interface .
2853	Add a value to the map .
2854	Add an exception to the map .
2855	Gets the class level .
2856	Checks if JTS is enabled .
2857	Start the store .
2858	Stop the root context .
2859	Checks if the method is allowed .
2860	Checks if the transaction is denied .
2861	Get all component classes .
2862	Gets the timers that are waiting for a transaction .
2863	Returns the extra parameters for the given set of keys .
2864	Gets the parameters from the model .
2865	Convert a type to a Class .
2866	Converts the given value to an enum value .
2867	Returns the types of the given values .
2868	Checks if the given type names are equal .
2869	Returns the next binding .
2870	Gets the next binding list .
2871	Map a JNDI binding .
2872	Observes a health check .
2873	Close the health check .
2874	Returns the reference to the bean reference .
2875	Returns the handle object for the specified locator .
2876	Converts a model node to an Enum value .
2877	Skips the given amount of bytes from the input stream .
2878	Checks that two elements are not equal .
2879	Add a component .
2880	Add a class loaders .
2881	Unbind a component .
2882	Lookup an object .
2883	Lists the names of the given name .
2884	Lists bindings for the given name .
2885	Adds a factory to this chain .
2886	Saves the given context object to all factories .
2887	Creates an IO subsystem .
2888	Creates the welcome content handler .
2889	Retrieves a singleton instance from the pool .
2890	Calculate the operation analysis map .
2891	Collect metrics for a resource .
2892	Build the deployment unit .
2893	Deploys the given service .
2894	Publish the web application .
2895	Stop the web application .
2896	Start the deployment .
2897	Registers an endpoint configuration .
2898	Attempt to retry a timer .
2899	Post processing for a timer .
2900	Get the declared methods of a class .
2901	Get the declared fields of a class .
2902	Returns the constructor for the given class .
2903	Get a Method .
2904	Adds an extension extension to the migration manager .
2905	Returns true if the parameter is allowed .
2906	Migrates the generic transport class .
2907	Cancel the current state .
2908	Run the task if it is cancelled .
2909	Change the type of this property .
2910	Checks if the column is an indexed function .
2911	Estimate the index of the given class .
2912	Recursively find all classes in a directory .
2913	Get all classes for the given interface .
2914	Gets the generic type .
2915	Evaluate the record .
2916	Determine the type of the given field .
2917	Updates an existing record .
2918	Find record by ID .
2919	Get the minimal set of nodes for the cluster .
2920	Makes a list of equalities left and left equal to the left .
2921	Add the ORDER BY clause .
2922	Extracts all sub queries from a query .
2923	Checks if the cluster is from the cluster .
2924	Handle a class with the given index
2925	Checks if the given class is a diamond hierarchy .
2926	Gets the order direction of the query .
2927	Returns true if there are multiple indexes for multiple indexes .
2928	Finds the best index search for the given index .
2929	Builds the indexSearchSearchDescriptor for the full text .
2930	Computes the common factor for the given indexes .
2931	Creates a strategy based on the given strategy .
2932	Allow the given operation to be granted to the given resource .
2933	Checks if the user is defined by the given resource .
2934	Compose server status .
2935	Initialize system database .
2936	Load local databases .
2937	This method is called when a member is removed from the cluster .
2938	Elects a new lock manager .
2939	Read lock manager from cluster .
2940	Commits the transaction .
2941	Rollback the transaction .
2942	Updates the identity of an existing record .
2943	Update record cache .
2944	Prepare file .
2945	Moves atomic move to target .
2946	Gets the disjoint patterns .
2947	Checks to see if the local node is local .
2948	Appends the given character array to the builder .
2949	Checks if the connection is connected .
2950	Merges two buffers from two buffers .
2951	Splits a short into two buffers .
2952	Execute the command .
2953	Adds a single value to the index .
2954	Removes a key from the dictionary .
2955	Run the command .
2956	Execute the first query .
2957	Creates a new file .
2958	Checks to see if the file is valid .
2959	Replace content with new content .
2960	Execute command .
2961	End a request .
2962	Add a host to the localhost
2963	Start a new request .
2964	Gets the database .
2965	Get an OClientConnection
2966	Kill a connection
2967	Interrupt the given channel id .
2968	Disconnect a channel .
2969	Push a set of clients to the client .
2970	Swap the entry at the given index .
2971	Release locks .
2972	Update schema .
2973	Method updateMetadata .
2974	Returns the last record .
2975	Read next character .
2976	Execute the query .
2977	On async replication error .
2978	Register a new compression algorithm .
2979	Retrieves the number of files that should be used in the cache .
2980	Checks whether the given expression is allowed to be executed .
2981	Moves this buffer at the specified position .
2982	Fills the specified filler .
2983	Execute next step .
2984	Execute full step .
2985	Evaluate the record .
2986	Execute the command .
2987	Loads the configuration .
2988	Parse a command request .
2989	Execute the request .
2990	Updates the schedule starting at the given edges .
2991	Adds an index definition .
2992	Split this expression into the plan .
2993	Determine the type of the given result .
2994	Gets the collate .
2995	Gets the string value .
2996	Advances the probe .
2997	Execute the command .
2998	Build ODocument from a file .
2999	Check if the given password matches the given password .
3000	Create a PBK hash function .
3001	Returns true if the given algorithm is supported .
3002	Creates an index .
3003	Returns an iterator over all vertices in the graph .
3004	Returns an iterator over all edges in the graph .
3005	Returns the partition key .
3006	Gets the distributed timeout .
3007	Gets features .
3008	Determines if the changes to the given page index .
3009	Parse timeout .
3010	Parses the lock string .
3011	Create a cluster .
3012	Free cluster .
3013	Start the cache .
3014	Unregisters the application .
3015	Returns a singleton result set .
3016	Grants access to a role .
3017	Revoke the role .
3018	Evaluate the record .
3019	Bind parameters to the parameters map .
3020	Resets the bit count .
3021	Returns the index of the item in the table .
3022	Spread an integer into a random number .
3023	Creates an index .
3024	This method is used to drop all existing properties .
3025	Returns the index of the schema .
3026	Get the linked class .
3027	Converts the document to an ODocument .
3028	Remove a listener .
3029	Create a new instance of this database .
3030	timeout a request
3031	Creates a copy of this database .
3032	Try to merge this value to another one .
3033	Replace the reference to the given object .
3034	Transform result .
3035	Execute the command .
3036	Closes all pooled databases .
3037	Called when the storage is unregistered .
3038	Returns a set of function names .
3039	Gets the names of all collate factories .
3040	Returns a set of command names .
3041	Gets the field size and type and type .
3042	Write status code .
3043	Write headers .
3044	Write the record .
3045	Write record .
3046	Send this response to the response .
3047	Send a stream to the response .
3048	Open database object .
3049	Release the database .
3050	Listen for changes .
3051	Completes the operation .
3052	Pushes all components in the snapshot .
3053	Push a WritCacheCounters to the snapshot .
3054	Push a new storage counter to the snapshot .
3055	Pushes a WALCounters onto the snapshot .
3056	Pushes the component counters for the given component .
3057	Stop the write cache timer .
3058	Stops the fuzzy checkpoint timer .
3059	Stop the full checkpoint timer .
3060	Stop the commit timer .
3061	Stop the WAL record .
3062	Stop the flush timer .
3063	Parse an OSQL statement .
3064	Initialize receive messages .
3065	Initialize disconnect .
3066	Removes the record .
3067	Sets a property .
3068	Removes a property .
3069	Checks if a class exists in the schema .
3070	Wrap a new index .
3071	Define a new vertex attribute strategy .
3072	Define an edge attribute strategy .
3073	Get new records by class name
3074	Get a list of new record entries by ID
3075	Add an index entry .
3076	Merges two sets .
3077	Process an existing record .
3078	Determine if the function should be executed .
3079	Prepare keys .
3080	Writes a page at the given index .
3081	Read a single page .
3082	Truncates the page at the given index .
3083	Open the file .
3084	Is replication active?
3085	Gets the new node strategy .
3086	Checks if the cluster is running .
3087	Returns true if the cluster is read .
3088	Get the cluster cluster map .
3089	Get all servers .
3090	Checks if the given server is contained in the cluster .
3091	Checks if the given server is in the cluster .
3092	Get master servers .
3093	Get all servers .
3094	Get all clusters on the server
3095	Get all clusters owned by this node .
3096	Get the cluster owner .
3097	Get the owner of the cluster .
3098	Get the list of servers .
3099	Gets registered servers .
3100	Returns the set of data centers .
3101	Get write quorum for data center .
3102	Checks if the cluster is sharded .
3103	Retrieves the servers for a given data center .
3104	Get the data center of a given server .
3105	Get the global read quorum for the cluster .
3106	Returns the write quorum for the given server .
3107	Get the cluster configuration .
3108	Gets the data center .
3109	Clear initialization stack .
3110	Gets an index .
3111	Drops an index .
3112	Add a vertex to the graph
3113	Add an edge to the graph
3114	Get a vertex by id .
3115	Get all vertices of the specified class .
3116	Get all edges of the specified class .
3117	Get an edge by id .
3118	Resets the graph .
3119	Shuts down the database .
3120	Gets the vertex type .
3121	Get a new vertex type
3122	Create a new vertex type .
3123	Drops a vertex type .
3124	Get an edge type .
3125	Create an edge type .
3126	Get an element by id .
3127	Drop key index .
3128	Create an index index .
3129	Remove an exception listener .
3130	Notifies all background exception listeners .
3131	Stop monitoring .
3132	Register a new MBean
3133	Unregister a MBean
3134	Gets the write cache .
3135	Gets the system counters for all threads .
3136	Retrieves the statistics for the component .
3137	Compress a JSON string .
3138	Get the value of a property .
3139	Detach an object from the entity .
3140	Returns the version of the specified object .
3141	Get command .
3142	Sets the dirty object .
3143	Unset the dirty dirty dirty .
3144	Gets the index types .
3145	Gets the index engines .
3146	Returns a list of nodes that are missing nodes .
3147	Get a list of conflict responses
3148	Get the best response group .
3149	Compute the quorum response .
3150	Returns a list of received responses .
3151	Gets the execution plan .
3152	Checks if the given target is indexed .
3153	Get the library definition for a database .
3154	Release a database engine .
3155	Gets the next page position .
3156	Updates the size of the bag .
3157	Returns the value at the given index .
3158	Checks if the given index is used by the given index .
3159	Returns the index of the outside of the specified character .
3160	Jump to the next non - whitespace .
3161	Get the jump position .
3162	Sets the fetch plan .
3163	Enqueue a new transaction record .
3164	Cancel a record
3165	Enqueue a recovery cluster
3166	Gets the dependencies of a pattern .
3167	Create a pojo object .
3168	Register the entity classes for the given classloader .
3169	Registers all entity classes for the given class .
3170	Set the class handler .
3171	Acquires a database .
3172	Get the number of available connections .
3173	Acquires a database .
3174	Execute the update .
3175	Looks up an iterator for the given class and orientation
3176	Check the cache configuration .
3177	Convert a JSON object to a vertex .
3178	Converts a JSON object to a graph .
3179	Convert an element to a JSON object .
3180	Creates an ObjectNode from a GraphSON object .
3181	Execute import .
3182	Returns the status of the job .
3183	Returns a map of active data centers .
3184	Extract the algorithm from the cipher .
3185	Creates an OSymmetric key from the given configuration .
3186	Creates an asymmetric key from a file system .
3187	Creates a symmetric key from an input stream .
3188	Encrypt the given bytes using the given transformation .
3189	Save the key to the stream .
3190	Save an asymmetric keystore to a keystore
3191	Set the child context .
3192	Adds an object to the unique result .
3193	Get the value of this record .
3194	Authenticate a user .
3195	Get an entry from the map .
3196	Gets the record .
3197	Read the current record .
3198	Gets a transaction .
3199	Gets a graph .
3200	Setup database pool .
3201	Get property .
3202	Stop transaction .
3203	Parse a statement .
3204	Gets next token .
3205	Returns the next token at the given index .
3206	Generate Parse exception .
3207	Returns all vertices in the graph .
3208	Remove this vertex from the graph .
3209	Add a vertex to a partition
3210	Add an edge to a vertex .
3211	Get the connection class name .
3212	Get the connection class .
3213	Process broken records .
3214	Returns a map of declared methods .
3215	Executes a task on the local node .
3216	Returns the number of nodes with the given status
3217	Backup the backup .
3218	Wait for next retry .
3219	Returns the argument at the given position .
3220	Count the number of parameters in the request .
3221	Connect to OAuth server .
3222	List all available databases .
3223	Retrieves information about the server .
3224	Check if the remote storage exists .
3225	Drop a database .
3226	Free the remote storage .
3227	Release the given remote storage .
3228	Get cluster status .
3229	Execute an index .
3230	Gets the graph .
3231	Parse retry .
3232	Save record .
3233	Delete record .
3234	Gets the authentication header .
3235	Authenticate username .
3236	Check if the resource is authorized
3237	Run the server .
3238	Adjusts the beginning of the start line .
3239	Sets the bucket pointer .
3240	Gets the bucket pointer .
3241	End atomic operation .
3242	Acquires exclusive lock .
3243	Change the maximum amount of memory in memory .
3244	Starts listening for the given hostname range .
3245	Read parameters .
3246	Shuts down the log manager .
3247	Adds an item to the map .
3248	Removes the entry from the map .
3249	Acquires an entry .
3250	Returns the value associated with the given key .
3251	Clear the contents of this buffer .
3252	Closes the given key .
3253	Empty read buffers .
3254	Called after the write operation completes .
3255	Called after the read has been completed .
3256	Put an entry in the read buffer .
3257	Returns the closest power of the given value .
3258	Process event .
3259	Convenience method for conversion .
3260	Convenience method for conversion .
3261	Gets the serializer for the given type .
3262	Initialize the shutdown queue .
3263	Get an engine by name .
3264	Optimize database .
3265	Executes the query .
3266	Adds the reader state to the reader list .
3267	Authenticate an OAuth token .
3268	Creates the metadata .
3269	Attempt to acquire a read lock .
3270	Gets the vertex .
3271	Returns the id of the graph .
3272	Sets a property .
3273	Removes a property from the graph .
3274	Removes all entries from the tree .
3275	Delete this file .
3276	Close the database .
3277	Creates a vertex .
3278	Parse strategy .
3279	Get the positions from embedded collection .
3280	Execute the command .
3281	Checks if the given field is valid .
3282	Fill the buffer with the given byte array .
3283	Set the version of the record .
3284	Gets the record type .
3285	Initialize database instance .
3286	Print the exception stack trace .
3287	Execute query .
3288	Convert a link to a record .
3289	Register server command .
3290	Creates a server configuration for the given user document .
3291	Analyzes the filter .
3292	Create an indexed property .
3293	Attaches the given object to the given object .
3294	Get the index class for the given index .
3295	Sets the next value .
3296	Truncate the class index .
3297	Add a base class .
3298	Adds the clusteringIds for the given class .
3299	Link an object to the stream .
3300	Release a pointer .
3301	Check the memory leak pointer .
3302	Clear the pointer pool .
3303	Converts a byte array to an int .
3304	Invoked when the database is open .
3305	Install all clusters owned by the given class .
3306	Dumps the replication status .
3307	Returns the index of the first occurrence of the specified object .
3308	Returns the index of the specified object in the array .
3309	Gets the set of clusters .
3310	Handle the next record .
3311	Get the temporary rid counter .
3312	Report a tip .
3313	Parse the fetch plan .
3314	Parse no cache .
3315	Optimize the sort .
3316	Returns the status of this batch .
3317	Execute command .
3318	Handle a JVM error .
3319	Validate an index value .
3320	Rollback the current storage .
3321	Execute a command .
3322	Registers a cluster .
3323	Set a property .
3324	Execute the specified class .
3325	Execute command .
3326	Delete record .
3327	Push hooks for the given type
3328	Deletes the record .
3329	Counts the number of views in the database .
3330	Counts the number of classes in this database .
3331	Activate the document .
3332	Register an encryption algorithm .
3333	Returns the relative position of the given binary data .
3334	Parses the next word .
3335	Parses the next word .
3336	Parses the next chars .
3337	Parses an optional keyword .
3338	Parse a separator .
3339	Execute a command .
3340	Clear configuration files .
3341	Returns the offset as a byte array .
3342	Extract token from token type .
3343	Acquires an access token from the resource provider .
3344	Copy the access token .
3345	Returns true if there is no more characters .
3346	Reads a line of terminators .
3347	Read a line from the buffer .
3348	Skip the number of bytes from the input stream .
3349	Skip n bytes .
3350	Ensures that the given offset is at the given offset .
3351	Merges all elements in the given array using the specified comparator .
3352	Swaps the elements of a swapper .
3353	Performs a parallel quick sort .
3354	MurmurHash MurmurHash3 .
3355	MurmurHash MurmurHash3 .
3356	Writes a byte buffer to the output stream .
3357	Truncate the given size .
3358	Sets the position of this file .
3359	Notifies the consumer that the consumer refresh metrics should be reported .
3360	Waits for all tasks to complete .
3361	Searches for matching fields .
3362	Returns a set of Compaction targets that have the same type .
3363	Removes all snapshots from the blob .
3364	Returns a hashCode for a given field .
3365	Checks if two fields are equal .
3366	Removes all referenced schemas .
3367	Called when an announcement is complete .
3368	Called when a cycle is completed .
3369	Read header tags .
3370	Extract the primary key from the given object .
3371	Clear all segments .
3372	Reads the ordinal values from an input stream .
3373	Returns the size of this bit set .
3374	Returns the field value for the row .
3375	Copies the contents of the given byte array to the given destination .
3376	Copy bytes from srcPos to dest
3377	Compares two byte arrays .
3378	Copy a sequence of bytes from srcPos to dest .
3379	Returns a copy of the specified byte array at the given position .
3380	Reads segments from input stream .
3381	Writes segments to the output stream .
3382	Ensures that the segment has capacity .
3383	Returns the position of the named field .
3384	Calculates the total number of buckets and returns the total number of buckets .
3385	Returns true if there is any collections in the given dataset .
3386	Generate the files for the given directory .
3387	Generate all files for the given directory .
3388	Checks if the given ordinal matches the given key .
3389	Returns the record key for an ordinal value .
3390	Creates a field path for a primary key .
3391	Creates a field path for a hash index .
3392	Create a FieldPath for a prefix .
3393	Puts an object into the cache .
3394	Initializes the size of the field .
3395	Returns true if the prefix contains the given key .
3396	Gets the change of a change .
3397	Adds a field to the filter .
3398	Returns a list of all schemas in the given collection .
3399	Initializes the defaults for the next major version .
3400	Returns the value at the given index .
3401	Find records matching the given field value .
3402	Find records matching the given type and field value .
3403	Sets the elements of the matched elements .
3404	Sets the element key paths .
3405	Calculates the index .
3406	Restores the state of the state from the last state .
3407	Run cycle .
3408	Removes the primary key index for the given key .
3409	Remove references from this object .
3410	Writes the blob header to the given stream .
3411	Calculate type metrics .
3412	Writes the field data .
3413	Writes a fixed length int to the byte buffer .
3414	Writes a fixed length to the byte buffer .
3415	Returns an ordinal value from the pool .
3416	Sorts the list .
3417	Returns the hash of the given key .
3418	Hashes a key .
3419	Resize the fixed length .
3420	Find free ordinal for given preferred ordinal .
3421	Prepare the pointer for writing .
3422	Compares a key with the given key .
3423	Grows the key array .
3424	Rehashes the previous data for a key .
3425	Returns an empty array with the specified size .
3426	Checks if the given field is equal to the given index .
3427	Find a match for a key
3428	Swap the current readStateHelper .
3429	Returns the size of the hash table size .
3430	Run a cycle cycle .
3431	Writes a snapshot .
3432	Writes the delta to the output stream .
3433	Add schema names to collection
3434	Normalize field path .
3435	Reindex the hash index .
3436	Finds the matches of the query .
3437	Triggers an async refresh with a random delay .
3438	Triggers an async refresh .
3439	Adds a type diff .
3440	Calculates the differences between all the types .
3441	Writes a long to the output stream .
3442	Writes an integer to the output stream .
3443	Writes a VInt to the given byte array .
3444	Read a VInt from an input stream .
3445	Read a VLong from an input stream .
3446	Add a view to the layout .
3447	Refresh the size of the loading views .
3448	Update the UI for the mode .
3449	Pull the pull event .
3450	Performs an over - scroll operation on the view .
3451	Adds a relationship to the given name .
3452	Adds the given facts to this rule .
3453	Returns a builder for the given rule class and action type .
3454	Creates a new rule builder .
3455	Returns a new builder with the specified type .
3456	Returns a new builder with the given result type .
3457	Creates a rule that matches the given value .
3458	Creates a new RuleBuilder that will be applied to this rule .
3459	Applies a new rule to the given action .
3460	Gets the instance of the given rule .
3461	Gets the annotated field .
3462	Gets the method annotated with the given annotation .
3463	Gets an annotation .
3464	Registers an audit rule .
3465	Updates the status of a rule .
3466	Gets the status of the rule status map .
3467	Returns a new builder with the given result type .
3468	Adds an action to the builder .
3469	Adds a new action to the builder .
3470	Resets the value .
3471	Returns a new RuleBuilder with the specified type .
3472	Returns a list of pojo rules .
3473	Read an empty line from the table .
3474	Converts a list of services to an array .
3475	Get the ports from the build configuration .
3476	Extract the list of port ports from config .
3477	Parse port mapping .
3478	Add port if not null .
3479	Removes the first port from the list .
3480	Adds missing ports to the service builder .
3481	Appends an image stream to the target .
3482	Checks if the given service port matches the given int .
3483	Converts a service name to a port
3484	Get service host and port
3485	Adds a value to the map .
3486	Merges the given map with the given values .
3487	Merge two maps .
3488	Puts all of the given map to the given map .
3489	Wait until a pod is ready .
3490	Validates the kubernetes string .
3491	Converts an entity to an item list .
3492	Gets the resource version .
3493	Returns true if the given pod is ready .
3494	Gets the current context .
3495	Checks if there is a route with the given name .
3496	Checks if a resource has a resource .
3497	Read fragment from file .
3498	Converts map of environment variables to a list of environment variables .
3499	Merges two resources .
3500	Merges the map with empty strings .
3501	Checks if a pod is local .
3502	Reads configuration from a file .
3503	Add port to map .
3504	Gets a JSON object as a JSON string .
3505	Returns the configuration for the given system ID .
3506	Returns the configuration configuration for the given ID .
3507	Download a file to a target
3508	Compares two strings .
3509	Blend the processor configuration with the given configuration .
3510	Look up a profile by name .
3511	Read profile from classpath .
3512	Read profiles from classpath .
3513	Find the YAML YAML YAML YAML file .
3514	Gets the meta infos profiles .
3515	Creates a list of profiles from an input stream .
3516	Returns the image pull policy .
3517	Returns true if the current configuration is open .
3518	Returns the replica count .
3519	Returns the first child element of the given element .
3520	Installs a template .
3521	Remove tag by name
3522	Apply a new namespace .
3523	Applies a project .
3524	Apply a project request .
3525	Gets namespace .
3526	Invoked when an error occurs .
3527	Adds the configuration to the builder .
3528	Enrich the metadata .
3529	Get environment variables .
3530	Convert duration to seconds .
3531	Parse duration from string .
3532	Scan files .
3533	Disable OpenShift features .
3534	Returns true if the given list of ingress rules for the given service .
3535	Parse the content of a stream .
3536	Creates a generator context .
3537	Extract the generator config .
3538	Creates an Enric context .
3539	Extract processor config .
3540	Returns the default icon .
3541	Copy app config files .
3542	Get a Properties object from a URL .
3543	Gets the Spring boot bootstrap version .
3544	Creates a list of service objects .
3545	Enrich enricers .
3546	Returns the raw configuration map .
3547	Build a flattened map from the source map .
3548	Extract the processor config .
3549	Gets a singleton template from the list of resources .
3550	Returns the date of the build date .
3551	Gets the value of a property .
3552	Returns an unmodifiable map .
3553	Prepare processors .
3554	Adds from the image to the builder .
3555	Gets the name based on the mode .
3556	Returns the name of the image .
3557	Gets the registry registry .
3558	Returns true if the configuration is online .
3559	Returns the external service URL for the given service name .
3560	Returns the value of the global property as a Boolean .
3561	Creates a new JEST client .
3562	Create internal node .
3563	Scan plugins .
3564	Parses a JSON string from a JSON string .
3565	Gets the balances balance balance .
3566	Creates a new PayPal payment resource from a JSON string .
3567	Performs a HTTP GET request .
3568	HTTP POST request
3569	Creates a VenmoConfiguration from a JSON object .
3570	Collect device data from fragment .
3571	Collect device data .
3572	Collect the pay device data from a fragment .
3573	Get PayPal client metadata
3574	Check if the signature is valid .
3575	Get a string value from a JSON object .
3576	Parses the PaymentMethod from JSON body .
3577	Returns the browser checkout configuration .
3578	Gets the browser configuration .
3579	Executes a GET request .
3580	Submits data to the server .
3581	Make a POST request .
3582	Starts a payment .
3583	Applies a local payment to the browser .
3584	Add listener .
3585	Removes a listener from the braint .
3586	Requests the billing agreement for a payment .
3587	Handle an activity result .
3588	Parse the response .
3589	Adds words to dictionary .
3590	Remove a word from the dictionary .
3591	Convert Korean tokens to a list of strings .
3592	Extract phrases from the given tokens .
3593	Detokenize a list of tokens .
3594	Fetches a buffer from a channel .
3595	Join nal units into buffer
3596	Join nal units into buffer
3597	Returns the profile for the given index .
3598	Normalize a set of taps .
3599	Read the next marker from the stream .
3600	Read the next marker from the buffer .
3601	Gets the maximum available frame .
3602	Modify the content of a file .
3603	Copy a file to a file .
3604	Gets the duration of the track .
3605	Convert a frame to a time value
3606	Convert a time value to a frame
3607	Calculates the edit value of the edited movie .
3608	Calculates the edited time in the movie box .
3609	Convert a movie frame to a QTicker
3610	Calculates a time player for a movie .
3611	Convert a timecode to a timecode frame
3612	Format a timecode track
3613	Calculates a 7 - bit integer .
3614	Sets the specified value at the specified index .
3615	Checks if this color space matches the input color space
3616	Returns the size of the specified component by the given size
3617	Creates a new MPP video .
3618	Read an integer from the buffer .
3619	Create a WAV header .
3620	Creates a WAVHeader from the given headers .
3621	Parses the decoderInfo from the data .
3622	Encode a message
3623	Reads the decoder marking the decoder
3624	Splits a movie between two TV frames .
3625	Decodes the given byte array using the specified buffer .
3626	Set the BigEndian flag .
3627	Dedulock two bits .
3628	Encodes a video frame .
3629	Encodes the length of the length of the specified length .
3630	Returns the length of an ebml value .
3631	Adds a packet to the stream .
3632	Reposition the file .
3633	Decodes a BABAC .
3634	Decodes a binary pass .
3635	Go ahead to next marker .
3636	Returns the sample frequency for an integer .
3637	Sets the plane on the plane .
3638	Creates a new block with the given data .
3639	Computes the coefficients of a block at the given index
3640	Completes the multiplication of a block .
3641	Concatenates two bits .
3642	Rewind a 32 - bit integer .
3643	Rewind a range of bits in a range .
3644	Seek to the next frame
3645	Retrieves the pixel buffer from the given buffer .
3646	Returns the gain change ID of a change change .
3647	Convert a byte array to an array of integers .
3648	Convert an array of bytes to a byte array .
3649	Converts the specified AudioFormat to a float buffer .
3650	Converts a float buffer to a PCM buffer .
3651	Interprets the given audio format into the output buffer
3652	Interprets the input audio format into output buffer
3653	Gets the size of the video track .
3654	Builds the map out of the box map .
3655	Builds a map for a specific size .
3656	Read a list of UL batches .
3657	Read a 32 - bit integer array from a ByteBuffer .
3658	Calculates the MVP prediction for a given value
3659	Encode a frame .
3660	Encode an IDRRRRRRRRR frame .
3661	Encodes a picture into a PFrame .
3662	Returns a list of supported codecs .
3663	Returns a list of supported tags .
3664	Adds a reference to the list .
3665	Removes all references from this queue .
3666	Flushes all references to the garbage collection .
3667	Load a library .
3668	Unpack library .
3669	Deletes all temporary files .
3670	Returns the default layout for the given number of channels .
3671	Gets a channel from a layout .
3672	Make a media packet .
3673	Returns information about the package version .
3674	Returns the default time base .
3675	Make a new Demuxer .
3676	Play a video from the specified filename
3677	Display a video at the given time .
3678	Creates a new VideoDescriptor with the given id .
3679	Prints an option to a stream .
3680	Registers a factory for the given protocol prefix .
3681	Generates a unique name for an object .
3682	Make a media resampler .
3683	Returns a list of supported video frames .
3684	Gets the supported video format .
3685	Gets the supported audio sample rates .
3686	Gets the supported audio formats .
3687	Gets the supported AudioChannelLayout .
3688	Sets a flag .
3689	Set a flag 2 .
3690	Get a decoder from the stream .
3691	Get a Demuxer
3692	Returns a collection of alluxer formats .
3693	Make a new filter graph .
3694	Get the type filter .
3695	Returns a new ByteBuffer at the specified offset .
3696	Make an AudioFrame from a given AudioFormat .
3697	Resample image to a picture .
3698	Validates the given image .
3699	Validates a media picture .
3700	Gets the filter graph .
3701	Get the metadata for this video .
3702	Gets the CPU architecture .
3703	Get the CPU architecture from a string .
3704	Returns the OS family for the given string .
3705	Returns the OS family for the given string .
3706	Play audio from a file
3707	Loads a library .
3708	Set the loaded library .
3709	Try to load a library .
3710	Initialize search paths .
3711	Check if a library is already loaded .
3712	Record a screenshot of the screen .
3713	Deletes the current thread .
3714	Returns a stream for the specified position
3715	Get the muxer
3716	Make a set of script transactions .
3717	Decodes the given string .
3718	Generate random seed .
3719	Get information about a transaction
3720	Get a list of transactions for a given address .
3721	Returns a list of transactions for a given address .
3722	Returns a list of block headers .
3723	Get block by signature
3724	Send a transaction .
3725	Sets the script for a given fee .
3726	Compiles a script .
3727	Writes a primitive array .
3728	Flush the output stream .
3729	Writes an object to the specified address .
3730	Reads a class .
3731	Writes an object to the output buffer .
3732	Set the mmF data
3733	Get the specificity of a class
3734	Resize memory .
3735	Removes a binary value .
3736	Writes a string .
3737	Sets the output stream .
3738	Creates a JSON configuration object for the given flag .
3739	Creates a structure for struct configuration .
3740	Calculates the size of an object
3741	Clear all cached objects .
3742	Retrieve an object from an input stream .
3743	Get an object input stream .
3744	Get an object from a byte array
3745	Returns a new instance of the specified output stream .
3746	Register cross platform class mapping .
3747	Gets the cp name for a given class .
3748	Writes an integer to the stream .
3749	Writes an integer to the stream .
3750	Writes an integer to the stream .
3751	Writes a primitive array .
3752	Writes an array of bytes to the buffer .
3753	Get the cached field information for the current class .
3754	Called when an object is written .
3755	Called when an object has been written .
3756	Get the serialization information for a given class
3757	Writes an array .
3758	Set the string to the buffer .
3759	Writes a primitive array to the stream .
3760	Called when a change has changed
3761	Snapshot changes .
3762	Registers an object at the given stream position .
3763	Writes an object to the output stream .
3764	Read an object from the input stream .
3765	Read bytes from storage .
3766	Read four bytes from the buffer
3767	Advances the number of bytes from the queue .
3768	Sets whether the thread pool is enabled .
3769	Starts embedded cassandra Cassandra .
3770	Clean data from Cassandra .
3771	Copy a resource from the database .
3772	Print the thread s threads .
3773	Checks to see if a node is available .
3774	Returns an empty subscriber state state .
3775	Returns a map of all op descriptors .
3776	Calculates the shape of the output .
3777	Returns true if the given condition evaluates to true .
3778	True if ndarray is true
3779	Returns true if the given condition is true .
3780	Returns true if the given condition is equal to the given dimension
3781	Applies the condition to the given shape
3782	Returns the first index of the first occurrence of the given condition
3783	Create a FlatProperties object .
3784	Convert a FlatProperties object to a FunctionProperties .
3785	Converts a collection of properties to a FlatBuffer .
3786	Sets the exception .
3787	Sets the exception if it is not null .
3788	Merges a list of coordinates .
3789	Partition the data set by the given size
3790	Convert an nnio type to an nd4j type .
3791	Shuts down the transport .
3792	Get the current device architecture
3793	Converts a column matrix to an image .
3794	Performs a pooling operation .
3795	Creates a compression descriptor .
3796	Splits a list of objects into a list of batches .
3797	Validates that all arrays have the same dimension
3798	Sets the op type
3799	Searches for a range of numbers in a range .
3800	Converts a collection of matrices into a flattened array .
3801	Computes the linear product products for a given tensor
3802	Creates a complex ndarray .
3803	Returns a complex value of a complex value .
3804	Creates a complex value for a complex value .
3805	Returns true if this instance should be replicated .
3806	Subroutine of two complex numbers
3807	Evaluates a complex number .
3808	Evaluates a complex number .
3809	Returns the negative number of complex numbers
3810	Returns the absolute value of a complex number .
3811	Parses a power number .
3812	Get context .
3813	Convenience method for binarization
3814	Sample a dataset .
3815	Gets memory footprint .
3816	Converts an exception to a string .
3817	Returns the simple hostname from the given full string .
3818	Convert a string array to a string .
3819	Converts a byte array to a hex string .
3820	Returns an array of strings from a delimited string .
3821	Splits a string into an array of strings .
3822	Splits a string into an array of strings .
3823	Find the next character in the given string .
3824	Escapes the given string .
3825	Joins a list of strings with the given separator .
3826	Converts a string to a camel case .
3827	Replaces all occurrences of the given pattern with the given replacement .
3828	Get stack trace .
3829	Invert a matrix .
3830	Support the subscript operator .
3831	Returns true if the operation is on the host .
3832	Returns true if the operation is on the device .
3833	Returns the shape information for the shape
3834	Returns the shape information for the shape
3835	Returns true if the shape is a vector .
3836	Get the order of an ndarray
3837	Returns the offset for the given dimension
3838	Converts an array of indices to an index .
3839	Get a short from the buffer .
3840	Allocate the data buffer .
3841	Copies a copy of the given buffer at the specified stride
3842	Gets a constant buffer .
3843	Returns the Kafka uri .
3844	Pars the power of an array
3845	Log an ndarray
3846	max k
3847	max
3848	Minimize a scalar
3849	Minimal function .
3850	Starts a new ndarray with the specified k ndarray .
3851	Examines an ndarray .
3852	Logp p1 .
3853	Prepare the bounds of the given shape
3854	Adjust the scheme to be used by the algorithm .
3855	Returns next iteration .
3856	Sets the A - F - F - F .
3857	Build allocation shape .
3858	Checks if the given name exists .
3859	Read data from an input stream .
3860	Checks the tail of the tail of the given device .
3861	Creates a INDArray from the npyPointer
3862	Creates an ndarray from a file .
3863	Allocate a pointer in the workspace .
3864	Attaches an object to the lock .
3865	Returns true if the server is started .
3866	Executes the given op .
3867	Flushes the queue .
3868	Returns an InputStream for the resource .
3869	Get the device id for a thread .
3870	Attaches a thread to the device .
3871	Returns the next device for the current thread .
3872	Gets the operating system name .
3873	Calculates the ARCH type .
3874	Publish an INDArray
3875	Starts the instrumentation .
3876	Creates a data buffer for the given pointer .
3877	Intercept the data type of an operation .
3878	Add two complex numbers .
3879	Process message .
3880	Average pooling operation .
3881	Depth - 1 - depth - 1 - depth - 1 depth - 1 .
3882	Resets the internal state .
3883	Returns the class of the given op .
3884	Allocate new ndarray .
3885	Gets the shape .
3886	Evaluate this SDVariable
3887	Compress a double array
3888	Converts a complex vector to a complex array .
3889	Center the shape
3890	Truncate the ndarray
3891	Returns a new ndarray with the given shape
3892	Returns the index of the first occurrence of the ndarray .
3893	Broadcast the given ndarray
3894	This method is used to process a single vector .
3895	Calculates gamma function .
3896	Calculates the square root of a square .
3897	Gets the root of a BigDecimal .
3898	Calculates the root of a BigDecimal root .
3899	Expands the given number of values .
3900	Computes the expolution of the given number .
3901	Returns the power of two BigDecimal .
3902	Wrap a BigDecimal .
3903	Computes the cosine of the given number .
3904	Returns the tan value of the given number .
3905	Computes the cosh .
3906	Computes the cosine .
3907	Calculates the tanh value of a given number .
3908	Calculates the arcs in an integer .
3909	Calculates the absolute value of a complex number .
3910	Computes gamma function .
3911	Converts the magnitude of the magnitude of the magnitude of the magnitude of the magnitude of the magnitude of the magnitude of the magnitude of the magnitude of the magnitude of the magnitude of the magnitude of the magnitude of the magnitude of the magnitude of the results .
3912	Scales a BigDecimal .
3913	Scales a BigDecimal precision .
3914	Convert an integer to a precond value .
3915	Put a function for the given id
3916	Get the input parameters for a given function .
3917	Update an INDArray for the given variable name
3918	Put shape for a given variable name .
3919	Associates an SDVariable with the given SDVariable
3920	Gets the property for a given name .
3921	Add a property for a function
3922	Adds an outgoing arguments to the function .
3923	Add arguments for a function
3924	Determines if the given function has incoming arguments .
3925	Evaluate the input variables .
3926	Create a new variable with the specified shape
3927	Multiply the values of each item
3928	Multiplies a tensor with the given input
3929	Remove an argument from the function .
3930	Sets the gradients for a given variable name
3931	Average pooling operation
3932	Creates a gruver with the given parameters
3933	Executes the given list of differences
3934	Creates a While Statement
3935	Execute a function
3936	Executes the given function with the given name .
3937	Execute and return the result
3938	Add a variable to the shape holder .
3939	Allocates memory from the given kind .
3940	Returns the length of the given data type .
3941	Returns the DType identifying the given allocation mode .
3942	Gets the type from the context .
3943	Gets the op number by name .
3944	Destroy all workspaces .
3945	Print all assignments for the current thread .
3946	Convenience method for trims
3947	A convenience method to receive a ndarray
3948	Opens the accumulation operation
3949	Decode an encoded array .
3950	Gets the node name .
3951	Performs the operation on the specified dimension
3952	Asserts that all workspaces are open .
3953	Returns the negative log likelihood of the given labels
3954	Requests a TO tick .
3955	Tries to ask to see if it is available .
3956	Release the current state of this object
3957	Gets the current access state .
3958	Build environment .
3959	Send a message to the clipboard
3960	Initialize the dataset from the list .
3961	Initialize host threads .
3962	Get device pointer
3963	This method is used to synchronize the host data
3964	Applies the updater to the history .
3965	Wait until the allocated point is ready .
3966	Creates an index from the given index .
3967	Gets the properties for this function .
3968	Checks if there are placeholders .
3969	Computes the difference between two variables .
3970	Format an ndarray
3971	Imports a graph to the graph .
3972	Convert a complex ndarray to a blob
3973	Load a complex object from a blob .
3974	Saves a complex ndarray .
3975	Copy the real vector to the given array
3976	Copy the imaginary matrix to the given array
3977	Returns the epsilon difference between two numbers .
3978	Assigns the values of this matrix to the given value .
3979	Returns the rows at the given indices
3980	Set the ndarray at the given row
3981	Add a column to the matrix
3982	Subroutine to subclasses
3983	Add a new ndarray to the ndarray
3984	Subroutine to sub - arrays
3985	Add a complex vector .
3986	Assigns a value to a complex array .
3987	Returns an array containing the elements of this matrix .
3988	Returns the eigenvalues of a matrix
3989	Returns the eigenvalues of A and B
3990	Returns the maximum element of the complex ndarray .
3991	Copy the contents of two complex arrays .
3992	Scales a scalar
3993	This method is used to process a Distrammar message .
3994	Returns the number of nanoseconds
3995	Performs the reduction .
3996	Returns a no - arg constructor for the given class .
3997	Gets the constructor for the given class .
3998	Invokes a method handle .
3999	Gets an annotation from an array of annotations .
4000	Gets the declared annotation of the given class .
4001	Checks if the given class is declared in the given class .
4002	Creates a proxy .
4003	Loads an entity from the context .
4004	Save entity .
4005	Creates a new memcache service .
4006	Gets the metadata for the given kind .
4007	Queries keys - only keys .
4008	Queries a hybrid query .
4009	Performs normal query .
4010	Query for a projection query
4011	Query count .
4012	Partition the iterator with the given chunk size .
4013	Loads values from the given iterator .
4014	Formats a message .
4015	Create a key from a pojo .
4016	Compares two keys .
4017	Creates a Key from raw data .
4018	Convert a key to a key .
4019	Get the kind of the given class .
4020	Returns true if the type parameters are missing .
4021	Returns true if the given subtype is a super type .
4022	Returns the exact direct direct types of the given type .
4023	Capture a type .
4024	Returns a translator for the given type .
4025	Returns the populator for the given class .
4026	Returns whether the given class is an index .
4027	Determine if the given method is annotated .
4028	Returns all declared properties of a class .
4029	Gets the key metadata .
4030	Gets the value associated with a key .
4031	Executes the task .
4032	Fetch all pending items from the database .
4033	Add discriminators .
4034	Register a translator .
4035	Returns the type of the given collection type .
4036	Returns the type of map key .
4037	Creates a new forward path .
4038	Returns the final path .
4039	Returns the path of this node .
4040	Returns the depth of this path .
4041	Put all entries in the cache .
4042	Empty collection .
4043	Cache the keys in the cache .
4044	Fetch all values from the cache .
4045	Returns the keys of the given collection of buckets .
4046	Find all key fields for a class .
4047	Sets the key .
4048	Sets the id of a pojo .
4049	Returns the raw key of the parent meta data .
4050	Registers subclasses .
4051	Returns true if two types are common .
4052	Transform the owner type of the given type .
4053	Gets the annotation for the given type .
4054	Adds all values from another session .
4055	Load a key from a key .
4056	Execute the next round .
4057	Translates result from raw result .
4058	Fetches the specified keys .
4059	Loads an entity .
4060	Creates a raw key .
4061	Returns raw key .
4062	Gets the id value for the given key .
4063	Converts a string to a Cloud StorageKey .
4064	Creates a transactionless transaction .
4065	Creates a new transaction .
4066	Performs a transactional transaction .
4067	Returns true if the given condition matches the given conditions .
4068	Returns an object that can be used in the context .
4069	Returns an async datastore .
4070	Gets the metadata for the given entity .
4071	Allocates a new key range .
4072	Opens a new object .
4073	Close the context .
4074	Converts the list of indices to an index .
4075	Creates a new reference .
4076	Retrieves an object from the cache .
4077	Add a value to the cache .
4078	Returns true if the future is complete .
4079	Returns an array of IF conditions for the given field .
4080	Called when the engine has finished .
4081	Gets the container for the given type .
4082	Get Stat for given kind
4083	Unwraps the given exception .
4084	Get a translator for a type key .
4085	Returns a translator for the given class .
4086	Creates a translator for the given type .
4087	Sets the value of the property .
4088	Gets the value of a property from the container .
4089	Sets the value of a property .
4090	Saves the property .
4091	Gets value .
4092	Writes extended extensions .
4093	Writes the content category .
4094	Writes the content of a list of categories .
4095	Process the given snippet .
4096	Returns an iterable over all bids for the given response .
4097	Gets the bid with the given id .
4098	Updates the bids in the given response .
4099	Removes all bids matching the given filter .
4100	Returns an iterable that matches the specified filter .
4101	Read extensions .
4102	Returns true if the token is empty .
4103	Registers an extended reader for the given message type .
4104	Registers a custom writer for the given class .
4105	Extracts the bidi fields from a snippet .
4106	Sets the fields for the specific field .
4107	Updates the given list of objects using the given updater .
4108	Returns a list of objects that match the given filter .
4109	Returns the current name of the current JsonParser .
4110	Start an object .
4111	Start an array .
4112	Peek next token
4113	Writes a field to a JSON stream .
4114	Writes a list of strings to a JsonGenerator .
4115	Writes a list of integers to a JsonGenerator .
4116	Writes a list of long fields to a JsonGenerator .
4117	Writes a list of enums to a JSON stream .
4118	Resolves a URL to a URL .
4119	Fixes a pure query target URL .
4120	Gets host segments .
4121	Get host name .
4122	Gets the page from url .
4123	Load a list from storm conf
4124	Extract configuration element from configuration .
4125	Returns the protocol for the given URL .
4126	Generates a WAR - info message for the given fields .
4127	Extracts refresh URL from a value .
4128	Gets the metadata for an outlink .
4129	Filter the metadata .
4130	Add a URL to the scheduled URL .
4131	clean up field name
4132	Get charset name from BOM .
4133	Extract charset from text .
4134	Extract charset from meta data .
4135	Checks to see if the message is at least one byte .
4136	Sets a value for a given key .
4137	Gets the first value of the given metadata .
4138	Convert cookies to a list of cookies .
4139	Checks if the domain domain is a domain domain .
4140	Returns the cache key for the given URL .
4141	Get the robot rules from the cache .
4142	Extract meta tags from document .
4143	Ack for ack
4144	Returns true if the given URL matches the given metadata .
4145	Removes all rules from the URL .
4146	Read rules from a file .
4147	Process query elements .
4148	Creates a new navigation filters .
4149	Adds a record format to the output stream .
4150	Returns the number of queries that should be used for queries .
4151	Checks whether the query should be triggered .
4152	Creates a ParseFilters from storm configuration .
4153	Append a new Node .
4154	Ignorable whitespace .
4155	Add processing instruction .
4156	Processes a comment .
4157	Called when a character is encountered .
4158	This method is called to start a DTD document .
4159	This method is called by the start of the current element .
4160	Returns the URL for the given tuple .
4161	Trims the text from maxLength .
4162	Checks if the given status is a duration .
4163	Creates a new URL filters .
4164	Set the number of items in the wheel .
4165	Resolves the given size and state to the given MeasureSpec .
4166	Sets the drawable drawable .
4167	Set the angle of the wheel .
4168	Updates the selected position .
4169	Invalidate the wheel item drawable .
4170	Converts a raw position to a wheel position .
4171	Updates the angular velocity .
4172	Get the contrast color from a map
4173	Clamp the given value to the given upper limit .
4174	Writes the coverage data .
4175	Returns a copy of this iterator .
4176	Sets the string to an array .
4177	Makes an array of Strings .
4178	Make an array of characters from a string .
4179	Creates a new ArrayChar from a String array .
4180	Convert a string array to a char array .
4181	Returns the offset of the forecast time interval
4182	Show this window .
4183	Show the window if it is not visible .
4184	Creates a size estimate for a grid .
4185	Main method for testing .
4186	Returns a new unit name .
4187	Returns a new unit name .
4188	Make plural plural .
4189	Checks if the given date is included in this range .
4190	Returns a new date range intersect with the specified range .
4191	Extend the range of this range .
4192	Extend the given date .
4193	Sets the start date .
4194	Sets the end date .
4195	Sets the duration .
4196	Calculates the duration of the resolution .
4197	Add a new MapBean
4198	Called when a parse error occurs .
4199	Gets the name of the network .
4200	Returns the parameters as a string .
4201	Creates a new DSPD file from the given raw data .
4202	Computes the bounds of a bounding box .
4203	Synchronize the UI .
4204	Computes the chunking chunks for the given dimension .
4205	Register a watcher .
4206	Process events .
4207	Sets the reference date .
4208	Opens a Feature Dataset
4209	Wrap a dataset
4210	Checks if a feature type is ok
4211	Find feature type .
4212	Write catalog .
4213	Render catalog .
4214	Gets the CSS CSS .
4215	Get user head .
4216	Creates a dynamic catalog for the given path .
4217	Add global services to the catalog
4218	Initializes the session .
4219	Get content as a string .
4220	Sets the content of the given URL .
4221	Get front page .
4222	Determines the catalog .
4223	Extract the geospatial geometry from a group
4224	Gets a single dataset by name .
4225	Returns true if two vertices are equal .
4226	Creates a new unit id .
4227	Parse an attribute .
4228	Reads the top level of the NEX REX header .
4229	Convert two shorts into an integer .
4230	Convert a byte array to an integer .
4231	Calculates a Date from the given number of milliseconds .
4232	Make sure that the given name is valid in UTF - 8 .
4233	Returns true if the name of the given name is a valid netcdfcdfc3cdfc3c3D file name .
4234	Open the ncdfdf file .
4235	Read record data from a section .
4236	Read the data subset of a record .
4237	Fill non - record variables .
4238	Make a TimeStruct for a given value .
4239	Creates a new time struct .
4240	Checks if the given string is a time template .
4241	Adds a function to the server .
4242	Returns a BoolFunction with the given name .
4243	Get a BTFFunction by name .
4244	Load a new server function .
4245	Returns the level name for the given grid .
4246	Get the level description for a grid .
4247	Gets the level unit .
4248	Returns the projection type for a given grid .
4249	Returns true if the given grid is a vertical coordinate .
4250	Determine if the given grid is a layer .
4251	Create a coordinate transform from a dataset .
4252	Create a dummy transformation variable for a coordinate .
4253	Creates a projection for the transformation .
4254	Main method for testing .
4255	Saves the data table .
4256	Returns a new Chronology with the given time zone .
4257	Write count .
4258	Writes an atomic array with the given values .
4259	Write bytes to the output stream .
4260	Writes a number of bytes to the output stream .
4261	Called when the grid is ready .
4262	Converts a DateRange to a CalendarRange .
4263	Creates a GCD2G from the given data .
4264	Parse the given text using DDS .
4265	Parse the text using DAS .
4266	Swap grid header .
4267	Read a grid .
4268	Main method for testing .
4269	Write a constraint .
4270	Writes the headers to the file .
4271	Writes the operations .
4272	Read all files from a directory .
4273	Scans log file .
4274	Get the grid type for a grid .
4275	Returns the grid record with the given parameter .
4276	Reads a matrix from a word
4277	Unpack data .
4278	Retrieves the grid grid .
4279	Unpack data data .
4280	Unpack Grib2 data
4281	Print grid grids .
4282	Read next byte .
4283	Creates a CalendarDate from the given Calendar .
4284	Creates a CalendarDate from a java . util . Date object .
4285	Creates a CalendarDate from the given milliseconds .
4286	Returns a new CalendarDate from the given Calendar .
4287	Parses an udunit string into a calendar .
4288	Returns the difference between two dates .
4289	Creates a atomic variable at the given data cursor .
4290	Setup the download parameters .
4291	Escape a string .
4292	Creates a list of slices from a list of ranges
4293	Unwrap a file .
4294	Returns true if the specified dimension is a variable length .
4295	Compute the effective shape .
4296	Add a date .
4297	Multiply a Scaled Unit .
4298	Divide the given unit .
4299	Divide a Scaled Unit .
4300	Convenience method .
4301	Converts this unit into a derived unit .
4302	Converts the input value to a derived unit .
4303	Converts a derived unit from a derived unit .
4304	Returns the canonical string representation of this unit .
4305	Read data from a section .
4306	Read data from the data set .
4307	Flattens a list of stations and returns a list of stations .
4308	Finds a service by name .
4309	Returns the gate size for the given data type .
4310	Returns the start gate of the given data type .
4311	Returns the number of gateways .
4312	Write XML document to output stream .
4313	Computes the preferred layout for this component .
4314	Checks if the given dataset is a descendant of the given path .
4315	Generate a catalog resolver .
4316	Returns a CalendarDateUnit for the given calendar name .
4317	Returns a new CalendarDateUnit with the given Calendar .
4318	Construct a new CalendarUnit from the given Calendar .
4319	Returns the offset from the given date field .
4320	Make a CalendarDate based on the given value .
4321	Gets the quantity dimension .
4322	Determine if a file is a valid XML file .
4323	Reads a map of station names from a file .
4324	Read data from a section .
4325	Read an array of integers into an array of integers .
4326	Read data from a variable .
4327	Calculates the elevation of the given angle .
4328	Calculate step .
4329	Calculates the degrees of the specified range .
4330	Calculates the value of the parameter
4331	Calculate ny for nyquist
4332	Make a vertical transform for a dataset
4333	Sets the debug flags .
4334	Set index mode .
4335	Reads the data in the grid .
4336	Checks to see if there is a problem with the given level
4337	Gets the LatLon bounding box .
4338	Finalize the structure .
4339	Adds tabs to a string buffer .
4340	Pads a string to a string .
4341	Pads an integer to an integer .
4342	Pad a long to a long .
4343	Format a single byte size .
4344	Print double .
4345	Display a double value .
4346	Returns a string representation of the shape
4347	Finishes the next slice .
4348	Returns a string representation of this constraint .
4349	Compose a slice
4350	Maps an index to the target slice
4351	Dumps the bytes in the buffer to a byte buffer .
4352	Dump data into a byte buffer .
4353	Gets the type by name .
4354	Gets the type of the ellipsoid .
4355	Decodes a VLenColCollections into an array of VariableData objects .
4356	Decode the primitive data for a primitive type
4357	Extract URLs from a URL .
4358	Get the content of a URL .
4359	Filter the input stream
4360	Reads data from a variable .
4361	Adds all of the given attributes to this set .
4362	Remove an attribute .
4363	Remove attribute .
4364	Gets the total number of times .
4365	Add an ActionSourceListener for this action .
4366	Returns a date from a string .
4367	Gets the standard date from the given text .
4368	Gets the date .
4369	Returns the date .
4370	Converts a value to a Date object .
4371	Returns the value of the given date .
4372	Converts a double value to a standard date string .
4373	Get the grid spacing .
4374	Add the dimensions to the network
4375	Creates a coordinate axis .
4376	Calculates the projection for a grid .
4377	Adds GDS parameters to a variable .
4378	Adds a coordinate system to the network .
4379	Calculate the location of the coordinate system
4380	Make a new Stereo object from the grid .
4381	Calculate the Mercator .
4382	Calculate the sub - geometries of the geometry .
4383	Sets the DY coordinate of the start point .
4384	Read a dataset .
4385	Read a dataset .
4386	Read metadata from a URL .
4387	Gets the level type 1 . 1
4388	Returns true if the file is valid .
4389	Writes a byte array to the stream .
4390	Sets clear name .
4391	Returns the coordinate name for a given axis .
4392	Gets the coordinate of the axis .
4393	Builds an XML response .
4394	Build DapException .
4395	Break levels from a dataset .
4396	Calculates the coordinate axis for the given values .
4397	Create new variables .
4398	Converts a reference to a time coordinate axis .
4399	Cut a float value .
4400	Main entry point for testing
4401	Enhances the given ncdf dataset .
4402	Open a file
4403	Clear all coordinate systems
4404	Returns the coordinate axis with the given type .
4405	Find the coordinate axis with the full name
4406	Find a coordinate system by its name .
4407	Find a coordinate transform by name .
4408	Determines if the specified enhance mode is needed .
4409	Sets the values of a variable
4410	Sets the values of a variable .
4411	Returns an array containing the given data type and string values .
4412	Returns the index of this matrix .
4413	Gets an existing file .
4414	Returns a list of features that intersect the specified bounding box .
4415	Discretize the ndarray
4416	Adds all metadata to the given thriftMetadata .
4417	Adds a document to the document .
4418	Removes the document with the specified type .
4419	Returns the number of bytes in the given buffer .
4420	Returns true if the given netdf file is a valid tile
4421	Add a dataset to the dataset .
4422	Splits a convention name into a list of names .
4423	Builds a string attribute for the given convention .
4424	Builds the coordinate system for the given dataset .
4425	Find coordinate axes .
4426	Find the coordinate system for each coordinate .
4427	Make the coordinate system .
4428	Calculates the optimal coordinate system for the given dataset .
4429	Determine if a variable is a coordinate axis .
4430	Add a coordinate for a given dimension .
4431	Subset the dataset from a dataset .
4432	Removes all datasets from the dataset .
4433	Recursively mark as deleted .
4434	delete a dataset
4435	Initialize the HTTP request .
4436	Counts the counter for the given name .
4437	Add a new name and symbol .
4438	Compares two column row .
4439	Compares two boolean values .
4440	Returns the group scope .
4441	Pass the XML attribute map .
4442	Returns true if the given time range is valid .
4443	Returns true if there are more elements in the slice .
4444	Registers a class with the given name .
4445	Registers a DSP .
4446	Returns true if the specified class is registered .
4447	Unregisters the specified DSP class .
4448	Creates a new Grib2 instance .
4449	Calculates the size of the forecast time interval
4450	Returns the offset of the forecast time interval .
4451	Returns the Vertices type for the given code .
4452	Finalize the DAP node .
4453	Sorts the DapNode .
4454	Gets the raf file .
4455	Find a variable with the given attribute name .
4456	Find a variable with the given attribute name and value .
4457	Returns the name of a variable with the given attribute value .
4458	Find a variable with the given attribute name .
4459	Returns the nested structure of a structure .
4460	Returns true if the dataset is a structured record structure .
4461	Get the value of a global attribute .
4462	Get the feature type from a dataset .
4463	Get a variable name from a dataset .
4464	Returns the coordinate value at the specified position .
4465	Convenient method to connect to a long .
4466	Returns the coordinates of this coordinate .
4467	Calculates a section of a section of a section .
4468	Returns the index of the closest point in the given range .
4469	Returns the name of this node .
4470	Add an action to the menu
4471	Returns a match for a given path .
4472	Main method for testing .
4473	Returns the index of the first occurrence of the specified range .
4474	Adds a picture to the cache .
4475	Report cache .
4476	Stop background loading
4477	This method stops the background loader if it is already in the background
4478	HTTP GET method
4479	Creates a new HTTP method .
4480	Returns a random float value .
4481	Returns the next count .
4482	This method is used to read data .
4483	Gets the provider for the given URI .
4484	Reads the stations table .
4485	Returns the index of the element at the given group .
4486	Remove a data variable .
4487	Converts the height of a hgt2 height to a metric
4488	This method is called when the data is read .
4489	Set the number of colors
4490	Calculates the transform for the specified bounds .
4491	Converts a URI to an auth scope .
4492	Called when the grid has finished .
4493	Checks if the two factors are reciprocal .
4494	Get a directory from a directory .
4495	Returns the index of the first occurrence of the given element .
4496	Read metadata from a dataset .
4497	Read metadata content .
4498	Adds metadata to the catalog .
4499	Validate the catalog content .
4500	Read catalog configuration element .
4501	Read a dataset source element .
4502	Read a dataset .
4503	Read a dataset filter element .
4504	Read result service .
4505	Creates an XML element .
4506	Create a XML document source element .
4507	Create a dataset element .
4508	Create a XML ElementFilter element .
4509	Creates an XML element .
4510	Returns true if the given flag is set .
4511	Constructs a menu from a JMenu .
4512	Add menu to menu
4513	Adds parameters to the table .
4514	Parse the parameters from a word .
4515	Get a parameter by name
4516	Read contents from an input stream .
4517	Read bytes from input stream .
4518	Replaces the file template with the given number of files .
4519	Set the station information for this station .
4520	Accepts a new edit value .
4521	Show the format information for the given JFormatter .
4522	Gets bitmap .
4523	Sets the NCF file .
4524	Sets the debug flags .
4525	Parse the name of a name .
4526	Checks if a given structure is a group .
4527	Get the length of the netcdfc variable
4528	Gets shared dimension .
4529	Constructs a list of dimensions from an array of dimensions .
4530	Returns true if the given type is an unsigned integer .
4531	This method reads data from a server .
4532	Get an Image
4533	Get an image
4534	Creates a cursor with the specified name .
4535	Read a fill value .
4536	Reads a fill value from the given position in the input stream .
4537	Read a data fill .
4538	Creates a new primitive array for the given data type .
4539	Convert a byte array to a char array .
4540	Convert a char array to a byte array .
4541	Convert a byte array to a char array .
4542	Read a section from a section
4543	This method is used to create an array of data structures for the given section .
4544	Get a String from a member .
4545	Gets the Structure object at the given index .
4546	Override this method to get an ArrayArray from a StructureMember .
4547	Recompute the members of a variable .
4548	Adds dimensions to the network .
4549	Create a Crawlable Dataset .
4550	Normalize a path .
4551	Adds an explicit dataset to the cache .
4552	Add a dataset scan .
4553	Finish the scan .
4554	Make a list of datasets .
4555	Get the typical dataset
4556	Make a dataset .
4557	put a dataset
4558	Adds a point to this point .
4559	Gets the upper bound point .
4560	Get the lower lower lower lower case .
4561	Validates the configuration .
4562	Returns true if this dataset matches the given dataset .
4563	Adds all station points from a dataset .
4564	Parse a constraint .
4565	Evaluate the clauses .
4566	Prints a constraint .
4567	Returns true if the given ODF file is valid .
4568	Set shared dimensions .
4569	Check if there is no more dimensions
4570	Searches for a group with the given name .
4571	Reads the content of an Xlink .
4572	Returns the standard URI for this dataset .
4573	Sets the projection .
4574	Add a new layout component .
4575	Invalidates the layout of the specified container .
4576	Remove a layout component .
4577	Returns the minimum layout size for a given parent .
4578	Layout a container into a container .
4579	Determines if a coordinate system is a radial coordinate system .
4580	Get the maximum radius of meters
4581	Open a URL .
4582	Convert a geographic latitude to a latitude .
4583	Converts the given latitude to Earth .
4584	Calculates the degrees of the given lamda points .
4585	Convert a scan geometry to a sweep angle .
4586	Converts the sweep angle of sweep angle to a scan .
4587	Sets the coordinates of the runtime .
4588	Writes a point dataset to a file .
4589	Rewrite a point dataset .
4590	Gets an ArraySequence from a member .
4591	Gets the full name of the parent .
4592	Gets the unique identifier .
4593	Gets access for a given service type
4594	Find a dataset by name
4595	Gets the catalog .
4596	Get the metadata of the catalog
4597	Find a service by name .
4598	Gets the variables for a vocabulary .
4599	Find all catalog references in a dataset
4600	Escape the given path .
4601	Extracts a single shape from an array of dimensions
4602	Extract an interpolation from an array .
4603	Computes the rho of a given latitude .
4604	Get detail info .
4605	Creates a structure from the specified parameters .
4606	Create a variable for missing values .
4607	Creates a variable variable from the parameters .
4608	Add global attributes .
4609	Gets the size of the stnable variable .
4610	Gets the D1D array .
4611	Gets the global state of a transition .
4612	Checks to see if there is a syntax error .
4613	Prints the stack to the output .
4614	Read DMR data .
4615	Read an error message .
4616	Read data from the databream .
4617	Reads the header .
4618	Converts ISO 8601 string to Date
4619	Read a table from a URL string .
4620	Transforms a group into a target group
4621	Gets the stn file .
4622	Reads the data from the location file .
4623	Returns the index of the start of the given index .
4624	Returns the end of the index .
4625	Creates a collection of runtime files .
4626	Set the edit value
4627	Returns the data type for the given format .
4628	Converts an EF coordinate to a linear coordinate .
4629	Converts a unit to a unit .
4630	Clean up a name from a name .
4631	Returns true if unit is unitless
4632	Factory method for creating note notes .
4633	Returns a variable id for a note note .
4634	Parse DAS data .
4635	Searches for a given name .
4636	Find data for a dds .
4637	Finds a child by index
4638	Gets the parent group .
4639	Returns the dimension at the specified index .
4640	Returns the index of the specified dimension .
4641	Gets the units .
4642	Returns the shape as a section .
4643	Creates a new slice with the specified dimension .
4644	Sets the enum type .
4645	Reads a range of ranges .
4646	Read a scalar string .
4647	Reads the data from the proxy .
4648	Reads an array of data from a section .
4649	Write CDL document .
4650	Returns a string representation of this variable .
4651	Sets the data type .
4652	Sets the dimensions of the shape .
4653	Resets the shape .
4654	Set the dimensions of this group .
4655	Resets the dimensions .
4656	Sets the dimension at the specified index .
4657	Sets the cached data .
4658	Returns a list of dimensions
4659	Set the bounding box
4660	Finish all vertices .
4661	Returns all datasets in this dataset .
4662	Returns true if the given path matches the extension .
4663	Open a CDM document .
4664	Build the DMR dataset .
4665	Recursive method to recursively recursively recursively .
4666	Builds the dimensions of a list of dimensions .
4667	Finds the enum type for the given varen enum .
4668	Convert a list of dimension to a list of CoreDimensions
4669	Scans through the given file .
4670	Processes Bufrr .
4671	Perform a POST request .
4672	Get the transformation .
4673	Determines if the current screen is rotated .
4674	Returns the map area of the map area .
4675	Converts a world coordinate to a screen .
4676	Pan to the map .
4677	Zoom the rectangle
4678	Calculate the navigation from the bounding box
4679	Add listener .
4680	Remove a listener
4681	Send an event to all registered listeners .
4682	Send an event object to all listeners .
4683	Print a command .
4684	Prints a command line .
4685	Writes a variable representation of a variable .
4686	Writes the data section of a variable .
4687	Print a structure data structure .
4688	Print an array .
4689	Print an array .
4690	Writes the ncML file to the given writer .
4691	Read an attribute .
4692	Adds a parameter to the coordinate matrix .
4693	Main method for testing .
4694	Read a list of atoms from a list of basetype
4695	Returns true if the given record is positive .
4696	Returns true if this unit is compatible with this unit .
4697	Create a label for the given quantity ID .
4698	Set bit offset .
4699	Converts a number of bits to an unsigned integer .
4700	Convert a bit integer to a UUID .
4701	Open a connection .
4702	Get DAS connection .
4703	Gets the DDS .
4704	Returns the complete CE .
4705	Converts the projection point to LatLng .
4706	This method is used to create a dataset catalog catalog catalog
4707	Convert a DateRange to a DateRange
4708	Determine if the file is valid .
4709	Handles the observation information .
4710	Handle sensor information .
4711	Read the root element .
4712	Removes characters from a string .
4713	Convert a string to a string .
4714	Escape the given string .
4715	Unescape URL query string .
4716	Decode backslash .
4717	Encode a string .
4718	Add features for the network .
4719	Swaps a short at the given offset .
4720	Swaps an int from a byte array at the given offset .
4721	Swaps a double value at the specified offset .
4722	Swap two float bits .
4723	Swap two double values .
4724	Convert a short to a byte array .
4725	Convert an integer to a byte array .
4726	Convert a long to a byte array .
4727	Creates a subset of this transformation .
4728	Writes the last modified XML document .
4729	Calculates the coefficients of a vector .
4730	Start XML .
4731	Writes the features .
4732	Add levels to the grid
4733	Adds the dimensions to the network .
4734	Adds the levels to the output file .
4735	Finds the coordinate transform for a coordinate .
4736	Returns the index of the highest level .
4737	Exit timer .
4738	Gets the file .
4739	Gets the file or cache if it exists .
4740	Show the cache files
4741	Removes all files from a directory .
4742	Calculates the bearing between two points .
4743	Calculates the bearing between two points .
4744	Main method for testing
4745	Finds a point in the given Earth .
4746	Finds a point with the given distance from the given point .
4747	Finds a point in the given latitude and returns the location of the point .
4748	Load a picture in the background thread .
4749	Load a picture .
4750	Loads the source picture .
4751	Stop loading from the cache
4752	Checks if the source is not already loaded .
4753	Get the size of the image
4754	Sets the source image
4755	Returns the standard URI for this dataset .
4756	Make an association .
4757	Transfer information from another list
4758	Count the number of bits in this data descriptor .
4759	Compare two DataDescriptors
4760	Loads the DBase header .
4761	Loads data from the stream .
4762	Returns the field with the given name .
4763	Gets a double field by name .
4764	Gets a string by name .
4765	Returns a boolean field by name .
4766	Returns the name of the field .
4767	Returns an array of field names .
4768	Prints Dbase schema .
4769	Gets attributes .
4770	Sets the specified attribute .
4771	Remove an attribute .
4772	Gets the group .
4773	Returns the parent node of this node .
4774	Gets escaped name .
4775	Returns the path of the container .
4776	Returns the path of this node .
4777	Compute the FQN name for this node .
4778	Returns true if this node is top level .
4779	Build the DAP response .
4780	Put a new bean collection .
4781	Get a List from a key
4782	Gets an object from the preferences .
4783	Read data from a file .
4784	Prints the constraints for this DSP dataset .
4785	Print a compound instance
4786	Writes an element to a String .
4787	Writes the element to a file .
4788	Writes an XML element to the output stream .
4789	Writes an element to a Writer .
4790	Create an XML element .
4791	This method converts a coordinate to a coordinate matrix .
4792	Get an array of integer values from an attribute .
4793	Create a new Unit
4794	Creates a unit name .
4795	Base unit db .
4796	Creates a unit db .
4797	Gets the SI unit .
4798	Searches for the coordinate of the target interval .
4799	Finds the closest point in the axis .
4800	Subtracts the values of the axis in the range .
4801	Open a feature dataset .
4802	Open a feature dataset .
4803	Adds a dataset to a dataset .
4804	Read data from a file .
4805	Constructs a URI from a set of parts .
4806	Convert a string to canonical canonical form .
4807	Normalize units .
4808	Compile the dataset .
4809	Close the metadata .
4810	Returns the value associated with the specified key .
4811	Adds an element to the cache .
4812	Gets the date .
4813	Print XML attributes .
4814	Print an XML attribute .
4815	Returns true if the given attribute is a special attribute .
4816	Prints the dimensions of a variable .
4817	Checks if a file is a valid area .
4818	Set area attributes .
4819	Set the navigation block attribute .
4820	Gets the calculate type .
4821	Sets attribute attributes .
4822	Find the table coordinates for a dataset .
4823	Returns the coordinate name for the given axis .
4824	Returns the coordinate axis by the given type .
4825	Finds the coordinate axis by the given type .
4826	Gets the dimension by the given type .
4827	Find the best coordinate system for the given dataset .
4828	Searches for dependent axis axis .
4829	Gets the variable at the given row .
4830	Deserialize a single byte stream .
4831	Read a marker .
4832	Writes a marker .
4833	Evaluate SAXError .
4834	Creates a dataset .
4835	Main method for testing
4836	get a java array from a member
4837	Gets the parameter list .
4838	Sets the stnations .
4839	Set the selected station
4840	Redraw the panel .
4841	Deserialize the rectangle .
4842	Writes the image .
4843	Add a unit to this unit .
4844	Add a unit .
4845	Adds a symbol .
4846	Gets the unit by id .
4847	Add a unit by name .
4848	Add a unit by symbol
4849	Adds a new unit to the map .
4850	Add a menu to the menu .
4851	Searches for a record at the given position .
4852	Read a scalar variable .
4853	Serialize this dataset to the output stream
4854	Returns the value of the parameter values for the specified parameter
4855	Creates a copy of this projection .
4856	Open a feature dataset .
4857	Open a feature dataset .
4858	Opens a dataset .
4859	Add a NetcDataset to the database .
4860	Removes duplicates from the given list .
4861	Adds a new partition .
4862	Make a new GC collection .
4863	Gets a new instance of RegExpression based on a dataset name and duration .
4864	Gets an instance of an instance of a match on a dataset path .
4865	Writes a query capability to a file .
4866	Read data structure from a section .
4867	Sets the picture .
4868	Set a buffered image
4869	Zoom to the screen .
4870	Paint the component .
4871	Determine the date for a date string .
4872	Decode the format information for a date .
4873	Calculates the time for a given int .
4874	Get the number of days for a given month .
4875	Returns the vertical coordinate for a vertical coordinate .
4876	Reverse a number of values in a range of integers .
4877	Get the grid packing name .
4878	get data type
4879	Read data from an input stream .
4880	Externalize the output stream .
4881	Returns the tag enum for the given code .
4882	Get the next image
4883	Returns the size of a given type .
4884	Returns the sum of the elements in the array .
4885	Sets the grid size .
4886	Sets the maximum overlap .
4887	Removes all unused regions .
4888	Marks the given rectangle if it is empty
4889	Finds the intersection of this rectangle .
4890	Returns the intersection of the specified point .
4891	Finds the closest point in the grid .
4892	Returns the squared distance between the specified point .
4893	Returns the base unit with the given id .
4894	Searches for the given fragment .
4895	Searches for the given URL .
4896	Decodes the path extension from the given path .
4897	Checks if the given location exists .
4898	Checks if the given location is a dap4j file .
4899	Send data to output stream .
4900	Returns the suffix of a class .
4901	Returns the prefix of a class .
4902	Locates the location of a file .
4903	Locates a file relative to a relative path .
4904	Extracts a byte array from the buffer .
4905	Returns the structure of the given variable .
4906	Returns null if the path is null or empty .
4907	Joins an array of strings with the given separator .
4908	Checks if a path is a drive letter of a path .
4909	Returns a list of protocols from the given URL .
4910	Convert an index to a list of slices
4911	Convert an offset to a list of slices
4912	Returns true if the slices are contiguous .
4913	Returns true if the list is single point .
4914	Converts a list of slices to an index .
4915	Read data from an input stream
4916	Set the station information for this station .
4917	Set the short names .
4918	Read a feature collection .
4919	Adds a declaration to the root .
4920	Updates the list of groups .
4921	Returns the variable with the specified name .
4922	Returns the AxisType for a given variable .
4923	Gets the statistic type .
4924	Subtracts the coverage axis from the given latitude
4925	Returns a list of the ranges of the axis .
4926	Sets default properties .
4927	Gets the session id .
4928	Sets the maximum number of redirects .
4929	Sets whether the session should be used .
4930	Closes all methods .
4931	Set authentication and proxy credentials .
4932	Track a session .
4933	Set global credentials provider .
4934	Validates the catalog .
4935	Creates a new index .
4936	Compute the stride for a shape
4937	Creates a new index .
4938	Reduce this index .
4939	Returns a new index with the specified dimension .
4940	Transpose an index into a new index .
4941	Returns a new index with the specified dimensions .
4942	Get an index iterator .
4943	Returns the current element in this vector .
4944	Sets the elements in this index .
4945	Sets the value of a particular dimension .
4946	Sets the dimension of this index .
4947	Returns the name of the time interval .
4948	Obtains a calendar range from the given calendar .
4949	Generates a list of dates from a file .
4950	Returns a list of parameters from a DMPP parameter .
4951	Gets the stations list .
4952	Create a new station from the header .
4953	Gets the names of the station keys .
4954	Returns a list of dates from the list .
4955	Returns the index of the station with the given id .
4956	Gets the file type .
4957	Increments the indentation .
4958	Set indent level .
4959	Reads an index from a single file .
4960	Add a directory scan .
4961	Checks if the collection is needed .
4962	Scan the next dataset
4963	Sets the debug flags .
4964	Add a variable .
4965	Creates a new file .
4966	Validate the given XML document .
4967	Returns a string representation of this constraint .
4968	Sets the original variable .
4969	This method is used to read the data from the structure .
4970	Reads an array of values from the given section .
4971	Determines if all variables need to be needed .
4972	Convert an array to an ArrayStructure
4973	Convert the member members to a member members
4974	Find a variable from an organization .
4975	looks to see if a variable has data
4976	Enhanced performance enhancement .
4977	Checks if the given resource is authorized .
4978	Returns an empty sequence of the given structure .
4979	Creates an ArraySequence from the given parameters .
4980	Returns a sequence of parameters for the given parameters .
4981	Add the vertical coordinate attribute
4982	Asynchronously reads catalog .
4983	Reads a catalog from a String .
4984	Read an InvCatalog from a StringReader .
4985	Writes the catalog to an output stream .
4986	Gets metadata converter .
4987	Returns a unitless id .
4988	Multiply this unit by another .
4989	Divide this unit by another unit .
4990	Creates a derived unit from the input array .
4991	Returns true if this unit is compatible with the given derived unit .
4992	Write a single geometry .
4993	Writes a point to the XML
4994	Writes a LineString to XML
4995	Write polygon .
4996	Retrieves a value from a named node .
4997	Gets subnodes of a parent node .
4998	Parse response .
4999	Pass all reserved attributes .
5000	Returns a subset of the subset of the specified variable .
5001	Creates a new ArrayStructure from the given ArraySet .
5002	Sets a member array .
5003	Creates a new structure from a structure .
5004	Get the geometry type .
5005	Create a station from a structure data structure .
5006	Compile a CEAST node .
5007	Compile a filter .
5008	Adds a dimension definition to the table .
5009	Create an ArrayView for the given index .
5010	Returns true if this rectangle contains the specified bounds .
5011	Extends a point to the bounding box .
5012	Extend the current LatLonRect .
5013	Intersects the intersects and returns the intersection .
5014	Adds two elements to the array .
5015	Returns true if the given arrays are compatible with the same shape
5016	Checks if the shape is compatible with the shape1
5017	Convert an array to an array
5018	Copies the contents of an array to the given array .
5019	Copy the values of a Array to a copy of the result
5020	Copy the contents of an array to the result .
5021	Get min max max value
5022	Sets the value of a double .
5023	Make a new catalog builder for all datasets .
5024	Factory method for creating a projection adapter .
5025	Unescape DAP identifier .
5026	URL decode a string .
5027	Unescape an URL .
5028	Escapes backslash characters .
5029	Unescape a string .
5030	Tokenizes an escaped escaped name .
5031	Returns the index of the first occurrence of the specified character .
5032	Converts a backslash to a DAP string .
5033	Read an atomic variable .
5034	Returns the path of a cursor .
5035	Get the UID of a class
5036	Gets the JComponent class .
5037	Compile the DSP data .
5038	Compile a structure array .
5039	Compile a DAP structure .
5040	Compile a sequence array .
5041	Compile a sequence .
5042	Read a long from the stream .
5043	Returns the field with the given name .
5044	Returns the value of the field with the given name .
5045	Sets the value of a field .
5046	Adds a field to the table .
5047	Add a CheckBox field .
5048	Add a date field .
5049	Add a double field .
5050	Add an integer field .
5051	Add a password field .
5052	Add a text field .
5053	Add a TextField .
5054	Add a TextArea .
5055	Adds a heading to the layout .
5056	Adds a component to the layout .
5057	Adds an empty row .
5058	Find the active frame .
5059	Get the cell spacing .
5060	Gets the factors .
5061	Multiply two factors .
5062	Parses the factors of a factor .
5063	Returns true if this dimension is a reciprocal of this dimension .
5064	Returns true if this layer is a dimensionless dimensionless .
5065	Creates a Grib1Param from the given parameters .
5066	Factory method for constructing a Grib1 ParameterTable .
5067	Adds a parameter to the database .
5068	Adds a parameter table .
5069	Checks if the given number is greater than the given number .
5070	Converts the input array to a derived unit .
5071	Initialize the unit table .
5072	Creates a vertex for the vertices .
5073	Peek the name of the file .
5074	Read a short from the byte array .
5075	Read an integer from the given byte array at the given offset .
5076	Read a float from the descriptor .
5077	Read a double from the byte array at the given offset
5078	Creates a new alias with the specified alias .
5079	Adds a symbol .
5080	Creates a converter for the given unit .
5081	Sets the structure data .
5082	Sets the point feature data .
5083	Draws all shapes in the specified image .
5084	Get a list of shapes
5085	Read the contents of a stream .
5086	Read buffer from input stream .
5087	Read more bytes from the input stream .
5088	Read bytes from the input stream .
5089	Skip n bytes .
5090	Adds dimensions to the graph .
5091	Returns the index of the coordinate in the grid .
5092	Returns true if the given file is valid .
5093	Reads the RDF header and sets it to the file .
5094	read data from a section
5095	Read a single row data .
5096	Creates a dataset from a dataset .
5097	Creates a variable for the given variable .
5098	This method is called to fire a map area .
5099	Set the map area area .
5100	Set the map area area
5101	Sets the center area of the map .
5102	Sets the projection .
5103	Add actions to the menu .
5104	Redraw the background thread .
5105	Update the screen size .
5106	Sets the selected variable .
5107	Returns a double value at the specified offset .
5108	Read a double at the specified index .
5109	Read an object at the specified index .
5110	Get the name of the sector ID
5111	Reads a scaled integer .
5112	Returns the parameter with the given name .
5113	Determine if the current odometer is next to be next .
5114	Swap the byte order .
5115	Get the number of time steps in a file .
5116	Returns the file name of the file .
5117	Returns a list of file names .
5118	Gets the path to ddf file .
5119	Returns the full path for the given filename .
5120	Add a ChsubSubSubsc .
5121	Convert a reference date to a time value .
5122	Read the NEX product of the NEX product .
5123	Get the uncompressed data from the given offset .
5124	Parses the code for a specific code point
5125	Parses a circle packet .
5126	Read NEXRID header .
5127	Parses the code point for a given position
5128	This method is used to convert a text code into a string
5129	Parses an unlinked vector .
5130	Calculates the levels for the given data .
5131	Returns the dualpolation levels for the given short array .
5132	Add a new variable .
5133	Adds a parameter to the output stream .
5134	Uncompress compressed data from the buffer .
5135	Gets a word from a byte array .
5136	Gets an integer from a byte array .
5137	Convert a byte array to a byte array .
5138	Process DMR .
5139	Gets the DAP request .
5140	Sends an error to the server .
5141	Adds a point to the anchor .
5142	Stretch the rectangle at the specified point .
5143	Gets the bounds of the rectangle .
5144	Returns the bounds of the last point .
5145	Format the given date as a date .
5146	Replace the data variables from a structure .
5147	Checks that the memory size of an array of memory size .
5148	Read two integers from a file .
5149	Read an unsigned integer from a file .
5150	Read an int from a file .
5151	Reads two bytes from a file .
5152	Read four bytes from a file .
5153	Read a float from a file .
5154	Calculate a 4 - bit 4 - bit float
5155	Read an integer from a file .
5156	Count the number of bits in a bitmap .
5157	Creates a new projection object .
5158	Returns a string representation of the WKS .
5159	Escape the given string .
5160	Unescape backslash .
5161	Splits a backslash string into a list of paths .
5162	Creates a list of FMR invocations for all files in the dataset .
5163	Gets the service special case .
5164	Returns the number of projected components .
5165	Gets the reference time .
5166	Factory method for creating an array structure .
5167	Main method for testing .
5168	Reads a Grib1 record .
5169	Determine if the given network file is a valid XML file .
5170	Construct a UTM projection from a dataset .
5171	Acquire area .
5172	Returns true if the given date is before the given date .
5173	Returns true if the given value is before the given date .
5174	Returns true if the given date is after the given date .
5175	Sets the value at the specified index .
5176	Adds a coordinate system to this variable .
5177	Sets the units string .
5178	Gets the unit string .
5179	Initializes the UI .
5180	Read catalog .
5181	Iterate over all datasets
5182	Recursively searches for catalog files .
5183	Returns true if the lon is between the lon .
5184	Converts a latitude to a string .
5185	Converts a long to a string .
5186	Compares a quantity by name .
5187	Gets the selected dataset .
5188	Sets the selected dataset .
5189	Make a tree path .
5190	Open all catalogs .
5191	Set the catalog location
5192	Sets the catalog .
5193	Find the coordinate of a variable .
5194	Writes a VInt .
5195	Writes a string .
5196	Read characters from the input stream .
5197	Sets the debug flags .
5198	Adds a member to the list .
5199	Hide a member .
5200	Gets the member names .
5201	Find a member by name .
5202	Gets bitmap .
5203	Restores the state of the table .
5204	Gets the selected rows .
5205	Gets the model index .
5206	Gets the value of a member .
5207	Returns the scalar value for a member .
5208	Get a double array from a member .
5209	Returns the scalar value for a member .
5210	Get a float array from a member .
5211	Returns a scalar byte .
5212	Gets byte array .
5213	Returns the scalar index of a member .
5214	Gets an array from a member .
5215	Returns a scalar value for a member .
5216	Gets a short array from a member .
5217	Returns the scalar value for a given member .
5218	Gets a long array from a member .
5219	Returns the char at the given member .
5220	Gets the character array from a member .
5221	This method is used to write a dataset .
5222	Checks if a dataset is used for use .
5223	Creates a copy of a dataset .
5224	Transfer metadata .
5225	Gets the threshold metadata .
5226	Adds a product to the database .
5227	Prints the number of missing occurrences .
5228	Display the number of missing values .
5229	Find a record at the given time .
5230	Dump the grid .
5231	Returns the name of the log .
5232	Subscribes the coverage axis by the given interval .
5233	Compares two byte arrays .
5234	Parse a DMR XML document .
5235	Process the attributes .
5236	Adds a collection of coordinates to the collection .
5237	Sets the gaussian latitudes .
5238	Parse a variable selector .
5239	Converts a variable to a section spec .
5240	Returns true if the tile is inside the rectangle
5241	Closes the connection .
5242	Executes the HTTP request .
5243	Identify the structure of the encoding .
5244	Determine the axis type for the axis
5245	Sets the stream .
5246	Read a character from the stream .
5247	Start a progress monitor .
5248	Parse a URI to a URI .
5249	Returns a copy of the given URI .
5250	Returns null if the string is null or empty .
5251	Joins the given prefix and suffix .
5252	Accepts the given dataset .
5253	Copy information from another .
5254	Returns a list of file names .
5255	Sets the index of the file .
5256	Gets index file path .
5257	Closes the index .
5258	Returns the number of counters .
5259	Adds a global attribute .
5260	Adds a global attribute .
5261	Delete global attribute .
5262	Rename a global attribute .
5263	Adds an attribute .
5264	Adds an attribute to an array .
5265	Delete an attribute with the given name .
5266	Rename an attribute .
5267	Make the type of file type .
5268	Writes the headers and bfs to the file .
5269	Write the members of the geometry .
5270	Returns the XML document as a string .
5271	Returns a string representation of the station collection .
5272	Write DSR to XML .
5273	Send XSR response to DMR output stream .
5274	Writes an error response .
5275	Close the output stream .
5276	Send DMR output stream .
5277	Returns a copy of this projection .
5278	Returns true if the element contains the given direction .
5279	Returns the element at the specified position
5280	Shifts the range of this range .
5281	Read data at the given index
5282	Read data .
5283	Returns a subset of this vector .
5284	Returns a list of catalog objects .
5285	Cleans up the dataset .
5286	Sets parameters .
5287	Get data chunk iterator .
5288	Make a double array .
5289	Gets the bounds of the dataset .
5290	Checks if the requested variables are contained in the grid .
5291	Returns the dataset structure for the given name .
5292	Gets the resource path .
5293	Adds the vertices to the network
5294	Reads the px file from the file .
5295	Finishes the completion .
5296	Transfer two metadata from parent metadata
5297	Transfer metadata from another dataset
5298	Transfer inherited metadata from another dataset .
5299	Sets the contributors .
5300	Adds a dataset to this dataset .
5301	Remove a dataset
5302	Replace the dataset with the given dataset .
5303	Add a service
5304	Remove a service .
5305	Sets the service list .
5306	Remove local metadata .
5307	Get user property .
5308	Validates the configuration .
5309	Returns a list of descriptor descriptors .
5310	Construct the server path from the HttpServletRequest .
5311	Get capabilities for a geometry .
5312	Get a feature
5313	Check the required parameters for an error .
5314	This method is called when the HttpServletRequest is available .
5315	Get capabilities for a given URL .
5316	Returns the length of this object .
5317	Returns the last modified timestamp .
5318	Populate the dataset .
5319	Returns a file in the given content path .
5320	Send a string to the response .
5321	Sets the length of the response .
5322	Gets the URI of the request .
5323	Gets the request path .
5324	Gets the request string .
5325	Returns the parameter with the given name ignoring case .
5326	Saves the file .
5327	Write a directory to a directory
5328	Set bit offset .
5329	Creates a new bit counter for a given key .
5330	Count the number of bits in this row .
5331	Appends a line to the text .
5332	Create a document that represents the stations in the grid .
5333	Gets the capabilities document .
5334	Gets the record at the specified location .
5335	Returns the coordinate at the given index .
5336	Adds an item to the list .
5337	Handle an exception .
5338	Returns the slice at the specified index .
5339	Step 2 .
5340	Gets the genp process map .
5341	Determines if the given endpoint is a CdmF domain .
5342	Sets the value of the type
5343	Factory method to create a GDS from a grid .
5344	Copy bytes from input stream to output stream .
5345	Reads contents from an input stream .
5346	Read contents from an input stream .
5347	Writes a string to an output stream .
5348	Copy a file to the output stream .
5349	Copy bytes from the given raf stream to an output stream .
5350	Copies a directory recursively .
5351	Reads the contents of a file .
5352	Read a file .
5353	Writes a string to a file .
5354	Write string to file
5355	Writes an input stream to a file .
5356	Sends a parse exception handler to the response .
5357	Called when a DAP22Exception is handled .
5358	Sends a bad URL page .
5359	Get the catalog
5360	Print the catalog .
5361	Print the status of the response .
5362	Print the error page .
5363	Gets the reference date .
5364	Read the length of a variable .
5365	Read NcML data from a string .
5366	Opens a NCmlCollection reader .
5367	Returns a string that can be replaced by the given string .
5368	clean up a string
5369	Removes all letters from the given string .
5370	Removes all bits from a string .
5371	Make sure that the name of the cdmObject is valid .
5372	Match two strings .
5373	Pads a string to a string .
5374	Returns a string padded with the specified length .
5375	Removes substring from string .
5376	Removes characters from string .
5377	Removes characters from string .
5378	Collapses all whitespace characters from a string .
5379	Replaces all characters in a string with the given character .
5380	Replaces all occurrences of the given string with the given replacement .
5381	Replaces the given string with the given value .
5382	Replaces the substring of the given string .
5383	Substitute the substring of a string .
5384	Removes all characters from the string builder .
5385	Replace the characters in the string with the given character .
5386	Replaces all characters in the string builder with the given string .
5387	Substitutes a substring of a substring of a string .
5388	Removes all characters from a string .
5389	Handles a collection update event .
5390	Checks the state of the current state .
5391	Update the collection .
5392	Show unique templates .
5393	Get the datasets for this dataset .
5394	Release resources .
5395	Create a deep copy of a data structure .
5396	Copies the given array structure to the given byte structure .
5397	Copy the given structure to an array of bytes .
5398	Creates a copy of the given structure .
5399	Copy a data structure from a data structure .
5400	Gets the maximum time interval size .
5401	Creates a new axis with the specified range .
5402	Factory method for creating TableAnalyzer .
5403	Gets the first feature type .
5404	Analyze dataset .
5405	Synchronize the grid .
5406	Get a list of latitudes for a given type
5407	Swaps a long from a byte array .
5408	Swaps a float from a byte array at the specified offset .
5409	Swap two bytes at the given offset .
5410	Set coordinate axes .
5411	Adds a parameter to a coordinate matrix .
5412	Returns the common parent of this group .
5413	Returns true if this group is a parent of this group .
5414	Sets the parent group .
5415	Adds a dimension to this group .
5416	Adds a dimension to this group if it exists .
5417	Adds a group to this group .
5418	Adds an enum type to this group .
5419	Adds a new variable to this group .
5420	Removes the dimension with the given name .
5421	Creates a relative group from a given path .
5422	Convert DDSAlias to DDSAlias fields .
5423	Prints the DAS object to a PrintWriter .
5424	Returns the type of a variable .
5425	Writes a grid .
5426	Replace the missing values with missing values .
5427	Replace missing values .
5428	Get the x - coordinate of the lon .
5429	Writes a grid .
5430	Writes the response to the response .
5431	Returns the names of the nq - qq - in - qq lib .
5432	Make the top index file based on the configuration .
5433	Gets the type from a file .
5434	Update GribCollection .
5435	Update a leaf collection .
5436	Opens a GribCollection from a file .
5437	Open a GribCollection from a data file .
5438	Open GribCollection .
5439	Returns true if the given URL matches the pattern .
5440	Adds a key to the cluster .
5441	Finds a string with the given key and URL .
5442	Sets the well - known triples .
5443	Loads the RTAG .
5444	Insert triple .
5445	Get the datasets for the dataset .
5446	Find a dataset by name
5447	Set the project .
5448	Returns an iterator that can be used to visualize the graphics screen .
5449	Creates a list of shapes for a given iterator
5450	Compares the given string with the given string .
5451	Start the progress monitor .
5452	Determines if the given collection is updated .
5453	Normalize the result of the result list
5454	Sets an object at the given index .
5455	Gets the structure at the given index .
5456	Copy StructMembers members from a record .
5457	Get a scalar object .
5458	Convert a double to a double .
5459	Convert a scalar value to a scalar integer .
5460	Get a float value from a member .
5461	Get a byte from a record .
5462	Get a short as a short .
5463	Get a char from a member .
5464	Get a String from a member .
5465	Get an ArrayStructure .
5466	Get an ArraySequence from a member .
5467	Get an Array object from this Structure .
5468	Returns the minimum value of the given value .
5469	Evaluate an expression .
5470	Returns a string representation of this constraint .
5471	Returns true if the given node is references .
5472	Evaluate a CAP query .
5473	Returns the number of expansion count for a given struct .
5474	Compute the set of enums .
5475	Compute groups .
5476	Compile a CAP constraint .
5477	Determines whether the given file is valid .
5478	Sets the actions for the BAM .
5479	Gets the byte order .
5480	Set the byte order .
5481	Find a Key by name
5482	Find file header .
5483	Gets the header of a file .
5484	Print parts to stdout .
5485	Returns the data point at the specified column .
5486	Reads a DMTR file .
5487	Read a string from a word .
5488	Unsynchronized data .
5489	Converts a bit integer to a string .
5490	Writes a NetcdfFile to a channel
5491	Parse the base type .
5492	Parse a grid element .
5493	Parse aliases .
5494	Decode a list of key descriptors .
5495	Replicates the given list of keys .
5496	Returns filename .
5497	Gets the CFFature type .
5498	Returns true if two values are equal .
5499	Returns true if the given node is references .
5500	Parse a unit .
5501	Print a single object .
5502	Checks if a variable is tiled .
5503	Make a best - effort coordinate from the complete set .
5504	Convert a LatLonRect to a projection rectangle .
5505	Show time series
5506	Make a map of attributes .
5507	Gets the values of this field .
5508	Returns the value at the given index .
5509	Writes CDL definition to the output file .
5510	Sets the string value .
5511	Sets the values of the attribute .
5512	Sets the values of this Array .
5513	Scan the catalog .
5514	Generate the invocations of a proxy dataset .
5515	Schedules a message .
5516	Sets the target dataset for the given dataset
5517	This method is used to open thrift dredds .
5518	Makes sure that the selected dataset is selected .
5519	Sets the dataset .
5520	Prepares the GUI .
5521	Creates a Tools Frame .
5522	Convert a list of axes to a string .
5523	Determines if two lists are lesser than the same rank .
5524	Finds the axis with the given type
5525	Gets the projection for this coordinate .
5526	Determine if the point is a GeoGeometry .
5527	Returns true if the axis is a regular expression .
5528	Checks if the given set is a subset of the given subset .
5529	Checks if a list of axes are in the list of axes .
5530	Checks if the axis with the given name .
5531	Returns true if the given list contains the domains .
5532	Checks if the list of Axis types are in the given list .
5533	Checks if there is a specific type
5534	Clones this DAGNode .
5535	Returns the currently selected bean .
5536	Gets the selected beans .
5537	Gets the selected cells .
5538	Set the selected bean .
5539	Restores the state of the table .
5540	Creates an unknown unit .
5541	Close the input stream .
5542	Returns true if the variable is an extra variable .
5543	Checks if the given variable is a coordinate .
5544	Searches for a coordinate in the table .
5545	Add data variables to the table
5546	Adds the parent join data to the tree .
5547	Create a station from the data structure .
5548	Creates a node map .
5549	return a SimpleUnitFactory
5550	Returns a SimpleUnit with the given name .
5551	Create a unit from the given name .
5552	Checks if the given string is compatible with the given exceptions .
5553	Returns true if the given unit is a valid date unit .
5554	Returns true if the given string is a time unit .
5555	Returns the conversion factor for the input unit string .
5556	Convert the given value to the given unit .
5557	Returns true if the unit is unknown .
5558	Gets the scale .
5559	Creates a new RelOpClause .
5560	Creates a new BoolFunction clause .
5561	Creates a new sub - clause clause .
5562	Converts an array of arrays to a BufferedImage
5563	Scans the catalog .
5564	Traverses a dataset .
5565	Crawl a dataset .
5566	Gets the file or cache if it exists .
5567	Gets the file or cache if it exists .
5568	Enables debugging .
5569	Gets a list of files .
5570	Close the file .
5571	Sets the current position .
5572	Flush the buffer .
5573	Read a byte .
5574	Read a short .
5575	Read an int from the stream .
5576	Read an int from an array of integers .
5577	Read a long from the array .
5578	Read float .
5579	Read double .
5580	Read a number of bytes .
5581	Reads a string .
5582	Writes a boolean array to the stream .
5583	Writes a short array to the stream .
5584	Writes a char array to the stream .
5585	Writes an int array to the stream .
5586	Writes a long array to the stream .
5587	Writes a float array to the stream .
5588	Writes a double array to the stream .
5589	Writes a string .
5590	Writes a char array to the stream .
5591	Search for the next match in the buffer .
5592	Append query string .
5593	Create a new collection .
5594	Find index .
5595	Checks if the index is a leaf node .
5596	Creates a list of children .
5597	Scan the children of a directory .
5598	Read m files from index reader .
5599	Gets the value of the gridset .
5600	Acquires a file from a dataset .
5601	Remove the cache from the cache .
5602	Elements the specified hash key .
5603	Releases a file in the cache .
5604	Calculates a 4 - bit 4 - bit 4 .
5605	Update the element in cache .
5606	Clears the cache .
5607	Make a vertical transform .
5608	Returns true if the lon is a global .
5609	Returns true if the vertices of the vertices of the vertices .
5610	Finds the index of a coordinate from a coordinate .
5611	Returns the index of the XYX axis in the grid .
5612	Returns the index of the XYL index for the given latitude .
5613	Returns the index of the XYL index for the given latitude .
5614	Returns the position of the item in the table .
5615	Returns the item at the specified position .
5616	Iterate over a collection of MFileCollection .
5617	Gets the remote files .
5618	Returns the name of the sub center of the specified center .
5619	Convert a String to a FieldPeriod .
5620	Returns a CalendarPeriod instance for the specified field .
5621	Creates a CalendarPeriod from a string .
5622	Subtract the number of days between two dates .
5623	Returns the conversion factor for this calendar .
5624	Gets the value in milliseconds .
5625	Returns the offset between two dates .
5626	Synchronize the current gem file .
5627	Initialize the tables
5628	Add a date tree to the tree set .
5629	Returns the longest path match .
5630	Find data root for a given path .
5631	Convert the data root to a DataRoot
5632	Returns the date range for the given calendar .
5633	Reindex a list of coordinates .
5634	Creates a new NetcdfFileWriter .
5635	Adds a new group .
5636	Adds an enum type to the group
5637	Remove attribute from group .
5638	Rename an attribute
5639	Adds a record structure to the network
5640	Aborts the underlying stream .
5641	Writes the properties to the output stream .
5642	Extracts the Thredds datasets from the given dataset .
5643	Divide this unit .
5644	Converts this unit into a derived unit .
5645	Converts the given amount of derived unit to the given value .
5646	Convert a nested variable to a nested Array
5647	Convert a DADVariable to an array of DataSet
5648	Convert a datap to an Array
5649	Close all databases .
5650	Open database .
5651	Convert an int value to a Period .
5652	Ensures that the array is at least the given minimum capacity .
5653	Returns the value at the specified index .
5654	Make a catalog for a given directory .
5655	Create a proxy dataset for the given path .
5656	Gets the coordinate type .
5657	Creates a Grib2D instance based on the input template .
5658	Calculates the time of a date .
5659	Applies a scale factor to the specified scale .
5660	Parses a local concept from a file .
5661	Adds a concept to the input stream .
5662	Remove line from line
5663	Store a specific concept .
5664	Writes the grib1 files to a file .
5665	Writes the lookup table to a file .
5666	Show local concepts .
5667	Main entry point for the ecmf .
5668	Returns the type of DatasetType .
5669	Expands the top level dataset .
5670	Expands the dataset .
5671	Recursively name of the dataset .
5672	Creates a dataset .
5673	Try to recursively traverse the dataset .
5674	Load a picture from the image
5675	Stop loading from background .
5676	Change the status of a source picture .
5677	This method is called when a source has been changed .
5678	Create a scaled image in the background thread .
5679	Get the scaled size of the image .
5680	Returns a string representation of the scaled image .
5681	Gets a list of parts .
5682	Generate the header for a single station .
5683	Checks if the SNU is valid .
5684	Check if a group is valid
5685	Sets the root directory .
5686	Make sure the root directory exists .
5687	Gets the cache file .
5688	Removes all files from the given cutoff .
5689	Clean the cache .
5690	Checks to see if a short is a binary table
5691	Creates a coordinate axis based on a dataset .
5692	Creates a copy of this coordinate axis .
5693	Returns true if this record is a numeric type .
5694	Prints information about the axis .
5695	Gets the calendar from the attribute .
5696	Sets the row list .
5697	Returns the currently selected row .
5698	Increment the selected row .
5699	Gets the model index .
5700	Set the selected index
5701	Sorts the given array and returns the sorted array .
5702	Swap the elements of two elements .
5703	Gets an existing file .
5704	Rotate a long .
5705	Creates an XMLStore from a file .
5706	Creates a new XMLStore from an input stream .
5707	Creates an XMLStore from a resource .
5708	Creates the filename for the given app name .
5709	Saves the preferences .
5710	Save the preferences to an output stream .
5711	Writes an atomic variable .
5712	This method is used to write a structure .
5713	Writes the structure of a DataCursor .
5714	This method is used to write a sequence of datapoints .
5715	Writes a datapcursor to the SerialWriter .
5716	Checks to see if the file is valid .
5717	Get the wmo id
5718	Reads the nth row n .
5719	Returns the data at the specified index .
5720	Get data from a grid .
5721	Decode the data structure of the grid .
5722	Reads the data from the schema .
5723	Creates a grid for a grid .
5724	Calculate the size of a grid file .
5725	Make a netcdf file .
5726	Set the list of stations
5727	Set the currently selected station .
5728	Selects a station with the given point .
5729	Selects a station from a given point
5730	Gets the selected station .
5731	Returns the name of the project .
5732	Returns a list of locations for the given bounding box
5733	Returns the station with the given name .
5734	Returns a DataIterator for a station .
5735	Returns a DataIterator for a given station .
5736	Reads the gate data from the input file .
5737	Computes the dot product of this vector .
5738	Returns the norm of this vector .
5739	Normalize this matrix .
5740	Recursively add all services to the dataset .
5741	Returns the parameter with the given id .
5742	Returns the local parameter for the given id .
5743	Adds a new name and value .
5744	Adds a symbol .
5745	Gets the prefix for a given string .
5746	Returns true if the given source is an email .
5747	Returns the parameter with the given name .
5748	Calculates the CRC of the grid
5749	Returns true if the input is a thin integer
5750	Returns the field index for the given field .
5751	Returns the time type name for the given time range indicator .
5752	Gets the time coordinate .
5753	Sets the next polygon .
5754	Sets the previous polygon .
5755	Finds a property by its name .
5756	Set the current projection
5757	Subtracts the time axes from the given time .
5758	Registers an IO provider for the given class name .
5759	Register an IOService provider .
5760	Register an IospiceProvider for the given target class .
5761	Checks if IospiceProvider is registered with the given class .
5762	Remove an IospiceProvider .
5763	Returns true if the given location is open .
5764	Opens a Netcdf file .
5765	Opens an InMemoryFile .
5766	Open a file .
5767	Opens a binary file .
5768	Returns the global attribute with the given name ignoring case .
5769	Convert the netcdf to NcML document
5770	Write CDL data to an output stream .
5771	Write CDL data to writer .
5772	Write CDL .
5773	Adds an attribute to this group .
5774	Adds an attribute to this group .
5775	Adds a group .
5776	Adds a dimension to the parent group .
5777	Removes a dimension from the group .
5778	Adds a variable to this group .
5779	Adds a variable to this group .
5780	Adds a variable to this group .
5781	Removes a variable from this group .
5782	Send an Iosp message .
5783	Make sure the record structure is available .
5784	Finalize the group .
5785	Read a section from the file .
5786	Read a variable from the given section .
5787	Read variables .
5788	Read a dataset from a variable section .
5789	Make the full name of a CDM node .
5790	Returns a full name with the given string .
5791	Returns true if the given MFile is included .
5792	Check if the mFile is excluded .
5793	Returns true if the given mFile matches any filters .
5794	Appends a value to the vector .
5795	Dispatch a string value .
5796	Attempts to convert a value to a type .
5797	Checks whether the given string is a byte .
5798	Checks if a string is a short .
5799	Checks if string is an integer .
5800	Checks whether a string is an unsigned integer .
5801	Checks if a string is a float .
5802	Checks if a string is a double .
5803	Returns the attribute type for the given attribute .
5804	Returns true if the dataset is viewable .
5805	Checks if the given string is a valid boolean .
5806	Returns true if the passed alphanumeric string is valid
5807	Returns true if alphanumeric string is a valid alphanumeric string .
5808	Recursively descendent a path .
5809	Converts a Unicode code point to a percent encoded string .
5810	Returns the value of a parameter .
5811	Compares two grid definition .
5812	Processes the input stream .
5813	Read the buffer length from the buffer .
5814	Removes quotes from a string .
5815	Mark the stack of variables in the stack .
5816	Writes ncML to the dataset .
5817	Gets the value of the ThreddsConfig property .
5818	Writes a CDL document .
5819	Creates a new station based on the coordinates .
5820	Validates the validity of this ResultService .
5821	Gets the azimuth .
5822	Get the elevation .
5823	Returns a list of Latitudes contained in this ASN .
5824	Returns an array of longitudes of all the longitudes .
5825	Returns an array of all the altitudes .
5826	Gets azimuths .
5827	Returns an array of elevations .
5828	Selects a structure with the given names .
5829	Returns a new structure with the given name .
5830	Adds a member to this structure .
5831	Sets the member variables .
5832	Sets the parent group .
5833	Calculates the sum of all elements of this variable .
5834	Read a Structure object .
5835	Read a vector .
5836	Returns a new structure iterator .
5837	Returns the data category for the given category .
5838	Gets the class name .
5839	Adds a parameter .
5840	Gets the header .
5841	Converts a latL coordinate to a projection .
5842	Returns the version number for a given name .
5843	Get the zis value of the z axis
5844	Delete next file
5845	Set the color scale parameters
5846	Renders plan view .
5847	Returns true if this group is a child of this group .
5848	Returns the type for the given name .
5849	Install all cells in the given table .
5850	Sets the api key .
5851	Creates a Label .
5852	Creates a label with the given lines .
5853	Creates a label .
5854	Connects to a cloud server .
5855	Parses the IPSqlTypes string .
5856	Connect to the database .
5857	Purges a logger .
5858	Compile all source codes .
5859	Compiles the given class and source code .
5860	Adds a source code to the compiler .
5861	Reads the graphic extension .
5862	Gets next frame .
5863	Gets the selectable property list .
5864	Initialize listener .
5865	Returns the person with the given id .
5866	Add a message to a validator list .
5867	Sets the person id .
5868	Creates and returns a view model for the given view .
5869	Creates a view model for the given view .
5870	Loads a list of countries .
5871	Loads the list of subdivisions .
5872	Adds a string property to the bean .
5873	Adds an immutable field to be immutable .
5874	Creates a JavaView instance for a Java View .
5875	Creates an FxmlView for FxmlView .
5876	Removes all observable values from the map .
5877	Creates the index events .
5878	Access the given member .
5879	Load a ViewTupleTuple from the given root .
5880	Create the Fxml path .
5881	Query for style mapping row .
5882	Get the pixel value from the image
5883	Get the pixel values of the image
5884	Validate the image type
5885	Creates a PNG image .
5886	Set tile data from bitmap
5887	Executes a raw query .
5888	Wrap a query result .
5889	Executes the query and returns the result .
5890	Queries a user .
5891	Converts a Cursor into a TResult .
5892	Get the feature row for the given geometry index .
5893	Registers a table for a table .
5894	Retrieves the tile row for the specified tile .
5895	Get the coverage data
5896	Get coverage data for a tile
5897	Get coverage data for a tile
5898	Retrieves coverage data for the specified request .
5899	Get the coverage data tile results
5900	Get the results of the results in the tile matrix
5901	Get the results of the results in the tile matrix
5902	Get the tile matrix for the coverage data box
5903	Retrieves the value of a tile from a tile row
5904	Sets the icon row .
5905	Returns the icon row for the specified geometry type
5906	Open database database .
5907	Decode a byte array .
5908	Convert bitmap to byte array .
5909	Create a table .
5910	Delete the geometry table
5911	Get the table metadata .
5912	Get the geo package id
5913	Creates a TableMetadata instance .
5914	Creates a new extension .
5915	Retrieves the feature row from the cursor .
5916	Executes a raw query and returns the results of a user .
5917	Query the query for the bounding box
5918	Query the cursor for the given envelope envelope
5919	Returns the number of points in the envelope .
5920	Query for a custom query .
5921	Builds the WHERE clause .
5922	Query for feature bounding box
5923	Count the number of features in the bounding box
5924	Query the feature envelope .
5925	Query for features in the feature table .
5926	Counts the query results in the query .
5927	Writes compressed data to the given bitmap .
5928	Sets data from bitmap .
5929	Set the compression compression .
5930	Returns the total number of tiles in the zoom level
5931	Adjust the bounding box for the GeoPackage
5932	Adjust the tile bounding box
5933	Adjust the bounding box bounds for the GeoPackage
5934	Adjust the GeoPackage bounds for the GeoPackage
5935	Get the bounding box for the zoom level
5936	Get the tile grid for the given zoom level .
5937	Query for tile row
5938	query for tile level
5939	Gets the closest zoom level .
5940	Get the approximate zoom level for the specified length
5941	Query for tile grid
5942	Delete the tile at the specified zoom level
5943	Count the number of tiles in the zoom level
5944	Determine if the tile tiles are google tiles
5945	Get the pixel value of the image
5946	Get the pixel values of a TIFF image
5947	Validate the image type
5948	Create a coverage image
5949	Sets the pixel value of the image
5950	Get the GeoPackage or create it if available .
5951	Gets the current row .
5952	Move the next cursor to the next invalid position
5953	Query by base feature id .
5954	Delete by base id
5955	Get a rectangle for the bounding box
5956	Get a bounding rectangle for the bounding box .
5957	Deletes missing databases .
5958	Create and close the GeoPackage
5959	Check if the database is valid
5960	Validate database .
5961	Validate database .
5962	Validate database .
5963	Validate database header .
5964	Check if database header is valid
5965	Add internal databases .
5966	Add external databases .
5967	Imports a GeoPackage from a database .
5968	Get GeoPackage metadata
5969	Get the GeoPackage metadata for the external path
5970	Create a new geometry .
5971	Populate geometry metadata .
5972	Delete the geometry from the GeoPackage
5973	Creates or updates a GeometryMetadata .
5974	Updates the geometry metadata .
5975	Counts the count of rows in the table
5976	Creates a GeometryMetadata instance .
5977	Updates the rows in the table .
5978	Draw a tile at the specified location .
5979	Retrieves all attributes for the given ids .
5980	Checks if the cursor is ok .
5981	Get a user mapping
5982	Get simple attributes DAO
5983	Get the mappings for a base id
5984	Returns the mappings for the given id
5985	Returns true if the given base id exists in the given table .
5986	Returns the number of rows in the cursor .
5987	Register a CursorWrapper
5988	Read a table
5989	Get the tile for the requested bounding box
5990	Draws a tile from the tile results of a tile .
5991	Reproject a tile from the request
5992	Retrieves the tile results from the bounding box
5993	Calculates the height of the drawable rectangle .
5994	Set the density of the density
5995	Sets the line paint .
5996	Sets the polygon Paint
5997	Draw a tile at the specified zoom level .
5998	Draw a tile at the specified location
5999	Draw a tile at the specified zoom level .
6000	Query the number of geometries in the zoom level
6001	Query for features in the bounding box
6002	Query for features in the zoom level
6003	Query the feature indexes for the bounding box
6004	Draw all features for the feature
6005	Simplify the list of points .
6006	Returns the paint paint for a feature style .
6007	Get the paint paint for a feature style .
6008	Get the paint paint for a feature style
6009	Get paint paint for a feature style
6010	Get paint for a feature style
6011	Get the style for the style
6012	Get paint for a style row
6013	Returns the paint for the given style id
6014	Sets the bitmap for an icon row .
6015	Creates a bitmap from an icon row .
6016	Wrap a ContentValues into a ContentValues .
6017	Creates a bitmap for the layers .
6018	Recycle the layers
6019	Returns the bitmap for the layer .
6020	Gets the canvas for the layer .
6021	Creates a bitmap for the layer .
6022	Get the StyleMapping DAO
6023	Get the style DAO
6024	Get the icon DAO
6025	Get the feature style for the feature table
6026	Get the styles for a feature table .
6027	Get the table style for a feature table
6028	Get icons for a feature table
6029	Get the icon row for the feature table
6030	Get the feature style for a feature row
6031	Get the style for the feature table
6032	Get styles for a feature row
6033	Get icons for a feature row
6034	Get styles for a feature id
6035	Get icons for a feature id
6036	Sets the table style for the feature table .
6037	Sets the style for a feature table .
6038	Sets the icons for a feature table .
6039	Sets the feature style for a feature row .
6040	Sets the style for a feature table .
6041	Sets style for a feature row .
6042	Sets the style for a feature table .
6043	Sets the style for a feature .
6044	Sets the style for a feature row .
6045	Set the style for a feature table .
6046	Sets the icons for a feature row .
6047	Sets the icons for a feature table .
6048	Sets the icon for a feature row .
6049	Sets the icon for a feature row .
6050	Sets the icon for a feature table .
6051	Gets the style id .
6052	Gets or returns the icon .
6053	Insert a style mapping .
6054	Delete the table style for the feature table
6055	Delete the table icon for the feature table
6056	Delete the table mappings for the feature table
6057	Delete the table mapping
6058	Delete a mapping for a feature id
6059	Get the style ids for a feature table
6060	Get all icon ids for the feature table
6061	Get all style ids for a feature table
6062	Returns all icon ids for the feature table
6063	Gets the image bytes .
6064	Flushes the output stream .
6065	Get the pixel at the specified position
6066	Read the pixels from the image .
6067	Draw a feature in the tile table
6068	Draw a line on the canvas .
6069	Draw a polygon path .
6070	Add a line to the path
6071	Add polygon .
6072	Gets the cache for the given table .
6073	Removes a feature row from the table .
6074	Clears the cache .
6075	Gets the styles for the table feature .
6076	Gets the icon icons .
6077	Get the RTree table DAO
6078	Set the width of the width
6079	Sets the height of the image
6080	Gets the width and height .
6081	Returns the density of the density of the specified density .
6082	Read blob value .
6083	Read a table from the table
6084	Gets the color .
6085	Validate the color
6086	Create a color from hexadecimal .
6087	Get the GeoPackageManager
6088	Sets progress .
6089	Index the given list of features .
6090	Index the type of the given type .
6091	Deletes the indices of the given types .
6092	Deletes the index for the given row .
6093	Deletes the indexes of a given geometry .
6094	Delete an index
6095	Returns true if this feature is indexed .
6096	Gets the indexed types .
6097	Query for feature index results
6098	Returns the count of features in the feature table .
6099	Returns the bounding box of the feature index
6100	Query for features in the bounding box
6101	Gets the indexed type .
6102	Gets internal file .
6103	Gets the absolute path of the file .
6104	Gets the geometry type .
6105	Sets the geometry type .
6106	Check if a bounding box contains a bounding box
6107	Replaces XYZ with z z z .
6108	Checks if the URL is a XYZ .
6109	Replace the bounding box
6110	Replace the bounding box
6111	Get the geometry data
6112	Index a row .
6113	Update the last indexed time
6114	Delete index
6115	Delete a geometry index
6116	Returns true if the feature is indexed .
6117	Query for the geometry table
6118	Query for a bounding box
6119	Count the number of features in the bounding box
6120	Query for geometry envelope
6121	Count the number of geometries
6122	Query the query for the bounding box
6123	Count the number of features in the bounding box
6124	Get the bounding box of the bounding box
6125	Gets the geometry metadata .
6126	Get a feature row from a cursor .
6127	Get the row row for the given geometry .
6128	Get the tiles for a feature table
6129	Get the features for a tile table
6130	Get the bounding box for the bounding box
6131	Query by base id
6132	Returns a list of base ids for the user mapping table .
6133	Returns the unique IDs of the user mapping table .
6134	Delete by base id
6135	Delete by related id
6136	Delete items from base id .
6137	Builds where where related id and related id
6138	Create a GeoPackage
6139	Delete the database
6140	Rename the GeoPackage
6141	Rename the name
6142	Get all GeoPackageMetadata
6143	Get the GeoPackage metadata
6144	Get the GeoPackage metadata
6145	Get the GeoPackageMetadata .
6146	Is external path?
6147	Get the external package at the path
6148	Get metadata of a metadata .
6149	Get metadata for a column .
6150	Get metadata by name
6151	Create GeoPackage metadata .
6152	Called when the view is created .
6153	Add a parallax to the view .
6154	Inflates the ViewInflater .
6155	Creates a custom view .
6156	Appends the given event to the given buffer .
6157	Find logback config file from system properties .
6158	Gets the URL for the given filename .
6159	Automatic configuration .
6160	Add status on a resource .
6161	Convert socket address to string .
6162	New executor service .
6163	Start all converters .
6164	Subclasses should override this method .
6165	Adds a substitution property .
6166	Gets the value of a property .
6167	Compiles a converter .
6168	Returns an Eopt node .
6169	Parses a token .
6170	Escape the given string .
6171	Convert a fixed date to a regular expression .
6172	Initialize an event .
6173	End evaluator .
6174	Initialize this instance .
6175	Creates a new ContextSelector using the given String .
6176	Setup properties .
6177	Gets the path of the external storage directory .
6178	Gets the database directory .
6179	Returns the absolute path of the application .
6180	Evaluate the logging event .
6181	Returns the discriminator value for the given event .
6182	Update mask .
6183	Returns the chain decision chain .
6184	Creates the key managers .
6185	Create trust managers .
6186	Creates a keystore factory from system properties .
6187	Returns location from system property .
6188	Returns the URL for the given location .
6189	Returns true if the converter is a Throwable .
6190	Stop logging context .
6191	Prints out information about the given threshold .
6192	Prints information about the given context .
6193	Print a warning .
6194	Writes the first line of a throwable .
6195	Gets the entry from the map .
6196	Called when a life occurs .
6197	Creates a FormatInfo object from the given string .
6198	Rename a file .
6199	Checks if the source file is on the same volume .
6200	Returns the value of the environment variable .
6201	Returns the value of a system property .
6202	Sets the mdcProperty map .
6203	Outputs MDC output to a String .
6204	Extract the stack trace elements from the given class .
6205	Checks if the class is in the framework .
6206	Adds a new status .
6207	Adds a status listener .
6208	Lookup an implicit action .
6209	Returns the applicable actions for the given element .
6210	Set the ClassLoader
6211	Gets the value of a property .
6212	Gets a boolean property .
6213	Decompresses a name .
6214	Gets method descriptors .
6215	Returns an array of property descriptors for the given class .
6216	Start the appender .
6217	Adds an onConsoleStatus instance to the given context .
6218	Called when a property has been pushed .
6219	Returns the discriminator value for the given event .
6220	Determine if the given logging event is ignored .
6221	Starts the shutdown hook .
6222	This method is called when the logback hook is invoked .
6223	Returns the list of supported protocols .
6224	Returns the enabled cipher suites .
6225	Returns the array of strings that are included in the given list .
6226	Convert a string to a scope .
6227	Sets the properties for the given scope context .
6228	Add an appender .
6229	Removes the given appender from the list .
6230	Removes the given appender from the list of appenders .
6231	Sets the parent level of this logger .
6232	Call the appenders on the logger .
6233	Detaches the given appender from the application .
6234	Create a child logger by name .
6235	Call this method to get the filters from a marker
6236	Logs a SLF4J logging event .
6237	Returns the socket for the given delay .
6238	Creates a new parent directory if necessary .
6239	Returns the integer value as an integer .
6240	Converts an integer to a Level .
6241	Returns the set of URLs of a resource .
6242	Returns the URL of a resource .
6243	Returns the class loader for the given object .
6244	Get the ClassLoader as a ClassLoader
6245	Gets the class loader for the given class .
6246	Start the tag encoder .
6247	Returns the tag for the given event .
6248	Initialize the configuration element .
6249	Returns the index of the separator of the specified index .
6250	Evaluates the given event .
6251	Returns the client thread name for the given socket .
6252	Checks if two files are on the same file .
6253	Start the mail session .
6254	Appends an event to the queue .
6255	Sends a buffer to the buffer .
6256	Adds a new MDC value pair .
6257	Creates a converter for the given keyword .
6258	Creates a composite converter for a given keyword .
6259	Determine compression mode .
6260	Configure the configuration .
6261	Configure a configuration file .
6262	Configure the configuration from the given InputStream .
6263	Builds the interpreter .
6264	This method is used to configure the configuration .
6265	Call this method to execute the command .
6266	Gets a property .
6267	Sets the name of the context .
6268	Returns true if the context has status listener .
6269	Gets the last reset date .
6270	Start parsing .
6271	Get the effective converter map .
6272	Returns the file header .
6273	Returns the file footer .
6274	Start the appender .
6275	Starts the end of the stack .
6276	Creates a copy of clients .
6277	Adds a client to the list .
6278	Remove a client from the list .
6279	Returns a copy of the context map .
6280	Returns the value of the method of the given type .
6281	Gets the chain decision chain .
6282	Determines if the OSGi platform is an Android OS .
6283	Initializes the context .
6284	Returns all files in a folder .
6285	Print the status of the status of the current status .
6286	Convert a string representation of the numeric facility to the corresponding numeric value .
6287	Gets the database file .
6288	Removes expired logs .
6289	Checks if the last check is expired .
6290	Append a log event .
6291	Append the properties of the event .
6292	Bind an event to the database .
6293	Converts an object to a string .
6294	Computes the mask for the given event .
6295	Returns a map of properties for the given event .
6296	Insert exception .
6297	Returns the length of the length of this element .
6298	Returns the effective level .
6299	Sets a property .
6300	Returns true if the given class can be instantiated .
6301	Returns a child map of child values .
6302	Process an include event
6303	Open an input stream .
6304	Remove head and tail head and tail .
6305	Returns true if the server is started .
6306	Returns true if this exception is transient .
6307	Sets default hosts .
6308	Ensure the local index exists .
6309	Updates the database .
6310	Sync the mirror if necessary .
6311	Wait for a task .
6312	List all indexes in offline .
6313	Converts an input stream to a string .
6314	Converts an input stream to a byte array .
6315	Consumes connection .
6316	Returns the list of hosts that are healthy .
6317	Sets the type .
6318	Starts the query .
6319	Adds a value to the cache .
6320	Get a value from the cache .
6321	Waits for all threads .
6322	Compares two strings .
6323	Reports a failure to the agent .
6324	Copy a directory to a target directory .
6325	Initializes the simulation properties .
6326	Gets the value of the static field .
6327	Gets a method by its name .
6328	Formats a long value .
6329	Formats a double .
6330	Formats a long .
6331	Reads a JSON syntax character .
6332	Parse a hex value .
6333	Writes a JSON string .
6334	Write an integer value .
6335	Write a double .
6336	Reads a JSON string .
6337	Reads a JSON numeric character .
6338	Read a numeric numeric value .
6339	Read a double .
6340	Read JSON string .
6341	Execute the given method call .
6342	Invokes a request .
6343	Enqueue a method call .
6344	Gets the resource for the given location .
6345	Updates the decoration .
6346	Refresh the RepositoryView
6347	Get the ResourceHistoryView
6348	Open an editor with the given name .
6349	Reports an authentication failure .
6350	Prompts the authentication for the given server .
6351	Create the default page .
6352	Start the thread .
6353	Sets whether the node should be kept alive .
6354	Sets whether the node should be omitted .
6355	Sets the owner .
6356	Adds a factor factor .
6357	Create a new condition term .
6358	Returns true if the given condition term matches the given condition .
6359	Get DDL content .
6360	Loads the configuration file .
6361	Reads the configuration file .
6362	Create a menu for this control .
6363	Add response body .
6364	Adds a href to the root .
6365	Inserts a new href before the new href .
6366	Remove a href from the root .
6367	Adds a prop .
6368	Gets the href of the element .
6369	Gets the status .
6370	Get the top stack frame for the given value .
6371	Returns true if the given class is a subtype of the given class .
6372	Checks if the given proposal is present in the list of proposals .
6373	Clone a node .
6374	Resets the input stream .
6375	Create the actions .
6376	Adds a connection to this connection .
6377	Returns the value of the specified property .
6378	Removes a connection from this source .
6379	Sets the new location .
6380	Sets the value of the specified property .
6381	Sets the size of the gauge .
6382	Returns a string representation of the given constraints .
6383	Add lock entry .
6384	Adds a child vertex to this vertex .
6385	Removes a child from this vertex .
6386	Starts the bundle .
6387	Stop the bundle .
6388	Gets the string value for the given key .
6389	Gets the resource bundle .
6390	Gets the formColors for the rule builder .
6391	Sets the date time .
6392	Sets date time .
6393	Creates an error status .
6394	Log an error .
6395	Adds a field editor .
6396	Adjust the grid layout .
6397	Apply the font .
6398	Calculates the number of columns .
6399	Initialize the fields .
6400	Fire a property change event .
6401	Set the active editor .
6402	Adds the menu items to the wizard .
6403	Determine dialect .
6404	Creates a context for the given locator .
6405	Save the file .
6406	Create table listeners .
6407	Create a Table
6408	Adds a value to the given URL .
6409	Puts an entry into the table .
6410	Adds a new node to this node .
6411	Adds a child to this node .
6412	Sets the file .
6413	Adds a new condition .
6414	Adds a state token to the resource URI .
6415	Returns true if the given condition matches the given condition .
6416	Gets the property .
6417	Gets the status .
6418	Set the property .
6419	Retrieves the last line from the input string .
6420	Gets the last non - dash line from the input text .
6421	Binds a string with the given id .
6422	Binds two bindings .
6423	Binds a message to a bundle .
6424	Creates the process .
6425	Creates a sample of the process sample .
6426	Gets the runtime id .
6427	Visit a Retrie .
6428	Visit a node .
6429	Generate dot id .
6430	Add a remove operation .
6431	Add a set property .
6432	Returns a new locator for a resource URL .
6433	Gets the presentation recurrence .
6434	Returns true if the given object is the same as the same status .
6435	Returns true if the given condition is contained in this factor .
6436	Create a condition from the stream tokenizer .
6437	Add pages .
6438	Executes a DELETE request .
6439	Perform a POST request .
6440	Get the status of a job .
6441	Executes the pull operation .
6442	Handles pullResults .
6443	Sets the value at the given index .
6444	Add an active lock .
6445	Removes all completion proposals for a given prefix .
6446	Read prefix .
6447	Calculates the rows of a vertex .
6448	Draw the border .
6449	Returns the edit part for the given model element .
6450	Returns an image descriptor for the specified path .
6451	Declares an image .
6452	Adds a vertex to the graph .
6453	Returns the index of the given vertex .
6454	Returns the width of all rows in the table .
6455	Dumps all vertices in the graph .
6456	Optimize the matrix .
6457	Loads a retree model using the given contents .
6458	Initialize the graphical view .
6459	Draws a new graph .
6460	Gets the breakpoint breakpoint .
6461	Sets the href attribute .
6462	Determine if the device is talk to .
6463	Copy the specified properties to the specified destination .
6464	Examine the response .
6465	Extract properties from a list of properties .
6466	Gets the content of the response .
6467	Returns an enumeration of the currently locked locks .
6468	Gets the value of a property .
6469	Perform the head of the request .
6470	Requests a lock .
6471	Move the specified file to the specified destination .
6472	Perform a check on the device .
6473	Refresh the lock .
6474	Removes all properties of the specified collection .
6475	Removes a property .
6476	Sets the content of an input stream .
6477	Sets the properties .
6478	Sets a property .
6479	Unlocks the lock .
6480	Updates the specified version .
6481	Perform version control .
6482	Performs a DELETE operation .
6483	Examine status code .
6484	Returns true if the given property has a child of the given property .
6485	Writes the request body to the output stream .
6486	Converts a byte array to a hex string .
6487	Converts an array of integers to a hexadecimal string .
6488	Sets the value of the property .
6489	Sets whether the node is a property name .
6490	Set property .
6491	Removes the last word from a prefix .
6492	Update the tree .
6493	Writes the content to the output stream .
6494	Step over the current thread .
6495	Marker errors for parsing errors .
6496	Skip whitespace .
6497	Adds a resource to the target location
6498	Commit changes for a file
6499	Gets the age .
6500	Returns the response length .
6501	Returns the maximum amount of forward messages .
6502	Returns whether the property should be overwritten .
6503	Gets the psthrough .
6504	Gets the timeout .
6505	Sets the value of a property .
6506	Sets the timeout .
6507	Open DDL file .
6508	Parse a file .
6509	Extract object metadata from text .
6510	Strip object metadata .
6511	Adds tokens to the tree .
6512	Returns the children of the given string .
6513	Gets the children of the given object .
6514	Adds a child node to the list .
6515	Print the tree .
6516	Prints the contents of a node .
6517	Prints the number of tabs .
6518	Reads a JsonValue from a string .
6519	Get an image descriptor by id .
6520	Invokes the request .
6521	Sets a request header field .
6522	Creates the sample sample sample .
6523	Create rule .
6524	Create the rule flow .
6525	Creates the sample flow .
6526	Gets the selected IU .
6527	Create an image with the given format .
6528	Gets the field name .
6529	Returns the evaluator for this node .
6530	Returns the value of the alpha node .
6531	Adds the properties from a resource .
6532	Send baseline control .
6533	Bind a member to a member .
6534	Gets the locator for a member .
6535	Optimize the graph .
6536	Initialize the controls .
6537	Validate the page .
6538	Generate an entity tag .
6539	Returns the opposite of the vertex .
6540	Validate OTP
6541	Checks if the user belongs to the user .
6542	Get username from file
6543	Adds a key to a file
6544	Verify OTP OTP .
6545	Clears the password .
6546	Returns the public id for the given OTP .
6547	Checks if the given OTP format is valid .
6548	Create a new evaluation .
6549	Create a new Evaluation instance
6550	Clear the cache .
6551	Returns true if the JVM is a Jdk 15 . 1 . 5 . 1 . 5 . 1 . 5 . 5 . 1 . 5 . 5 . 1 . 5 . 1 . 1 . 1 . 5 . 1 . 1 . 1 . 5 . 1 . 1 . 1 . 1 . 1 . 1 . 1 . 1 . 1 . 1 . 1 . 1 . 1 . 1 . 1 . 1 . 1 . 1 . 1 . 1 . 1 . 1 . 1 . 1 . 1 . 1 . 1 . 1 . 1 . 1 . 1 . 1 . 1 . 1 . 1 . 1 . 1 . 1 .
6552	Returns the package name of the given object .
6553	Gets the package name .
6554	Returns a unique descriptor for the given object .
6555	Gets the type of the argument .
6556	Returns true if two classes are more specific .
6557	Gets the appropriate method for the given target object .
6558	Gets the value of a property .
6559	Returns a map of property descriptors for the given class .
6560	Get a PropertyDescriptor from an array of properties
6561	Returns a read method for the given name .
6562	Read a single character .
6563	Parse a projection .
6564	Selects a select .
6565	Convert an object to a long value .
6566	Returns a double value .
6567	Convert a value to a BigInteger .
6568	Convert value to BigDecimal .
6569	Converts an object to a string .
6570	Returns the numeric type of the given value .
6571	Converts an object value to a type .
6572	Convert value to integer .
6573	Returns the type of the numeric type .
6574	Gets the type of the two types .
6575	Creates an integer from the given type .
6576	Pop the current evaluation .
6577	Generate OGNL getter method .
6578	Generate OGNL setter method .
6579	Flattens the tree .
6580	Initializes this node .
6581	Escapes a character .
6582	Sets the root context .
6583	Get the value of an expression
6584	Set the value of an expression .
6585	Sets the value of an OGNL node .
6586	Returns true if the expression is a constant .
6587	Returns the default watch service id .
6588	Wait until the server started .
6589	Read file .
6590	Reload the classloader .
6591	Retrieves an archive by its name .
6592	Checks if an archiver is found .
6593	Reads the contents of a file .
6594	Create a project .
6595	Add a system property .
6596	Add a system property .
6597	Open a new folder dialog .
6598	Change the directory .
6599	Refresh the button state .
6600	Creates new file observer .
6601	Returns the selected folder .
6602	Creates a new folder .
6603	Checks if the given file is a valid directory .
6604	Starts a background job .
6605	Start a new paragraph .
6606	Updates the end tag .
6607	Handle motion .
6608	Get the crop rectangle .
6609	Compute the layout .
6610	Registers a listener for the given media .
6611	Add a span to the span .
6612	Get the spinner view .
6613	Gets the drop down view at the specified position .
6614	Convert a text to a RTF HTML
6615	Calculates the spans within the specified span .
6616	Creates a new file in the target folder .
6617	Determine the original file from the given URI .
6618	Returns the namespace for the given name .
6619	Returns the local name of the given name .
6620	Sets an attribute .
6621	Sets an attribute .
6622	Returns the font name for the specified file .
6623	Gets the font name from a file .
6624	Add a new buffer to the buffer .
6625	Writes a byte array to the output stream .
6626	Writes a byte to the buffer .
6627	Writes an input stream to the stream .
6628	Writes all data to the output stream .
6629	Converts this buffer to a byte array .
6630	Set the font size .
6631	Converts a path to Unix .
6632	Recompute focus .
6633	Ensures that the highlight is visible .
6634	Performs the center of the specified highlight view .
6635	Resets the document locator .
6636	Validate the given string .
6637	Add an element type .
6638	Sets an attribute on an element .
6639	Sets the child with the given parent .
6640	Returns the element type for the given name .
6641	Gets an entity by its name .
6642	Removes all paragraphs from the given editor .
6643	Apply the specified value to the selected text .
6644	Determines if the domain is a valid domain .
6645	Called by the given operation .
6646	Reduces all operations in the specified editor .
6647	Replaces all occurrences of the given string .
6648	Gets the thread status .
6649	Set the decoding options for the given thread .
6650	Returns true if the given thread is capable of decoding .
6651	Decode a file descriptor .
6652	Gets a set of fonts from the assets .
6653	Get the asset fonts for the given context .
6654	Gets the system fonts .
6655	Sets up the XML structure .
6656	Get a reader from an InputSource .
6657	Returns an InputStream for the given public id .
6658	This method is called when an attribute has been changed .
6659	Expands all entities .
6660	Lookup entity .
6661	Restore the saved element .
6662	Pop the current element .
6663	Restart the current element .
6664	Returns the prefix of the given name .
6665	Returns true if the given prefix is foreign .
6666	Remove quotes from a string .
6667	Splits a string into an array of strings .
6668	Parses an element .
6669	Make a name from a string .
6670	Saves the current instance state .
6671	Unregisters all edited items .
6672	Handle main thread .
6673	This method is called by the main thread .
6674	Returns the base matrix for the base bitmap .
6675	Returns the maximum zoom level .
6676	Returns true if the specified text exists in the editor .
6677	Finds a list of spans from a paragraph .
6678	Encode uri query string .
6679	Decode query string .
6680	Picks a directory from a file .
6681	Rotate bitmap .
6682	Sets the output .
6683	Writes a character to the output stream .
6684	Writes a string to the output stream .
6685	Returns true if the given value is a boolean attribute .
6686	Writes a UTF - 8 encoded string .
6687	Write namespace declarations .
6688	Write name .
6689	Creates a stream if it exists .
6690	Wait until a stream is activated .
6691	Complete the snapshot snapshot with snapshots .
6692	Wait for the next request to finish .
6693	Get records from stream .
6694	Executes an action with a retry limit
6695	Attempts to execute an action between two GET requests .
6696	Checks if the bucket is accessible .
6697	Recover the store from the given snapshot .
6698	Trigger wildcard expansion handler .
6699	Replaces all occurrences of the old pattern with the old pattern .
6700	Removes all characters from the input string .
6701	Add a report report .
6702	Updates the configuration with the given key .
6703	Gets the configuration properties .
6704	Creates an input stream for auto detection .
6705	Converts a map of preprocessors to a post processor .
6706	Compiles a Rhino script .
6707	Reloads the cache .
6708	Reload the model with the given value .
6709	Gets the wrapped ServletRequest .
6710	Returns a transformer transformer that transforms the base name to a string .
6711	Handle an error stream .
6712	Sends a redirect to the servlet .
6713	Processes a resource .
6714	Create a function handler for expansion .
6715	Locates an InputStream .
6716	Creates a WroConfiguration instance .
6717	Registers change listeners .
6718	Process request .
6719	Sets the configuration .
6720	Identify duplicate group names .
6721	Merges the given imported model into this one .
6722	Locates an InputStream for the given URI .
6723	Applies post processors .
6724	Decorate a processor .
6725	Performs the processing of a resource .
6726	Splits an option into an array of options .
6727	Loads properties from an input stream .
6728	Read properties from a string .
6729	Creates a custom manager factory .
6730	Persist resource fingerprints .
6731	Checks if the given group is a target group .
6732	Extend the plugin classpath .
6733	Gets the resource as stream .
6734	Initialize WroManagerFactory .
6735	Sets the transformers .
6736	Evaluate handlebars .
6737	Merges a list of resources .
6738	Merges a list of resources .
6739	Run the given resources in parallel .
6740	Applies the preprocessors to the given resource .
6741	Decorate a resource processor .
6742	Persist the fallback storage .
6743	Get all fields of an object .
6744	Rewrite a CSS url .
6745	Computes a new image location
6746	Add a new model transformer .
6747	Sets the processed bundle .
6748	Initialize the aggregated folder path .
6749	Extract variables from the body .
6750	Parses all variables in the given string .
6751	Replace all variables in the given string .
6752	Converts a post processor to a resource processor .
6753	Checks if the given resource type is eligible for the given resource type .
6754	Applies a gzipped response to the response .
6755	Returns a path processor that will be included in the given path .
6756	Removes a path pattern from the given list of patterns .
6757	Creates a new resource change handler .
6758	Remember the fingerprint for the given resource .
6759	Processes a CSS import .
6760	Filters the given collection .
6761	Checks if the request is minimized .
6762	Finds a list of imported resources .
6763	Computes the absolute URL for the given resource uri .
6764	Converts a list of items to a string .
6765	Extract aliases from a CSV string .
6766	Creates the context .
6767	Evaluates the given reader and returns the result .
6768	Evaluates a script and returns the result .
6769	Processes the bundle bundle .
6770	Determines if the request is a handler .
6771	Create the request path for the handler .
6772	Rename a group .
6773	Compute the destination folder for a resource type .
6774	Process group .
6775	Checks if a change is required .
6776	Locates an InputStream for the given URI .
6777	Creates a new pool .
6778	Locate an InputStream for the given uri .
6779	Open a JAR file .
6780	Extract path from URI .
6781	Checks if the request is minimized .
6782	Add a URI locator factory to be used by this factory .
6783	Decorate a WroModelFactory .
6784	Adds a requirement .
6785	Processes the given string .
6786	Log summary .
6787	Called when a resource is processed .
6788	Gets the lock for the given key .
6789	Creates a new process .
6790	Parses a comma separated list of properties .
6791	Get the task info .
6792	Gets the compilation command .
6793	Parse header .
6794	Adds no caching headers to the map .
6795	Gets path info from given location .
6796	Gets the servlet path from the given location .
6797	Checks if the given path matches the request .
6798	Loads a pattern with the specified key .
6799	Copies the contents of a reader to a writer .
6800	Creates a temporary file .
6801	Clean up an image URL .
6802	Sets an attribute .
6803	Generate the data URI for the given input stream .
6804	Generate data URI .
6805	Sets the context .
6806	Unset the context .
6807	Check if a resource is changed .
6808	Called when an exception occurs .
6809	Check if a resource has changed .
6810	Updates the hash for a group .
6811	Checks if all resources have the given type .
6812	Creates a process .
6813	Encodes an object into a string .
6814	Process groups .
6815	Parse group .
6816	Create a group .
6817	Parse resource .
6818	Get the resources for a group .
6819	Log the timer at the specified level .
6820	Stop a timer .
6821	Gets a timer with the given name .
6822	Gets a new timer with the given name .
6823	Prints the saturation ratio .
6824	wake up the workers waiting for all workers .
6825	Updates the number of processes that have been processed .
6826	Updates the number of jobs that have been updated .
6827	Updates the counter with the given value .
6828	Default implementation of default visitor .
6829	Instantiates the ontology from the given property .
6830	Ensure that the axiom has been loaded .
6831	Restore the saturation state .
6832	Returns true if the classification is consistent .
6833	Restore the taxonomy from the topology .
6834	Restore the instance taxonomy .
6835	Gets the evidence for the ontology .
6836	Initialize the executor .
6837	Invalidates all the system stages .
6838	Returns a collection of all the items in this collection .
6839	Returns a collection of removed individuals .
6840	Throws an exception if the given method is unsupported .
6841	Removes the element at the given position .
6842	Removes the element at the specified position .
6843	Returns the position of the specified element .
6844	Returns true if the element at the specified position in the array .
6845	Adds an element to the array .
6846	Checks the occurrence numbers .
6847	Add the timebook to this class .
6848	Add a timer to this rule .
6849	Put a key value into the map .
6850	Remove an entry from the list
6851	Increases the size of the map .
6852	Shrinks the keys in the map .
6853	Saves the configuration to disk .
6854	Prints the declarations of a class .
6855	Collects all instances of a given node .
6856	Removes all elements from the bucket .
6857	Combines a multiset hash .
6858	Combine two lists .
6859	Copies the contents of an input stream to the output stream .
6860	Gets the monitor monitor monitor .
6861	Process a taxonomy .
6862	Submit an input to the buffer .
6863	Append an EKObject to the end of the end of the given EK object .
6864	Marks the given query for the given query .
6865	Add a direct type node .
6866	Checks the chain of objects in the given chain .
6867	Returns an unmodifiable set that matches the given condition .
6868	Returns a set of elements in the given set .
6869	Adds an element to the set .
6870	Removes an object from the set .
6871	Adds the given class to this CounterCounter .
6872	Log the memory usage of the given logger .
6873	Set configuration options .
6874	Shutdown the reasoner .
6875	Print header .
6876	Print values .
6877	Returns a string consisting of the specified character .
6878	Add a new rule counter .
6879	Writes a resource .
6880	Gets the action input parameter .
6881	Returns the property descriptor for the given property path .
6882	Gets the required parameters .
6883	Checks if class is single value type .
6884	Adds a rel .
6885	Sets the media type .
6886	Adds the hrelang string to the link .
6887	Adds a revision .
6888	Adds a parameter to the link .
6889	Expands the URI based on the given arguments .
6890	Gets the relation names .
6891	Gets the list of revisions .
6892	Checks if the given action is satisfied .
6893	Returns the string representation of this value .
6894	Returns true if the given property is hidden .
6895	Determines if the property contains the include value .
6896	Returns true if the annotation should be included .
6897	Returns true if the request is required .
6898	Returns the default value for this request .
6899	Gets the parameter name .
6900	Gets the property name from the input parameter .
6901	Returns the vocab for the mixin source .
6902	Returns the query string .
6903	Appends the form for the given action .
6904	Write an input button .
6905	Append the input value to the given child .
6906	Adds the given AffanceDescriptor to this builder .
6907	Returns a copy of the URITemplateComponents of this URI .
6908	Returns the URI components for the given action descriptors .
6909	Gets the first node with the given name .
6910	Get first node by rel
6911	Returns an iterator over all data in this node .
6912	Creates a new PersistentHashMap from the given elements .
6913	Creates a new PersistentTreeMap .
6914	Returns an empty tree map .
6915	Returns an immutable set of entries .
6916	Returns the last key in this map .
6917	Construct an Xform instance from an Iterable .
6918	Iterate over the given iterable and applies the given operation to the given iteration .
6919	Applies the given predicate to the given predicate .
6920	Returns a new iteration of this operation with the given reducer .
6921	Creates a tuple from the given entry .
6922	Perform an item on a predicate .
6923	Registers a list of classes .
6924	Returns the node at the specified index .
6925	Appends a value to the tree .
6926	Concatenates a collection of items into a new vector .
6927	Creates a MutableSet .
6928	Creates a MutableList .
6929	Creates a new set of items .
6930	Creates an immutable vector .
6931	Creates an unmodifiable iterable from an array of items .
6932	Appends the indentation of the specified length .
6933	Convert an array of objects to a string .
6934	Creates a lazy reference .
6935	Applies the consumer to the producer .
6936	Inserts an item at the specified position .
6937	Returns a copy of the specified items .
6938	Suspend the transaction
6939	This method is called before the async operation is triggered .
6940	Builds a list of components from a JAR file .
6941	Validates a directory .
6942	Create an inheritance link .
6943	Copies all methods from source to destination .
6944	Copies all methods from a destination to a destination class .
6945	This method is used to recursively .
6946	Removes the SbbEntity with the current class loader .
6947	Checks if the given parameter is enabled .
6948	Retrieves the set of REEntity links for the given service component .
6949	Installs the service .
6950	Uninstalls a service .
6951	Determine if the ra link name is referenced by the RA .
6952	Returns the usage parameter set for the given SBB component .
6953	Resets all usage parameters .
6954	Get the profiles for the specified profile table .
6955	Returns the activity table activity for the given profile .
6956	Get profile by attribute name
6957	Display the result .
6958	Applies an array of objects to an array .
6959	Fires a fire event on the given reference .
6960	Bind a name to this node .
6961	Unbind a name .
6962	Looks up a child node by name .
6963	Returns a map of name bindings for this node .
6964	Returns the next event entry for the given event .
6965	Returns true if this trace level is higher than the given trace level .
6966	Extracts a jar from a jar file .
6967	Puts the given InputStream into an OutputStream .
6968	Adds an object to the node .
6969	Attaches a SbEntity to the node .
6970	Removes the specified SBBEntity from the node .
6971	Returns true if all Sb entities attached to this node .
6972	Gets the list of Sb entities attached to this node .
6973	Attaches a timer to a timer .
6974	Detaches a timer from the timer .
6975	Returns true if the timer is attached .
6976	Gets the set of timed timers .
6977	Add a name bound .
6978	Unbound name .
6979	Returns true if this node is bound .
6980	Returns a copy of this node .
6981	Sets the cmp attribute .
6982	Returns the value of the cmp attribute .
6983	Returns a copy of this node .
6984	Initialize notification information .
6985	Send a usage notification
6986	Download a DUUID from the given URL .
6987	Update the deployed components .
6988	Installs a deployment .
6989	Uninstalls a deployment .
6990	This method is called when the deployment is stopped .
6991	Display the status of the deployment .
6992	Returns true if log record is logged .
6993	Gets the logger for the given log record .
6994	Returns a set of components that have been added to this component .
6995	Gets the SbbEntityIDs .
6996	Gets the permissions from the current policy holder .
6997	Gets the code sources .
6998	Checks if a profile exists .
6999	Remove the profile from the database .
7000	Update configuration properties
7001	This method is invoked by the RA .
7002	Called by the RA .
7003	Activate the entity adaptor .
7004	Deactivates the entity .
7005	Schedules the end of all activities .
7006	Remove this entity from this object .
7007	Gets the resource adaptor interface .
7008	Called when the service is active .
7009	Gets the ActivityHandle reference .
7010	Called when an activity is ended .
7011	A configuration update .
7012	Verify configuration properties .
7013	Called when the resource is stopping .
7014	This method is called when the resource is active .
7015	Unconfigures the RA .
7016	Unset the resourceAdaptorContextContext .
7017	Unset the FaultTolerantAdaptorContextAdaptorContextContext .
7018	Build the profile attribute map .
7019	Resume the transaction context .
7020	Gets the activity context handles .
7021	Removes the container .
7022	Gets the usage param .
7023	Decorate the abstract class .
7024	Fires an event on an event .
7025	Fires an event .
7026	Get the profile for the given profile ID
7027	Gets the service usage parameter set .
7028	Gets abstract methods from a class .
7029	Gets the interfaces from an interface .
7030	Create an object pool for the given profile .
7031	Remove an object pool from the pool .
7032	Returns true if the notification source is the owner of the notification source .
7033	Raises an alarm .
7034	Gets the usage parameter set .
7035	Gets the specification descriptor .
7036	Determine if the given deployment unit is accept .
7037	Initialize the deployment .
7038	Start the deployable unit .
7039	Stop the deployment
7040	Display the status of the deployment .
7041	Executes after commit actions .
7042	Executes the action actions .
7043	Executes after rollback actions .
7044	Executes the before commit actions .
7045	Executes the before commit actions .
7046	Returns the names of the names of all Tracer levels .
7047	Creates a new Tracer object .
7048	Remove replicated data .
7049	Registers the editor .
7050	Processes the usage parameters .
7051	Returns the object pool for the given service ID .
7052	Create an object pool for the given service .
7053	Executes the activity .
7054	Start an activity context .
7055	Ends an activity .
7056	Checks the preconditions for the given event type .
7057	Fires a fireable event .
7058	Generate the concrete class for the SbbLocalObject .
7059	Make getter method .
7060	Convert a string value to an object .
7061	Sets the profile ID .
7062	Extract message message from result .
7063	Determines if the specified object exists .
7064	Returns true if the collection contains all of the children .
7065	remove all elements from this collection
7066	Returns true if this level is higher than the given level .
7067	Resolve internal state .
7068	Remove all classes from the classpath .
7069	Add a profile call to the profile .
7070	Gets a profile object from the transaction table .
7071	Pass the profile object on the transaction .
7072	Sets the component ID as text .
7073	Generate the concrete class for the activity context .
7074	Generate abstract methods .
7075	Sets the value of a cmp attribute .
7076	Add a name binding .
7077	Removes all names from the cache .
7078	Remove a name binding .
7079	Attach a timer to the cache
7080	Cancels all timers .
7081	Attaches an SbbEntity from the cache .
7082	Detaches a SbbEntity from the cache .
7083	Gets the set of Sbb attachment IDs .
7084	Called when the activity is ended .
7085	Adds a component to this deployment .
7086	Returns a collection of all the external dependencies contained in this context .
7087	Determines if the dependencies are satisfied .
7088	Returns true if the deployment unit has already been deployed .
7089	Gets the management actions .
7090	Gets the uninstall actions .
7091	Determine if the component id is referring to this component .
7092	Close the profile
7093	Get the object name for the profile table
7094	Enables write mode .
7095	This method is called before the profile is set .
7096	This method is called after the connection has changed .
7097	Invoked before the getCmpField
7098	This method is called after the getCmpField has been set .
7099	Initialize the management method invocation .
7100	This method is called after the management method invocation .
7101	Deletes a directory .
7102	Creates the default constructor .
7103	Creates the default usage parameter setter .
7104	Create SbbEntity and setter for SbbEntity .
7105	Create fire event methods .
7106	Create the getSbbActivity interface .
7107	Adds an expression to this list .
7108	Bind a key to the wrapper factory .
7109	Binding the target name .
7110	Decorate the abstract class .
7111	Invokes a method on a proxy .
7112	Gets the real field name .
7113	Set the value of a field .
7114	Gets the value of the field .
7115	Sets the profile context .
7116	Initialize the profile .
7117	Unset the profile context
7118	Gets the profile local object .
7119	Fires a profile event if any .
7120	Gets the profile wrappers .
7121	Creates a new class with the given name and interfaces .
7122	Create inheritance link .
7123	Adds an annotation .
7124	Adds the member values to an annotation .
7125	Returns the activity context for the given activity .
7126	Gets the class pool .
7127	Sets the deployment unit .
7128	Undeploys the classloader .
7129	This method is used to start the activity .
7130	Checks if the given class is a class or interface .
7131	Get all abstract methods for a given interface .
7132	Resolve an entity .
7133	Checks if the given tracer name is valid .
7134	Handle a single profile query .
7135	Checks the dependencies of a Slee component .
7136	Creates a temp deployment directory for the given deployment .
7137	Gets the entity manager .
7138	Starts the execution .
7139	Switch a ClassLoader to a ClassLoader
7140	Make safe proxy call .
7141	Checks the current transaction .
7142	Converts the given time to a TTL .
7143	Check if profile class is visible .
7144	Gets the profile object for the current transaction .
7145	Returns a list of logger names matching the given regular expression .
7146	Resets the logger levels .
7147	Clear all loggers for the given name .
7148	Add a new logger .
7149	Add socket handler .
7150	Remove a handler .
7151	Convert tracer name to logger name .
7152	Sets the level of the tracer to the logger .
7153	Assigns the log4j4j log4j .
7154	Resets the cache flags .
7155	Send a trace message .
7156	Checks if a tracer name is valid .
7157	Writes the given vendor data to the given output stream .
7158	Deserialize an object from an input stream .
7159	Adds a domain .
7160	Returns all the dependencies of this class loader .
7161	Finds a class by name .
7162	Look up a URL for the given name .
7163	Returns an enumeration of resources for the given name .
7164	Creates and registers the profile mbean .
7165	Resume the given transaction .
7166	Returns a set of SbbIDs for the given component .
7167	Returns a set of resource adaptor entities for the given component .
7168	Initialize the Slee .
7169	Shuts down the container .
7170	Validate the state transition .
7171	Generate the name parameter setter for the given profile object .
7172	Set an update field .
7173	Build a PolyBC database .
7174	Sets the value of the specified field .
7175	Executes the given transaction .
7176	Creates a new RegionRequest object from a string .
7177	Returns the region of this box .
7178	Resolves a rectangle with relative dimensions .
7179	Determine if the annotation is on the JSON document .
7180	Sets the list of views .
7181	Adds a view to the resource .
7182	Sets the renderings .
7183	Adds a resource to the resource .
7184	Merges an image profile .
7185	Merges two image profile .
7186	Creates a new RotationRequest from a string .
7187	Creates a SizeRequest object from a string .
7188	Initialize the device bridge .
7189	Gets the dump .
7190	Try to handle a PopBox
7191	Push a handle to the device .
7192	Clean up temporary directory .
7193	Pulls the dump to the pc
7194	Retrieves the crash log .
7195	Remove tabs from text editor .
7196	In indentation of text .
7197	Tokenize HTML .
7198	Converts the given text to HTML .
7199	Escapes special characters within a tag .
7200	Add an exception .
7201	Close all statements .
7202	Finds the parent class of a given type .
7203	Writes the class to the file .
7204	Write bit vector .
7205	Append bit strings to a bit vector .
7206	Deserialize this stream .
7207	Retrieves a list of objects from a path .
7208	Retrieves a list from a path .
7209	Sets the Klov reporter object .
7210	Add screen capture from image path
7211	Set system info
7212	Returns a Selector that selects the given property .
7213	Creates a Selector that selects the given property .
7214	Extract validation annotations .
7215	Retrieves all annotations for a given property .
7216	Finds the annotations for the given property .
7217	Gets the property descriptor .
7218	Helper method to perform a lookup .
7219	Creates an object from a map .
7220	Creates an object from the given map .
7221	Creates a new instance of the given value map .
7222	Converts an object to a map .
7223	Convert an object to a Map .
7224	Gets values for an annotation .
7225	Creates a composite validator .
7226	Looks up a list of validatorValidators and apply it to the validator .
7227	Lookup a validator in the registry .
7228	Apply validation properties to a validator .
7229	Remove property from properties map .
7230	Sets the current time .
7231	Returns the size of the cache .
7232	Hashes the given object .
7233	Default options .
7234	Open database .
7235	Put all values in the database .
7236	Removes all keys from the database .
7237	Returns the key value of the database .
7238	Load all keys from the database .
7239	Closes the database .
7240	Reduces a value by a long array .
7241	Reduces the value of the given array .
7242	Returns the variance of the specified array .
7243	Computes the mean value of a long array .
7244	Invoke a method from an object .
7245	Reduce the sum of the elements of a given array .
7246	Converts a timestamp to a ISO UTC date .
7247	Returns true if the given object matches the given criteria .
7248	Creates a Criterion that is not in the specified field .
7249	Creates a Criteria from a List .
7250	Creates a Criteria object from a JSON string .
7251	Adds an array to the end of the list .
7252	Returns the maximum element in the array .
7253	Returns the first element of the specified list .
7254	Returns the last element in the list .
7255	Returns the last element of the given list .
7256	Returns the first element of the given list
7257	Returns the first element in the list .
7258	Returns the first element of an array .
7259	Process a list of maps .
7260	Handles collection of maps .
7261	Creates an object from a map .
7262	Returns the value associated with the given key .
7263	Creates a tool tip with field name and field name .
7264	Generate a label value .
7265	Adds a hexadecimal value to the buffer .
7266	Process the read queue .
7267	Process the write queue .
7268	Starts the data store .
7269	Support the subscript operator at the given index
7270	Slabs a string from a string
7271	Returns true if the specified string is in the specified string
7272	Add a character to a string
7273	Converts the given objects to a string .
7274	Compacts a string
7275	Splits a string .
7276	Splits a string into an array of strings .
7277	Splits a string into an array of strings .
7278	Converts a char array into a string array .
7279	Convert a string to camelCase
7280	Determines if the specified string is inside the specified string .
7281	Converts a string in a string .
7282	Convert a number to a string .
7283	Returns a sorted sort of the given sorts .
7284	Sorts the given list using the given fields .
7285	Returns a comparator for the given fields .
7286	Returns a list of child comparators .
7287	Returns true if the given value is in the map .
7288	Checks if two values are equal .
7289	Checks if two arrays are equal .
7290	Calculates the sum of values in the array .
7291	Rounds the given number to the given one .
7292	Sorts a list of the given sort by ascending order .
7293	Sorts the given list and returns the sorted list .
7294	Sets the field value from a map .
7295	Converts an object to a List .
7296	Creates the SQL statement for the given table .
7297	Deep copy of a list .
7298	Checks if the given value is a field with the given name .
7299	Returns true if the class has a field with the given name .
7300	Returns true if the class has a field with the given name .
7301	Gets the first property of a class .
7302	Gets the sortable field from the given value .
7303	Compares this CacheEntry .
7304	Compares the given time .
7305	Sorts the given list using the given sort order .
7306	Sorts a list of objects based on the given sortBy method .
7307	Sorts the entries in the given map .
7308	Sorts all entries in the given map .
7309	Sorts the keys in the given map .
7310	Sorts an array of objects in the given array .
7311	Returns a universal comparator for the given field .
7312	Creates a UniversalComparator that implements the Comparator .
7313	Returns the value for the given key .
7314	Retrieves a value from the cache .
7315	Returns the order of the count .
7316	Evicts the cache if necessary .
7317	Initialize the class with the given value .
7318	Allocate a new buffer and return it .
7319	Determine if the processing loop should be interrupted .
7320	Handles the input writer .
7321	Check if the writer is empty .
7322	Start monitoring .
7323	Start monitoring .
7324	Gets an object from the map .
7325	Run the query plan .
7326	Filter a group .
7327	Sets the time .
7328	Synchronously flush data to disk .
7329	Close the output stream .
7330	Writes the next buffer to the output stream .
7331	Writes the given buffer to the output stream .
7332	Initialize output stream .
7333	Put all values in the store .
7334	Converts a key to a byte array .
7335	Reads a list of validation metadata for a given property .
7336	Extracts the validator meta data from a string .
7337	Reads the validation meta data for the given class and property name .
7338	Extracts the validator meta data from the given class .
7339	Extract validator metadata from annotations .
7340	Convert annotation data to Validator meta data .
7341	Splits a string into an array of strings .
7342	Splits a string with white space .
7343	Splits a string by delimiter .
7344	Remove all characters from a string .
7345	Splits a string into an array of strings .
7346	Parse a double .
7347	Parse an integer from a string .
7348	Parses a long .
7349	Gets property by path .
7350	Gets fields from an object .
7351	Returns the type of the specified property .
7352	Inject a property value into an object .
7353	Sets the value of a property .
7354	Gets property value .
7355	Gets the value of a property .
7356	Gets an integer property .
7357	Initialize this message .
7358	Creates a message .
7359	Creates a message .
7360	Convert key keys to a list of values
7361	Returns the subject of the validation context .
7362	Parses the given text .
7363	Sends a request to the server .
7364	Deletes a database .
7365	Creates a database .
7366	Returns a list of UUIDs .
7367	List resources .
7368	Trigger a replication operation .
7369	Query for a single value .
7370	Sets the view for descending order .
7371	Synchronize all documents in the database .
7372	Retrieves a design document from the database .
7373	Gets a list of all design documents .
7374	Retrieves a design document from the specified id .
7375	Saves the replicator document .
7376	Returns the replicator document .
7377	Returns all replicator documents .
7378	Remove the replicator .
7379	Finds an object by id .
7380	Finds documents for a given JSON query .
7381	Returns true if the given id exists .
7382	Bulk bulk operation .
7383	Updates an object .
7384	Perform a PUT request .
7385	Perform a POST request .
7386	Perform a DELETE request .
7387	Validates the response .
7388	Sets the entity to the http request .
7389	Add an attachment .
7390	Returns the changes for the feed .
7391	Read next row .
7392	Convert a double to a string
7393	Shuts down the lock .
7394	Writes the given byte array to the stream .
7395	Add tags for the given metric .
7396	Verify that all tables have been created .
7397	Gets namespace id .
7398	Returns true if the given exchange is a query .
7399	Send authentication request .
7400	Returns the verb for the given HTTP method
7401	Generate subject access .
7402	Handle request result .
7403	Handles a client request failure .
7404	Initialize the configuration .
7405	Find jobs for a given time slice .
7406	Converts a list of buckets to a list of buckets .
7407	Ends the exchange .
7408	Find all data from a bucket .
7409	Creates buckets based on the specified time range .
7410	Send a message
7411	Send a message
7412	Send message to producer
7413	Searches for keys matching the cursor .
7414	Sets a value for a given property .
7415	Adds a file to the zip archive .
7416	Replace the text with the given text .
7417	Build a zip file .
7418	Generates metrics for a given component .
7419	Retrieves a content resource .
7420	Fetch the content of an order item .
7421	Upload a transformation to a zip file .
7422	Generate metrics for a collection of components .
7423	Creates a new directory .
7424	Ends a child object .
7425	Register a model for the given type .
7426	Register a renderer for the specified type .
7427	Prepare a template .
7428	Add a domain object to the sip .
7429	Sets a property .
7430	Adds a child object to the collection .
7431	Gets a file from a directory .
7432	Copies the contents of an InputStream to the output stream .
7433	Parse a document from a file .
7434	Parse a document from a Reader .
7435	Get the elements of a parent element .
7436	Returns a stream of nodes in the given parent .
7437	Gets the first child element of a parent element .
7438	Returns a stream containing all child elements of the given parent .
7439	Validates an input stream against an input stream .
7440	Main entry point .
7441	Sets the builder for the given input stream .
7442	Loads a builder from a resource .
7443	Processes an entry and processes it to process an entry .
7444	Encodes the given string ascii characters .
7445	Sets the signature for the given access key .
7446	Removes all whitespace characters from the array .
7447	Sign the request .
7448	Sets data for given object key .
7449	Completes multipart upload .
7450	This method is called when the favorite notifications is changed .
7451	Adds a notification state for the given entry id .
7452	Returns true if the cache has expired .
7453	Gets a notification for a notification .
7454	Retrieve all addonses
7455	Get the Addresse for a given notification
7456	Get all events for a notification
7457	Gets an event .
7458	Get the single notification URL for a single notification .
7459	Returns the Jpa entry for the given entry .
7460	Gets the authentication token .
7461	Returns the number of notification categories .
7462	Adds new categories to the list of categories .
7463	Fetches the SSP notifications for the user .
7464	Creates a notification response .
7465	Maps the response to a notification response .
7466	Maps a NotificationEntry to a NotificationEntry .
7467	Attaches the actions for the given notification entry .
7468	Normalize the link to an SSP entry .
7469	Gets the notification category .
7470	Returns the notification source of the notification source .
7471	Invokes the read notification .
7472	Reads a notification response from a file .
7473	Returns the school id for the given request .
7474	Extracts the user id from the response .
7475	Invoked when the notification is clicked .
7476	Gets the attributes map .
7477	Normalize the puple .
7478	Returns true if the box is contained in the box B .
7479	Calculates the point of a point in a point .
7480	Computes the sign of a point .
7481	Sets the values of a geometry .
7482	Sets the coordinates of the euler .
7483	Converts a polygon to a 4D polygon .
7484	Converts a polygon to a 4 - triangular polygon .
7485	Computes the bounding box of a quadrilateral rectangle .
7486	Sets the polygon inside the rectangle .
7487	Calculates the center of a quadratic quadratic vertex .
7488	Computes the average point for a polygon .
7489	Computes the convex hull of a polygon .
7490	Remove all vertices from a polygon .
7491	Calculates the average of the points of a polygon
7492	Computes the area of a polygon .
7493	Returns true if the quadratic rectangle contains a point .
7494	Returns true if the triangle contains a point .
7495	Calculates the intersection of two points .
7496	Calculates the intersection of two lines .
7497	Computes the intersection between two lines .
7498	Calculates the intersection of two lines .
7499	Returns the intersection between two polygons .
7500	Returns true if the specified ellipse contains the specified point .
7501	Calculates the intersection area of a rectangle .
7502	Get the value of a matrix .
7503	Converts a matrix to a quaternion .
7504	Computes the rotation matrix .
7505	Sets rotation matrix .
7506	Rotate a rotation matrix .
7507	Rotate a rotation matrix .
7508	Sets rotation matrix .
7509	Converts Euler type to a matrix .
7510	Computes the rotation matrix for the specified axis .
7511	Sets the angle .
7512	Retrieves a twist coordinate from a point .
7513	Sets the transformations for the end point .
7514	Interpolates the geometry from the given point .
7515	Solves the centroid of the specified points .
7516	Solves the singular value of a point .
7517	Returns the length of the side of the polygon .
7518	Returns true if the point is inside this polygon .
7519	Converts a Concat matrix to a destination matrix .
7520	Converts a Concat matrix to a destination matrix .
7521	Converts the parameters to a consturalian value .
7522	Converts a Paricariant to a Conicolution object .
7523	Divide p .
7524	Converts a GeoTuple to a matrix .
7525	Converts a GeoTuple to a Tuple3D .
7526	Sets the parameter vector .
7527	Returns the distance between two angles .
7528	Returns true if the line is intersect .
7529	Returns true if the plane is contained in the plane .
7530	Computes the intersection between two points .
7531	Utility method to interpolate the points between two points .
7532	Extract the quaternion from the quaternion .
7533	Constructs a polygon from the input array .
7534	Sets the motion to motion .
7535	Converts a Segment to homography matrix .
7536	Converts a Segment to homography matrix .
7537	Calculates the axis of the axis .
7538	Returns true if the two segments are identical .
7539	Converts a latitude to a unit vector .
7540	Computes the intersection between two points .
7541	Returns the square radius of two points .
7542	Calculates the closest point of a line .
7543	Returns the closest point to the given line .
7544	Returns the closest point in the plane .
7545	Returns the closest point to the given line .
7546	Calculates the point of a point from a vertex .
7547	Transform a point to a point .
7548	Transform a point to a point .
7549	Returns true if the quadr is equal to the specified tolerance .
7550	Returns the acute angle between two points .
7551	Convert a line parameter to a line .
7552	Convert a line to a Line3D object .
7553	Convert a line segment to a line .
7554	Convert a LineSegment to a Line2D .
7555	Convert a point to a line .
7556	Converts a point to a line parameterized .
7557	Convert a line parameter to a line .
7558	Convert a LineParameter to a LineParameter .
7559	Convert a line parameter to a line .
7560	Convert a plane to a plane .
7561	Convert a plane to a plane .
7562	Converts the plane normal to a plane .
7563	Converts a point to a 3D coordinate .
7564	Converts a plane to a world .
7565	Returns true if this matrix is identical to the specified tolerance .
7566	Returns a copy of this matrix .
7567	Returns the squared norm of this matrix .
7568	Computes the value of a line .
7569	Returns true if the element is uncountable .
7570	Returns true if the parabola is equivalent to the given tolerance .
7571	Calculates the center of this point .
7572	Returns the acute angle between two lines .
7573	Returns true if the point is infinite .
7574	Returns a list of points in a random point .
7575	Converts a point to an e - coordinate matrix .
7576	Computes the product of two points .
7577	Checks if two points are identical .
7578	Sets this rectangle .
7579	Convert an elliptical quadratic quadratic .
7580	Computes the point for the given ellipse .
7581	Computes the angle for a point .
7582	Computes the tangent angle of an ellipse .
7583	Selects the tangent from an ellipse
7584	Gets the corner at the specified position .
7585	Calculates the Euclidean distance between two lines .
7586	Calculates the Euclidean distance between two points .
7587	Calculates the Euclidean distance between two points .
7588	Returns the Euclidean distance between two points .
7589	Calculates the distance between a point .
7590	Returns the Euclidean distance between two segments .
7591	Returns the Euclidean distance between two segments .
7592	Returns the Euclidean distance between the quadratic and a quadratic quadratic .
7593	Returns the squared Euclidean distance between a quadratic segment .
7594	Returns the Euclidean distance between a polygon .
7595	Returns the Euclidean distance between a polygon .
7596	Calculates the distance of a line .
7597	Calculates the Euclidean distance between two points .
7598	Calculates the Euclidean distance between two points .
7599	Adds a transformation to the path .
7600	Returns the closest point to the given line .
7601	Returns the closest point to the given ellipse
7602	Computes the polynomial polygon .
7603	Creates a random vector .
7604	Convert a vector to a normalized vector .
7605	Compares two vectors .
7606	Normalize a vector .
7607	Creates a matrix .
7608	Convert a matrix to a real vector .
7609	Returns the Euclidean distance between this point .
7610	Sets the ellipse .
7611	Normalizes this matrix .
7612	Computes the triangle between two points .
7613	Returns the quadrilateral of a quadrilateral .
7614	Calculates the square of a polygon .
7615	Computes the mean of a point .
7616	Calculates a list of points in a list of points .
7617	Computes the normal norm of a set of points .
7618	Checks if polygon is convex .
7619	Multiply the power of this vector .
7620	Returns the maximum absolute value of this image .
7621	Returns the Euclidean distance between two points .
7622	Returns the squared Euclidean distance between two points .
7623	Randomly random points from a plane
7624	Returns a list of points in a random point .
7625	Returns a list of points for a random point .
7626	Computes the mean of a list of points .
7627	Computes the mean of a list of points .
7628	Invalidate all cached credentials .
7629	Invalidates all caches for the given predicate .
7630	Concatenates collection of collection objects into a set of Strings .
7631	Retrieves the features for the server .
7632	Returns a set of config files that have been removed from the server .
7633	Gets the features from the server .
7634	Parse include feature node .
7635	Parse feature manager .
7636	Download JS files for a given product
7637	Returns a set of Liberty feature features for the given file .
7638	Checks if the list of Open Liberty features are supported .
7639	Determines if the given collection contains the given collection .
7640	Returns the next product version .
7641	Extracts the symbolic name of the bundle
7642	Gets the install kernel jar .
7643	Checks if two jars are the same .
7644	Extracts the version from a file name .
7645	Compares two versions .
7646	Returns the product info for a product .
7647	Checks to see if the given artifact is a Spring bootstrap artifact .
7648	Returns the property for the given key .
7649	Returns true if the given file is working on the current environment .
7650	Move back to center .
7651	Compares two objects .
7652	Loads an integer from a string .
7653	Helper method to throw an exception .
7654	Verify the approval .
7655	Replaces all cells in the target cell
7656	Gets the distance between all cells .
7657	Print a formatted string .
7658	Print a formatted string .
7659	Makes sure that the given number of fishings are asleep .
7660	Writes a variable .
7661	Returns a uniform value from the specified int value .
7662	Returns the uniform value of a double .
7663	Returns the poisson distribution of the polynomial distribution .
7664	Calculates the number of discrete doubles .
7665	Main method for testing .
7666	Capitalizes the first character of a word .
7667	Uncapitalize a word .
7668	Fix path .
7669	Convert Join Criteria to String
7670	Returns the token for the cookie .
7671	This method checks if the authorization token is valid .
7672	Extracts the auth token from the cookie list .
7673	Registers Guice bindings for the given injector .
7674	Gets all permissions for the given parent .
7675	Add a projection to the given alias .
7676	Convert JobInfo to JobDetail .
7677	Convert a trigger to a trigger .
7678	Set repeat interval values .
7679	Sets start start time .
7680	Send a mail item to the queue .
7681	Writes the output stream to the output stream .
7682	Initialize the scheduler .
7683	Gets the fields of a class .
7684	Gets field map .
7685	Returns a response for the given exception .
7686	Configures the cipher based on the configuration .
7687	Generate attributes hash from attributes .
7688	Generate a new token string
7689	Send a mail item .
7690	Generate a strong password for a given user .
7691	Change password .
7692	Gets the user by name .
7693	Hashes a password .
7694	Verifies that the account name is valid .
7695	Verifies the password strength against the given old password .
7696	Provides a search for the search model .
7697	Called when a transaction is successful .
7698	Called when an error occurs .
7699	Start the transaction .
7700	Configure field by name .
7701	Determines if the request is authorized by the given token .
7702	Convert an object to a date .
7703	Returns a response for the client .
7704	Create an equals expression for the given value
7705	Create a NOT equal to the given value
7706	Create a less than or equal to the given object .
7707	Create a less than or equal to the given value .
7708	Create a greater than or equal to the given value .
7709	Creates a greater than or equal to the given value .
7710	Creates a limit for the specified value .
7711	Creates a IN clause for a given value
7712	Creates a new namespace manager .
7713	Returns a resource representation of this resource .
7714	Adds a resource to this resource .
7715	Returns a copy of this resource .
7716	Creates a new resource .
7717	Returns true if the input array can be decoded .
7718	Encodes a string into a byte array .
7719	Compares two Reader objects .
7720	Moves a file .
7721	Tries to touch the given files .
7722	Gets the base name of the file .
7723	Adds the padding to the block .
7724	Gets the short name of a class .
7725	Get all supertypes of a given class .
7726	Verifies the given password .
7727	Reads a string from the system .
7728	Appends a byte to the buffer .
7729	Appends a byte array to the buffer .
7730	Creates a copy of the given array .
7731	Returns a new fraction .
7732	Returns a new fraction of this fraction .
7733	Returns a new fraction of this fraction .
7734	Returns a new fraction of this fractional .
7735	Returns the maximum value of the specified long array .
7736	Returns the smallest value of a long array .
7737	Throws an IllegalArgumentException with the given message .
7738	Fetches metadata for a given latitude and latitude .
7739	Fetches metadata for a given latitude and latitude .
7740	Fetches metadata for a given latitude and latitude .
7741	Returns a list of hourly points for the given hours .
7742	Find the nearest forecast forecast for a given date .
7743	Fetch data from forecast query .
7744	Creates a simple forecast term for a given day .
7745	Creates a forecast term for a metric .
7746	Creates a Location object from a string representation .
7747	Fetches the metadata of the Meteo API .
7748	Create a weather symbol name for the given point .
7749	Returns the BeaufortLevel for a given point
7750	Creates a URI from a string .
7751	Checks if the current date is sun .
7752	Gets the point forecast for the given date time .
7753	Gets the best fit forecast forecast for the given request .
7754	Fetch the content of a GeoData location
7755	Fetches metadata for a given latitude and language .
7756	Update database .
7757	Invokes a method on a JavaScript object .
7758	Acquires an object from the data source .
7759	Gets the referenced object .
7760	Gets a wrapped object .
7761	Returns the configuration for the given service class .
7762	Returns true if the configuration is enabled .
7763	Returns an iterator for the given service .
7764	Returns a decoder for the given bootstrap configuration .
7765	Loads all services for the given class .
7766	Returns the module implementation for the given module type .
7767	Acquires an input stream .
7768	Returns the size of the data source .
7769	Gets wrapped data .
7770	Returns the index at the given index .
7771	Gets the prefix of the given index .
7772	Determines if the compiler is colored .
7773	Execute a regular expression .
7774	Iterate over the search loop .
7775	Sets the subexpression of a subexpression .
7776	Determines if a subexpression is intersect .
7777	Determines whether the given substring is in the given range .
7778	Clones a state of a new state .
7779	Optimize the subtree .
7780	Marks the left of a sub - tree .
7781	Creates a new NFA node .
7782	Parse a single substring .
7783	Deletes a path from a node .
7784	Handles a non - word .
7785	Closes a word .
7786	Scans a reference number .
7787	Parses a bracket .
7788	Scans a plain text .
7789	Creates a new lacon .
7790	Scans a single character .
7791	Performs a variant of a set of characters .
7792	Returns the color for the given codepoint .
7793	Returns a pseudo colored color for this color .
7794	Calculates a subrange of a color .
7795	Updates the color of a specific color .
7796	Set the colorchain for a given arc
7797	Uncolored colorchain
7798	Dumps all the colors in the array .
7799	Sets the start of the token .
7800	Read prefixes .
7801	Recursively call this method .
7802	Returns the color for the given codepoint
7803	Initialize state set .
7804	Returns the last seen state set .
7805	Returns a set of Unicode classes for the given character .
7806	Returns a UnicodeSet based on the specified class name .
7807	Calculates the cardinality of the last arc .
7808	This method is used for debugging .
7809	Returns a new state .
7810	Moves all outs from old state to the old state .
7811	Move an old state from old state .
7812	Copy all ins from old state to new state .
7813	Copy all outs from old state to new state .
7814	Drop a state from a state
7815	Free a state .
7816	Adds a new arc to this Arc .
7817	Duplicate a state of the given state .
7818	Calculates the colors of this node .
7819	Dumps internal data structures .
7820	Dumps the state of a state .
7821	Dumps all arcs in a state to a string .
7822	Dumps a line of arcs to the output .
7823	Dumps an arc to a string .
7824	Optimize the alignment .
7825	Determines the flags of this arc .
7826	Convenience function to combine two lines .
7827	Cleans up the state of all states .
7828	Marks out the state of the given state .
7829	Marks the given state as possible .
7830	Iterate through all empty states .
7831	Removes an arc from a Arc .
7832	Gets the rule parameters .
7833	Retrieves the plugins plugins for the rule .
7834	Gets the report plugins .
7835	Get the rule selection .
7836	Run the command line .
7837	Gets the error message .
7838	Gather standard options .
7839	Gather options from a taskFactory .
7840	Gather task names .
7841	Interprets a command line .
7842	Returns the command line .
7843	Executes a task .
7844	Read properties .
7845	Prints usage information .
7846	Gets the home directory .
7847	Creates the plugin class loader .
7848	Returns the set of ids contained in the cell .
7849	Returns the set of ids contained in the given bounds .
7850	Returns the uri for the given target method .
7851	Add a path pattern .
7852	Returns the number of routes .
7853	Add a route to the router .
7854	Add a route to the router
7855	Add a route to the router .
7856	Returns true if the given request path matches the given request path .
7857	Compares the given property .
7858	Returns the store file name .
7859	Compares two folders .
7860	Compares two entries .
7861	Compares two Bookmarks .
7862	Sets the last modified time .
7863	Returns a list of the dependencies for this servlet .
7864	Finds a class by name .
7865	Parse authorization header .
7866	Gets the ProtectedFunctionMapper .
7867	Map a function to a function .
7868	Get the map for the given function name .
7869	Resolves a method name .
7870	Sets the values of this buffer .
7871	Resolve variable .
7872	Parse a tag file .
7873	Parse a jar file .
7874	Parse tag file .
7875	Do the actual parsing .
7876	Creates a compiler .
7877	Gets the resource as an InputStream .
7878	Calculates the last modification time .
7879	Searches for class loaders .
7880	Check if the classloader is a parent of this classloader
7881	Start loading a class .
7882	Read stream header .
7883	Gets pagination result .
7884	Creates a MetaKey from a string .
7885	Fetches the requirements .
7886	Get tag file .
7887	Parse the implicit TLD .
7888	Returns the checksum for the given file name .
7889	Returns the size of a file .
7890	Validate channel name .
7891	Sets the seek position .
7892	Locates the block at the given position .
7893	Gets the MavenArtifacts for the given channel id .
7894	Updates the state of the opts .
7895	Calculates the price of a single byte price .
7896	Calculates the long values for a given position
7897	Calculates the normal match price of a match .
7898	Throws an expected byte .
7899	Throw an invalid byte .
7900	Scan the list of TLDs in the system .
7901	Scan the tag library for a tag .
7902	Adds a JspServletWrapper .
7903	Gets the parent class loader .
7904	Sets a bytecode .
7905	Returns the birth code for the given name .
7906	Saves the bytecode to a file .
7907	Checks the compilation files .
7908	Initialize the classpath .
7909	Start the background thread .
7910	Stops the thread .
7911	Run the compiler .
7912	Find channel by name .
7913	Find a channel .
7914	Update the map cache .
7915	Lists deployments .
7916	Copy the contents of an input stream to the output stream .
7917	Parses the given JSP reader .
7918	Parses a Jsp reader .
7919	Parse quoted string .
7920	Adds an include directive to the list of files .
7921	Parses attribute and body .
7922	Adds an attribute .
7923	Adds a child node to this node .
7924	Returns an iterator over the attributes .
7925	Returns an iterator over the children of this node .
7926	Returns an iterator with the given name .
7927	Converts this object to base coordinates .
7928	Returns the alias for the given variable name .
7929	Set thread .
7930	Unset the thread .
7931	Find the wrapped stream .
7932	Writes an optional field to the writer .
7933	Writes a value to a String writer .
7934	Adds an element to the parent element .
7935	Adds the first element of the parent element with the specified name .
7936	Writes the body to the writer .
7937	Sets the writer .
7938	Allocates the contents of the buffer .
7939	Maps the given page nodes to a static expression .
7940	Gets the parent parent with the given key .
7941	Registers a new storage provider .
7942	Reads a stream from the given key .
7943	Marks the given job .
7944	Checks if the request is authenticated .
7945	Close the stream .
7946	Make a GSON GSON instance .
7947	Encode the symbol for LZM2 .
7948	Returns a union of all meta data from the provided meta data .
7949	Get the throwable .
7950	Checks if a coordinate is checkum .
7951	Finishes the stream .
7952	Gets the exception .
7953	Evaluate EL expression .
7954	Returns the prefix for the OSGi service .
7955	Checks if the given path is XML .
7956	Parses the tag file contents of a tag library .
7957	Load a tag file .
7958	Remove the proto type files from the compiler .
7959	Entry point for jspc .
7960	Set the URI .
7961	Scan files for files .
7962	Locate the uri root .
7963	Initialize the system class loader .
7964	Moves the position in the chain .
7965	Checks if the given string matches the given string .
7966	Checks if a string is matched by the given string .
7967	Skips over the specified string .
7968	Skips over the specified escape character .
7969	Skips the end of a tag .
7970	Parse a token .
7971	Pop the current file .
7972	Make unclassified coordinates .
7973	Returns a list of aspects that match the given predicate
7974	Gets the missing id ids for the given aspect information .
7975	Sets the schema resource prefix .
7976	Set the DTD resource prefix .
7977	Encode a prefix .
7978	Converts a node into a TreeNode .
7979	Merges all errors in the binding result .
7980	Initialize the binder .
7981	Scans a set of channel images .
7982	Unqualify path .
7983	Invokes a tag for a custom tag .
7984	Retrieves a byte array from the cache .
7985	Returns an array containing the size of the specified size .
7986	Convert artifact results to Aether result .
7987	Gets the resource as stream .
7988	Validate the tag library .
7989	Push stream to the stream .
7990	Determine the encoding of the given JVM file .
7991	scan XML declaration .
7992	Report a fatal error .
7993	Returns the real path of the given path .
7994	Returns a URL for the given path .
7995	Returns an InputStream as an InputStream .
7996	Get the paths for a resource
7997	Log a message .
7998	Add a filter
7999	Gets the buffer size .
8000	Gets the memory usage .
8001	Sets the value of the preset dictionary .
8002	Moves the window to the buffer .
8003	Fills the data in the dictionary .
8004	Process pending bytes .
8005	Returns the length of the next match .
8006	Returns the length of the match between the specified distance .
8007	Verifies that this Matches matches the given distance .
8008	Moves the read position from the buffer .
8009	Recycle the response .
8010	Flush the buffer .
8011	Clears the output stream .
8012	Flushes the output stream .
8013	Closes the output stream .
8014	Writes a string to the output stream .
8015	Allocate char buffer .
8016	Handle javac error .
8017	Make a list of fields for the given meta data .
8018	Generate java class .
8019	Compile the jsp page .
8020	Remove generated files .
8021	Initialize Java compiler .
8022	Checks if the given path is in the web .
8023	Quote a character .
8024	Generate declarations for a page .
8025	Compiles the tag handler pool .
8026	Generate XMLProperties .
8027	Generate common postamble .
8028	Generate postamble .
8029	Generate the XML .
8030	Generate tag handler .
8031	Read properties from an input stream .
8032	Exports a channel .
8033	Validate the XML view .
8034	Get a tag for the current thread .
8035	Parse an expression from a string .
8036	Selects the next property group .
8037	Checks if the given URI is a JSP page .
8038	Print a comment .
8039	Print a string .
8040	Print a string .
8041	Print a string .
8042	Returns the expression in XML .
8043	Validates the scope of a scope .
8044	Escapes a string .
8045	Validate expressions .
8046	Returns the class name of the tag file .
8047	Returns a java package name from the given path .
8048	Splits a path into a string .
8049	Returns a java identifier for the given identifier .
8050	Makes sure that the given char is a valid character .
8051	Returns true if the given string is a java keyword .
8052	Adds a property to the map .
8053	Create a modifier for a modifier .
8054	Returns a sorted set of metadata keys .
8055	Runs the user .
8056	Returns the basename of the given path .
8057	Put a value into the cache .
8058	Loads the metadata for a given locator .
8059	Builds a collection of MetricsCollection .
8060	Resolves a number .
8061	Writes an object to the output stream .
8062	Returns the TTL for the specified rollup .
8063	Creates prepared statements .
8064	Tracks a list of delayed metrics for a given tenant .
8065	This method is used to track all registered metrics for a given tenant .
8066	Get a UnsupportedDouble or null .
8067	Puts a number of bytes into the output stream .
8068	Returns an unmodifiable map of properties .
8069	Creates a new container .
8070	Schedule slots .
8071	Clear the state from the running slot .
8072	Registers a listener for the given event .
8073	Registers a listener for a given event .
8074	Remove a listener from the event .
8075	Emit a callback event .
8076	Returns the listeners for the given event .
8077	Gets the remote name .
8078	Appends a RollupEvent to the stream .
8079	Parse a timestamp from a file name .
8080	Starts the server .
8081	Computes the RollupComputer for a given source type .
8082	Creates an IOContainer from configuration .
8083	Puts the configuration for the given granularity .
8084	Compute the maximum lengths of the headers .
8085	Formats the headers in a comma separated list .
8086	Formats the given output of the given output formats .
8087	Register metrics .
8088	Sets the pool name .
8089	Add a metric index .
8090	Gets the complete metric names .
8091	Gets token list .
8092	Execute a rollup operation .
8093	Calculate granularity from a given interval .
8094	Gets the granularity from the given duration .
8095	Sets the server time .
8096	Returns a set of unique hosts .
8097	Returns the maximum number of connections per host .
8098	Gets the MetricColumnFamilyFamilies .
8099	Inserts a collection of metrics .
8100	Insert metrics for the given granularity granularity .
8101	Returns a set of locators for the given granularity .
8102	Gets the metric names from the elasticsearch query .
8103	Gets the regex based on the given query string .
8104	Start the storage manager .
8105	Stops the uploader .
8106	Checks if a locator is currently in the batch layer .
8107	Checks if a locator is currently in the discovery layer .
8108	Returns true if the locator is currently in the current token layer .
8109	Determines if a locator is a delayed delay for a given slot .
8110	Sets the delayed locator for a given slot .
8111	Creates a range of range ranges .
8112	Returns a range of ranges for the given granularity .
8113	Inserts a collection of metrics .
8114	Inserts a collection of metrics to the given column family
8115	Checks if the given metric is delayed .
8116	Get the bound statement for a given metric .
8117	Gets metadata values .
8118	Returns the serializer for the given class .
8119	Check if content type is valid
8120	Returns true if the header is valid .
8121	This method is used to perform bulk discovery .
8122	Asserts that the aggregated metrics are valid .
8123	Checks if the download directory exists .
8124	Creates a new extractor instance .
8125	Returns true if the OS name matches the given version and version .
8126	Starts the download .
8127	Stops the RabbitMQ queue .
8128	Returns a new instance of PnalingParams with the default parameters .
8129	Add list of ICE servers .
8130	Add a list of ICE servers .
8131	Send a message
8132	Send a message to all peers .
8133	Gets the value of the witestr property .
8134	Gets the value of the userDefinedField property .
8135	Gets the value of the userDefField property .
8136	Sets the value of the apiProperty property .
8137	Gets the value of the multimediaAnnotation property .
8138	Gets the value of the status property .
8139	Gets the value of the status indicator .
8140	Gets the value of the status property .
8141	Gets the value of the importModus .
8142	Gets the value of the adressdater property .
8143	Gets the value of the WElements property .
8144	Gets the value of the bodenabag property .
8145	Sets the value of the region property .
8146	Sets the value of the area property .
8147	Sets the value of the address property .
8148	Sets the value of the description property .
8149	Sets the value of the rentCollectionPeriod property .
8150	Sets the value of the furnishedAdUnit property .
8151	Sets the value of the phone1 property .
8152	Sets the value of the phone2 property .
8153	Sets the value of the contactName property .
8154	Sets the value of the phoneInfo property .
8155	Sets the value of the mainEmail property .
8156	Sets the value of the ccEmail property .
8157	Sets the value of the externalId property .
8158	Sets the value of the agentId property .
8159	Sets the value of the eppartial property .
8160	Sets the value of the javax .
8161	Gets the value of the GebaeException property .
8162	Sets the value of the gauges property .
8163	Checks if the given string is numeric .
8164	Sets the value of the gegment property .
8165	Sets the value of the gruppe property .
8166	Sets the value of the agent property .
8167	Gets the value of the property .
8168	Sets the value of the verkauf value .
8169	Gets the value of the userDefend property .
8170	Sets the value of the zeiterinheit property .
8171	Gets the value of the zimmer property .
8172	Gets the value of the Haus property .
8173	Gets the value of the buriepen property .
8174	Gets the value of the gastaler property .
8175	Gets the value of the LandUndefine property .
8176	Gets the value of the Sonstige property .
8177	Gets the value of the zinsistor object .
8178	Gets the value of the terrain property .
8179	Sets the value of the uefmer property .
8180	Sets the value of the wennumber property .
8181	Gets the country of a country .
8182	Gets the country code from an ISO33 string .
8183	Returns the country of a country .
8184	Extracts the country from an ISO222 string .
8185	Returns the country name for the given country .
8186	Translates a country name .
8187	Gets the value of the annotation property .
8188	Sets the value of the category property .
8189	Gets the value of the pdf property .
8190	Sets the value of the AktionArtifact .
8191	Sets the value of the realestateitems property .
8192	Sets the pelt value of the Puntue .
8193	Downgrades the version of the document .
8194	Convenience method for upgrade .
8195	Gets the value of the content property .
8196	Gets field names .
8197	Sets the value of the blick property .
8198	Sets the pausmemmeter value .
8199	Sets the monatsMapping property .
8200	Gets the parkerType property .
8201	Gets the value of the lastenumber property .
8202	Sets the value of the zustand property .
8203	Gets the value of the feld property .
8204	Handle validation event .
8205	Dumps this record to a writer .
8206	Returns the value at the given position .
8207	Print the record as a String .
8208	Set the value at the given position .
8209	Sets the value of the ctype property .
8210	Sets the value of the haap property .
8211	Gets the value of the energyPasspass property .
8212	Sets the keller property .
8213	Sets the value of the grustype property .
8214	Gets the value of the GeschlAttribute property .
8215	Sets the value of the hallename property .
8216	Gets the value of the wdderminter property .
8217	Gets the value of the teilungordings property .
8218	Upgrade the document .
8219	Gets the value of the bvOrBundle property .
8220	Gets the value of the wunch property .
8221	Sets the value of the artwork property .
8222	Sets the value of the Modules property .
8223	Gets the value of the emailSonne property .
8224	Gets the value of the telstord property .
8225	Sets the handleType property .
8226	Downgrades the version of the document .
8227	Sets the value of the api .
8228	Sets the value of the api .
8229	Sets the value of the api .
8230	Gets the value of the row property .
8231	Sets the value of the distanzas property .
8232	Gets the value of theAN property .
8233	Gets the value of the objkter property .
8234	Gets the value of the objekt .
8235	Gets the value of the HausCategory property .
8236	Gets the value of the Ausstordings property .
8237	Gets the value of the vermarkings property .
8238	Gets the value of the inteepent property .
8239	Sets the value of the wert .
8240	Sets the value of theckerlander property .
8241	Sets the value of the bauerstings property .
8242	Sets the bootstraende property .
8243	Sets the value of theBuero property .
8244	Sets the value of the camping property .
8245	Sets the value of the delegate property .
8246	Sets the value of the einamliefhaus property .
8247	Sets the value of the einetter property .
8248	Sets the EinHandlers value for this Einner .
8249	Sets the value of the Gragen property .
8250	Sets the garten property .
8251	Sets the value of the gastronom property .
8252	Sets the value of the gewer property .
8253	Sets the value of the hotel property .
8254	Sets the value of the industry property .
8255	Sets the value of the eineBundle property .
8256	Sets the value of the klellinger property .
8257	Sets the lager property .
8258	Sets the value of the MessagingFiefer property .
8259	Sets the value of the observance property .
8260	Sets the parkhaus property .
8261	Sets the value of the producer property .
8262	Sets the value of the reihenter property .
8263	Sets the value of the stylabel property .
8264	Sets the value of the villa property .
8265	Sets the value of the wald property .
8266	Sets the value of the Anbieter property .
8267	Gets the value of the wicket property .
8268	Gets the value of the gruststack property .
8269	Gets the value of the EinProcessor property .
8270	Gets the value of the hallenager property .
8271	Gets the value of the parkenen property .
8272	Gets the value of the freesimmentGets property .
8273	Gets the value of the objekt .
8274	Gets the value of the stellaborator property .
8275	Sets the maxDurations value for the maxer .
8276	Gets the value of the feature property .
8277	Sets the value of the visitor type .
8278	Upgrades the document to a new document .
8279	Sets the value of the keineAngle property .
8280	Sets the value of the erdwaermeer property .
8281	Sets the value of the solarheme property .
8282	Sets the value of the pelleter property .
8283	Sets the value of the gas value .
8284	Sets the oel property .
8285	Sets the value of the fernwaer property .
8286	Sets the value of the strom property .
8287	Sets the value of the kohle property .
8288	Generate a string with the specified length .
8289	Returns a random string with the specified length .
8290	Generates a random number of characters .
8291	Gets the value of the wicketCategory property .
8292	Sets the value of the benumberzer property .
8293	Sets the value of the OBJECT property .
8294	Gets the value of the feed property .
8295	Sets the value of the mob property .
8296	Gets the value of the serviceLists property .
8297	Sets the value of the sub administrative area property .
8298	Sets the value of the city structure property .
8299	Sets the value of the locality property .
8300	Downgrades the version .
8301	Upgrades the document to a new document .
8302	Sets the value of the LandTyp property .
8303	Gets the value of the field property .
8304	Updates the document version .
8305	Gets the value of the adType property .
8306	Gets the value of the gaster property .
8307	Sets the value of the PlacementFormat property .
8308	Gets the value of the Datenetordings property .
8309	Gets the value of the kneldapl .
8310	Gets the value of the image property .
8311	Sets the priceType property .
8312	Sets the value of the newDevelopmentAvailability property .
8313	Sets the value of the directions property .
8314	Sets the value of the co2Rating property .
8315	Sets the value of the energy rating value .
8316	Sets the value of the viewingDetails property .
8317	Sets the value of the propertyStatus property .
8318	Sets the pictures value for this AdType .
8319	Sets the value of the probeBubar property .
8320	Upgrade the document .
8321	Sets the value of the parkenTyp property .
8322	Sets the value of the alter attribute .
8323	Sets the value of the freizeInstrument property .
8324	Sets the value of the telefonart .
8325	Sets the value of the emailart property .
8326	Sets the value of the overseasSalesSales property .
8327	Sets the value of the overseasRoles property .
8328	Create a simple simple simple simple field .
8329	Gets the value of the Fehler property .
8330	Sets the value of the ErlangErrors property .
8331	Gets the value of the stpager property .
8332	Gets the value of the valuelist property .
8333	Sets the value of the minTime property .
8334	Sets the zins value for zins .
8335	Gets the value of the photo property .
8336	Sets the value of the metadata property .
8337	Sets the value of the projects property .
8338	Sets the properties value for this feed .
8339	Downgrades the given document .
8340	Upgrades the latest version from the given document .
8341	Gets the value of the immobilie property .
8342	Gets the value of the objekt property .
8343	Gets the value of the fehlerList property .
8344	Gets the value of the status property .
8345	Sets the value of the SonstigeType property .
8346	Sets the value of the distanzas property .
8347	Gets the value of the distanzen property .
8348	Gets the value of the distanEnroller property .
8349	Checks if the given exception is compatible with the given exception .
8350	Sets bindings .
8351	Bind a prefix to a namespace URI .
8352	Remove a binding binding .
8353	Returns true if the given content is an open tag .
8354	Consumes a line of comments .
8355	Consumes and returns the end of the line .
8356	Returns the index of the given token .
8357	Initialize logging .
8358	Bind a prefix to a namespace
8359	Adds an iterator to the composite iterator .
8360	Add an option .
8361	Adds a string option .
8362	Add an integer option .
8363	Add long option .
8364	Adds a double option .
8365	Add a boolean option .
8366	Parse command line arguments .
8367	Creates a new instance of the given class .
8368	Invoked when the access is finished .
8369	Sets the target object .
8370	Prepares the target object .
8371	Finds the matching method .
8372	Converts an integer to a string .
8373	Serializes an object to a byte array .
8374	Deserialize an object .
8375	Gets the child element with the given tag name .
8376	Returns the value of a child element with the given tag name .
8377	Gets all child elements of the given Element .
8378	Returns true if the node matches the desired name .
8379	Returns true if the node matches the given node .
8380	Sets the length of a string .
8381	Monitor a release of a release listener .
8382	Add a release listener .
8383	Checks if the current thread is alive .
8384	Calculate the phone number
8385	This method is called by the start of the start of a namespace .
8386	Called by the end of a namespace handler .
8387	Adds a callback to the future .
8388	Parse the jar file .
8389	Returns the color of the text item .
8390	Sets the values of the gauge .
8391	Returns the color of the selected item .
8392	Set text size
8393	Get the index of the item in the item range .
8394	Gets the intro introspection .
8395	Gets the keyword names .
8396	Returns the arguments for the given keyword .
8397	Returns the documentation for a keyword .
8398	Entry point for the remote server .
8399	Stop the remote server .
8400	Starts the remote server .
8401	Converts a file to a JSON string .
8402	Convert a file to a JSON string .
8403	Converts an input stream to a JSON string .
8404	Convert properties to JSON string .
8405	Convert properties to json string .
8406	Convert values to JSON string .
8407	Convert properties map to a string .
8408	Convert properties to json string .
8409	Calculates the radius of a shadow .
8410	Creates a new OCspFet .
8411	Find an intermediate certificate .
8412	Execute Markdown .
8413	Read Markdown files from the input directory .
8414	Substitute variables from a template string
8415	Extracts the title from the raw header .
8416	Adds the title to the HTML file .
8417	Replaces all variables in the given string .
8418	Updates the relative paths in HTML .
8419	Copy files from a directory .
8420	Checks if the given path is full .
8421	Wrap a child view
8422	Interpolate the animation .
8423	Fade the fade down .
8424	Calculates the percentage of the specified width .
8425	Overlay the overlap between two views .
8426	Creates an intent to launch the target class .
8427	Launch an activity .
8428	Get a list of Todo objects
8429	Get Fact sheets
8430	Download file from response .
8431	Build HTTP client .
8432	Create an access control entity
8433	Update data model .
8434	Create full export
8435	Get export list
8436	Sets the token for the token provider .
8437	Sets the client id .
8438	Process a GraphQL query
8439	Get list of bookmarks
8440	Adds permissions to the graph .
8441	Writes the permissions to the graph .
8442	Adds rules set to this dataset .
8443	Closes the client .
8444	Execute a SELECT query .
8445	Creates a dataset graph .
8446	Limit the number of threads .
8447	Resize a geometry .
8448	Perform a rotation on this operation .
8449	Sets the gravity of this operation .
8450	Remove profiles .
8451	Adds a text to the text .
8452	Adds an image to the source .
8453	Add an image to the server .
8454	Parse the arguments from the given object .
8455	Prints the usage of the given object .
8456	Extracts the time unit from a string .
8457	Parse the given target object .
8458	Execute slide .
8459	Execute a slide .
8460	Interprets the given slides .
8461	Sorts a list by size
8462	Renders the given template text .
8463	Returns the relationship relative to a slide .
8464	Determine if the given mouse event is within the range .
8465	Returns an overlap with the specified element .
8466	Execute an outbound operation .
8467	Executes a message .
8468	Require a file .
8469	Gets the temporary directory .
8470	Creates a log value map .
8471	Log a message at trace level .
8472	Log a trace level .
8473	Log a message at debug level .
8474	Log a message at debug level .
8475	Log a message at the INFO level .
8476	Log a message at INFO level .
8477	Sets information about an event .
8478	Log a message at the WARN level .
8479	Log a message at the WARN level .
8480	Log an error at the specified level .
8481	Log a message at an error level .
8482	Adds the source line to the log builder .
8483	Create a steno wrapper for the given event .
8484	Writes a list of keys to a JSONGenerator .
8485	Serialize a Throwable .
8486	Converts this object to a log value .
8487	Gets the stack trace element .
8488	Encode a value to a string .
8489	Creates a new database .
8490	Check for mappings .
8491	Parse save attribute .
8492	Saves data to the object .
8493	Refresh the sheet row from the given context .
8494	Parse save attribute string .
8495	Get save attribute list from row
8496	Gets save attribute from list .
8497	Sets the save objects in the row in the row .
8498	Sets the save attributes for a sheet .
8499	Sets save attributes for a row .
8500	Prepare data for a poi cell .
8501	Format a double value .
8502	Put shift attributes .
8503	Sets the Workbook .
8504	Gets the wrapper wrapper .
8505	Gets the formula evaluator .
8506	Recreates the maximum column counts .
8507	Load a WebSheet from an input stream .
8508	Loads a webbook .
8509	Load work sheet by tab name
8510	Creates the export file
8511	This method is called when the update is saved .
8512	Do submit .
8513	Populate component .
8514	Gets the current sheet configuration .
8515	Custom deserialization .
8516	Gets the locale .
8517	Get the picture .
8518	Gets the cell helper .
8519	Get the picture helper .
8520	Gets validation handler .
8521	Gets the chart helper .
8522	Convert all the shared formulas into a list of shared formulas .
8523	Convert a Ptg array to a Ptg object
8524	Convert a PtgList to a PtgList .
8525	Returns a single Ptg instance of a Ptg .
8526	Returns a list of serial rows from the current row
8527	Returns a list of serial rows from the current row mapping .
8528	Fix a reference to a relative row relative to a row .
8529	Builds a dynamic row for a ref .
8530	Build a new area for a specific area .
8531	Determine the color for a specific theme .
8532	Gets the solid fill color for the given shape .
8533	Returns the automatic fill color for the specified theme .
8534	Get XColor from schema
8535	Convert RGB color to XRGB
8536	Retrieves an XColor for the given index .
8537	Converts a XSSF color to a Closure .
8538	Converts an XSSF color into a bitmap .
8539	Gets the background color from the poi cell .
8540	Finds the component name from a component .
8541	Populate the input cell attributes .
8542	Get the attribute of a parameter
8543	Sets a property on an object .
8544	Gets the value of a property .
8545	Set the control attributes .
8546	Find validation attributes .
8547	Sets the charts for a cell .
8548	Sets the style for a cell .
8549	Sets the picture picture for a cell .
8550	Initialize the charts map .
8551	Get the Pie title for chart data
8552	Sets the style for a chart
8553	Creates a 3D chart for chart data .
8554	Setup the style for the chart .
8555	Initialize charts map .
8556	Get chart id from parent chart .
8557	Initialize the anchor map .
8558	Generate a single XSSF chart .
8559	Evaluate a collection .
8560	Get full name from a row
8561	Re - builds the upper level formula .
8562	Sets the upper level formula for a row
8563	Build the shift formula for a shift .
8564	Gather rows by full name .
8565	Change index numbers in shift map .
8566	Change the final length of the full length .
8567	Change index number in hidden column .
8568	Sets the full name in the row .
8569	Gets the original row number from a row .
8570	Sets the row number of rows in the row .
8571	Determine the parent row mapping .
8572	Finds all child rows mappings from the given full name
8573	Returns the item at the given index .
8574	Builds a new configuration range .
8575	Checks if the given row index is static .
8576	Returns true if the given row is a static row reference .
8577	Replace expression with cell value
8578	Returns a map of all cells in the same region .
8579	Returns a list of skip cells in the given sheet .
8580	Adds the skip cell to the list of cells in the list .
8581	Build the cells from a sheet
8582	Builds the comment from the cell aliases .
8583	Builds all sheets .
8584	Gets sheet configuration .
8585	Build form command .
8586	Verifies that the last cell is blank .
8587	Build a sheet .
8588	Checks if the last row is valid .
8589	Builds the command list from a cell .
8590	Sets the parent command .
8591	Checks to see if there is any command in the list .
8592	Match command range .
8593	Copy template for sheet .
8594	Build command list .
8595	Processes a method line .
8596	Process a command line .
8597	Move the comment to the map .
8598	Creates config command .
8599	Build attribute map .
8600	Get sheet configuration from form command .
8601	Sets the footer of the sheet configuration .
8602	Sets the body of the body configuration .
8603	Sets the header of the cell configuration .
8604	Deletes a row .
8605	Removes all ranges from the shift map .
8606	Returns a list of full name list that contains full name .
8607	Gets the first command from the map .
8608	Insert an empty object into the list .
8609	Deletes an object in the list .
8610	Prepares a collection of data from a collection .
8611	Index command range .
8612	Check if a row is allowed .
8613	Inserts all templates at the given index .
8614	Evaluate a single cell .
8615	Evaluate user formula .
8616	Checks if the string is a user formula .
8617	Creates a new cell .
8618	Evaluate a boolean .
8619	Removes all rows in the specified sheet .
8620	Removes single row from the sheet .
8621	Remove the cached cell for a given row .
8622	Removes all rows in the given body .
8623	Load the picture from the current view .
8624	Load the chart id from the current page .
8625	Returns the new value for the given value .
8626	Get the value of a poi cell
8627	Get cell value without format type
8628	Gets the cell string value for the poi cell .
8629	Returns the cell string value for the poi cell .
8630	Set cell value .
8631	Sets cell value .
8632	Sets the cell value for a cell .
8633	Sets the date value of a cell .
8634	Set cell value .
8635	Copy rows from source sheet .
8636	Copy a single row .
8637	Copy a cell from another row to another row
8638	Copy cell value from source cell .
8639	Copies the style of the given cell to the destination cell .
8640	Clone comment .
8641	Creates a comment anchor .
8642	Creates a comment for a cell .
8643	Match comment settings .
8644	Get the VML drawing from a cell .
8645	Get the shape for a cell .
8646	Get the style from source sheet .
8647	Convert poi cell to poi cell .
8648	Gets the row index of the component attribute .
8649	Get initial number of initial rows
8650	Get faces from body
8651	Get the faces cell from the body
8652	Returns the poi cell for the specified cell .
8653	Gets SKey from poi cell .
8654	Gets the tie cell in the map if it exists .
8655	Get the current data context name .
8656	Evaluate expression .
8657	Evaluate the expression .
8658	Custom serialization method .
8659	Remove a row from source row
8660	Merges all rows in the given map .
8661	Recover all serial rows .
8662	Get the type of the chart
8663	Converts a string to a standard stroke .
8664	This method initializes chart data from XSSF
8665	Sets the chart data .
8666	Initialize the anchors map .
8667	Initialize the anchor Anchors map .
8668	Get the chart id of the chart
8669	Gets the chart id from child nodes .
8670	Build the list of objects .
8671	Save data in the context .
8672	Recalculate the formula values .
8673	Gets the POI cell for the given cell .
8674	Gets the faces for the specified row .
8675	Restore data context .
8676	Gets the last collection object .
8677	Determine if the full name of the full name of the full data context .
8678	Restore data context .
8679	Shift a row .
8680	Set the first row reference .
8681	Sets the last row .
8682	Build cells for a single row .
8683	Build single cell .
8684	Custom deserialization .
8685	Build the category list .
8686	Build a series list
8687	Build a chart series in a list
8688	Gets the color list from a DPT object .
8689	Gets the CDpt with the specified index .
8690	Set the command index map .
8691	Gets a picture map from a workbook .
8692	Index all the images in a map .
8693	Index a picture in a map .
8694	Generate a picture style for a picture .
8695	Generate chart style .
8696	Get the anchor size for an anchor .
8697	Gets the pattern .
8698	Get the chart .
8699	Recover the data from the sheet .
8700	Get row style .
8701	Get the style of a cell .
8702	Get cell color color
8703	Returns the decoration for a cell .
8704	Get the cell style for a poi cell .
8705	Get column style
8706	Gets the style for the cell .
8707	Gets the vertical alignment from a cell style .
8708	Calculates the total height of a sheet .
8709	Set the cell style for the cell .
8710	Get input type from cell type
8711	Gets the paths for the given path .
8712	Gets the resource as an InputStream .
8713	Removes a prefix from a resource .
8714	Evaluate input type
8715	Find a bean by name .
8716	Join a short array with a separator
8717	Rounds the given value to the given number of places .
8718	Gets the tab type .
8719	Gets the tab style .
8720	Returns the default date pattern .
8721	Gets decimal separator by default locale .
8722	Gets the thousand separator by default locale .
8723	Sets the tie command alias .
8724	Builds a list of changes for a formula change .
8725	Build watch list .
8726	Adds a new row to the list .
8727	Checks if the given string is a command string .
8728	Parse widget attributes .
8729	Gets attribute key .
8730	Parse validation attributes .
8731	Returns the pair position of the pair starting at the start position .
8732	Parse command attributes .
8733	Parse input attributes .
8734	Parse validation attributes .
8735	Splits an attribute by its value .
8736	Parse special attributes .
8737	Process calendar attributes .
8738	Process select item attributes .
8739	Gather special attributes .
8740	Parse comment map .
8741	Find the first non - non - cell name position in the input string .
8742	Removes chars from input string .
8743	Get the Excel column name for a given number .
8744	Convert column name to integer
8745	Gets a cell by its reference .
8746	Convert height units to pixel units .
8747	Checks if a string is a valid date .
8748	Parse a date string .
8749	Check if string is numeric
8750	Determines if the given character is continue to continue .
8751	Set a property on an object
8752	Compares two cells .
8753	Checks if a child range is inside a child range .
8754	Clear hidden columns .
8755	Deletes the hidden columns in the row .
8756	Deletes a cell from the row .
8757	This method is called when the framework is running .
8758	Refresh the status of the cell .
8759	Validates that the given row is valid for the given row .
8760	Validate the value of a GeoBean .
8761	Check the error message from a POI object .
8762	Validate all rules for a single cell .
8763	Validate the given value .
8764	Validate the cell .
8765	Validate the current page .
8766	Validates the row in the current tab .
8767	Validate row .
8768	Refresh cells in current page .
8769	Refresh all cells in the row .
8770	Set whether the submit mode is in the view .
8771	Performs validation on the current tab .
8772	Clears the contents of this cell .
8773	Load header rows .
8774	Load a header row from the configuration tab .
8775	Fill the max columns .
8776	Get column style .
8777	Returns the width of the cell .
8778	Load the header row from the configuration table .
8779	Get the column width of a cell .
8780	Clear the workbook .
8781	Initialize the tab model .
8782	Loads the data structures .
8783	Refresh the data set .
8784	Refresh data for a given row .
8785	Refresh data for a cell .
8786	Returns the index of the tab with the given name .
8787	Load a work sheet .
8788	Populate work sheet .
8789	Sets the page page page .
8790	Saves the current view map .
8791	Set the row information .
8792	Load body rows .
8793	Helper method to assemble the faces row row .
8794	Refresh a Cell .
8795	Process refresh cell .
8796	Create dynamic columns .
8797	Add a repeat row .
8798	Refresh the body rows in the specified range .
8799	Sets unmodified state .
8800	Returns true if the current state is unaved .
8801	Finds the common constructor for the given type .
8802	Write input stream to output stream .
8803	Writes a long value to a Writer .
8804	Writes a string to a writer .
8805	Sets the traffic stats tag .
8806	Adds a bitmap to the result .
8807	Adds a file descriptor .
8808	Remove the parameter with the given name .
8809	Add a header .
8810	Clears the result .
8811	Call the play player .
8812	Call stop .
8813	Bind the connection to the stream .
8814	Unbind the radio .
8815	Drops listening listener .
8816	Stores the image .
8817	Converts an input stream to a string .
8818	Converts an input stream to a string .
8819	Sends the response message .
8820	Returns the number of bytes available .
8821	Closes the underlying stream .
8822	Reads a byte from the stream .
8823	Resets cursor position .
8824	Send start start .
8825	Send the content disposition header .
8826	Send the content type header .
8827	Send transfer encoding header .
8828	Sends the end of the header .
8829	Sends the end of the stream .
8830	Sends parts to the output stream .
8831	Calculates the length of the parts of the given part .
8832	Determine if the given URL is a redirect URL .
8833	Sends a 304 response .
8834	Sets the date header .
8835	Set date and cache headers .
8836	Sets the content type header .
8837	Close the channel .
8838	Override this method to send the file header .
8839	Send data to the output stream .
8840	Install the cache .
8841	Creates the working directory if necessary .
8842	Gets the response from the cache .
8843	Returns an InputStream for the given snapshot .
8844	Resets the bitmap .
8845	Gets the SSLContext .
8846	Validates the keystore .
8847	Replace the scale type .
8848	Stop listening listener .
8849	Gets a PendingIntent .
8850	Disconnects the given connection .
8851	Bind the service to this service .
8852	Unbind the service .
8853	Notifies listeners that the view has changed .
8854	Called when the proxy is open .
8855	Invoked when a response is received .
8856	Resets the response .
8857	Waits for the loader to finish .
8858	Sets the text of the view .
8859	Hide soft input from textView
8860	Show soft input .
8861	Toggles soft input from textView
8862	Returns the width of the pixels in pixels .
8863	Called when an exception occurs .
8864	Clears the cache .
8865	Populates a tag from the view .
8866	Cancel image loading
8867	Creates an image consumer .
8868	Sets the image result of an image .
8869	Sets the loading image
8870	Start a new loader task .
8871	Adds an image to the cache .
8872	Releases a buffer .
8873	Called when the URL connection is prepared .
8874	Adds a parameter to the request .
8875	Attempts to connect to the core URL .
8876	Calculates MD5 hash from string .
8877	Returns the String identifying the given CUblMatrix
8878	Returns the String identifying the given CUblas .
8879	Checks the given result .
8880	Checks the result of the result of the given result .
8881	Adds a lexeme to the lexicene
8882	Adds the ending of the ending id .
8883	Returns the estimate of the estimated weight of a word form .
8884	Prints the description of this object .
8885	Verifies whether the given attribute is valid .
8886	Returns the kamols markup for the given attribute values .
8887	Verify attribute and attribute value .
8888	Remove kamols from the given tag .
8889	Get a list of metric data .
8890	Gets the query string .
8891	Process a JSON node .
8892	Parses a JSON string .
8893	Gets the connection configuration .
8894	Performs a list of metrics .
8895	Create a GCC code reader for GC4c .
8896	Create a GCC code set .
8897	Create a GC4v column set .
8898	Create a GC10 CodeReader for GC10 .
8899	Create a GC10CodeSet .
8900	New GC10 column set .
8901	Get the ID of a column element .
8902	Get the value of a row from a row ID .
8903	Get the column with the passed ID .
8904	Get all key IDs .
8905	Get the Key of the passed column
8906	Check if the passed column is a KeyColumn .
8907	Create a new column .
8908	Create a new Key
8909	The number of lines to be skipped .
8910	Add a new column at the specified index .
8911	Create a GCC code list .
8912	Create a GCC code list .
8913	Create a GC04 column set .
8914	Create a GC10 code list .
8915	Create a GC10 code list .
8916	Create a GC10 column set .
8917	Gets the GCC code list .
8918	Gets the GCC code set .
8919	Gets the GC4v column set .
8920	Gets the GC10 code list .
8921	Gets the GC10 code set .
8922	Gets the GC10 column set .
8923	Send the app feed back to server
8924	Sets the context .
8925	Gets the log level .
8926	Gets the capture flag .
8927	Sets the maximum size of the log file .
8928	Prepend a message to a JSON object .
8929	Append the stack trace to the logger .
8930	Helper method to create a JSONObject object .
8931	Log location
8932	Sets user identity .
8933	Get byte array from file
8934	Start the location updates .
8935	Size of the given region .
8936	Sets the region of a given region .
8937	This method is called by a single region .
8938	Reads a snapshot record .
8939	Prints the statistics to a stream .
8940	Gets the time values for the specified index .
8941	Convert a file to a chart
8942	Get the pool for a given server
8943	Get a pool for a given JMX locator
8944	Checks if a region is already existing .
8945	Get a member from the JMX server .
8946	Returns a collection of host names .
8947	Look up a network host name .
8948	Check if the given data is an error .
8949	Execute the given function .
8950	Flatten a collection of objects to a collection .
8951	Executes a query using the given region .
8952	Creates a new listener bridge for the given consumer .
8953	Creates a new listener bridge for deletion .
8954	Handle exception .
8955	Get the list of onOnRegionFilter .
8956	Export data from a function
8957	Returns a set of host names .
8958	Execute a function on the page .
8959	Gets the app name from resources .
8960	Construct security properties
8961	Gets a region by name .
8962	Returns a region with the given name .
8963	Constructs a comparison object from source map .
8964	Checks if the given value is greater than the given timestamp .
8965	Close the stream .
8966	Dump gfs files from a directory .
8967	Entry point for the statistics .
8968	Returns a new JMX instance .
8969	Stop members on a host .
8970	Shutdown a member .
8971	Shutdown the distributed JMX system .
8972	Shuts down the redundancy zone .
8973	Store pagination map .
8974	Reads the results of a page matching the specified criteria .
8975	Imports a region .
8976	Checks to see if the remote locators are match .
8977	Execute the checkSum map .
8978	Builds the checksum map for a region .
8979	Returns the value of the given column .
8980	Returns true if the given type is a type of the given type .
8981	Serialize an object to a byte array .
8982	Deserialize the given byte array .
8983	Creates an instance of the given class .
8984	Checks if an element is a table .
8985	Checks if the given element is for columns .
8986	Checks if the given element is a supertype .
8987	Gets the schema .
8988	Generate java code .
8989	Emit the getId method .
8990	Get an Observable from the query
8991	Checks that the given column name is equal to the given table .
8992	Returns the value of the given string if the string is not null .
8993	Capitalizes a string .
8994	Checks if the given type is a type of the given type .
8995	Return a builder for descending order
8996	Read the temperature of the device .
8997	Returns a string for the given type .
8998	Print a message .
8999	Logs an ERROR message .
9000	Gets the list of icon fonts .
9001	Gets the icons .
9002	Creates the layout layout .
9003	Gets the background decoration .
9004	Resolves a power of x .
9005	Sets the values of this matrix .
9006	Performs an integer power of a power of power of a given power .
9007	Calculates the root root of a root element .
9008	Expands the power of a power .
9009	Returns the number of occurrences of the specified decimal point .
9010	Generate a new Newtonton Newton .
9011	Computes the value of a BigDecimal .
9012	helper method to compute the integral of a power of a given value .
9013	Returns the square square of the given value .
9014	Prints the given pi string .
9015	Formats a time in milliseconds .
9016	Set the limits .
9017	Add a value to the gauge .
9018	Prints the alignment .
9019	Add two complex numbers .
9020	Subtract two complex numbers .
9021	Multiply two complex numbers .
9022	Divide two complex numbers .
9023	Set the values of this matrix .
9024	Returns a row of the specified row .
9025	Gets a column from the matrix .
9026	Sets the values of this matrix .
9027	Returns the transpose of this matrix .
9028	Add this matrix to this matrix .
9029	Subtracts this matrix .
9030	Multiply this matrix by the given element .
9031	Multiply this matrix .
9032	Prints the values of this stream to a standard output stream .
9033	Sets the image resource .
9034	Validate the coefficients .
9035	Sets the next position in the function .
9036	Resets the state of this object .
9037	Parse a sparse layer descriptor .
9038	Parses a raw layer descriptor .
9039	Validates the given layer descriptor .
9040	Validate the given SLD .
9041	Calculate area of area
9042	Sets this matrix .
9043	Sets the values of this matrix .
9044	Returns the inverse matrix .
9045	Returns the determinant of this matrix .
9046	Returns the norm of this matrix .
9047	Convenience method for solving .
9048	Prints the matrix to the given output stream .
9049	Compute the forward elimination for a pivot matrix .
9050	Performs forward substitution .
9051	Performs backward substitution .
9052	Iterate over x .
9053	Converts a square matrix to a square matrix .
9054	Returns a random n - th n - thn value .
9055	This method is called when the iteration is initialized .
9056	Compute next position .
9057	Checks the position of this node .
9058	Compute the next position of the next step .
9059	Checks if the interval is valid .
9060	Compute the sum of the given value .
9061	Multiplies the multiplication of pb .
9062	Calculate the power of the given base exponent .
9063	This method is called when the iteration is initialized .
9064	Gets the SLDManager .
9065	Convert a long value to a char array .
9066	Decompose two bits .
9067	Print this object to the specified output stream .
9068	Validates a float value .
9069	Validates that the specified exponent is a floating point exponent value .
9070	Validates the bias value .
9071	Validate the double exponent value .
9072	Create a new SLDGGwt service .
9073	Returns the next random value .
9074	Returns the next random value .
9075	Returns the next random ratio .
9076	Creates an array that contains only the prime number of prime numbers .
9077	Returns an array of factors for the specified prima .
9078	Sets the iteration of the root node .
9079	Compute next position .
9080	Check the position of this node .
9081	Sets the JavaFX application .
9082	Sets the configuration .
9083	Sets the default configuration .
9084	Initialize the FXML loader
9085	Sets the location of the GeoGeocoder .
9086	Extract host port pair from service .
9087	Returns an AttributeDefinition for the given attribute definition .
9088	Evaluate an attribute definition for an event .
9089	Sanitize a string .
9090	Sets the address .
9091	Sets a list of GeoCodes .
9092	Retrieves a collection of service names .
9093	Query for service instances .
9094	Get all collaborators
9095	Get the decimal value for a decimal value .
9096	Change password for user
9097	Get all users .
9098	Gets gravatar for an email .
9099	Gets gravatar for a given user .
9100	Populate from Elasticsearch .
9101	Get the Elasticsearch field type .
9102	Create flow step .
9103	Update flow step .
9104	Get flow step by id
9105	Get FlowStep by step
9106	Get all steps by flow
9107	Delete flow step .
9108	Delete flow step .
9109	Populate table fields .
9110	Close connection
9111	Handle an object to be processed .
9112	Notifies that the connection has been closed .
9113	Get the ECHO messages from the return value
9114	Get all personal inventory items .
9115	Create a TableRecord .
9116	Delete a form container
9117	Get the form history history
9118	Get form data for a given form parameter .
9119	Get the most recent data for a form .
9120	Lock the given form parameter .
9121	Unlock container .
9122	Unlock a form container .
9123	Map a form to a form container .
9124	Convert a list of roles to an object
9125	Creates a new form definition .
9126	Update form definition .
9127	Get a form definition by id .
9128	Get a form definition by name
9129	Get all form by user .
9130	Delete a form definition .
9131	Get storage key from form parameters .
9132	Initialize memcached client .
9133	Shuts down the memcached client .
9134	Converts a string to a long .
9135	Converts a document to a PDF file .
9136	Gets the field values for a form .
9137	Create flow step entry .
9138	Create flow rule .
9139	Create flow step rule .
9140	Update flow step rule .
9141	Update flow rule .
9142	Update flow step rule .
9143	Move the flow step entry up .
9144	Move the flow step entry down .
9145	Delete flow step entry .
9146	Delete flow exit rule .
9147	Delete flow step .
9148	Initialize session .
9149	Get all user queries
9150	Get all roles .
9151	Get service ticket .
9152	Create a TextField
9153	Creates a text field .
9154	Create a field spinner .
9155	Create a decimal slider
9156	Create a Table Table
9157	Updates a field with the specified mask .
9158	Updates a field text field .
9159	Update the field spinner .
9160	Update a decimal slider .
9161	Update field table .
9162	Get a Field by name
9163	Get all fields matching a form definition .
9164	Get all fields matching the specified form type .
9165	Delete a field .
9166	Force delete field .
9167	Get the meta data for a table .
9168	Update field value .
9169	Gets the index .
9170	Create a Flow
9171	Update flow .
9172	Get flow by id
9173	Get flow by name
9174	Delete a flow
9175	Force delete flow .
9176	Update a field value .
9177	Get all global field values
9178	Gets the id of the form definition .
9179	Decrypt an initial packet .
9180	Closes the client .
9181	Initialize a new request .
9182	Gets exception message .
9183	Create an admin user
9184	Gets an access token .
9185	Gets the user profile information for the given access token .
9186	Execute JSON .
9187	Execute a POST request .
9188	Get a JSON response handler .
9189	Checks if the connection is valid .
9190	Gets the http client .
9191	Retrieves the path to a file store .
9192	Close connection .
9193	Gets the fluid items for a given view .
9194	Send a form to a flow .
9195	Called when the connection is closed .
9196	Handle message .
9197	Send a message .
9198	Sends a message to the remote endpoint .
9199	Closes the user session .
9200	Executes a native SQL query with the given parameters .
9201	Request license
9202	Apply a license
9203	Create a text field
9204	Create a ParagraphText .
9205	Create a paragraph text text .
9206	Creates a multi - choice field .
9207	Create a field date .
9208	Update text field .
9209	Update the ParagraphTextText for a field .
9210	Update field date .
9211	Updates a decimal field with the specified field .
9212	Update field value .
9213	Create a field value
9214	Get configuration by key
9215	Get all configurations .
9216	Create an attachment .
9217	Get an attachment by id .
9218	Delete an attachment .
9219	Delete an attachment
9220	Parse a JSD file .
9221	Set the class loader for the given jar .
9222	Rule 2 . 2 . 2 . 2
9223	Validate the schema .
9224	Validate element .
9225	Gets the schema node .
9226	Validate the FORM tag .
9227	Thrown if the parser is not present .
9228	Converts the given value to the given type .
9229	Create CLI interface .
9230	Create a Cli instance using the given options .
9231	Parse command line arguments .
9232	Parse CLI arguments .
9233	Returns a builder for the given path .
9234	Remove a footer view
9235	Calculates the value of a point .
9236	Returns a gradient for the noise noise .
9237	Calculate an integer value of an integer .
9238	Returns the number of noise noise for a point .
9239	Calculates cubic quadratic quadratic .
9240	Calculates the curve of a curve .
9241	Sets the bounds .
9242	Processes all plugins .
9243	Process event .
9244	Gets account id for a given event .
9245	Applies rules to the rule entity .
9246	Gets the serializer for the given input stream .
9247	Creates a file .
9248	Creates a directory .
9249	Restores the properties of the current state .
9250	Creates a new implementation .
9251	Adds a soft object to the collection .
9252	Sets a property .
9253	Returns an array of String properties .
9254	Returns the next state for the given action .
9255	Remove garbage from GC queue .
9256	Returns the type of the given type .
9257	Gets the parameterized type .
9258	Gets the type variable .
9259	Print stack trace .
9260	Print stack trace .
9261	Replace the remote object .
9262	Run the task .
9263	Sets the task .
9264	Called when a task is accepted .
9265	Called when a task is rejected .
9266	Indicates whether the task is started .
9267	Indicates whether the task is completed .
9268	Stops the task .
9269	Gets the next job .
9270	Put a job into the queue .
9271	Converts a name to BlockingMode .
9272	Resolve the serialized object .
9273	Setup the readers .
9274	Adds a reader to the catalog .
9275	Copy all readers to the catalog .
9276	Creates a new catalog .
9277	Load catalog catalog files .
9278	Parse catalog .
9279	Parses all available catalog files .
9280	Parse the catalog file .
9281	Called when a token is encountered .
9282	Parses all catalogs .
9283	Resolves a DCType .
9284	Resolves the catalog .
9285	Resolves a system ID .
9286	Resolves a local URI .
9287	Resolves the catalog catalog for the given entity type .
9288	Converts a system identifier to an absolute URL .
9289	Normalize URI .
9290	Returns the encoded byte value for the given byte .
9291	Add a delegate to the catalog .
9292	Creates a SoftValueRef .
9293	Fires a Throwable to all registered listeners .
9294	Adds a Throwable to this event .
9295	Creates and returns the delegate list .
9296	Compares two executors .
9297	Returns the value of this node .
9298	Gets the object at the given index .
9299	Sets the SoftObject at the given index .
9300	Removes SoftObject from the list .
9301	Add an entry type .
9302	Returns the type of the entry type .
9303	Retrieves the number of arguments for the given entry type .
9304	Returns the argument at the given index .
9305	Set the context class loader
9306	Swap the elements of two heap .
9307	Remove a node from the queue .
9308	Cleans up the given timeout .
9309	Loads a class from the parent classloader .
9310	Preload all protocols .
9311	Creates a URLStreamHandler for the given protocol .
9312	Checks to see if the handler is set .
9313	Returns the value of the type .
9314	Creates and returns a new instance .
9315	Make a synchronized counter .
9316	Make a new counter .
9317	Returns true if the extension is in the extension stack .
9318	Check if a notification is required .
9319	Binding the target name .
9320	Returns the wrapper object for the given object .
9321	Substitutes a string substring of the given string .
9322	Splits a string into an array of strings .
9323	Join a byte array .
9324	Appends an object to the string builder .
9325	Returns the value as an object .
9326	Creates a new entry .
9327	Retrieves the value associated with the specified key .
9328	Returns the value associated with the specified key .
9329	Removes the specified key from the map .
9330	Flush all timers .
9331	Returns a list of all keys in the cache .
9332	Sets the resolution .
9333	Returns the entry associated with the specified key .
9334	Gets an iterator by tag name .
9335	Gets the first child element with the given tag name .
9336	Returns an optional child element with the specified tag name .
9337	Get the content of an element
9338	Gets the unique content of a given element .
9339	Get the content of an optional child element .
9340	Sets the maximum number of threads .
9341	Set blocking mode .
9342	Set blocking mode .
9343	Executes the given task .
9344	Resolve the system for the system .
9345	Resolve the catalog for a public ID .
9346	Resolves an external system for the given system id .
9347	Resolve external public key
9348	Query for a resolver
9349	Append vector to the given vector .
9350	Resolves all system entries in the system .
9351	Resolves a system ID relative to the system .
9352	Resolves all of the system entries for the given system ID .
9353	Resolve all local system ids
9354	Resolves all catalogs for the given entity type
9355	Load a catalog from a catalog
9356	Reads a catalog from an input stream .
9357	Connect to the file .
9358	Get output stream .
9359	Sets the next node .
9360	Deletes a node from f .
9361	Returns the value of this header .
9362	Creates a new snapshot entry .
9363	Compares right .
9364	Creates a logger .
9365	Appends a list of objects to the buffer .
9366	Returns the short name of the class .
9367	Returns the string representation of this class .
9368	Returns an iterator .
9369	Gets the property group .
9370	Tries to find a compatible constructor based on the specified type .
9371	Creates a copy of the given object .
9372	Deletes an object .
9373	Initialize the context .
9374	Update the JNDI cache .
9375	Returns a set of keys .
9376	Returns a copy of this set .
9377	Removes a property listener .
9378	Fire a property event to all registered listeners .
9379	Fires a property removed event .
9380	Fire a property change event .
9381	Fire a property change event .
9382	Make a property name based on the given prefix .
9383	Load properties from the given reader .
9384	Loads properties from the given class .
9385	Gets a property group .
9386	Returns true if the entity has been resolved .
9387	Resolves a system ID from the system .
9388	Resolves a system ID as a URL .
9389	Resolves a classpath resource name .
9390	Sets the value as a document .
9391	Normalize public id .
9392	Encodes a public ID .
9393	Decode an URIs .
9394	Replaces all occurrences of oldStr with newStr
9395	Start the timer .
9396	Returns the number of elapsed time .
9397	Wraps a StopWatch .
9398	Compares this hashCode using the hashCode .
9399	Generate hashcode hashcode .
9400	Generate hash code .
9401	Creates the data structures .
9402	Sets the value of a field .
9403	Reads the next token from the file .
9404	Initialize SimpleDateFormat .
9405	Adds a vertex to the graph .
9406	Sets the root vertex .
9407	Removes a vertex from the graph .
9408	Performs a depth - first search on the given vertex .
9409	Traverses a vertex in the graph .
9410	Finds a vertex by its data .
9411	Finds cycles in the graph .
9412	Normalize the given string .
9413	Parse an XML string .
9414	Parse an XML stream .
9415	Parse the given input source .
9416	Create an Element .
9417	Resolve a qualified qualified name .
9418	Copy attributes from srcElement .
9419	Returns true if the node has children .
9420	Get all child elements of a node .
9421	Get the text content of a node .
9422	Returns an iterator of all children of the given node .
9423	Gets the parent element .
9424	Adds a resource to this holder .
9425	Reads a catalog from an input stream .
9426	Read catalog .
9427	Returns the local host address .
9428	Resolves an entity .
9429	Sets system property value .
9430	Prints the codebase information for a given class .
9431	Helper method to describe a class .
9432	Strips the package name .
9433	Gets the package name .
9434	Attempts to load a class .
9435	Returns the wrapper wrapper for the given type .
9436	Get all interfaces of a class .
9437	Get all interfaces of a class .
9438	Checks if a class is a primitive wrapper .
9439	Creates an instance of the specified class based on the provided property name .
9440	Returns a getter for the given attribute .
9441	Returns a setter for the specified attribute .
9442	Convert a parameter to a Java class .
9443	Get the value of a system property .
9444	Returns a list of filenames for a given property name .
9445	Removes weak objects from the set .
9446	Returns an iterator over this set .
9447	Creates a urls for the given protocol protocol .
9448	Returns an immutable set of all entries in this group .
9449	Adds a bound property listener .
9450	Remove a bound property listener .
9451	Returns true if the given string is null .
9452	Returns the editor editor for the given type name .
9453	Registers an editor .
9454	Converts a text value to a primitive type .
9455	Get the context class loader
9456	Returns an ApplicationDeadlockException if the Throwable is null .
9457	Schedule a timeout .
9458	Executes the workout .
9459	Creates a new context with the given name .
9460	Lookup an object .
9461	Checks if the given object is an instance of the given class .
9462	Appends information about a class .
9463	Gets a transition by name .
9464	Read the properties file .
9465	Gets the verbosity .
9466	Query whether or not the relative catalog should be relative to .
9467	Gets the catalog files .
9468	Gets the catalog files .
9469	Query whether the preference is preferred .
9470	Query whether the static catalog is used .
9471	Resolve an entity .
9472	Resolves a relative URL .
9473	Make an absolute URI .
9474	Resolve the given object stream .
9475	Invokes the setter method .
9476	Gets the local name of the given element .
9477	Get the namespace URI for a given node .
9478	Gets the namespace URI .
9479	Converts an enumeration into a List .
9480	Returns an InputStream for the given filename .
9481	Load properties from a file .
9482	Reads properties file .
9483	Adds an edge to this graph .
9484	Adds an outgoing edge to this vertex .
9485	Adds an outgoing edge to this vertex .
9486	Returns true if the given edge has the given edge .
9487	Removes an edge from this graph .
9488	Returns the edge of the given destination .
9489	Returns the edge of the given edge .
9490	Returns the cost of this vertex .
9491	Compiles the contents of a file .
9492	Returns true if this iterator has no more elements .
9493	Fire an event .
9494	Install JVM type provider .
9495	Recursively deletes a folder .
9496	Dispatch action on FX thread .
9497	Returns an action stream for the given type .
9498	Creates the path for the view type .
9499	Converts a collection of records to a stream .
9500	Creates a stream from a collection .
9501	Converts a collection to a Stream .
9502	Converts a collection to a stream .
9503	Returns true if the robots should be allowed .
9504	Checks if the instruction is generated .
9505	Main method for testing .
9506	Main entry point .
9507	Gets the sum of degree .
9508	Parse superclass arguments .
9509	Notify the JdbcResourceLoader .
9510	Checks if data source is configured .
9511	Creates an iterable over the given type .
9512	Creates an array with the given type .
9513	Creates a list of objects from the given class .
9514	Returns a collection containing all the values of the given type .
9515	Returns a list containing all of the given type .
9516	Gets the right side of the right type .
9517	Gets an instance of the right type .
9518	Throws an exception if the type is not a valid type .
9519	Asserts that the given type is valid .
9520	Throws an exception if the type is not null .
9521	Connect to a JdbcTemplate .
9522	Runs in the database .
9523	Query for SQL .
9524	Returns the boolean value as boolean .
9525	Applies a query to the query .
9526	On upgrade .
9527	Backup the table .
9528	Restore this table .
9529	Sets the empty text .
9530	Dump data to a CSV file .
9531	Unescapes a string .
9532	Returns a list of values from a csv row .
9533	Convert a string to a Map
9534	Convert map to CSV string .
9535	Join a list of elements in a list
9536	Joins a list of strings .
9537	Reads a database model from a reader .
9538	Writes the table to the output stream .
9539	Checks the id field .
9540	Gets the base DAO model .
9541	Gets the bind type .
9542	Import a database from a CSV file .
9543	Backup all tables .
9544	Restore all tables from CSV .
9545	Writes the index .
9546	Creates a query .
9547	Creates a typed query .
9548	Render the query .
9549	Deletes the specified row .
9550	Saves the given object .
9551	Updates the given object .
9552	Add an item in the list .
9553	Adds a sub - query to the builder .
9554	Returns the next active stack .
9555	Gets an empty stack stack .
9556	Adds the given plan .
9557	Select the plan for the given policy .
9558	Select the plan at the given index .
9559	Sets the plan variables for a given belief .
9560	Gets the belief at the given index .
9561	Returns the parents of this node .
9562	Returns the children of this node .
9563	Grows a new byte array .
9564	Creates a logger .
9565	Updates the step .
9566	Sets the goals .
9567	Pauses the user input .
9568	Initializes the main number of agents .
9569	Initializes the IntentionSelectors .
9570	Start the intention selection threads .
9571	Shuts down the main intention selection threads .
9572	Register an extension .
9573	Resets the catalog .
9574	Loads an agent from the given class .
9575	Processes the plan for a given goal .
9576	Loads all agents in the given catalog .
9577	Loads a class .
9578	Load an extension from the class name .
9579	Compares two objects .
9580	Returns the command line usage .
9581	Parse command line arguments .
9582	Parse an argument with the given option .
9583	Evaluate a query .
9584	Returns the object at the specified index .
9585	Finds an object by name .
9586	Adds an object to the list .
9587	Returns the object at the specified index .
9588	Adds an object to the queue .
9589	Removes the element from the list .
9590	Gets the type of an object .
9591	Returns true if the given belief matches the given belief .
9592	Main method for testing .
9593	Converts a string to a byte array .
9594	Post a goal .
9595	Send a message to the agent .
9596	Send a message to the agent .
9597	Gets the goals .
9598	Creates a new belief set .
9599	Adds a belief set to the belief set .
9600	Evaluate a query .
9601	Suspend the agent .
9602	Gets the field with the given name .
9603	Registers the neighbors of a given number .
9604	Build a random name .
9605	Run the agent .
9606	Checks if the execution stack is valid .
9607	Remove all active agents .
9608	Evaluate a goal .
9609	Shuts down the pool .
9610	Sets whether the agent is idle .
9611	Moves the current card to the specified pin .
9612	Initializes the agent .
9613	Wait until all the agents are idle .
9614	Terminate all agents .
9615	Returns true if all pools are idle .
9616	Returns the pool id for the given agent id .
9617	Returns the currently selected expression .
9618	Sets the expression .
9619	Create a join expression from an attribute .
9620	Returns a join recursively .
9621	Find a join for the given property .
9622	Returns true if the response is reached .
9623	Gets the upload stream .
9624	Handle a REST request .
9625	Checks if the given parameter has the specified value .
9626	Get parameter value .
9627	Parse content type parameters .
9628	Configure transaction manager .
9629	Gets the target file .
9630	Writes an artifact to a file .
9631	Sets the instance field .
9632	Returns the constructor for the given implementation class .
9633	Builds a string representation of the descriptor .
9634	Gets the method from the given method .
9635	Returns the type of the given field .
9636	Returns the dependency value for the given type .
9637	Persist the file .
9638	Set default link .
9639	Sets the default link template .
9640	Handle links .
9641	Handles link headers .
9642	Handles the links for a JSON body .
9643	Parse a link object .
9644	Gets or adds a new map .
9645	Handles capabilities .
9646	Returns true if the method is allowed .
9647	Registers the processor processor .
9648	Registers an instance factory .
9649	Registers an instance processor .
9650	Registers a class processor .
9651	Gets an instance of a managed class .
9652	Adds an argument to the list .
9653	Returns a list of target files .
9654	Serialize this object to XML .
9655	Initialize this producer .
9656	Checks if a reference to a reference file exists .
9657	Create a template model from a reader .
9658	Create a template model from a file .
9659	Sets the request path .
9660	Gets an observable from the given start index .
9661	Returns an instance of the given string .
9662	Sets a field value .
9663	Adds a capture to the logger .
9664	Remove an appender from the logger .
9665	Clears the given appender .
9666	Read parameters from the request .
9667	Parse model .
9668	Resolve proxies .
9669	Gets the files in a directory .
9670	Parses a directory .
9671	Returns true if the model is fully resolved .
9672	Find all EObjects in the given resource set .
9673	Sets the model directories .
9674	Sets the file extensions .
9675	Sets the model resources .
9676	Moves the next record to the next record .
9677	Sets the value of the given parameter .
9678	Sets the value of a parameter .
9679	Execute a large update .
9680	Converts a string to an object type .
9681	Merges the given velocity template to the given velocity context .
9682	Gets the model directory .
9683	Gets the template directory .
9684	Writes the given value to the output stream .
9685	Start the web .
9686	Configures the window .
9687	Print the given view .
9688	Writes an input stream to the output stream .
9689	Invokes the given method .
9690	Attaches this servlet to this servlet .
9691	Detaches this instance .
9692	Returns the cookies attached to this response .
9693	Dumps information about the request .
9694	Gets the invocation meter .
9695	Configure event stream .
9696	Set the remote host .
9697	Gets a parameter from the event stream .
9698	Remove a prefix from a path .
9699	Gets the common directory .
9700	Converts an absolute path to a relative relative path .
9701	Convert relative path to absolute path .
9702	Returns the depth of a directory .
9703	Dumps an error message .
9704	Sends a JSON object to the response .
9705	Adds a template template .
9706	Adds template templates .
9707	Initialize the template model .
9708	Find references to template .
9709	Enable or disable the save button .
9710	Displays a delete .
9711	Handle the endpoint .
9712	Creates a new instance of the given managed class .
9713	Returns a sorted array of files .
9714	Returns a summary of all the total counts .
9715	Returns a summary of the summary .
9716	Gets a summary row for a given path .
9717	Creates a new service instance .
9718	Gets the setup class .
9719	Gets the model directories .
9720	Gets the model resources .
9721	Sets the candidates for the container .
9722	Loads XML document from an input stream .
9723	Handle an error notification .
9724	Checks if the given parameter is an object .
9725	Reads the parameters from the request .
9726	Reads a JSON object from an input stream .
9727	Extract the parameter value from the fit value .
9728	Gets the value of the hints property .
9729	Determines if the request is an XHR request .
9730	Determines if the request is android . xml .
9731	Handle entity event .
9732	Gets all properties for a given type .
9733	Returns an annotation for the given property type
9734	Log message .
9735	Lookup a user .
9736	Determine if the JRubyHost is parser for the given host .
9737	Gets managed class .
9738	Gets the managed method .
9739	Process cell .
9740	Process cell .
9741	Get a column as a boolean .
9742	Returns true if the argument is a wrapper for the given class .
9743	Serialize this servlet response .
9744	Gets the value of the cookie .
9745	Adds a cookie to the response .
9746	Remove cookie .
9747	Returns an iterator over the cookies .
9748	Gets the targetFileList producer .
9749	Adds a field .
9750	Compile the compiler .
9751	Verifies that the response matches the given token
9752	Gets the value of the file .
9753	Ensure that the given URI is a trailing slash .
9754	Login to the servlet container .
9755	Gets the http servlet request .
9756	Invokes transactional method .
9757	Execute a mutable method .
9758	Execute an immutable transaction .
9759	Returns all files in this directory .
9760	Gets the last file .
9761	Gets the concrete configuration .
9762	Checks if the request path starts with the given path .
9763	Returns a list of factories for the given model type .
9764	Gets the session .
9765	Serialize the http servlet response .
9766	Reads the meta data .
9767	Override handleRequest .
9768	Close the statement .
9769	Called when the event is stopped .
9770	Handle allowed methods .
9771	Uploads the blob .
9772	Deletes the data from the server .
9773	Extract column parameters .
9774	Returns an array of argument names .
9775	Schedule a periodic task .
9776	Schedule a timeout .
9777	Load views from config file .
9778	Returns the next file .
9779	Load the application configuration .
9780	Print welcome banner .
9781	Print the stopped banner .
9782	Create a chame instance .
9783	Register a shutdown hook .
9784	Trigger a notification .
9785	Handle the trigger .
9786	Inserts the given fit into the list .
9787	Returns the counts .
9788	setter for score - sets
9789	getter for variants - gets
9790	setter for variants - sets
9791	getter for questionType - gets
9792	setter for questionType - sets
9793	getter for token - gets
9794	getter for depLabel - gets
9795	setter for depLabel - sets
9796	getter for semanticType - gets
9797	setter for semanticType - sets
9798	getter for sections - gets
9799	setter for sections - sets
9800	indexed getter for sections - gets an indexed value -
9801	indexed setter for sections - sets an indexed value -
9802	getter for uris - gets
9803	setter for uris - sets
9804	getter for types - gets
9805	setter for types - sets
9806	getter for targetType - gets
9807	setter for targetType - sets
9808	getter for rank - gets
9809	setter for rank - sets
9810	getter for queryString - gets
9811	setter for queryString - sets
9812	getter for candidate answers - gets
9813	setter for candidate answers - sets
9814	indexed getter for candidate answers - gets an indexed value -
9815	indexed setter for candidates - sets an indexed value -
9816	getter for query - gets
9817	setter for query - sets
9818	getter for hitList - gets
9819	setter for hitList - sets
9820	indexed getter for hitList - gets an indexed value -
9821	indexed setter for hitList - sets an indexed value -
9822	getter for abstractQuery - gets
9823	setter for abstractQuery - sets
9824	getter for searchId - gets
9825	setter for searchId - sets
9826	setter for docId - sets
9827	getter for offsetInSection - gets
9828	setter for offsetInSection - sets
9829	getter for offsetInSection - gets
9830	setter for offsetInSection - sets
9831	getter for beginSection - gets
9832	setter for beginSection - sets
9833	getter for endSection - gets
9834	setter for endSection - sets
9835	getter for aspects - gets
9836	setter for aspects - sets
9837	getter for triple - gets
9838	setter for triple - sets
9839	getter for sourceRel - gets
9840	setter for sourceRelation - sets
9841	getter for subject - gets
9842	setter for subject - sets
9843	getter for predicate - gets
9844	setter for predicate - sets
9845	getter for ISObjectUri - gets
9846	setter for object - sets
9847	getter for operator - gets
9848	setter for operator operator - sets
9849	getter for operatorArgs - gets
9850	setter for operatorArgs - sets
9851	getter for concept - gets
9852	getter for score - gets
9853	getter for text - gets
9854	setter for text - sets
9855	getter for id - gets
9856	setter for id - sets
9857	getter for name - gets
9858	getter for abbreviation - gets
9859	setter for abbreviation - sets
9860	setter for concept - sets
9861	getter for variants - gets
9862	setter for variants - sets
9863	getter for namedEntityTypes - gets
9864	setter for namedEntityTypes - sets
9865	getter for conceptType - gets
9866	setter for conceptType - sets
9867	getter for occurrences - gets
9868	setter for occurrences - sets
9869	getter for concepts - gets
9870	setter for concepts - sets
9871	getter for originalText - gets
9872	setter for originalText - sets
9873	getter for arguments - gets
9874	setter for arguments - sets
9875	getter for label - gets
9876	setter for label - sets
9877	Returns the next clear bit .
9878	Sets the bit at the specified index .
9879	Free the given buffer .
9880	Returns a new CacheValue instance for the given directory .
9881	Rehashes the values of the given array .
9882	method to convert HELM to HELM
9883	Checks if there are brackets in the annotation section .
9884	method to add details from a string
9885	Returns a HELM2M representation of the HELM 2 .
9886	add an element
9887	Runs the HELM .
9888	Validate a polymer id
9889	Checks if the connection is valid
9890	Validate connection details .
9891	Check if a groupID is valid
9892	Checks if a string is repeating .
9893	method to check if the polymer is a peptide
9894	convert notation to json
9895	get a single Polymer object
9896	Gets the current grouping .
9897	Converts the HELM structure to a HELM document .
9898	method to convert polymer to HELM2
9899	Convert connection to HELM2M2
9900	Convert groupings to HELM
9901	Convert annotation to HELM2
9902	method to get all polymer ids
9903	Get a PolymerNotation by id
9904	Sets the polymer elements .
9905	method to convert a HELM to HELM
9906	Sets the annotation .
9907	Set the count .
9908	method to determine the MonomerNotation of the given string
9909	method to determine the MonomerNotationGroup in the given string
9910	Determine the HELM entity
9911	Returns a list of double values .
9912	Parses a HELM string .
9913	method to set the nucleotide
9914	Defines the ambiguity for the given string .
9915	Get the statistics for this worker .
9916	Creates an ADI graph from a collection of edges .
9917	Creates an ADI graph from a collection of nodes .
9918	Initialize incoming paths .
9919	Sorts all nodes in the graph .
9920	Subscribes a pattern for the given pattern .
9921	Ask the number of subscribe_counts for the given pattern .
9922	Unsubscribe a callback .
9923	Method that returns the result of a request .
9924	Send a return sync sync .
9925	Polls the next timeout .
9926	Shuts down the server .
9927	Checks if the given exception is not local .
9928	Unlock run state
9929	Creates a new worker .
9930	Try to add a worker to the scheduler .
9931	Register a worker .
9932	De - registers a worker .
9933	Signals the work of work .
9934	Run a worker .
9935	Awaits for a work queue .
9936	Gets the number of queued tasks .
9937	Returns the common task queue .
9938	Replies the help for the given task .
9939	Submit a ForkJoinTask .
9940	Make common common pool .
9941	Gets the current state of this queue .
9942	Build a string as a string .
9943	Gets the threads pool statistics .
9944	Creates an AList containing the given elements .
9945	Reverses the elements in this list .
9946	Iterate over all elements of an iterable .
9947	Applies the left value of the supplied iterable to the supplied iterable .
9948	Folds the left value of the first element of the given list .
9949	Adds a task to the pool .
9950	Converts nullable to a non - null option .
9951	Creates a new hashmap from keys and values .
9952	Returns an empty ListMap .
9953	Creates a new ListMap from the given elements .
9954	Creates a new list map from keys and values .
9955	Returns an immutable set of keys .
9956	Normalize resource name .
9957	Marshals the bound type .
9958	Returns a sub - sequence of characters in the specified range .
9959	Returns a binary search for the given list of elements .
9960	Returns a binary search for the given list of elements .
9961	Sends an email .
9962	Sends an email .
9963	Bind a pattern to the route .
9964	Binds a filter binding .
9965	Returns true if the tag is present in the tag .
9966	Returns an integer value as an integer .
9967	Removes duplicate strings from an array .
9968	Returns the percentage of the given string .
9969	Run the runnable .
9970	Login a user .
9971	get login
9972	Gets the login user .
9973	Checks if the given password matches the given salt .
9974	Saves a member in the cookie .
9975	Generate the login key
9976	Returns the cookie user for a cookie .
9977	Dispatch the current request to the given path .
9978	Append file separator .
9979	Returns the given parameter as a long .
9980	Log a debug message .
9981	Returns information about the call stack .
9982	Converts char array to simple byte array .
9983	Converts a CharSequence into a byte array .
9984	Converts a byte array to a simple char array .
9985	Converts a CharSequence into an ASCII byte array .
9986	Returns the locale data for the given locale .
9987	Schedules a promise .
9988	Crops the given image to the specified location .
9989	Executes the given invoker .
9990	Invokes the given direct invocation .
9991	Gets the rest operations .
9992	Render an Ajax error message .
9993	Render an AJAX message .
9994	Generate template .
9995	Parse a path from the current action .
9996	Renders data tables .
9997	Render empty data tables
9998	Sets the list of items .
9999	Send a response to the browser .
10000	Returns a list of bindings for the given injector .
10001	Returns the current method name .
10002	Compact memory .
10003	Propagate metrics collection .
10004	Encodes a string .
10005	Get charset .
10006	Copies the input stream to the output stream .
10007	Copy bytes from input stream to output stream
10008	Copies the input stream to the output stream .
10009	Copy the contents of the given Reader to the output stream .
10010	Copy characters from a Reader to a Writer
10011	Copies the reader to the output stream .
10012	Copies the contents of a Reader to an output stream .
10013	Compares two input streams .
10014	Compares two Reader objects .
10015	Apply an operator to the pipeline .
10016	Returns the SQL statement for the given groupName and sqlId .
10017	Unmarshals the given class .
10018	Unzips a zip file .
10019	Creates a new instance of PermissionDialog .
10020	Sets the resume listener .
10021	Register core value type .
10022	Returns true if the given regular expression matches the given regular expression .
10023	Check if a string is mobile .
10024	Checks if a string is a phone number
10025	Checks if the given string is a birth day .
10026	Checks if the given string is a URL .
10027	Check if a string is a date time .
10028	Apply the filter chain .
10029	Encodes the given String to Base64 .
10030	Decode base64 string .
10031	Converts a hex string to a byte array .
10032	Read properties from an input stream .
10033	Read content from an input stream .
10034	Read content as string .
10035	Writes data to a file .
10036	Copy a directory to the target directory .
10037	Serialize a DOM Document .
10038	Reads a document from a file .
10039	Constructs a Document from a string .
10040	Constructs a Document from an input stream .
10041	Validates an XML signature .
10042	Sign an XML document .
10043	Checks if the given class is cached .
10044	Returns true if the given class is a primitive array .
10045	Returns true if the given class is a primitive wrapper array .
10046	Resolve the given class if necessary .
10047	Returns true if the left - hand side type is assignable .
10048	Check if value is assignable .
10049	Returns all interfaces of the given instance .
10050	Returns all interfaces of the given instance .
10051	Write properties to temp file .
10052	Returns the variables for the given URI .
10053	Put a single permission
10054	Creates a new DruidPlugin instance .
10055	Bind an extension to the given extension point .
10056	Returns the context for the given type .
10057	Converts a primitive type to a primitive type .
10058	Converts an object to a type .
10059	Convert an object to a value type .
10060	Returns a query parameter .
10061	Retrieves a cookie from the request .
10062	Returns a session attribute .
10063	Initialize data source .
10064	Sets shared variable .
10065	Sets a parameter for the given field .
10066	Sets the parameter for the given field .
10067	Shows the permission dialog .
10068	Returns true if all values are granted .
10069	Returns true if any of the given values are denied .
10070	Find records by query .
10071	Find record .
10072	Returns true if the model is a new model .
10073	Determines whether the given method is declared in the given method .
10074	Remove all SoftValue from the queue .
10075	Sets the value for the given key .
10076	Returns true if the given string matches the given pattern .
10077	Read arguments .
10078	Gets the protobuf entity .
10079	Returns true if the given class is a protobuf entity .
10080	Returns all protobufs for the given class .
10081	Returns the getter method for the given protobuf attribute .
10082	Gets the pojo setter .
10083	Gets the object mapper .
10084	Gets the JsonFactory .
10085	Convert an object to a JSON string .
10086	Sets the border .
10087	Returns the user record for the given domain name .
10088	Copy out all attributes from the target object .
10089	Copy out attribute values from mbean .
10090	Returns the value of a property .
10091	Sets a property .
10092	Adds the app to the application .
10093	Saves the access token .
10094	Gets the access token .
10095	Gets the default class loader .
10096	Gets the resource with the given name .
10097	Gets the resource as an InputStream .
10098	Returns an InputStream for the given class .
10099	Initialize this URI with the same parameters .
10100	Initialize the scheme .
10101	Initialize the path from the URI .
10102	Set the scheme .
10103	Set the user info .
10104	Set the host .
10105	Set the port number .
10106	Append a path .
10107	Set the query string .
10108	Set the current fragment .
10109	Returns the URI of the URI .
10110	Creates a PreparedStatement using the given iterator .
10111	Initialize the persistence service .
10112	Get the muffin string
10113	Set the muffin value
10114	Get the clipboard contents
10115	Set clipboard contents
10116	Open a file input stream
10117	Loads all services by type .
10118	Sets the service parameters .
10119	Gets service params .
10120	Find a Parametrietrized by id .
10121	Finds a service by its class .
10122	Parse a query response .
10123	Returns an iterator over the elements in this buffer .
10124	Returns the encoding of the given xml string .
10125	Returns the parent logger .
10126	Gets a connection .
10127	Get authorization code
10128	Visit a package declaration .
10129	Visit a class declaration .
10130	Visit an executable declaration .
10131	Get an option from a map .
10132	Returns a filter that matches the given modifiers .
10133	Returns a filter that matches the given declaration .
10134	Returns a new filter that matches this filter .
10135	Returns a combined filter that matches this filter .
10136	Returns the result as a map .
10137	Make sure the given constructor is accessible .
10138	Prepare an object query .
10139	Replaces a string with a hyphen .
10140	Converts a byte array to a hex string .
10141	Returns the indexes for the given parameter name .
10142	Parse SQL statement .
10143	Convert a collection of protobufs to a protobuf .
10144	Sets a protobuf field value .
10145	Sets the value of a POJO field .
10146	Accept this path .
10147	Create a new ResultSet .
10148	Creates a map of expected labels .
10149	Extract values from a list of values
10150	Gets the generic supertype of the given class .
10151	Polls a batch of objects .
10152	Poll the list of polled objects .
10153	Gets the field of a class .
10154	Gets the declared methods of a class .
10155	Gets the declared method with the given name and parameter types .
10156	Gets all declared methods of the given class .
10157	Gets all declared constructors .
10158	Print a byte .
10159	Returns the index of the first occurrence of the specified substring .
10160	Removes all chars from string .
10161	Clean up the state of the user .
10162	Initialize audit .
10163	Initialize message queue .
10164	Initializes the password validator instance .
10165	Initialize the PasswordAuthenticator .
10166	Resolves a locale code .
10167	Returns the locale information for the given locale .
10168	Creates a new Statement .
10169	Removes all elements from this list .
10170	Push an element to the list .
10171	Removes the element from the stack .
10172	Make an input stream .
10173	Parse arguments .
10174	Returns true if the tokens match the given patterns .
10175	Moves the specified amount of points to the specified location .
10176	Returns true if this rectangle contains another rectangle .
10177	Returns true if the specified point is contained within this rectangle .
10178	Returns the intersection of this rectangle .
10179	Returns the union of this rectangle .
10180	Replaces this rectangle with another rectangle .
10181	Replaces this rectangle with another rectangle .
10182	Returns the number of columns of the specified column .
10183	Gets the number of rows of a row .
10184	Returns the bounds of the bounds of the cell .
10185	Calculate the columns
10186	Calculates the number of rows
10187	Unwrap a throwable .
10188	Starts the main thread .
10189	Called when a new code is updated .
10190	Copies the code buffer to the internal buffer .
10191	Renders instructions .
10192	Initialize the application .
10193	Returns a partial copy of this query .
10194	Adds a child to this node .
10195	Clear all children of this node .
10196	Returns the next solution .
10197	Adds instructions to this function .
10198	Adds instructions to the parent .
10199	Invoked when a property change is changed .
10200	Registers a work panel .
10201	Update the present component flags .
10202	Creates a new type .
10203	Returns true if the given term is bound .
10204	Optimize instructions .
10205	Compares two collections .
10206	Service service .
10207	Render the tag .
10208	Renders a button .
10209	Resets state .
10210	Initialize the training data .
10211	Returns the value associated with the specified key .
10212	Gets the index of the specified key .
10213	Sets the value at the specified index .
10214	Removes the specified object from the map .
10215	Removes the value at the specified index .
10216	Returns true if the property has the specified property .
10217	Sets the value of a property .
10218	Fetch the value of the specified property .
10219	Checks if the given primitive type is assignable .
10220	Initialize the setter method .
10221	Determines the decision tree for the given state .
10222	Initialize the decision trees .
10223	Unify all free variables in the given query .
10224	Unify two terms .
10225	Unify a variable with a left term .
10226	Compiles a query .
10227	Find the maximum number of arguments in the clause .
10228	Allocate local variables for a query .
10229	Gather the position and position of the statement
10230	Print a compiled predicate .
10231	Print a compiled query .
10232	Puts a 32 - bit integer into the buffer .
10233	Converts a buffer to a String
10234	Returns the string value for the given attribute .
10235	Sets the string value for this attribute .
10236	Reads a single term .
10237	Checks if a class exists .
10238	Returns true if the given class is a subtype of the given class .
10239	Returns true if the given parent is a subtype of the given child .
10240	Returns true if the parent class is a subtype of the given parent class .
10241	Returns the class with the given name .
10242	Creates a new instance of the given class .
10243	Creates a new instance of the given constructor .
10244	Invokes a method on the given object .
10245	Calls a method on the object .
10246	Calls a static method .
10247	Returns the constructor for the given class .
10248	Finds a set of setters for the given property .
10249	Converts a Queue into a Queue .
10250	Convenience method for getting a transaction from a queue .
10251	Returns the type of the given object .
10252	Resets the state .
10253	Returns the state of the goal .
10254	Creates a new type .
10255	Add a supported time to the endpoint
10256	Adds an alternate dimension to the table .
10257	Add a dimension table
10258	Searches for free variables .
10259	Searches for free non - anonymous variables .
10260	Compares two objects .
10261	Writes an object to a file .
10262	Reads a stream as a String .
10263	Creates a new search node .
10264	Generate a trace indent for the given delta .
10265	Allocate arguments for a function .
10266	Returns true if the last body is the last body of the function .
10267	Calculates the classification classification for a given property .
10268	Determine if all the examples of the given examples have the same value .
10269	Determines the best value for the given output property .
10270	Creates a functor with the given arguments .
10271	Returns a new variable with the given name .
10272	Executes the action with the given action .
10273	Returns a list with the specified index .
10274	Sets the texture paint .
10275	Implements the paint method to paint the background .
10276	Creates a buffered image .
10277	Creates a new Graphics2D2D2D .
10278	Creates binary image .
10279	Creates a SIS surface image .
10280	Sets the queue search algorithm .
10281	Performs a depth - first search for the given start state .
10282	Performs a search using the given start states .
10283	Main method for testing .
10284	Returns clause .
10285	Returns a list of terms from the token source .
10286	Parses a functor .
10287	Parse a list of functions .
10288	Returns an array of arguments .
10289	Read a variable .
10290	Parse an integer literal .
10291	Parse a float literal .
10292	Parse a string literal .
10293	Returns a directive .
10294	Interns an operator .
10295	Initialize the built - in operators .
10296	Consumes the next token .
10297	Returns true if the next token is consumed .
10298	Binds this transaction to the current thread .
10299	Rollback the transaction .
10300	Adds the given iterator to the target collection .
10301	Reserve call point .
10302	Converts the day of day of day to milliseconds .
10303	Convert a tick year to a year value .
10304	Returns the ticks with the specified hours .
10305	Removes the ticks to the given ticks .
10306	Returns ticks with given seconds .
10307	Returns ticks with given year
10308	Calculates the ticks for a given month
10309	Returns ticks with given date
10310	Calculates the amount of milliseconds from the given year .
10311	Returns the month of the given year .
10312	Reads a byte array from the source .
10313	Applies an entry to the next sequence number .
10314	Returns the entry for the given key .
10315	Stores the entry in the hash table .
10316	Rehashes the table .
10317	Invoked when the action is pressed .
10318	Sets the next available state .
10319	Sets whether the property is available .
10320	Sets whether the property is finished .
10321	Creates a new instance of an instance of the native native resolution .
10322	Returns an iterator over all variables in this sequence .
10323	Calculates the expected value for the given probabilities .
10324	Returns a probability for all symbols in the given symbols .
10325	Sets the ticks .
10326	Performs a sort of the action .
10327	Creates a new URL .
10328	Returns the request information for the request .
10329	Get the headers .
10330	Gets the cookies .
10331	Gets the request parameters .
10332	Gets the request scope .
10333	Gets the page scope .
10334	Gets the session scope .
10335	Gets the application scope .
10336	Gets the principal principal .
10337	Render the debug tag .
10338	Converts a property name into a HTML table .
10339	Performs a search using the given start states .
10340	Sets the current screen state .
10341	Walk the given term .
10342	Compares two objects .
10343	Updates the registry .
10344	Notifies all registered listeners .
10345	Removes a clause from a clause .
10346	Determines if the context is a top level of the function .
10347	Returns an array containing the elements of this array .
10348	Sets the arguments .
10349	Gets fixity .
10350	Determines if this node is in an Infix .
10351	Compares an object with priority .
10352	Handle a property change event .
10353	Registers a work flow controller .
10354	Returns an enum factory for the specified class .
10355	Create a component factory .
10356	Returns the storage cell for this variable .
10357	Returns true if this variable is bound .
10358	Sets column attribute .
10359	Set row attribute .
10360	Gets attribute set .
10361	Returns the attribute set for the given row .
10362	Internal method for insertion .
10363	Creates a new TimeRangeType .
10364	Creates a new instance of a type pattern .
10365	Determines if the given value is an instance of the given value .
10366	Creates an initial context for the given term .
10367	Updates the registers of this layout .
10368	Returns the value of this expression .
10369	Finds a goal path starting from the current state .
10370	Joins the two nodes in the reverse path and returns the result as a join node .
10371	Cache a block .
10372	Gets the properties for a resource .
10373	Sets the rate of the rate in the batch .
10374	Reads a number of bytes from the source stream .
10375	Skip n bytes .
10376	Gather the expressions for the given disjunction .
10377	Read an int from the byte array at the given offset .
10378	Writes an int into a byte array at the given offset .
10379	Writes a 16 bit integer into the buffer at the given offset .
10380	Read a 16 bit integer from the buffer at the given offset .
10381	Read a short .
10382	Writes a short to the buffer at the given offset .
10383	Returns a new TreeSearchState instance for the given operator .
10384	Returns an iterator over all operators in the tree .
10385	Returns the id of an attribute .
10386	Returns the value of the specified attribute .
10387	Sets the value of an attribute .
10388	Convert a string to an array of strings .
10389	Convert an array to a list of strings
10390	Converts a name to camelCase
10391	Convert a string to a string .
10392	Returns the current configuration .
10393	Returns a list of handlers for the given handlers .
10394	Resolves a call point for a function name .
10395	Sets the code point for a function call .
10396	Determines if this comparator is a sub category of the given comparator .
10397	Returns the id of the category .
10398	Returns the value at the given level .
10399	Get last value
10400	Serialize the hierarchy .
10401	Deserialize an attribute .
10402	Computes the Manhattan distance between the given node .
10403	Modify a c value .
10404	Adds an error message .
10405	Handles an exception .
10406	Writes a string to the output stream .
10407	Classify the decision tree .
10408	Compares two objects .
10409	Returns a copy of this iterator .
10410	Returns the 2 log 2 log 2 .
10411	Converts an integer to a 2 - 2 log 2 .
10412	Returns the integer value of the given integer value .
10413	Converts an integer value to an integer .
10414	Returns the integer value of the given long value .
10415	Returns the integer value of the given long value .
10416	Returns the number of characters in the given integer value .
10417	Returns the number of characters in the given long value .
10418	Returns the number of characters in the given integer value .
10419	Sets the head instructions .
10420	Emits the code point to the given byte buffer .
10421	Sets the current screen .
10422	Evaluates a predicate .
10423	Returns the value of a property .
10424	Gets the properties for a key .
10425	Returns an iterator over the elements in the order of the elements in the order .
10426	Creates array properties .
10427	Sets the throttle rate .
10428	Evaluates the given type .
10429	Try to load properties .
10430	Gets the properties from the system property .
10431	Loads properties from classpath resource .
10432	Gets the properties from the properties file .
10433	Removes the function from the traverser .
10434	Returns the value of this term .
10435	Sets the substitution .
10436	Create a queue of nodes .
10437	Clean up resources .
10438	Appends an event to the socket .
10439	Fire connector .
10440	Initialize the printers .
10441	Commits all changes to the resource .
10442	Rollback the transaction .
10443	Request a write operation .
10444	Add a cached write operation to the cache .
10445	Acquires a global write lock .
10446	Releases the global write lock .
10447	Enlist this resource with the given transaction .
10448	Enter media query node .
10449	Inserts the specified element into the queue waiting for the specified timeout .
10450	Retrieves the next element from the queue .
10451	Adds an element to the queue .
10452	Inserts an element into the queue .
10453	Returns the next object .
10454	Get the property as a boolean .
10455	Returns the property as Integer .
10456	Returns the value of the property as a Long .
10457	Call a mixin .
10458	Sets the addition of nodeVisitor .
10459	Performs backward traversal .
10460	Retrieves the code for the given call point .
10461	Execute the set of bindings for the given query .
10462	Decodes the term at the given index .
10463	Capture the memento fields .
10464	Restores all fields from an object .
10465	Retrieves an object from the cache .
10466	Put an attribute into the cache .
10467	Gets all the fields for a class .
10468	Execute the command .
10469	Adds an element to the queue .
10470	Polls the next item in the list .
10471	Creates a new search node .
10472	Creates a queue of nodes .
10473	Creates a new TermWalker .
10474	Creates a goalWalker for a given goal matcher .
10475	Creates a new TermWalker .
10476	Creates a new GoalWalker for a given UNary predicate .
10477	Creates a new TermWalker for a postfix .
10478	Load properties from an input stream .
10479	Load properties from a file .
10480	Load properties from a URL .
10481	Gets the properties for a given path .
10482	Compute the size of the grid .
10483	Initialize the font metrics .
10484	Add a new property change listener .
10485	Add a new property change listener .
10486	Remove a property change listener .
10487	Fire a property change event .
10488	Creates a new type .
10489	Performs a fade on the specified group .
10490	Shows the horizontal bar .
10491	Shows the left vertical bar .
10492	Shows the right vertical bar .
10493	Sanitize radio controls .
10494	Wait for the given condition to be evaluated .
10495	Waits until the given timeout expires .
10496	Execute the command .
10497	Append classpath .
10498	Creates a new type .
10499	Print the introduction of the introduction .
10500	Initializes the console reader .
10501	Evaluate a sentence .
10502	Evaluates the query .
10503	Converts a boolean value to a single type .
10504	Converts a byte value into a MultiTypeData object .
10505	Returns a multi type data for a character .
10506	Converts a short value to a multi - type data type .
10507	Returns a multi - type data for an integer .
10508	Returns a multi - type data for a long value .
10509	Converts a float value to a multi - type data type .
10510	Converts a double value to a multi - type data type .
10511	Creates a new MultiTypeData object .
10512	Converts an object to a multi type data type .
10513	Convert multi type data to an object .
10514	Setter for attribute value .
10515	Clear all entries in the map .
10516	Expands the key .
10517	Inserts a character into the data buffer .
10518	Compares two search nodes .
10519	Parses a function .
10520	Returns all operators matching the given fixity .
10521	Checks that the given operator is compatible with the given fixity .
10522	Make a new node with the given successor .
10523	Pad a string to a string .
10524	Returns a string containing the parsing errors .
10525	Returns a string describing the options in the configuration .
10526	Prints the usage information for this command line .
10527	Adds trailing pairs to the given properties .
10528	Adds options to the given properties .
10529	Adds an option to the command line .
10530	Take a list of free arguments from a list of free arguments .
10531	Checks if the given command line matches the expected format .
10532	Compares the given iterator using the given mapping .
10533	Returns an enumeration of options .
10534	Returns command line options .
10535	Set the stem .
10536	Gets the actual stemmer .
10537	Methode a word
10538	Main method for testing .
10539	Creates a new type with the given name and max range .
10540	Resets the state of this instruction .
10541	Trace env frame frame .
10542	Trace the choice frame frame
10543	Call internal method .
10544	Returns the next stack frame .
10545	returns true if there is a backstack
10546	Handles a trail .
10547	Uninds a trail .
10548	Determines the state of the trail .
10549	Unpack two arrays .
10550	Unify a constant .
10551	Prints a slot .
10552	Generate random state for the given goal string .
10553	Checks to see if the given state is valid .
10554	Returns a new child state for the given operator .
10555	Returns an iterator that can be used as a valid operator .
10556	Returns a string representation of this board .
10557	Swaps the tile at the specified location .
10558	Swap tiles between two tiles .
10559	Converts a string to a character list .
10560	Converts a character list into a new state .
10561	Converts a log record to a log message .
10562	Converts the given Level to the given Level .
10563	Requeue an element .
10564	Requeue an element .
10565	Increments the size of the given record .
10566	Decrement the size of the given record .
10567	Signals on the threshold threshold .
10568	Returns an enumeration with the given name .
10569	Returns a list of bindings for the given name .
10570	Adds a property to the environment .
10571	Remove a property from the environment .
10572	Iterates over the memory and runs the garbage collection .
10573	Matches a literal
10574	Resolves a mixin for a mixin .
10575	Pushes a variable reference to the stack .
10576	Set the maximum row height .
10577	Updates the max column width .
10578	Executes the action with the given action .
10579	Make a new node .
10580	Executes the action forward .
10581	Substitute built in a builtin transformer .
10582	Initialize symbol table .
10583	Perform top level check .
10584	Converts a list of arguments to a string .
10585	Evaluate the two numbers .
10586	Sets the current state .
10587	Called when the shutdown is stopped .
10588	Notify the shutdown .
10589	Adds an element to the heap .
10590	Returns the smallest log2 of the given n .
10591	Updates the minimum node .
10592	Compares two nodes .
10593	Adds a new node to the root list .
10594	Restart the cache .
10595	Returns a set of all methods that match the given search method .
10596	Gets all elements of the given search method .
10597	Find all solutions in the given collection .
10598	Returns the next element in the sequence .
10599	Restores all stored values from the given object .
10600	Gets the value of a property .
10601	Sets the multi typed data for a given property .
10602	Sets the value of a property .
10603	Capture the memento .
10604	Removes the element from the list .
10605	Convert modifiers to string .
10606	Converts a string to an integer .
10607	Converts a string to a date .
10608	Returns true if the given string is a valid date .
10609	Returns true if the given string is a time value .
10610	Returns true if the given string is a valid date .
10611	Returns a token source for the given string .
10612	Returns a token source for the given file .
10613	Gets the token source for the given input stream .
10614	Returns true if the given instruction is constant .
10615	Checks if the given instruction is a void variable .
10616	Returns true if the given instruction is non - arg .
10617	Returns an iterator over the body of this node .
10618	Returns the term at the given index .
10619	Returns an iterator over the children of this function .
10620	Returns a string representation of this argument .
10621	Retrieve the summary .
10622	Retrieves records from the given schema .
10623	Execute query .
10624	Emits a bytecode to the WAM machine .
10625	Set the basic types .
10626	Analyzes the input stream .
10627	Print a binding binding .
10628	Expand a set of solutions to a map
10629	Runs the stream .
10630	Read the stream .
10631	Returns the current time .
10632	Calculates the current time stamp .
10633	Update the track info .
10634	Updates the playlist with the specified playlist .
10635	Renders the output .
10636	Handles a resource request .
10637	Handles an event request .
10638	Fire a start music request .
10639	Initializes the parser .
10640	Start the stream .
10641	Shuts down the connection .
10642	Resets the parser .
10643	Parses Packet packets .
10644	Processes a packet .
10645	Sets the option .
10646	Creates a new Chat .
10647	Initialize the update .
10648	Resets content .
10649	Sets a property .
10650	Adds a filter to the list of filters .
10651	Processes a request .
10652	Resets all stored properties .
10653	Initializes the writer .
10654	Sends a packet to the server .
10655	Returns the next packet .
10656	Open the stream .
10657	Returns a list of all available informations .
10658	Returns true if the descriptor contains the given descriptor .
10659	Add an event listener for the given event life cycle .
10660	Shuts down the timer .
10661	Compares two files .
10662	Clean up a direct byte buffer .
10663	Returns true if the entry is invalid .
10664	Returns null if key is null .
10665	Compares two objects .
10666	Returns the entry for the given key .
10667	Resize the table .
10668	Adds the given mappings to this map .
10669	Removes the entry from the map .
10670	Remove an entry from the table .
10671	Remove an entry from the map .
10672	Adds an entry to the table .
10673	Creates a delegating delegation for the given set of keys .
10674	Encode binary attribute .
10675	Encodes a byte array .
10676	Encodes a string .
10677	Encodes a byte array into a base64 string .
10678	Iterate over the elements in the collection .
10679	Set the controller for the track selector .
10680	Sets the progress controller .
10681	Sets the playback controller .
10682	Sets the controller for the volume .
10683	Broadcasts a list of available playlists
10684	Handles command resources .
10685	Handles volume .
10686	Handles a jump .
10687	Handles a select event .
10688	Returns the thread cache for the given name .
10689	Returns the request cache for the given name .
10690	Gets the alt field .
10691	Returns a copy of the given map .
10692	Returns the shard path for the given id .
10693	Adapts a session to a session .
10694	Invokes a method on the target object .
10695	Deletes a tree .
10696	Update an object .
10697	Sets the ping interval .
10698	Schedules the ping server .
10699	Add all application options .
10700	Determine if the given option is used .
10701	Parse command line arguments .
10702	Prints usage for an app .
10703	Parse command line arguments .
10704	Initialize the connection .
10705	Called when the connection is received .
10706	Gets the compression handler .
10707	Request stream compression .
10708	Start the stream compression .
10709	Notifies that the connection has been closed .
10710	Notifies all registered connection listeners .
10711	Register a SASLMechanism .
10712	Returns a list of registered SASLMechanism .
10713	Gets the output plugin behaviour .
10714	Logs a message .
10715	Log a message and throw an error .
10716	Logs a message to a PrintStream .
10717	Creates an optional start event .
10718	Create a start event .
10719	Notify listeners .
10720	Returns true if the given resource is available .
10721	Check if all resources have been set .
10722	Returns true if the given list of resources contains a resource with the given IDs .
10723	Provides a list of resource models .
10724	Get a map from the cache .
10725	Gets the cache key .
10726	Removes an item from the cache .
10727	Put a cached value into the cache .
10728	Returns a map containing all CF locations .
10729	Includes the given file .
10730	Includes a jar file .
10731	Adds a SASL mech .
10732	Add a set of SASL mechs .
10733	Creates the debug output .
10734	Activate the content of the given properties .
10735	Registers common events .
10736	Registers an event listener .
10737	Registers an event ID .
10738	Writes a file to the given channel .
10739	Unregisters an event ID .
10740	Returns true if the given event can be run .
10741	Creates a new DSE session .
10742	Creates a player error .
10743	Start playing music .
10744	Stop playing music
10745	Adds a command to the player .
10746	Create a new playlist
10747	Converts a playlist to a player .
10748	Appends post fix .
10749	Add a query parameter .
10750	Add a query parameter .
10751	Adds a query parameter .
10752	Add a query parameter .
10753	Get a playlist from an event model .
10754	This method is called when the activation button is started .
10755	Checks if the startup is finished .
10756	Check if a URL exists .
10757	Called when the browser button is clicked .
10758	Creates an image for an image .
10759	Main entry point for testing .
10760	Returns a copy of this array with the specified values .
10761	Export this object as a map .
10762	Returns the value at the given index .
10763	Returns the value associated with the given key .
10764	Returns the value as an integer .
10765	Returns the value as a double .
10766	Returns a string as a string .
10767	Creates a command resource .
10768	Verifies that the given command is valid .
10769	Verifies that the capabilities are supported .
10770	Verifies the given command and capabilities .
10771	Executes the given statement asynchronously .
10772	Returns all subclasses of the given class .
10773	Returns all subclasses of a given class .
10774	Searches for a class and returns the set of classes .
10775	Searches for the given class and returns a map of classes .
10776	Searches for a jar file .
10777	Converts this object to a list of resources .
10778	Returns the number of inner maps .
10779	Processes a packet .
10780	Get volume
10781	Sends an error message .
10782	Create an error response .
10783	Checks if an event model is target .
10784	Sets the login enabled .
10785	Decorate a set .
10786	Sets the name of the roster .
10787	Updates the state of this request .
10788	Returns a collection of all the groups contained in this roster entry .
10789	Append the RSM element to the query .
10790	Parse RSM element .
10791	Filters a list of objects from the rsm response .
10792	Creates a new leaving event .
10793	Reloads the roster .
10794	Create a roster entry .
10795	Returns a collection of all entries in the roster .
10796	Gets the presence resource for the given user .
10797	Set offline presence .
10798	Fire roster event .
10799	Sets the digest for the given connection ID .
10800	This method is used to generate a new resource .
10801	Creates a new player request .
10802	Gets time passed from event model .
10803	Registers a listener for updates .
10804	Initialize the properties file
10805	Reload properties .
10806	Parse stream error error .
10807	Parse the list of mechanisms .
10808	Parse the list of method methods .
10809	Parse a packet extension .
10810	Decodes the given string value into an object .
10811	Verify that the event model is valid .
10812	Extracts the playback state from a resource model .
10813	Returns the secret key for the given subdomain .
10814	Check if a subdomain is allowed .
10815	Adds a new entry to the cache .
10816	Returns the keys set .
10817	Returns a collection of values .
10818	Purges the given reference .
10819	Returns the entry for the specified key .
10820	Returns the hash code .
10821	Creates a new entry .
10822	Determines whether this event should be present or not .
10823	Sets whether the item should be present or not .
10824	Updates the presence level .
10825	Delivers a message .
10826	Generate a script .
10827	Initialize output directory .
10828	Load properties file .
10829	Writes a stanza to a file
10830	Gets the progress from an event model .
10831	Decorate the given collection .
10832	Returns a collection of service resolver .
10833	Returns the configuration .
10834	Gets the thread pool .
10835	Create a stop music .
10836	Verify that the given listener model is a stop sound .
10837	Gets a cluster .
10838	Adds a new connection listener .
10839	Adds a packet listener .
10840	Adds a packet listener to the packet .
10841	Notifies all listeners that a packet has been sent .
10842	Add a packet interceptor .
10843	Notifies all registered interceptors of a packet .
10844	Converts a value to an object .
10845	Called when a connection is lost .
10846	Gets the current thread id .
10847	Returns true if the node is valid .
10848	Gets the key for the given value .
10849	Gets the value at the specified index .
10850	Look up a valid node in the given data .
10851	Look up the node at the given index .
10852	Compares two objects .
10853	Returns the least node at the given index .
10854	Returns the right node of the given node .
10855	Returns the next greater than the given node .
10856	Returns the next node for the given node .
10857	Returns the next node in the given index .
10858	Copy a color to a node .
10859	Checks if the node is red .
10860	Returns true if the node is black .
10861	Gets the grand parent .
10862	Returns the parent node at the given index .
10863	Returns the right child of the specified node .
10864	Returns the left child of the given node .
10865	Rotate the left of a node .
10866	Rotate the right node .
10867	Reduce the node at the given index .
10868	Reduces a node .
10869	Checks that the given object is not null .
10870	Insert a new value into the map .
10871	Returns true if the specified key exists .
10872	Returns true if the specified value contains the specified value .
10873	Returns the value associated with the specified key .
10874	Removes the specified element .
10875	Removes all entries from the cache .
10876	Returns a set of key - value pairs .
10877	Returns a collection of values contained in this map .
10878	Returns a filtered set of entries .
10879	Copy all entries in this map .
10880	Removes expired entries from the cache .
10881	Removes the cache from the cache .
10882	Activates the target .
10883	Gets a player request .
10884	Creates a new roster store .
10885	Open a roster store .
10886	Scans a collection of addresses for a given address .
10887	Returns an InetAddress for the given subnet address .
10888	Export this object to a map .
10889	Import all tracks from hashmap .
10890	Adds all applications .
10891	Execute an application
10892	Prints the list .
10893	Print usage information .
10894	Entry point for testing .
10895	Creates a mute event .
10896	Creates a MuteEvent .
10897	Get schema by name .
10898	Writes a file to a file .
10899	Returns true if the job is in the jar .
10900	Adds an option .
10901	Get all Schema Schema Schema
10902	Gets the field by name .
10903	Returns the package name for a given entry .
10904	Map the contents of the given ImmutableMap to values .
10905	Creates a new event listener .
10906	Sets the state of this iteration .
10907	Iterate over the given collection .
10908	Perform an iterate over the iterable .
10909	Get track info from an event model
10910	Exports this object into a map .
10911	Import a resource from a resource model .
10912	Creates an error image .
10913	Gets the image .
10914	Gets a JSON response .
10915	Reverses the source map .
10916	Performs the multiplication operation .
10917	Start the daemon .
10918	Return the object .
10919	Creates an end event .
10920	Get the current track .
10921	Updates the track with the specified old track .
10922	Shuffles the track .
10923	Verifies whether the capabilities are valid .
10924	Exports this object to a map .
10925	Escapes a string .
10926	Called when a challenge is received .
10927	Serialize this object to a JSON string .
10928	Runs the queue .
10929	Handle event .
10930	Join all the queues .
10931	Sets a property .
10932	Remove a property .
10933	Adds a principal .
10934	Removes the principal .
10935	Called when the root window is closed .
10936	Called when the user has been encountered .
10937	This method is called when the presence of an event is present .
10938	Returns true if the resource model is permanent .
10939	Sets the name of the roster .
10940	Returns true if the specified key exists in this map .
10941	Returns true if the specified value contains the specified value .
10942	Adds an entry to the map .
10943	Clears the hash .
10944	Hashes a key .
10945	Compares two keys .
10946	Compares two values .
10947	Ensure that the capacity is at least one capacity .
10948	Calculates the new capacity .
10949	Creates an iterator over the entries .
10950	Loads a map from an input stream .
10951	Registers the module .
10952	Initialize this addOn .
10953	Notifies all listeners that a connection failed .
10954	Notify listeners that the connection has been established .
